"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Clients:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_clients_id_(self, request: operations.DeleteRealmClientsIDRequest) -> operations.DeleteRealmClientsIDResponse:
        r"""Delete the client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientsIDRequest, base_url, '/{realm}/clients/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_clients_id_default_client_scopes_client_scope_id_(self, request: operations.DeleteRealmClientsIDDefaultClientScopesClientScopeIDRequest) -> operations.DeleteRealmClientsIDDefaultClientScopesClientScopeIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientsIDDefaultClientScopesClientScopeIDRequest, base_url, '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientsIDDefaultClientScopesClientScopeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_clients_id_nodes_node_(self, request: operations.DeleteRealmClientsIDNodesNodeRequest) -> operations.DeleteRealmClientsIDNodesNodeResponse:
        r"""Unregister a cluster node from the client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientsIDNodesNodeRequest, base_url, '/{realm}/clients/{id}/nodes/{node}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientsIDNodesNodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_clients_id_optional_client_scopes_client_scope_id_(self, request: operations.DeleteRealmClientsIDOptionalClientScopesClientScopeIDRequest) -> operations.DeleteRealmClientsIDOptionalClientScopesClientScopeIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientsIDOptionalClientScopesClientScopeIDRequest, base_url, '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientsIDOptionalClientScopesClientScopeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_clients(self, request: operations.GetRealmClientsRequest) -> operations.GetRealmClientsResponse:
        r"""Get clients belonging to the realm   Returns a list of clients belonging to the realm"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsRequest, base_url, '/{realm}/clients', request)
        
        query_params = utils.get_query_params(operations.GetRealmClientsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ClientRepresentation]])
                res.client_representations = out

        return res

    def get_realm_clients_id_(self, request: operations.GetRealmClientsIDRequest) -> operations.GetRealmClientsIDResponse:
        r"""Get representation of the client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDRequest, base_url, '/{realm}/clients/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientRepresentation])
                res.client_representation = out

        return res

    def get_realm_clients_id_client_secret(self, request: operations.GetRealmClientsIDClientSecretRequest) -> operations.GetRealmClientsIDClientSecretResponse:
        r"""Get the client secret"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDClientSecretRequest, base_url, '/{realm}/clients/{id}/client-secret', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDClientSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CredentialRepresentation])
                res.credential_representation = out

        return res

    def get_realm_clients_id_default_client_scopes(self, request: operations.GetRealmClientsIDDefaultClientScopesRequest) -> operations.GetRealmClientsIDDefaultClientScopesResponse:
        r"""Get default client scopes."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDDefaultClientScopesRequest, base_url, '/{realm}/clients/{id}/default-client-scopes', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDDefaultClientScopesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ClientScopeRepresentation]])
                res.client_scope_representations = out

        return res

    def get_realm_clients_id_evaluate_scopes_generate_example_access_token(self, request: operations.GetRealmClientsIDEvaluateScopesGenerateExampleAccessTokenRequest) -> operations.GetRealmClientsIDEvaluateScopesGenerateExampleAccessTokenResponse:
        r"""Create JSON with payload of example access token"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDEvaluateScopesGenerateExampleAccessTokenRequest, base_url, '/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token', request)
        
        query_params = utils.get_query_params(operations.GetRealmClientsIDEvaluateScopesGenerateExampleAccessTokenRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDEvaluateScopesGenerateExampleAccessTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccessToken])
                res.access_token = out

        return res

    def get_realm_clients_id_evaluate_scopes_protocol_mappers(self, request: operations.GetRealmClientsIDEvaluateScopesProtocolMappersRequest) -> operations.GetRealmClientsIDEvaluateScopesProtocolMappersResponse:
        r"""Return list of all protocol mappers, which will be used when generating tokens issued for particular client."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDEvaluateScopesProtocolMappersRequest, base_url, '/{realm}/clients/{id}/evaluate-scopes/protocol-mappers', request)
        
        query_params = utils.get_query_params(operations.GetRealmClientsIDEvaluateScopesProtocolMappersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDEvaluateScopesProtocolMappersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation]])
                res.client_scope_evaluate_resource_protocol_mapper_evaluation_representations = out

        return res

    def get_realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_granted(self, request: operations.GetRealmClientsIDEvaluateScopesScopeMappingsRoleContainerIDGrantedRequest) -> operations.GetRealmClientsIDEvaluateScopesScopeMappingsRoleContainerIDGrantedResponse:
        r"""Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDEvaluateScopesScopeMappingsRoleContainerIDGrantedRequest, base_url, '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted', request)
        
        query_params = utils.get_query_params(operations.GetRealmClientsIDEvaluateScopesScopeMappingsRoleContainerIDGrantedRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDEvaluateScopesScopeMappingsRoleContainerIDGrantedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_not_granted(self, request: operations.GetRealmClientsIDEvaluateScopesScopeMappingsRoleContainerIDNotGrantedRequest) -> operations.GetRealmClientsIDEvaluateScopesScopeMappingsRoleContainerIDNotGrantedResponse:
        r"""Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDEvaluateScopesScopeMappingsRoleContainerIDNotGrantedRequest, base_url, '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted', request)
        
        query_params = utils.get_query_params(operations.GetRealmClientsIDEvaluateScopesScopeMappingsRoleContainerIDNotGrantedRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDEvaluateScopesScopeMappingsRoleContainerIDNotGrantedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_clients_id_installation_providers_provider_id_(self, request: operations.GetRealmClientsIDInstallationProvidersProviderIDRequest) -> operations.GetRealmClientsIDInstallationProvidersProviderIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDInstallationProvidersProviderIDRequest, base_url, '/{realm}/clients/{id}/installation/providers/{providerId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDInstallationProvidersProviderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_clients_id_management_permissions(self, request: operations.GetRealmClientsIDManagementPermissionsRequest) -> operations.GetRealmClientsIDManagementPermissionsResponse:
        r"""Return object stating whether client Authorization permissions have been initialized or not and a reference"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDManagementPermissionsRequest, base_url, '/{realm}/clients/{id}/management/permissions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDManagementPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagementPermissionReference])
                res.management_permission_reference = out

        return res

    def get_realm_clients_id_offline_session_count(self, request: operations.GetRealmClientsIDOfflineSessionCountRequest) -> operations.GetRealmClientsIDOfflineSessionCountResponse:
        r"""Get application offline session count   Returns a number of offline user sessions associated with this client   {      \\"count\\": number  }"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDOfflineSessionCountRequest, base_url, '/{realm}/clients/{id}/offline-session-count', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDOfflineSessionCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_realm_clients_id_offline_session_count_2_xx_application_json_object = out

        return res

    def get_realm_clients_id_offline_sessions(self, request: operations.GetRealmClientsIDOfflineSessionsRequest) -> operations.GetRealmClientsIDOfflineSessionsResponse:
        r"""Get offline sessions for client   Returns a list of offline user sessions associated with this client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDOfflineSessionsRequest, base_url, '/{realm}/clients/{id}/offline-sessions', request)
        
        query_params = utils.get_query_params(operations.GetRealmClientsIDOfflineSessionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDOfflineSessionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserSessionRepresentation]])
                res.user_session_representations = out

        return res

    def get_realm_clients_id_optional_client_scopes(self, request: operations.GetRealmClientsIDOptionalClientScopesRequest) -> operations.GetRealmClientsIDOptionalClientScopesResponse:
        r"""Get optional client scopes."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDOptionalClientScopesRequest, base_url, '/{realm}/clients/{id}/optional-client-scopes', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDOptionalClientScopesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ClientScopeRepresentation]])
                res.client_scope_representations = out

        return res

    def get_realm_clients_id_service_account_user(self, request: operations.GetRealmClientsIDServiceAccountUserRequest) -> operations.GetRealmClientsIDServiceAccountUserResponse:
        r"""Get a user dedicated to the service account"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDServiceAccountUserRequest, base_url, '/{realm}/clients/{id}/service-account-user', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDServiceAccountUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserRepresentation])
                res.user_representation = out

        return res

    def get_realm_clients_id_session_count(self, request: operations.GetRealmClientsIDSessionCountRequest) -> operations.GetRealmClientsIDSessionCountResponse:
        r"""Get application session count   Returns a number of user sessions associated with this client   {      \\"count\\": number  }"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDSessionCountRequest, base_url, '/{realm}/clients/{id}/session-count', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDSessionCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_realm_clients_id_session_count_2_xx_application_json_object = out

        return res

    def get_realm_clients_id_test_nodes_available(self, request: operations.GetRealmClientsIDTestNodesAvailableRequest) -> operations.GetRealmClientsIDTestNodesAvailableResponse:
        r"""Test if registered cluster nodes are available   Tests availability by sending 'ping' request to all cluster nodes."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDTestNodesAvailableRequest, base_url, '/{realm}/clients/{id}/test-nodes-available', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDTestNodesAvailableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalRequestResult])
                res.global_request_result = out

        return res

    def get_realm_clients_id_user_sessions(self, request: operations.GetRealmClientsIDUserSessionsRequest) -> operations.GetRealmClientsIDUserSessionsResponse:
        r"""Get user sessions for client   Returns a list of user sessions associated with this client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientsIDUserSessionsRequest, base_url, '/{realm}/clients/{id}/user-sessions', request)
        
        query_params = utils.get_query_params(operations.GetRealmClientsIDUserSessionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientsIDUserSessionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserSessionRepresentation]])
                res.user_session_representations = out

        return res

    def post_realm_clients(self, request: operations.PostRealmClientsRequest) -> operations.PostRealmClientsResponse:
        r"""Create a new client   Client’s client_id must be unique!"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsRequest, base_url, '/{realm}/clients', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "client_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_clients_id_client_secret(self, request: operations.PostRealmClientsIDClientSecretRequest) -> operations.PostRealmClientsIDClientSecretResponse:
        r"""Generate a new secret for the client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDClientSecretRequest, base_url, '/{realm}/clients/{id}/client-secret', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDClientSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CredentialRepresentation])
                res.credential_representation = out

        return res

    def post_realm_clients_id_nodes(self, request: operations.PostRealmClientsIDNodesRequest) -> operations.PostRealmClientsIDNodesResponse:
        r"""Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDNodesRequest, base_url, '/{realm}/clients/{id}/nodes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDNodesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_clients_id_push_revocation(self, request: operations.PostRealmClientsIDPushRevocationRequest) -> operations.PostRealmClientsIDPushRevocationResponse:
        r"""Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDPushRevocationRequest, base_url, '/{realm}/clients/{id}/push-revocation', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDPushRevocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalRequestResult])
                res.global_request_result = out

        return res

    def post_realm_clients_id_registration_access_token(self, request: operations.PostRealmClientsIDRegistrationAccessTokenRequest) -> operations.PostRealmClientsIDRegistrationAccessTokenResponse:
        r"""Generate a new registration access token for the client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientsIDRegistrationAccessTokenRequest, base_url, '/{realm}/clients/{id}/registration-access-token', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientsIDRegistrationAccessTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientRepresentation])
                res.client_representation = out

        return res

    def put_realm_clients_id_(self, request: operations.PutRealmClientsIDRequest) -> operations.PutRealmClientsIDResponse:
        r"""Update the client"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmClientsIDRequest, base_url, '/{realm}/clients/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "client_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmClientsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_clients_id_default_client_scopes_client_scope_id_(self, request: operations.PutRealmClientsIDDefaultClientScopesClientScopeIDRequest) -> operations.PutRealmClientsIDDefaultClientScopesClientScopeIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmClientsIDDefaultClientScopesClientScopeIDRequest, base_url, '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmClientsIDDefaultClientScopesClientScopeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_clients_id_management_permissions(self, request: operations.PutRealmClientsIDManagementPermissionsRequest) -> operations.PutRealmClientsIDManagementPermissionsResponse:
        r"""Return object stating whether client Authorization permissions have been initialized or not and a reference"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmClientsIDManagementPermissionsRequest, base_url, '/{realm}/clients/{id}/management/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "management_permission_reference", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmClientsIDManagementPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagementPermissionReference])
                res.management_permission_reference = out

        return res

    def put_realm_clients_id_optional_client_scopes_client_scope_id_(self, request: operations.PutRealmClientsIDOptionalClientScopesClientScopeIDRequest) -> operations.PutRealmClientsIDOptionalClientScopesClientScopeIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmClientsIDOptionalClientScopesClientScopeIDRequest, base_url, '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmClientsIDOptionalClientScopesClientScopeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    