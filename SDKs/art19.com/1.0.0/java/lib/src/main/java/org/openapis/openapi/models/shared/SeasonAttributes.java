/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class SeasonAttributes {
    /**
     * This will be replaced by the relationship `cascaded_cover_image` in a future update.&lt;br/&gt;
     * The image ID of the cover art for this season. If there is no specific cover for the season,
     * the image ID of the series' cover art will be returned.
     * The `/images` endpoint provideds details to the image.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cascaded_cover_image_id")
    public String cascadedCoverImageId;
    public SeasonAttributes withCascadedCoverImageId(String cascadedCoverImageId) {
        this.cascadedCoverImageId = cascadedCoverImageId;
        return this;
    }
    
    /**
     * This will be replaced by the relationship `cover_image` in a future update.&lt;br/&gt;
     * The image ID of the cover art for this season. The `/images` endpoint provideds details to the image.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover_image_id")
    public String coverImageId;
    public SeasonAttributes withCoverImageId(String coverImageId) {
        this.coverImageId = coverImageId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public SeasonAttributes withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The description of the season eventually in HTML format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public SeasonAttributes withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Determines whether `description` is in HTML format or plain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_is_html")
    public Boolean descriptionIsHtml;
    public SeasonAttributes withDescriptionIsHtml(Boolean descriptionIsHtml) {
        this.descriptionIsHtml = descriptionIsHtml;
        return this;
    }
    
    /**
     * The description with all HTML markup removed. If the description does not contain markup
     * this is identitcal to `description`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_plain")
    public String descriptionPlain;
    public SeasonAttributes withDescriptionPlain(String descriptionPlain) {
        this.descriptionPlain = descriptionPlain;
        return this;
    }
    
    /**
     * This will be replaced by the relationship `first_released_episode` in a future update.&lt;br/&gt;
     * The ID of the first released episode within the season
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_released_episode_id")
    public String firstReleasedEpisodeId;
    public SeasonAttributes withFirstReleasedEpisodeId(String firstReleasedEpisodeId) {
        this.firstReleasedEpisodeId = firstReleasedEpisodeId;
        return this;
    }
    
    /**
     * This will be replaced by the relationship `last_released_episode` in a future update.&lt;br/&gt;
     * The ID of the most recently released episode within the season
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_released_episode_id")
    public String lastReleasedEpisodeId;
    public SeasonAttributes withLastReleasedEpisodeId(String lastReleasedEpisodeId) {
        this.lastReleasedEpisodeId = lastReleasedEpisodeId;
        return this;
    }
    
    /**
     * The number of the season. This could be `null` as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("season_number")
    public Long seasonNumber;
    public SeasonAttributes withSeasonNumber(Long seasonNumber) {
        this.seasonNumber = seasonNumber;
        return this;
    }
    
    /**
     * The title of the season modified for sorting. This converts all characters to
     * lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort_title")
    public String sortTitle;
    public SeasonAttributes withSortTitle(String sortTitle) {
        this.sortTitle = sortTitle;
        return this;
    }
    
    /**
     * The current status of the season
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public SeasonAttributesStatusEnum status;
    public SeasonAttributes withStatus(SeasonAttributesStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The title of the season
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public SeasonAttributes withTitle(String title) {
        this.title = title;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public SeasonAttributes withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
