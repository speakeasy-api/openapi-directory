// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetDeploymentTargetXAmzTargetEnum
type GetDeploymentTargetXAmzTargetEnum string

const (
	GetDeploymentTargetXAmzTargetEnumCodeDeploy20141006GetDeploymentTarget GetDeploymentTargetXAmzTargetEnum = "CodeDeploy_20141006.GetDeploymentTarget"
)

func (e *GetDeploymentTargetXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.GetDeploymentTarget":
		*e = GetDeploymentTargetXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTargetXAmzTargetEnum: %s", s)
	}
}

type GetDeploymentTargetRequest struct {
	GetDeploymentTargetInput shared.GetDeploymentTargetInput   `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               GetDeploymentTargetXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetDeploymentTargetResponse struct {
	ContentType string
	// DeploymentDoesNotExistException
	DeploymentDoesNotExistException interface{}
	// DeploymentIdRequiredException
	DeploymentIDRequiredException interface{}
	// DeploymentNotStartedException
	DeploymentNotStartedException interface{}
	// DeploymentTargetDoesNotExistException
	DeploymentTargetDoesNotExistException interface{}
	// DeploymentTargetIdRequiredException
	DeploymentTargetIDRequiredException interface{}
	// Success
	GetDeploymentTargetOutput *shared.GetDeploymentTargetOutput
	// InvalidDeploymentIdException
	InvalidDeploymentIDException interface{}
	// InvalidDeploymentTargetIdException
	InvalidDeploymentTargetIDException interface{}
	// InvalidInstanceNameException
	InvalidInstanceNameException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
}
