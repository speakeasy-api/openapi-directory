// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// KioskCustomizationDeviceSettingsEnum - Specifies whether the Settings app is allowed in kiosk mode.
type KioskCustomizationDeviceSettingsEnum string

const (
	KioskCustomizationDeviceSettingsEnumDeviceSettingsUnspecified KioskCustomizationDeviceSettingsEnum = "DEVICE_SETTINGS_UNSPECIFIED"
	KioskCustomizationDeviceSettingsEnumSettingsAccessAllowed     KioskCustomizationDeviceSettingsEnum = "SETTINGS_ACCESS_ALLOWED"
	KioskCustomizationDeviceSettingsEnumSettingsAccessBlocked     KioskCustomizationDeviceSettingsEnum = "SETTINGS_ACCESS_BLOCKED"
)

func (e KioskCustomizationDeviceSettingsEnum) ToPointer() *KioskCustomizationDeviceSettingsEnum {
	return &e
}

func (e *KioskCustomizationDeviceSettingsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEVICE_SETTINGS_UNSPECIFIED":
		fallthrough
	case "SETTINGS_ACCESS_ALLOWED":
		fallthrough
	case "SETTINGS_ACCESS_BLOCKED":
		*e = KioskCustomizationDeviceSettingsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KioskCustomizationDeviceSettingsEnum: %v", v)
	}
}

// KioskCustomizationPowerButtonActionsEnum - Sets the behavior of a device in kiosk mode when a user presses and holds (long-presses) the Power button.
type KioskCustomizationPowerButtonActionsEnum string

const (
	KioskCustomizationPowerButtonActionsEnumPowerButtonActionsUnspecified KioskCustomizationPowerButtonActionsEnum = "POWER_BUTTON_ACTIONS_UNSPECIFIED"
	KioskCustomizationPowerButtonActionsEnumPowerButtonAvailable          KioskCustomizationPowerButtonActionsEnum = "POWER_BUTTON_AVAILABLE"
	KioskCustomizationPowerButtonActionsEnumPowerButtonBlocked            KioskCustomizationPowerButtonActionsEnum = "POWER_BUTTON_BLOCKED"
)

func (e KioskCustomizationPowerButtonActionsEnum) ToPointer() *KioskCustomizationPowerButtonActionsEnum {
	return &e
}

func (e *KioskCustomizationPowerButtonActionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POWER_BUTTON_ACTIONS_UNSPECIFIED":
		fallthrough
	case "POWER_BUTTON_AVAILABLE":
		fallthrough
	case "POWER_BUTTON_BLOCKED":
		*e = KioskCustomizationPowerButtonActionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KioskCustomizationPowerButtonActionsEnum: %v", v)
	}
}

// KioskCustomizationStatusBarEnum - Specifies whether system info and notifications are disabled in kiosk mode.
type KioskCustomizationStatusBarEnum string

const (
	KioskCustomizationStatusBarEnumStatusBarUnspecified               KioskCustomizationStatusBarEnum = "STATUS_BAR_UNSPECIFIED"
	KioskCustomizationStatusBarEnumNotificationsAndSystemInfoEnabled  KioskCustomizationStatusBarEnum = "NOTIFICATIONS_AND_SYSTEM_INFO_ENABLED"
	KioskCustomizationStatusBarEnumNotificationsAndSystemInfoDisabled KioskCustomizationStatusBarEnum = "NOTIFICATIONS_AND_SYSTEM_INFO_DISABLED"
	KioskCustomizationStatusBarEnumSystemInfoOnly                     KioskCustomizationStatusBarEnum = "SYSTEM_INFO_ONLY"
)

func (e KioskCustomizationStatusBarEnum) ToPointer() *KioskCustomizationStatusBarEnum {
	return &e
}

func (e *KioskCustomizationStatusBarEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATUS_BAR_UNSPECIFIED":
		fallthrough
	case "NOTIFICATIONS_AND_SYSTEM_INFO_ENABLED":
		fallthrough
	case "NOTIFICATIONS_AND_SYSTEM_INFO_DISABLED":
		fallthrough
	case "SYSTEM_INFO_ONLY":
		*e = KioskCustomizationStatusBarEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KioskCustomizationStatusBarEnum: %v", v)
	}
}

// KioskCustomizationSystemErrorWarningsEnum - Specifies whether system error dialogs for crashed or unresponsive apps are blocked in kiosk mode. When blocked, the system will force-stop the app as if the user chooses the "close app" option on the UI.
type KioskCustomizationSystemErrorWarningsEnum string

const (
	KioskCustomizationSystemErrorWarningsEnumSystemErrorWarningsUnspecified KioskCustomizationSystemErrorWarningsEnum = "SYSTEM_ERROR_WARNINGS_UNSPECIFIED"
	KioskCustomizationSystemErrorWarningsEnumErrorAndWarningsEnabled        KioskCustomizationSystemErrorWarningsEnum = "ERROR_AND_WARNINGS_ENABLED"
	KioskCustomizationSystemErrorWarningsEnumErrorAndWarningsMuted          KioskCustomizationSystemErrorWarningsEnum = "ERROR_AND_WARNINGS_MUTED"
)

func (e KioskCustomizationSystemErrorWarningsEnum) ToPointer() *KioskCustomizationSystemErrorWarningsEnum {
	return &e
}

func (e *KioskCustomizationSystemErrorWarningsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SYSTEM_ERROR_WARNINGS_UNSPECIFIED":
		fallthrough
	case "ERROR_AND_WARNINGS_ENABLED":
		fallthrough
	case "ERROR_AND_WARNINGS_MUTED":
		*e = KioskCustomizationSystemErrorWarningsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KioskCustomizationSystemErrorWarningsEnum: %v", v)
	}
}

// KioskCustomizationSystemNavigationEnum - Specifies which navigation features are enabled (e.g. Home, Overview buttons) in kiosk mode.
type KioskCustomizationSystemNavigationEnum string

const (
	KioskCustomizationSystemNavigationEnumSystemNavigationUnspecified KioskCustomizationSystemNavigationEnum = "SYSTEM_NAVIGATION_UNSPECIFIED"
	KioskCustomizationSystemNavigationEnumNavigationEnabled           KioskCustomizationSystemNavigationEnum = "NAVIGATION_ENABLED"
	KioskCustomizationSystemNavigationEnumNavigationDisabled          KioskCustomizationSystemNavigationEnum = "NAVIGATION_DISABLED"
	KioskCustomizationSystemNavigationEnumHomeButtonOnly              KioskCustomizationSystemNavigationEnum = "HOME_BUTTON_ONLY"
)

func (e KioskCustomizationSystemNavigationEnum) ToPointer() *KioskCustomizationSystemNavigationEnum {
	return &e
}

func (e *KioskCustomizationSystemNavigationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SYSTEM_NAVIGATION_UNSPECIFIED":
		fallthrough
	case "NAVIGATION_ENABLED":
		fallthrough
	case "NAVIGATION_DISABLED":
		fallthrough
	case "HOME_BUTTON_ONLY":
		*e = KioskCustomizationSystemNavigationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KioskCustomizationSystemNavigationEnum: %v", v)
	}
}

// KioskCustomization - Settings controlling the behavior of a device in kiosk mode. To enable kiosk mode, set kioskCustomLauncherEnabled to true or specify an app in the policy with installType KIOSK.
type KioskCustomization struct {
	// Specifies whether the Settings app is allowed in kiosk mode.
	DeviceSettings *KioskCustomizationDeviceSettingsEnum `json:"deviceSettings,omitempty"`
	// Sets the behavior of a device in kiosk mode when a user presses and holds (long-presses) the Power button.
	PowerButtonActions *KioskCustomizationPowerButtonActionsEnum `json:"powerButtonActions,omitempty"`
	// Specifies whether system info and notifications are disabled in kiosk mode.
	StatusBar *KioskCustomizationStatusBarEnum `json:"statusBar,omitempty"`
	// Specifies whether system error dialogs for crashed or unresponsive apps are blocked in kiosk mode. When blocked, the system will force-stop the app as if the user chooses the "close app" option on the UI.
	SystemErrorWarnings *KioskCustomizationSystemErrorWarningsEnum `json:"systemErrorWarnings,omitempty"`
	// Specifies which navigation features are enabled (e.g. Home, Overview buttons) in kiosk mode.
	SystemNavigation *KioskCustomizationSystemNavigationEnum `json:"systemNavigation,omitempty"`
}
