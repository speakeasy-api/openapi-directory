<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - All about Numbers. REST access with json/xml/jsonp result support. Below is the documentation for the Numbers API. You can try them out right here. Find more information and subscribe at [math.tools](https://math.tools/api/numbers/)  
 * 
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://api.math.tools',
		'http://api.math.tools',
	];
  	
    /**
     * Convert from one base to another. This API is free (rate limited).
     * 
     * @var BaseConversion $$baseConversion
     */
	public BaseConversion $baseConversion;
	
    /**
     * Check Property of a given number.
     * 
     * @var NumberChecks $$numberChecks
     */
	public NumberChecks $numberChecks;
	
    /**
     * Get random interesting fact about a given number.
     * 
     * @var NumberFacts $$numberFacts
     */
	public NumberFacts $numberFacts;
	
    /**
     * Generate Random and interesting numbers.
     * 
     * @var NumberGeneration $$numberGeneration
     */
	public NumberGeneration $numberGeneration;
	
    /**
     * Convert from one number system to another.
     * 
     * @var NumberSystemsConversion $$numberSystemsConversion
     */
	public NumberSystemsConversion $numberSystemsConversion;
	
    /**
     * Number of the day. This API is free (rate limited).
     * 
     * @var NumberOfTheDay $$numberOfTheDay
     */
	public NumberOfTheDay $numberOfTheDay;
	
    /**
     * Digits of PI and more.This API is free (rate limited).
     * 
     * @var Pi $$pi
     */
	public Pi $pi;
	
    /**
     * Things to do with Prime numbers
     * 
     * @var Prime $$prime
     */
	public Prime $prime;
	
    /**
     * Spell out a number ordinal, cardinal or currency. This API is free (rate limited).
     * 
     * @var Spell $$spell
     */
	public Spell $spell;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->baseConversion = new BaseConversion(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->numberChecks = new NumberChecks(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->numberFacts = new NumberFacts(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->numberGeneration = new NumberGeneration(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->numberSystemsConversion = new NumberSystemsConversion(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->numberOfTheDay = new NumberOfTheDay(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->pi = new Pi(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->prime = new Prime(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->spell = new Spell(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}