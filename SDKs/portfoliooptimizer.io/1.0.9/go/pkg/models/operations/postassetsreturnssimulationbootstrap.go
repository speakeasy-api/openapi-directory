// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostAssetsReturnsSimulationBootstrapRequestBodyAssets struct {
	// assetReturns[t] is the return of the asset over the time period t; all the assetReturns arrays must have the same length
	AssetReturns []float64 `json:"assetReturns"`
}

// PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum - The bootstrap method to use
type PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum string

const (
	PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnumIid             PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum = "iid"
	PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnumCircularBlock   PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum = "circularBlock"
	PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnumStationaryBlock PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum = "stationaryBlock"
)

func (e *PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "iid":
		fallthrough
	case "circularBlock":
		fallthrough
	case "stationaryBlock":
		*e = PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum: %s", s)
	}
}

type PostAssetsReturnsSimulationBootstrapRequestBody struct {
	Assets []PostAssetsReturnsSimulationBootstrapRequestBodyAssets `json:"assets"`
	// The average length of the blocks to use in case the bootstrap method is 'stationaryBlock', in time periods; if not provided, defaults to the inverse of 3.15 * the common length of the assetReturns arrays^1/3
	BootstrapAverageBlockLength *float64 `json:"bootstrapAverageBlockLength,omitempty"`
	// The length of the blocks to use in case the bootstrap method is 'circularBlock', in time periods; if not provided, defaults to [3.15 * the common length of the assetReturns arrays^1/3]
	BootstrapBlockLength *int64 `json:"bootstrapBlockLength,omitempty"`
	// The bootstrap method to use
	BootstrapMethod *PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum `json:"bootstrapMethod,omitempty"`
	// The number of simulations to perform
	Simulations *int64 `json:"simulations,omitempty"`
	// The number of time period(s) to simulate per simulation; if not provided, defaults to the common length of the assetReturns arrays
	SimulationsLength *int64 `json:"simulationsLength,omitempty"`
}

type PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulationsAssets struct {
	// assetReturns[t] is the simulated return of the i-th asset for the t-th time period, in percentage
	AssetReturns []float64 `json:"assetReturns"`
}

type PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulations struct {
	// assets[i] is the data for the i-th asset
	Assets []PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulationsAssets `json:"assets"`
}

// PostAssetsReturnsSimulationBootstrap200ApplicationJSON - OK
type PostAssetsReturnsSimulationBootstrap200ApplicationJSON struct {
	Simulations []PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulations `json:"simulations"`
}

type PostAssetsReturnsSimulationBootstrapResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PostAssetsReturnsSimulationBootstrap200ApplicationJSONObject *PostAssetsReturnsSimulationBootstrap200ApplicationJSON
}
