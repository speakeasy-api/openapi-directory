/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonValue;

/**
 * GetDASHStreamingSessionURLRequestBodyPlaybackModeEnum - &lt;p&gt;Whether to retrieve live, live replay, or archived, on-demand data.&lt;/p&gt; &lt;p&gt;Features of the three types of sessions include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;LIVE&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the MPEG-DASH manifest is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new manifest on a one-second interval. When this type of session is played in a media player, the user interface typically displays a "live" notification, with no scrubber control for choosing the position in the playback window to display.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In &lt;code&gt;LIVE&lt;/code&gt; mode, the newest available fragments are included in an MPEG-DASH manifest, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the MPEG-DASH manifest if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the manifest, the older fragment is not added, and the gap is not filled.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;LIVE_REPLAY&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the MPEG-DASH manifest is updated similarly to how it is updated for &lt;code&gt;LIVE&lt;/code&gt; mode except that it starts by including fragments from a given start time. Instead of fragments being added as they are ingested, fragments are added as the duration of the next fragment elapses. For example, if the fragments in the session are two seconds long, then a new fragment is added to the manifest every two seconds. This mode is useful to be able to start playback from when an event is detected and continue live streaming media that has not yet been ingested as of the time of the session creation. This mode is also useful to stream previously archived media without being limited by the 1,000 fragment limit in the &lt;code&gt;ON_DEMAND&lt;/code&gt; mode. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;ON_DEMAND&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the MPEG-DASH manifest contains all the fragments for the session, up to the number that is specified in &lt;code&gt;MaxManifestFragmentResults&lt;/code&gt;. The manifest must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In all playback modes, if &lt;code&gt;FragmentSelectorType&lt;/code&gt; is &lt;code&gt;PRODUCER_TIMESTAMP&lt;/code&gt;, and if there are multiple fragments with the same start timestamp, the fragment that has the larger fragment number (that is, the newer fragment) is included in the MPEG-DASH manifest. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the MPEG-DASH manifest. This can lead to unexpected behavior in the media player.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt;
 */
public enum GetDASHStreamingSessionURLRequestBodyPlaybackModeEnum {
    LIVE("LIVE"),
    LIVE_REPLAY("LIVE_REPLAY"),
    ON_DEMAND("ON_DEMAND");

    @JsonValue
    public final String value;

    private GetDASHStreamingSessionURLRequestBodyPlaybackModeEnum(String value) {
        this.value = value;
    }
}
