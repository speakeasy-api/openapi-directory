// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetDirectoryLimitsXAmzTargetEnum
type GetDirectoryLimitsXAmzTargetEnum string

const (
	GetDirectoryLimitsXAmzTargetEnumDirectoryService20150416GetDirectoryLimits GetDirectoryLimitsXAmzTargetEnum = "DirectoryService_20150416.GetDirectoryLimits"
)

func (e *GetDirectoryLimitsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DirectoryService_20150416.GetDirectoryLimits":
		*e = GetDirectoryLimitsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDirectoryLimitsXAmzTargetEnum: %s", s)
	}
}

type GetDirectoryLimitsHeaders struct {
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetDirectoryLimitsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetDirectoryLimitsRequest struct {
	Headers GetDirectoryLimitsHeaders
	Request map[string]interface{} `request:"mediaType=application/json"`
}

type GetDirectoryLimitsResponse struct {
	// ClientException
	ClientException interface{}
	ContentType     string
	// EntityDoesNotExistException
	EntityDoesNotExistException interface{}
	// Success
	GetDirectoryLimitsResult *shared.GetDirectoryLimitsResult
	StatusCode               int
	RawResponse              *http.Response
	// ServiceException
	ServiceException interface{}
}
