<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TargetHttpsProxies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesAggregatedListResponse
     */
	public function computeTargetHttpsProxiesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/targetHttpsProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetHttpsProxyAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetHttpsProxyAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified TargetHttpsProxy resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesDeleteResponse
     */
	public function computeTargetHttpsProxiesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified TargetHttpsProxy resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesGetResponse
     */
	public function computeTargetHttpsProxiesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetHttpsProxy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetHttpsProxy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a TargetHttpsProxy resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesInsertResponse
     */
	public function computeTargetHttpsProxiesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetHttpsProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetHttpsProxy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of TargetHttpsProxy resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesListResponse
     */
	public function computeTargetHttpsProxiesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetHttpsProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetHttpsProxyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetHttpsProxyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified TargetHttpsProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesPatchResponse
     */
	public function computeTargetHttpsProxiesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetHttpsProxy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the Certificate Map for TargetHttpsProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetCertificateMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetCertificateMapSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetCertificateMapResponse
     */
	public function computeTargetHttpsProxiesSetCertificateMap(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetCertificateMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetCertificateMapSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetCertificateMapResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setCertificateMap', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetCertificateMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetHttpsProxiesSetCertificateMapRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetCertificateMapRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetCertificateMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the QUIC override policy for TargetHttpsProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetQuicOverrideRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetQuicOverrideSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetQuicOverrideResponse
     */
	public function computeTargetHttpsProxiesSetQuicOverride(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetQuicOverrideRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetQuicOverrideSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetQuicOverrideResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetQuicOverrideRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetHttpsProxiesSetQuicOverrideRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetQuicOverrideRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetQuicOverrideResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces SslCertificates for TargetHttpsProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslCertificatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslCertificatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslCertificatesResponse
     */
	public function computeTargetHttpsProxiesSetSslCertificates(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslCertificatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslCertificatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslCertificatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslCertificatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetHttpsProxiesSetSslCertificatesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslCertificatesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslCertificatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslPolicyResponse
     */
	public function computeTargetHttpsProxiesSetSslPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sslPolicyReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetSslPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the URL map for TargetHttpsProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetUrlMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetUrlMapSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetUrlMapResponse
     */
	public function computeTargetHttpsProxiesSetUrlMap(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetUrlMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetUrlMapSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetUrlMapResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetUrlMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlMapReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetUrlMapRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesSetUrlMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesTestIamPermissionsResponse
     */
	public function computeTargetHttpsProxiesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetHttpsProxiesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}