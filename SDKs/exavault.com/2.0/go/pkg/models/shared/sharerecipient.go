// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ShareRecipientTypeEnum - Type of the recipient.
type ShareRecipientTypeEnum string

const (
	ShareRecipientTypeEnumOwner  ShareRecipientTypeEnum = "owner"
	ShareRecipientTypeEnumDirect ShareRecipientTypeEnum = "direct"
)

func (e ShareRecipientTypeEnum) ToPointer() *ShareRecipientTypeEnum {
	return &e
}

func (e *ShareRecipientTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "owner":
		fallthrough
	case "direct":
		*e = ShareRecipientTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareRecipientTypeEnum: %v", v)
	}
}

type ShareRecipient struct {
	// Timestamp of adding recipient to the share.
	Created *time.Time `json:"created,omitempty"`
	// Recipient email address.
	Email *string `json:"email,omitempty"`
	// Share hash.
	Hash *string `json:"hash,omitempty"`
	// ID of the recipient.
	ID *int `json:"id,omitempty"`
	// Set to true if recipient has accessed the share. Note this is set to true when the recipient clicks the link to access the share; not when they download a file.
	Received *bool `json:"received,omitempty"`
	// Set to true if invite email was sent; false otherwise.
	Sent *bool `json:"sent,omitempty"`
	// ID of the share that the recipoient belongs to.
	ShareID *string `json:"shareId,omitempty"`
	// Type of the recipient.
	Type *ShareRecipientTypeEnum `json:"type,omitempty"`
}
