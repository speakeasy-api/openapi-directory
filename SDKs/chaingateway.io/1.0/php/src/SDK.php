<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - # Chaingateway.io
 * 
 * 
 * REST API to build the bridge between Ethereum and the real world
 * 
 * Please check out our [website](https://chaingateway.io?utm_source=postman) for detailed information about this API.
 * 
 * To use our API, you need an API Key (Described as Authorization header in the examples below).
 * To get one, please create an account on our [website](https://chaingateway.io/register?utm_source=postman).
 * 
 * For our internal documentation, please check out our [Docs Site](https://chaingateway.io/docs?utm_source=postman).
 * 
 * If you need help with integrating our API in your application, you can reach us via [email](mailto:support@chaingateway.io) or join our official [Telegram](https://t.me/chaingateway) group.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://eu.eth.chaingateway.io/v1',
	];
  	
    /**
     * Requests to create, list and delete addresses
     * 
     * @var AddressRequests $$addressRequests
     */
	public AddressRequests $addressRequests;
	
    /**
     * Requests that return information on balances, transactions, gas price, exchange rates, ...
     * 
     * @var InfoRequests $$infoRequests
     */
	public InfoRequests $infoRequests;
	
    /**
     * Requests for creating, deleting and listing existing subscriptions
     * 
     * @var SubscriptionIPNRequests $$subscriptionIPNRequests
     */
	public SubscriptionIPNRequests $subscriptionIPNRequests;
	
    /**
     * Requests to send Tokens, Ethereum and clear addresses
     * 
     * @var TransactionRequests $$transactionRequests
     */
	public TransactionRequests $transactionRequests;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->addressRequests = new AddressRequests(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->infoRequests = new InfoRequests(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->subscriptionIPNRequests = new SubscriptionIPNRequests(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->transactionRequests = new TransactionRequests(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}