"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnum(str, Enum):
    UNKNOWN = ''
    DEFAULT = 'DEFAULT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchema:
    
    battery_capacity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batteryCapacity'), 'exclude': lambda f: f is None }})
    r"""Vehicle's maximum physical battery capacity in kWh. This number slowly decreases/degrades over time."""  
    battery_level: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batteryLevel'), 'exclude': lambda f: f is None }})
    r"""Remaining battery in percent"""  
    charge_limit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeLimit'), 'exclude': lambda f: f is None }})
    r"""Charge limit, as a percent of `batteryCapacity`."""  
    charge_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeRate'), 'exclude': lambda f: f is None }})
    r"""The current charge rate in kW.
    
    This property is only available when the vehicle is charging, and is `null` any other time.
    """  
    charge_time_remaining: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeTimeRemaining'), 'exclude': lambda f: f is None }})
    r"""Estimated time until the current charging intent is completed, in minutes.
    
    This property is only available when the vehicle is charging, and is `null` any other time.
    """  
    is_charging: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCharging'), 'exclude': lambda f: f is None }})
    r"""Current charging status of the vehicle"""  
    is_charging_reasons: Optional[list[Onevehicles1Percent7BvehicleIDPercent7D1chargeStateGetResponses200ContentApplication1jsonSchemaIsChargingReasonsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isChargingReasons'), 'exclude': lambda f: f is None }})
    r"""Array of string constants that explain why the car is or is not charging. May contain multiple values.
    
    **Any:**
    - DEFAULT - the car is not being controlled by Enode
    
    **Not Charging:**
    - NOT_PLUGGED_IN - because the car is not plugged into a charger
    - FULLY_CHARGED - because the car is fully charged
    - MANUALLY_STOPPED - because the car has been manually commanded to stop charging
    - SMART_CHARGING_DELAY - because Smart Charging has identified an opportunity to delay charging until prices are lower
    
    **Charging:**
    - MANUALLY_STARTED - because the car has been manually commanded to start charging
    - SMART_CHARGING_ACTIVE - because Smart Charging has identified that this is an optimal time to charge
    - SMART_CHARGING_DEADLINE - because, regardless of price, charging must be active to meet the configured deadline
    """  
    is_plugged_in: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPluggedIn'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the vehicle is connected to a charging box (regardless of whether it is actually charging)"""  
    range: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('range'), 'exclude': lambda f: f is None }})
    r"""Estimated remaining kilometers"""  
    