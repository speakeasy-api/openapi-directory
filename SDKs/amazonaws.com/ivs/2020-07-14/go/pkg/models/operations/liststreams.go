// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// ListStreamsRequestBodyFilterBy - Object specifying the stream attribute on which to filter.
type ListStreamsRequestBodyFilterBy struct {
	Health *shared.StreamHealthEnum `json:"health,omitempty"`
}

type ListStreamsRequestBody struct {
	// Object specifying the stream attribute on which to filter.
	FilterBy *ListStreamsRequestBodyFilterBy `json:"filterBy,omitempty"`
	// Maximum number of streams to return. Default: 100.
	MaxResults *int64 `json:"maxResults,omitempty"`
	// The first stream to retrieve. This is used for pagination; see the <code>nextToken</code> response field.
	NextToken *string `json:"nextToken,omitempty"`
}

type ListStreamsRequest struct {
	RequestBody       ListStreamsRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListStreamsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	ListStreamsResponse *shared.ListStreamsResponse
	StatusCode          int
	RawResponse         *http.Response
	// ValidationException
	ValidationException interface{}
}
