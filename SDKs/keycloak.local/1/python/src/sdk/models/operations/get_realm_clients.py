"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import clientrepresentation as shared_clientrepresentation
from typing import Optional


@dataclasses.dataclass
class GetRealmClientsRequest:
    
    realm: str = dataclasses.field(metadata={'path_param': { 'field_name': 'realm', 'style': 'simple', 'explode': False }})
    r"""realm name (not id!)"""  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'clientId', 'style': 'form', 'explode': True }})
    r"""filter by clientId"""  
    first: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'first', 'style': 'form', 'explode': True }})
    r"""the first result"""  
    max: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max', 'style': 'form', 'explode': True }})
    r"""the max results to return"""  
    search: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search', 'style': 'form', 'explode': True }})
    r"""whether this is a search query or a getClientById query"""  
    viewable_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'viewableOnly', 'style': 'form', 'explode': True }})
    r"""filter clients that cannot be viewed in full by admin"""  
    

@dataclasses.dataclass
class GetRealmClientsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    client_representations: Optional[list[shared_clientrepresentation.ClientRepresentation]] = dataclasses.field(default=None)
    r"""success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    