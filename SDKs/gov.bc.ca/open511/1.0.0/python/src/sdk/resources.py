"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Resources:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_areas(self, request: operations.GetAreasRequest) -> operations.GetAreasResponse:
        r"""Lists the geographical areas (e.g. districts) that can be used to filter events."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/areas'
        
        query_params = utils.get_query_params(operations.GetAreasRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAreasResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_events(self, request: operations.GetEventsRequest) -> operations.GetEventsResponse:
        r"""Lists road events
        The events resource provides information about road events (e.g. accidents, construction, special events). The response is a list of event elements matching the filtering parameters if any are provided.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/events'
        
        query_params = utils.get_query_params(operations.GetEventsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_jurisdiction(self, request: operations.GetJurisdictionRequest) -> operations.GetJurisdictionResponse:
        r"""Lists the jurisdictions publishing data through this Open511 API implementation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/jurisdiction'
        
        query_params = utils.get_query_params(operations.GetJurisdictionRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetJurisdictionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_jurisdictiongeography(self, request: operations.GetJurisdictiongeographyRequest) -> operations.GetJurisdictiongeographyResponse:
        r"""Provides the geographical boundaries for all the jurisdictions."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/jurisdictiongeography'
        
        query_params = utils.get_query_params(operations.GetJurisdictiongeographyRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetJurisdictiongeographyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    