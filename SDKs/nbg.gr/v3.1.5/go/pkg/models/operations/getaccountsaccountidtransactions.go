// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GetAccountsAccountIDTransactionsSecurity struct {
	AuthorizationCodeToken string `security:"scheme,type=oauth2,name=Authorization"`
	ClientID               string `security:"scheme,type=apiKey,subtype=header,name=Client-Id"`
}

type GetAccountsAccountIDTransactionsRequest struct {
	// AccountId
	AccountID string `pathParam:"style=simple,explode=false,name=accountId"`
	// The UTC ISO 8601 Date Time to filter transactions FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component.
	FromBookingDateTime *time.Time `queryParam:"style=form,explode=true,name=fromBookingDateTime"`
	// The unique id of the sandbox to be used
	SandboxID string `header:"style=simple,explode=false,name=sandbox-id"`
	// The UTC ISO 8601 Date Time to filter transactions TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component.
	ToBookingDateTime *time.Time `queryParam:"style=form,explode=true,name=toBookingDateTime"`
	// Indicates the user-agent that the PSU is using.
	XCustomerUserAgent *string `header:"style=simple,explode=false,name=x-customer-user-agent"`
	// The time when the PSU last logged in with the TPP.
	// All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:
	// Sun, 10 Sep 2017 19:43:31 UTC
	XFapiAuthDate *string `header:"style=simple,explode=false,name=x-fapi-auth-date"`
	// The PSU's IP address if the PSU is currently logged in with the TPP.
	XFapiCustomerIPAddress *string `header:"style=simple,explode=false,name=x-fapi-customer-ip-address"`
	// An RFC4122 UID used as a correlation id.
	XFapiInteractionID *string `header:"style=simple,explode=false,name=x-fapi-interaction-id"`
}

type GetAccountsAccountIDTransactionsResponse struct {
	ContentType string
	// Bad request
	OBErrorResponse1 *shared.OBErrorResponse1
	// Transactions Read
	OBReadTransaction6 *shared.OBReadTransaction6
	StatusCode         int
	RawResponse        *http.Response
}
