/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CodePushDeploymentReleasesCreateRequestBody - The necessary information required to download the bundle and being the release process.
 */
public class CodePushDeploymentReleasesCreateRequestBody {
    /**
     * This specifies which deployment you want to release the update to. Default is Staging.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deployment_name")
    public String deploymentName;

    public CodePushDeploymentReleasesCreateRequestBody withDeploymentName(String deploymentName) {
        this.deploymentName = deploymentName;
        return this;
    }
    
    /**
     * This provides an optional "change log" for the deployment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public CodePushDeploymentReleasesCreateRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * This specifies whether an update should be downloadable by end users or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    public Boolean disabled;

    public CodePushDeploymentReleasesCreateRequestBody withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }
    
    /**
     * This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mandatory")
    public Boolean mandatory;

    public CodePushDeploymentReleasesCreateRequestBody withMandatory(Boolean mandatory) {
        this.mandatory = mandatory;
        return this;
    }
    
    /**
     * This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("no_duplicate_release_error")
    public Boolean noDuplicateReleaseError;

    public CodePushDeploymentReleasesCreateRequestBody withNoDuplicateReleaseError(Boolean noDuplicateReleaseError) {
        this.noDuplicateReleaseError = noDuplicateReleaseError;
        return this;
    }
    
    /**
     * The upload metadata from the release initialization step.
     */
    @JsonProperty("release_upload")
    public CodePushDeploymentReleasesCreateRequestBodyReleaseUpload releaseUpload;

    public CodePushDeploymentReleasesCreateRequestBody withReleaseUpload(CodePushDeploymentReleasesCreateRequestBodyReleaseUpload releaseUpload) {
        this.releaseUpload = releaseUpload;
        return this;
    }
    
    /**
     * This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rollout")
    public Long rollout;

    public CodePushDeploymentReleasesCreateRequestBody withRollout(Long rollout) {
        this.rollout = rollout;
        return this;
    }
    
    /**
     * the binary version of the application
     */
    @JsonProperty("target_binary_version")
    public String targetBinaryVersion;

    public CodePushDeploymentReleasesCreateRequestBody withTargetBinaryVersion(String targetBinaryVersion) {
        this.targetBinaryVersion = targetBinaryVersion;
        return this;
    }
    
    public CodePushDeploymentReleasesCreateRequestBody(@JsonProperty("release_upload") CodePushDeploymentReleasesCreateRequestBodyReleaseUpload releaseUpload, @JsonProperty("target_binary_version") String targetBinaryVersion) {
        this.releaseUpload = releaseUpload;
        this.targetBinaryVersion = targetBinaryVersion;
  }
}
