"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import filemodes as shared_filemodes
from ..shared import filesizes as shared_filesizes
from ..shared import isbinaryfile as shared_isbinaryfile
from ..shared import mergeoperations as shared_mergeoperations
from ..shared import objecttypes as shared_objecttypes
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConflictMetadata:
    r"""Information about the metadata for a conflict in a merge operation."""
    
    content_conflict: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentConflict'), 'exclude': lambda f: f is None }})  
    file_mode_conflict: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileModeConflict'), 'exclude': lambda f: f is None }})  
    file_modes: Optional[shared_filemodes.FileModes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileModes'), 'exclude': lambda f: f is None }})  
    file_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filePath'), 'exclude': lambda f: f is None }})  
    file_sizes: Optional[shared_filesizes.FileSizes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileSizes'), 'exclude': lambda f: f is None }})  
    is_binary_file: Optional[shared_isbinaryfile.IsBinaryFile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isBinaryFile'), 'exclude': lambda f: f is None }})  
    merge_operations: Optional[shared_mergeoperations.MergeOperations] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mergeOperations'), 'exclude': lambda f: f is None }})  
    number_of_conflicts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfConflicts'), 'exclude': lambda f: f is None }})  
    object_type_conflict: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectTypeConflict'), 'exclude': lambda f: f is None }})  
    object_types: Optional[shared_objecttypes.ObjectTypes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectTypes'), 'exclude': lambda f: f is None }})  
    