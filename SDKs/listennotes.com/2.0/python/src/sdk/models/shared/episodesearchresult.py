"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EpisodeSearchResultPodcast:
    r"""The podcast that this episode belongs to."""
    
    genre_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genre_ids'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Podcast id, which can be used to further fetch detailed podcast metadata via `GET /podcasts/{id}`."""  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Image url for this podcast's artwork. If you are using PRO/ENTERPRISE plan, then it's
    a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**,
    low resolution image (300x300).
    """  
    listen_score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listen_score'), 'exclude': lambda f: f is None }})
    r"""The estimated popularity score of a podcast compared to all other rss-based public podcasts in the world on a scale from 0 to 100.
    If the score is not available, it'll be null. Learn more at listennotes.com/listen-score
    """  
    listen_score_global_rank: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listen_score_global_rank'), 'exclude': lambda f: f is None }})
    r"""The estimated popularity ranking of a podcast compared to all other rss-based public podcasts in the world.
    For example, if the value is 0.5%, then this podcast is one of the top 0.5% most popular shows out of all podcasts globally, ranked by Listen Score.
    If the ranking is not available, it'll be null. Learn more at listennotes.com/listen-score
    """  
    listennotes_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listennotes_url'), 'exclude': lambda f: f is None }})
    r"""The url of this podcast on [ListenNotes.com](https://www.ListenNotes.com)."""  
    publisher_highlighted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisher_highlighted'), 'exclude': lambda f: f is None }})
    r"""Highlighted segment of this podcast's publisher name."""  
    publisher_original: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisher_original'), 'exclude': lambda f: f is None }})
    r"""Plain text of this podcast's publisher name."""  
    thumbnail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnail'), 'exclude': lambda f: f is None }})
    r"""Thumbnail image url for this podcast's artwork (300x300)."""  
    title_highlighted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title_highlighted'), 'exclude': lambda f: f is None }})
    r"""Highlighted segment of podcast name."""  
    title_original: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title_original'), 'exclude': lambda f: f is None }})
    r"""Plain text of podcast name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EpisodeSearchResult:
    r"""When **type** is *episode*."""
    
    audio: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio'), 'exclude': lambda f: f is None }})
    r"""Audio url of this episode, which can be played directly."""  
    audio_length_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio_length_sec'), 'exclude': lambda f: f is None }})
    r"""Audio length of this episode. In seconds."""  
    description_highlighted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_highlighted'), 'exclude': lambda f: f is None }})
    r"""Highlighted segment of this episode's description"""  
    description_original: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_original'), 'exclude': lambda f: f is None }})
    r"""Plain text of this episode's description"""  
    explicit_content: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('explicit_content'), 'exclude': lambda f: f is None }})
    r"""Whether this podcast contains explicit language."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Episode id, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`."""  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Image url for this episode.
    If an episode doesn't have its own image, then this field would be the url of the podcast artwork image.
    If you are using PRO/ENTERPRISE plan, then it's
    a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**,
    low resolution image (300x300).
    """  
    itunes_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itunes_id'), 'exclude': lambda f: f is None }})
    r"""iTunes id for this podcast."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""Web link of this episode."""  
    listennotes_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listennotes_url'), 'exclude': lambda f: f is None }})
    r"""The url of this episode on [ListenNotes.com](https://www.ListenNotes.com)."""  
    podcast: Optional[EpisodeSearchResultPodcast] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('podcast'), 'exclude': lambda f: f is None }})
    r"""The podcast that this episode belongs to."""  
    pub_date_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pub_date_ms'), 'exclude': lambda f: f is None }})
    r"""Published date for this episode. In millisecond."""  
    rss: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rss'), 'exclude': lambda f: f is None }})
    r"""RSS url of this podcast. This field is available only in the PRO/ENTERPRISE plan."""  
    thumbnail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnail'), 'exclude': lambda f: f is None }})
    r"""Thumbnail image (300x300) url for this episode.
    If an episode doesn't have its own image, then this field would be the url of the podcast artwork thumbnail image.
    """  
    title_highlighted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title_highlighted'), 'exclude': lambda f: f is None }})
    r"""Highlighted segment of this episode's title"""  
    title_original: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title_original'), 'exclude': lambda f: f is None }})
    r"""Plain text of this episode' title"""  
    transcripts_highlighted: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transcripts_highlighted'), 'exclude': lambda f: f is None }})
    r"""Up to 2 highlighted segments of the audio transcript of this episode."""  
    