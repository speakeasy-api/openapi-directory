/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetRepositoriesWorkspaceRepoSlugDiffSpecSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey?: string;

  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2?: string;
}

export class GetRepositoriesWorkspaceRepoSlugDiffSpecRequest extends SpeakeasyBase {
  /**
   * Generate diffs that include binary files, true if omitted.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=binary",
  })
  binary?: boolean;

  /**
   * Generate diffs with <n> lines of context instead of the usual three.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=context",
  })
  context?: number;

  /**
   * Generate diffs that ignore whitespace.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ignore_whitespace",
  })
  ignoreWhitespace?: boolean;

  /**
   * This parameter is deprecated and will be removed at the end
   *
   * @remarks
   * of 2022. The 'topic' parameter should be used instead. The
   * 'merge' and 'topic' parameters cannot be both used at the same
   * time.
   *
   * If true, the source commit is merged into the
   * destination commit, and then a diff from the
   * destination to the merge result is returned. If false,
   * a simple 'two dot' diff between the source and
   * destination is returned. True if omitted.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=merge" })
  merge?: boolean;

  /**
   * Limit the diff to a particular file (this parameter
   *
   * @remarks
   * can be repeated for multiple paths).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=path" })
  path?: string;

  /**
   * Whether to perform rename detection, true if omitted.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=renames",
  })
  renames?: boolean;

  /**
   * This can either be the repository slug or the UUID of the repository,
   *
   * @remarks
   * surrounded by curly-braces, for example: `{repository UUID}`.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo_slug",
  })
  repoSlug: string;

  /**
   * A commit SHA (e.g. `3a8b42`) or a commit range using double dot
   *
   * @remarks
   * notation (e.g. `3a8b42..9ff173`).
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=spec",
  })
  spec: string;

  /**
   * If true, returns 2-way 'three-dot' diff.
   *
   * @remarks
   * This is a diff between the source commit and the merge base
   * of the source commit and the destination commit.
   * If false, a simple 'two dot' diff between the source and
   * destination is returned.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=topic" })
  topic?: boolean;

  /**
   * This can either be the workspace ID (slug) or the workspace UUID
   *
   * @remarks
   * surrounded by curly-braces, for example: `{workspace UUID}`.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspace",
  })
  workspace: string;
}

export class GetRepositoriesWorkspaceRepoSlugDiffSpecResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * If the diff was too large and timed out.
   *
   * @remarks
   *
   * Since this endpoint does not employ any form of pagination, but
   * instead returns the diff as a single document, it can run into
   * trouble on very large diffs. If Bitbucket times out in cases
   * like these, a 555 status code is returned.
   */
  @SpeakeasyMetadata()
  error?: Record<string, any>;
}
