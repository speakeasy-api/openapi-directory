<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Blocks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get block hash V2
     * 
     * Get block hash by its height
     * 
     * Note: Blockbook always follows the main chain of the backend it is attached to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockHashV2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlockHashV2Response
     */
	public function getBlockHashV2(
        \OpenAPI\OpenAPI\Models\Operations\GetBlockHashV2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlockHashV2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{blockchain}/v2/block-index/{blockHeight}', \OpenAPI\OpenAPI\Models\Operations\GetBlockHashV2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlockHashV2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBlockHashV2200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetBlockHashV2200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Block V2
     * 
     * Returns information about block with transactions, subject to paging.
     * 
     * Note: Blockbook always follows the main chain of the backend it is attached to. If there is a rollback-reorg in the backend, Blockbook will also do rollback. When you ask for block by height, you will always get the main chain block. If you ask for block by hash, you may get the block from another fork but it is not guaranteed (backend may not keep it)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockV2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlockV2Response
     */
	public function getBlockV2(
        \OpenAPI\OpenAPI\Models\Operations\GetBlockV2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlockV2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{blockchain}/v2/block/{blockHashOrHeight}', \OpenAPI\OpenAPI\Models\Operations\GetBlockV2Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBlockV2Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlockV2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBlockV2200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetBlockV2200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get raw block data V2
     * 
     * Returns the raw hex-encoded block data for a given block hash or height
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRawBlockV2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRawBlockV2Response
     */
	public function getRawBlockV2(
        \OpenAPI\OpenAPI\Models\Operations\GetRawBlockV2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRawBlockV2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{blockchain}/v2/rawblock/{blockHashOrHeight}', \OpenAPI\OpenAPI\Models\Operations\GetRawBlockV2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRawBlockV2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRawBlockV2200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetRawBlockV2200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}