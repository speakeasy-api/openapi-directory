"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Any, Optional

class GetDiscoveryV2EventsIncludeLicensedContentEnum(str, Enum):
    r"""Yes if you want to display licensed content"""
    YES = 'yes'
    NO = ' no'

class GetDiscoveryV2EventsIncludeSpellcheckEnum(str, Enum):
    r"""yes, to include spell check suggestions in the response."""
    YES = 'yes'
    NO = ' no'

class GetDiscoveryV2EventsIncludeTbaEnum(str, Enum):
    r"""True, to include events with date to be announce (TBA)"""
    YES = 'yes'
    NO = ' no'
    ONLY = ' only'

class GetDiscoveryV2EventsIncludeTbdEnum(str, Enum):
    r"""True, to include event with a date to be defined (TBD)"""
    YES = 'yes'
    NO = ' no'
    ONLY = ' only'

class GetDiscoveryV2EventsIncludeTestEnum(str, Enum):
    r"""True if you want to have entities flag as test in the response. Only, if you only wanted test entities"""
    YES = 'yes'
    NO = ' no'
    ONLY = ' only'

class GetDiscoveryV2EventsSourceEnum(str, Enum):
    r"""Filter entities by its source name"""
    TICKETMASTER = 'ticketmaster'
    UNIVERSE = ' universe'
    FRONTGATE = ' frontgate'
    TMR = ' tmr'

class GetDiscoveryV2EventsUnitEnum(str, Enum):
    r"""Unit of the radius"""
    MILES = 'miles'
    KM = 'km'


@dataclasses.dataclass
class GetDiscoveryV2EventsRequest:
    
    attraction_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'attractionId', 'style': 'form', 'explode': True }})
    r"""Filter events by attraction id"""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'city', 'style': 'form', 'explode': True }})
    r"""Filter events by city"""  
    classification_id: Optional[list[Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'classificationId', 'style': 'form', 'explode': True }})
    r"""Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type"""  
    classification_name: Optional[list[Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'classificationName', 'style': 'form', 'explode': True }})
    r"""Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type"""  
    client_visibility: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'clientVisibility', 'style': 'form', 'explode': True }})
    r"""Filter events by clientName"""  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'countryCode', 'style': 'form', 'explode': True }})
    r"""Filter events by country code"""  
    dma_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dmaId', 'style': 'form', 'explode': True }})
    r"""Filter events by dma id"""  
    end_date_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endDateTime', 'style': 'form', 'explode': True }})
    r"""Filter events with a start date before this date"""  
    geo_point: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'geoPoint', 'style': 'form', 'explode': True }})
    r"""filter events by geoHash"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id', 'style': 'form', 'explode': True }})
    r"""Filter entities by its id"""  
    include_licensed_content: Optional[GetDiscoveryV2EventsIncludeLicensedContentEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeLicensedContent', 'style': 'form', 'explode': True }})
    r"""Yes if you want to display licensed content"""  
    include_spellcheck: Optional[GetDiscoveryV2EventsIncludeSpellcheckEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeSpellcheck', 'style': 'form', 'explode': True }})
    r"""yes, to include spell check suggestions in the response."""  
    include_tba: Optional[GetDiscoveryV2EventsIncludeTbaEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeTBA', 'style': 'form', 'explode': True }})
    r"""True, to include events with date to be announce (TBA)"""  
    include_tbd: Optional[GetDiscoveryV2EventsIncludeTbdEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeTBD', 'style': 'form', 'explode': True }})
    r"""True, to include event with a date to be defined (TBD)"""  
    include_test: Optional[GetDiscoveryV2EventsIncludeTestEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeTest', 'style': 'form', 'explode': True }})
    r"""True if you want to have entities flag as test in the response. Only, if you only wanted test entities"""  
    keyword: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'keyword', 'style': 'form', 'explode': True }})
    r"""Keyword to search on"""  
    latlong: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'latlong', 'style': 'form', 'explode': True }})
    r"""Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead"""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locale', 'style': 'form', 'explode': True }})
    r"""The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*')"""  
    market_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'marketId', 'style': 'form', 'explode': True }})
    r"""Filter events by market id"""  
    onsale_end_date_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'onsaleEndDateTime', 'style': 'form', 'explode': True }})
    r"""Filter events with onsale end date before this date"""  
    onsale_on_after_start_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'onsaleOnAfterStartDate', 'style': 'form', 'explode': True }})
    r"""Filter events with onsale range within this date"""  
    onsale_on_start_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'onsaleOnStartDate', 'style': 'form', 'explode': True }})
    r"""Filter events with onsale start date on this date"""  
    onsale_start_date_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'onsaleStartDateTime', 'style': 'form', 'explode': True }})
    r"""Filter events with onsale start date after this date"""  
    page: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number"""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'postalCode', 'style': 'form', 'explode': True }})
    r"""Filter events by postal code / zipcode"""  
    promoter_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'promoterId', 'style': 'form', 'explode': True }})
    r"""Filter events by promoter id"""  
    radius: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'radius', 'style': 'form', 'explode': True }})
    r"""Radius of the area in which we want to search for events."""  
    segment_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'segmentId', 'style': 'form', 'explode': True }})
    r"""Filter events by segment id"""  
    segment_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'segmentName', 'style': 'form', 'explode': True }})
    r"""Filter events by segment name"""  
    size: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""Page size of the response"""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'"""  
    source: Optional[GetDiscoveryV2EventsSourceEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source', 'style': 'form', 'explode': True }})
    r"""Filter entities by its source name"""  
    start_date_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startDateTime', 'style': 'form', 'explode': True }})
    r"""Filter events with a start date after this date"""  
    state_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stateCode', 'style': 'form', 'explode': True }})
    r"""Filter events by state code"""  
    unit: Optional[GetDiscoveryV2EventsUnitEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unit', 'style': 'form', 'explode': True }})
    r"""Unit of the radius"""  
    venue_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'venueId', 'style': 'form', 'explode': True }})
    r"""Filter events by venue id"""  
    

@dataclasses.dataclass
class GetDiscoveryV2EventsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    