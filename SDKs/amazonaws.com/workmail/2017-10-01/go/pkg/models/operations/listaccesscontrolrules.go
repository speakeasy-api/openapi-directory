// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListAccessControlRulesXAmzTargetEnum
type ListAccessControlRulesXAmzTargetEnum string

const (
	ListAccessControlRulesXAmzTargetEnumWorkMailServiceListAccessControlRules ListAccessControlRulesXAmzTargetEnum = "WorkMailService.ListAccessControlRules"
)

func (e ListAccessControlRulesXAmzTargetEnum) ToPointer() *ListAccessControlRulesXAmzTargetEnum {
	return &e
}

func (e *ListAccessControlRulesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WorkMailService.ListAccessControlRules":
		*e = ListAccessControlRulesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccessControlRulesXAmzTargetEnum: %v", v)
	}
}

type ListAccessControlRulesRequest struct {
	ListAccessControlRulesRequest shared.ListAccessControlRulesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                 *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256             *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                      *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken             *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                 *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders             *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                    ListAccessControlRulesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListAccessControlRulesResponse struct {
	ContentType string
	// Success
	ListAccessControlRulesResponse *shared.ListAccessControlRulesResponse
	// OrganizationNotFoundException
	OrganizationNotFoundException interface{}
	// OrganizationStateException
	OrganizationStateException interface{}
	StatusCode                 int
	RawResponse                *http.Response
}
