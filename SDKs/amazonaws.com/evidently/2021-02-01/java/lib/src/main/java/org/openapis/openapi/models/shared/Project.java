/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Project - This structure defines a project, which is the logical object in Evidently that can contain features, launches, and experiments. Use projects to group similar features together.
 */
public class Project {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeExperimentCount")
    public Long activeExperimentCount;

    public Project withActiveExperimentCount(Long activeExperimentCount) {
        this.activeExperimentCount = activeExperimentCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeLaunchCount")
    public Long activeLaunchCount;

    public Project withActiveLaunchCount(Long activeLaunchCount) {
        this.activeLaunchCount = activeLaunchCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appConfigResource")
    public ProjectAppConfigResource appConfigResource;

    public Project withAppConfigResource(ProjectAppConfigResource appConfigResource) {
        this.appConfigResource = appConfigResource;
        return this;
    }
    
    @JsonProperty("arn")
    public String arn;

    public Project withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdTime")
    public OffsetDateTime createdTime;

    public Project withCreatedTime(OffsetDateTime createdTime) {
        this.createdTime = createdTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataDelivery")
    public ProjectDataDelivery dataDelivery;

    public Project withDataDelivery(ProjectDataDelivery dataDelivery) {
        this.dataDelivery = dataDelivery;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Project withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("experimentCount")
    public Long experimentCount;

    public Project withExperimentCount(Long experimentCount) {
        this.experimentCount = experimentCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("featureCount")
    public Long featureCount;

    public Project withFeatureCount(Long featureCount) {
        this.featureCount = featureCount;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdatedTime")
    public OffsetDateTime lastUpdatedTime;

    public Project withLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
        this.lastUpdatedTime = lastUpdatedTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("launchCount")
    public Long launchCount;

    public Project withLaunchCount(Long launchCount) {
        this.launchCount = launchCount;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public Project withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("status")
    public ProjectStatusEnum status;

    public Project withStatus(ProjectStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;

    public Project withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    public Project(@JsonProperty("arn") String arn, @JsonProperty("createdTime") OffsetDateTime createdTime, @JsonProperty("lastUpdatedTime") OffsetDateTime lastUpdatedTime, @JsonProperty("name") String name, @JsonProperty("status") ProjectStatusEnum status) {
        this.arn = arn;
        this.createdTime = createdTime;
        this.lastUpdatedTime = lastUpdatedTime;
        this.name = name;
        this.status = status;
  }
}
