/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Play by play data
 */
export class Plays {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Live metrics and PBP (Patreon only)
   *
   * @remarks
   * Get live metrics and PBP
   */
  getLivePlays(
    req: operations.GetLivePlaysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLivePlaysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLivePlaysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/live/plays";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLivePlaysResponse =
        new operations.GetLivePlaysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.livePlayByPlay = utils.objectToClass(
              httpRes?.data,
              shared.LivePlayByPlay
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Types of player play stats
   *
   * @remarks
   * Type of play stats
   */
  getPlayStatTypes(
    config?: AxiosRequestConfig
  ): Promise<operations.GetPlayStatTypesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/play/stat/types";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPlayStatTypesResponse =
        new operations.GetPlayStatTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playStatTypes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playStatTypes = utils.objectToClass(
              httpRes?.data,
              shared.PlayStatType,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Play stats by play
   *
   * @remarks
   * Gets player stats associated by play (limit 1000)
   */
  getPlayStats(
    req: operations.GetPlayStatsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPlayStatsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPlayStatsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/play/stats";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPlayStatsResponse =
        new operations.GetPlayStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playStats = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playStats = utils.objectToClass(
              httpRes?.data,
              shared.PlayStat,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Play types
   *
   * @remarks
   * Types of plays
   */
  getPlayTypes(
    config?: AxiosRequestConfig
  ): Promise<operations.GetPlayTypesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/play/types";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPlayTypesResponse =
        new operations.GetPlayTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playTypes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playTypes = utils.objectToClass(
              httpRes?.data,
              shared.PlayType,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Play by play data
   *
   * @remarks
   * Get play data and results
   */
  getPlays(
    req: operations.GetPlaysRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPlaysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPlaysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/plays";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPlaysResponse = new operations.GetPlaysResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.plays = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.plays = utils.objectToClass(
              httpRes?.data,
              shared.Play,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
