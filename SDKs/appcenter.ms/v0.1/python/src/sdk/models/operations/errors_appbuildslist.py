"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ErrorsAppBuildsListSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class ErrorsAppBuildsListErrorTypeEnum(str, Enum):
    r"""Type of error (handled vs unhandled), including All"""
    ALL = 'all'
    UNHANDLED_ERROR = 'unhandledError'
    HANDLED_ERROR = 'handledError'


@dataclasses.dataclass
class ErrorsAppBuildsListRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    start: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""Start date time in data in ISO 8601 date time format"""  
    version: str = dataclasses.field(metadata={'query_param': { 'field_name': 'version', 'style': 'form', 'explode': True }})  
    dollar_top: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$top', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return. (0 will fetch all results till the max number.)"""  
    end: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end', 'style': 'form', 'explode': True }})
    r"""Last date time in data in ISO 8601 date time format"""  
    error_type: Optional[ErrorsAppBuildsListErrorTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'errorType', 'style': 'form', 'explode': True }})
    r"""Type of error (handled vs unhandled), including All"""  
    
class ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsAppBuildsListDefaultApplicationJSONError:
    
    code: ErrorsAppBuildsListDefaultApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsAppBuildsListDefaultApplicationJSON:
    r"""Error code with reason"""
    
    error: ErrorsAppBuildsListDefaultApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsAppBuildsList200ApplicationJSON:
    r"""List of App builds"""
    
    app_builds: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appBuilds'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ErrorsAppBuildsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    errors_app_builds_list_200_application_json_object: Optional[ErrorsAppBuildsList200ApplicationJSON] = dataclasses.field(default=None)
    r"""List of App builds"""  
    errors_app_builds_list_default_application_json_object: Optional[ErrorsAppBuildsListDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    