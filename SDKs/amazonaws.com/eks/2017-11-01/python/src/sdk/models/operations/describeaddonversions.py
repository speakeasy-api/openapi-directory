"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import describeaddonversionsresponse as shared_describeaddonversionsresponse
from typing import Any, Optional


@dataclasses.dataclass
class DescribeAddonVersionsRequest:
    
    addon_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'addonName', 'style': 'form', 'explode': True }})
    r"""The name of the add-on. The name must match one of the names returned by <a href=\\"https://docs.aws.amazon.com/eks/latest/APIReference/API_ListAddons.html\\"> <code>ListAddons</code> </a>."""  
    kubernetes_version: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'kubernetesVersion', 'style': 'form', 'explode': True }})
    r"""The Kubernetes versions that you can use the add-on with."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""<p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeAddonVersionsRequest</code> where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.</p> <note> <p>This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.</p> </note>"""  
    owners: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'owners', 'style': 'form', 'explode': True }})
    r"""The owner of the add-on. For valid <code>owners</code>, don't specify a value for this property."""  
    publishers: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'publishers', 'style': 'form', 'explode': True }})
    r"""The publisher of the add-on. For valid <code>publishers</code>, don't specify a value for this property."""  
    types: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'types', 'style': 'form', 'explode': True }})
    r"""The type of the add-on. For valid <code>types</code>, don't specify a value for this property."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class DescribeAddonVersionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    describe_addon_versions_response: Optional[shared_describeaddonversionsresponse.DescribeAddonVersionsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServerException"""  
    