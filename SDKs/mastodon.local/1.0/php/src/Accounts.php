<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Sets a private note on a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsRelationshipsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsRelationshipsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsRelationshipsResponse
     */
	public function getApiV1AccountsRelationships(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsRelationshipsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsRelationshipsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsRelationshipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/relationships');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsRelationshipsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsRelationshipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationships = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Relationship>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search for matching accounts by username or display name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsSearchResponse
     */
	public function getApiV1AccountsSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Account>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Test to make sure that the user token works.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsVerifyCredentialsResponse
     */
	public function getApiV1AccountsVerifyCredentials(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsVerifyCredentialsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/verify_credentials');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsVerifyCredentialsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getApiV1AccountsId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdResponse
     */
	public function getApiV1AccountsId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 410) {
        }

        return $response;
    }
	
    /**
     * Tags featured by this account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFeaturedTagsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFeaturedTagsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFeaturedTagsResponse
     */
	public function getApiV1AccountsIdFeaturedTags(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFeaturedTagsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFeaturedTagsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFeaturedTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/featured_tags', \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFeaturedTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFeaturedTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->featuredTags = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\FeaturedTag>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accounts which follow the given account, if network is not hidden by the account owner.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowersResponse
     */
	public function getApiV1AccountsIdFollowers(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/followers', \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Account>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 410) {
        }

        return $response;
    }
	
    /**
     * Accounts which the given account is following, if network is not hidden by the account owner.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowingResponse
     */
	public function getApiV1AccountsIdFollowing(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/following', \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdFollowingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Account>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 410) {
        }

        return $response;
    }
	
    /**
     * Array of IdentityProof
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdIdentityProofsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdIdentityProofsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdIdentityProofsResponse
     */
	public function getApiV1AccountsIdIdentityProofs(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdIdentityProofsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdIdentityProofsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdIdentityProofsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/identity_proofs', \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdIdentityProofsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdIdentityProofsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identityProofs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IdentityProof>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 410) {
        }

        return $response;
    }
	
    /**
     * User lists that you have added this account to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdListsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdListsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdListsResponse
     */
	public function getApiV1AccountsIdLists(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdListsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdListsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/lists', \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdListsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lists = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ListT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 410) {
        }

        return $response;
    }
	
    /**
     * Statuses posted to the given account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdStatusesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdStatusesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdStatusesResponse
     */
	public function getApiV1AccountsIdStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdStatusesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdStatusesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/statuses', \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AccountsIdStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Status>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 410) {
        }

        return $response;
    }
	
    /**
     * Update the user's display and preferences.
     * 
     * @param string $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchApiV1AccountsUpdateCredentialsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchApiV1AccountsUpdateCredentialsResponse
     */
	public function patchApiV1AccountsUpdateCredentials(
        string $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchApiV1AccountsUpdateCredentialsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchApiV1AccountsUpdateCredentialsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/update_credentials');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchApiV1AccountsUpdateCredentialsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a user and account records. Returns an account access token for the app that initiated the request. The app should save this token for later, and should wait for the user to confirm their account by clicking a link in their email inbox.
     * 
     * @param string $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsResponse
     */
	public function postApiV1Accounts(
        string $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdBlockRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdBlockSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdBlockResponse
     */
	public function postApiV1AccountsIdBlock(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdBlockRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdBlockSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdBlockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/block', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdBlockRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdBlockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Relationship', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Follow the given account. Can also be used to update whether to show reblogs or enable notifications.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdFollowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdFollowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdFollowResponse
     */
	public function postApiV1AccountsIdFollow(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdFollowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdFollowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdFollowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/follow', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdFollowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdFollowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Relationship', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mute the given account. Clients should filter statuses and notifications from this account, if received (e.g. due to a boost in the Home timeline).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdMuteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdMuteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdMuteResponse
     */
	public function postApiV1AccountsIdMute(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdMuteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdMuteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdMuteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/mute', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdMuteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdMuteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Relationship', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets a private note on a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdNoteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdNoteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdNoteResponse
     */
	public function postApiV1AccountsIdNote(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdNoteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdNoteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdNoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/note', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdNoteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdNoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Relationship', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Add the given account to the user's featured profiles. (Featured profiles are currently shown on the user's own public profile.)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdPinRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdPinSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdPinResponse
     */
	public function postApiV1AccountsIdPin(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdPinRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdPinSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdPinResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/pin', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdPinRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdPinResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Relationship', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnblockRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnblockSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnblockResponse
     */
	public function postApiV1AccountsIdUnblock(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnblockRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnblockSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnblockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/unblock', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnblockRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnblockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Relationship', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unfollow the given account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnfollowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnfollowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnfollowResponse
     */
	public function postApiV1AccountsIdUnfollow(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnfollowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnfollowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnfollowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/unfollow', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnfollowRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnfollowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Relationship', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unmute the given account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnmuteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnmuteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnmuteResponse
     */
	public function postApiV1AccountsIdUnmute(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnmuteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnmuteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnmuteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/unmute', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnmuteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnmuteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Relationship', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove the given account from the user's featured profiles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnpinRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnpinSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnpinResponse
     */
	public function postApiV1AccountsIdUnpin(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnpinRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnpinSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnpinResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/accounts/{id}/unpin', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnpinRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AccountsIdUnpinResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Relationship', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
}