"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudwatchalarmaction as shared_cloudwatchalarmaction
from ..shared import cloudwatchlogsaction as shared_cloudwatchlogsaction
from ..shared import cloudwatchmetricaction as shared_cloudwatchmetricaction
from ..shared import dynamodbaction as shared_dynamodbaction
from ..shared import dynamodbv2action as shared_dynamodbv2action
from ..shared import elasticsearchaction as shared_elasticsearchaction
from ..shared import firehoseaction as shared_firehoseaction
from ..shared import httpaction as shared_httpaction
from ..shared import iotanalyticsaction as shared_iotanalyticsaction
from ..shared import ioteventsaction as shared_ioteventsaction
from ..shared import iotsitewiseaction as shared_iotsitewiseaction
from ..shared import kafkaaction as shared_kafkaaction
from ..shared import kinesisaction as shared_kinesisaction
from ..shared import lambdaaction as shared_lambdaaction
from ..shared import locationaction as shared_locationaction
from ..shared import opensearchaction as shared_opensearchaction
from ..shared import republishaction as shared_republishaction
from ..shared import s3action as shared_s3action
from ..shared import salesforceaction as shared_salesforceaction
from ..shared import snsaction as shared_snsaction
from ..shared import sqsaction as shared_sqsaction
from ..shared import stepfunctionsaction as shared_stepfunctionsaction
from ..shared import timestreamaction as shared_timestreamaction
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Action:
    r"""Describes the actions associated with a rule."""
    
    cloudwatch_alarm: Optional[shared_cloudwatchalarmaction.CloudwatchAlarmAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudwatchAlarm'), 'exclude': lambda f: f is None }})  
    cloudwatch_logs: Optional[shared_cloudwatchlogsaction.CloudwatchLogsAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudwatchLogs'), 'exclude': lambda f: f is None }})  
    cloudwatch_metric: Optional[shared_cloudwatchmetricaction.CloudwatchMetricAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudwatchMetric'), 'exclude': lambda f: f is None }})  
    dynamo_db: Optional[shared_dynamodbaction.DynamoDBAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dynamoDB'), 'exclude': lambda f: f is None }})  
    dynamo_d_bv2: Optional[shared_dynamodbv2action.DynamoDBv2Action] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dynamoDBv2'), 'exclude': lambda f: f is None }})  
    elasticsearch: Optional[shared_elasticsearchaction.ElasticsearchAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elasticsearch'), 'exclude': lambda f: f is None }})  
    firehose: Optional[shared_firehoseaction.FirehoseAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firehose'), 'exclude': lambda f: f is None }})  
    http: Optional[shared_httpaction.HTTPAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http'), 'exclude': lambda f: f is None }})  
    iot_analytics: Optional[shared_iotanalyticsaction.IotAnalyticsAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iotAnalytics'), 'exclude': lambda f: f is None }})  
    iot_events: Optional[shared_ioteventsaction.IotEventsAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iotEvents'), 'exclude': lambda f: f is None }})  
    iot_site_wise: Optional[shared_iotsitewiseaction.IotSiteWiseAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iotSiteWise'), 'exclude': lambda f: f is None }})  
    kafka: Optional[shared_kafkaaction.KafkaAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kafka'), 'exclude': lambda f: f is None }})  
    kinesis: Optional[shared_kinesisaction.KinesisAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kinesis'), 'exclude': lambda f: f is None }})  
    lambda_: Optional[shared_lambdaaction.LambdaAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambda'), 'exclude': lambda f: f is None }})  
    location: Optional[shared_locationaction.LocationAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    open_search: Optional[shared_opensearchaction.OpenSearchAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openSearch'), 'exclude': lambda f: f is None }})  
    republish: Optional[shared_republishaction.RepublishAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('republish'), 'exclude': lambda f: f is None }})  
    s3: Optional[shared_s3action.S3Action] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3'), 'exclude': lambda f: f is None }})  
    salesforce: Optional[shared_salesforceaction.SalesforceAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesforce'), 'exclude': lambda f: f is None }})  
    sns: Optional[shared_snsaction.SnsAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sns'), 'exclude': lambda f: f is None }})  
    sqs: Optional[shared_sqsaction.SqsAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sqs'), 'exclude': lambda f: f is None }})  
    step_functions: Optional[shared_stepfunctionsaction.StepFunctionsAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stepFunctions'), 'exclude': lambda f: f is None }})  
    timestream: Optional[shared_timestreamaction.TimestreamAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestream'), 'exclude': lambda f: f is None }})  
    