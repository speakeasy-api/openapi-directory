"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResourceCollaboratorCreation:
    r"""Add a collaborator to a resource."""
    
    acl_admin: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aclAdmin'), 'exclude': lambda f: f is None }})
    r"""`True` if the related user can can manage the current document, i.e. changing the document permissions and deleting the document"""  
    acl_read: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aclRead'), 'exclude': lambda f: f is None }})
    r"""`True` if the related user can read the score. (probably true if the user has a permission on the document)."""  
    acl_write: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aclWrite'), 'exclude': lambda f: f is None }})
    r"""`True` if the related user can modify the score."""  
    group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of a Flat group"""  
    user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of a Flat user"""  
    user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userEmail'), 'exclude': lambda f: f is None }})
    r"""Fill this field to invite an individual user by email."""  
    user_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userToken'), 'exclude': lambda f: f is None }})
    r"""Token received in an invitation to join the score."""  
    