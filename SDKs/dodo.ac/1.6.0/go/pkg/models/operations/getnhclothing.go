// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetNhClothingCategoryEnum - Specify the category of clothing to return.
type GetNhClothingCategoryEnum string

const (
	GetNhClothingCategoryEnumTops        GetNhClothingCategoryEnum = "Tops"
	GetNhClothingCategoryEnumBottoms     GetNhClothingCategoryEnum = "Bottoms"
	GetNhClothingCategoryEnumDressUp     GetNhClothingCategoryEnum = "Dress-up"
	GetNhClothingCategoryEnumHeadwear    GetNhClothingCategoryEnum = "Headwear"
	GetNhClothingCategoryEnumAccessories GetNhClothingCategoryEnum = "Accessories"
	GetNhClothingCategoryEnumSocks       GetNhClothingCategoryEnum = "Socks"
	GetNhClothingCategoryEnumShoes       GetNhClothingCategoryEnum = "Shoes"
	GetNhClothingCategoryEnumBags        GetNhClothingCategoryEnum = "Bags"
	GetNhClothingCategoryEnumUmbrellas   GetNhClothingCategoryEnum = "Umbrellas"
)

func (e GetNhClothingCategoryEnum) ToPointer() *GetNhClothingCategoryEnum {
	return &e
}

func (e *GetNhClothingCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Tops":
		fallthrough
	case "Bottoms":
		fallthrough
	case "Dress-up":
		fallthrough
	case "Headwear":
		fallthrough
	case "Accessories":
		fallthrough
	case "Socks":
		fallthrough
	case "Shoes":
		fallthrough
	case "Bags":
		fallthrough
	case "Umbrellas":
		*e = GetNhClothingCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNhClothingCategoryEnum: %v", v)
	}
}

type GetNhClothingColorEnum string

const (
	GetNhClothingColorEnumAqua     GetNhClothingColorEnum = "Aqua"
	GetNhClothingColorEnumBeige    GetNhClothingColorEnum = "Beige"
	GetNhClothingColorEnumBlack    GetNhClothingColorEnum = "Black"
	GetNhClothingColorEnumBlue     GetNhClothingColorEnum = "Blue"
	GetNhClothingColorEnumBrown    GetNhClothingColorEnum = "Brown"
	GetNhClothingColorEnumColorful GetNhClothingColorEnum = "Colorful"
	GetNhClothingColorEnumGray     GetNhClothingColorEnum = "Gray"
	GetNhClothingColorEnumGreen    GetNhClothingColorEnum = "Green"
	GetNhClothingColorEnumOrange   GetNhClothingColorEnum = "Orange"
	GetNhClothingColorEnumPink     GetNhClothingColorEnum = "Pink"
	GetNhClothingColorEnumPurple   GetNhClothingColorEnum = "Purple"
	GetNhClothingColorEnumRed      GetNhClothingColorEnum = "Red"
	GetNhClothingColorEnumWhite    GetNhClothingColorEnum = "White"
	GetNhClothingColorEnumYellow   GetNhClothingColorEnum = "Yellow"
)

func (e GetNhClothingColorEnum) ToPointer() *GetNhClothingColorEnum {
	return &e
}

func (e *GetNhClothingColorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Aqua":
		fallthrough
	case "Beige":
		fallthrough
	case "Black":
		fallthrough
	case "Blue":
		fallthrough
	case "Brown":
		fallthrough
	case "Colorful":
		fallthrough
	case "Gray":
		fallthrough
	case "Green":
		fallthrough
	case "Orange":
		fallthrough
	case "Pink":
		fallthrough
	case "Purple":
		fallthrough
	case "Red":
		fallthrough
	case "White":
		fallthrough
	case "Yellow":
		*e = GetNhClothingColorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNhClothingColorEnum: %v", v)
	}
}

// GetNhClothingLabelthemeEnum - Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.
type GetNhClothingLabelthemeEnum string

const (
	GetNhClothingLabelthemeEnumComfy      GetNhClothingLabelthemeEnum = "Comfy"
	GetNhClothingLabelthemeEnumEveryday   GetNhClothingLabelthemeEnum = "Everyday"
	GetNhClothingLabelthemeEnumFairyTale  GetNhClothingLabelthemeEnum = "Fairy tale"
	GetNhClothingLabelthemeEnumFormal     GetNhClothingLabelthemeEnum = "Formal"
	GetNhClothingLabelthemeEnumGoth       GetNhClothingLabelthemeEnum = "Goth"
	GetNhClothingLabelthemeEnumOutdoorsy  GetNhClothingLabelthemeEnum = "Outdoorsy"
	GetNhClothingLabelthemeEnumParty      GetNhClothingLabelthemeEnum = "Party"
	GetNhClothingLabelthemeEnumSporty     GetNhClothingLabelthemeEnum = "Sporty"
	GetNhClothingLabelthemeEnumTheatrical GetNhClothingLabelthemeEnum = "Theatrical"
	GetNhClothingLabelthemeEnumVacation   GetNhClothingLabelthemeEnum = "Vacation"
	GetNhClothingLabelthemeEnumWork       GetNhClothingLabelthemeEnum = "Work"
)

func (e GetNhClothingLabelthemeEnum) ToPointer() *GetNhClothingLabelthemeEnum {
	return &e
}

func (e *GetNhClothingLabelthemeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Comfy":
		fallthrough
	case "Everyday":
		fallthrough
	case "Fairy tale":
		fallthrough
	case "Formal":
		fallthrough
	case "Goth":
		fallthrough
	case "Outdoorsy":
		fallthrough
	case "Party":
		fallthrough
	case "Sporty":
		fallthrough
	case "Theatrical":
		fallthrough
	case "Vacation":
		fallthrough
	case "Work":
		*e = GetNhClothingLabelthemeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNhClothingLabelthemeEnum: %v", v)
	}
}

type GetNhClothingStyleEnum string

const (
	GetNhClothingStyleEnumActive   GetNhClothingStyleEnum = "Active"
	GetNhClothingStyleEnumCool     GetNhClothingStyleEnum = "Cool"
	GetNhClothingStyleEnumCute     GetNhClothingStyleEnum = "Cute"
	GetNhClothingStyleEnumElegant  GetNhClothingStyleEnum = "Elegant"
	GetNhClothingStyleEnumGorgeous GetNhClothingStyleEnum = "Gorgeous"
	GetNhClothingStyleEnumSimple   GetNhClothingStyleEnum = "Simple"
)

func (e GetNhClothingStyleEnum) ToPointer() *GetNhClothingStyleEnum {
	return &e
}

func (e *GetNhClothingStyleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Cool":
		fallthrough
	case "Cute":
		fallthrough
	case "Elegant":
		fallthrough
	case "Gorgeous":
		fallthrough
	case "Simple":
		*e = GetNhClothingStyleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNhClothingStyleEnum: %v", v)
	}
}

type GetNhClothingRequest struct {
	// The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.
	AcceptVersion string `header:"style=simple,explode=false,name=Accept-Version"`
	// Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.
	XAPIKey string `header:"style=simple,explode=false,name=X-API-KEY"`
	// Specify the category of clothing to return.
	Category *GetNhClothingCategoryEnum `queryParam:"style=form,explode=true,name=category"`
	// Return clothing that matches the provided colors (may specify one or two colors). Colors are used for gifting villagers.
	Color []GetNhClothingColorEnum `queryParam:"style=form,explode=true,name=color"`
	// When set to `true`, only clothing names are returned. Instead of an array of objects with all details, the return will be an array of strings.
	Excludedetails *string `queryParam:"style=form,explode=true,name=excludedetails"`
	// Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.
	Labeltheme *GetNhClothingLabelthemeEnum `queryParam:"style=form,explode=true,name=labeltheme"`
	// Return clothing that matches the provided styles (may specify one or two styles). Styles are used for gifting villagers.
	Style []GetNhClothingStyleEnum `queryParam:"style=form,explode=true,name=style"`
}

type GetNhClothingResponse struct {
	ContentType string
	// Failed to authenticate user from `X-API-KEY`.
	Error401 *shared.Error401
	// There was an error fetching the requested data.
	Error500 *shared.Error500
	// A JSON array of clothing.
	NHClothings []shared.NHClothing
	StatusCode  int
	RawResponse *http.Response
}
