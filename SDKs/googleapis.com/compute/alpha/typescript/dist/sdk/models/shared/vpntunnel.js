"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpnTunnel = exports.VpnTunnelStatusEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * [Output Only] The status of the VPN tunnel, which can be one of the following: - PROVISIONING: Resource is being allocated for the VPN tunnel. - WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel. - FIRST_HANDSHAKE: Successful first handshake with the peer VPN. - ESTABLISHED: Secure session is successfully established with the peer VPN. - NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS - AUTHORIZATION_ERROR: Auth error (for example, bad shared secret). - NEGOTIATION_FAILURE: Handshake failed. - DEPROVISIONING: Resources are being deallocated for the VPN tunnel. - FAILED: Tunnel creation has failed and the tunnel is not ready to be used. - NO_INCOMING_PACKETS: No incoming packets from peer. - REJECTED: Tunnel configuration was rejected, can be result of being denied access. - ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources. - STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state. - PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably behind NAT. - TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel.
 */
var VpnTunnelStatusEnum;
(function (VpnTunnelStatusEnum) {
    VpnTunnelStatusEnum["AllocatingResources"] = "ALLOCATING_RESOURCES";
    VpnTunnelStatusEnum["AuthorizationError"] = "AUTHORIZATION_ERROR";
    VpnTunnelStatusEnum["Deprovisioning"] = "DEPROVISIONING";
    VpnTunnelStatusEnum["Established"] = "ESTABLISHED";
    VpnTunnelStatusEnum["Failed"] = "FAILED";
    VpnTunnelStatusEnum["FirstHandshake"] = "FIRST_HANDSHAKE";
    VpnTunnelStatusEnum["NegotiationFailure"] = "NEGOTIATION_FAILURE";
    VpnTunnelStatusEnum["NetworkError"] = "NETWORK_ERROR";
    VpnTunnelStatusEnum["NoIncomingPackets"] = "NO_INCOMING_PACKETS";
    VpnTunnelStatusEnum["Provisioning"] = "PROVISIONING";
    VpnTunnelStatusEnum["Rejected"] = "REJECTED";
    VpnTunnelStatusEnum["Stopped"] = "STOPPED";
    VpnTunnelStatusEnum["WaitingForFullConfig"] = "WAITING_FOR_FULL_CONFIG";
})(VpnTunnelStatusEnum = exports.VpnTunnelStatusEnum || (exports.VpnTunnelStatusEnum = {}));
/**
 * Represents a Cloud VPN Tunnel resource. For more information about VPN, read the the Cloud VPN Overview.
 */
var VpnTunnel = /** @class */ (function (_super) {
    __extends(VpnTunnel, _super);
    function VpnTunnel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "detailedStatus" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "detailedStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ikeVersion" }),
        __metadata("design:type", Number)
    ], VpnTunnel.prototype, "ikeVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labelFingerprint" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "labelFingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], VpnTunnel.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "localTrafficSelector" }),
        __metadata("design:type", Array)
    ], VpnTunnel.prototype, "localTrafficSelector", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "peerExternalGateway" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "peerExternalGateway", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "peerExternalGatewayInterface" }),
        __metadata("design:type", Number)
    ], VpnTunnel.prototype, "peerExternalGatewayInterface", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "peerGcpGateway" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "peerGcpGateway", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "peerIp" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "peerIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "remoteTrafficSelector" }),
        __metadata("design:type", Array)
    ], VpnTunnel.prototype, "remoteTrafficSelector", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "router" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "router", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sharedSecret" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "sharedSecret", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sharedSecretHash" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "sharedSecretHash", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetVpnGateway" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "targetVpnGateway", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpnGateway" }),
        __metadata("design:type", String)
    ], VpnTunnel.prototype, "vpnGateway", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpnGatewayInterface" }),
        __metadata("design:type", Number)
    ], VpnTunnel.prototype, "vpnGatewayInterface", void 0);
    return VpnTunnel;
}(utils_1.SpeakeasyBase));
exports.VpnTunnel = VpnTunnel;
