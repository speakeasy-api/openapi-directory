"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import databaseresource as shared_databaseresource
from ..shared import datacellsfilterresource as shared_datacellsfilterresource
from ..shared import datalocationresource as shared_datalocationresource
from ..shared import lftagkeyresource as shared_lftagkeyresource
from ..shared import lftagpolicyresource as shared_lftagpolicyresource
from ..shared import tableresource as shared_tableresource
from ..shared import tablewithcolumnsresource as shared_tablewithcolumnsresource
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Resource:
    r"""A structure for the resource."""
    
    catalog: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Catalog'), 'exclude': lambda f: f is None }})  
    database: Optional[shared_databaseresource.DatabaseResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Database'), 'exclude': lambda f: f is None }})  
    data_cells_filter: Optional[shared_datacellsfilterresource.DataCellsFilterResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataCellsFilter'), 'exclude': lambda f: f is None }})  
    data_location: Optional[shared_datalocationresource.DataLocationResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataLocation'), 'exclude': lambda f: f is None }})  
    lf_tag: Optional[shared_lftagkeyresource.LFTagKeyResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LFTag'), 'exclude': lambda f: f is None }})  
    lf_tag_policy: Optional[shared_lftagpolicyresource.LFTagPolicyResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LFTagPolicy'), 'exclude': lambda f: f is None }})  
    table: Optional[shared_tableresource.TableResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Table'), 'exclude': lambda f: f is None }})  
    table_with_columns: Optional[shared_tablewithcolumnsresource.TableWithColumnsResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableWithColumns'), 'exclude': lambda f: f is None }})  
    