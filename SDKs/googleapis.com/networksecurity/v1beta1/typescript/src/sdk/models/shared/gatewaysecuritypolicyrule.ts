/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Required. Profile which tells what the primitive action should be.
 */
export enum GatewaySecurityPolicyRuleBasicProfileEnum {
  BasicProfileUnspecified = "BASIC_PROFILE_UNSPECIFIED",
  Allow = "ALLOW",
  Deny = "DENY",
}

/**
 * The GatewaySecurityPolicyRule resource is in a nested collection within a GatewaySecurityPolicy and represents a traffic matching condition and associated action to perform.
 */
export class GatewaySecurityPolicyRule extends SpeakeasyBase {
  /**
   * Optional. CEL expression for matching on L7/application level criteria.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applicationMatcher" })
  applicationMatcher?: string;

  /**
   * Required. Profile which tells what the primitive action should be.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "basicProfile" })
  basicProfile?: GatewaySecurityPolicyRuleBasicProfileEnum;

  /**
   * Output only. Time when the rule was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Optional. Free-text description of the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Required. Whether the rule is enforced.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Required. Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Required. Priority of the rule. Lower number corresponds to higher precedence.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priority" })
  priority?: number;

  /**
   * Required. CEL expression for matching on session criteria.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sessionMatcher" })
  sessionMatcher?: string;

  /**
   * Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tlsInspectionEnabled" })
  tlsInspectionEnabled?: boolean;

  /**
   * Output only. Time when the rule was updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}

/**
 * The GatewaySecurityPolicyRule resource is in a nested collection within a GatewaySecurityPolicy and represents a traffic matching condition and associated action to perform.
 */
export class GatewaySecurityPolicyRuleInput extends SpeakeasyBase {
  /**
   * Optional. CEL expression for matching on L7/application level criteria.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applicationMatcher" })
  applicationMatcher?: string;

  /**
   * Required. Profile which tells what the primitive action should be.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "basicProfile" })
  basicProfile?: GatewaySecurityPolicyRuleBasicProfileEnum;

  /**
   * Optional. Free-text description of the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Required. Whether the rule is enforced.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Required. Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Required. Priority of the rule. Lower number corresponds to higher precedence.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priority" })
  priority?: number;

  /**
   * Required. CEL expression for matching on session criteria.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sessionMatcher" })
  sessionMatcher?: string;

  /**
   * Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tlsInspectionEnabled" })
  tlsInspectionEnabled?: boolean;
}
