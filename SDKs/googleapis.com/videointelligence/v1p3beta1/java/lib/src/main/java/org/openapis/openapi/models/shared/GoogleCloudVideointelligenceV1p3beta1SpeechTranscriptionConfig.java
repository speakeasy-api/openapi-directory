/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig - Config for SPEECH_TRANSCRIPTION.
 */
public class GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig {
    /**
     * Optional. For file formats, such as MXF or MKV, supporting multiple audio tracks, specify up to two tracks. Default: track 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioTracks")
    public Integer[] audioTracks;
    public GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig withAudioTracks(Integer[] audioTracks) {
        this.audioTracks = audioTracks;
        return this;
    }
    
    /**
     * Optional. If set, specifies the estimated number of speakers in the conversation. If not set, defaults to '2'. Ignored unless enable_speaker_diarization is set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diarizationSpeakerCount")
    public Integer diarizationSpeakerCount;
    public GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig withDiarizationSpeakerCount(Integer diarizationSpeakerCount) {
        this.diarizationSpeakerCount = diarizationSpeakerCount;
        return this;
    }
    
    /**
     * Optional. If 'true', adds punctuation to recognition result hypotheses. This feature is only available in select languages. Setting this for requests in other languages has no effect at all. The default 'false' value does not add punctuation to result hypotheses. NOTE: "This is currently offered as an experimental service, complimentary to all users. In the future this may be exclusively available as a premium feature."
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableAutomaticPunctuation")
    public Boolean enableAutomaticPunctuation;
    public GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig withEnableAutomaticPunctuation(Boolean enableAutomaticPunctuation) {
        this.enableAutomaticPunctuation = enableAutomaticPunctuation;
        return this;
    }
    
    /**
     * Optional. If 'true', enables speaker detection for each recognized word in the top alternative of the recognition result using a speaker_tag provided in the WordInfo. Note: When this is true, we send all the words from the beginning of the audio for the top alternative in every consecutive response. This is done in order to improve our speaker tags as our models learn to identify the speakers in the conversation over time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableSpeakerDiarization")
    public Boolean enableSpeakerDiarization;
    public GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig withEnableSpeakerDiarization(Boolean enableSpeakerDiarization) {
        this.enableSpeakerDiarization = enableSpeakerDiarization;
        return this;
    }
    
    /**
     * Optional. If `true`, the top result includes a list of words and the confidence for those words. If `false`, no word-level confidence information is returned. The default is `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableWordConfidence")
    public Boolean enableWordConfidence;
    public GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig withEnableWordConfidence(Boolean enableWordConfidence) {
        this.enableWordConfidence = enableWordConfidence;
        return this;
    }
    
    /**
     * Optional. If set to `true`, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. "f***". If set to `false` or omitted, profanities won't be filtered out.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterProfanity")
    public Boolean filterProfanity;
    public GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig withFilterProfanity(Boolean filterProfanity) {
        this.filterProfanity = filterProfanity;
        return this;
    }
    
    /**
     * Required. *Required* The language of the supplied audio as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US". See [Language Support](https://cloud.google.com/speech/docs/languages) for a list of the currently supported language codes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageCode")
    public String languageCode;
    public GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * Optional. Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of `SpeechRecognitionAlternative` messages within each `SpeechTranscription`. The server may return fewer than `max_alternatives`. Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of one. If omitted, will return a maximum of one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxAlternatives")
    public Integer maxAlternatives;
    public GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig withMaxAlternatives(Integer maxAlternatives) {
        this.maxAlternatives = maxAlternatives;
        return this;
    }
    
    /**
     * Optional. A means to provide context to assist the speech recognition.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("speechContexts")
    public GoogleCloudVideointelligenceV1p3beta1SpeechContext[] speechContexts;
    public GoogleCloudVideointelligenceV1p3beta1SpeechTranscriptionConfig withSpeechContexts(GoogleCloudVideointelligenceV1p3beta1SpeechContext[] speechContexts) {
        this.speechContexts = speechContexts;
        return this;
    }
    
}
