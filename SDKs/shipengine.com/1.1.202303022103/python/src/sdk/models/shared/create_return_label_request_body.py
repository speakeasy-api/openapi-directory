"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import label_charge_event_enum as shared_label_charge_event_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreateReturnLabelRequestBodyDisplaySchemeEnum(str, Enum):
    r"""The display format that the label should be shown in."""
    LABEL = 'label'
    QR_CODE = 'qr_code'
    LABEL_AND_QR_CODE = 'label_and_qr_code'

class CreateReturnLabelRequestBodyLabelDownloadTypeEnum(str, Enum):
    r"""There are two different ways to [download a label](https://www.shipengine.com/docs/labels/downloading/):
    
    |Label Download Type | Description
    |--------------------|------------------------------
    |`url`               |You will receive a URL, which you can use to download the label in a separate request. The URL will remain valid for 90 days.<br><br>This is the default if `label_download_type` is unspecified.
    |`inline`            |You will receive the Base64-encoded label as part of the response. No need for a second request to download the label.
    """
    URL = 'url'
    INLINE = 'inline'

class CreateReturnLabelRequestBodyLabelFormatEnum(str, Enum):
    r"""The possible file formats in which shipping labels can be downloaded.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
    
    |Label Format  | Supported Carriers
    |--------------|-----------------------------------
    |`pdf`         | All carriers
    |`png`         | `fedex` <br> `stamps_com` <br> `ups` <br> `usps`
    |`zpl`         | `access_worldwide` <br> `apc` <br> `asendia` <br> `dhl_global_mail` <br> `dhl_express` <br> `dhl_express_australia` <br> `dhl_express_canada` <br> `dhl_express_worldwide` <br> `dhl_express_uk` <br> `dpd` <br> `endicia` <br> `fedex` <br> `fedex_uk` <br> `firstmile` <br> `imex` <br> `newgistics` <br> `ontrac` <br> `rr_donnelley` <br> `stamps_com` <br> `ups` <br> `usps`
    """
    PDF = 'pdf'
    PNG = 'png'
    ZPL = 'zpl'

class CreateReturnLabelRequestBodyLabelLayoutEnum(str, Enum):
    r"""The available layouts (sizes) in which shipping labels can be downloaded.  The label format determines which sizes are supported.  `4x6` is supported for all label formats, whereas `letter` (8.5\\" x 11\\") is only supported for `pdf` format."""
    FOURX6 = '4x6'
    LETTER = 'letter'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateReturnLabelRequestBody:
    r"""A create return label request body"""
    
    charge_event: Optional[shared_label_charge_event_enum.LabelChargeEventEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charge_event'), 'exclude': lambda f: f is None }})
    r"""The label charge event."""  
    display_scheme: Optional[CreateReturnLabelRequestBodyDisplaySchemeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_scheme'), 'exclude': lambda f: f is None }})
    r"""The display format that the label should be shown in."""  
    label_download_type: Optional[CreateReturnLabelRequestBodyLabelDownloadTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_download_type'), 'exclude': lambda f: f is None }})  
    label_format: Optional[CreateReturnLabelRequestBodyLabelFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_format'), 'exclude': lambda f: f is None }})
    r"""The file format that you want the label to be in.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats."""  
    label_image_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_image_id'), 'exclude': lambda f: f is None }})
    r"""The label image resource that was used to create a custom label image."""  
    label_layout: Optional[CreateReturnLabelRequestBodyLabelLayoutEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_layout'), 'exclude': lambda f: f is None }})
    r"""The layout (size) that you want the label to be in.  The `label_format` determines which sizes are allowed.  `4x6` is supported for all label formats, whereas `letter` (8.5\\" x 11\\") is only supported for `pdf` format."""  
    