"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import integratorobjectresult as shared_integratorobjectresult
from ..shared import toplevelactions as shared_toplevelactions
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class IntegratorCardPayloadResponseResponseVersionEnum(str, Enum):
    V1 = 'v1'
    V3 = 'v3'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IntegratorCardPayloadResponse:
    r"""The card details payload, sent to HubSpot by an app in response to a data fetch request when a user visits a CRM record page."""
    
    total_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount') }})
    r"""The total number of card properties that will be sent in this response."""  
    all_items_link_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allItemsLinkUrl'), 'exclude': lambda f: f is None }})
    r"""URL to a page the integrator has built that displays all details for this card. This URL will be displayed to users under a `See more [x]` link if there are more than five items in your response, where `[x]` is the value of `itemLabel`."""  
    card_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardLabel'), 'exclude': lambda f: f is None }})
    r"""The label to be used for the `allItemsLinkUrl` link (e.g. 'See more tickets'). If not provided, this falls back to the card's title."""  
    response_version: Optional[IntegratorCardPayloadResponseResponseVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseVersion'), 'exclude': lambda f: f is None }})  
    sections: Optional[list[shared_integratorobjectresult.IntegratorObjectResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sections'), 'exclude': lambda f: f is None }})
    r"""A list of up to five valid card sub categories."""  
    top_level_actions: Optional[shared_toplevelactions.TopLevelActions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topLevelActions'), 'exclude': lambda f: f is None }})  
    