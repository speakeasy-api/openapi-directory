"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = exports.SubscriptionTrialSettings = exports.SubscriptionTransferInfo = exports.SubscriptionPlan = exports.SubscriptionPlanCommitmentInterval = void 0;
var utils_1 = require("../../../internal/utils");
var renewalsettings_1 = require("./renewalsettings");
var seats_1 = require("./seats");
var class_transformer_1 = require("class-transformer");
/**
 * In this version of the API, annual commitment plan's interval is one year. *Note: *When `billingMethod` value is `OFFLINE`, the subscription property object `plan.commitmentInterval` is omitted in all API responses.
 */
var SubscriptionPlanCommitmentInterval = /** @class */ (function (_super) {
    __extends(SubscriptionPlanCommitmentInterval, _super);
    function SubscriptionPlanCommitmentInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "endTime" }),
        __metadata("design:type", String)
    ], SubscriptionPlanCommitmentInterval.prototype, "endTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "startTime" }),
        __metadata("design:type", String)
    ], SubscriptionPlanCommitmentInterval.prototype, "startTime", void 0);
    return SubscriptionPlanCommitmentInterval;
}(utils_1.SpeakeasyBase));
exports.SubscriptionPlanCommitmentInterval = SubscriptionPlanCommitmentInterval;
/**
 * The `plan` property is required. In this version of the API, the G Suite plans are the flexible plan, annual commitment plan, and the 30-day free trial plan. For more information about the API"s payment plans, see the API concepts.
 */
var SubscriptionPlan = /** @class */ (function (_super) {
    __extends(SubscriptionPlan, _super);
    function SubscriptionPlan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "commitmentInterval" }),
        (0, class_transformer_1.Type)(function () { return SubscriptionPlanCommitmentInterval; }),
        __metadata("design:type", SubscriptionPlanCommitmentInterval)
    ], SubscriptionPlan.prototype, "commitmentInterval", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "isCommitmentPlan" }),
        __metadata("design:type", Boolean)
    ], SubscriptionPlan.prototype, "isCommitmentPlan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "planName" }),
        __metadata("design:type", String)
    ], SubscriptionPlan.prototype, "planName", void 0);
    return SubscriptionPlan;
}(utils_1.SpeakeasyBase));
exports.SubscriptionPlan = SubscriptionPlan;
/**
 * Read-only transfer related information for the subscription. For more information, see retrieve transferable subscriptions for a customer.
 */
var SubscriptionTransferInfo = /** @class */ (function (_super) {
    __extends(SubscriptionTransferInfo, _super);
    function SubscriptionTransferInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "currentLegacySkuId" }),
        __metadata("design:type", String)
    ], SubscriptionTransferInfo.prototype, "currentLegacySkuId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minimumTransferableSeats" }),
        __metadata("design:type", Number)
    ], SubscriptionTransferInfo.prototype, "minimumTransferableSeats", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transferabilityExpirationTime" }),
        __metadata("design:type", String)
    ], SubscriptionTransferInfo.prototype, "transferabilityExpirationTime", void 0);
    return SubscriptionTransferInfo;
}(utils_1.SpeakeasyBase));
exports.SubscriptionTransferInfo = SubscriptionTransferInfo;
/**
 * The G Suite annual commitment and flexible payment plans can be in a 30-day free trial. For more information, see the API concepts.
 */
var SubscriptionTrialSettings = /** @class */ (function (_super) {
    __extends(SubscriptionTrialSettings, _super);
    function SubscriptionTrialSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "isInTrial" }),
        __metadata("design:type", Boolean)
    ], SubscriptionTrialSettings.prototype, "isInTrial", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "trialEndTime" }),
        __metadata("design:type", String)
    ], SubscriptionTrialSettings.prototype, "trialEndTime", void 0);
    return SubscriptionTrialSettings;
}(utils_1.SpeakeasyBase));
exports.SubscriptionTrialSettings = SubscriptionTrialSettings;
/**
 * JSON template for a subscription.
 */
var Subscription = /** @class */ (function (_super) {
    __extends(Subscription, _super);
    function Subscription() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "billingMethod" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "billingMethod", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTime" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "creationTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "customerDomain" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "customerDomain", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "customerId" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "customerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dealCode" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "dealCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "plan" }),
        (0, class_transformer_1.Type)(function () { return SubscriptionPlan; }),
        __metadata("design:type", SubscriptionPlan)
    ], Subscription.prototype, "plan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "purchaseOrderId" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "purchaseOrderId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "renewalSettings" }),
        (0, class_transformer_1.Type)(function () { return renewalsettings_1.RenewalSettings; }),
        __metadata("design:type", renewalsettings_1.RenewalSettings)
    ], Subscription.prototype, "renewalSettings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "resourceUiUrl" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "resourceUiUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "seats" }),
        (0, class_transformer_1.Type)(function () { return seats_1.Seats; }),
        __metadata("design:type", seats_1.Seats)
    ], Subscription.prototype, "seats", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "skuId" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "skuId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "skuName" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "skuName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subscriptionId" }),
        __metadata("design:type", String)
    ], Subscription.prototype, "subscriptionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "suspensionReasons" }),
        __metadata("design:type", Array)
    ], Subscription.prototype, "suspensionReasons", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transferInfo" }),
        (0, class_transformer_1.Type)(function () { return SubscriptionTransferInfo; }),
        __metadata("design:type", SubscriptionTransferInfo)
    ], Subscription.prototype, "transferInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "trialSettings" }),
        (0, class_transformer_1.Type)(function () { return SubscriptionTrialSettings; }),
        __metadata("design:type", SubscriptionTrialSettings)
    ], Subscription.prototype, "trialSettings", void 0);
    return Subscription;
}(utils_1.SpeakeasyBase));
exports.Subscription = Subscription;
