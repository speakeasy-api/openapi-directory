"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class BillbeeInterfacesBillbeeAPIModelCustomerAddressAPIModelAddressTypeEnum(str, Enum):
    r"""The type of the address"""
    ONE = '1'
    TWO = '2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillbeeInterfacesBillbeeAPIModelCustomerAddressAPIModel:
    r"""Container for passing address data"""
    
    address_addition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressAddition'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'AddressAddition' }})  
    address_type: Optional[BillbeeInterfacesBillbeeAPIModelCustomerAddressAPIModelAddressTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressType'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'AddressType' }})
    r"""The type of the address"""  
    archived_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ArchivedAt' }})
    r"""If set, the customeraddress was already archived at the given date. Further modification is disabled."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('City'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'City' }})  
    company: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Company'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Company' }})
    r"""The name of the company"""  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountryCode'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CountryCode' }})
    r"""The ISO2 code of the country"""  
    customer_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CustomerId' }})
    r"""The internal Billbee id of the customer the address belongs to"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Email'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Email' }})  
    fax: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Fax'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Fax' }})  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'FirstName' }})  
    housenumber: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Housenumber'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Housenumber' }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Id' }})
    r"""The internal Billbee ID of the address record. Can be null if a new address is created"""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastName'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'LastName' }})  
    name2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name2'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Name2' }})
    r"""Optionally an additional name field"""  
    restored_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RestoredAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'RestoredAt' }})
    r"""If set, the customeraddress was restored from the archive at the given date."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'State' }})  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Street'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Street' }})  
    tel1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tel1'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Tel1' }})  
    tel2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tel2'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Tel2' }})  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Zip'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Zip' }})  
    