"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import postrevenueschedulebytransactionratablytyperevenueevent as shared_postrevenueschedulebytransactionratablytyperevenueevent
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class POSTRevenueScheduleByTransactionRatablyDMType:
    r"""Container for custom fields of a Revenue Schedule object."""
    
    recognition_end: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognitionEnd'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The end date of a recognition period in `yyyy-mm-dd` format.
    
    The maximum difference between the `recognitionStart` and `recognitionEnd` date fields is equal to 250 multiplied by the length of an accounting period.
    """  
    recognition_start: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognitionStart'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The start date of a recognition period in `yyyy-mm-dd` format.
    
    If there is a closed accounting period between the `recognitionStart` and `recognitionEnd` dates, the revenue that would be placed in the closed accounting period is instead placed in the next open accounting period.
    """  
    distribution_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributionType'), 'exclude': lambda f: f is None }})
    r"""How you want to distribute the revenue.
    
    * Daily Distribution: Distributes revenue evenly across each day between the recognitionStart and recognitionEnd dates.
    * Monthly Distribution (Back Load): Back loads the revenue so you distribute the monthly amount in the partial month in the end only.
    * Monthly Distribution (Front Load): Front loads the revenue so you distribute the monthly amount in the partial month in the beginning only.
    * Monthly Distribution (Proration by Days): Splits the revenue amount between the two partial months.
    
    **Note:** To use any of the Monthly Distribution options, you must have the \"Monthly recognition over time\" model enabled in **Settings > Finance > Manage Revenue Recognition Models** in the Zuora UI.
    """  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Additional information about this record."""  
    revenue_event: Optional[shared_postrevenueschedulebytransactionratablytyperevenueevent.POSTRevenueScheduleByTransactionRatablyTypeRevenueEvent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueEvent'), 'exclude': lambda f: f is None }})
    r"""Must specify at least one of `eventType` or `eventTypeSystemId`."""  
    