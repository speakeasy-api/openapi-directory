// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateWorkloadShareRequestBodyPermissionTypeEnum - Permission granted on a workload share.
type CreateWorkloadShareRequestBodyPermissionTypeEnum string

const (
	CreateWorkloadShareRequestBodyPermissionTypeEnumReadonly    CreateWorkloadShareRequestBodyPermissionTypeEnum = "READONLY"
	CreateWorkloadShareRequestBodyPermissionTypeEnumContributor CreateWorkloadShareRequestBodyPermissionTypeEnum = "CONTRIBUTOR"
)

func (e *CreateWorkloadShareRequestBodyPermissionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "READONLY":
		fallthrough
	case "CONTRIBUTOR":
		*e = CreateWorkloadShareRequestBodyPermissionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWorkloadShareRequestBodyPermissionTypeEnum: %s", s)
	}
}

type CreateWorkloadShareRequestBody struct {
	// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after it has completed successfully, the result of the original request is returned. </p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
	ClientRequestToken string `json:"ClientRequestToken"`
	// Permission granted on a workload share.
	PermissionType CreateWorkloadShareRequestBodyPermissionTypeEnum `json:"PermissionType"`
	// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.
	SharedWith string `json:"SharedWith"`
}

type CreateWorkloadShareRequest struct {
	RequestBody       CreateWorkloadShareRequestBody `request:"mediaType=application/json"`
	WorkloadID        string                         `pathParam:"style=simple,explode=false,name=WorkloadId"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateWorkloadShareResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateWorkloadShareOutput *shared.CreateWorkloadShareOutput
	// InternalServerException
	InternalServerException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
