/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class PayRunJobInstructionPayRunJobInstruction {
    /**
     * The pay run job instructions' employees
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Employees")
    public PayRunJobInstructionPayRunJobInstructionEmployee employees;

    public PayRunJobInstructionPayRunJobInstruction withEmployees(PayRunJobInstructionPayRunJobInstructionEmployee employees) {
        this.employees = employees;
        return this;
    }
    
    /**
     * The pay run job instructions' end date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("EndDate")
    public LocalDate endDate;

    public PayRunJobInstructionPayRunJobInstruction withEndDate(LocalDate endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * The pay run job instructions' holding date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("HoldingDate")
    public OffsetDateTime holdingDate;

    public PayRunJobInstructionPayRunJobInstruction withHoldingDate(OffsetDateTime holdingDate) {
        this.holdingDate = holdingDate;
        return this;
    }
    
    /**
     * The pay run job instructions' is supplementary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsSupplementary")
    public Boolean isSupplementary;

    public PayRunJobInstructionPayRunJobInstruction withIsSupplementary(Boolean isSupplementary) {
        this.isSupplementary = isSupplementary;
        return this;
    }
    
    /**
     * The pay run job instructions' pay schedule
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaySchedule")
    public PayRunJobInstructionPayRunJobInstructionPaySchedule paySchedule;

    public PayRunJobInstructionPayRunJobInstruction withPaySchedule(PayRunJobInstructionPayRunJobInstructionPaySchedule paySchedule) {
        this.paySchedule = paySchedule;
        return this;
    }
    
    /**
     * The pay run job instructions' payment date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("PaymentDate")
    public LocalDate paymentDate;

    public PayRunJobInstructionPayRunJobInstruction withPaymentDate(LocalDate paymentDate) {
        this.paymentDate = paymentDate;
        return this;
    }
    
    /**
     * The pay run job instructions' start date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("StartDate")
    public LocalDate startDate;

    public PayRunJobInstructionPayRunJobInstruction withStartDate(LocalDate startDate) {
        this.startDate = startDate;
        return this;
    }
    
    public PayRunJobInstructionPayRunJobInstruction(){}
}
