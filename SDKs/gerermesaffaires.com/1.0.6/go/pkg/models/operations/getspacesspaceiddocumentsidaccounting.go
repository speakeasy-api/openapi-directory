// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetSpacesSpaceIDDocumentsIDAccountingRequest struct {
	// Id of the document
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum string

const (
	GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnumCustomer    GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum = "customer"
	GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnumProvider    GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum = "provider"
	GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnumBank        GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum = "bank"
	GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnumCashWoucher GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum = "cashWoucher"
	GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnumFiscal      GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum = "fiscal"
	GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnumInsurance   GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum = "insurance"
	GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnumSocial      GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum = "social"
	GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnumOther       GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum = "other"
	GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnumPermanent   GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum = "permanent"
)

func (e GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum) ToPointer() *GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum {
	return &e
}

func (e *GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum: %v", v)
	}
}

type GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccounting struct {
	AccountedOn *string                                                                        `json:"AccountedOn,omitempty"`
	Workbook    *GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                        `json:"YearMonth,omitempty"`
}

// GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSON - document with accounting property
type GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSON struct {
	Accounting *GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONAccounting `json:"Accounting,omitempty"`
	Author     *string                                                            `json:"Author,omitempty"`
	Class      []string                                                           `json:"Class,omitempty"`
	Code       *string                                                            `json:"Code,omitempty"`
	Comment    *string                                                            `json:"Comment,omitempty"`
	Date       *string                                                            `json:"Date,omitempty"`
	Extension  *string                                                            `json:"Extension,omitempty"`
	ID         *string                                                            `json:"Id,omitempty"`
	Title      *string                                                            `json:"Title,omitempty"`
}

type GetSpacesSpaceIDDocumentsIDAccountingResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// document with accounting property
	GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSONObject *GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSON
}
