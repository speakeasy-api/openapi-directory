// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetQueryExtensionExtensionEnum - extension
type GetQueryExtensionExtensionEnum string

const (
	GetQueryExtensionExtensionEnumAtom GetQueryExtensionExtensionEnum = "atom"
	GetQueryExtensionExtensionEnumRss  GetQueryExtensionExtensionEnum = "rss"
	GetQueryExtensionExtensionEnumHTML GetQueryExtensionExtensionEnum = "html"
	GetQueryExtensionExtensionEnumJSON GetQueryExtensionExtensionEnum = "json"
)

func (e GetQueryExtensionExtensionEnum) ToPointer() *GetQueryExtensionExtensionEnum {
	return &e
}

func (e *GetQueryExtensionExtensionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "atom":
		fallthrough
	case "rss":
		fallthrough
	case "html":
		fallthrough
	case "json":
		*e = GetQueryExtensionExtensionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetQueryExtensionExtensionEnum: %v", v)
	}
}

type GetQueryExtensionRequest struct {
	Count *float64 `queryParam:"style=form,explode=true,name=count"`
	// extension
	Extension     GetQueryExtensionExtensionEnum `pathParam:"style=simple,explode=false,name=extension"`
	InURLPrefixes *string                        `queryParam:"style=form,explode=true,name=inUrlPrefixes"`
	Q             string                         `queryParam:"style=form,explode=true,name=q"`
	Start         *float64                       `queryParam:"style=form,explode=true,name=start"`
	Subdomains    *string                        `queryParam:"style=form,explode=true,name=subdomains"`
}

type GetQueryExtensionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
