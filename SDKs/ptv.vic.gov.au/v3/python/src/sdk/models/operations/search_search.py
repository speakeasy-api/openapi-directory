"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import v3_errorresponse as shared_v3_errorresponse
from ..shared import v3_searchresult as shared_v3_searchresult
from enum import Enum
from typing import Optional

class SearchSearchRouteTypesEnum(str, Enum):
    ZERO = '0'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'


@dataclasses.dataclass
class SearchSearchRequest:
    
    search_term: str = dataclasses.field(metadata={'path_param': { 'field_name': 'search_term', 'style': 'simple', 'explode': False }})
    r"""Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)"""  
    devid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'devid', 'style': 'form', 'explode': True }})
    r"""Your developer id"""  
    include_addresses: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_addresses', 'style': 'form', 'explode': True }})
    r"""Placeholder for future development; currently unavailable"""  
    include_outlets: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_outlets', 'style': 'form', 'explode': True }})
    r"""Indicates if outlets will be returned in response (default = true)"""  
    latitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'latitude', 'style': 'form', 'explode': True }})
    r"""Filter by geographic coordinate of latitude"""  
    longitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'longitude', 'style': 'form', 'explode': True }})
    r"""Filter by geographic coordinate of longitude"""  
    match_route_by_suburb: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'match_route_by_suburb', 'style': 'form', 'explode': True }})
    r"""Indicates whether to find routes by suburbs in the search term (default = true)"""  
    match_stop_by_gtfs_stop_id: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'match_stop_by_gtfs_stop_id', 'style': 'form', 'explode': True }})
    r"""Indicates whether to search for stops according to a metlink stop ID (default = false)"""  
    match_stop_by_suburb: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'match_stop_by_suburb', 'style': 'form', 'explode': True }})
    r"""Indicates whether to find stops by suburbs in the search term (default = true)"""  
    max_distance: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_distance', 'style': 'form', 'explode': True }})
    r"""Filter by maximum distance (in metres) from location specified via latitude and longitude parameters"""  
    route_types: Optional[list[SearchSearchRouteTypesEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'route_types', 'style': 'form', 'explode': True }})
    r"""Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)"""  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'signature', 'style': 'form', 'explode': True }})
    r"""Authentication signature for request"""  
    token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'token', 'style': 'form', 'explode': True }})
    r"""Please ignore"""  
    

@dataclasses.dataclass
class SearchSearchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    v3_error_response: Optional[shared_v3_errorresponse.V3ErrorResponse] = dataclasses.field(default=None)
    r"""Invalid Request"""  
    v3_search_result: Optional[shared_v3_searchresult.V3SearchResult] = dataclasses.field(default=None)
    r"""Stops, routes and myki ticket outlets that contain the search term (note: stops and routes are ordered by route_type by default)."""  
    