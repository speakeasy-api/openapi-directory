"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import itemdetail as shared_itemdetail
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class NextPlaybackItemSuggestionTypeEnum(str, Enum):
    r"""Field indicating the type or reason behind the suggestion.
    
    Id Type   | Show Watched Status| Value            | Description
    ----------|--------------------|------------------|---------------------------------
    showId    | Unwatched          | StartWatching    |
    showId    | Completely watched | RestartWatching  |
    showId    | Partly watched     | ContinueWatching | Suggested episode partly watched
    showId    | Partly watched     | Sequential       | Suggested episode unwatched
    episodeId | Any                | Sequential       | Next episode in show
    """
    START_WATCHING = 'StartWatching'
    CONTINUE_WATCHING = 'ContinueWatching'
    RESTART_WATCHING = 'RestartWatching'
    SEQUENTIAL = 'Sequential'
    NONE = 'None'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NextPlaybackItem:
    r"""The detail of the next item to play."""
    
    source_item_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceItemId') }})
    r"""The id of the item used to determine the next item to play."""  
    first_watched_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstWatchedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time when the item corresponding to the itemId passed in by the client was
    first watched by the user. Will be `undefined` if the user has never
    watched the item.
    
    It can be used to identify the scenario where the user has never watched a
    show and we are suggesting they watch the first episode (i.e. it is
    missing in this scenario)
    
    **This will only be populated when a `showId` is passed in**
    """  
    last_watched_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastWatchedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time when the item corresponding to the itemId passed in by the client was
    last watched by the user. Will be `undefined` if the user has never
    watched the item.
    
    It can be used to identify the scenario where the user has never watched a
    show and we are suggesting they watch the first episode (i.e. it is
    missing in this scenario)
    
    **This will only be populated when a `showId` is passed in**
    """  
    next: Optional[shared_itemdetail.ItemDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next'), 'exclude': lambda f: f is None }})  
    suggestion_type: Optional[NextPlaybackItemSuggestionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestionType'), 'exclude': lambda f: f is None }})
    r"""Field indicating the type or reason behind the suggestion.
    
    Id Type   | Show Watched Status| Value            | Description
    ----------|--------------------|------------------|---------------------------------
    showId    | Unwatched          | StartWatching    |
    showId    | Completely watched | RestartWatching  |
    showId    | Partly watched     | ContinueWatching | Suggested episode partly watched
    showId    | Partly watched     | Sequential       | Suggested episode unwatched
    episodeId | Any                | Sequential       | Next episode in show
    """  
    