<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionDisks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksAddResourcePoliciesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksAddResourcePoliciesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksAddResourcePoliciesResponse
     */
	public function computeRegionDisksAddResourcePolicies(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksAddResourcePoliciesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksAddResourcePoliciesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksAddResourcePoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksAddResourcePoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionDisksAddResourcePoliciesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksAddResourcePoliciesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksAddResourcePoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk create a set of disks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksBulkInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksBulkInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksBulkInsertResponse
     */
	public function computeRegionDisksBulkInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksBulkInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksBulkInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksBulkInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/bulkInsert', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksBulkInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkInsertDiskResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksBulkInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksBulkInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a snapshot of a specified persistent disk. For regular snapshot creation, consider using snapshots.insert instead, as that method supports more features, such as creating snapshots in a project different from the source disk project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksCreateSnapshotRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksCreateSnapshotSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksCreateSnapshotResponse
     */
	public function computeRegionDisksCreateSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksCreateSnapshotRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksCreateSnapshotSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksCreateSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{disk}/createSnapshot', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksCreateSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snapshot", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksCreateSnapshotRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksCreateSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksDeleteResponse
     */
	public function computeRegionDisksDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{disk}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a specified regional persistent disk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetResponse
     */
	public function computeRegionDisksGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{disk}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->disk = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Disk', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetIamPolicyResponse
     */
	public function computeRegionDisksGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a persistent regional disk in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksInsertResponse
     */
	public function computeRegionDisksInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disk", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of persistent disks contained within the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksListResponse
     */
	public function computeRegionDisksList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diskList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiskList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes resource policies from a regional disk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksRemoveResourcePoliciesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksRemoveResourcePoliciesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksRemoveResourcePoliciesResponse
     */
	public function computeRegionDisksRemoveResourcePolicies(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksRemoveResourcePoliciesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksRemoveResourcePoliciesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksRemoveResourcePoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksRemoveResourcePoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionDisksRemoveResourcePoliciesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksRemoveResourcePoliciesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksRemoveResourcePoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resizes the specified regional persistent disk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksResizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksResizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksResizeResponse
     */
	public function computeRegionDisksResize(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksResizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksResizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksResizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{disk}/resize', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksResizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionDisksResizeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksResizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksResizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetIamPolicyResponse
     */
	public function computeRegionDisksSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on the target regional disk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetLabelsResponse
     */
	public function computeRegionDisksSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous replication. Must be invoked on the primary disk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStartAsyncReplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStartAsyncReplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStartAsyncReplicationResponse
     */
	public function computeRegionDisksStartAsyncReplication(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStartAsyncReplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStartAsyncReplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStartAsyncReplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{disk}/startAsyncReplication', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStartAsyncReplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionDisksStartAsyncReplicationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStartAsyncReplicationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStartAsyncReplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops asynchronous replication. Can be invoked either on the primary or on the secondary disk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopAsyncReplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopAsyncReplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopAsyncReplicationResponse
     */
	public function computeRegionDisksStopAsyncReplication(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopAsyncReplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopAsyncReplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopAsyncReplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{disk}/stopAsyncReplication', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopAsyncReplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopAsyncReplicationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopAsyncReplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops asynchronous replication for a consistency group of disks. Can be invoked either in the primary or secondary scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopGroupAsyncReplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopGroupAsyncReplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopGroupAsyncReplicationResponse
     */
	public function computeRegionDisksStopGroupAsyncReplication(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopGroupAsyncReplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopGroupAsyncReplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopGroupAsyncReplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/stopGroupAsyncReplication', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopGroupAsyncReplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disksStopGroupAsyncReplicationResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopGroupAsyncReplicationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksStopGroupAsyncReplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksTestIamPermissionsResponse
     */
	public function computeRegionDisksTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the specified disk with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: user_license.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksUpdateResponse
     */
	public function computeRegionDisksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/disks/{disk}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disk1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionDisksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}