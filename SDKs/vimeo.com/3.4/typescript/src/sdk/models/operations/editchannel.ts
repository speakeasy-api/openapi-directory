/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class EditChannelSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;
}

/**
 * The privacy level of the channel.
 */
export enum EditChannelRequestBodyPrivacyEnum {
  Anybody = "anybody",
  Moderators = "moderators",
  Users = "users",
}

export class EditChannelRequestBody extends SpeakeasyBase {
  /**
   * The description of the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`. Submitting `""` for this field removes the link alias.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link?: string;

  /**
   * The name of the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The privacy level of the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  privacy?: EditChannelRequestBodyPrivacyEnum;
}

export class EditChannelRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/vnd.vimeo.channel+json",
  })
  requestBody?: EditChannelRequestBody;

  /**
   * The ID of the channel.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=channel_id",
  })
  channelId: number;
}

export class EditChannelResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The channel was edited.
   */
  @SpeakeasyMetadata()
  channel?: shared.Channel;

  /**
   * A parameter is invalid.
   */
  @SpeakeasyMetadata()
  legacyError?: shared.LegacyError;
}
