/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * A router of public health data from multiple senders and receivers
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "http://cdcgov.local",
	};
	
	
	
	
	
	
	
	
	
	
	
	
	
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Delete an organization (and the associated receivers and senders)
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameResponse deleteSettingsOrganizationsOrganizationName(org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameRequest request, org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameRequest.class, baseUrl, "/settings/organizations/{organizationName}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameResponse res = new org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameResponse() {{
            organization = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Organization out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Organization.class);
                res.organization = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * Delete a receiver
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse deleteSettingsOrganizationsOrganizationNameReceiversReceiverName(org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest request, org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest.class, baseUrl, "/settings/organizations/{organizationName}/receivers/{receiverName}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse res = new org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse() {{
            receiver = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Receiver out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Receiver.class);
                res.receiver = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * Delete a sender
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameResponse deleteSettingsOrganizationsOrganizationNameSendersSenderName(org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameRequest request, org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameRequest.class, baseUrl, "/settings/organizations/{organizationName}/senders/{senderName}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameResponse res = new org.openapis.openapi.models.operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameResponse() {{
            sender = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Sender out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Sender.class);
                res.sender = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * The settings for all organizations of the system. Must have admin access.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSettingsOrganizationsResponse getSettingsOrganizations() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/settings/organizations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSettingsOrganizationsResponse res = new org.openapis.openapi.models.operations.GetSettingsOrganizationsResponse() {{
            organizations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Organization[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Organization[].class);
                res.organizations = out;
            }
        }

        return res;
    }

    /**
     * A single organization settings
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameResponse getSettingsOrganizationsOrganizationName(org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameRequest request, org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameRequest.class, baseUrl, "/settings/organizations/{organizationName}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameResponse res = new org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameResponse() {{
            organization = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Organization out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Organization.class);
                res.organization = out;
            }
        }

        return res;
    }

    /**
     * A list of receivers and their current settings
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversResponse getSettingsOrganizationsOrganizationNameReceivers(org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversRequest request, org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversRequest.class, baseUrl, "/settings/organizations/{organizationName}/receivers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversResponse res = new org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversResponse() {{
            receivers = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Receiver[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Receiver[].class);
                res.receivers = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * The settings of a single of receiver
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse getSettingsOrganizationsOrganizationNameReceiversReceiverName(org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest request, org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest.class, baseUrl, "/settings/organizations/{organizationName}/receivers/{receiverName}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse res = new org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse() {{
            receiver = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Receiver out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Receiver.class);
                res.receiver = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * A list of senders
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersResponse getSettingsOrganizationsOrganizationNameSenders(org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersRequest request, org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersRequest.class, baseUrl, "/settings/organizations/{organizationName}/senders", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersResponse res = new org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersResponse() {{
            senders = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Sender[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Sender[].class);
                res.senders = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * The settings of a single of sender
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameResponse getSettingsOrganizationsOrganizationNameSendersSenderName(org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameRequest request, org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameRequest.class, baseUrl, "/settings/organizations/{organizationName}/senders/{senderName}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameResponse res = new org.openapis.openapi.models.operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameResponse() {{
            sender = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Sender out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Sender.class);
                res.sender = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * Retrived the last modified for all settings of the system. Must have admin access.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.HeadSettingsOrganizationsResponse headSettingsOrganizations() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/settings/organizations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("HEAD");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.HeadSettingsOrganizationsResponse res = new org.openapis.openapi.models.operations.HeadSettingsOrganizationsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
        }

        return res;
    }

    /**
     * Post a report to the data hub
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostReportsResponse postReports(org.openapis.openapi.models.operations.PostReportsRequest request, org.openapis.openapi.models.operations.PostReportsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/reports");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "string");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PostReportsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostReportsResponse res = new org.openapis.openapi.models.operations.PostReportsResponse() {{
            report = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 201 || httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Report out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Report.class);
                res.report = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Create or update the direct settings associated with an organization
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameResponse putSettingsOrganizationsOrganizationName(org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameRequest request, org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameRequest.class, baseUrl, "/settings/organizations/{organizationName}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "organizationInput", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameResponse res = new org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameResponse() {{
            organization = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Organization out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Organization.class);
                res.organization = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * Update a single reciever
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse putSettingsOrganizationsOrganizationNameReceiversReceiverName(org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest request, org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest.class, baseUrl, "/settings/organizations/{organizationName}/receivers/{receiverName}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "receiverInput", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse res = new org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse() {{
            receiver = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Receiver out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Receiver.class);
                res.receiver = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }

    /**
     * Update a single sender
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameResponse putSettingsOrganizationsOrganizationNameSendersSenderName(org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameRequest request, org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameRequest.class, baseUrl, "/settings/organizations/{organizationName}/senders/{senderName}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "senderInput", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameResponse res = new org.openapis.openapi.models.operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameResponse() {{
            senders = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Sender[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Sender[].class);
                res.senders = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401) {
        }

        return res;
    }
}