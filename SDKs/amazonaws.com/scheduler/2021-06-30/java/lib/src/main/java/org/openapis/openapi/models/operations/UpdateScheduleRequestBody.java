/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class UpdateScheduleRequestBody {
    /**
     *  Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, EventBridge Scheduler uses a randomly generated token for the request to ensure idempotency. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ClientToken")
    public String clientToken;

    public UpdateScheduleRequestBody withClientToken(String clientToken) {
        this.clientToken = clientToken;
        return this;
    }
    
    /**
     * The description you specify for the schedule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Description")
    public String description;

    public UpdateScheduleRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the &lt;code&gt;EndDate&lt;/code&gt; you specify. EventBridge Scheduler ignores &lt;code&gt;EndDate&lt;/code&gt; for one-time schedules.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("EndDate")
    public OffsetDateTime endDate;

    public UpdateScheduleRequestBody withEndDate(OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * Allows you to configure a time window during which EventBridge Scheduler invokes the schedule.
     */
    @JsonProperty("FlexibleTimeWindow")
    public UpdateScheduleRequestBodyFlexibleTimeWindow flexibleTimeWindow;

    public UpdateScheduleRequestBody withFlexibleTimeWindow(UpdateScheduleRequestBodyFlexibleTimeWindow flexibleTimeWindow) {
        this.flexibleTimeWindow = flexibleTimeWindow;
        return this;
    }
    
    /**
     * The name of the schedule group with which the schedule is associated. You must provide this value in order for EventBridge Scheduler to find the schedule you want to update. If you omit this value, EventBridge Scheduler assumes the group is associated to the default group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GroupName")
    public String groupName;

    public UpdateScheduleRequestBody withGroupName(String groupName) {
        this.groupName = groupName;
        return this;
    }
    
    /**
     * The ARN for the customer managed KMS key that that you want EventBridge Scheduler to use to encrypt and decrypt your data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("KmsKeyArn")
    public String kmsKeyArn;

    public UpdateScheduleRequestBody withKmsKeyArn(String kmsKeyArn) {
        this.kmsKeyArn = kmsKeyArn;
        return this;
    }
    
    /**
     * &lt;p&gt; The expression that defines when the schedule runs. The following formats are supported. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;at&lt;/code&gt; expression - &lt;code&gt;at(yyyy-mm-ddThh:mm:ss)&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;rate&lt;/code&gt; expression - &lt;code&gt;rate(unit value)&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;cron&lt;/code&gt; expression - &lt;code&gt;cron(fields)&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; You can use &lt;code&gt;at&lt;/code&gt; expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use &lt;code&gt;rate&lt;/code&gt; and &lt;code&gt;cron&lt;/code&gt; expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;cron&lt;/code&gt; expression consists of six fields separated by white spaces: &lt;code&gt;(minutes hours day_of_month month day_of_week year)&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;rate&lt;/code&gt; expression consists of a &lt;i&gt;value&lt;/i&gt; as a positive integer, and a &lt;i&gt;unit&lt;/i&gt; with the following options: &lt;code&gt;minute&lt;/code&gt; | &lt;code&gt;minutes&lt;/code&gt; | &lt;code&gt;hour&lt;/code&gt; | &lt;code&gt;hours&lt;/code&gt; | &lt;code&gt;day&lt;/code&gt; | &lt;code&gt;days&lt;/code&gt; &lt;/p&gt; &lt;p&gt; For more information and examples, see &lt;a href="https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html"&gt;Schedule types on EventBridge Scheduler&lt;/a&gt; in the &lt;i&gt;EventBridge Scheduler User Guide&lt;/i&gt;. &lt;/p&gt;
     */
    @JsonProperty("ScheduleExpression")
    public String scheduleExpression;

    public UpdateScheduleRequestBody withScheduleExpression(String scheduleExpression) {
        this.scheduleExpression = scheduleExpression;
        return this;
    }
    
    /**
     * The timezone in which the scheduling expression is evaluated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ScheduleExpressionTimezone")
    public String scheduleExpressionTimezone;

    public UpdateScheduleRequestBody withScheduleExpressionTimezone(String scheduleExpressionTimezone) {
        this.scheduleExpressionTimezone = scheduleExpressionTimezone;
        return this;
    }
    
    /**
     * The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the &lt;code&gt;StartDate&lt;/code&gt; you specify. EventBridge Scheduler ignores &lt;code&gt;StartDate&lt;/code&gt; for one-time schedules.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("StartDate")
    public OffsetDateTime startDate;

    public UpdateScheduleRequestBody withStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * Specifies whether the schedule is enabled or disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("State")
    public UpdateScheduleRequestBodyStateEnum state;

    public UpdateScheduleRequestBody withState(UpdateScheduleRequestBodyStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The schedule's target. EventBridge Scheduler supports templated target that invoke common API operations, as well as universal targets that you can customize to invoke over 6,000 API operations across more than 270 services. You can only specify one templated or universal target for a schedule.
     */
    @JsonProperty("Target")
    public UpdateScheduleRequestBodyTarget target;

    public UpdateScheduleRequestBody withTarget(UpdateScheduleRequestBodyTarget target) {
        this.target = target;
        return this;
    }
    
    public UpdateScheduleRequestBody(@JsonProperty("FlexibleTimeWindow") UpdateScheduleRequestBodyFlexibleTimeWindow flexibleTimeWindow, @JsonProperty("ScheduleExpression") String scheduleExpression, @JsonProperty("Target") UpdateScheduleRequestBodyTarget target) {
        this.flexibleTimeWindow = flexibleTimeWindow;
        this.scheduleExpression = scheduleExpression;
        this.target = target;
  }
}
