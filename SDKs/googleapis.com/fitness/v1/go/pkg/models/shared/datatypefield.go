// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataTypeFieldFormatEnum - The different supported formats for each field in a data type.
type DataTypeFieldFormatEnum string

const (
	DataTypeFieldFormatEnumInteger     DataTypeFieldFormatEnum = "integer"
	DataTypeFieldFormatEnumFloatPoint  DataTypeFieldFormatEnum = "floatPoint"
	DataTypeFieldFormatEnumString      DataTypeFieldFormatEnum = "string"
	DataTypeFieldFormatEnumMap         DataTypeFieldFormatEnum = "map"
	DataTypeFieldFormatEnumIntegerList DataTypeFieldFormatEnum = "integerList"
	DataTypeFieldFormatEnumFloatList   DataTypeFieldFormatEnum = "floatList"
	DataTypeFieldFormatEnumBlob        DataTypeFieldFormatEnum = "blob"
)

func (e *DataTypeFieldFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "integer":
		fallthrough
	case "floatPoint":
		fallthrough
	case "string":
		fallthrough
	case "map":
		fallthrough
	case "integerList":
		fallthrough
	case "floatList":
		fallthrough
	case "blob":
		*e = DataTypeFieldFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataTypeFieldFormatEnum: %s", s)
	}
}

// DataTypeField - In case of multi-dimensional data (such as an accelerometer with x, y, and z axes) each field represents one dimension. Each data type field has a unique name which identifies it. The field also defines the format of the data (int, float, etc.). This message is only instantiated in code and not used for wire comms or stored in any way.
type DataTypeField struct {
	// The different supported formats for each field in a data type.
	Format *DataTypeFieldFormatEnum `json:"format,omitempty"`
	// Defines the name and format of data. Unlike data type names, field names are not namespaced, and only need to be unique within the data type.
	Name     *string `json:"name,omitempty"`
	Optional *bool   `json:"optional,omitempty"`
}
