/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Description of a particular point or place in physical space
 */
export class ItineraryPriceMetricLocation extends SpeakeasyBase {
  /**
   * IATA location code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "iataCode" })
  iataCode?: string;
}

export enum ItineraryPriceMetricPriceMetricsQuartileRankingEnum {
  Minimum = "MINIMUM",
  First = "FIRST",
  Medium = "MEDIUM",
  Third = "THIRD",
  Maximum = "MAXIMUM",
}

export class ItineraryPriceMetricPriceMetrics extends SpeakeasyBase {
  /**
   * Defines the monetary value with decimal position. It can be in cash or miles.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "quartileRanking" })
  quartileRanking?: ItineraryPriceMetricPriceMetricsQuartileRankingEnum;
}

/**
 * transportation type
 */
export enum ItineraryPriceMetricTransportTypeEnum {
  Flight = "FLIGHT",
}

/**
 * price metric
 */
export class ItineraryPriceMetric extends SpeakeasyBase {
  /**
   * currency of the prices.
   *
   * @remarks
   *
   * Currency is specified in the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format, e.g. EUR for Euro
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode?: string;

  /**
   * The date on which the traveler will depart from the origin to go to the destination.
   *
   * @remarks
   *
   * Dates are specified in the[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departureDate" })
  departureDate?: string;

  /**
   * Description of a particular point or place in physical space
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  @Type(() => ItineraryPriceMetricLocation)
  destination?: ItineraryPriceMetricLocation;

  /**
   * true for a one way trip,
   *
   * @remarks
   * false for a round trip
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oneWay" })
  oneWay?: boolean;

  /**
   * Description of a particular point or place in physical space
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  @Type(() => ItineraryPriceMetricLocation)
  origin?: ItineraryPriceMetricLocation;

  @SpeakeasyMetadata({ elemType: ItineraryPriceMetricPriceMetrics })
  @Expose({ name: "priceMetrics" })
  @Type(() => ItineraryPriceMetricPriceMetrics)
  priceMetrics?: ItineraryPriceMetricPriceMetrics[];

  /**
   * transportation type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transportType" })
  transportType?: ItineraryPriceMetricTransportTypeEnum;

  /**
   * ressource type - always price-metrics
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
