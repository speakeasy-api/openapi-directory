"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import post as shared_post
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAllPostsSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'query', 'field_name': 'api_key' }})  
    oauth2_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2_implicit: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetAllPostsRequest:
    
    date_max: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'date_max', 'style': 'form', 'explode': True }})
    r"""Only posts older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second."""  
    date_min: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'date_min', 'style': 'form', 'explode': True }})
    r"""Only posts newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second."""  
    types: str = dataclasses.field(metadata={'query_param': { 'field_name': 'types', 'style': 'form', 'explode': True }})
    r"""A comma separated list of the post types to return.  The available post types are: offer, wanted"""  
    device_pixel_ratio: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'device_pixel_ratio', 'style': 'form', 'explode': True }})
    r"""Client device pixel ratio used to determine thumbnail size (default 1.0)."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The page of posts to return."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of posts to return per page (must be >= 1 and <= 50)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAllPosts200ApplicationJSON:
    r"""The posts."""
    
    posts: Optional[list[shared_post.Post]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetAllPostsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_all_posts_200_application_json_object: Optional[GetAllPosts200ApplicationJSON] = dataclasses.field(default=None)
    r"""The posts."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    