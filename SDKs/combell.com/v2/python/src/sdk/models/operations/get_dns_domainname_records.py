"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import dnsrecord as shared_dnsrecord
from typing import Optional


@dataclasses.dataclass
class GetDNSDomainNameRecordsRequest:
    
    domain_name_query_parameter: str = dataclasses.field(metadata={'query_param': { 'field_name': 'domain_name', 'style': 'form', 'explode': True }})
    r"""The domain name."""  
    domain_name_path_parameter: str = dataclasses.field(metadata={'path_param': { 'field_name': 'domainName', 'style': 'simple', 'explode': False }})
    r"""Automatically added"""  
    record_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'record_name', 'style': 'form', 'explode': True }})
    r"""Filters records matching the record name. This filter only applies to lookups of A, CNAME, TXT, CAA, ALIAS and TLSA records."""  
    service: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'service', 'style': 'form', 'explode': True }})
    r"""Filters records for the service. This filter only applies to lookups of SRV records."""  
    skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': True }})
    r"""The number of items to skip in the resultset."""  
    take: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'take', 'style': 'form', 'explode': True }})
    r"""The number of items to return in the resultset. The returned count can be equal or less than this number."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Filters records matching the type. Most other filters only apply when this filter is specified."""  
    

@dataclasses.dataclass
class GetDNSDomainNameRecordsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    dns_records: Optional[list[shared_dnsrecord.DNSRecord]] = dataclasses.field(default=None)
    r"""Success"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    