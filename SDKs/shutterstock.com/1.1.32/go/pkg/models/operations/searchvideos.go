// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type SearchVideosSecurity struct {
	Basic              *shared.SchemeBasic `security:"scheme,type=http,subtype=basic"`
	CustomerAccessCode *string             `security:"scheme,type=oauth2,name=Authorization"`
}

// SearchVideosAspectRatioEnum - Show videos with the specified aspect ratio
type SearchVideosAspectRatioEnum string

const (
	SearchVideosAspectRatioEnumZero        SearchVideosAspectRatioEnum = "0"
	SearchVideosAspectRatioEnumNonstandard SearchVideosAspectRatioEnum = "nonstandard"
)

func (e SearchVideosAspectRatioEnum) ToPointer() *SearchVideosAspectRatioEnum {
	return &e
}

func (e *SearchVideosAspectRatioEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "nonstandard":
		*e = SearchVideosAspectRatioEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchVideosAspectRatioEnum: %v", v)
	}
}

type SearchVideosLicenseEnum string

const (
	SearchVideosLicenseEnumCommercial SearchVideosLicenseEnum = "commercial"
	SearchVideosLicenseEnumEditorial  SearchVideosLicenseEnum = "editorial"
)

func (e SearchVideosLicenseEnum) ToPointer() *SearchVideosLicenseEnum {
	return &e
}

func (e *SearchVideosLicenseEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "commercial":
		fallthrough
	case "editorial":
		*e = SearchVideosLicenseEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchVideosLicenseEnum: %v", v)
	}
}

// SearchVideosPeopleAgeEnum - Show videos that feature people of the specified age range
type SearchVideosPeopleAgeEnum string

const (
	SearchVideosPeopleAgeEnumInfants   SearchVideosPeopleAgeEnum = "infants"
	SearchVideosPeopleAgeEnumChildren  SearchVideosPeopleAgeEnum = "children"
	SearchVideosPeopleAgeEnumTeenagers SearchVideosPeopleAgeEnum = "teenagers"
	SearchVideosPeopleAgeEnumTwentys   SearchVideosPeopleAgeEnum = "20s"
	SearchVideosPeopleAgeEnumThirtys   SearchVideosPeopleAgeEnum = "30s"
	SearchVideosPeopleAgeEnumFortys    SearchVideosPeopleAgeEnum = "40s"
	SearchVideosPeopleAgeEnumFiftys    SearchVideosPeopleAgeEnum = "50s"
	SearchVideosPeopleAgeEnumSixtys    SearchVideosPeopleAgeEnum = "60s"
	SearchVideosPeopleAgeEnumOlder     SearchVideosPeopleAgeEnum = "older"
)

func (e SearchVideosPeopleAgeEnum) ToPointer() *SearchVideosPeopleAgeEnum {
	return &e
}

func (e *SearchVideosPeopleAgeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "infants":
		fallthrough
	case "children":
		fallthrough
	case "teenagers":
		fallthrough
	case "20s":
		fallthrough
	case "30s":
		fallthrough
	case "40s":
		fallthrough
	case "50s":
		fallthrough
	case "60s":
		fallthrough
	case "older":
		*e = SearchVideosPeopleAgeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchVideosPeopleAgeEnum: %v", v)
	}
}

type SearchVideosPeopleEthnicityEnum string

const (
	SearchVideosPeopleEthnicityEnumAfrican         SearchVideosPeopleEthnicityEnum = "african"
	SearchVideosPeopleEthnicityEnumAfricanAmerican SearchVideosPeopleEthnicityEnum = "african_american"
	SearchVideosPeopleEthnicityEnumBlack           SearchVideosPeopleEthnicityEnum = "black"
	SearchVideosPeopleEthnicityEnumBrazilian       SearchVideosPeopleEthnicityEnum = "brazilian"
	SearchVideosPeopleEthnicityEnumChinese         SearchVideosPeopleEthnicityEnum = "chinese"
	SearchVideosPeopleEthnicityEnumCaucasian       SearchVideosPeopleEthnicityEnum = "caucasian"
	SearchVideosPeopleEthnicityEnumEastAsian       SearchVideosPeopleEthnicityEnum = "east_asian"
	SearchVideosPeopleEthnicityEnumHispanic        SearchVideosPeopleEthnicityEnum = "hispanic"
	SearchVideosPeopleEthnicityEnumJapanese        SearchVideosPeopleEthnicityEnum = "japanese"
	SearchVideosPeopleEthnicityEnumMiddleEastern   SearchVideosPeopleEthnicityEnum = "middle_eastern"
	SearchVideosPeopleEthnicityEnumNativeAmerican  SearchVideosPeopleEthnicityEnum = "native_american"
	SearchVideosPeopleEthnicityEnumPacificIslander SearchVideosPeopleEthnicityEnum = "pacific_islander"
	SearchVideosPeopleEthnicityEnumSouthAsian      SearchVideosPeopleEthnicityEnum = "south_asian"
	SearchVideosPeopleEthnicityEnumSoutheastAsian  SearchVideosPeopleEthnicityEnum = "southeast_asian"
	SearchVideosPeopleEthnicityEnumOther           SearchVideosPeopleEthnicityEnum = "other"
)

func (e SearchVideosPeopleEthnicityEnum) ToPointer() *SearchVideosPeopleEthnicityEnum {
	return &e
}

func (e *SearchVideosPeopleEthnicityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "african":
		fallthrough
	case "african_american":
		fallthrough
	case "black":
		fallthrough
	case "brazilian":
		fallthrough
	case "chinese":
		fallthrough
	case "caucasian":
		fallthrough
	case "east_asian":
		fallthrough
	case "hispanic":
		fallthrough
	case "japanese":
		fallthrough
	case "middle_eastern":
		fallthrough
	case "native_american":
		fallthrough
	case "pacific_islander":
		fallthrough
	case "south_asian":
		fallthrough
	case "southeast_asian":
		fallthrough
	case "other":
		*e = SearchVideosPeopleEthnicityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchVideosPeopleEthnicityEnum: %v", v)
	}
}

// SearchVideosPeopleGenderEnum - Show videos with people with the specified gender
type SearchVideosPeopleGenderEnum string

const (
	SearchVideosPeopleGenderEnumMale   SearchVideosPeopleGenderEnum = "male"
	SearchVideosPeopleGenderEnumFemale SearchVideosPeopleGenderEnum = "female"
	SearchVideosPeopleGenderEnumBoth   SearchVideosPeopleGenderEnum = "both"
)

func (e SearchVideosPeopleGenderEnum) ToPointer() *SearchVideosPeopleGenderEnum {
	return &e
}

func (e *SearchVideosPeopleGenderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "male":
		fallthrough
	case "female":
		fallthrough
	case "both":
		*e = SearchVideosPeopleGenderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchVideosPeopleGenderEnum: %v", v)
	}
}

// SearchVideosResolutionEnum - Show videos with the specified resolution
type SearchVideosResolutionEnum string

const (
	SearchVideosResolutionEnumFourk              SearchVideosResolutionEnum = "4k"
	SearchVideosResolutionEnumStandardDefinition SearchVideosResolutionEnum = "standard_definition"
	SearchVideosResolutionEnumHighDefinition     SearchVideosResolutionEnum = "high_definition"
)

func (e SearchVideosResolutionEnum) ToPointer() *SearchVideosResolutionEnum {
	return &e
}

func (e *SearchVideosResolutionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "4k":
		fallthrough
	case "standard_definition":
		fallthrough
	case "high_definition":
		*e = SearchVideosResolutionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchVideosResolutionEnum: %v", v)
	}
}

// SearchVideosSortEnum - Sort by one of these categories
type SearchVideosSortEnum string

const (
	SearchVideosSortEnumNewest    SearchVideosSortEnum = "newest"
	SearchVideosSortEnumPopular   SearchVideosSortEnum = "popular"
	SearchVideosSortEnumRelevance SearchVideosSortEnum = "relevance"
	SearchVideosSortEnumRandom    SearchVideosSortEnum = "random"
)

func (e SearchVideosSortEnum) ToPointer() *SearchVideosSortEnum {
	return &e
}

func (e *SearchVideosSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "newest":
		fallthrough
	case "popular":
		fallthrough
	case "relevance":
		fallthrough
	case "random":
		*e = SearchVideosSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchVideosSortEnum: %v", v)
	}
}

// SearchVideosViewEnum - Amount of detail to render in the response
type SearchVideosViewEnum string

const (
	SearchVideosViewEnumMinimal SearchVideosViewEnum = "minimal"
	SearchVideosViewEnumFull    SearchVideosViewEnum = "full"
)

func (e SearchVideosViewEnum) ToPointer() *SearchVideosViewEnum {
	return &e
}

func (e *SearchVideosViewEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minimal":
		fallthrough
	case "full":
		*e = SearchVideosViewEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchVideosViewEnum: %v", v)
	}
}

type SearchVideosRequest struct {
	// Show videos added on the specified date
	AddedDate *types.Date `queryParam:"style=form,explode=true,name=added_date"`
	// Show videos added before the specified date
	AddedDateEnd *types.Date `queryParam:"style=form,explode=true,name=added_date_end"`
	// Show videos added on or after the specified date
	AddedDateStart *types.Date `queryParam:"style=form,explode=true,name=added_date_start"`
	// Show videos with the specified aspect ratio
	AspectRatio *SearchVideosAspectRatioEnum `queryParam:"style=form,explode=true,name=aspect_ratio"`
	// Show videos with the specified Shutterstock-defined category; specify a category name or ID
	Category *string `queryParam:"style=form,explode=true,name=category"`
	// Show videos with the specified artist names or IDs
	Contributor []string `queryParam:"style=form,explode=true,name=contributor"`
	// Show videos from contributors in one or more specified countries
	ContributorCountry []string `queryParam:"style=form,explode=true,name=contributor_country"`
	// (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds
	//
	// Deprecated: this field will be removed in a future release, please migrate away from it as soon as possible.
	Duration *int64 `queryParam:"style=form,explode=true,name=duration"`
	// Show videos with the specified duration or longer in seconds
	DurationFrom *int64 `queryParam:"style=form,explode=true,name=duration_from"`
	// Show videos with the specified duration or shorter in seconds
	DurationTo *int64 `queryParam:"style=form,explode=true,name=duration_to"`
	// (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second
	//
	// Deprecated: this field will be removed in a future release, please migrate away from it as soon as possible.
	Fps *float64 `queryParam:"style=form,explode=true,name=fps"`
	// Show videos with the specified frames per second or more
	FpsFrom *float64 `queryParam:"style=form,explode=true,name=fps_from"`
	// Show videos with the specified frames per second or fewer
	FpsTo *float64 `queryParam:"style=form,explode=true,name=fps_to"`
	// Hide results with potentially unsafe keywords
	KeywordSafeSearch *bool `queryParam:"style=form,explode=true,name=keyword_safe_search"`
	// Set query and result language (uses Accept-Language header if not set)
	Language *shared.LanguageEnum `queryParam:"style=form,explode=true,name=language"`
	// Show only videos with the specified license or licenses
	License []SearchVideosLicenseEnum `queryParam:"style=form,explode=true,name=license"`
	// Show videos with each of the specified models
	Model []string `queryParam:"style=form,explode=true,name=model"`
	// Page number
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Show videos that feature people of the specified age range
	PeopleAge *SearchVideosPeopleAgeEnum `queryParam:"style=form,explode=true,name=people_age"`
	// Show videos with people of the specified ethnicities
	PeopleEthnicity []SearchVideosPeopleEthnicityEnum `queryParam:"style=form,explode=true,name=people_ethnicity"`
	// Show videos with people with the specified gender
	PeopleGender *SearchVideosPeopleGenderEnum `queryParam:"style=form,explode=true,name=people_gender"`
	// Show only videos of people with a signed model release
	PeopleModelReleased *bool `queryParam:"style=form,explode=true,name=people_model_released"`
	// Show videos with the specified number of people
	PeopleNumber *int64 `queryParam:"style=form,explode=true,name=people_number"`
	// Number of results per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// One or more search terms separated by spaces; you can use NOT to filter out videos that match a term
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Show videos with the specified resolution
	Resolution *SearchVideosResolutionEnum `queryParam:"style=form,explode=true,name=resolution"`
	// Enable or disable safe search
	Safe *bool `queryParam:"style=form,explode=true,name=safe"`
	// Sort by one of these categories
	Sort *SearchVideosSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Amount of detail to render in the response
	View *SearchVideosViewEnum `queryParam:"style=form,explode=true,name=view"`
}

type SearchVideosResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	VideoSearchResults *shared.VideoSearchResults
}
