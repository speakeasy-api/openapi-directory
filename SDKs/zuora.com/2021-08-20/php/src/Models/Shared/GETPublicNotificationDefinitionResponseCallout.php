<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class GETPublicNotificationDefinitionResponseCallout
{
    /**
     * The status of the callout. The default is true.
     * 
     * @var ?bool $active
     */
	#[\JMS\Serializer\Annotation\SerializedName('active')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $active = null;
    
    /**
     * If requiredAuth is true, this object is required.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CalloutAuth $calloutAuth
     */
	#[\JMS\Serializer\Annotation\SerializedName('calloutAuth')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CalloutAuth')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CalloutAuth $calloutAuth = null;
    
    /**
     * The callout URL. It must start with 'https://'
     * 
     * @var ?string $calloutBaseurl
     */
	#[\JMS\Serializer\Annotation\SerializedName('calloutBaseurl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $calloutBaseurl = null;
    
    /**
     * A key-value map of merge fields of this callout.
     * 
     * 
     * 
     * @var ?array<string, string> $calloutParams
     */
	#[\JMS\Serializer\Annotation\SerializedName('calloutParams')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $calloutParams = null;
    
    /**
     * Specified whether to retry the callout when the callout fails. The default is true.
     * 
     * @var ?bool $calloutRetry
     */
	#[\JMS\Serializer\Annotation\SerializedName('calloutRetry')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $calloutRetry = null;
    
    /**
     * Description for the callout.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * The name of the event type.
     * 
     * @var ?string $eventTypeName
     */
	#[\JMS\Serializer\Annotation\SerializedName('eventTypeName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $eventTypeName = null;
    
    /**
     * The HTTP method of the callout.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GETPublicNotificationDefinitionResponseCalloutHttpMethodEnum $httpMethod
     */
	#[\JMS\Serializer\Annotation\SerializedName('httpMethod')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\GETPublicNotificationDefinitionResponseCalloutHttpMethodEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GETPublicNotificationDefinitionResponseCalloutHttpMethodEnum $httpMethod = null;
    
    /**
     * The ID of the callout. If `calloutActive` is true, a callout is required. The eventTypeName of the callout MUST be the same as the eventTypeName.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The name of the created callout.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Specifies whether the callout requires auth.
     * 
     * @var ?bool $requiredAuth
     */
	#[\JMS\Serializer\Annotation\SerializedName('requiredAuth')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $requiredAuth = null;
    
	public function __construct()
	{
		$this->active = null;
		$this->calloutAuth = null;
		$this->calloutBaseurl = null;
		$this->calloutParams = null;
		$this->calloutRetry = null;
		$this->description = null;
		$this->eventTypeName = null;
		$this->httpMethod = null;
		$this->id = null;
		$this->name = null;
		$this->requiredAuth = null;
	}
}
