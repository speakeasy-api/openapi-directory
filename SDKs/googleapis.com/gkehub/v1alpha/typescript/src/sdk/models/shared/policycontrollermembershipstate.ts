/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { PolicyControllerOnClusterState } from "./policycontrolleronclusterstate";
import { PolicyControllerPolicyContentState } from "./policycontrollerpolicycontentstate";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The overall Policy Controller lifecycle state observed by the Hub Feature controller.
 */
export enum PolicyControllerMembershipStateStateEnum {
  LifecycleStateUnspecified = "LIFECYCLE_STATE_UNSPECIFIED",
  NotInstalled = "NOT_INSTALLED",
  Installing = "INSTALLING",
  Active = "ACTIVE",
  Updating = "UPDATING",
  Decommissioning = "DECOMMISSIONING",
  ClusterError = "CLUSTER_ERROR",
  HubError = "HUB_ERROR",
  Suspended = "SUSPENDED",
}

/**
 * **Policy Controller**: State for a single cluster.
 */
export class PolicyControllerMembershipState extends SpeakeasyBase {
  /**
   * Currently these include (also serving as map keys): 1. "admission" 2. "audit" 3. "mutation"
   */
  @SpeakeasyMetadata({ elemType: PolicyControllerOnClusterState })
  @Expose({ name: "componentStates" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, PolicyControllerOnClusterState> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], PolicyControllerOnClusterState);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  componentStates?: Record<string, PolicyControllerOnClusterState>;

  /**
   * The state of the template library and any bundles included in the chosen version of the manifest TODO (b/271878194): Remove this
   */
  @SpeakeasyMetadata({ elemType: PolicyControllerOnClusterState })
  @Expose({ name: "contentStates" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, PolicyControllerOnClusterState> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], PolicyControllerOnClusterState);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  contentStates?: Record<string, PolicyControllerOnClusterState>;

  /**
   * The state of the policy controller policy content
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyContentState" })
  @Type(() => PolicyControllerPolicyContentState)
  policyContentState?: PolicyControllerPolicyContentState;

  /**
   * The overall Policy Controller lifecycle state observed by the Hub Feature controller.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: PolicyControllerMembershipStateStateEnum;
}
