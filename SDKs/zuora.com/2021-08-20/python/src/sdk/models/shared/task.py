"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class TaskActionTypeEnum(str, Enum):
    r"""The type of the task."""
    APPROVAL = 'Approval'
    ATTACHMENT = 'Attachment'
    BILLING_BILL_RUN = 'Billing::BillRun'
    BILLING_CURRENCY_CONVERSION = 'Billing::CurrencyConversion'
    BILLING_CUSTOM_INVOICE = 'Billing::CustomInvoice'
    CALLOUT = 'Callout'
    CANCEL = 'Cancel'
    CREATE = 'Create'
    CUSTOM_OBJECT_CREATE = 'CustomObject::Create'
    CUSTOM_OBJECT_DELETE = 'CustomObject::Delete'
    CUSTOM_OBJECT_QUERY = 'CustomObject::Query'
    CUSTOM_OBJECT_UPDATE = 'CustomObject::Update'
    DATA_BILLING_PREVIEW_RUN = 'Data::BillingPreviewRun'
    DATA_LINK = 'Data::Link'
    DELAY = 'Delay'
    DELETE = 'Delete'
    DOWNLOAD_SFTP = 'Download::SFTP'
    EMAIL = 'Email'
    EXPORT = 'Export'
    FILE_CUSTOM_PDF_CUSTOM_DOCUMENT = 'File::CustomPDF::CustomDocument'
    IF = 'If'
    INVOICE_GENERATE = 'InvoiceGenerate'
    ITERATE = 'Iterate'
    LOGIC_CSV_TRANSLATOR = 'Logic::CSVTranslator'
    LOGIC_CASE = 'Logic::Case'
    LOGIC_CUSTOM_CODE = 'Logic::CustomCode'
    LOGIC_JSON_TRANSFORM = 'Logic::JSONTransform'
    LOGIC_LAMBDA = 'Logic::Lambda'
    LOGIC_RESPONSE_FORMATTER = 'Logic::ResponseFormatter'
    LOGIC_XML_TRANSFORM = 'Logic::XMLTransform'
    NEW_PRODUCT = 'NewProduct'
    NOTIFICATIONS_GOOGLE_CLOUD_PRINT = 'Notifications::GoogleCloudPrint'
    NOTIFICATIONS_PHONE_CALL = 'Notifications::PhoneCall'
    NOTIFICATIONS_SMS = 'Notifications::SMS'
    PAYMENT_GATEWAY_RECONCILIATION = 'Payment::GatewayReconciliation'
    PAYMENT_PAYMENT_RUN = 'Payment::PaymentRun'
    QUERY = 'Query'
    REMOVE_PRODUCT = 'RemoveProduct'
    REPORTING_REPORT_DATA = 'Reporting::ReportData'
    REPORTING_RUN_REPORT = 'Reporting::RunReport'
    RESUME = 'Resume'
    SUSPEND = 'Suspend'
    UI_PAGE = 'UI::Page'
    UI_STOP = 'UI::Stop'
    UPDATE = 'Update'
    UPLOAD_FTP = 'Upload::FTP'
    UPLOAD_SFTP = 'Upload::SFTP'
    WRITE_OFF = 'WriteOff'

class TaskStatusEnum(str, Enum):
    r"""If **Instance** is **true**, the status of the task instance."""
    QUEUED = 'Queued'
    PROCESSING = 'Processing'
    PENDING = 'Pending'
    SUCCESS = 'Success'
    STOPPED = 'Stopped'
    ERROR = 'Error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Task:
    r"""A task."""
    
    action_type: Optional[TaskActionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action_type'), 'exclude': lambda f: f is None }})
    r"""The type of the task."""  
    call_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_type'), 'exclude': lambda f: f is None }})
    r"""The type of API used."""  
    concurrent_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concurrent_limit'), 'exclude': lambda f: f is None }})
    r"""the number of concurrent tasks that are allowed to run simultaneously"""  
    data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""The data payload for the task."""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'exclude': lambda f: f is None }})
    r"""If **Instance** is **true**, the end time of the task instance."""  
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""If **Instance** is **true** and **status** is **Error**, the error reason of the task instance failure."""  
    error_class: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_class'), 'exclude': lambda f: f is None }})
    r"""If **Instance** is **true** and **status** is **Error**, the error class of the task instance failure."""  
    error_details: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_details'), 'exclude': lambda f: f is None }})
    r"""If **Instance** is **true** and **status** is **Error**, the error details of the task instance failure."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the task."""  
    instance: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instance'), 'exclude': lambda f: f is None }})
    r"""Indicates whether this task belongs to an instance of a workflow."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the task."""  
    object: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object'), 'exclude': lambda f: f is None }})
    r"""The selected object for the task."""  
    object_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object_id'), 'exclude': lambda f: f is None }})
    r"""The id of the selected object of the task."""  
    original_task_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_task_id'), 'exclude': lambda f: f is None }})
    r"""If **Instance** is **true**, the ID of the original task in the original workflow."""  
    original_workflow_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_workflow_id'), 'exclude': lambda f: f is None }})
    r"""If **Instance** is **true**, the ID of the original workflow."""  
    parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""The configuration of the task."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'exclude': lambda f: f is None }})
    r"""If **Instance** is **true**, the start time of the task instance."""  
    status: Optional[TaskStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""If **Instance** is **true**, the status of the task instance."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The array of filter tags."""  
    task_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('task_id'), 'exclude': lambda f: f is None }})
    r"""the id of this task's parent task. Will be null if this is the first task of the workflow"""  
    workflow_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the workflow that the task belongs to."""  
    