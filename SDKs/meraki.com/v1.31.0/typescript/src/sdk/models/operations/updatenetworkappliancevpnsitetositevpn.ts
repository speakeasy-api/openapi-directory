/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyHubs extends SpeakeasyBase {
  /**
   * The network ID of the hub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hubId" })
  hubId: string;

  /**
   * Only valid in 'spoke' mode. Indicates whether default route traffic should be sent to this hub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useDefaultRoute" })
  useDefaultRoute?: boolean;
}

/**
 * The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'
 */
export enum UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum {
  Hub = "hub",
  None = "none",
  Spoke = "spoke",
}

export class UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodySubnets extends SpeakeasyBase {
  /**
   * The CIDR notation subnet used within the VPN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localSubnet" })
  localSubnet: string;

  /**
   * Indicates the presence of the subnet in the VPN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useVpn" })
  useVpn?: boolean;
}

export class UpdateNetworkApplianceVpnSiteToSiteVpnRequestBody extends SpeakeasyBase {
  /**
   * The list of VPN hubs, in order of preference. In spoke mode, at least 1 hub is required.
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyHubs,
  })
  @Expose({ name: "hubs" })
  @Type(() => UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyHubs)
  hubs?: UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyHubs[];

  /**
   * The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode: UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum;

  /**
   * The list of subnets and their VPN presence.
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodySubnets,
  })
  @Expose({ name: "subnets" })
  @Type(() => UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodySubnets)
  subnets?: UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodySubnets[];
}

export class UpdateNetworkApplianceVpnSiteToSiteVpnRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateNetworkApplianceVpnSiteToSiteVpnRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs extends SpeakeasyBase {
  /**
   * The network ID of the hub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hubId" })
  hubId?: string;

  /**
   * Indicates whether default route traffic should be sent to this hub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useDefaultRoute" })
  useDefaultRoute?: boolean;
}

export class UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets extends SpeakeasyBase {
  /**
   * The CIDR notation subnet used within the VPN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "localSubnet" })
  localSubnet?: string;

  /**
   * Indicates the presence of the subnet in the VPN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useVpn" })
  useVpn?: boolean;
}

/**
 * Successful operation
 */
export class UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON extends SpeakeasyBase {
  /**
   * The list of VPN hubs, in order of preference.
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs,
  })
  @Expose({ name: "hubs" })
  @Type(() => UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs)
  hubs?: UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs[];

  /**
   * The site-to-site VPN mode.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode?: string;

  /**
   * The list of subnets and their VPN presence.
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets,
  })
  @Expose({ name: "subnets" })
  @Type(() => UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets)
  subnets?: UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets[];
}

export class UpdateNetworkApplianceVpnSiteToSiteVpnResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONObject?: UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON;
}
