/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ConnectorSummary - Summary of a connector.
 */
public class ConnectorSummary {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capacity")
    public CapacityDescription capacity;
    public ConnectorSummary withCapacity(CapacityDescription capacity) {
        this.capacity = capacity;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorArn")
    public String connectorArn;
    public ConnectorSummary withConnectorArn(String connectorArn) {
        this.connectorArn = connectorArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorDescription")
    public String connectorDescription;
    public ConnectorSummary withConnectorDescription(String connectorDescription) {
        this.connectorDescription = connectorDescription;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorName")
    public String connectorName;
    public ConnectorSummary withConnectorName(String connectorName) {
        this.connectorName = connectorName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorState")
    public ConnectorStateEnum connectorState;
    public ConnectorSummary withConnectorState(ConnectorStateEnum connectorState) {
        this.connectorState = connectorState;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationTime")
    public OffsetDateTime creationTime;
    public ConnectorSummary withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentVersion")
    public String currentVersion;
    public ConnectorSummary withCurrentVersion(String currentVersion) {
        this.currentVersion = currentVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafkaCluster")
    public KafkaClusterDescription kafkaCluster;
    public ConnectorSummary withKafkaCluster(KafkaClusterDescription kafkaCluster) {
        this.kafkaCluster = kafkaCluster;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafkaClusterClientAuthentication")
    public KafkaClusterClientAuthenticationDescription kafkaClusterClientAuthentication;
    public ConnectorSummary withKafkaClusterClientAuthentication(KafkaClusterClientAuthenticationDescription kafkaClusterClientAuthentication) {
        this.kafkaClusterClientAuthentication = kafkaClusterClientAuthentication;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafkaClusterEncryptionInTransit")
    public KafkaClusterEncryptionInTransitDescription kafkaClusterEncryptionInTransit;
    public ConnectorSummary withKafkaClusterEncryptionInTransit(KafkaClusterEncryptionInTransitDescription kafkaClusterEncryptionInTransit) {
        this.kafkaClusterEncryptionInTransit = kafkaClusterEncryptionInTransit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kafkaConnectVersion")
    public String kafkaConnectVersion;
    public ConnectorSummary withKafkaConnectVersion(String kafkaConnectVersion) {
        this.kafkaConnectVersion = kafkaConnectVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logDelivery")
    public LogDeliveryDescription logDelivery;
    public ConnectorSummary withLogDelivery(LogDeliveryDescription logDelivery) {
        this.logDelivery = logDelivery;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plugins")
    public PluginDescription[] plugins;
    public ConnectorSummary withPlugins(PluginDescription[] plugins) {
        this.plugins = plugins;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceExecutionRoleArn")
    public String serviceExecutionRoleArn;
    public ConnectorSummary withServiceExecutionRoleArn(String serviceExecutionRoleArn) {
        this.serviceExecutionRoleArn = serviceExecutionRoleArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workerConfiguration")
    public WorkerConfigurationDescription workerConfiguration;
    public ConnectorSummary withWorkerConfiguration(WorkerConfigurationDescription workerConfiguration) {
        this.workerConfiguration = workerConfiguration;
        return this;
    }
    
}
