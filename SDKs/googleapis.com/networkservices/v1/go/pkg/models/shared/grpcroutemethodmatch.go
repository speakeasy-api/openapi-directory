// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GrpcRouteMethodMatchTypeEnum - Optional. Specifies how to match against the name. If not specified, a default value of "EXACT" is used.
type GrpcRouteMethodMatchTypeEnum string

const (
	GrpcRouteMethodMatchTypeEnumTypeUnspecified   GrpcRouteMethodMatchTypeEnum = "TYPE_UNSPECIFIED"
	GrpcRouteMethodMatchTypeEnumExact             GrpcRouteMethodMatchTypeEnum = "EXACT"
	GrpcRouteMethodMatchTypeEnumRegularExpression GrpcRouteMethodMatchTypeEnum = "REGULAR_EXPRESSION"
)

func (e GrpcRouteMethodMatchTypeEnum) ToPointer() *GrpcRouteMethodMatchTypeEnum {
	return &e
}

func (e *GrpcRouteMethodMatchTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "EXACT":
		fallthrough
	case "REGULAR_EXPRESSION":
		*e = GrpcRouteMethodMatchTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GrpcRouteMethodMatchTypeEnum: %v", v)
	}
}

// GrpcRouteMethodMatch - Specifies a match against a method.
type GrpcRouteMethodMatch struct {
	// Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.
	CaseSensitive *bool `json:"caseSensitive,omitempty"`
	// Required. Name of the method to match against. If unspecified, will match all methods.
	GrpcMethod *string `json:"grpcMethod,omitempty"`
	// Required. Name of the service to match against. If unspecified, will match all services.
	GrpcService *string `json:"grpcService,omitempty"`
	// Optional. Specifies how to match against the name. If not specified, a default value of "EXACT" is used.
	Type *GrpcRouteMethodMatchTypeEnum `json:"type,omitempty"`
}
