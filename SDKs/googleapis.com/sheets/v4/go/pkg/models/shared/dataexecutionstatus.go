// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataExecutionStatusErrorCodeEnum - The error code.
type DataExecutionStatusErrorCodeEnum string

const (
	DataExecutionStatusErrorCodeEnumDataExecutionErrorCodeUnspecified DataExecutionStatusErrorCodeEnum = "DATA_EXECUTION_ERROR_CODE_UNSPECIFIED"
	DataExecutionStatusErrorCodeEnumTimedOut                          DataExecutionStatusErrorCodeEnum = "TIMED_OUT"
	DataExecutionStatusErrorCodeEnumTooManyRows                       DataExecutionStatusErrorCodeEnum = "TOO_MANY_ROWS"
	DataExecutionStatusErrorCodeEnumTooManyColumns                    DataExecutionStatusErrorCodeEnum = "TOO_MANY_COLUMNS"
	DataExecutionStatusErrorCodeEnumTooManyCells                      DataExecutionStatusErrorCodeEnum = "TOO_MANY_CELLS"
	DataExecutionStatusErrorCodeEnumEngine                            DataExecutionStatusErrorCodeEnum = "ENGINE"
	DataExecutionStatusErrorCodeEnumParameterInvalid                  DataExecutionStatusErrorCodeEnum = "PARAMETER_INVALID"
	DataExecutionStatusErrorCodeEnumUnsupportedDataType               DataExecutionStatusErrorCodeEnum = "UNSUPPORTED_DATA_TYPE"
	DataExecutionStatusErrorCodeEnumDuplicateColumnNames              DataExecutionStatusErrorCodeEnum = "DUPLICATE_COLUMN_NAMES"
	DataExecutionStatusErrorCodeEnumInterrupted                       DataExecutionStatusErrorCodeEnum = "INTERRUPTED"
	DataExecutionStatusErrorCodeEnumConcurrentQuery                   DataExecutionStatusErrorCodeEnum = "CONCURRENT_QUERY"
	DataExecutionStatusErrorCodeEnumOther                             DataExecutionStatusErrorCodeEnum = "OTHER"
	DataExecutionStatusErrorCodeEnumTooManyCharsPerCell               DataExecutionStatusErrorCodeEnum = "TOO_MANY_CHARS_PER_CELL"
	DataExecutionStatusErrorCodeEnumDataNotFound                      DataExecutionStatusErrorCodeEnum = "DATA_NOT_FOUND"
	DataExecutionStatusErrorCodeEnumPermissionDenied                  DataExecutionStatusErrorCodeEnum = "PERMISSION_DENIED"
	DataExecutionStatusErrorCodeEnumMissingColumnAlias                DataExecutionStatusErrorCodeEnum = "MISSING_COLUMN_ALIAS"
	DataExecutionStatusErrorCodeEnumObjectNotFound                    DataExecutionStatusErrorCodeEnum = "OBJECT_NOT_FOUND"
	DataExecutionStatusErrorCodeEnumObjectInErrorState                DataExecutionStatusErrorCodeEnum = "OBJECT_IN_ERROR_STATE"
	DataExecutionStatusErrorCodeEnumObjectSpecInvalid                 DataExecutionStatusErrorCodeEnum = "OBJECT_SPEC_INVALID"
)

func (e *DataExecutionStatusErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATA_EXECUTION_ERROR_CODE_UNSPECIFIED":
		fallthrough
	case "TIMED_OUT":
		fallthrough
	case "TOO_MANY_ROWS":
		fallthrough
	case "TOO_MANY_COLUMNS":
		fallthrough
	case "TOO_MANY_CELLS":
		fallthrough
	case "ENGINE":
		fallthrough
	case "PARAMETER_INVALID":
		fallthrough
	case "UNSUPPORTED_DATA_TYPE":
		fallthrough
	case "DUPLICATE_COLUMN_NAMES":
		fallthrough
	case "INTERRUPTED":
		fallthrough
	case "CONCURRENT_QUERY":
		fallthrough
	case "OTHER":
		fallthrough
	case "TOO_MANY_CHARS_PER_CELL":
		fallthrough
	case "DATA_NOT_FOUND":
		fallthrough
	case "PERMISSION_DENIED":
		fallthrough
	case "MISSING_COLUMN_ALIAS":
		fallthrough
	case "OBJECT_NOT_FOUND":
		fallthrough
	case "OBJECT_IN_ERROR_STATE":
		fallthrough
	case "OBJECT_SPEC_INVALID":
		*e = DataExecutionStatusErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataExecutionStatusErrorCodeEnum: %s", s)
	}
}

// DataExecutionStatusStateEnum - The state of the data execution.
type DataExecutionStatusStateEnum string

const (
	DataExecutionStatusStateEnumDataExecutionStateUnspecified DataExecutionStatusStateEnum = "DATA_EXECUTION_STATE_UNSPECIFIED"
	DataExecutionStatusStateEnumNotStarted                    DataExecutionStatusStateEnum = "NOT_STARTED"
	DataExecutionStatusStateEnumRunning                       DataExecutionStatusStateEnum = "RUNNING"
	DataExecutionStatusStateEnumSucceeded                     DataExecutionStatusStateEnum = "SUCCEEDED"
	DataExecutionStatusStateEnumFailed                        DataExecutionStatusStateEnum = "FAILED"
)

func (e *DataExecutionStatusStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATA_EXECUTION_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_STARTED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		*e = DataExecutionStatusStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataExecutionStatusStateEnum: %s", s)
	}
}

// DataExecutionStatus - The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
type DataExecutionStatus struct {
	// The error code.
	ErrorCode *DataExecutionStatusErrorCodeEnum `json:"errorCode,omitempty"`
	// The error message, which may be empty.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Gets the time the data last successfully refreshed.
	LastRefreshTime *string `json:"lastRefreshTime,omitempty"`
	// The state of the data execution.
	State *DataExecutionStatusStateEnum `json:"state,omitempty"`
}
