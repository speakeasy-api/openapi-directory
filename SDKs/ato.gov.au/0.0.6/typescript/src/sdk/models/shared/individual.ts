/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ElectronicAddress, ElectronicAddressInput } from "./electronicaddress";
import { IndividualAddress, IndividualAddressInput } from "./individualaddress";
import { IndividualName, IndividualNameInput } from "./individualname";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The individual's gender.
 */
export enum IndividualGenderEnum {
  Female = "Female",
  Male = "Male",
  NotApplicable = "Not Applicable",
  NotKnown = "Not Known",
}

/**
 * The Individual resource.
 */
export class IndividualInput extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: IndividualAddressInput })
  @Expose({ name: "addresses" })
  @Type(() => IndividualAddressInput)
  addresses?: IndividualAddressInput[];

  /**
   * The individual's date of birth, for example, `1979-01-13` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateOfBirth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  @SpeakeasyMetadata({ elemType: ElectronicAddressInput })
  @Expose({ name: "electronicAddresses" })
  @Type(() => ElectronicAddressInput)
  electronicAddresses?: ElectronicAddressInput[];

  /**
   * The individual's gender.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: IndividualGenderEnum;

  @SpeakeasyMetadata({ elemType: IndividualNameInput })
  @Expose({ name: "names" })
  @Type(() => IndividualNameInput)
  names?: IndividualNameInput[];

  /**
   * The individual's place of birth, for example, `Tamworth`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "placeOfBirth" })
  placeOfBirth: string;
}

/**
 * The Individual resource.
 */
export class Individual extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: IndividualAddress })
  @Expose({ name: "addresses" })
  @Type(() => IndividualAddress)
  addresses?: IndividualAddress[];

  /**
   * The individual's date of birth, for example, `1979-01-13` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateOfBirth" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateOfBirth: Date;

  @SpeakeasyMetadata({ elemType: ElectronicAddress })
  @Expose({ name: "electronicAddresses" })
  @Type(() => ElectronicAddress)
  electronicAddresses?: ElectronicAddress[];

  /**
   * The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  fromDate?: Date;

  /**
   * The individual's gender.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: IndividualGenderEnum;

  /**
   * The party's unique identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata({ elemType: IndividualName })
  @Expose({ name: "names" })
  @Type(() => IndividualName)
  names?: IndividualName[];

  /**
   * The individual's place of birth, for example, `Tamworth`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "placeOfBirth" })
  placeOfBirth: string;

  /**
   * The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  toDate?: Date;
}
