/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class UpdateShareByIdUpdateShareRequestBodyRecipients extends SpeakeasyBase {
  /**
   * Email address of person you are inviting to the share
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * What kind of email should be sent to this recipient. Valid choices are **direct** and **cc**
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class UpdateShareByIdUpdateShareRequestBody extends SpeakeasyBase {
  /**
   * An object defining what a not-logged-in visitor can do with the share contents
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessMode" })
  @Type(() => shared.AccessMode)
  accessMode?: shared.AccessMode;

  /**
   * Whether the share can be embedded in another web page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: boolean;

  /**
   * New expiration date and time for the share
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expiration?: Date;

  /**
   * Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileDropCreateFolders" })
  fileDropCreateFolders?: boolean;

  /**
   * Whether delivery receipts should be sent for this share.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasNotification" })
  hasNotification?: boolean;

  /**
   * Whether people can visit the share without following a link from an invitation email
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isPublic" })
  isPublic?: boolean;

  /**
   * Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "messageBody" })
  messageBody?: string;

  /**
   * Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "messageSubject" })
  messageSubject?: string;

  /**
   * Name of the share.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notificationEmails" })
  notificationEmails?: string[];

  /**
   * New password for the share. To leave the password unchanged, do not send this parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  /**
   * People you want to invite to the share.
   *
   * @remarks
   *
   * **Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.
   *
   * **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share.
   */
  @SpeakeasyMetadata({
    elemType: UpdateShareByIdUpdateShareRequestBodyRecipients,
  })
  @Expose({ name: "recipients" })
  @Type(() => UpdateShareByIdUpdateShareRequestBodyRecipients)
  recipients?: UpdateShareByIdUpdateShareRequestBodyRecipients[];

  /**
   * Whether visitors to the share will be required to enter their email in order to access the share.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requireEmail" })
  requireEmail?: boolean;

  /**
   * Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.
   *
   * @remarks
   *
   * **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.
   *
   * **send** shares may have multiple `resource` parameters.
   *
   * **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resources" })
  resources?: string[];

  /**
   * New status for the share. You can set an active share to inactive by setting the status to **0**
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}

export class UpdateShareByIdRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateShareByIdUpdateShareRequestBody;

  /**
   * Access Token
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=ev-access-token",
  })
  evAccessToken: string;

  /**
   * API Key
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=ev-api-key",
  })
  evApiKey: string;

  /**
   * ID of the share entry
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

export class UpdateShareByIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  shareResponse?: shared.ShareResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
