"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class CreateNetworkACLEntryRequestIcmpTypeCode:
    r"""ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block."""
    
    code: Optional[int] = dataclasses.field(default=None)  
    type: Optional[int] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkACLEntryRequestPortRange:
    r"""TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP)."""
    
    from_: Optional[int] = dataclasses.field(default=None)  
    to: Optional[int] = dataclasses.field(default=None)  
    
class CreateNetworkACLEntryRequestRuleActionEnum(str, Enum):
    r"""Indicates whether to allow or deny the traffic that matches the rule."""
    ALLOW = 'allow'
    DENY = 'deny'


@dataclasses.dataclass
class CreateNetworkACLEntryRequest:
    
    egress: bool = dataclasses.field()  
    network_acl_id: str = dataclasses.field()  
    protocol: str = dataclasses.field()  
    rule_action: CreateNetworkACLEntryRequestRuleActionEnum = dataclasses.field()  
    rule_number: int = dataclasses.field()  
    cidr_block: Optional[str] = dataclasses.field(default=None)  
    dry_run: Optional[bool] = dataclasses.field(default=None)  
    icmp_type_code: Optional[CreateNetworkACLEntryRequestIcmpTypeCode] = dataclasses.field(default=None)  
    ipv6_cidr_block: Optional[str] = dataclasses.field(default=None)  
    port_range: Optional[CreateNetworkACLEntryRequestPortRange] = dataclasses.field(default=None)  
    