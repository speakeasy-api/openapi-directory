"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import httpvalidationerror as shared_httpvalidationerror
from typing import Optional


@dataclasses.dataclass
class MapMapGetSecurity:
    
    api_key_header: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Key' }})  
    

@dataclasses.dataclass
class MapMapGetRequest:
    
    datetime_: str = dataclasses.field(metadata={'query_param': { 'field_name': 'datetime', 'style': 'form', 'explode': True }})
    r"""There are two ways to specify date and time for your map:
    
    1. Datetime in `YYYY-MM-DDTHH:MM` format and `UTC` timezone, e.g. `2021-08-24T12:00`
    2. Offset from current time in `[+-]<minutes|hours|days>` format, e.g. `+10minutes`, `-2hours` or `+1days`
    """  
    variable: str = dataclasses.field(metadata={'query_param': { 'field_name': 'variable', 'style': 'form', 'explode': True }})
    r"""Name of the variable for your map. Available values are:
    
    * `temperature`: Temperature 2 metres above ground
    * `feels_like_temperature`: Feels like temperature
    * `clouds`: Percentage of sky covered by clouds
    * `precipitation`: Total precipitation amount accumulated since last hour
    * `wind_speed`: Wind speed 10 metres above the ground
    * `wind_gust`: Wind gust speed
    * `pressure`: Atmospheric pressure at mean sea level
    * `humidity`: Relative humidity
    * `wave_height`: Wave height
    * `wave_period`: Wave period
    * `sea_temperature`: Sea temperature (available only for +-24 hours)
    * `air_quality`: Air quality index
    * `ozone_surface`: Ozone at surface level
    * `ozone_total`: Total column ozone
    * `no2`: Nitrogen dioxide at surface level
    * `pm2.5`: Particulate matter d < 2.5 Âµm (PM2.5)
    """  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header."""  
    max_lat: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_lat', 'style': 'form', 'explode': True }})
    r"""Maximal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2."""  
    max_lon: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_lon', 'style': 'form', 'explode': True }})
    r"""Maximal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2"""  
    min_lat: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_lat', 'style': 'form', 'explode': True }})
    r"""Minimal latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.2"""  
    min_lon: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_lon', 'style': 'form', 'explode': True }})
    r"""Minimal longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.2"""  
    tile_x: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tile_x', 'style': 'form', 'explode': True }})
    r"""The X coordinate of Google Maps tile"""  
    tile_y: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tile_y', 'style': 'form', 'explode': True }})
    r"""The Y coordinate of Google Maps tile"""  
    tile_zoom: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tile_zoom', 'style': 'form', 'explode': True }})
    r"""The zoom level of Google Maps tile"""  
    

@dataclasses.dataclass
class MapMapGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    http_validation_error: Optional[shared_httpvalidationerror.HTTPValidationError] = dataclasses.field(default=None)
    r"""Validation Error"""  
    map_map_get_200_image_png_string: Optional[str] = dataclasses.field(default=None)
    r"""Successful Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    