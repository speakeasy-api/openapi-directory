/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonValue;

/**
 * DescribeFleetsResultFleetsSpotOptionsAllocationStrategyEnum - &lt;p&gt;The strategy that determines how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet launch configuration. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-allocation-strategy.html"&gt;Allocation strategies for Spot Instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;price-capacity-optimized (recommended)&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;EC2 Fleet identifies the pools with the highest capacity availability for the number of instances that are launching. This means that we will request Spot Instances from the pools that we believe have the lowest chance of interruption in the near term. EC2 Fleet then requests Spot Instances from the lowest priced of these pools.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;capacity-optimized&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;EC2 Fleet identifies the pools with the highest capacity availability for the number of instances that are launching. This means that we will request Spot Instances from the pools that we believe have the lowest chance of interruption in the near term. To give certain instance types a higher chance of launching first, use &lt;code&gt;capacity-optimized-prioritized&lt;/code&gt;. Set a priority for each instance type by using the &lt;code&gt;Priority&lt;/code&gt; parameter for &lt;code&gt;LaunchTemplateOverrides&lt;/code&gt;. You can assign the same priority to different &lt;code&gt;LaunchTemplateOverrides&lt;/code&gt;. EC2 implements the priorities on a best-effort basis, but optimizes for capacity first. &lt;code&gt;capacity-optimized-prioritized&lt;/code&gt; is supported only if your EC2 Fleet uses a launch template. Note that if the On-Demand &lt;code&gt;AllocationStrategy&lt;/code&gt; is set to &lt;code&gt;prioritized&lt;/code&gt;, the same priority is applied when fulfilling On-Demand capacity.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;diversified&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;EC2 Fleet requests instances from all of the Spot Instance pools that you specify.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;lowest-price&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;EC2 Fleet requests instances from the lowest priced Spot Instance pool that has available capacity. If the lowest priced pool doesn't have available capacity, the Spot Instances come from the next lowest priced pool that has available capacity. If a pool runs out of capacity before fulfilling your desired capacity, EC2 Fleet will continue to fulfill your request by drawing from the next lowest priced pool. To ensure that your desired capacity is met, you might receive Spot Instances from several pools. Because this strategy only considers instance price and not capacity availability, it might lead to high interruption rates.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;Default: &lt;code&gt;lowest-price&lt;/code&gt; &lt;/p&gt;
 */
public enum DescribeFleetsResultFleetsSpotOptionsAllocationStrategyEnum {
    LOWEST_PRICE("lowest-price"),
    DIVERSIFIED("diversified"),
    CAPACITY_OPTIMIZED("capacity-optimized"),
    CAPACITY_OPTIMIZED_PRIORITIZED("capacity-optimized-prioritized"),
    PRICE_CAPACITY_OPTIMIZED("price-capacity-optimized");

    @JsonValue
    public final String value;

    private DescribeFleetsResultFleetsSpotOptionsAllocationStrategyEnum(String value) {
        this.value = value;
    }
}
