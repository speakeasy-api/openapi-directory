/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class StoreStats {
    /**
     * Top 10 best sold products.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("best_sold")
    public BestSold[] bestSold;

    public StoreStats withBestSold(BestSold[] bestSold) {
        this.bestSold = bestSold;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversions")
    public StoreStatsConversions conversions;

    public StoreStats withConversions(StoreStatsConversions conversions) {
        this.conversions = conversions;
        return this;
    }
    
    /**
     * Store currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;

    public StoreStats withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Visits per day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("daily_visits")
    public DailyVisits[] dailyVisits;

    public StoreStats withDailyVisits(DailyVisits[] dailyVisits) {
        this.dailyVisits = dailyVisits;
        return this;
    }
    
    /**
     * Statistics start date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    public String from;

    public StoreStats withFrom(String from) {
        this.from = from;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("new_vs_returning_customers")
    public StoreStatsNewVsReturningCustomers newVsReturningCustomers;

    public StoreStats withNewVsReturningCustomers(StoreStatsNewVsReturningCustomers newVsReturningCustomers) {
        this.newVsReturningCustomers = newVsReturningCustomers;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("new_vs_returning_orders")
    public StoreStatsNewVsReturningOrders newVsReturningOrders;

    public StoreStats withNewVsReturningOrders(StoreStatsNewVsReturningOrders newVsReturningOrders) {
        this.newVsReturningOrders = newVsReturningOrders;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orders")
    public StoreStatsOrders orders;

    public StoreStats withOrders(StoreStatsOrders orders) {
        this.orders = orders;
        return this;
    }
    
    /**
     * Store payment methods and their frequency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_methods")
    public PaymentMethodFreq[] paymentMethods;

    public StoreStats withPaymentMethods(PaymentMethodFreq[] paymentMethods) {
        this.paymentMethods = paymentMethods;
        return this;
    }
    
    /**
     * Top 10 referrer sources and their frequency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referrers")
    public Referrer[] referrers;

    public StoreStats withReferrers(Referrer[] referrers) {
        this.referrers = referrers;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region_orders")
    public StoreStatsRegionOrders regionOrders;

    public StoreStats withRegionOrders(StoreStatsRegionOrders regionOrders) {
        this.regionOrders = regionOrders;
        return this;
    }
    
    /**
     * Number of times each search was conducted under the form of an aggregation query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_frequencies_all")
    public Object[] searchFrequenciesAll;

    public StoreStats withSearchFrequenciesAll(Object[] searchFrequenciesAll) {
        this.searchFrequenciesAll = searchFrequenciesAll;
        return this;
    }
    
    /**
     * Number of times each search with zero results was conducted under the form of an aggregation query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_frequencies_without_results")
    public Object[] searchFrequenciesWithoutResults;

    public StoreStats withSearchFrequenciesWithoutResults(Object[] searchFrequenciesWithoutResults) {
        this.searchFrequenciesWithoutResults = searchFrequenciesWithoutResults;
        return this;
    }
    
    /**
     * Store shipping methods and their frequency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_methods")
    public ShippingMethodFreq[] shippingMethods;

    public StoreStats withShippingMethods(ShippingMethodFreq[] shippingMethods) {
        this.shippingMethods = shippingMethods;
        return this;
    }
    
    /**
     * Statistics end date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to")
    public String to;

    public StoreStats withTo(String to) {
        this.to = to;
        return this;
    }
    
    /**
     * Type of store traffic and its frequency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("traffic_type")
    public TrafficType[] trafficType;

    public StoreStats withTrafficType(TrafficType[] trafficType) {
        this.trafficType = trafficType;
        return this;
    }
    
    /**
     * Total number of visits.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visits")
    public Long visits;

    public StoreStats withVisits(Long visits) {
        this.visits = visits;
        return this;
    }
    
    public StoreStats(){}
}
