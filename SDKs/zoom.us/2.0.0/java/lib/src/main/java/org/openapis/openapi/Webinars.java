/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Webinar operations
 */
public class Webinars {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Webinars(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Perform batch registration
     * Use this API to register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration). &lt;br&gt;
     * 
     * **Prerequisites:**&lt;br&gt;
     * * The webinar host must be a Licensed user.
     * * The webinar should be of type `5`, i.e., it should be a scheduled webinar. Other types of webinars are not supported by this API.&lt;br&gt;&lt;br&gt;
     * **Scope:** `webinar:write`, `webinar:write:admin`&lt;br&gt;
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`&lt;br&gt;
     * 
     * 
     * 
     * 
     * 
     * 
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddBatchWebinarRegistrantsResponse addBatchWebinarRegistrants(org.openapis.openapi.models.operations.AddBatchWebinarRegistrantsRequest request, org.openapis.openapi.models.operations.AddBatchWebinarRegistrantsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AddBatchWebinarRegistrantsRequest.class, baseUrl, "/webinars/{webinarId}/batch_registrants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddBatchWebinarRegistrantsResponse res = new org.openapis.openapi.models.operations.AddBatchWebinarRegistrantsResponse() {{
            addBatchWebinarRegistrants200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AddBatchWebinarRegistrants200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AddBatchWebinarRegistrants200ApplicationJSON.class);
                res.addBatchWebinarRegistrants200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Delete a webinar registrant
     * Delete a webinar registrant.&lt;br&gt;&lt;br&gt;
     * **Scopes**: `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  &lt;br&gt;
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteWebinarRegistrantResponse deleteWebinarRegistrant(org.openapis.openapi.models.operations.DeleteWebinarRegistrantRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWebinarRegistrantRequest.class, baseUrl, "/webinars/{webinarId}/registrants/{registrantId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DeleteWebinarRegistrantRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWebinarRegistrantResponse res = new org.openapis.openapi.models.operations.DeleteWebinarRegistrantResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Get webinar tracking sources
     * [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.&lt;br&gt; Use this API to list information on all the tracking sources of a Webinar.&lt;br&gt;
     * **Scopes:** `webinar:read:admin`, `webinar:read`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`&lt;br&gt;
     * **Prerequisites**:&lt;br&gt;
     * * [Webinar license](https://zoom.us/webinar).
     * * Registration must be required for the Webinar.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetTrackingSourcesResponse getTrackingSources(org.openapis.openapi.models.operations.GetTrackingSourcesRequest request, org.openapis.openapi.models.operations.GetTrackingSourcesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetTrackingSourcesRequest.class, baseUrl, "/webinars/{webinarId}/tracking_sources", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetTrackingSourcesResponse res = new org.openapis.openapi.models.operations.GetTrackingSourcesResponse() {{
            getTrackingSources200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetTrackingSources200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetTrackingSources200ApplicationJSON.class);
                res.getTrackingSources200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * List past webinar poll results
     * The polling feature for webinar allows you to create single choice or multiple choice polling questions for your webinars. Use this API to retrieve the results for Webinar Polls of a specific Webinar.
     * 
     * **Prerequisites:**&lt;br&gt;
     * * [Webinar license](https://zoom.us/webinar)&lt;br&gt;
     * **Scopes**: `webinar:read:admin`, `webinar:read`&lt;br&gt;
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListPastWebinarPollResultsResponse listPastWebinarPollResults(org.openapis.openapi.models.operations.ListPastWebinarPollResultsRequest request, org.openapis.openapi.models.operations.ListPastWebinarPollResultsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListPastWebinarPollResultsRequest.class, baseUrl, "/past_webinars/{webinarId}/polls", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListPastWebinarPollResultsResponse res = new org.openapis.openapi.models.operations.ListPastWebinarPollResultsResponse() {{
            listPastWebinarPollResults200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListPastWebinarPollResults200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListPastWebinarPollResults200ApplicationJSON.class);
                res.listPastWebinarPollResults200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * List Q&amp;A of past webinar
     * The [Question &amp; Answer (Q&amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for Webinars allows attendees to ask questions during the Webinar and for the panelists, co-hosts and host to answer their questions.&lt;br&gt;
     * Use this API to list Q&amp;A of a specific Webinar.
     * 
     * **Prerequisites:**&lt;br&gt;
     * * [Webinar license](https://zoom.us/webinar)&lt;br&gt;
     * **Scopes**: `webinar:read:admin`, `webinar:read`&lt;br&gt;
     *  &lt;br&gt;
     * 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListPastWebinarQAResponse listPastWebinarQA(org.openapis.openapi.models.operations.ListPastWebinarQARequest request, org.openapis.openapi.models.operations.ListPastWebinarQASecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListPastWebinarQARequest.class, baseUrl, "/past_webinars/{webinarId}/qa", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListPastWebinarQAResponse res = new org.openapis.openapi.models.operations.ListPastWebinarQAResponse() {{
            listPastWebinarQA200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListPastWebinarQA200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListPastWebinarQA200ApplicationJSON.class);
                res.listPastWebinarQA200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * List webinar participants
     * Use this API to list all the participants who attended a webinar hosted in the past. &lt;br&gt;
     * 
     * **Prerequisites:**
     * * Pro or higher plan with a Webinar Add-on.&lt;br&gt;
     * **Scopes:** `webinar:read:admin` `webinar:read`&lt;br&gt; 
     * &lt;br&gt;
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`&lt;br&gt;
     * 
     * 
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListWebinarParticipantsResponse listWebinarParticipants(org.openapis.openapi.models.operations.ListWebinarParticipantsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWebinarParticipantsRequest.class, baseUrl, "/past_webinars/{webinarId}/participants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWebinarParticipantsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWebinarParticipantsResponse res = new org.openapis.openapi.models.operations.ListWebinarParticipantsResponse() {{
            listWebinarParticipants200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWebinarParticipants200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWebinarParticipants200ApplicationJSON.class);
                res.listWebinarParticipants200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * List webinar templates
     * When you schedule a webinar, you can save the settings for that webinar as a template for scheduling future webinars. &lt;br&gt;&lt;br&gt;Use this API to list a user's existing [Webinar templates'](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates) information.
     * 
     * **Prerequisites:**
     * * Pro or a higher account with Webinar plan enabled.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListWebinarTemplatesResponse listWebinarTemplates(org.openapis.openapi.models.operations.ListWebinarTemplatesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWebinarTemplatesRequest.class, baseUrl, "/users/{userId}/webinar_templates", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWebinarTemplatesResponse res = new org.openapis.openapi.models.operations.ListWebinarTemplatesResponse() {{
            listWebinarTemplates200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWebinarTemplates200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWebinarTemplates200ApplicationJSON.class);
                res.listWebinarTemplates200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * List past webinar instances
     * List past webinar instances.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:read:admin` `webinar:read`&lt;br&gt;
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PastWebinarsResponse pastWebinars(org.openapis.openapi.models.operations.PastWebinarsRequest request, org.openapis.openapi.models.operations.PastWebinarsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PastWebinarsRequest.class, baseUrl, "/past_webinars/{webinarId}/instances", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PastWebinarsResponse res = new org.openapis.openapi.models.operations.PastWebinarsResponse() {{
            webinarInstances = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PastWebinarsWebinarInstances out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PastWebinarsWebinarInstances.class);
                res.webinarInstances = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get a webinar
     * Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.&lt;br&gt;Use this API to get details of a scheduled webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:read:admin` `webinar:read`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;**Prerequisites:**
     * * Pro or higher plan with a Webinar Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarResponse webinar(org.openapis.openapi.models.operations.WebinarRequest request, org.openapis.openapi.models.operations.WebinarSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarRequest.class, baseUrl, "/webinars/{webinarId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.WebinarRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarResponse res = new org.openapis.openapi.models.operations.WebinarResponse() {{
            webinar200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.Webinar200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.Webinar200ApplicationJSON.class);
                res.webinar200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get webinar absentees
     * List absentees of a webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:read:admin` `webinar:read`&lt;br&gt;
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarAbsenteesResponse webinarAbsentees(org.openapis.openapi.models.operations.WebinarAbsenteesRequest request, org.openapis.openapi.models.operations.WebinarAbsenteesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarAbsenteesRequest.class, baseUrl, "/past_webinars/{WebinarUUID}/absentees", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.WebinarAbsenteesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarAbsenteesResponse res = new org.openapis.openapi.models.operations.WebinarAbsenteesResponse() {{
            registrationList = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarAbsenteesRegistrationList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarAbsenteesRegistrationList.class);
                res.registrationList = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Create a webinar
     * Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.&lt;br&gt;Use this API to schedule a Webinar for a user (host).&lt;br&gt;&lt;br&gt; 
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisites:**
     * * Pro or higher plan with a Webinar Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarCreateResponse webinarCreate(org.openapis.openapi.models.operations.WebinarCreateRequest request, org.openapis.openapi.models.operations.WebinarCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarCreateRequest.class, baseUrl, "/users/{userId}/webinars", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarCreateResponse res = new org.openapis.openapi.models.operations.WebinarCreateResponse() {{
            webinarCreate201ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarCreate201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarCreate201ApplicationJSON.class);
                res.webinarCreate201ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Delete a webinar
     * Delete a Webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;
     * * Pro or higher plan with a Webinar Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarDeleteResponse webinarDelete(org.openapis.openapi.models.operations.WebinarDeleteRequest request, org.openapis.openapi.models.operations.WebinarDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarDeleteRequest.class, baseUrl, "/webinars/{webinarId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.WebinarDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarDeleteResponse res = new org.openapis.openapi.models.operations.WebinarDeleteResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 204 || httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Add panelists
     * Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a webinar.&lt;br&gt;Use this API to [add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`&lt;br&gt;
     * 
     * 
     * **Prerequisites:**
     * * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).&lt;br&gt; 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarPanelistCreateResponse webinarPanelistCreate(org.openapis.openapi.models.operations.WebinarPanelistCreateRequest request, org.openapis.openapi.models.operations.WebinarPanelistCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarPanelistCreateRequest.class, baseUrl, "/webinars/{webinarId}/panelists", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarPanelistCreateResponse res = new org.openapis.openapi.models.operations.WebinarPanelistCreateResponse() {{
            webinarPanelistCreate201ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }
        else if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarPanelistCreate201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarPanelistCreate201ApplicationJSON.class);
                res.webinarPanelistCreate201ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Remove a panelist
     * [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.&lt;br&gt; You can retrieve the `panelistId` by calling **List Panelists API**.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * **Prerequisites:**&lt;br&gt;
     * * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).&lt;br&gt; 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarPanelistDeleteResponse webinarPanelistDelete(org.openapis.openapi.models.operations.WebinarPanelistDeleteRequest request, org.openapis.openapi.models.operations.WebinarPanelistDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarPanelistDeleteRequest.class, baseUrl, "/webinars/{webinarId}/panelists/{panelistId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarPanelistDeleteResponse res = new org.openapis.openapi.models.operations.WebinarPanelistDeleteResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 204 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * List panelists
     * Panelists in a Webinar can view and send video, screen share, annotate, etc and do much more compared to attendees in a Webinar. 
     * 
     * Use this API to list all the panelists of a Webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:read:admin` `webinar:read`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;
     * * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).&lt;br&gt; 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarPanelistsResponse webinarPanelists(org.openapis.openapi.models.operations.WebinarPanelistsRequest request, org.openapis.openapi.models.operations.WebinarPanelistsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarPanelistsRequest.class, baseUrl, "/webinars/{webinarId}/panelists", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarPanelistsResponse res = new org.openapis.openapi.models.operations.WebinarPanelistsResponse() {{
            panelistList = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarPanelistsPanelistList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarPanelistsPanelistList.class);
                res.panelistList = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Remove panelists
     * Remove all the panelists from a Webinar.&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;
     * * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).&lt;br&gt; 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarPanelistsDeleteResponse webinarPanelistsDelete(org.openapis.openapi.models.operations.WebinarPanelistsDeleteRequest request, org.openapis.openapi.models.operations.WebinarPanelistsDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarPanelistsDeleteRequest.class, baseUrl, "/webinars/{webinarId}/panelists", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarPanelistsDeleteResponse res = new org.openapis.openapi.models.operations.WebinarPanelistsDeleteResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Create a webinar's poll
     * Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarPollCreateResponse webinarPollCreate(org.openapis.openapi.models.operations.WebinarPollCreateRequest request, org.openapis.openapi.models.operations.WebinarPollCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarPollCreateRequest.class, baseUrl, "/webinars/{webinarId}/polls", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarPollCreateResponse res = new org.openapis.openapi.models.operations.WebinarPollCreateResponse() {{
            poll = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarPollCreatePoll2 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarPollCreatePoll2.class);
                res.poll = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Delete a webinar poll
     * Delete a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarPollDeleteResponse webinarPollDelete(org.openapis.openapi.models.operations.WebinarPollDeleteRequest request, org.openapis.openapi.models.operations.WebinarPollDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarPollDeleteRequest.class, baseUrl, "/webinars/{webinarId}/polls/{pollId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarPollDeleteResponse res = new org.openapis.openapi.models.operations.WebinarPollDeleteResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get a webinar poll
     * Get a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:read:admin` `webinar:read`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarPollGetResponse webinarPollGet(org.openapis.openapi.models.operations.WebinarPollGetRequest request, org.openapis.openapi.models.operations.WebinarPollGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarPollGetRequest.class, baseUrl, "/webinars/{webinarId}/polls/{pollId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarPollGetResponse res = new org.openapis.openapi.models.operations.WebinarPollGetResponse() {{
            poll = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarPollGetPoll out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarPollGetPoll.class);
                res.poll = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Update a webinar poll
     * Update a webinar's [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarPollUpdateResponse webinarPollUpdate(org.openapis.openapi.models.operations.WebinarPollUpdateRequest request, org.openapis.openapi.models.operations.WebinarPollUpdateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarPollUpdateRequest.class, baseUrl, "/webinars/{webinarId}/polls/{pollId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarPollUpdateResponse res = new org.openapis.openapi.models.operations.WebinarPollUpdateResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * List a webinar's polls 
     * List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:read:admin` `webinar:read`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarPollsResponse webinarPolls(org.openapis.openapi.models.operations.WebinarPollsRequest request, org.openapis.openapi.models.operations.WebinarPollsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarPollsRequest.class, baseUrl, "/webinars/{webinarId}/polls", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarPollsResponse res = new org.openapis.openapi.models.operations.WebinarPollsResponse() {{
            pollList = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarPollsPollList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarPollsPollList.class);
                res.pollList = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Add a webinar registrant
     * Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.&lt;br&gt;Use this API to create and submit the registration of a user for a webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisites:**
     * * Pro or higher plan with a Webinar Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarRegistrantCreateResponse webinarRegistrantCreate(org.openapis.openapi.models.operations.WebinarRegistrantCreateRequest request, org.openapis.openapi.models.operations.WebinarRegistrantCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarRegistrantCreateRequest.class, baseUrl, "/webinars/{webinarId}/registrants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.WebinarRegistrantCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarRegistrantCreateResponse res = new org.openapis.openapi.models.operations.WebinarRegistrantCreateResponse() {{
            webinarRegistrantCreate201ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarRegistrantCreate201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarRegistrantCreate201ApplicationJSON.class);
                res.webinarRegistrantCreate201ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Get a webinar registrant
     * Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.&lt;br&gt;Use this API to get details on a specific user who has registered for the Webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:read:admin` `webinar:read`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;
     * * The account must have a Webinar plan.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarRegistrantGetResponse webinarRegistrantGet(org.openapis.openapi.models.operations.WebinarRegistrantGetRequest request, org.openapis.openapi.models.operations.WebinarRegistrantGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarRegistrantGetRequest.class, baseUrl, "/webinars/{webinarId}/registrants/{registrantId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.WebinarRegistrantGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarRegistrantGetResponse res = new org.openapis.openapi.models.operations.WebinarRegistrantGetResponse() {{
            webianrRegistrant = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarRegistrantGetWebianrRegistrant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarRegistrantGetWebianrRegistrant.class);
                res.webianrRegistrant = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Update registration questions
     * Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.&lt;br&gt;Use this API to update registration questions and fields of a scheduled Webinar that are to be answered by users while registering for a Webinar.&lt;br&gt;&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;  
     * * Pro or higher plan with a Webinar Add-on.
     * * Registration option for Webinar should be set as required to use this API. 
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarRegistrantQuestionUpdateResponse webinarRegistrantQuestionUpdate(org.openapis.openapi.models.operations.WebinarRegistrantQuestionUpdateRequest request, org.openapis.openapi.models.operations.WebinarRegistrantQuestionUpdateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarRegistrantQuestionUpdateRequest.class, baseUrl, "/webinars/{webinarId}/registrants/questions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarRegistrantQuestionUpdateResponse res = new org.openapis.openapi.models.operations.WebinarRegistrantQuestionUpdateResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Update registrant's status
     * Update a webinar registrant's status. Using this API, you can specify whether you want to approve a registration, deny a registration or cancel a previously approved registration.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarRegistrantStatusResponse webinarRegistrantStatus(org.openapis.openapi.models.operations.WebinarRegistrantStatusRequest request, org.openapis.openapi.models.operations.WebinarRegistrantStatusSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarRegistrantStatusRequest.class, baseUrl, "/webinars/{webinarId}/registrants/status", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.WebinarRegistrantStatusRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarRegistrantStatusResponse res = new org.openapis.openapi.models.operations.WebinarRegistrantStatusResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * List webinar registrants
     * Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the Webinar.&lt;br&gt;
     * Use this API to list all the users that have registered for a webinar.&lt;br&gt;&lt;br&gt;
     * **Prerequisites:**
     * * Pro or higher plan with a Webinar Add-on.&lt;br&gt;
     * **Scopes:** `webinar:read:admin` `webinar:read`&lt;br&gt; 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarRegistrantsResponse webinarRegistrants(org.openapis.openapi.models.operations.WebinarRegistrantsRequest request, org.openapis.openapi.models.operations.WebinarRegistrantsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarRegistrantsRequest.class, baseUrl, "/webinars/{webinarId}/registrants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.WebinarRegistrantsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarRegistrantsResponse res = new org.openapis.openapi.models.operations.WebinarRegistrantsResponse() {{
            registrationList = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarRegistrantsRegistrationList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarRegistrantsRegistrationList.class);
                res.registrationList = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * List registration questions
     * Scheduling a [Webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the Webinar.&lt;br&gt;Use this API to list registration questions and fields that are to be answered by users while registering for a Webinar.&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;  
     * * Pro or higher plan with a Webinar Add-on.
     * **Scopes:** `webinar:read:admin` `webinar:read`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * 
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarRegistrantsQuestionsGetResponse webinarRegistrantsQuestionsGet(org.openapis.openapi.models.operations.WebinarRegistrantsQuestionsGetRequest request, org.openapis.openapi.models.operations.WebinarRegistrantsQuestionsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarRegistrantsQuestionsGetRequest.class, baseUrl, "/webinars/{webinarId}/registrants/questions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarRegistrantsQuestionsGetResponse res = new org.openapis.openapi.models.operations.WebinarRegistrantsQuestionsGetResponse() {{
            webinarRegistrantQuestions = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarRegistrantsQuestionsGetWebinarRegistrantQuestions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarRegistrantsQuestionsGetWebinarRegistrantQuestions.class);
                res.webinarRegistrantQuestions = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Update webinar status
     * Update a webinar's status. Use this API to end an ongoing webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;
     * * The account must hold a valid [Webinar plan](https://zoom.us/webinar).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarStatusResponse webinarStatus(org.openapis.openapi.models.operations.WebinarStatusRequest request, org.openapis.openapi.models.operations.WebinarStatusSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarStatusRequest.class, baseUrl, "/webinars/{webinarId}/status", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarStatusResponse res = new org.openapis.openapi.models.operations.WebinarStatusResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 204 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Update a webinar
     * Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.&lt;br&gt;
     * Use this API to make updates to a scheduled Webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;
     * * Pro or higher plan with a Webinar Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarUpdateJsonResponse webinarUpdateJson(org.openapis.openapi.models.operations.WebinarUpdateJsonRequest request, org.openapis.openapi.models.operations.WebinarUpdateJsonSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarUpdateJsonRequest.class, baseUrl, "/webinars/{webinarId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.WebinarUpdateJsonRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarUpdateJsonResponse res = new org.openapis.openapi.models.operations.WebinarUpdateJsonResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 204 || httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Update a webinar
     * Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.&lt;br&gt;
     * Use this API to make updates to a scheduled Webinar.&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:write:admin` `webinar:write`&lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`&lt;br&gt;
     * **Prerequisites:**&lt;br&gt;
     * * Pro or higher plan with a Webinar Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarUpdateMultipartResponse webinarUpdateMultipart(org.openapis.openapi.models.operations.WebinarUpdateMultipartRequest request, org.openapis.openapi.models.operations.WebinarUpdateMultipartSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarUpdateMultipartRequest.class, baseUrl, "/webinars/{webinarId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.WebinarUpdateMultipartRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarUpdateMultipartResponse res = new org.openapis.openapi.models.operations.WebinarUpdateMultipartResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 204 || httpRes.statusCode() == 300 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * List webinars
     * Zoom users with a [Webinar Plan](https://zoom.us/webinar) have access to creating and managing Webinars. Webinar allows a host to broadcast a Zoom meeting to up to 10,000 attendees.&lt;br&gt; Use this API to list all the webinars that are scheduled by or on-behalf a user (Webinar host).&lt;br&gt;&lt;br&gt;
     * **Scopes:** `webinar:read:admin` `webinar:read`&lt;br&gt; &lt;br&gt;
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * **Prerequisites:**
     * * Pro or higher plan with a Webinar Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.WebinarsResponse webinars(org.openapis.openapi.models.operations.WebinarsRequest request, org.openapis.openapi.models.operations.WebinarsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.WebinarsRequest.class, baseUrl, "/users/{userId}/webinars", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.WebinarsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.WebinarsResponse res = new org.openapis.openapi.models.operations.WebinarsResponse() {{
            userList = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.WebinarsUserList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.WebinarsUserList.class);
                res.userList = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
        }

        return res;
    }
}