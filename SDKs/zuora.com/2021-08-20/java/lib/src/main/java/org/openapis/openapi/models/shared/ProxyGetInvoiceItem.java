/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ProxyGetInvoiceItem - Container for custom fields of an Invoice Item object.
 * 
 */
public class ProxyGetInvoiceItem {
    /**
     *  The accounting code for the item's charge. Accounting codes group transactions that contain similar accounting attributes.
     * **Character limit**: 100 **Values**: inherited from `RatePlanCharge.AccountingCode` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountingCode")
    public String accountingCode;
    public ProxyGetInvoiceItem withAccountingCode(String accountingCode) {
        this.accountingCode = accountingCode;
        return this;
    }
    
    /**
     *  Associates a discount invoice item to a specific invoice item.
     * 
     * **Character limit**: 32
     * 
     * **Values**: inherited from `InvoiceItem.Id` for the invoice item that the discount charge is applied to 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AppliedToInvoiceItemId")
    public String appliedToInvoiceItemId;
    public ProxyGetInvoiceItem withAppliedToInvoiceItemId(String appliedToInvoiceItemId) {
        this.appliedToInvoiceItemId = appliedToInvoiceItemId;
        return this;
    }
    
    /**
     *  The amount being charged for the invoice item. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.
     * **Character limit**: **Values**: automatically calculated from multiple fields in multiple objects 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChargeAmount")
    public Double chargeAmount;
    public ProxyGetInvoiceItem withChargeAmount(Double chargeAmount) {
        this.chargeAmount = chargeAmount;
        return this;
    }
    
    /**
     *  The date when the Invoice Item is created .
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("ChargeDate")
    public OffsetDateTime chargeDate;
    public ProxyGetInvoiceItem withChargeDate(OffsetDateTime chargeDate) {
        this.chargeDate = chargeDate;
        return this;
    }
    
    /**
     *  The name of the invoice item's charge.
     * **Character limi**t: 50 **Values: **inherited from `RatePlanCharge.Name` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChargeName")
    public String chargeName;
    public ProxyGetInvoiceItem withChargeName(String chargeName) {
        this.chargeName = chargeName;
        return this;
    }
    
    /**
     *  The user ID of the person who created the invoice item.
     * **Character limit**: 32 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedById")
    public String createdById;
    public ProxyGetInvoiceItem withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     *  The date the invoice item was created.
     * **Character limit:** 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public ProxyGetInvoiceItem withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * Object identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public ProxyGetInvoiceItem withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public ProxyGetInvoiceItem withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public ProxyGetInvoiceItem withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     *  The ID of the invoice that's associated with this invoice item.
     * **Character limit**: 32 **Values**: inherited from `Invoice.Id` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvoiceId")
    public String invoiceId;
    public ProxyGetInvoiceItem withInvoiceId(String invoiceId) {
        this.invoiceId = invoiceId;
        return this;
    }
    
    /**
     *  Identifies the kind of charge where 0 is a charge, 1 is a discount, 2 is a prepayment, and 3 is a tax. The returned value is text not decimal on data sources.
     * **Character limit**: **Values: **
     * 
     * - 0: charge
     * - 1: discount
     * - 2: prepayment
     * - 3: tax
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ProcessingType")
    public Double processingType;
    public ProxyGetInvoiceItem withProcessingType(Double processingType) {
        this.processingType = processingType;
        return this;
    }
    
    /**
     *  A description of the product associated with this invoice item.
     * 
     * **Character limit**: 500
     * 
     * **Values**: inherited from `Product.Description`
     * 
     * **Note**: This value changes if `Product.Description` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItem` do not change when `Product.Description` is updated. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ProductDescription")
    public String productDescription;
    public ProxyGetInvoiceItem withProductDescription(String productDescription) {
        this.productDescription = productDescription;
        return this;
    }
    
    /**
     *  The name of the product associated with this invoice item.
     * 
     * **Character limit**: 255
     * 
     * **Values**: inherited from `Product.Name`
     * 
     * **Note**: This value changes if `Product.Name` is updated. The values of `UpdatedById` and `UpdatedDate` for the `InvoiceItem` do not change when `Product.Name` is updated. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ProductName")
    public String productName;
    public ProxyGetInvoiceItem withProductName(String productName) {
        this.productName = productName;
        return this;
    }
    
    /**
     *  The number of units for this invoice item.
     * **Values**: inherited from `RatePlanCharge.Quantity` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Quantity")
    public Double quantity;
    public ProxyGetInvoiceItem withQuantity(Double quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     *  The ID of the rate plan charge that's associated with this invoice item.
     * **Character limit**: 32 **Values**: inherited from `RatePlanCharge.Id` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RatePlanChargeId")
    public String ratePlanChargeId;
    public ProxyGetInvoiceItem withRatePlanChargeId(String ratePlanChargeId) {
        this.ratePlanChargeId = ratePlanChargeId;
        return this;
    }
    
    /**
     *  The date when revenue recognition is triggered.
     * **Character limit**: 29 **Values**: generated from `InvoiceItem.RevRecTriggerCondition` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("RevRecStartDate")
    public LocalDate revRecStartDate;
    public ProxyGetInvoiceItem withRevRecStartDate(LocalDate revRecStartDate) {
        this.revRecStartDate = revRecStartDate;
        return this;
    }
    
    /**
     *  The unique SKU for the product associated with this invoice item.
     * **Character limit**: 255 **Values**: inherited from `Product.SKU` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SKU")
    public String sku;
    public ProxyGetInvoiceItem withSku(String sku) {
        this.sku = sku;
        return this;
    }
    
    /**
     *  The end date of the service period associated with this invoice item. Service ends one second before the date in this value.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ServiceEndDate")
    public LocalDate serviceEndDate;
    public ProxyGetInvoiceItem withServiceEndDate(LocalDate serviceEndDate) {
        this.serviceEndDate = serviceEndDate;
        return this;
    }
    
    /**
     *  The start date of the service period associated with this invoice item. If the associated charge is a one-time fee, then this date is the date of that charge.
     * **Character limit:** 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ServiceStartDate")
    public LocalDate serviceStartDate;
    public ProxyGetInvoiceItem withServiceStartDate(LocalDate serviceStartDate) {
        this.serviceStartDate = serviceStartDate;
        return this;
    }
    
    /**
     *  The ID of the subscription associated with the invoice item.
     * **Character limit**: 32 **Values**: inherited from `Subscription.Id` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SubscriptionId")
    public String subscriptionId;
    public ProxyGetInvoiceItem withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }
    
    /**
     * Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public ProxyGetInvoiceItem withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     *  The amount of tax applied to the invoice item's charge.
     * **Character limit**: **Values**: calculated from multiple fields in the ProductRatePlanCharge object 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxAmount")
    public Double taxAmount;
    public ProxyGetInvoiceItem withTaxAmount(Double taxAmount) {
        this.taxAmount = taxAmount;
        return this;
    }
    
    /**
     *  Specifies the tax code for taxation rules.
     * **Character limit**: 6 **Values**: inherited from `ProductRatePlanCharge.TaxCode` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxCode")
    public String taxCode;
    public ProxyGetInvoiceItem withTaxCode(String taxCode) {
        this.taxCode = taxCode;
        return this;
    }
    
    /**
     *  The amount of the invoice item's charge that's tax exempt.
     * **Character limit**: **Values**: calculated from multiple fields in the ProductRatePlanCharge object 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxExemptAmount")
    public Double taxExemptAmount;
    public ProxyGetInvoiceItem withTaxExemptAmount(Double taxExemptAmount) {
        this.taxExemptAmount = taxExemptAmount;
        return this;
    }
    
    /**
     *  The tax mode of the invoice item.
     * **Character limit**: 12 **Values**: `TaxExclusive`, `TaxInclusive` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxMode")
    public String taxMode;
    public ProxyGetInvoiceItem withTaxMode(String taxMode) {
        this.taxMode = taxMode;
        return this;
    }
    
    /**
     *  Specifies the units to measure usage. **Character limit**: **Values**: inherited from `ProductRatePlanCharge.UOM` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UOM")
    public String uom;
    public ProxyGetInvoiceItem withUom(String uom) {
        this.uom = uom;
        return this;
    }
    
    /**
     *  The per-unit price of the invoice item.
     * **Character limit**: **Values**: calculated from multiple fields in ProductRatePlanCharge and ProductRatePlanChargeTier objets 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UnitPrice")
    public Double unitPrice;
    public ProxyGetInvoiceItem withUnitPrice(Double unitPrice) {
        this.unitPrice = unitPrice;
        return this;
    }
    
    /**
     *  The ID of the user who last updated the invoice item.
     * **Character limit**: 32 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedById")
    public String updatedById;
    public ProxyGetInvoiceItem withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     *  The date when the invoice item was last updated.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedDate")
    public OffsetDateTime updatedDate;
    public ProxyGetInvoiceItem withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
