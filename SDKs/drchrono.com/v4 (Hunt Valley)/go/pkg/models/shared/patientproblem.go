// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PatientProblemIcdVersionEnum - Either `9` or `10`. If omitted in writing, default to 10.
type PatientProblemIcdVersionEnum string

const (
	PatientProblemIcdVersionEnumNine PatientProblemIcdVersionEnum = "9"
	PatientProblemIcdVersionEnumTen  PatientProblemIcdVersionEnum = "10"
)

func (e PatientProblemIcdVersionEnum) ToPointer() *PatientProblemIcdVersionEnum {
	return &e
}

func (e *PatientProblemIcdVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "9":
		fallthrough
	case "10":
		*e = PatientProblemIcdVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientProblemIcdVersionEnum: %v", v)
	}
}

// PatientProblemStatusEnum - Either `active`, `inactive` or `resolved`. If omitted in writing, default to `active`
type PatientProblemStatusEnum string

const (
	PatientProblemStatusEnumActive   PatientProblemStatusEnum = "active"
	PatientProblemStatusEnumInactive PatientProblemStatusEnum = "inactive"
	PatientProblemStatusEnumResolved PatientProblemStatusEnum = "resolved"
)

func (e PatientProblemStatusEnum) ToPointer() *PatientProblemStatusEnum {
	return &e
}

func (e *PatientProblemStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		fallthrough
	case "resolved":
		*e = PatientProblemStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientProblemStatusEnum: %v", v)
	}
}

// PatientProblem - Created
type PatientProblem struct {
	DateChanged   *string `json:"date_changed,omitempty"`
	DateDiagnosis *string `json:"date_diagnosis,omitempty"`
	DateOnset     *string `json:"date_onset,omitempty"`
	Description   *string `json:"description,omitempty"`
	Doctor        int64   `json:"doctor"`
	// ICD9 or ICD10 code for the problem
	IcdCode *string `json:"icd_code,omitempty"`
	// Either `9` or `10`. If omitted in writing, default to 10.
	IcdVersion *PatientProblemIcdVersionEnum `json:"icd_version,omitempty"`
	ID         *int64                        `json:"id,omitempty"`
	// External URL with more information about the problem, intended for patient education
	InfoURL *string `json:"info_url,omitempty"`
	// Name of the problem
	Name *string `json:"name,omitempty"`
	// Any additional notes by the provider
	Notes   *string `json:"notes,omitempty"`
	Patient int64   `json:"patient"`
	// SnoMED code for the problem
	SnomedCtCode *string `json:"snomed_ct_code,omitempty"`
	// Either `active`, `inactive` or `resolved`. If omitted in writing, default to `active`
	Status *PatientProblemStatusEnum `json:"status,omitempty"`
}
