/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Topics {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates the given topic with the given name.
   */
  pubsubTopicsCreate(
    req: operations.PubsubTopicsCreateRequest,
    security: operations.PubsubTopicsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PubsubTopicsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PubsubTopicsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1beta1a/topics";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "topic",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PubsubTopicsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PubsubTopicsCreateResponse =
        new operations.PubsubTopicsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.topic = utils.objectToClass(httpRes?.data, shared.Topic);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the topic with the given name. Returns NOT_FOUND if the topic does not exist. After a topic is deleted, a new topic may be created with the same name.
   */
  pubsubTopicsDelete(
    req: operations.PubsubTopicsDeleteRequest,
    security: operations.PubsubTopicsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PubsubTopicsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PubsubTopicsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1a/topics/{topic}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PubsubTopicsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PubsubTopicsDeleteResponse =
        new operations.PubsubTopicsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the configuration of a topic. Since the topic only has the name attribute, this method is only useful to check the existence of a topic. If other attributes are added in the future, they will be returned here.
   */
  pubsubTopicsGet(
    req: operations.PubsubTopicsGetRequest,
    security: operations.PubsubTopicsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PubsubTopicsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PubsubTopicsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1a/topics/{topic}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PubsubTopicsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PubsubTopicsGetResponse =
        new operations.PubsubTopicsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.topic = utils.objectToClass(httpRes?.data, shared.Topic);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists matching topics.
   */
  pubsubTopicsList(
    req: operations.PubsubTopicsListRequest,
    security: operations.PubsubTopicsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PubsubTopicsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PubsubTopicsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1beta1a/topics";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PubsubTopicsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PubsubTopicsListResponse =
        new operations.PubsubTopicsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTopicsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTopicsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds a message to the topic. Returns NOT_FOUND if the topic does not exist.
   */
  pubsubTopicsPublish(
    req: operations.PubsubTopicsPublishRequest,
    security: operations.PubsubTopicsPublishSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PubsubTopicsPublishResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PubsubTopicsPublishRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1beta1a/topics/publish";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "publishRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PubsubTopicsPublishSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PubsubTopicsPublishResponse =
        new operations.PubsubTopicsPublishResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds one or more messages to the topic. Returns NOT_FOUND if the topic does not exist.
   */
  pubsubTopicsPublishBatch(
    req: operations.PubsubTopicsPublishBatchRequest,
    security: operations.PubsubTopicsPublishBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PubsubTopicsPublishBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PubsubTopicsPublishBatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1beta1a/topics/publishBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "publishBatchRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PubsubTopicsPublishBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PubsubTopicsPublishBatchResponse =
        new operations.PubsubTopicsPublishBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.publishBatchResponse = utils.objectToClass(
              httpRes?.data,
              shared.PublishBatchResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
