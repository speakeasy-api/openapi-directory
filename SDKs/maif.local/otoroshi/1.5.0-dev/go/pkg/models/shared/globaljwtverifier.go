// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type GlobalJwtVerifierAlgoSettingsType string

const (
	GlobalJwtVerifierAlgoSettingsTypeHSAlgoSettings   GlobalJwtVerifierAlgoSettingsType = "HSAlgoSettings"
	GlobalJwtVerifierAlgoSettingsTypeRSAlgoSettings   GlobalJwtVerifierAlgoSettingsType = "RSAlgoSettings"
	GlobalJwtVerifierAlgoSettingsTypeESAlgoSettings   GlobalJwtVerifierAlgoSettingsType = "ESAlgoSettings"
	GlobalJwtVerifierAlgoSettingsTypeJWKSAlgoSettings GlobalJwtVerifierAlgoSettingsType = "JWKSAlgoSettings"
)

type GlobalJwtVerifierAlgoSettings struct {
	HSAlgoSettings   *HSAlgoSettings
	RSAlgoSettings   *RSAlgoSettings
	ESAlgoSettings   *ESAlgoSettings
	JWKSAlgoSettings *JWKSAlgoSettings

	Type GlobalJwtVerifierAlgoSettingsType
}

func CreateGlobalJwtVerifierAlgoSettingsHSAlgoSettings(hsAlgoSettings HSAlgoSettings) GlobalJwtVerifierAlgoSettings {
	typ := GlobalJwtVerifierAlgoSettingsTypeHSAlgoSettings

	return GlobalJwtVerifierAlgoSettings{
		HSAlgoSettings: &hsAlgoSettings,
		Type:           typ,
	}
}

func CreateGlobalJwtVerifierAlgoSettingsRSAlgoSettings(rsAlgoSettings RSAlgoSettings) GlobalJwtVerifierAlgoSettings {
	typ := GlobalJwtVerifierAlgoSettingsTypeRSAlgoSettings

	return GlobalJwtVerifierAlgoSettings{
		RSAlgoSettings: &rsAlgoSettings,
		Type:           typ,
	}
}

func CreateGlobalJwtVerifierAlgoSettingsESAlgoSettings(esAlgoSettings ESAlgoSettings) GlobalJwtVerifierAlgoSettings {
	typ := GlobalJwtVerifierAlgoSettingsTypeESAlgoSettings

	return GlobalJwtVerifierAlgoSettings{
		ESAlgoSettings: &esAlgoSettings,
		Type:           typ,
	}
}

func CreateGlobalJwtVerifierAlgoSettingsJWKSAlgoSettings(jwksAlgoSettings JWKSAlgoSettings) GlobalJwtVerifierAlgoSettings {
	typ := GlobalJwtVerifierAlgoSettingsTypeJWKSAlgoSettings

	return GlobalJwtVerifierAlgoSettings{
		JWKSAlgoSettings: &jwksAlgoSettings,
		Type:             typ,
	}
}

func (u *GlobalJwtVerifierAlgoSettings) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	hsAlgoSettings := new(HSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&hsAlgoSettings); err == nil {
		u.HSAlgoSettings = hsAlgoSettings
		u.Type = GlobalJwtVerifierAlgoSettingsTypeHSAlgoSettings
		return nil
	}

	rsAlgoSettings := new(RSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&rsAlgoSettings); err == nil {
		u.RSAlgoSettings = rsAlgoSettings
		u.Type = GlobalJwtVerifierAlgoSettingsTypeRSAlgoSettings
		return nil
	}

	esAlgoSettings := new(ESAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&esAlgoSettings); err == nil {
		u.ESAlgoSettings = esAlgoSettings
		u.Type = GlobalJwtVerifierAlgoSettingsTypeESAlgoSettings
		return nil
	}

	jwksAlgoSettings := new(JWKSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&jwksAlgoSettings); err == nil {
		u.JWKSAlgoSettings = jwksAlgoSettings
		u.Type = GlobalJwtVerifierAlgoSettingsTypeJWKSAlgoSettings
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GlobalJwtVerifierAlgoSettings) MarshalJSON() ([]byte, error) {
	if u.HSAlgoSettings != nil {
		return json.Marshal(u.HSAlgoSettings)
	}

	if u.RSAlgoSettings != nil {
		return json.Marshal(u.RSAlgoSettings)
	}

	if u.ESAlgoSettings != nil {
		return json.Marshal(u.ESAlgoSettings)
	}

	if u.JWKSAlgoSettings != nil {
		return json.Marshal(u.JWKSAlgoSettings)
	}

	return nil, nil
}

type GlobalJwtVerifierSourceType string

const (
	GlobalJwtVerifierSourceTypeInQueryParam GlobalJwtVerifierSourceType = "InQueryParam"
	GlobalJwtVerifierSourceTypeInHeader     GlobalJwtVerifierSourceType = "InHeader"
	GlobalJwtVerifierSourceTypeInCookie     GlobalJwtVerifierSourceType = "InCookie"
)

type GlobalJwtVerifierSource struct {
	InQueryParam *InQueryParam
	InHeader     *InHeader
	InCookie     *InCookie

	Type GlobalJwtVerifierSourceType
}

func CreateGlobalJwtVerifierSourceInQueryParam(inQueryParam InQueryParam) GlobalJwtVerifierSource {
	typ := GlobalJwtVerifierSourceTypeInQueryParam

	return GlobalJwtVerifierSource{
		InQueryParam: &inQueryParam,
		Type:         typ,
	}
}

func CreateGlobalJwtVerifierSourceInHeader(inHeader InHeader) GlobalJwtVerifierSource {
	typ := GlobalJwtVerifierSourceTypeInHeader

	return GlobalJwtVerifierSource{
		InHeader: &inHeader,
		Type:     typ,
	}
}

func CreateGlobalJwtVerifierSourceInCookie(inCookie InCookie) GlobalJwtVerifierSource {
	typ := GlobalJwtVerifierSourceTypeInCookie

	return GlobalJwtVerifierSource{
		InCookie: &inCookie,
		Type:     typ,
	}
}

func (u *GlobalJwtVerifierSource) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	inQueryParam := new(InQueryParam)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inQueryParam); err == nil {
		u.InQueryParam = inQueryParam
		u.Type = GlobalJwtVerifierSourceTypeInQueryParam
		return nil
	}

	inHeader := new(InHeader)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inHeader); err == nil {
		u.InHeader = inHeader
		u.Type = GlobalJwtVerifierSourceTypeInHeader
		return nil
	}

	inCookie := new(InCookie)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inCookie); err == nil {
		u.InCookie = inCookie
		u.Type = GlobalJwtVerifierSourceTypeInCookie
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GlobalJwtVerifierSource) MarshalJSON() ([]byte, error) {
	if u.InQueryParam != nil {
		return json.Marshal(u.InQueryParam)
	}

	if u.InHeader != nil {
		return json.Marshal(u.InHeader)
	}

	if u.InCookie != nil {
		return json.Marshal(u.InCookie)
	}

	return nil, nil
}

type GlobalJwtVerifierStrategyType string

const (
	GlobalJwtVerifierStrategyTypePassThrough GlobalJwtVerifierStrategyType = "PassThrough"
	GlobalJwtVerifierStrategyTypeSign        GlobalJwtVerifierStrategyType = "Sign"
	GlobalJwtVerifierStrategyTypeTransform   GlobalJwtVerifierStrategyType = "Transform"
)

type GlobalJwtVerifierStrategy struct {
	PassThrough *PassThrough
	Sign        *Sign
	Transform   *Transform

	Type GlobalJwtVerifierStrategyType
}

func CreateGlobalJwtVerifierStrategyPassThrough(passThrough PassThrough) GlobalJwtVerifierStrategy {
	typ := GlobalJwtVerifierStrategyTypePassThrough

	return GlobalJwtVerifierStrategy{
		PassThrough: &passThrough,
		Type:        typ,
	}
}

func CreateGlobalJwtVerifierStrategySign(sign Sign) GlobalJwtVerifierStrategy {
	typ := GlobalJwtVerifierStrategyTypeSign

	return GlobalJwtVerifierStrategy{
		Sign: &sign,
		Type: typ,
	}
}

func CreateGlobalJwtVerifierStrategyTransform(transform Transform) GlobalJwtVerifierStrategy {
	typ := GlobalJwtVerifierStrategyTypeTransform

	return GlobalJwtVerifierStrategy{
		Transform: &transform,
		Type:      typ,
	}
}

func (u *GlobalJwtVerifierStrategy) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	passThrough := new(PassThrough)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&passThrough); err == nil {
		u.PassThrough = passThrough
		u.Type = GlobalJwtVerifierStrategyTypePassThrough
		return nil
	}

	sign := new(Sign)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sign); err == nil {
		u.Sign = sign
		u.Type = GlobalJwtVerifierStrategyTypeSign
		return nil
	}

	transform := new(Transform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&transform); err == nil {
		u.Transform = transform
		u.Type = GlobalJwtVerifierStrategyTypeTransform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GlobalJwtVerifierStrategy) MarshalJSON() ([]byte, error) {
	if u.PassThrough != nil {
		return json.Marshal(u.PassThrough)
	}

	if u.Sign != nil {
		return json.Marshal(u.Sign)
	}

	if u.Transform != nil {
		return json.Marshal(u.Transform)
	}

	return nil, nil
}

// GlobalJwtVerifier - A JWT verifier used by multiple service descriptor
type GlobalJwtVerifier struct {
	AlgoSettings GlobalJwtVerifierAlgoSettings `json:"algoSettings"`
	// Verifier description
	Desc string `json:"desc"`
	// Is it enabled
	Enabled bool `json:"enabled"`
	// Verifier id
	ID string `json:"id"`
	// Verifier name
	Name     string                    `json:"name"`
	Source   GlobalJwtVerifierSource   `json:"source"`
	Strategy GlobalJwtVerifierStrategy `json:"strategy"`
	// Does it fail if JWT not found
	Strict bool `json:"strict"`
}
