/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Pep Sanction Check methods
 */
export class V1Pepsanction {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieves a list of monitor entries
   *
   * @remarks
   * Retrieve a list of all active Pep Sanction Report monitors for this account
   */
  pepMonitorList(
    config?: AxiosRequestConfig
  ): Promise<operations.PepMonitorListResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/pepsanction/monitor/list";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PepMonitorListResponse =
        new operations.PepMonitorListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pepMonitorList200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.pepMonitorList200ApplicationJSONObjects = utils.objectToClass(
              httpRes?.data,
              operations.PepMonitorList200ApplicationJSON,
              resFieldDepth
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pepMonitorListDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PepMonitorListDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deactive a pep sanction monitor
   *
   * @remarks
   * Unregister a previously created Pep Sanction Report Monitor
   */
  pepMonitorUnregister(
    req: operations.PepMonitorUnregisterRequest,
    security: operations.PepMonitorUnregisterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PepMonitorUnregisterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PepMonitorUnregisterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/pepsanction/monitor/unregister/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PepMonitorUnregisterSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PepMonitorUnregisterResponse =
        new operations.PepMonitorUnregisterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pepMonitorUnregister200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PepMonitorUnregister200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pepMonitorUnregisterDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PepMonitorUnregisterDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update details of active Pep Sanction monitor
   *
   * @remarks
   * Update the webhook URL of an active Pep Sanction Report Monitor
   */
  pepMonitorUpdate(
    req: operations.PepMonitorUpdateRequest,
    security: operations.PepMonitorUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PepMonitorUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PepMonitorUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/pepsanction/monitor/update/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PepMonitorUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PepMonitorUpdateResponse =
        new operations.PepMonitorUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pepMonitorUpdate200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PepMonitorUpdate200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pepMonitorUpdateDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PepMonitorUpdateDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Orders a new Pep Sanction Check Report
   *
   * @remarks
   * Order a new Pep Sanction Check by providing either a business or person name with some additional optional parameters.
   */
  pepOrder(
    req: operations.PepOrderRequest,
    security: operations.PepOrderSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PepOrderResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PepOrderRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/pepsanction/order/{type}/{search}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PepOrderSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PepOrderResponse = new operations.PepOrderResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pepOrder200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PepOrder200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pepOrderDefaultApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PepOrderDefaultApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a json or pdf report
   *
   * @remarks
   * Retrieve a completed Pep Sanction check structured or in pdf depending on given accept header
   */
  pepRetrieve(
    req: operations.PepRetrieveRequest,
    security: operations.PepRetrieveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PepRetrieveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PepRetrieveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/pepsanction/retrieve/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PepRetrieveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PepRetrieveResponse =
        new operations.PepRetrieveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pepRetrieve200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PepRetrieve200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pepRetrieveDefaultApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PepRetrieveDefaultApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
