// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CallBroadcastSoundsDncSoundTextVoiceEnum - The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
type CallBroadcastSoundsDncSoundTextVoiceEnum string

const (
	CallBroadcastSoundsDncSoundTextVoiceEnumMale1           CallBroadcastSoundsDncSoundTextVoiceEnum = "MALE1"
	CallBroadcastSoundsDncSoundTextVoiceEnumFemale1         CallBroadcastSoundsDncSoundTextVoiceEnum = "FEMALE1"
	CallBroadcastSoundsDncSoundTextVoiceEnumFemale2         CallBroadcastSoundsDncSoundTextVoiceEnum = "FEMALE2"
	CallBroadcastSoundsDncSoundTextVoiceEnumSpanish1        CallBroadcastSoundsDncSoundTextVoiceEnum = "SPANISH1"
	CallBroadcastSoundsDncSoundTextVoiceEnumFrenchcanadian1 CallBroadcastSoundsDncSoundTextVoiceEnum = "FRENCHCANADIAN1"
)

func (e *CallBroadcastSoundsDncSoundTextVoiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MALE1":
		fallthrough
	case "FEMALE1":
		fallthrough
	case "FEMALE2":
		fallthrough
	case "SPANISH1":
		fallthrough
	case "FRENCHCANADIAN1":
		*e = CallBroadcastSoundsDncSoundTextVoiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CallBroadcastSoundsDncSoundTextVoiceEnum: %s", s)
	}
}

// CallBroadcastSoundsLiveSoundTextVoiceEnum - The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a live sound
type CallBroadcastSoundsLiveSoundTextVoiceEnum string

const (
	CallBroadcastSoundsLiveSoundTextVoiceEnumMale1           CallBroadcastSoundsLiveSoundTextVoiceEnum = "MALE1"
	CallBroadcastSoundsLiveSoundTextVoiceEnumFemale1         CallBroadcastSoundsLiveSoundTextVoiceEnum = "FEMALE1"
	CallBroadcastSoundsLiveSoundTextVoiceEnumFemale2         CallBroadcastSoundsLiveSoundTextVoiceEnum = "FEMALE2"
	CallBroadcastSoundsLiveSoundTextVoiceEnumSpanish1        CallBroadcastSoundsLiveSoundTextVoiceEnum = "SPANISH1"
	CallBroadcastSoundsLiveSoundTextVoiceEnumFrenchcanadian1 CallBroadcastSoundsLiveSoundTextVoiceEnum = "FRENCHCANADIAN1"
)

func (e *CallBroadcastSoundsLiveSoundTextVoiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MALE1":
		fallthrough
	case "FEMALE1":
		fallthrough
	case "FEMALE2":
		fallthrough
	case "SPANISH1":
		fallthrough
	case "FRENCHCANADIAN1":
		*e = CallBroadcastSoundsLiveSoundTextVoiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CallBroadcastSoundsLiveSoundTextVoiceEnum: %s", s)
	}
}

// CallBroadcastSoundsMachineSoundTextVoiceEnum - The voice to be used (MALE1, FEMALE1 , FEMALE2, SPANISH1, FRENCHCANADIAN1) for a machine sound
type CallBroadcastSoundsMachineSoundTextVoiceEnum string

const (
	CallBroadcastSoundsMachineSoundTextVoiceEnumMale1           CallBroadcastSoundsMachineSoundTextVoiceEnum = "MALE1"
	CallBroadcastSoundsMachineSoundTextVoiceEnumFemale1         CallBroadcastSoundsMachineSoundTextVoiceEnum = "FEMALE1"
	CallBroadcastSoundsMachineSoundTextVoiceEnumFemale2         CallBroadcastSoundsMachineSoundTextVoiceEnum = "FEMALE2"
	CallBroadcastSoundsMachineSoundTextVoiceEnumSpanish1        CallBroadcastSoundsMachineSoundTextVoiceEnum = "SPANISH1"
	CallBroadcastSoundsMachineSoundTextVoiceEnumFrenchcanadian1 CallBroadcastSoundsMachineSoundTextVoiceEnum = "FRENCHCANADIAN1"
)

func (e *CallBroadcastSoundsMachineSoundTextVoiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MALE1":
		fallthrough
	case "FEMALE1":
		fallthrough
	case "FEMALE2":
		fallthrough
	case "SPANISH1":
		fallthrough
	case "FRENCHCANADIAN1":
		*e = CallBroadcastSoundsMachineSoundTextVoiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CallBroadcastSoundsMachineSoundTextVoiceEnum: %s", s)
	}
}

// CallBroadcastSoundsTransferSoundTextVoiceEnum - The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a sound transfer
type CallBroadcastSoundsTransferSoundTextVoiceEnum string

const (
	CallBroadcastSoundsTransferSoundTextVoiceEnumMale1           CallBroadcastSoundsTransferSoundTextVoiceEnum = "MALE1"
	CallBroadcastSoundsTransferSoundTextVoiceEnumFemale1         CallBroadcastSoundsTransferSoundTextVoiceEnum = "FEMALE1"
	CallBroadcastSoundsTransferSoundTextVoiceEnumFemale2         CallBroadcastSoundsTransferSoundTextVoiceEnum = "FEMALE2"
	CallBroadcastSoundsTransferSoundTextVoiceEnumSpanish1        CallBroadcastSoundsTransferSoundTextVoiceEnum = "SPANISH1"
	CallBroadcastSoundsTransferSoundTextVoiceEnumFrenchcanadian1 CallBroadcastSoundsTransferSoundTextVoiceEnum = "FRENCHCANADIAN1"
)

func (e *CallBroadcastSoundsTransferSoundTextVoiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MALE1":
		fallthrough
	case "FEMALE1":
		fallthrough
	case "FEMALE2":
		fallthrough
	case "SPANISH1":
		fallthrough
	case "FRENCHCANADIAN1":
		*e = CallBroadcastSoundsTransferSoundTextVoiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CallBroadcastSoundsTransferSoundTextVoiceEnum: %s", s)
	}
}

// CallBroadcastSounds - A set of sounds assigned to a voice broadcast to play according to an answering machine configuration. You can add the existing sounds from the account's sound library or to provide a text which will be converted into a speech. There are four sound options available for a Voice Broadcast campaign
type CallBroadcastSounds struct {
	// Digit pressed to place contact in DNC list
	DncDigit *string `json:"dncDigit,omitempty"`
	// An id of sound file to play when recipient decided to opt out and pressed DNC digit
	DncSoundID *int64 `json:"dncSoundId,omitempty"`
	// Text to be turned into sound, plays to notify that Do Not Call digit has been pressed and inform your contact of their placement on the Do Not Call list
	DncSoundText *string `json:"dncSoundText,omitempty"`
	// The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
	DncSoundTextVoice *CallBroadcastSoundsDncSoundTextVoiceEnum `json:"dncSoundTextVoice,omitempty"`
	// An id of sound file to play if phone is answered
	LiveSoundID *int64 `json:"liveSoundId,omitempty"`
	// Text to be used to turned into a sound. This text will be played when the phone is answered
	LiveSoundText *string `json:"liveSoundText,omitempty"`
	// The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a live sound
	LiveSoundTextVoice *CallBroadcastSoundsLiveSoundTextVoiceEnum `json:"liveSoundTextVoice,omitempty"`
	// An id of a sound file to play if answering machine is detected
	MachineSoundID *int64 `json:"machineSoundId,omitempty"`
	// Text to be turned into a sound. This text will be played when answering machine is detected
	MachineSoundText *string `json:"machineSoundText,omitempty"`
	// The voice to be used (MALE1, FEMALE1 , FEMALE2, SPANISH1, FRENCHCANADIAN1) for a machine sound
	MachineSoundTextVoice *CallBroadcastSoundsMachineSoundTextVoiceEnum `json:"machineSoundTextVoice,omitempty"`
	// Digit pressed to initiate a transfer
	TransferDigit *string `json:"transferDigit,omitempty"`
	// Phone number in E.164 format (11-digit) to transfer call to.  Example: 12132000384, 67076
	TransferNumber *string `json:"transferNumber,omitempty"`
	// An id of a file to play if call is transferred
	TransferSoundID *int64 `json:"transferSoundId,omitempty"`
	// Text to be turned into a sound. This text will be played when the transfer digit is played
	TransferSoundText *string `json:"transferSoundText,omitempty"`
	// The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a sound transfer
	TransferSoundTextVoice *CallBroadcastSoundsTransferSoundTextVoiceEnum `json:"transferSoundTextVoice,omitempty"`
}
