// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AnalyticsDeviceCountsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsDeviceCountsRequest struct {
	// Application build number. If build number is specified than multiple versions are not allowed.
	AppBuild *string `queryParam:"style=form,explode=true,name=app_build"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format.
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format.
	Start time.Time `queryParam:"style=form,explode=true,name=start"`
	// To select specific application versions
	Versions []string `queryParam:"style=pipeDelimited,explode=true,name=versions"`
}

// AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsDeviceCountsDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsDeviceCountsDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsDeviceCountsDefaultApplicationJSON - Error
type AnalyticsDeviceCountsDefaultApplicationJSON struct {
	Error *AnalyticsDeviceCountsDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsDeviceCounts200ApplicationJSONDaily struct {
	// Count of the object.
	Count *int64 `json:"count,omitempty"`
	// The ISO 8601 datetime.
	Datetime *string `json:"datetime,omitempty"`
}

type AnalyticsDeviceCounts200ApplicationJSONMonthly struct {
	// Count of the object.
	Count *int64 `json:"count,omitempty"`
	// The ISO 8601 datetime.
	Datetime *string `json:"datetime,omitempty"`
}

type AnalyticsDeviceCounts200ApplicationJSONWeekly struct {
	// Count of the object.
	Count *int64 `json:"count,omitempty"`
	// The ISO 8601 datetime.
	Datetime *string `json:"datetime,omitempty"`
}

// AnalyticsDeviceCounts200ApplicationJSON - Count of active devices by interval in the time range.
type AnalyticsDeviceCounts200ApplicationJSON struct {
	// The active device count for each interval.
	Daily []AnalyticsDeviceCounts200ApplicationJSONDaily `json:"daily,omitempty"`
	// The active device count for each interval with a month's retention.
	Monthly []AnalyticsDeviceCounts200ApplicationJSONMonthly `json:"monthly,omitempty"`
	// The active device count for each interval with a week's retention.
	Weekly []AnalyticsDeviceCounts200ApplicationJSONWeekly `json:"weekly,omitempty"`
}

type AnalyticsDeviceCountsResponse struct {
	// Count of active devices by interval in the time range.
	AnalyticsDeviceCounts200ApplicationJSONObject *AnalyticsDeviceCounts200ApplicationJSON
	// Error code with reason.
	AnalyticsDeviceCountsDefaultApplicationJSONObject *AnalyticsDeviceCountsDefaultApplicationJSON
	ContentType                                       string
	StatusCode                                        int
	RawResponse                                       *http.Response
}
