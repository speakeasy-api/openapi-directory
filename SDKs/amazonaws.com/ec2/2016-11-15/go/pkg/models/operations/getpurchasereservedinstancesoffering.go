// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GETPurchaseReservedInstancesOfferingActionEnum
type GETPurchaseReservedInstancesOfferingActionEnum string

const (
	GETPurchaseReservedInstancesOfferingActionEnumPurchaseReservedInstancesOffering GETPurchaseReservedInstancesOfferingActionEnum = "PurchaseReservedInstancesOffering"
)

func (e *GETPurchaseReservedInstancesOfferingActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PurchaseReservedInstancesOffering":
		*e = GETPurchaseReservedInstancesOfferingActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPurchaseReservedInstancesOfferingActionEnum: %s", s)
	}
}

// GETPurchaseReservedInstancesOfferingLimitPriceCurrencyCodeEnum - The currency in which the <code>limitPrice</code> amount is specified. At this time, the only supported currency is <code>USD</code>.
type GETPurchaseReservedInstancesOfferingLimitPriceCurrencyCodeEnum string

const (
	GETPurchaseReservedInstancesOfferingLimitPriceCurrencyCodeEnumUsd GETPurchaseReservedInstancesOfferingLimitPriceCurrencyCodeEnum = "USD"
)

func (e *GETPurchaseReservedInstancesOfferingLimitPriceCurrencyCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "USD":
		*e = GETPurchaseReservedInstancesOfferingLimitPriceCurrencyCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPurchaseReservedInstancesOfferingLimitPriceCurrencyCodeEnum: %s", s)
	}
}

// GETPurchaseReservedInstancesOfferingLimitPrice - Describes the limit price of a Reserved Instance offering.
type GETPurchaseReservedInstancesOfferingLimitPrice struct {
	Amount       *float64                                                        `queryParam:"name=Amount"`
	CurrencyCode *GETPurchaseReservedInstancesOfferingLimitPriceCurrencyCodeEnum `queryParam:"name=CurrencyCode"`
}

// GETPurchaseReservedInstancesOfferingVersionEnum
type GETPurchaseReservedInstancesOfferingVersionEnum string

const (
	GETPurchaseReservedInstancesOfferingVersionEnumTwoThousandAndSixteen1115 GETPurchaseReservedInstancesOfferingVersionEnum = "2016-11-15"
)

func (e *GETPurchaseReservedInstancesOfferingVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETPurchaseReservedInstancesOfferingVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPurchaseReservedInstancesOfferingVersionEnum: %s", s)
	}
}

type GETPurchaseReservedInstancesOfferingRequest struct {
	Action GETPurchaseReservedInstancesOfferingActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The number of Reserved Instances to purchase.
	InstanceCount int64 `queryParam:"style=form,explode=true,name=InstanceCount"`
	// Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.
	LimitPrice *GETPurchaseReservedInstancesOfferingLimitPrice `queryParam:"style=form,explode=true,name=LimitPrice"`
	// The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
	PurchaseTime *time.Time `queryParam:"style=form,explode=true,name=PurchaseTime"`
	// The ID of the Reserved Instance offering to purchase.
	ReservedInstancesOfferingID string                                          `queryParam:"style=form,explode=true,name=ReservedInstancesOfferingId"`
	Version                     GETPurchaseReservedInstancesOfferingVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm               *string                                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETPurchaseReservedInstancesOfferingResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
