"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelContentDetailsRelatedPlaylists:
    
    favorites: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('favorites'), 'exclude': lambda f: f is None }})
    r"""The ID of the playlist that contains the channel\\"s favorite videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."""  
    likes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likes'), 'exclude': lambda f: f is None }})
    r"""The ID of the playlist that contains the channel\\"s liked videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."""  
    uploads: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploads'), 'exclude': lambda f: f is None }})
    r"""The ID of the playlist that contains the channel\\"s uploaded videos. Use the videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos."""  
    watch_history: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchHistory'), 'exclude': lambda f: f is None }})
    r"""The ID of the playlist that contains the channel\\"s watch history. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."""  
    watch_later: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchLater'), 'exclude': lambda f: f is None }})
    r"""The ID of the playlist that contains the channel\\"s watch later playlist. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelContentDetails:
    r"""Details about the content of a channel."""
    
    related_playlists: Optional[ChannelContentDetailsRelatedPlaylists] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedPlaylists'), 'exclude': lambda f: f is None }})  
    