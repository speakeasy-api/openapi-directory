"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customizedscalingmetricspecification as shared_customizedscalingmetricspecification
from ..shared import predefinedscalingmetricspecification as shared_predefinedscalingmetricspecification
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TargetTrackingConfiguration:
    r"""Describes a target tracking configuration to use with AWS Auto Scaling. Used with <a>ScalingInstruction</a> and <a>ScalingPolicy</a>."""
    
    target_value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetValue') }})  
    customized_scaling_metric_specification: Optional[shared_customizedscalingmetricspecification.CustomizedScalingMetricSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomizedScalingMetricSpecification'), 'exclude': lambda f: f is None }})  
    disable_scale_in: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisableScaleIn'), 'exclude': lambda f: f is None }})  
    estimated_instance_warmup: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedInstanceWarmup'), 'exclude': lambda f: f is None }})  
    predefined_scaling_metric_specification: Optional[shared_predefinedscalingmetricspecification.PredefinedScalingMetricSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PredefinedScalingMetricSpecification'), 'exclude': lambda f: f is None }})  
    scale_in_cooldown: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScaleInCooldown'), 'exclude': lambda f: f is None }})  
    scale_out_cooldown: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScaleOutCooldown'), 'exclude': lambda f: f is None }})  
    