"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import reviewer as shared_reviewer
from ..shared import reviewreply as shared_reviewreply
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReviewStarRatingEnum(str, Enum):
    r"""The star rating of the review."""
    STAR_RATING_UNSPECIFIED = 'STAR_RATING_UNSPECIFIED'
    ONE = 'ONE'
    TWO = 'TWO'
    THREE = 'THREE'
    FOUR = 'FOUR'
    FIVE = 'FIVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Review:
    r"""Output only. Represents a review for a location."""
    
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""The body of the review as plain text with markups."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""The timestamp for when the review was written."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The resource name. For Review it is of the form `accounts/{account_id}/locations/{location_id}/reviews/{review_id}`"""  
    reviewer: Optional[shared_reviewer.Reviewer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewer'), 'exclude': lambda f: f is None }})
    r"""Represents the author of the review."""  
    review_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewId'), 'exclude': lambda f: f is None }})
    r"""The encrypted unique identifier."""  
    review_reply: Optional[shared_reviewreply.ReviewReply] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewReply'), 'exclude': lambda f: f is None }})
    r"""Represents the location owner/manager's reply to a review."""  
    star_rating: Optional[ReviewStarRatingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starRating'), 'exclude': lambda f: f is None }})
    r"""The star rating of the review."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""The timestamp for when the review was last modified."""  
    