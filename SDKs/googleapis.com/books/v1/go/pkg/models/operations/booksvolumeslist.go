// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BooksVolumesListSecurity struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

// BooksVolumesListDownloadEnum - Restrict to volumes by download availability.
type BooksVolumesListDownloadEnum string

const (
	BooksVolumesListDownloadEnumDownloadUndefined BooksVolumesListDownloadEnum = "DOWNLOAD_UNDEFINED"
	BooksVolumesListDownloadEnumEpub              BooksVolumesListDownloadEnum = "EPUB"
)

func (e *BooksVolumesListDownloadEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DOWNLOAD_UNDEFINED":
		fallthrough
	case "EPUB":
		*e = BooksVolumesListDownloadEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BooksVolumesListDownloadEnum: %s", s)
	}
}

// BooksVolumesListFilterEnum - Filter search results.
type BooksVolumesListFilterEnum string

const (
	BooksVolumesListFilterEnumFilterUndefined BooksVolumesListFilterEnum = "FILTER_UNDEFINED"
	BooksVolumesListFilterEnumEbooks          BooksVolumesListFilterEnum = "ebooks"
	BooksVolumesListFilterEnumFreeEbooks      BooksVolumesListFilterEnum = "free-ebooks"
	BooksVolumesListFilterEnumFull            BooksVolumesListFilterEnum = "full"
	BooksVolumesListFilterEnumPaidEbooks      BooksVolumesListFilterEnum = "paid-ebooks"
	BooksVolumesListFilterEnumPartial         BooksVolumesListFilterEnum = "partial"
)

func (e *BooksVolumesListFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FILTER_UNDEFINED":
		fallthrough
	case "ebooks":
		fallthrough
	case "free-ebooks":
		fallthrough
	case "full":
		fallthrough
	case "paid-ebooks":
		fallthrough
	case "partial":
		*e = BooksVolumesListFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BooksVolumesListFilterEnum: %s", s)
	}
}

// BooksVolumesListLibraryRestrictEnum - Restrict search to this user's library.
type BooksVolumesListLibraryRestrictEnum string

const (
	BooksVolumesListLibraryRestrictEnumLibraryRestrictUndefined BooksVolumesListLibraryRestrictEnum = "LIBRARY_RESTRICT_UNDEFINED"
	BooksVolumesListLibraryRestrictEnumMyLibrary                BooksVolumesListLibraryRestrictEnum = "my-library"
	BooksVolumesListLibraryRestrictEnumNoRestrict               BooksVolumesListLibraryRestrictEnum = "no-restrict"
)

func (e *BooksVolumesListLibraryRestrictEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LIBRARY_RESTRICT_UNDEFINED":
		fallthrough
	case "my-library":
		fallthrough
	case "no-restrict":
		*e = BooksVolumesListLibraryRestrictEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BooksVolumesListLibraryRestrictEnum: %s", s)
	}
}

// BooksVolumesListMaxAllowedMaturityRatingEnum - The maximum allowed maturity rating of returned recommendations. Books with a higher maturity rating are filtered out.
type BooksVolumesListMaxAllowedMaturityRatingEnum string

const (
	BooksVolumesListMaxAllowedMaturityRatingEnumMaxAllowedMaturityRatingUndefined BooksVolumesListMaxAllowedMaturityRatingEnum = "MAX_ALLOWED_MATURITY_RATING_UNDEFINED"
	BooksVolumesListMaxAllowedMaturityRatingEnumMature                            BooksVolumesListMaxAllowedMaturityRatingEnum = "MATURE"
	BooksVolumesListMaxAllowedMaturityRatingEnumNotMature                         BooksVolumesListMaxAllowedMaturityRatingEnum = "not-mature"
)

func (e *BooksVolumesListMaxAllowedMaturityRatingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MAX_ALLOWED_MATURITY_RATING_UNDEFINED":
		fallthrough
	case "MATURE":
		fallthrough
	case "not-mature":
		*e = BooksVolumesListMaxAllowedMaturityRatingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BooksVolumesListMaxAllowedMaturityRatingEnum: %s", s)
	}
}

// BooksVolumesListOrderByEnum - Sort search results.
type BooksVolumesListOrderByEnum string

const (
	BooksVolumesListOrderByEnumOrderByUndefined BooksVolumesListOrderByEnum = "ORDER_BY_UNDEFINED"
	BooksVolumesListOrderByEnumNewest           BooksVolumesListOrderByEnum = "newest"
	BooksVolumesListOrderByEnumRelevance        BooksVolumesListOrderByEnum = "relevance"
)

func (e *BooksVolumesListOrderByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ORDER_BY_UNDEFINED":
		fallthrough
	case "newest":
		fallthrough
	case "relevance":
		*e = BooksVolumesListOrderByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BooksVolumesListOrderByEnum: %s", s)
	}
}

// BooksVolumesListPrintTypeEnum - Restrict to books or magazines.
type BooksVolumesListPrintTypeEnum string

const (
	BooksVolumesListPrintTypeEnumPrintTypeUndefined BooksVolumesListPrintTypeEnum = "PRINT_TYPE_UNDEFINED"
	BooksVolumesListPrintTypeEnumAll                BooksVolumesListPrintTypeEnum = "ALL"
	BooksVolumesListPrintTypeEnumBooks              BooksVolumesListPrintTypeEnum = "BOOKS"
	BooksVolumesListPrintTypeEnumMagazines          BooksVolumesListPrintTypeEnum = "MAGAZINES"
)

func (e *BooksVolumesListPrintTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PRINT_TYPE_UNDEFINED":
		fallthrough
	case "ALL":
		fallthrough
	case "BOOKS":
		fallthrough
	case "MAGAZINES":
		*e = BooksVolumesListPrintTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BooksVolumesListPrintTypeEnum: %s", s)
	}
}

// BooksVolumesListProjectionEnum - Restrict information returned to a set of selected fields.
type BooksVolumesListProjectionEnum string

const (
	BooksVolumesListProjectionEnumProjectionUndefined BooksVolumesListProjectionEnum = "PROJECTION_UNDEFINED"
	BooksVolumesListProjectionEnumFull                BooksVolumesListProjectionEnum = "FULL"
	BooksVolumesListProjectionEnumLite                BooksVolumesListProjectionEnum = "LITE"
)

func (e *BooksVolumesListProjectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROJECTION_UNDEFINED":
		fallthrough
	case "FULL":
		fallthrough
	case "LITE":
		*e = BooksVolumesListProjectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BooksVolumesListProjectionEnum: %s", s)
	}
}

type BooksVolumesListQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Restrict to volumes by download availability.
	Download *BooksVolumesListDownloadEnum `queryParam:"style=form,explode=true,name=download"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Filter search results.
	Filter *BooksVolumesListFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Restrict results to books with this language code.
	LangRestrict *string `queryParam:"style=form,explode=true,name=langRestrict"`
	// Restrict search to this user's library.
	LibraryRestrict *BooksVolumesListLibraryRestrictEnum `queryParam:"style=form,explode=true,name=libraryRestrict"`
	// The maximum allowed maturity rating of returned recommendations. Books with a higher maturity rating are filtered out.
	MaxAllowedMaturityRating *BooksVolumesListMaxAllowedMaturityRatingEnum `queryParam:"style=form,explode=true,name=maxAllowedMaturityRating"`
	// Maximum number of results to return.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Sort search results.
	OrderBy *BooksVolumesListOrderByEnum `queryParam:"style=form,explode=true,name=orderBy"`
	// Restrict and brand results for partner ID.
	Partner *string `queryParam:"style=form,explode=true,name=partner"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Restrict to books or magazines.
	PrintType *BooksVolumesListPrintTypeEnum `queryParam:"style=form,explode=true,name=printType"`
	// Restrict information returned to a set of selected fields.
	Projection *BooksVolumesListProjectionEnum `queryParam:"style=form,explode=true,name=projection"`
	// Full-text search query string.
	Q string `queryParam:"style=form,explode=true,name=q"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Set to true to show books available for preorder. Defaults to false.
	ShowPreorders *bool `queryParam:"style=form,explode=true,name=showPreorders"`
	// String to identify the originator of this request.
	Source *string `queryParam:"style=form,explode=true,name=source"`
	// Index of the first result to return (starts at 0)
	StartIndex *int64 `queryParam:"style=form,explode=true,name=startIndex"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type BooksVolumesListRequest struct {
	QueryParams BooksVolumesListQueryParams
	Security    BooksVolumesListSecurity
}

type BooksVolumesListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful response
	Volumes *shared.Volumes
}
