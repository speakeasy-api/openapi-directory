"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetTimestagsFilterEnum(str, Enum):
    r"""If you do not specify a value for filter (see the Optional Parameters), your query will be matched to tags in all four Times dictionaries: subject, geographic location, organization and person. To use more than one, separate with commas."""
    DES = 'Des'
    GEO = 'Geo'
    ORG = 'Org'
    PER = 'Per'


@dataclasses.dataclass
class GetTimestagsRequest:
    
    query: str = dataclasses.field(metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""Your search query"""  
    filter: Optional[GetTimestagsFilterEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""If you do not specify a value for filter (see the Optional Parameters), your query will be matched to tags in all four Times dictionaries: subject, geographic location, organization and person. To use more than one, separate with commas."""  
    max: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max', 'style': 'form', 'explode': True }})
    r"""Sets the maximum number of results"""  
    

@dataclasses.dataclass
class GetTimestagsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_timestags_200_application_json_arrays: Optional[list[list[str]]] = dataclasses.field(default=None)
    r"""An array of tags"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    