<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SKUApprovalSettings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get Account's Approval Settings
     * 
     * This endpoint retrieves the current approval settings of a marketplace's Received SKUs module. Its response includes: 
     * 
     * - `Score`: Matcher scores for approving and rejecting SKUs received from sellers. 
     * 
     * - `Matchers`: All Matchers configured on the marketplace, and their respective details. 
     * 
     * - `SpecificationsMapping`: Mapping of product and SKU specifications, per seller. 
     * 
     * - `MatchFlux`: This field determines the type of approval configuration applied to SKUs received from a seller. 
     * 
     * The possible values include: 
     * 
     * -`default`, where the Matcher reviews the SKU, and approves it based on its score. 
     * 
     * -`manual`, for manual approvals through the Received SKU UI, or Match API. 
     * 
     * -`autoApprove`, for every SKU received from a given seller to be approved automatically, regardless of their Matcher Score.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetaccountconfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetaccountconfigResponse
     */
	public function getaccountconfig(
        \OpenAPI\OpenAPI\Models\Operations\GetaccountconfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetaccountconfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/suggestions/configuration');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetaccountconfigRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetaccountconfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getaccountconfig200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getaccountconfig200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get autoApprove Status in Account Settings
     * 
     * This endpoint can be used to check whether the autoapprove setting is active or not, for a specific seller. 
     * 
     * If the response is `true`, the autoapprove setting is active. If the response is `false`, it is inactive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetautoApprovevaluefromconfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetautoApprovevaluefromconfigResponse
     */
	public function getautoApprovevaluefromconfig(
        \OpenAPI\OpenAPI\Models\Operations\GetautoApprovevaluefromconfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetautoApprovevaluefromconfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/suggestions/configuration/autoapproval/toggle');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetautoApprovevaluefromconfigRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetautoApprovevaluefromconfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getautoApprovevaluefromconfig200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetautoApprovevaluefromconfig200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Seller's Approval Settings
     * 
     * This endpoint retrieves the current Received SKUs approval settings applied to a specific seller. Its response includes: 
     * 
     * - `sellerId`: A string that identifies the seller in the marketplace. 
     * 
     * - `accountId`: Marketplaceâ€™s account ID. 
     * 
     * - `accountName`: Marketplaceâ€™s account name. 
     * 
     * - `mapping`: Mapping of SKU and product Specifications. 
     * 
     * - `matchFlux`: This field determines the type of approval configuration applied to SKUs received  from a seller. 
     * 
     * The possible values include:  
     * 
     * -`default`, where the Matcher reviews the SKU, and approves it based on its score. 
     * 
     * -`manual`, for manual approvals through the Received SKU UI and Match API. 
     * 
     * -`autoApprove`, for every SKU received from a given seller to be approved automatically, regardless of the Matcher Score.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetselleraccountconfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetselleraccountconfigResponse
     */
	public function getselleraccountconfig(
        \OpenAPI\OpenAPI\Models\Operations\GetselleraccountconfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetselleraccountconfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/suggestions/configuration/seller/{sellerId}', \OpenAPI\OpenAPI\Models\Operations\GetselleraccountconfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetselleraccountconfigRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetselleraccountconfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Save Seller's Approval Settings
     * 
     * Marketplaces use this endpoint to create or update approval settings to a specific seller, on the Received SKUs module. 
     * 
     * The request includes all the details necessary to implement the chosen approval settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutselleraccountconfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutselleraccountconfigResponse
     */
	public function putselleraccountconfig(
        \OpenAPI\OpenAPI\Models\Operations\PutselleraccountconfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutselleraccountconfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/suggestions/configuration/seller/{sellerId}', \OpenAPI\OpenAPI\Models\Operations\PutselleraccountconfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "putselleraccountconfigRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutselleraccountconfigRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutselleraccountconfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Save Account's Approval Settings
     * 
     * Marketplaces use this endpoint to create or update approval settings on their Received SKUs module. 
     * 
     * The request includes all the details necessary to implement the chosen approval settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SaveaccountconfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveaccountconfigResponse
     */
	public function saveaccountconfig(
        \OpenAPI\OpenAPI\Models\Operations\SaveaccountconfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveaccountconfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/suggestions/configuration');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "saveaccountconfigRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SaveaccountconfigRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveaccountconfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->saveaccountconfig200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Saveaccountconfig200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Activate autoApprove in Marketplace's Account
     * 
     * This endpoint enables the autoapprove rule to a marketplace's whole Received SKUs module. Once enabling the rule, received SKUs will be automatically approved on your store, regardless of the seller. 
     * 
     *  For the autoapprove rule to work as expected, the approval [Matcher score](https://help.vtex.com/en/tutorial/entendendo-a-pontuacao-do-vtex-matcher--tutorials_424) should be set up as 80 (default value), but you can configure a different number through the field `Score` in [Save Account's Approval Settings](https://developers.vtex.com/vtex-rest-api/reference/saveaccountconfig).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountResponse
     */
	public function saveautoapproveforaccount(
        \OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/suggestions/configuration/autoapproval/toggle');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "saveautoapproveforaccountRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->saveautoapproveforaccount200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Saveautoapproveforaccount200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Activate autoApprove Setting for a Seller
     * 
     * This endpoint enables the auto approve setting to received SKUs from a specific seller. Be aware that once enabling the rule through this request, all received SKUs from that seller will be automatically approved on your store, regardless of the Matcher Score.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountsellerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountsellerResponse
     */
	public function saveautoapproveforaccountseller(
        \OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountsellerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountsellerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/suggestions/configuration/autoapproval/toggle/seller/{sellerId}', \OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountsellerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "saveautoapproveforaccountsellerRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountsellerRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveautoapproveforaccountsellerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}