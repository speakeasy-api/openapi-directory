/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class MeetingRegistrantCreateSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * Custom Question.
 */
export class MeetingRegistrantCreateApplicationJSONCustomQuestions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Registrant base object.
 */
export class MeetingRegistrantCreateApplicationJSON extends SpeakeasyBase {
  /**
   * Registrant's address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_approve" })
  autoApprove?: boolean;

  /**
   * Registrant's city.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city?: string;

  /**
   * A field that allows registrants to provide any questions or comments that they might have.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: string;

  /**
   * Registrant's country. The value of this field must be in two-letter abbreviated form and must match the ID field provided in the [Countries](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) table.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country?: string;

  /**
   * Custom questions.
   */
  @SpeakeasyMetadata({
    elemType: MeetingRegistrantCreateApplicationJSONCustomQuestions,
  })
  @Expose({ name: "custom_questions" })
  @Type(() => MeetingRegistrantCreateApplicationJSONCustomQuestions)
  customQuestions?: MeetingRegistrantCreateApplicationJSONCustomQuestions[];

  /**
   * A valid email address of the registrant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  /**
   * Registrant's first name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName: string;

  /**
   * Registrant's Industry.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "industry" })
  industry?: string;

  /**
   * Registrant's job title.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "job_title" })
  jobTitle?: string;

  /**
   * Registrant's language preference for confirmation  emails. The value can be one of the following:
   *
   * @remarks
   * `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: string;

  /**
   * Registrant's last name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;

  /**
   * Number of Employees:<br>`1-20`<br>`21-50`<br>`51-100`<br>`101-500`<br>`500-1,000`<br>`1,001-5,000`<br>`5,001-10,000`<br>`More than 10,000`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "no_of_employees" })
  noOfEmployees?: string;

  /**
   * Registrant's Organization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "org" })
  org?: string;

  /**
   * Registrant's Phone number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "phone" })
  phone?: string;

  /**
   * This field can be included to gauge interest of webinar attendees towards buying your product or service.
   *
   * @remarks
   *
   * Purchasing Time Frame:<br>`Within a month`<br>`1-3 months`<br>`4-6 months`<br>`More than 6 months`<br>`No timeframe`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purchasing_time_frame" })
  purchasingTimeFrame?: string;

  /**
   * Role in Purchase Process:<br>`Decision Maker`<br>`Evaluator/Recommender`<br>`Influencer`<br>`Not involved`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "role_in_purchase_process" })
  roleInPurchaseProcess?: string;

  /**
   * Registrant's State/Province.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: string;

  /**
   * Registrant's Zip/Postal Code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip?: string;
}

export class MeetingRegistrantCreateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: MeetingRegistrantCreateApplicationJSON;

  /**
   * The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
   *
   * @remarks
   *
   * While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meetingId",
  })
  meetingId: number;

  /**
   * Occurrence IDs. You can find these with the meeting get API. Multiple values separated by comma.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=occurrence_ids",
  })
  occurrenceIds?: string;
}

/**
 * **HTTP Status Code:** `201`<br>
 *
 * @remarks
 * Registration created.
 */
export class MeetingRegistrantCreate201ApplicationXML extends SpeakeasyBase {
  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  id?: number;

  /**
   * Unique URL for this registrant to join the meeting. This URL should only be shared with the registrant for whom the API request was made.
   *
   * @remarks
   * If the meeting was [created](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate) with manual approval type (`approval_type`: 1), the join URL will not be returned in the response.
   */
  @SpeakeasyMetadata()
  joinUrl?: string;

  /**
   * Unique identifier of the registrant.
   */
  @SpeakeasyMetadata()
  registrantId?: string;

  /**
   * The start time for the meeting.
   */
  @SpeakeasyMetadata()
  startTime?: string;

  /**
   * Topic of the meeting.
   */
  @SpeakeasyMetadata()
  topic?: string;
}

/**
 * **HTTP Status Code:** `201`<br>
 *
 * @remarks
 * Registration created.
 */
export class MeetingRegistrantCreate201ApplicationJSON extends SpeakeasyBase {
  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Unique URL for this registrant to join the meeting. This URL should only be shared with the registrant for whom the API request was made.
   *
   * @remarks
   * If the meeting was [created](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate) with manual approval type (`approval_type`: 1), the join URL will not be returned in the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "join_url" })
  joinUrl?: string;

  /**
   * Unique identifier of the registrant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registrant_id" })
  registrantId?: string;

  /**
   * The start time for the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  startTime?: string;

  /**
   * Topic of the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic?: string;
}

export class MeetingRegistrantCreateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `201`<br>
   *
   * @remarks
   * Registration created.
   */
  @SpeakeasyMetadata()
  meetingRegistrantCreate201ApplicationJSONObject?: MeetingRegistrantCreate201ApplicationJSON;
}
