// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type WebinarPollsSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type WebinarPollsPathParams struct {
	// The webinar ID in "**long**" format(represented as int64 data type in JSON).
	WebinarID int64 `pathParam:"style=simple,explode=false,name=webinarId"`
}

type WebinarPollsRequest struct {
	PathParams WebinarPollsPathParams
	Security   WebinarPollsSecurity
}

// WebinarPollsPollListPollQuestionsTypeEnum - Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
type WebinarPollsPollListPollQuestionsTypeEnum string

const (
	WebinarPollsPollListPollQuestionsTypeEnumSingle   WebinarPollsPollListPollQuestionsTypeEnum = "single"
	WebinarPollsPollListPollQuestionsTypeEnumMultiple WebinarPollsPollListPollQuestionsTypeEnum = "multiple"
)

func (e *WebinarPollsPollListPollQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "multiple":
		*e = WebinarPollsPollListPollQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarPollsPollListPollQuestionsTypeEnum: %s", s)
	}
}

type WebinarPollsPollListPollQuestions struct {
	// Answers to the questions
	Answers []string `json:"answers,omitempty"`
	// Question to be asked to the attendees.
	Name *string `json:"name,omitempty"`
	// Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
	Type *WebinarPollsPollListPollQuestionsTypeEnum `json:"type,omitempty"`
}

// WebinarPollsPollListPollStatusEnum - Status of Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
type WebinarPollsPollListPollStatusEnum string

const (
	WebinarPollsPollListPollStatusEnumNotstart WebinarPollsPollListPollStatusEnum = "notstart"
	WebinarPollsPollListPollStatusEnumStarted  WebinarPollsPollListPollStatusEnum = "started"
	WebinarPollsPollListPollStatusEnumEnded    WebinarPollsPollListPollStatusEnum = "ended"
	WebinarPollsPollListPollStatusEnumSharing  WebinarPollsPollListPollStatusEnum = "sharing"
)

func (e *WebinarPollsPollListPollStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "notstart":
		fallthrough
	case "started":
		fallthrough
	case "ended":
		fallthrough
	case "sharing":
		*e = WebinarPollsPollListPollStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarPollsPollListPollStatusEnum: %s", s)
	}
}

// WebinarPollsPollListPoll - Poll
type WebinarPollsPollListPoll struct {
	// ID of Poll
	ID *string `json:"id,omitempty"`
	// Array of Polls
	Questions []WebinarPollsPollListPollQuestions `json:"questions,omitempty"`
	// Status of Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
	Status *WebinarPollsPollListPollStatusEnum `json:"status,omitempty"`
	// Title for the poll.
	Title *string `json:"title,omitempty"`
}

// WebinarPollsPollList - Poll List
type WebinarPollsPollList struct {
	// Array of Polls
	Polls []WebinarPollsPollListPoll `json:"polls,omitempty"`
	// The number of all records available across pages
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type WebinarPollsResponse struct {
	Body        []byte
	ContentType string
	// **HTTP Status Code:** `200`<br>
	// List polls of a Webinar  returned
	PollList    *WebinarPollsPollList
	StatusCode  int
	RawResponse *http.Response
}
