/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Transaction - Success
 */
public class Transaction {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Double amount;

    public Transaction withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The amount of the transaction in the user's base currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_in_base_currency")
    public Double amountInBaseCurrency;

    public Transaction withAmountInBaseCurrency(Double amountInBaseCurrency) {
        this.amountInBaseCurrency = amountInBaseCurrency;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public Category category;

    public Transaction withCategory(Category category) {
        this.category = category;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cheque_number")
    public String chequeNumber;

    public Transaction withChequeNumber(String chequeNumber) {
        this.chequeNumber = chequeNumber;
        return this;
    }
    
    /**
     * The closing balance of the account at the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closing_balance")
    public Double closingBalance;

    public Transaction withClosingBalance(Double closingBalance) {
        this.closingBalance = closingBalance;
        return this;
    }
    
    /**
     * When the transaction was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;

    public Transaction withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The date the transaction took place.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    public String date;

    public Transaction withDate(String date) {
        this.date = date;
        return this;
    }
    
    /**
     * The unique identifier of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public Transaction withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Whether the transaction is a transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_transfer")
    public Boolean isTransfer;

    public Transaction withIsTransfer(Boolean isTransfer) {
        this.isTransfer = isTransfer;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public String[] labels;

    public Transaction withLabels(String[] labels) {
        this.labels = labels;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    public String memo;

    public Transaction withMemo(String memo) {
        this.memo = memo;
        return this;
    }
    
    /**
     * Whether the transaction needs to be reviewed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("needs_review")
    public Boolean needsReview;

    public Transaction withNeedsReview(Boolean needsReview) {
        this.needsReview = needsReview;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    public String note;

    public Transaction withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * The payee the transaction was created with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_payee")
    public String originalPayee;

    public Transaction withOriginalPayee(String originalPayee) {
        this.originalPayee = originalPayee;
        return this;
    }
    
    /**
     * The payee/merchant of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payee")
    public String payee;

    public Transaction withPayee(String payee) {
        this.payee = payee;
        return this;
    }
    
    /**
     * The status of the transaction. Pending transactions are temporary and may be superseded later by their posted counterparts, which are permanent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public TransactionStatusEnum status;

    public Transaction withStatus(TransactionStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_account")
    public TransactionAccount transactionAccount;

    public Transaction withTransactionAccount(TransactionAccount transactionAccount) {
        this.transactionAccount = transactionAccount;
        return this;
    }
    
    /**
     * Whether the transaction is a debit or a credit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public TransactionTypeEnum type;

    public Transaction withType(TransactionTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * When the transaction was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;

    public Transaction withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Where the transaction came from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upload_source")
    public String uploadSource;

    public Transaction withUploadSource(String uploadSource) {
        this.uploadSource = uploadSource;
        return this;
    }
    
    public Transaction(){}
}
