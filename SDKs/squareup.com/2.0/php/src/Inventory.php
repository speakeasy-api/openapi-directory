<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Inventory 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * BatchChangeInventory
     * 
     * Applies adjustments and counts to the provided item quantities.
     * 
     * On success: returns the current calculated counts for all objects
     * referenced in the request.
     * On failure: returns a list of related errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchChangeInventoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BatchChangeInventorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BatchChangeInventoryResponse
     */
	public function batchChangeInventory(
        \OpenAPI\OpenAPI\Models\Shared\BatchChangeInventoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BatchChangeInventorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BatchChangeInventoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/changes/batch-create');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BatchChangeInventoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchChangeInventoryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchChangeInventoryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * BatchRetrieveInventoryChanges
     * 
     * Returns historical physical counts and adjustments based on the
     * provided filter criteria.
     * 
     * Results are paginated and sorted in ascending order according their
     * `occurred_at` timestamp (oldest first).
     * 
     * BatchRetrieveInventoryChanges is a catch-all query endpoint for queries
     * that cannot be handled by other, simpler endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryChangesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveInventoryChangesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveInventoryChangesResponse
     */
	public function batchRetrieveInventoryChanges(
        \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryChangesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveInventoryChangesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveInventoryChangesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/changes/batch-retrieve');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveInventoryChangesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchRetrieveInventoryChangesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryChangesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * BatchRetrieveInventoryCounts
     * 
     * Returns current counts for the provided
     * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s at the requested
     * [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.
     * 
     * Results are paginated and sorted in descending order according to their
     * `calculated_at` timestamp (newest first).
     * 
     * When `updated_after` is specified, only counts that have changed since that
     * time (based on the server timestamp for the most recent change) are
     * returned. This allows clients to perform a "sync" operation, for example
     * in response to receiving a Webhook notification.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryCountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveInventoryCountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveInventoryCountsResponse
     */
	public function batchRetrieveInventoryCounts(
        \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryCountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveInventoryCountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveInventoryCountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/counts/batch-retrieve');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BatchRetrieveInventoryCountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchRetrieveInventoryCountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryCountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeprecatedBatchChangeInventory
     * 
     * Deprecated version of [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory) after the endpoint URL 
     * is updated to conform to the standard convention.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchChangeInventoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchChangeInventorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchChangeInventoryResponse
     */
	public function deprecatedBatchChangeInventory(
        \OpenAPI\OpenAPI\Models\Shared\BatchChangeInventoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchChangeInventorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchChangeInventoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/batch-change');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchChangeInventoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchChangeInventoryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchChangeInventoryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeprecatedBatchRetrieveInventoryChanges
     * 
     * Deprecated version of [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes) after the endpoint URL 
     * is updated to conform to the standard convention.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryChangesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchRetrieveInventoryChangesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchRetrieveInventoryChangesResponse
     */
	public function deprecatedBatchRetrieveInventoryChanges(
        \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryChangesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchRetrieveInventoryChangesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchRetrieveInventoryChangesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/batch-retrieve-changes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchRetrieveInventoryChangesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchRetrieveInventoryChangesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryChangesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeprecatedBatchRetrieveInventoryCounts
     * 
     * Deprecated version of [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts) after the endpoint URL 
     * is updated to conform to the standard convention.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryCountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchRetrieveInventoryCountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchRetrieveInventoryCountsResponse
     */
	public function deprecatedBatchRetrieveInventoryCounts(
        \OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryCountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchRetrieveInventoryCountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchRetrieveInventoryCountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/batch-retrieve-counts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeprecatedBatchRetrieveInventoryCountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchRetrieveInventoryCountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchRetrieveInventoryCountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeprecatedRetrieveInventoryAdjustment
     * 
     * Deprecated version of [RetrieveInventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-adjustment) after the endpoint URL 
     * is updated to conform to the standard convention.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryAdjustmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryAdjustmentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryAdjustmentResponse
     */
	public function deprecatedRetrieveInventoryAdjustment(
        \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryAdjustmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryAdjustmentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryAdjustmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/adjustment/{adjustment_id}', \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryAdjustmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryAdjustmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveInventoryAdjustmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveInventoryAdjustmentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeprecatedRetrieveInventoryPhysicalCount
     * 
     * Deprecated version of [RetrieveInventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-physical-count) after the endpoint URL 
     * is updated to conform to the standard convention.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryPhysicalCountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryPhysicalCountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryPhysicalCountResponse
     */
	public function deprecatedRetrieveInventoryPhysicalCount(
        \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryPhysicalCountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryPhysicalCountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryPhysicalCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/physical-count/{physical_count_id}', \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryPhysicalCountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeprecatedRetrieveInventoryPhysicalCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveInventoryPhysicalCountResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveInventoryPhysicalCountResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveInventoryAdjustment
     * 
     * Returns the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) object
     * with the provided `adjustment_id`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryAdjustmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryAdjustmentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryAdjustmentResponse
     */
	public function retrieveInventoryAdjustment(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryAdjustmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryAdjustmentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryAdjustmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/adjustments/{adjustment_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryAdjustmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryAdjustmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveInventoryAdjustmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveInventoryAdjustmentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveInventoryChanges
     * 
     * Returns a set of physical counts and inventory adjustments for the
     * provided [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at the requested
     * [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s. 
     * 
     * You can achieve the same result by calling [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes) 
     * and having the `catalog_object_ids` list contain a single element of the `CatalogObject` ID.
     * 
     * Results are paginated and sorted in descending order according to their
     * `occurred_at` timestamp (newest first).
     * 
     * There are no limits on how far back the caller can page. This endpoint can be 
     * used to display recent changes for a specific item. For more
     * sophisticated queries, use a batch endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryChangesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryChangesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryChangesResponse
     */
	public function retrieveInventoryChanges(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryChangesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryChangesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryChangesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/{catalog_object_id}/changes', \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryChangesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryChangesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryChangesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveInventoryChangesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveInventoryChangesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveInventoryCount
     * 
     * Retrieves the current calculated stock count for a given
     * [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at a given set of
     * [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s. Responses are paginated and unsorted.
     * For more sophisticated queries, use a batch endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryCountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryCountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryCountResponse
     */
	public function retrieveInventoryCount(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryCountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryCountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/{catalog_object_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryCountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryCountRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveInventoryCountResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveInventoryCountResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveInventoryPhysicalCount
     * 
     * Returns the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount)
     * object with the provided `physical_count_id`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryPhysicalCountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryPhysicalCountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryPhysicalCountResponse
     */
	public function retrieveInventoryPhysicalCount(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryPhysicalCountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryPhysicalCountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryPhysicalCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/physical-counts/{physical_count_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryPhysicalCountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryPhysicalCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveInventoryPhysicalCountResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveInventoryPhysicalCountResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveInventoryTransfer
     * 
     * Returns the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) object
     * with the provided `transfer_id`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryTransferRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryTransferSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryTransferResponse
     */
	public function retrieveInventoryTransfer(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryTransferRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryTransferSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryTransferResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/inventory/transfers/{transfer_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryTransferRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveInventoryTransferResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveInventoryTransferResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveInventoryTransferResponse', 'json');
            }
        }

        return $response;
    }
}