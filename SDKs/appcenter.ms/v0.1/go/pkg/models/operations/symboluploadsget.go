// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type SymbolUploadsGetSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type SymbolUploadsGetRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the symbol upload
	SymbolUploadID string `pathParam:"style=simple,explode=false,name=symbol_upload_id"`
}

// SymbolUploadsGet500ApplicationJSON - Internal error
type SymbolUploadsGet500ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolUploadsGet404ApplicationJSON - Not found
type SymbolUploadsGet404ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolUploadsGet403ApplicationJSON - Unauthorized
type SymbolUploadsGet403ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolUploadsGet200ApplicationJSONOriginEnum - The origin of the symbol upload
type SymbolUploadsGet200ApplicationJSONOriginEnum string

const (
	SymbolUploadsGet200ApplicationJSONOriginEnumUser   SymbolUploadsGet200ApplicationJSONOriginEnum = "User"
	SymbolUploadsGet200ApplicationJSONOriginEnumSystem SymbolUploadsGet200ApplicationJSONOriginEnum = "System"
)

func (e SymbolUploadsGet200ApplicationJSONOriginEnum) ToPointer() *SymbolUploadsGet200ApplicationJSONOriginEnum {
	return &e
}

func (e *SymbolUploadsGet200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "System":
		*e = SymbolUploadsGet200ApplicationJSONOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsGet200ApplicationJSONOriginEnum: %v", v)
	}
}

// SymbolUploadsGet200ApplicationJSONStatusEnum - The current status for the symbol upload
type SymbolUploadsGet200ApplicationJSONStatusEnum string

const (
	SymbolUploadsGet200ApplicationJSONStatusEnumCreated    SymbolUploadsGet200ApplicationJSONStatusEnum = "created"
	SymbolUploadsGet200ApplicationJSONStatusEnumCommitted  SymbolUploadsGet200ApplicationJSONStatusEnum = "committed"
	SymbolUploadsGet200ApplicationJSONStatusEnumAborted    SymbolUploadsGet200ApplicationJSONStatusEnum = "aborted"
	SymbolUploadsGet200ApplicationJSONStatusEnumProcessing SymbolUploadsGet200ApplicationJSONStatusEnum = "processing"
	SymbolUploadsGet200ApplicationJSONStatusEnumIndexed    SymbolUploadsGet200ApplicationJSONStatusEnum = "indexed"
	SymbolUploadsGet200ApplicationJSONStatusEnumFailed     SymbolUploadsGet200ApplicationJSONStatusEnum = "failed"
)

func (e SymbolUploadsGet200ApplicationJSONStatusEnum) ToPointer() *SymbolUploadsGet200ApplicationJSONStatusEnum {
	return &e
}

func (e *SymbolUploadsGet200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "committed":
		fallthrough
	case "aborted":
		fallthrough
	case "processing":
		fallthrough
	case "indexed":
		fallthrough
	case "failed":
		*e = SymbolUploadsGet200ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsGet200ApplicationJSONStatusEnum: %v", v)
	}
}

// SymbolUploadsGet200ApplicationJSONSymbolTypeEnum - The type of the symbol for the current symbol upload
type SymbolUploadsGet200ApplicationJSONSymbolTypeEnum string

const (
	SymbolUploadsGet200ApplicationJSONSymbolTypeEnumApple           SymbolUploadsGet200ApplicationJSONSymbolTypeEnum = "Apple"
	SymbolUploadsGet200ApplicationJSONSymbolTypeEnumJavaScript      SymbolUploadsGet200ApplicationJSONSymbolTypeEnum = "JavaScript"
	SymbolUploadsGet200ApplicationJSONSymbolTypeEnumBreakpad        SymbolUploadsGet200ApplicationJSONSymbolTypeEnum = "Breakpad"
	SymbolUploadsGet200ApplicationJSONSymbolTypeEnumAndroidProguard SymbolUploadsGet200ApplicationJSONSymbolTypeEnum = "AndroidProguard"
	SymbolUploadsGet200ApplicationJSONSymbolTypeEnumUwp             SymbolUploadsGet200ApplicationJSONSymbolTypeEnum = "UWP"
)

func (e SymbolUploadsGet200ApplicationJSONSymbolTypeEnum) ToPointer() *SymbolUploadsGet200ApplicationJSONSymbolTypeEnum {
	return &e
}

func (e *SymbolUploadsGet200ApplicationJSONSymbolTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Apple":
		fallthrough
	case "JavaScript":
		fallthrough
	case "Breakpad":
		fallthrough
	case "AndroidProguard":
		fallthrough
	case "UWP":
		*e = SymbolUploadsGet200ApplicationJSONSymbolTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsGet200ApplicationJSONSymbolTypeEnum: %v", v)
	}
}

type SymbolUploadsGet200ApplicationJSONSymbolsUploaded struct {
	// The platform the symbol is associated with
	Platform string `json:"platform"`
	// The symbol id of the symbol binary
	SymbolID string `json:"symbol_id"`
}

// SymbolUploadsGet200ApplicationJSONUser - User information of the one who intitiated the symbol upload
type SymbolUploadsGet200ApplicationJSONUser struct {
	// The full name of the user. Might for example be first and last name
	DisplayName *string `json:"display_name,omitempty"`
	// The email of the user
	Email *string `json:"email,omitempty"`
}

// SymbolUploadsGet200ApplicationJSON - A single symbol upload entity
type SymbolUploadsGet200ApplicationJSON struct {
	// The application that this symbol upload belongs to
	AppID string `json:"app_id"`
	// The file name for the symbol upload
	FileName *string `json:"file_name,omitempty"`
	// The size of the file in Mebibytes. This may be 0 until the status is indexed
	FileSize *float64 `json:"file_size,omitempty"`
	// The origin of the symbol upload
	Origin *SymbolUploadsGet200ApplicationJSONOriginEnum `json:"origin,omitempty"`
	// The current status for the symbol upload
	Status SymbolUploadsGet200ApplicationJSONStatusEnum `json:"status"`
	// The type of the symbol for the current symbol upload
	SymbolType SymbolUploadsGet200ApplicationJSONSymbolTypeEnum `json:"symbol_type"`
	// The id for the current symbol upload
	SymbolUploadID string `json:"symbol_upload_id"`
	// The symbols found in the upload. This may be empty until the status is indexed
	SymbolsUploaded []SymbolUploadsGet200ApplicationJSONSymbolsUploaded `json:"symbols_uploaded,omitempty"`
	// When the symbol upload was committed, or last transaction time if not committed
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// User information of the one who intitiated the symbol upload
	User *SymbolUploadsGet200ApplicationJSONUser `json:"user,omitempty"`
}

type SymbolUploadsGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	SymbolUploadsGet200ApplicationJSONObject *SymbolUploadsGet200ApplicationJSON
	// Unauthorized
	SymbolUploadsGet403ApplicationJSONObject *SymbolUploadsGet403ApplicationJSON
	// Not found
	SymbolUploadsGet404ApplicationJSONObject *SymbolUploadsGet404ApplicationJSON
	// Internal error
	SymbolUploadsGet500ApplicationJSONObject *SymbolUploadsGet500ApplicationJSON
}
