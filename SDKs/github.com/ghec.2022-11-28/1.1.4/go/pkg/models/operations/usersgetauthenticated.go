// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type UsersGetAuthenticated200ApplicationJSONType string

const (
	UsersGetAuthenticated200ApplicationJSONTypePrivateUser UsersGetAuthenticated200ApplicationJSONType = "private-user"
	UsersGetAuthenticated200ApplicationJSONTypePublicUser  UsersGetAuthenticated200ApplicationJSONType = "public-user"
)

type UsersGetAuthenticated200ApplicationJSON struct {
	PrivateUser *shared.PrivateUser
	PublicUser  *shared.PublicUser

	Type UsersGetAuthenticated200ApplicationJSONType
}

func CreateUsersGetAuthenticated200ApplicationJSONPrivateUser(privateUser shared.PrivateUser) UsersGetAuthenticated200ApplicationJSON {
	typ := UsersGetAuthenticated200ApplicationJSONTypePrivateUser

	return UsersGetAuthenticated200ApplicationJSON{
		PrivateUser: &privateUser,
		Type:        typ,
	}
}

func CreateUsersGetAuthenticated200ApplicationJSONPublicUser(publicUser shared.PublicUser) UsersGetAuthenticated200ApplicationJSON {
	typ := UsersGetAuthenticated200ApplicationJSONTypePublicUser

	return UsersGetAuthenticated200ApplicationJSON{
		PublicUser: &publicUser,
		Type:       typ,
	}
}

func (u *UsersGetAuthenticated200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	privateUser := new(shared.PrivateUser)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&privateUser); err == nil {
		u.PrivateUser = privateUser
		u.Type = UsersGetAuthenticated200ApplicationJSONTypePrivateUser
		return nil
	}

	publicUser := new(shared.PublicUser)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&publicUser); err == nil {
		u.PublicUser = publicUser
		u.Type = UsersGetAuthenticated200ApplicationJSONTypePublicUser
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UsersGetAuthenticated200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PrivateUser != nil {
		return json.Marshal(u.PrivateUser)
	}

	if u.PublicUser != nil {
		return json.Marshal(u.PublicUser)
	}

	return nil, nil
}

type UsersGetAuthenticatedResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Requires authentication
	BasicError *shared.BasicError
	// Response
	UsersGetAuthenticated200ApplicationJSONOneOf *UsersGetAuthenticated200ApplicationJSON
}
