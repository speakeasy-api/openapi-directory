/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetPostAndRelatedDataSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=query;name=api_key",
  })
  apiKey?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2Code?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2Implicit?: string;
}

export class GetPostAndRelatedDataRequest extends SpeakeasyBase {
  /**
   * The ID of the post to retrieve.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=post_id",
  })
  postId: string;
}

/**
 * The post and related data.
 */
export class GetPostAndRelatedData200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "author" })
  @Type(() => shared.User)
  author?: shared.User;

  /**
   * Count of offer posts made by the post author in the last 90 days.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "author_offer_count" })
  authorOfferCount?: number;

  /**
   * Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: shared.Post })
  @Expose({ name: "author_posts" })
  @Type(() => shared.Post)
  authorPosts?: shared.Post[];

  /**
   * Count of wanted posts made by the post author in the last 90 days.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "author_wanted_count" })
  authorWantedCount?: number;

  /**
   * Whether or not the current user has bookmarked this post.  Will be null for api key requests and for the current users' posts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookmarked" })
  bookmarked?: boolean;

  /**
   * Feedback the current user has left on the post author.
   */
  @SpeakeasyMetadata({ elemType: shared.Feedback })
  @Expose({ name: "feedback" })
  @Type(() => shared.Feedback)
  feedback?: shared.Feedback[];

  /**
   * The groups the post is published on.
   */
  @SpeakeasyMetadata({ elemType: shared.Group })
  @Expose({ name: "groups" })
  @Type(() => shared.Group)
  groups?: shared.Group[];

  /**
   * An offer, wanted, admin, taken or received post.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "post" })
  @Type(() => shared.Post)
  post?: shared.Post;

  /**
   * Whether or not the current user has replied to this post.  Will be null for api key requests and for the current users' posts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replied" })
  replied?: boolean;

  /**
   * Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_can_reply" })
  userCanReply?: boolean;

  /**
   * Whether or not the current user has previously viewed this post.  Will be null for api key requests and for the current users' posts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "viewed" })
  viewed?: boolean;
}

export class GetPostAndRelatedDataResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The post and related data.
   */
  @SpeakeasyMetadata()
  getPostAndRelatedData200ApplicationJSONObject?: GetPostAndRelatedData200ApplicationJSON;
}
