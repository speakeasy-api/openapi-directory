<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Proposals 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a proposal given its id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsGetResponse
     */
	public function adexchangebuyerProposalsGet(
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/proposals/{proposalId}', \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create the given list of proposals
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsInsertResponse
     */
	public function adexchangebuyerProposalsInsert(
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/proposals/insert');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createOrdersRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrdersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateOrdersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the given proposal. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsPatchResponse
     */
	public function adexchangebuyerProposalsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/proposals/{proposalId}/{revisionNumber}/{updateAction}', \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "proposal", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search for proposals using pql query
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSearchResponse
     */
	public function adexchangebuyerProposalsSearch(
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/proposals/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrdersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetOrdersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the given proposal to indicate that setup has been completed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSetupcompleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSetupcompleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSetupcompleteResponse
     */
	public function adexchangebuyerProposalsSetupcomplete(
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSetupcompleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSetupcompleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSetupcompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/proposals/{proposalId}/setupcomplete', \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSetupcompleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSetupcompleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsSetupcompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update the given proposal
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsUpdateResponse
     */
	public function adexchangebuyerProposalsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/proposals/{proposalId}/{revisionNumber}/{updateAction}', \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "proposal", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdexchangebuyerProposalsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Proposal', 'json');
            }
        }

        return $response;
    }
}