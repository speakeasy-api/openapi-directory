"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import batchdocumentinputconfig as shared_batchdocumentinputconfig
from ..shared import batchdocumentoutputconfig as shared_batchdocumentoutputconfig
from ..shared import translatetextglossaryconfig as shared_translatetextglossaryconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchTranslateDocumentRequest:
    r"""The BatchTranslateDocument request."""
    
    customized_attribution: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customizedAttribution'), 'exclude': lambda f: f is None }})
    r"""Optional. This flag is to support user customized attribution. If not provided, the default is `Machine Translated by Google`. Customized attribution should follow rules in https://cloud.google.com/translate/attribution#attribution_and_logos"""  
    enable_shadow_removal_native_pdf: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableShadowRemovalNativePdf'), 'exclude': lambda f: f is None }})
    r"""Optional. If true, use the text removal server to remove the shadow text on background image for native pdf translation. Shadow removal feature can only be enabled when is_translate_native_pdf_only: false && pdf_native_only: false"""  
    format_conversions: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formatConversions'), 'exclude': lambda f: f is None }})
    r"""Optional."""  
    glossaries: Optional[dict[str, shared_translatetextglossaryconfig.TranslateTextGlossaryConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('glossaries'), 'exclude': lambda f: f is None }})
    r"""Optional. Glossaries to be applied. It's keyed by target language code."""  
    input_configs: Optional[list[shared_batchdocumentinputconfig.BatchDocumentInputConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputConfigs'), 'exclude': lambda f: f is None }})
    r"""Required. Input configurations. The total number of files matched should be <= 100. The total content size to translate should be <= 100M Unicode codepoints. The files must use UTF-8 encoding."""  
    models: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('models'), 'exclude': lambda f: f is None }})
    r"""Optional. The models to use for translation. Map's key is target language code. Map's value is the model name. Value can be a built-in general model, or an AutoML Translation model. The value format depends on model type: - AutoML Translation models: `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}` - General (built-in) models: `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`, If the map is empty or a specific model is not requested for a language pair, then default google model (nmt) is used."""  
    output_config: Optional[shared_batchdocumentoutputconfig.BatchDocumentOutputConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputConfig'), 'exclude': lambda f: f is None }})
    r"""Output configuration for BatchTranslateDocument request."""  
    source_language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceLanguageCode'), 'exclude': lambda f: f is None }})
    r"""Required. The BCP-47 language code of the input document if known, for example, \\"en-US\\" or \\"sr-Latn\\". Supported language codes are listed in [Language Support](https://cloud.google.com/translate/docs/languages)."""  
    target_language_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetLanguageCodes'), 'exclude': lambda f: f is None }})
    r"""Required. The BCP-47 language code to use for translation of the input document. Specify up to 10 language codes here."""  
    