"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dockervolumeconfiguration as shared_dockervolumeconfiguration
from ..shared import efsvolumeconfiguration as shared_efsvolumeconfiguration
from ..shared import fsxwindowsfileservervolumeconfiguration as shared_fsxwindowsfileservervolumeconfiguration
from ..shared import hostvolumeproperties as shared_hostvolumeproperties
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Volume:
    r"""A data volume that's used in a task definition. For tasks that use the Amazon Elastic File System (Amazon EFS), specify an <code>efsVolumeConfiguration</code>. For Windows tasks that use Amazon FSx for Windows File Server file system, specify a <code>fsxWindowsFileServerVolumeConfiguration</code>. For tasks that use a Docker volume, specify a <code>DockerVolumeConfiguration</code>. For tasks that use a bind mount host volume, specify a <code>host</code> and optional <code>sourcePath</code>. For more information, see <a href=\\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html\\">Using Data Volumes in Tasks</a>."""
    
    docker_volume_configuration: Optional[shared_dockervolumeconfiguration.DockerVolumeConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockerVolumeConfiguration'), 'exclude': lambda f: f is None }})  
    efs_volume_configuration: Optional[shared_efsvolumeconfiguration.EFSVolumeConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('efsVolumeConfiguration'), 'exclude': lambda f: f is None }})  
    fsx_windows_file_server_volume_configuration: Optional[shared_fsxwindowsfileservervolumeconfiguration.FSxWindowsFileServerVolumeConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fsxWindowsFileServerVolumeConfiguration'), 'exclude': lambda f: f is None }})  
    host: Optional[shared_hostvolumeproperties.HostVolumeProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    