/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Distribute {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Distribute(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Fetch all apple test flight groups
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    @Deprecated
    public org.openapis.openapi.models.operations.AppleMappingTestFlightGroupsResponse appleMappingTestFlightGroups(org.openapis.openapi.models.operations.AppleMappingTestFlightGroupsRequest request, org.openapis.openapi.models.operations.AppleMappingTestFlightGroupsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AppleMappingTestFlightGroupsRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/apple_test_flight_groups", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AppleMappingTestFlightGroupsResponse res = new org.openapis.openapi.models.operations.AppleMappingTestFlightGroupsResponse(contentType, httpRes.statusCode()) {{
            appleMappingTestFlightGroups200ApplicationJSONObjects = null;
            appleMappingTestFlightGroupsDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AppleMappingTestFlightGroups200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AppleMappingTestFlightGroups200ApplicationJSON[].class);
                res.appleMappingTestFlightGroups200ApplicationJSONObjects = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AppleMappingTestFlightGroupsDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AppleMappingTestFlightGroupsDefaultApplicationJSON.class);
                res.appleMappingTestFlightGroupsDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Create a mapping for an existing app in apple store for the specified application.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AppleMappingCreateResponse appleMappingCreate(org.openapis.openapi.models.operations.AppleMappingCreateRequest request, org.openapis.openapi.models.operations.AppleMappingCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AppleMappingCreateRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/apple_mapping", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AppleMappingCreateResponse res = new org.openapis.openapi.models.operations.AppleMappingCreateResponse(contentType, httpRes.statusCode()) {{
            appleMappingCreate201ApplicationJSONObject = null;
            appleMappingCreateDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AppleMappingCreate201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AppleMappingCreate201ApplicationJSON.class);
                res.appleMappingCreate201ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AppleMappingCreateDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AppleMappingCreateDefaultApplicationJSON.class);
                res.appleMappingCreateDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete mapping of apple app to an existing app in apple store.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AppleMappingDeleteResponse appleMappingDelete(org.openapis.openapi.models.operations.AppleMappingDeleteRequest request, org.openapis.openapi.models.operations.AppleMappingDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AppleMappingDeleteRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/apple_mapping", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "string");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AppleMappingDeleteResponse res = new org.openapis.openapi.models.operations.AppleMappingDeleteResponse(contentType, httpRes.statusCode()) {{
            appleMappingDeleteDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AppleMappingDeleteDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AppleMappingDeleteDefaultApplicationJSON.class);
                res.appleMappingDeleteDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get mapping of apple app to an existing app in apple store.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AppleMappingGetResponse appleMappingGet(org.openapis.openapi.models.operations.AppleMappingGetRequest request, org.openapis.openapi.models.operations.AppleMappingGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AppleMappingGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/apple_mapping", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AppleMappingGetResponse res = new org.openapis.openapi.models.operations.AppleMappingGetResponse(contentType, httpRes.statusCode()) {{
            appleMappingGet200ApplicationJSONObject = null;
            appleMappingGetDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AppleMappingGet200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AppleMappingGet200ApplicationJSON.class);
                res.appleMappingGet200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AppleMappingGetDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AppleMappingGetDefaultApplicationJSON.class);
                res.appleMappingGetDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns the device details.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DevicesDeviceDetailsResponse devicesDeviceDetails(org.openapis.openapi.models.operations.DevicesDeviceDetailsRequest request, org.openapis.openapi.models.operations.DevicesDeviceDetailsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DevicesDeviceDetailsRequest.class, baseUrl, "/v0.1/user/devices/{device_udid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DevicesDeviceDetailsResponse res = new org.openapis.openapi.models.operations.DevicesDeviceDetailsResponse(contentType, httpRes.statusCode()) {{
            devicesDeviceDetails200ApplicationJSONObject = null;
            devicesDeviceDetails400ApplicationJSONObject = null;
            devicesDeviceDetails403ApplicationJSONObject = null;
            devicesDeviceDetails404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesDeviceDetails200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesDeviceDetails200ApplicationJSON.class);
                res.devicesDeviceDetails200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesDeviceDetails400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesDeviceDetails400ApplicationJSON.class);
                res.devicesDeviceDetails400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesDeviceDetails403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesDeviceDetails403ApplicationJSON.class);
                res.devicesDeviceDetails403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesDeviceDetails404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesDeviceDetails404ApplicationJSON.class);
                res.devicesDeviceDetails404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns the resign status to the caller
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatusResponse devicesGetReleaseUpdateDevicesStatus(org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatusRequest request, org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatusSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatusRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/update_devices/{resign_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatusRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatusResponse res = new org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatusResponse(contentType, httpRes.statusCode()) {{
            devicesGetReleaseUpdateDevicesStatus200ApplicationJSONObject = null;
            devicesGetReleaseUpdateDevicesStatus400ApplicationJSONObject = null;
            devicesGetReleaseUpdateDevicesStatus404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatus200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatus200ApplicationJSON.class);
                res.devicesGetReleaseUpdateDevicesStatus200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatus400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatus400ApplicationJSON.class);
                res.devicesGetReleaseUpdateDevicesStatus400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatus404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesGetReleaseUpdateDevicesStatus404ApplicationJSON.class);
                res.devicesGetReleaseUpdateDevicesStatus404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns all devices associated with the given distribution group
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DevicesListResponse devicesList(org.openapis.openapi.models.operations.DevicesListRequest request, org.openapis.openapi.models.operations.DevicesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DevicesListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DevicesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DevicesListResponse res = new org.openapis.openapi.models.operations.DevicesListResponse(contentType, httpRes.statusCode()) {{
            devicesList200ApplicationJSONObjects = null;
            devicesList400ApplicationJSONObject = null;
            devicesList404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesList200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesList200ApplicationJSON[].class);
                res.devicesList200ApplicationJSONObjects = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesList400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesList400ApplicationJSON.class);
                res.devicesList400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesList404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesList404ApplicationJSON.class);
                res.devicesList404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns all devices associated with the given distribution group.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DevicesListCsvFormatResponse devicesListCsvFormat(org.openapis.openapi.models.operations.DevicesListCsvFormatRequest request, org.openapis.openapi.models.operations.DevicesListCsvFormatSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DevicesListCsvFormatRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DevicesListCsvFormatRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DevicesListCsvFormatResponse res = new org.openapis.openapi.models.operations.DevicesListCsvFormatResponse(contentType, httpRes.statusCode()) {{
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/csv")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Registers a user for an existing device
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DevicesRegisterUserForDeviceResponse devicesRegisterUserForDevice(org.openapis.openapi.models.operations.DevicesRegisterUserForDeviceRequest request, org.openapis.openapi.models.operations.DevicesRegisterUserForDeviceSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DevicesRegisterUserForDeviceRequest.class, baseUrl, "/v0.1/users/{user_id}/devices/register", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DevicesRegisterUserForDeviceResponse res = new org.openapis.openapi.models.operations.DevicesRegisterUserForDeviceResponse(contentType, httpRes.statusCode()) {{
            devicesRegisterUserForDevice200ApplicationJSONObject = null;
            devicesRegisterUserForDevice404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesRegisterUserForDevice200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesRegisterUserForDevice200ApplicationJSON.class);
                res.devicesRegisterUserForDevice200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesRegisterUserForDevice404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesRegisterUserForDevice404ApplicationJSON.class);
                res.devicesRegisterUserForDevice404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Removes an existing device from a user
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DevicesRemoveUserDeviceResponse devicesRemoveUserDevice(org.openapis.openapi.models.operations.DevicesRemoveUserDeviceRequest request, org.openapis.openapi.models.operations.DevicesRemoveUserDeviceSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DevicesRemoveUserDeviceRequest.class, baseUrl, "/v0.1/user/devices/{device_udid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DevicesRemoveUserDeviceResponse res = new org.openapis.openapi.models.operations.DevicesRemoveUserDeviceResponse(contentType, httpRes.statusCode()) {{
            devicesRemoveUserDevice403ApplicationJSONObject = null;
            devicesRemoveUserDevice404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesRemoveUserDevice403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesRemoveUserDevice403ApplicationJSON.class);
                res.devicesRemoveUserDevice403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesRemoveUserDevice404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesRemoveUserDevice404ApplicationJSON.class);
                res.devicesRemoveUserDevice404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns all devices associated with the given user.
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DevicesUserDevicesListResponse devicesUserDevicesList(org.openapis.openapi.models.operations.DevicesUserDevicesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v0.1/user/devices");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DevicesUserDevicesListResponse res = new org.openapis.openapi.models.operations.DevicesUserDevicesListResponse(contentType, httpRes.statusCode()) {{
            devicesUserDevicesList200ApplicationJSONObjects = null;
            devicesUserDevicesList400ApplicationJSONObject = null;
            devicesUserDevicesList403ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesUserDevicesList200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesUserDevicesList200ApplicationJSON[].class);
                res.devicesUserDevicesList200ApplicationJSONObjects = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesUserDevicesList400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesUserDevicesList400ApplicationJSON.class);
                res.devicesUserDevicesList400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DevicesUserDevicesList403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DevicesUserDevicesList403ApplicationJSON.class);
                res.devicesUserDevicesList403ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Notify download(s) for the provided distribution release(s).
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DistibutionReleasesInstallAnalyticsResponse distibutionReleasesInstallAnalytics(org.openapis.openapi.models.operations.DistibutionReleasesInstallAnalyticsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DistibutionReleasesInstallAnalyticsRequest.class, baseUrl, "/v0.1/public/apps/{owner_name}/{app_name}/install_analytics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DistibutionReleasesInstallAnalyticsResponse res = new org.openapis.openapi.models.operations.DistibutionReleasesInstallAnalyticsResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Return information about the provisioning profile. Only available for iOS.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProvisioningProfileResponse provisioningProfile(org.openapis.openapi.models.operations.ProvisioningProfileRequest request, org.openapis.openapi.models.operations.ProvisioningProfileSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProvisioningProfileRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/provisioning_profile", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProvisioningProfileResponse res = new org.openapis.openapi.models.operations.ProvisioningProfileResponse(contentType, httpRes.statusCode()) {{
            provisioningProfileResponse = null;
            provisioningProfile400ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProvisioningProfileResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProvisioningProfileResponse.class);
                res.provisioningProfileResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ProvisioningProfile400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ProvisioningProfile400ApplicationJSON.class);
                res.provisioningProfile400ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Distributes a release to a group
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesAddDistributionGroupResponse releasesAddDistributionGroup(org.openapis.openapi.models.operations.ReleasesAddDistributionGroupRequest request, org.openapis.openapi.models.operations.ReleasesAddDistributionGroupSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesAddDistributionGroupRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesAddDistributionGroupResponse res = new org.openapis.openapi.models.operations.ReleasesAddDistributionGroupResponse(contentType, httpRes.statusCode()) {{
            releasesAddDistributionGroup201ApplicationJSONObject = null;
            releasesAddDistributionGroup400ApplicationJSONObject = null;
            releasesAddDistributionGroup404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesAddDistributionGroup201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesAddDistributionGroup201ApplicationJSON.class);
                res.releasesAddDistributionGroup201ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesAddDistributionGroup400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesAddDistributionGroup400ApplicationJSON.class);
                res.releasesAddDistributionGroup400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesAddDistributionGroup404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesAddDistributionGroup404ApplicationJSON.class);
                res.releasesAddDistributionGroup404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Distributes a release to a store
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesAddStoreResponse releasesAddStore(org.openapis.openapi.models.operations.ReleasesAddStoreRequest request, org.openapis.openapi.models.operations.ReleasesAddStoreSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesAddStoreRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesAddStoreResponse res = new org.openapis.openapi.models.operations.ReleasesAddStoreResponse(contentType, httpRes.statusCode()) {{
            releasesAddStore201ApplicationJSONObject = null;
            releasesAddStore400ApplicationJSONObject = null;
            releasesAddStore404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesAddStore201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesAddStore201ApplicationJSON.class);
                res.releasesAddStore201ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesAddStore400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesAddStore400ApplicationJSON.class);
                res.releasesAddStore400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesAddStore404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesAddStore404ApplicationJSON.class);
                res.releasesAddStore404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Distributes a release to a user
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesAddTestersResponse releasesAddTesters(org.openapis.openapi.models.operations.ReleasesAddTestersRequest request, org.openapis.openapi.models.operations.ReleasesAddTestersSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesAddTestersRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesAddTestersResponse res = new org.openapis.openapi.models.operations.ReleasesAddTestersResponse(contentType, httpRes.statusCode()) {{
            releasesAddTesters201ApplicationJSONObject = null;
            releasesAddTesters400ApplicationJSONObject = null;
            releasesAddTesters404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesAddTesters201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesAddTesters201ApplicationJSON.class);
                res.releasesAddTesters201ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesAddTesters400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesAddTesters400ApplicationJSON.class);
                res.releasesAddTesters400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesAddTesters404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesAddTesters404ApplicationJSON.class);
                res.releasesAddTesters404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return detailed information about releases avaiable to a tester.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    @Deprecated
    public org.openapis.openapi.models.operations.ReleasesAvailableToTesterResponse releasesAvailableToTester(org.openapis.openapi.models.operations.ReleasesAvailableToTesterRequest request, org.openapis.openapi.models.operations.ReleasesAvailableToTesterSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesAvailableToTesterRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/filter_by_tester", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ReleasesAvailableToTesterRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesAvailableToTesterResponse res = new org.openapis.openapi.models.operations.ReleasesAvailableToTesterResponse(contentType, httpRes.statusCode()) {{
            releasesAvailableToTester200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesAvailableToTester200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesAvailableToTester200ApplicationJSON[].class);
                res.releasesAvailableToTester200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Initiate a new release upload. This API is part of multi-step upload process.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesCreateReleaseUploadResponse releasesCreateReleaseUpload(org.openapis.openapi.models.operations.ReleasesCreateReleaseUploadRequest request, org.openapis.openapi.models.operations.ReleasesCreateReleaseUploadSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesCreateReleaseUploadRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/uploads/releases", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesCreateReleaseUploadResponse res = new org.openapis.openapi.models.operations.ReleasesCreateReleaseUploadResponse(contentType, httpRes.statusCode()) {{
            releasesCreateReleaseUpload201ApplicationJSONObject = null;
            releasesCreateReleaseUpload400ApplicationJSONObject = null;
            releasesCreateReleaseUpload404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesCreateReleaseUpload201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesCreateReleaseUpload201ApplicationJSON.class);
                res.releasesCreateReleaseUpload201ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesCreateReleaseUpload400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesCreateReleaseUpload400ApplicationJSON.class);
                res.releasesCreateReleaseUpload400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesCreateReleaseUpload404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesCreateReleaseUpload404ApplicationJSON.class);
                res.releasesCreateReleaseUpload404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Deletes a release.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesDeleteResponse releasesDelete(org.openapis.openapi.models.operations.ReleasesDeleteRequest request, org.openapis.openapi.models.operations.ReleasesDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesDeleteRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesDeleteResponse res = new org.openapis.openapi.models.operations.ReleasesDeleteResponse(contentType, httpRes.statusCode()) {{
            releasesDelete404ApplicationJSONObject = null;
            releasesDelete500ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesDelete404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesDelete404ApplicationJSON.class);
                res.releasesDelete404ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesDelete500ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesDelete500ApplicationJSON.class);
                res.releasesDelete500ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete the given distribution group from the release
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesDeleteDistributionGroupResponse releasesDeleteDistributionGroup(org.openapis.openapi.models.operations.ReleasesDeleteDistributionGroupRequest request, org.openapis.openapi.models.operations.ReleasesDeleteDistributionGroupSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesDeleteDistributionGroupRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesDeleteDistributionGroupResponse res = new org.openapis.openapi.models.operations.ReleasesDeleteDistributionGroupResponse(contentType, httpRes.statusCode()) {{
            releasesDeleteDistributionGroup404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesDeleteDistributionGroup404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesDeleteDistributionGroup404ApplicationJSON.class);
                res.releasesDeleteDistributionGroup404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete the given distribution store from the release
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesDeleteDistributionStoreResponse releasesDeleteDistributionStore(org.openapis.openapi.models.operations.ReleasesDeleteDistributionStoreRequest request, org.openapis.openapi.models.operations.ReleasesDeleteDistributionStoreSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesDeleteDistributionStoreRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/stores/{store_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesDeleteDistributionStoreResponse res = new org.openapis.openapi.models.operations.ReleasesDeleteDistributionStoreResponse(contentType, httpRes.statusCode()) {{
            releasesDeleteDistributionStore404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesDeleteDistributionStore404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesDeleteDistributionStore404ApplicationJSON.class);
                res.releasesDeleteDistributionStore404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete the given tester from the release
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesDeleteDistributionTesterResponse releasesDeleteDistributionTester(org.openapis.openapi.models.operations.ReleasesDeleteDistributionTesterRequest request, org.openapis.openapi.models.operations.ReleasesDeleteDistributionTesterSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesDeleteDistributionTesterRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesDeleteDistributionTesterResponse res = new org.openapis.openapi.models.operations.ReleasesDeleteDistributionTesterResponse(contentType, httpRes.statusCode()) {{
            releasesDeleteDistributionTester404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesDeleteDistributionTester404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesDeleteDistributionTester404ApplicationJSON.class);
                res.releasesDeleteDistributionTester404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete the given tester from the all releases
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesDeleteTesterFromDestinationsResponse releasesDeleteTesterFromDestinations(org.openapis.openapi.models.operations.ReleasesDeleteTesterFromDestinationsRequest request, org.openapis.openapi.models.operations.ReleasesDeleteTesterFromDestinationsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesDeleteTesterFromDestinationsRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/testers/{tester_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesDeleteTesterFromDestinationsResponse res = new org.openapis.openapi.models.operations.ReleasesDeleteTesterFromDestinationsResponse(contentType, httpRes.statusCode()) {{
            releasesDeleteTesterFromDestinations404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesDeleteTesterFromDestinations404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesDeleteTesterFromDestinations404ApplicationJSON.class);
                res.releasesDeleteTesterFromDestinations404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Deletes a release with id 'release_id' in a given distribution group.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesDeleteWithDistributionGroupIdResponse releasesDeleteWithDistributionGroupId(org.openapis.openapi.models.operations.ReleasesDeleteWithDistributionGroupIdRequest request, org.openapis.openapi.models.operations.ReleasesDeleteWithDistributionGroupIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesDeleteWithDistributionGroupIdRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesDeleteWithDistributionGroupIdResponse res = new org.openapis.openapi.models.operations.ReleasesDeleteWithDistributionGroupIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Returns the manifest.plist in XML format for installing the release on a device. Only available for iOS.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesGetIosManifestResponse releasesGetIosManifest(org.openapis.openapi.models.operations.ReleasesGetIosManifestRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesGetIosManifestRequest.class, baseUrl, "/v0.1/public/apps/{app_id}/releases/{release_id}/ios_manifest", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ReleasesGetIosManifestRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesGetIosManifestResponse res = new org.openapis.openapi.models.operations.ReleasesGetIosManifestResponse(contentType, httpRes.statusCode()) {{
            releasesGetIosManifest400ApplicationJSONObject = null;
            releasesGetIosManifest403ApplicationJSONObject = null;
            releasesGetIosManifest404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetIosManifest400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetIosManifest400ApplicationJSON.class);
                res.releasesGetIosManifest400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetIosManifest403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetIosManifest403ApplicationJSON.class);
                res.releasesGetIosManifest403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetIosManifest404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetIosManifest404ApplicationJSON.class);
                res.releasesGetIosManifest404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return detailed information about a distributed release in a given distribution group.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroupResponse releasesGetLatestByDistributionGroup(org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroupRequest request, org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroupSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroupRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases/{release_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroupRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroupResponse res = new org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroupResponse(contentType, httpRes.statusCode()) {{
            releasesGetLatestByDistributionGroup200ApplicationJSONObject = null;
            releasesGetLatestByDistributionGroup404ApplicationJSONObject = null;
            releasesGetLatestByDistributionGroup501ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroup200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroup200ApplicationJSON.class);
                res.releasesGetLatestByDistributionGroup200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroup404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroup404ApplicationJSON.class);
                res.releasesGetLatestByDistributionGroup404ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 501) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroup501ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestByDistributionGroup501ApplicationJSON.class);
                res.releasesGetLatestByDistributionGroup501ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * If 'latest' is not specified then it will return the specified release if it's enabled. If 'latest' is specified, regardless of whether a release hash is provided, the latest enabled release is returned.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesGetLatestByHashResponse releasesGetLatestByHash(org.openapis.openapi.models.operations.ReleasesGetLatestByHashRequest request, org.openapis.openapi.models.operations.ReleasesGetLatestByHashSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesGetLatestByHashRequest.class, baseUrl, "/v0.1/sdk/apps/{app_secret}/releases/{release_hash}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ReleasesGetLatestByHashRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesGetLatestByHashResponse res = new org.openapis.openapi.models.operations.ReleasesGetLatestByHashResponse(contentType, httpRes.statusCode()) {{
            releasesGetLatestByHash200ApplicationJSONObject = null;
            releasesGetLatestByHash404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestByHash200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestByHash200ApplicationJSON.class);
                res.releasesGetLatestByHash200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestByHash404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestByHash404ApplicationJSON.class);
                res.releasesGetLatestByHash404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get a release with 'latest' for the given public group.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroupResponse releasesGetLatestByPublicDistributionGroup(org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroupRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroupRequest.class, baseUrl, "/v0.1/public/sdk/apps/{app_secret}/distribution_groups/{distribution_group_id}/releases/latest", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroupRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroupResponse res = new org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroupResponse(contentType, httpRes.statusCode()) {{
            releasesGetLatestByPublicDistributionGroup200ApplicationJSONObject = null;
            releasesGetLatestByPublicDistributionGroup403ApplicationJSONObject = null;
            releasesGetLatestByPublicDistributionGroup404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroup200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroup200ApplicationJSON.class);
                res.releasesGetLatestByPublicDistributionGroup200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroup403ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroup403ApplicationJSON.class);
                res.releasesGetLatestByPublicDistributionGroup403ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroup404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestByPublicDistributionGroup404ApplicationJSON.class);
                res.releasesGetLatestByPublicDistributionGroup404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get a release with id `release_id`. If `release_id` is `latest`, return the latest release that was distributed to the current user (from all the distribution groups).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesGetLatestByUserResponse releasesGetLatestByUser(org.openapis.openapi.models.operations.ReleasesGetLatestByUserRequest request, org.openapis.openapi.models.operations.ReleasesGetLatestByUserSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesGetLatestByUserRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ReleasesGetLatestByUserRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesGetLatestByUserResponse res = new org.openapis.openapi.models.operations.ReleasesGetLatestByUserResponse(contentType, httpRes.statusCode()) {{
            releasesGetLatestByUser200ApplicationJSONObject = null;
            releasesGetLatestByUser400ApplicationJSONObject = null;
            releasesGetLatestByUser404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestByUser200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestByUser200ApplicationJSON.class);
                res.releasesGetLatestByUser200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestByUser400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestByUser400ApplicationJSON.class);
                res.releasesGetLatestByUser400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestByUser404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestByUser404ApplicationJSON.class);
                res.releasesGetLatestByUser404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get the latest release distributed to a private group the given user is a member of for the given app.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesGetLatestPrivateReleaseResponse releasesGetLatestPrivateRelease(org.openapis.openapi.models.operations.ReleasesGetLatestPrivateReleaseRequest request, org.openapis.openapi.models.operations.ReleasesGetLatestPrivateReleaseSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesGetLatestPrivateReleaseRequest.class, baseUrl, "/v0.1/sdk/apps/{app_secret}/releases/private/latest", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ReleasesGetLatestPrivateReleaseRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesGetLatestPrivateReleaseResponse res = new org.openapis.openapi.models.operations.ReleasesGetLatestPrivateReleaseResponse(contentType, httpRes.statusCode()) {{
            releasesGetLatestPrivateRelease200ApplicationJSONObject = null;
            releasesGetLatestPrivateRelease404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestPrivateRelease200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestPrivateRelease200ApplicationJSON.class);
                res.releasesGetLatestPrivateRelease200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestPrivateRelease404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestPrivateRelease404ApplicationJSON.class);
                res.releasesGetLatestPrivateRelease404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get the latest public release for the given app.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    @Deprecated
    public org.openapis.openapi.models.operations.ReleasesGetLatestPublicReleaseResponse releasesGetLatestPublicRelease(org.openapis.openapi.models.operations.ReleasesGetLatestPublicReleaseRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesGetLatestPublicReleaseRequest.class, baseUrl, "/v0.1/public/sdk/apps/{app_secret}/releases/latest", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesGetLatestPublicReleaseResponse res = new org.openapis.openapi.models.operations.ReleasesGetLatestPublicReleaseResponse(contentType, httpRes.statusCode()) {{
            releasesGetLatestPublicRelease200ApplicationJSONObject = null;
            releasesGetLatestPublicRelease404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestPublicRelease200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestPublicRelease200ApplicationJSON.class);
                res.releasesGetLatestPublicRelease200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetLatestPublicRelease404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetLatestPublicRelease404ApplicationJSON.class);
                res.releasesGetLatestPublicRelease404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all public distribution groups that a given release has been distributed to
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesGetPublicGroupsForReleaseByHashResponse releasesGetPublicGroupsForReleaseByHash(org.openapis.openapi.models.operations.ReleasesGetPublicGroupsForReleaseByHashRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesGetPublicGroupsForReleaseByHashRequest.class, baseUrl, "/v0.1/public/sdk/apps/{app_secret}/releases/{release_hash}/public_distribution_groups", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesGetPublicGroupsForReleaseByHashResponse res = new org.openapis.openapi.models.operations.ReleasesGetPublicGroupsForReleaseByHashResponse(contentType, httpRes.statusCode()) {{
            releasesGetPublicGroupsForReleaseByHash200ApplicationJSONObjects = null;
            releasesGetPublicGroupsForReleaseByHash404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetPublicGroupsForReleaseByHash200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetPublicGroupsForReleaseByHash200ApplicationJSON[].class);
                res.releasesGetPublicGroupsForReleaseByHash200ApplicationJSONObjects = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSON.class);
                res.releasesGetPublicGroupsForReleaseByHash404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get the current status of the release upload.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatusResponse releasesGetReleaseUploadStatus(org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatusRequest request, org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatusSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatusRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatusResponse res = new org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatusResponse(contentType, httpRes.statusCode()) {{
            releasesGetReleaseUploadStatus200ApplicationJSONObject = null;
            releasesGetReleaseUploadStatus400ApplicationJSONObject = null;
            releasesGetReleaseUploadStatus404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatus200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatus200ApplicationJSON.class);
                res.releasesGetReleaseUploadStatus200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatus400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatus400ApplicationJSON.class);
                res.releasesGetReleaseUploadStatus400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatus404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetReleaseUploadStatus404ApplicationJSON.class);
                res.releasesGetReleaseUploadStatus404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gets the sparkle feed of the releases that are distributed to all the public distribution groups.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesGetSparkleFeedResponse releasesGetSparkleFeed(org.openapis.openapi.models.operations.ReleasesGetSparkleFeedRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesGetSparkleFeedRequest.class, baseUrl, "/v0.1/public/sparkle/apps/{app_secret}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesGetSparkleFeedResponse res = new org.openapis.openapi.models.operations.ReleasesGetSparkleFeedResponse(contentType, httpRes.statusCode()) {{
            releasesGetSparkleFeedDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesGetSparkleFeedDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesGetSparkleFeedDefaultApplicationJSON.class);
                res.releasesGetSparkleFeedDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return basic information about releases.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesListResponse releasesList(org.openapis.openapi.models.operations.ReleasesListRequest request, org.openapis.openapi.models.operations.ReleasesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ReleasesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesListResponse res = new org.openapis.openapi.models.operations.ReleasesListResponse(contentType, httpRes.statusCode()) {{
            releasesList200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesList200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesList200ApplicationJSON[].class);
                res.releasesList200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return basic information about distributed releases in a given distribution group.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesListByDistributionGroupResponse releasesListByDistributionGroup(org.openapis.openapi.models.operations.ReleasesListByDistributionGroupRequest request, org.openapis.openapi.models.operations.ReleasesListByDistributionGroupSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesListByDistributionGroupRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/releases", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesListByDistributionGroupResponse res = new org.openapis.openapi.models.operations.ReleasesListByDistributionGroupResponse(contentType, httpRes.statusCode()) {{
            releasesListByDistributionGroup200ApplicationJSONObjects = null;
            releasesListByDistributionGroup404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesListByDistributionGroup200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesListByDistributionGroup200ApplicationJSON[].class);
                res.releasesListByDistributionGroup200ApplicationJSONObjects = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesListByDistributionGroup404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesListByDistributionGroup404ApplicationJSON.class);
                res.releasesListByDistributionGroup404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get the latest release from every distribution group associated with an application.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesListLatestResponse releasesListLatest(org.openapis.openapi.models.operations.ReleasesListLatestRequest request, org.openapis.openapi.models.operations.ReleasesListLatestSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesListLatestRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/recent_releases", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesListLatestResponse res = new org.openapis.openapi.models.operations.ReleasesListLatestResponse(contentType, httpRes.statusCode()) {{
            releasesListLatest200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesListLatest200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesListLatest200ApplicationJSON[].class);
                res.releasesListLatest200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Update details about the specified distribution group associated with the release
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesPutDistributionGroupResponse releasesPutDistributionGroup(org.openapis.openapi.models.operations.ReleasesPutDistributionGroupRequest request, org.openapis.openapi.models.operations.ReleasesPutDistributionGroupSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesPutDistributionGroupRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/groups/{group_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesPutDistributionGroupResponse res = new org.openapis.openapi.models.operations.ReleasesPutDistributionGroupResponse(contentType, httpRes.statusCode()) {{
            releasesPutDistributionGroup404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesPutDistributionGroup404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesPutDistributionGroup404ApplicationJSON.class);
                res.releasesPutDistributionGroup404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update details about the specified tester associated with the release
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesPutDistributionTesterResponse releasesPutDistributionTester(org.openapis.openapi.models.operations.ReleasesPutDistributionTesterRequest request, org.openapis.openapi.models.operations.ReleasesPutDistributionTesterSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesPutDistributionTesterRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}/testers/{tester_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesPutDistributionTesterResponse res = new org.openapis.openapi.models.operations.ReleasesPutDistributionTesterResponse(contentType, httpRes.statusCode()) {{
            releasesPutDistributionTester404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesPutDistributionTester404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesPutDistributionTester404ApplicationJSON.class);
                res.releasesPutDistributionTester404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Updates a release.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesUpdateResponse releasesUpdate(org.openapis.openapi.models.operations.ReleasesUpdateRequest request, org.openapis.openapi.models.operations.ReleasesUpdateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesUpdateRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "raw");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesUpdateResponse res = new org.openapis.openapi.models.operations.ReleasesUpdateResponse(contentType, httpRes.statusCode()) {{
            releasesUpdate200ApplicationJSONObject = null;
            releasesUpdate400ApplicationJSONObject = null;
            releasesUpdate404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesUpdate200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesUpdate200ApplicationJSON.class);
                res.releasesUpdate200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesUpdate400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesUpdate400ApplicationJSON.class);
                res.releasesUpdate400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesUpdate404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesUpdate404ApplicationJSON.class);
                res.releasesUpdate404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update details of a release.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesUpdateDetailsResponse releasesUpdateDetails(org.openapis.openapi.models.operations.ReleasesUpdateDetailsRequest request, org.openapis.openapi.models.operations.ReleasesUpdateDetailsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesUpdateDetailsRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/releases/{release_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesUpdateDetailsResponse res = new org.openapis.openapi.models.operations.ReleasesUpdateDetailsResponse(contentType, httpRes.statusCode()) {{
            releasesUpdateDetails200ApplicationJSONObject = null;
            releasesUpdateDetails400ApplicationJSONObject = null;
            releasesUpdateDetails404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesUpdateDetails200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesUpdateDetails200ApplicationJSON.class);
                res.releasesUpdateDetails200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesUpdateDetails400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesUpdateDetails400ApplicationJSON.class);
                res.releasesUpdateDetails400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesUpdateDetails404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesUpdateDetails404ApplicationJSON.class);
                res.releasesUpdateDetails404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the current status of the release upload.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatusResponse releasesUpdateReleaseUploadStatus(org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatusRequest request, org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatusSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatusRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/uploads/releases/{upload_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatusRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatusResponse res = new org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatusResponse(contentType, httpRes.statusCode()) {{
            releasesUpdateReleaseUploadStatus200ApplicationJSONObject = null;
            releasesUpdateReleaseUploadStatus400ApplicationJSONObject = null;
            releasesUpdateReleaseUploadStatus404ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatus200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatus200ApplicationJSON.class);
                res.releasesUpdateReleaseUploadStatus200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatus400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatus400ApplicationJSON.class);
                res.releasesUpdateReleaseUploadStatus400ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatus404ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReleasesUpdateReleaseUploadStatus404ApplicationJSON.class);
                res.releasesUpdateReleaseUploadStatus404ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Application specific store service status
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoreNotificationsGetNotificationByAppIdResponse storeNotificationsGetNotificationByAppId(org.openapis.openapi.models.operations.StoreNotificationsGetNotificationByAppIdRequest request, org.openapis.openapi.models.operations.StoreNotificationsGetNotificationByAppIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoreNotificationsGetNotificationByAppIdRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/store_service_status", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoreNotificationsGetNotificationByAppIdResponse res = new org.openapis.openapi.models.operations.StoreNotificationsGetNotificationByAppIdResponse(contentType, httpRes.statusCode()) {{
            storeNotificationsGetNotificationByAppId200ApplicationJSONObject = null;
            storeNotificationsGetNotificationByAppIdDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreNotificationsGetNotificationByAppId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreNotificationsGetNotificationByAppId200ApplicationJSON.class);
                res.storeNotificationsGetNotificationByAppId200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreNotificationsGetNotificationByAppIdDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreNotificationsGetNotificationByAppIdDefaultApplicationJSON.class);
                res.storeNotificationsGetNotificationByAppIdDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns publish logs for a particular release published to a particular store
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoreReleasePublishLogsGetResponse storeReleasePublishLogsGet(org.openapis.openapi.models.operations.StoreReleasePublishLogsGetRequest request, org.openapis.openapi.models.operations.StoreReleasePublishLogsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoreReleasePublishLogsGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_logs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoreReleasePublishLogsGetResponse res = new org.openapis.openapi.models.operations.StoreReleasePublishLogsGetResponse(contentType, httpRes.statusCode()) {{
            storeReleasePublishLogsGetDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasePublishLogsGetDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasePublishLogsGetDefaultApplicationJSON.class);
                res.storeReleasePublishLogsGetDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * delete the release with release Id
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoreReleasesDeleteResponse storeReleasesDelete(org.openapis.openapi.models.operations.StoreReleasesDeleteRequest request, org.openapis.openapi.models.operations.StoreReleasesDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoreReleasesDeleteRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "string");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoreReleasesDeleteResponse res = new org.openapis.openapi.models.operations.StoreReleasesDeleteResponse(contentType, httpRes.statusCode()) {{
            storeReleasesDeleteDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasesDeleteDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasesDeleteDefaultApplicationJSON.class);
                res.storeReleasesDeleteDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return releases published in a store for releaseId and storeId
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoreReleasesGetResponse storeReleasesGet(org.openapis.openapi.models.operations.StoreReleasesGetRequest request, org.openapis.openapi.models.operations.StoreReleasesGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoreReleasesGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoreReleasesGetResponse res = new org.openapis.openapi.models.operations.StoreReleasesGetResponse(contentType, httpRes.statusCode()) {{
            storeReleasesGet200ApplicationJSONObjects = null;
            storeReleasesGetDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasesGet200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasesGet200ApplicationJSON[].class);
                res.storeReleasesGet200ApplicationJSONObjects = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasesGetDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasesGetDefaultApplicationJSON.class);
                res.storeReleasesGetDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns the latest release published in a store.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoreReleasesGetLatestResponse storeReleasesGetLatest(org.openapis.openapi.models.operations.StoreReleasesGetLatestRequest request, org.openapis.openapi.models.operations.StoreReleasesGetLatestSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoreReleasesGetLatestRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/latest_release", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoreReleasesGetLatestResponse res = new org.openapis.openapi.models.operations.StoreReleasesGetLatestResponse(contentType, httpRes.statusCode()) {{
            storeReleasesGetLatest200ApplicationJSONObjects = null;
            storeReleasesGetLatestDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasesGetLatest200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasesGetLatest200ApplicationJSON[].class);
                res.storeReleasesGetLatest200ApplicationJSONObjects = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasesGetLatestDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasesGetLatestDefaultApplicationJSON.class);
                res.storeReleasesGetLatestDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the Error Details of release which failed in publishing.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoreReleasesGetPublishErrorResponse storeReleasesGetPublishError(org.openapis.openapi.models.operations.StoreReleasesGetPublishErrorRequest request, org.openapis.openapi.models.operations.StoreReleasesGetPublishErrorSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoreReleasesGetPublishErrorRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/publish_error_details", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoreReleasesGetPublishErrorResponse res = new org.openapis.openapi.models.operations.StoreReleasesGetPublishErrorResponse(contentType, httpRes.statusCode()) {{
            storeReleasesGetPublishError200ApplicationJSONObject = null;
            storeReleasesGetPublishErrorDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasesGetPublishError200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasesGetPublishError200ApplicationJSON.class);
                res.storeReleasesGetPublishError200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasesGetPublishErrorDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasesGetPublishErrorDefaultApplicationJSON.class);
                res.storeReleasesGetPublishErrorDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the Real time Status publishing of release from store.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoreReleasesGetRealTimeStatusByReleaseIdResponse storeReleasesGetRealTimeStatusByReleaseId(org.openapis.openapi.models.operations.StoreReleasesGetRealTimeStatusByReleaseIdRequest request, org.openapis.openapi.models.operations.StoreReleasesGetRealTimeStatusByReleaseIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoreReleasesGetRealTimeStatusByReleaseIdRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases/{release_id}/realtimestatus", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoreReleasesGetRealTimeStatusByReleaseIdResponse res = new org.openapis.openapi.models.operations.StoreReleasesGetRealTimeStatusByReleaseIdResponse(contentType, httpRes.statusCode()) {{
            storeReleasesGetRealTimeStatusByReleaseId200ApplicationJSONObject = null;
            storeReleasesGetRealTimeStatusByReleaseIdDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasesGetRealTimeStatusByReleaseId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasesGetRealTimeStatusByReleaseId200ApplicationJSON.class);
                res.storeReleasesGetRealTimeStatusByReleaseId200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasesGetRealTimeStatusByReleaseIdDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasesGetRealTimeStatusByReleaseIdDefaultApplicationJSON.class);
                res.storeReleasesGetRealTimeStatusByReleaseIdDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return all releases published  in a store
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoreReleasesListResponse storeReleasesList(org.openapis.openapi.models.operations.StoreReleasesListRequest request, org.openapis.openapi.models.operations.StoreReleasesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoreReleasesListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}/releases", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoreReleasesListResponse res = new org.openapis.openapi.models.operations.StoreReleasesListResponse(contentType, httpRes.statusCode()) {{
            storeReleasesList200ApplicationJSONObjects = null;
            storeReleasesListDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasesList200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasesList200ApplicationJSON[].class);
                res.storeReleasesList200ApplicationJSONObjects = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoreReleasesListDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoreReleasesListDefaultApplicationJSON.class);
                res.storeReleasesListDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Create a new external store for the specified application.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoresCreateResponse storesCreate(org.openapis.openapi.models.operations.StoresCreateRequest request, org.openapis.openapi.models.operations.StoresCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoresCreateRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoresCreateResponse res = new org.openapis.openapi.models.operations.StoresCreateResponse(contentType, httpRes.statusCode()) {{
            storesCreate201ApplicationJSONObject = null;
            storesCreateDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoresCreate201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoresCreate201ApplicationJSON.class);
                res.storesCreate201ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoresCreateDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoresCreateDefaultApplicationJSON.class);
                res.storesCreateDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * delete the store based on specific store name.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoresDeleteResponse storesDelete(org.openapis.openapi.models.operations.StoresDeleteRequest request, org.openapis.openapi.models.operations.StoresDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoresDeleteRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "string");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoresDeleteResponse res = new org.openapis.openapi.models.operations.StoresDeleteResponse(contentType, httpRes.statusCode()) {{
            storesDeleteDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoresDeleteDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoresDeleteDefaultApplicationJSON.class);
                res.storesDeleteDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return the store details for specified store name.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoresGetResponse storesGet(org.openapis.openapi.models.operations.StoresGetRequest request, org.openapis.openapi.models.operations.StoresGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoresGetRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoresGetResponse res = new org.openapis.openapi.models.operations.StoresGetResponse(contentType, httpRes.statusCode()) {{
            storesGet200ApplicationJSONObject = null;
            storesGetDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoresGet200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoresGet200ApplicationJSON.class);
                res.storesGet200ApplicationJSONObject = out;
            }
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoresGetDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoresGetDefaultApplicationJSON.class);
                res.storesGetDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get all the store details from Storage store table for a particular application.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoresListResponse storesList(org.openapis.openapi.models.operations.StoresListRequest request, org.openapis.openapi.models.operations.StoresListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoresListRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoresListResponse res = new org.openapis.openapi.models.operations.StoresListResponse(contentType, httpRes.statusCode()) {{
            storesList200ApplicationJSONObjects = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoresList200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoresList200ApplicationJSON[].class);
                res.storesList200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Update the store.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.StoresPatchResponse storesPatch(org.openapis.openapi.models.operations.StoresPatchRequest request, org.openapis.openapi.models.operations.StoresPatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.StoresPatchRequest.class, baseUrl, "/v0.1/apps/{owner_name}/{app_name}/distribution_stores/{store_name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.StoresPatchResponse res = new org.openapis.openapi.models.operations.StoresPatchResponse(contentType, httpRes.statusCode()) {{
            storesPatchDefaultApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }
        else {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.StoresPatchDefaultApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.StoresPatchDefaultApplicationJSON.class);
                res.storesPatchDefaultApplicationJSONObject = out;
            }
        }

        return res;
    }
}