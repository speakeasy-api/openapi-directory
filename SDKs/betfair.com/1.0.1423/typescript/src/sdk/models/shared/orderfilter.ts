/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

export class OrderFilter extends SpeakeasyBase {
  /**
   * Internal use only & should not be set on your filter (your subscription is already locked to your account). If set subscription will fail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountIds" })
  accountIds?: number[];

  /**
   * Restricts to specified customerStrategyRefs; this will filter orders and StrategyMatchChanges accordingly (Note: overall postition is not filtered)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customerStrategyRefs" })
  customerStrategyRefs?: string[];

  /**
   * Returns overall / net position (See: OrderRunnerChange.mb / OrderRunnerChange.ml). Default=true
   */
  @SpeakeasyMetadata()
  @Expose({ name: "includeOverallPosition" })
  includeOverallPosition?: boolean;

  /**
   * Returns strategy positions (See: OrderRunnerChange.smc=Map<customerStrategyRef, StrategyMatchChange>) - these are sent in delta format as per overall position. Default=false
   */
  @SpeakeasyMetadata()
  @Expose({ name: "partitionMatchedByStrategyRef" })
  partitionMatchedByStrategyRef?: boolean;
}
