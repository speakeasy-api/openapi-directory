// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// StartSuiteRunRequestBodySuiteRunConfiguration - Gets suite run configuration.
type StartSuiteRunRequestBodySuiteRunConfiguration struct {
	ParallelRun      *bool                   `json:"parallelRun,omitempty"`
	PrimaryDevice    *shared.DeviceUnderTest `json:"primaryDevice,omitempty"`
	SelectedTestList []string                `json:"selectedTestList,omitempty"`
}

type StartSuiteRunRequestBody struct {
	// Suite definition version of the test suite.
	SuiteDefinitionVersion *string `json:"suiteDefinitionVersion,omitempty"`
	// Gets suite run configuration.
	SuiteRunConfiguration StartSuiteRunRequestBodySuiteRunConfiguration `json:"suiteRunConfiguration"`
	// The tags to be attached to the suite run.
	Tags map[string]string `json:"tags,omitempty"`
}

type StartSuiteRunRequest struct {
	RequestBody       StartSuiteRunRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// Suite definition ID of the test suite.
	SuiteDefinitionID string `pathParam:"style=simple,explode=false,name=suiteDefinitionId"`
}

type StartSuiteRunResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// Success
	StartSuiteRunResponse *shared.StartSuiteRunResponse
	StatusCode            int
	RawResponse           *http.Response
	// ValidationException
	ValidationException interface{}
}
