"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import segmentdefinition as shared_segmentdefinition
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DynamicSegment:
    r"""Dynamic segment definition for defining the segment within the request. A segment can select users, sessions or both."""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the dynamic segment."""  
    session_segment: Optional[shared_segmentdefinition.SegmentDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionSegment'), 'exclude': lambda f: f is None }})
    r"""SegmentDefinition defines the segment to be a set of SegmentFilters which are combined together with a logical `AND` operation."""  
    user_segment: Optional[shared_segmentdefinition.SegmentDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userSegment'), 'exclude': lambda f: f is None }})
    r"""SegmentDefinition defines the segment to be a set of SegmentFilters which are combined together with a logical `AND` operation."""  
    