"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import nullable_simple_user as shared_nullable_simple_user
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstallationGhes2Permissions:
    
    checks: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checks'), 'exclude': lambda f: f is None }})  
    contents: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents'), 'exclude': lambda f: f is None }})  
    deployments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployments'), 'exclude': lambda f: f is None }})  
    issues: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues'), 'exclude': lambda f: f is None }})  
    metadata: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})  
    organization_administration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_administration'), 'exclude': lambda f: f is None }})  
    pull_requests: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pull_requests'), 'exclude': lambda f: f is None }})  
    statuses: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses'), 'exclude': lambda f: f is None }})  
    
class InstallationGhes2RepositorySelectionEnum(str, Enum):
    r"""Describe whether all repositories have been selected or there's a selection involved"""
    ALL = 'all'
    SELECTED = 'selected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstallationGhes2:
    r"""Installation"""
    
    access_tokens_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_tokens_url') }})  
    account: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account') }})  
    app_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_id') }})  
    app_slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_slug') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    events: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The ID of the installation."""  
    permissions: InstallationGhes2Permissions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions') }})  
    repositories_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositories_url') }})  
    repository_selection: InstallationGhes2RepositorySelectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_selection') }})
    r"""Describe whether all repositories have been selected or there's a selection involved"""  
    single_file_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('single_file_name') }})  
    target_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_id') }})
    r"""The ID of the user or organization this token is being scoped to."""  
    target_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_type') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    contact_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact_email'), 'exclude': lambda f: f is None }})  
    suspended_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    suspended_by: Optional[shared_nullable_simple_user.NullableSimpleUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended_by'), 'exclude': lambda f: f is None }})
    r"""Simple User"""  
    