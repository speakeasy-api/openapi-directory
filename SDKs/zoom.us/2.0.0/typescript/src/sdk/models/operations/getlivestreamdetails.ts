/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class GetLiveStreamDetailsRequest extends SpeakeasyBase {
  /**
   * Unique identifier of the meeting.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meetingId",
  })
  meetingId: string;
}

/**
 * **HTTP Status Code:** `200` **OK**<br>
 *
 * @remarks
 * Live Stream details returned.
 *
 *
 */
export class GetLiveStreamDetails200ApplicationXML extends SpeakeasyBase {
  /**
   * Live streaming page URL. This is the URL using which anyone can view the live stream of the meeting.
   */
  @SpeakeasyMetadata()
  pageUrl?: string;

  /**
   * Stream Key.
   */
  @SpeakeasyMetadata()
  streamKey?: string;

  /**
   * Stream URL.
   */
  @SpeakeasyMetadata()
  streamUrl?: string;
}

/**
 * **HTTP Status Code:** `200` **OK**<br>
 *
 * @remarks
 * Live Stream details returned.
 *
 *
 */
export class GetLiveStreamDetails200ApplicationJSON extends SpeakeasyBase {
  /**
   * Live streaming page URL. This is the URL using which anyone can view the live stream of the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_url" })
  pageUrl?: string;

  /**
   * Stream Key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stream_key" })
  streamKey?: string;

  /**
   * Stream URL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stream_url" })
  streamUrl?: string;
}

export class GetLiveStreamDetailsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200` **OK**<br>
   *
   * @remarks
   * Live Stream details returned.
   *
   *
   */
  @SpeakeasyMetadata()
  getLiveStreamDetails200ApplicationJSONObject?: GetLiveStreamDetails200ApplicationJSON;
}
