"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Geolocation:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def geocode_address(self, request: operations.GeocodeAddressRequest) -> operations.GeocodeAddressResponse:
        r"""Geocode Address
        Geocode an address, partial address or just the name of a place
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/geocode-address'
        
        query_params = utils.get_query_params(operations.GeocodeAddressRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GeocodeAddressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeocodeAddressResponse])
                res.geocode_address_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out

        return res

    def geocode_reverse(self, request: operations.GeocodeReverseRequest) -> operations.GeocodeReverseResponse:
        r"""Geocode Reverse
        Convert a geographic coordinate (latitude and longitude) into a real world address
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/geocode-reverse'
        
        query_params = utils.get_query_params(operations.GeocodeReverseRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GeocodeReverseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeocodeReverseResponse])
                res.geocode_reverse_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out

        return res

    def ip_info(self, request: operations.IPInfoRequest) -> operations.IPInfoResponse:
        r"""IP Info
        Get location information about an IP address and do reverse DNS (PTR) lookups
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ip-info'
        
        query_params = utils.get_query_params(operations.IPInfoRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IPInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IPInfoResponse])
                res.ip_info_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIError])
                res.api_error = out

        return res

    