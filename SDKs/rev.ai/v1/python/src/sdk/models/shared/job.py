"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class JobFailureEnum(str, Enum):
    r"""Simple reason of why the transcription job failed. Check `failure_detail` for specific details and solutions"""
    INTERNAL_PROCESSING = 'internal_processing'
    DOWNLOAD_FAILURE = 'download_failure'
    DURATION_EXCEEDED = 'duration_exceeded'
    DURATION_TOO_SHORT = 'duration_too_short'
    INVALID_MEDIA = 'invalid_media'
    EMPTY_MEDIA = 'empty_media'
    TRANSCRIPTION = 'transcription'
    INSUFFICIENT_BALANCE = 'insufficient_balance'
    INVOICING_LIMIT_EXCEEDED = 'invoicing_limit_exceeded'

class JobLanguageEnum(str, Enum):
    EN = 'en'
    AR = 'ar'
    BG = 'bg'
    CA = 'ca'
    CMN = 'cmn'
    CS = 'cs'
    DA = 'da'
    DE = 'de'
    EL = 'el'
    ES = 'es'
    FI = 'fi'
    FR = 'fr'
    HI = 'hi'
    HR = 'hr'
    HU = 'hu'
    IT = 'it'
    JA = 'ja'
    KO = 'ko'
    LT = 'lt'
    LV = 'lv'
    MS = 'ms'
    NL = 'nl'
    NO = 'no'
    PL = 'pl'
    PT = 'pt'
    RO = 'ro'
    RU = 'ru'
    SK = 'sk'
    SL = 'sl'
    SV = 'sv'
    TR = 'tr'

class JobStatusEnum(str, Enum):
    r"""Current status of the job"""
    IN_PROGRESS = 'in_progress'
    TRANSCRIBED = 'transcribed'
    FAILED = 'failed'

class JobTypeEnum(str, Enum):
    r"""Type of speech recognition performed. Currently the only supported values are 'async' for asynchronous jobs and `stream` for streaming jobs"""
    ASYNC = 'async'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Job:
    r"""Rev.ai Transcription Job
    ***
    Note: properties are not displayed in the returned object if they are null
    """
    
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callback_url'), 'exclude': lambda f: f is None }})  
    completed_on: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed_on'), 'exclude': lambda f: f is None }})
    r"""The date and time the job was completed, whether successfully or failing, in ISO-8601 UTC form"""  
    created_on: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_on'), 'exclude': lambda f: f is None }})
    r"""The date and time the job was created in ISO-8601 UTC form"""  
    custom_vocabulary_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_vocabulary_id'), 'exclude': lambda f: f is None }})  
    delete_after_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete_after_seconds'), 'exclude': lambda f: f is None }})  
    duration_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Duration of the file in seconds. Null if the file could not be retrieved or there was not a valid media file"""  
    failure: Optional[JobFailureEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failure'), 'exclude': lambda f: f is None }})
    r"""Simple reason of why the transcription job failed. Check `failure_detail` for specific details and solutions"""  
    failure_detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failure_detail'), 'exclude': lambda f: f is None }})
    r"""Human-readable reason why the job failed"""  
    filter_profanity: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter_profanity'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of the job"""  
    language: Optional[JobLanguageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})  
    media_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media_url'), 'exclude': lambda f: f is None }})  
    metadata: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the file provided. Present when the file name is available"""  
    remove_disfluencies: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remove_disfluencies'), 'exclude': lambda f: f is None }})  
    skip_diarization: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_diarization'), 'exclude': lambda f: f is None }})  
    skip_punctuation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_punctuation'), 'exclude': lambda f: f is None }})  
    speaker_channels_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speaker_channels_count'), 'exclude': lambda f: f is None }})  
    status: Optional[JobStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Current status of the job"""  
    type: Optional[JobTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of speech recognition performed. Currently the only supported values are 'async' for asynchronous jobs and `stream` for streaming jobs"""  
    