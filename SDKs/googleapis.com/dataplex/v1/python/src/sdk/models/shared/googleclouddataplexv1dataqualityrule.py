"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddataplexv1dataqualityrulerangeexpectation as shared_googleclouddataplexv1dataqualityrulerangeexpectation
from ..shared import googleclouddataplexv1dataqualityruleregexexpectation as shared_googleclouddataplexv1dataqualityruleregexexpectation
from ..shared import googleclouddataplexv1dataqualityrulerowconditionexpectation as shared_googleclouddataplexv1dataqualityrulerowconditionexpectation
from ..shared import googleclouddataplexv1dataqualityrulesetexpectation as shared_googleclouddataplexv1dataqualityrulesetexpectation
from ..shared import googleclouddataplexv1dataqualityrulestatisticrangeexpectation as shared_googleclouddataplexv1dataqualityrulestatisticrangeexpectation
from ..shared import googleclouddataplexv1dataqualityruletableconditionexpectation as shared_googleclouddataplexv1dataqualityruletableconditionexpectation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDataplexV1DataQualityRule:
    r"""A rule captures data quality intent about a data source."""
    
    column: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('column'), 'exclude': lambda f: f is None }})
    r"""Optional. The unnested column which this rule is evaluated against."""  
    dimension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimension'), 'exclude': lambda f: f is None }})
    r"""Required. The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are \\"COMPLETENESS\\", \\"ACCURACY\\", \\"CONSISTENCY\\", \\"VALIDITY\\", \\"UNIQUENESS\\", \\"INTEGRITY\\" """  
    ignore_null: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreNull'), 'exclude': lambda f: f is None }})
    r"""Optional. Rows with null values will automatically fail a rule, unless ignore_null is true. In that case, such null rows are trivially considered passing.Only applicable to ColumnMap rules."""  
    non_null_expectation: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonNullExpectation'), 'exclude': lambda f: f is None }})
    r"""Evaluates whether each column value is null."""  
    range_expectation: Optional[shared_googleclouddataplexv1dataqualityrulerangeexpectation.GoogleCloudDataplexV1DataQualityRuleRangeExpectation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rangeExpectation'), 'exclude': lambda f: f is None }})
    r"""Evaluates whether each column value lies between a specified range."""  
    regex_expectation: Optional[shared_googleclouddataplexv1dataqualityruleregexexpectation.GoogleCloudDataplexV1DataQualityRuleRegexExpectation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regexExpectation'), 'exclude': lambda f: f is None }})
    r"""Evaluates whether each column value matches a specified regex."""  
    row_condition_expectation: Optional[shared_googleclouddataplexv1dataqualityrulerowconditionexpectation.GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowConditionExpectation'), 'exclude': lambda f: f is None }})
    r"""Evaluates whether each row passes the specified condition.The SQL expression needs to use BigQuery standard SQL syntax and should produce a boolean value per row as the result.Example: col1 >= 0 AND col2 < 10"""  
    set_expectation: Optional[shared_googleclouddataplexv1dataqualityrulesetexpectation.GoogleCloudDataplexV1DataQualityRuleSetExpectation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setExpectation'), 'exclude': lambda f: f is None }})
    r"""Evaluates whether each column value is contained by a specified set."""  
    statistic_range_expectation: Optional[shared_googleclouddataplexv1dataqualityrulestatisticrangeexpectation.GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statisticRangeExpectation'), 'exclude': lambda f: f is None }})
    r"""Evaluates whether the column aggregate statistic lies between a specified range."""  
    table_condition_expectation: Optional[shared_googleclouddataplexv1dataqualityruletableconditionexpectation.GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableConditionExpectation'), 'exclude': lambda f: f is None }})
    r"""Evaluates whether the provided expression is true.The SQL expression needs to use BigQuery standard SQL syntax and should produce a scalar boolean result.Example: MIN(col1) >= 0"""  
    threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threshold'), 'exclude': lambda f: f is None }})
    r"""Optional. The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of 0.0, 1.0.0 indicates default value (i.e. 1.0)."""  
    uniqueness_expectation: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uniquenessExpectation'), 'exclude': lambda f: f is None }})
    r"""Evaluates whether the column has duplicates."""  
    