"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TimeMachineHistoricalWeather:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def time_machine_time_machine_get(self, request: operations.TimeMachineTimeMachineGetRequest, security: operations.TimeMachineTimeMachineGetSecurity) -> operations.TimeMachineTimeMachineGetResponse:
        r"""Returns weather data for a single location and given day in the past
        ## Actual weather data for a single location and day in the past
        
        The output contains actual weather data for each day up to 8 years in the past, and long-term statistics of selected weather variables aggregated over 40 years.
        
        ### Location specification
        The location of the weather data must be specified. There are two ways to do this:
        1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`.
        2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
        
        *Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive data for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/time_machine'
        
        query_params = utils.get_query_params(operations.TimeMachineTimeMachineGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TimeMachineTimeMachineGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TimeMachineTimeMachine])
                res.time_machine_time_machine = out
        elif http_res.status_code in [400, 402, 403, 429]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GeneralRequestError])
                res.general_request_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    