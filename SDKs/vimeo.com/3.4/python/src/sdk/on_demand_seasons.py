"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class OnDemandSeasons:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_vod_season(self, request: operations.GetVodSeasonRequest) -> operations.GetVodSeasonResponse:
        r"""Get a specific season on an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVodSeasonRequest, base_url, '/ondemand/pages/{ondemand_id}/seasons/{season_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVodSeasonResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.season+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandSeason])
                res.on_demand_season = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.season+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_vod_season_videos(self, request: operations.GetVodSeasonVideosRequest) -> operations.GetVodSeasonVideosResponse:
        r"""Get all the videos in a season on an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVodSeasonVideosRequest, base_url, '/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos', request)
        
        query_params = utils.get_query_params(operations.GetVodSeasonVideosRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVodSeasonVideosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out

        return res

    def get_vod_seasons(self, request: operations.GetVodSeasonsRequest) -> operations.GetVodSeasonsResponse:
        r"""Get all the seasons on an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVodSeasonsRequest, base_url, '/ondemand/pages/{ondemand_id}/seasons', request)
        
        query_params = utils.get_query_params(operations.GetVodSeasonsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVodSeasonsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.season+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OnDemandSeason]])
                res.on_demand_seasons = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.season+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    