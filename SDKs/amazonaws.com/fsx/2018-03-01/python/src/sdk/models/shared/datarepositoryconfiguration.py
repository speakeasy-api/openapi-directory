"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import autoimportpolicytype_enum as shared_autoimportpolicytype_enum
from ..shared import datarepositoryfailuredetails as shared_datarepositoryfailuredetails
from ..shared import datarepositorylifecycle_enum as shared_datarepositorylifecycle_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataRepositoryConfiguration:
    r"""<p>The data repository configuration object for Lustre file systems returned in the response of the <code>CreateFileSystem</code> operation.</p> <p>This data type is not supported for file systems with the <code>Persistent_2</code> deployment type. Instead, use .</p>"""
    
    auto_import_policy: Optional[shared_autoimportpolicytype_enum.AutoImportPolicyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoImportPolicy'), 'exclude': lambda f: f is None }})  
    export_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExportPath'), 'exclude': lambda f: f is None }})  
    failure_details: Optional[shared_datarepositoryfailuredetails.DataRepositoryFailureDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureDetails'), 'exclude': lambda f: f is None }})
    r"""Provides detailed information about the data repository if its <code>Lifecycle</code> is set to <code>MISCONFIGURED</code> or <code>FAILED</code>."""  
    imported_file_chunk_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImportedFileChunkSize'), 'exclude': lambda f: f is None }})  
    import_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImportPath'), 'exclude': lambda f: f is None }})  
    lifecycle: Optional[shared_datarepositorylifecycle_enum.DataRepositoryLifecycleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Lifecycle'), 'exclude': lambda f: f is None }})  
    