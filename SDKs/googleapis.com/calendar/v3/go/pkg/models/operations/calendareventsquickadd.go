// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CalendarEventsQuickAddSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type CalendarEventsQuickAddSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type CalendarEventsQuickAddSecurity struct {
	Option1 *CalendarEventsQuickAddSecurityOption1 `security:"option"`
	Option2 *CalendarEventsQuickAddSecurityOption2 `security:"option"`
}

// CalendarEventsQuickAddSendUpdatesEnum - Guests who should receive notifications about the creation of the new event.
type CalendarEventsQuickAddSendUpdatesEnum string

const (
	CalendarEventsQuickAddSendUpdatesEnumAll          CalendarEventsQuickAddSendUpdatesEnum = "all"
	CalendarEventsQuickAddSendUpdatesEnumExternalOnly CalendarEventsQuickAddSendUpdatesEnum = "externalOnly"
	CalendarEventsQuickAddSendUpdatesEnumNone         CalendarEventsQuickAddSendUpdatesEnum = "none"
)

func (e *CalendarEventsQuickAddSendUpdatesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "externalOnly":
		fallthrough
	case "none":
		*e = CalendarEventsQuickAddSendUpdatesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CalendarEventsQuickAddSendUpdatesEnum: %s", s)
	}
}

type CalendarEventsQuickAddRequest struct {
	// Data format for the response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
	CalendarID string `pathParam:"style=simple,explode=false,name=calendarId"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Deprecated. Please use sendUpdates instead.
	//
	// Whether to send notifications about the creation of the event. Note that some emails might still be sent even if you set the value to false. The default is false.
	SendNotifications *bool `queryParam:"style=form,explode=true,name=sendNotifications"`
	// Guests who should receive notifications about the creation of the new event.
	SendUpdates *CalendarEventsQuickAddSendUpdatesEnum `queryParam:"style=form,explode=true,name=sendUpdates"`
	// The text describing the event to be created.
	Text string `queryParam:"style=form,explode=true,name=text"`
	// Deprecated. Please use quotaUser instead.
	UserIP *string `queryParam:"style=form,explode=true,name=userIp"`
}

type CalendarEventsQuickAddResponse struct {
	ContentType string
	// Successful response
	Event       *shared.Event
	StatusCode  int
	RawResponse *http.Response
}
