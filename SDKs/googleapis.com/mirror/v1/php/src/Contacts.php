<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Contacts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a contact.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorContactsDeleteResponse
     */
	public function mirrorContactsDelete(
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorContactsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/{id}', \OpenAPI\OpenAPI\Models\Operations\MirrorContactsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorContactsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorContactsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a single contact by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorContactsGetResponse
     */
	public function mirrorContactsGet(
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorContactsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/{id}', \OpenAPI\OpenAPI\Models\Operations\MirrorContactsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorContactsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorContactsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new contact.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorContactsInsertResponse
     */
	public function mirrorContactsInsert(
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorContactsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contact", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorContactsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorContactsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of contacts for the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorContactsListResponse
     */
	public function mirrorContactsList(
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorContactsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorContactsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorContactsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates a contact in place. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorContactsPatchResponse
     */
	public function mirrorContactsPatch(
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorContactsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/{id}', \OpenAPI\OpenAPI\Models\Operations\MirrorContactsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contact", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorContactsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorContactsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates a contact in place.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MirrorContactsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MirrorContactsUpdateResponse
     */
	public function mirrorContactsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MirrorContactsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MirrorContactsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/{id}', \OpenAPI\OpenAPI\Models\Operations\MirrorContactsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contact", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MirrorContactsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MirrorContactsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}