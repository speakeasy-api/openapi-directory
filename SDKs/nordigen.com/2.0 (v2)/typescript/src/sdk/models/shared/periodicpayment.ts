/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Behavior when periodic payment dates fall on holiday.
 */
export enum PeriodicPaymentExecutionRuleEnum {
  Following = "following",
  Preceding = "preceding",
}

export enum PeriodicPaymentFrequencyEnum {
  Daily = "Daily",
  Weekly = "Weekly",
  EveryTwoWeeks = "EveryTwoWeeks",
  Monthly = "Monthly",
  EveryTwoMonths = "EveryTwoMonths",
  Quarterly = "Quarterly",
  SemiAnnual = "SemiAnnual",
  Annual = "Annual",
  MonthlyVariable = "MonthlyVariable",
}

/**
 * Periodic Payment Serializer.
 */
export class PeriodicPayment extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "day_of_execution" })
  dayOfExecution?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "end_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate?: Date;

  /**
   * Behavior when periodic payment dates fall on holiday.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "execution_rule" })
  executionRule?: PeriodicPaymentExecutionRuleEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "frequency" })
  frequency?: PeriodicPaymentFrequencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "start_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate: Date;
}
