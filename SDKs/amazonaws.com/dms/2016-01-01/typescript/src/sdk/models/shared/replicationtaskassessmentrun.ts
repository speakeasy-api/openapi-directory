/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ReplicationTaskAssessmentRunProgress } from "./replicationtaskassessmentrunprogress";
import { Expose, Transform, Type } from "class-transformer";

/**
 * <p>Provides information that describes a premigration assessment run that you have started using the <code>StartReplicationTaskAssessmentRun</code> operation.</p> <p>Some of the information appears based on other operations that can return the <code>ReplicationTaskAssessmentRun</code> object.</p>
 */
export class ReplicationTaskAssessmentRun extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AssessmentProgress" })
  @Type(() => ReplicationTaskAssessmentRunProgress)
  assessmentProgress?: ReplicationTaskAssessmentRunProgress;

  @SpeakeasyMetadata()
  @Expose({ name: "AssessmentRunName" })
  assessmentRunName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastFailureMessage" })
  lastFailureMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ReplicationTaskArn" })
  replicationTaskArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ReplicationTaskAssessmentRunArn" })
  replicationTaskAssessmentRunArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ReplicationTaskAssessmentRunCreationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  replicationTaskAssessmentRunCreationDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "ResultEncryptionMode" })
  resultEncryptionMode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ResultKmsKeyArn" })
  resultKmsKeyArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ResultLocationBucket" })
  resultLocationBucket?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ResultLocationFolder" })
  resultLocationFolder?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ServiceAccessRoleArn" })
  serviceAccessRoleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: string;
}
