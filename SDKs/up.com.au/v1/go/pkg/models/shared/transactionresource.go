// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// TransactionResourceAttributesCashback - Provides information about an instant reimbursement in the form of
// cashback.
type TransactionResourceAttributesCashback struct {
	// The total amount of cashback paid, represented as a positive value.
	//
	Amount MoneyObject `json:"amount"`
	// A brief description of why this cashback was paid.
	//
	Description string `json:"description"`
}

// TransactionResourceAttributesForeignAmount - Provides information about a value of money.
type TransactionResourceAttributesForeignAmount struct {
	// The ISO 4217 currency code.
	//
	CurrencyCode string `json:"currencyCode"`
	// The amount of money, formatted as a string in the relevant currency.
	// For example, for an Australian dollar value of $10.56, this field will
	// be `"10.56"`. The currency symbol is not included in the string.
	//
	Value string `json:"value"`
	// The amount of money in the smallest denomination for the currency, as a
	// 64-bit integer.  For example, for an Australian dollar value of $10.56,
	// this field will be `1056`.
	//
	ValueInBaseUnits int64 `json:"valueInBaseUnits"`
}

// TransactionResourceAttributesHoldInfoForeignAmount - Provides information about a value of money.
type TransactionResourceAttributesHoldInfoForeignAmount struct {
	// The ISO 4217 currency code.
	//
	CurrencyCode string `json:"currencyCode"`
	// The amount of money, formatted as a string in the relevant currency.
	// For example, for an Australian dollar value of $10.56, this field will
	// be `"10.56"`. The currency symbol is not included in the string.
	//
	Value string `json:"value"`
	// The amount of money in the smallest denomination for the currency, as a
	// 64-bit integer.  For example, for an Australian dollar value of $10.56,
	// this field will be `1056`.
	//
	ValueInBaseUnits int64 `json:"valueInBaseUnits"`
}

// TransactionResourceAttributesHoldInfo - Provides information about the amount at which a transaction was in the
// `HELD` status.
type TransactionResourceAttributesHoldInfo struct {
	// The amount of this transaction while in the `HELD` status, in
	// Australian dollars.
	//
	Amount MoneyObject `json:"amount"`
	// The foreign currency amount of this transaction while in the `HELD`
	// status. This field will be `null` for domestic transactions. The amount
	// was converted to the AUD amount reflected in the `amount` field.
	//
	ForeignAmount TransactionResourceAttributesHoldInfoForeignAmount `json:"foreignAmount"`
}

// TransactionResourceAttributesRoundUpBoostPortion - Provides information about a value of money.
type TransactionResourceAttributesRoundUpBoostPortion struct {
	// The ISO 4217 currency code.
	//
	CurrencyCode string `json:"currencyCode"`
	// The amount of money, formatted as a string in the relevant currency.
	// For example, for an Australian dollar value of $10.56, this field will
	// be `"10.56"`. The currency symbol is not included in the string.
	//
	Value string `json:"value"`
	// The amount of money in the smallest denomination for the currency, as a
	// 64-bit integer.  For example, for an Australian dollar value of $10.56,
	// this field will be `1056`.
	//
	ValueInBaseUnits int64 `json:"valueInBaseUnits"`
}

// TransactionResourceAttributesRoundUp - Provides information about how a Round Up was applied, such as whether or
// not a boost was included in the Round Up.
type TransactionResourceAttributesRoundUp struct {
	// The total amount of this Round Up, including any boosts, represented as
	// a negative value.
	//
	Amount MoneyObject `json:"amount"`
	// The portion of the Round Up `amount` owing to boosted Round Ups,
	// represented as a negative value. If no boost was added to the Round Up
	// this field will be `null`.
	//
	BoostPortion TransactionResourceAttributesRoundUpBoostPortion `json:"boostPortion"`
}

type TransactionResourceAttributes struct {
	// The amount of this transaction in Australian dollars. For
	// transactions that were once `HELD` but are now `SETTLED`, refer to
	// the `holdInfo` field for the original `amount` the transaction was
	// `HELD` at.
	//
	Amount MoneyObject `json:"amount"`
	// If all or part of this transaction was instantly reimbursed in the
	// form of cashback, details of the reimbursement.
	//
	Cashback TransactionResourceAttributesCashback `json:"cashback"`
	// The date-time at which this transaction was first encountered.
	//
	CreatedAt time.Time `json:"createdAt"`
	// A short description for this transaction. Usually the merchant name
	// for purchases.
	//
	Description string `json:"description"`
	// The foreign currency amount of this transaction. This field will be
	// `null` for domestic transactions. The amount was converted to the AUD
	// amount reflected in the `amount` of this transaction. Refer to the
	// `holdInfo` field for the original `foreignAmount` the transaction was
	// `HELD` at.
	//
	ForeignAmount TransactionResourceAttributesForeignAmount `json:"foreignAmount"`
	// If this transaction is currently in the `HELD` status, or was ever in
	// the `HELD` status, the `amount` and `foreignAmount` of the
	// transaction while `HELD`.
	//
	HoldInfo TransactionResourceAttributesHoldInfo `json:"holdInfo"`
	// Boolean flag set to true on transactions that support the use of
	// categories.
	//
	IsCategorizable bool `json:"isCategorizable"`
	// Attached message for this transaction, such as a payment message, or a
	// transfer note.
	//
	Message string `json:"message"`
	// The original, unprocessed text of the transaction. This is often not
	// a perfect indicator of the actual merchant, but it is useful for
	// reconciliation purposes in some cases.
	//
	RawText string `json:"rawText"`
	// Details of how this transaction was rounded-up. If no Round Up was
	// applied this field will be `null`.
	//
	RoundUp TransactionResourceAttributesRoundUp `json:"roundUp"`
	// The date-time at which this transaction settled. This field will be
	// `null` for transactions that are currently in the `HELD` status.
	//
	SettledAt time.Time `json:"settledAt"`
	// The current processing status of this transaction, according to
	// whether or not this transaction has settled or is still held.
	//
	Status TransactionStatusEnumEnum `json:"status"`
}

type TransactionResourceLinks struct {
	// The canonical link to this resource within the API.
	//
	Self string `json:"self"`
}

type TransactionResourceRelationshipsAccountData struct {
	// The unique identifier of the resource within its type.
	//
	ID string `json:"id"`
	// The type of this resource: `accounts`
	Type string `json:"type"`
}

type TransactionResourceRelationshipsAccountLinks struct {
	// The link to retrieve the related resource(s) in this relationship.
	//
	Related string `json:"related"`
}

type TransactionResourceRelationshipsAccount struct {
	Data  TransactionResourceRelationshipsAccountData   `json:"data"`
	Links *TransactionResourceRelationshipsAccountLinks `json:"links,omitempty"`
}

type TransactionResourceRelationshipsCategoryData struct {
	// The unique identifier of the resource within its type.
	//
	ID string `json:"id"`
	// The type of this resource: `categories`
	Type string `json:"type"`
}

type TransactionResourceRelationshipsCategoryLinks struct {
	// The link to retrieve the related resource(s) in this relationship.
	//
	Related *string `json:"related,omitempty"`
	// The link to retrieve or modify linkage between this resources and the
	// related resource(s) in this relationship.
	//
	Self string `json:"self"`
}

type TransactionResourceRelationshipsCategory struct {
	Data  TransactionResourceRelationshipsCategoryData   `json:"data"`
	Links *TransactionResourceRelationshipsCategoryLinks `json:"links,omitempty"`
}

type TransactionResourceRelationshipsParentCategoryData struct {
	// The unique identifier of the resource within its type.
	//
	ID string `json:"id"`
	// The type of this resource: `categories`
	Type string `json:"type"`
}

type TransactionResourceRelationshipsParentCategoryLinks struct {
	// The link to retrieve the related resource(s) in this relationship.
	//
	Related string `json:"related"`
}

type TransactionResourceRelationshipsParentCategory struct {
	Data  TransactionResourceRelationshipsParentCategoryData   `json:"data"`
	Links *TransactionResourceRelationshipsParentCategoryLinks `json:"links,omitempty"`
}

type TransactionResourceRelationshipsTagsData struct {
	// The label of the tag, which also acts as the tagâ€™s unique identifier.
	//
	ID string `json:"id"`
	// The type of this resource: `tags`
	Type string `json:"type"`
}

type TransactionResourceRelationshipsTagsLinks struct {
	// The link to retrieve or modify linkage between this resources and the
	// related resource(s) in this relationship.
	//
	Self string `json:"self"`
}

type TransactionResourceRelationshipsTags struct {
	Data  []TransactionResourceRelationshipsTagsData `json:"data"`
	Links *TransactionResourceRelationshipsTagsLinks `json:"links,omitempty"`
}

type TransactionResourceRelationshipsTransferAccountData struct {
	// The unique identifier of the resource within its type.
	//
	ID string `json:"id"`
	// The type of this resource: `accounts`
	Type string `json:"type"`
}

type TransactionResourceRelationshipsTransferAccountLinks struct {
	// The link to retrieve the related resource(s) in this relationship.
	//
	Related string `json:"related"`
}

// TransactionResourceRelationshipsTransferAccount - If this transaction is a transfer between accounts, this relationship
// will contain the account the transaction went to/came from. The
// `amount` field can be used to determine the direction of the transfer.
type TransactionResourceRelationshipsTransferAccount struct {
	Data  TransactionResourceRelationshipsTransferAccountData   `json:"data"`
	Links *TransactionResourceRelationshipsTransferAccountLinks `json:"links,omitempty"`
}

type TransactionResourceRelationships struct {
	Account        TransactionResourceRelationshipsAccount        `json:"account"`
	Category       TransactionResourceRelationshipsCategory       `json:"category"`
	ParentCategory TransactionResourceRelationshipsParentCategory `json:"parentCategory"`
	Tags           TransactionResourceRelationshipsTags           `json:"tags"`
	// If this transaction is a transfer between accounts, this relationship
	// will contain the account the transaction went to/came from. The
	// `amount` field can be used to determine the direction of the transfer.
	//
	TransferAccount TransactionResourceRelationshipsTransferAccount `json:"transferAccount"`
}

type TransactionResource struct {
	Attributes TransactionResourceAttributes `json:"attributes"`
	// The unique identifier for this transaction.
	//
	ID            string                           `json:"id"`
	Links         *TransactionResourceLinks        `json:"links,omitempty"`
	Relationships TransactionResourceRelationships `json:"relationships"`
	// The type of this resource: `transactions`
	Type string `json:"type"`
}
