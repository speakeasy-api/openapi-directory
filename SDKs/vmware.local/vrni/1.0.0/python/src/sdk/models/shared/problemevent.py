"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import entitytype_enum as shared_entitytype_enum
from ..shared import reference as shared_reference
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProblemEventAdminStateEnum(str, Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'

class ProblemEventSeverityEnum(str, Enum):
    CRITICAL = 'CRITICAL'
    MODERATE = 'MODERATE'
    WARNING = 'WARNING'
    INFO = 'INFO'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProblemEvent:
    r"""OK"""
    
    admin_state: Optional[ProblemEventAdminStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin_state'), 'exclude': lambda f: f is None }})  
    anchor_entities: Optional[list[shared_reference.Reference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('anchor_entities'), 'exclude': lambda f: f is None }})  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})  
    entity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_id'), 'exclude': lambda f: f is None }})  
    entity_type: Optional[shared_entitytype_enum.EntityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entity_type'), 'exclude': lambda f: f is None }})  
    event_close_time_epoch_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_close_time_epoch_ms'), 'exclude': lambda f: f is None }})  
    event_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_tags'), 'exclude': lambda f: f is None }})  
    event_time_epoch_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_time_epoch_ms'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    related_entities: Optional[list[shared_reference.Reference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related_entities'), 'exclude': lambda f: f is None }})  
    severity: Optional[ProblemEventSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})  
    