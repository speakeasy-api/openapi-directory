"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Users:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def admin_get_user(self, request: operations.AdminGetUserRequest) -> operations.AdminGetUserResponse:
        r"""Get a user by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminGetUserRequest, base_url, '/admin/users/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminGetUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AdminGetUser200ApplicationJSON])
                res.admin_get_user_200_application_json_object = out

        return res

    def admin_list_users(self, request: operations.AdminListUsersRequest) -> operations.AdminListUsersResponse:
        r"""Get a list of users"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdminListUsersRequest, base_url, '/admin/users/list/{flag}.json', request)
        
        query_params = utils.get_query_params(operations.AdminListUsersRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminListUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.AdminListUsers200ApplicationJSON]])
                res.admin_list_users_200_application_json_objects = out

        return res

    def anonymize_user(self, request: operations.AnonymizeUserRequest) -> operations.AnonymizeUserResponse:
        r"""Anonymize a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnonymizeUserRequest, base_url, '/admin/users/{id}/anonymize.json', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnonymizeUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AnonymizeUser200ApplicationJSON])
                res.anonymize_user_200_application_json_object = out

        return res

    def change_password(self, request: operations.ChangePasswordRequest) -> operations.ChangePasswordResponse:
        r"""Change password"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangePasswordRequest, base_url, '/users/password-reset/{token}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangePasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_user(self, request: operations.CreateUserRequest) -> operations.CreateUserResponse:
        r"""Creates a user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/users.json'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateUser200ApplicationJSON])
                res.create_user_200_application_json_object = out

        return res

    def delete_user(self, request: operations.DeleteUserRequest) -> operations.DeleteUserResponse:
        r"""Delete a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUserRequest, base_url, '/admin/users/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteUser200ApplicationJSON])
                res.delete_user_200_application_json_object = out

        return res

    def get_user(self, request: operations.GetUserRequest) -> operations.GetUserResponse:
        r"""Get a single user by username"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserRequest, base_url, '/u/{username}.json', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetUser200ApplicationJSON])
                res.get_user_200_application_json_object = out

        return res

    def get_user_emails(self, request: operations.GetUserEmailsRequest) -> operations.GetUserEmailsResponse:
        r"""Get email addresses belonging to a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserEmailsRequest, base_url, '/u/{username}/emails.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserEmailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetUserEmails200ApplicationJSON])
                res.get_user_emails_200_application_json_object = out

        return res

    def get_user_external_id(self, request: operations.GetUserExternalIDRequest) -> operations.GetUserExternalIDResponse:
        r"""Get a user by external_id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserExternalIDRequest, base_url, '/u/by-external/{external_id}.json', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserExternalIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetUserExternalID200ApplicationJSON])
                res.get_user_external_id_200_application_json_object = out

        return res

    def get_user_identiy_provider_external_id(self, request: operations.GetUserIdentiyProviderExternalIDRequest) -> operations.GetUserIdentiyProviderExternalIDResponse:
        r"""Get a user by identity provider external ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserIdentiyProviderExternalIDRequest, base_url, '/u/by-external/{provider}/{external_id}.json', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserIdentiyProviderExternalIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetUserIdentiyProviderExternalID200ApplicationJSON])
                res.get_user_identiy_provider_external_id_200_application_json_object = out

        return res

    def list_user_actions(self, request: operations.ListUserActionsRequest) -> operations.ListUserActionsResponse:
        r"""Get a list of user actions"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user_actions.json'
        
        query_params = utils.get_query_params(operations.ListUserActionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListUserActionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListUserActions200ApplicationJSON])
                res.list_user_actions_200_application_json_object = out

        return res

    def list_user_badges(self, request: operations.ListUserBadgesRequest) -> operations.ListUserBadgesResponse:
        r"""List badges for a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListUserBadgesRequest, base_url, '/user-badges/{username}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListUserBadgesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListUserBadges200ApplicationJSON])
                res.list_user_badges_200_application_json_object = out

        return res

    def list_users_public(self, request: operations.ListUsersPublicRequest) -> operations.ListUsersPublicResponse:
        r"""Get a public list of users"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/directory_items.json'
        
        query_params = utils.get_query_params(operations.ListUsersPublicRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListUsersPublicResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListUsersPublic200ApplicationJSON])
                res.list_users_public_200_application_json_object = out

        return res

    def log_out_user(self, request: operations.LogOutUserRequest) -> operations.LogOutUserResponse:
        r"""Log a user out"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LogOutUserRequest, base_url, '/admin/users/{id}/log_out.json', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LogOutUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.LogOutUser200ApplicationJSON])
                res.log_out_user_200_application_json_object = out

        return res

    def refresh_gravatar(self, request: operations.RefreshGravatarRequest) -> operations.RefreshGravatarResponse:
        r"""Refresh gravatar"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RefreshGravatarRequest, base_url, '/user_avatar/{username}/refresh_gravatar.json', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RefreshGravatarResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RefreshGravatar200ApplicationJSON])
                res.refresh_gravatar_200_application_json_object = out

        return res

    def send_password_reset_email(self, request: operations.SendPasswordResetEmailRequestBody) -> operations.SendPasswordResetEmailResponse:
        r"""Send password reset email"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/session/forgot_password.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendPasswordResetEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendPasswordResetEmail200ApplicationJSON])
                res.send_password_reset_email_200_application_json_object = out

        return res

    def silence_user(self, request: operations.SilenceUserRequest) -> operations.SilenceUserResponse:
        r"""Silence a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SilenceUserRequest, base_url, '/admin/users/{id}/silence.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SilenceUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SilenceUser200ApplicationJSON])
                res.silence_user_200_application_json_object = out

        return res

    def suspend_user(self, request: operations.SuspendUserRequest) -> operations.SuspendUserResponse:
        r"""Suspend a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuspendUserRequest, base_url, '/admin/users/{id}/suspend.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuspendUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SuspendUser200ApplicationJSON])
                res.suspend_user_200_application_json_object = out

        return res

    def update_avatar(self, request: operations.UpdateAvatarRequest) -> operations.UpdateAvatarResponse:
        r"""Update avatar"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAvatarRequest, base_url, '/u/{username}/preferences/avatar/pick.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAvatarResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateAvatar200ApplicationJSON])
                res.update_avatar_200_application_json_object = out

        return res

    def update_email(self, request: operations.UpdateEmailRequest) -> operations.UpdateEmailResponse:
        r"""Update email"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateEmailRequest, base_url, '/u/{username}/preferences/email.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_user(self, request: operations.UpdateUserRequest) -> operations.UpdateUserResponse:
        r"""Update a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateUserRequest, base_url, '/u/{username}.json', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateUser200ApplicationJSON])
                res.update_user_200_application_json_object = out

        return res

    def update_username(self, request: operations.UpdateUsernameRequest) -> operations.UpdateUsernameResponse:
        r"""Update username"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateUsernameRequest, base_url, '/u/{username}/preferences/username.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateUsernameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    