"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FailureDetail:
    r"""Details for an outcome with a FAILURE outcome summary."""
    
    crashed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crashed'), 'exclude': lambda f: f is None }})
    r"""If the failure was severe because the system (app) under test crashed."""  
    device_out_of_memory: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceOutOfMemory'), 'exclude': lambda f: f is None }})
    r"""If the device ran out of memory during a test, causing the test to crash."""  
    failed_roboscript: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failedRoboscript'), 'exclude': lambda f: f is None }})
    r"""If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl."""  
    not_installed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notInstalled'), 'exclude': lambda f: f is None }})
    r"""If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform."""  
    other_native_crash: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherNativeCrash'), 'exclude': lambda f: f is None }})
    r"""If a native process (including any other than the app) crashed."""  
    timed_out: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timedOut'), 'exclude': lambda f: f is None }})
    r"""If the test overran some time limit, and that is why it failed."""  
    unable_to_crawl: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unableToCrawl'), 'exclude': lambda f: f is None }})
    r"""If the robo was unable to crawl the app; perhaps because the app did not start."""  
    