/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class MeetingRegistrantsQuestionsGetSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class MeetingRegistrantsQuestionsGetRequest extends SpeakeasyBase {
  /**
   * The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
   *
   * @remarks
   *
   * While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meetingId",
  })
  meetingId: number;
}

/**
 * Type of the question being asked.
 */
export enum MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum {
  Short = "short",
  Single = "single",
}

export class MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestions extends SpeakeasyBase {
  /**
   * Answer choices for the question. Can not be used for `short` question type as this type of question requires registrants to type out the answer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answers" })
  answers?: string[];

  /**
   * Indicates whether or not the custom question is required to be answered by participants or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;

  /**
   * Title of the custom question.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * Type of the question being asked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum;
}

/**
 * Field name of the question.
 */
export enum MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum {
  Address = "address",
  City = "city",
  Country = "country",
  Zip = "zip",
  State = "state",
  Phone = "phone",
  Industry = "industry",
  Org = "org",
  JobTitle = "job_title",
  PurchasingTimeFrame = "purchasing_time_frame",
  RoleInPurchaseProcess = "role_in_purchase_process",
  NoOfEmployees = "no_of_employees",
  Comments = "comments",
}

export class MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestions extends SpeakeasyBase {
  /**
   * Field name of the question.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field_name" })
  fieldName?: MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum;

  /**
   * Indicates whether or not the displayed fields are required to be filled out by registrants.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;
}

/**
 * Meeting Registrant Questions
 */
export class MeetingRegistrantsQuestionsGetMeetingRegistrantQuestions extends SpeakeasyBase {
  /**
   * Array of Registrant Custom Questions
   */
  @SpeakeasyMetadata({
    elemType:
      MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestions,
  })
  @Expose({ name: "custom_questions" })
  @Type(
    () =>
      MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestions
  )
  customQuestions?: MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestions[];

  /**
   * Array of Registrant Questions
   */
  @SpeakeasyMetadata({
    elemType: MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestions,
  })
  @Expose({ name: "questions" })
  @Type(() => MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestions)
  questions?: MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestions[];
}

export class MeetingRegistrantsQuestionsGetResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Meeting Registrant Question object returned
   */
  @SpeakeasyMetadata()
  meetingRegistrantQuestions?: MeetingRegistrantsQuestionsGetMeetingRegistrantQuestions;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
