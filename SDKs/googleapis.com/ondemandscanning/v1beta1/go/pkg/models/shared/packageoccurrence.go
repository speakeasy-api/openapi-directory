// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PackageOccurrenceArchitectureEnum - Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
type PackageOccurrenceArchitectureEnum string

const (
	PackageOccurrenceArchitectureEnumArchitectureUnspecified PackageOccurrenceArchitectureEnum = "ARCHITECTURE_UNSPECIFIED"
	PackageOccurrenceArchitectureEnumX86                     PackageOccurrenceArchitectureEnum = "X86"
	PackageOccurrenceArchitectureEnumX64                     PackageOccurrenceArchitectureEnum = "X64"
)

func (e *PackageOccurrenceArchitectureEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ARCHITECTURE_UNSPECIFIED":
		fallthrough
	case "X86":
		fallthrough
	case "X64":
		*e = PackageOccurrenceArchitectureEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PackageOccurrenceArchitectureEnum: %s", s)
	}
}

// PackageOccurrence - Details on how a particular software package was installed on a system.
type PackageOccurrence struct {
	// Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
	Architecture *PackageOccurrenceArchitectureEnum `json:"architecture,omitempty"`
	// Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
	CpeURI *string `json:"cpeUri,omitempty"`
	// License information.
	License *License `json:"license,omitempty"`
	// All of the places within the filesystem versions of this package have been found.
	Location []Location `json:"location,omitempty"`
	// Required. Output only. The name of the installed package.
	Name *string `json:"name,omitempty"`
	// Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
	PackageType *string `json:"packageType,omitempty"`
	// Version contains structured information about the version of a package.
	Version *Version `json:"version,omitempty"`
}
