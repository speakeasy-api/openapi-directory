<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Groups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Removes an alias.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesDeleteResponse
     */
	public function directoryGroupsAliasesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}/aliases/{alias}', \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Adds an alias for the group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesInsertResponse
     */
	public function directoryGroupsAliasesInsert(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}/aliases', \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "alias", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->alias = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Alias', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all aliases for a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesListResponse
     */
	public function directoryGroupsAliasesList(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}/aliases', \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsAliasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aliases = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Aliases', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsDeleteResponse
     */
	public function directoryGroupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a group's properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsGetResponse
     */
	public function directoryGroupsGet(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->group = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Group', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsInsertResponse
     */
	public function directoryGroupsInsert(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "group", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->group = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Group', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves all groups of a domain or of a user given a userKey (paginated).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsListResponse
     */
	public function directoryGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groups = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Groups', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsPatchResponse
     */
	public function directoryGroupsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "group", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->group = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Group', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a group's properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsUpdateResponse
     */
	public function directoryGroupsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/groups/{groupKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "group", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryGroupsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->group = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Group', 'json');
            }
        }

        return $response;
    }
}