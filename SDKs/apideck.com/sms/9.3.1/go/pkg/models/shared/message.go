// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// MessageMessageTypeEnum - Set to sms for SMS messages and mms for MMS messages.
type MessageMessageTypeEnum string

const (
	MessageMessageTypeEnumSms MessageMessageTypeEnum = "sms"
	MessageMessageTypeEnumMms MessageMessageTypeEnum = "mms"
)

func (e MessageMessageTypeEnum) ToPointer() *MessageMessageTypeEnum {
	return &e
}

func (e *MessageMessageTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sms":
		fallthrough
	case "mms":
		*e = MessageMessageTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageMessageTypeEnum: %v", v)
	}
}

type MessageInput struct {
	// The message text.
	Body string `json:"body"`
	// The phone number that initiated the message.
	From string `json:"from"`
	// The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
	MessagingServiceID *string `json:"messaging_service_id,omitempty"`
	// A client reference.
	Reference *string `json:"reference,omitempty"`
	// The scheduled date and time of the message.
	ScheduledAt *time.Time `json:"scheduled_at,omitempty"`
	Subject     *string    `json:"subject,omitempty"`
	// The phone number that received the message.
	To string `json:"to"`
	// Set to sms for SMS messages and mms for MMS messages.
	Type *MessageMessageTypeEnum `json:"type,omitempty"`
	// Define a webhook to receive delivery notifications.
	WebhookURL *string `json:"webhook_url,omitempty"`
}

// MessageDirectionEnum - The direction of the message.
type MessageDirectionEnum string

const (
	MessageDirectionEnumInbound       MessageDirectionEnum = "inbound"
	MessageDirectionEnumOutboundAPI   MessageDirectionEnum = "outbound-api"
	MessageDirectionEnumOutboundCall  MessageDirectionEnum = "outbound-call"
	MessageDirectionEnumOutboundReply MessageDirectionEnum = "outbound-reply"
	MessageDirectionEnumUnknown       MessageDirectionEnum = "unknown"
)

func (e MessageDirectionEnum) ToPointer() *MessageDirectionEnum {
	return &e
}

func (e *MessageDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inbound":
		fallthrough
	case "outbound-api":
		fallthrough
	case "outbound-call":
		fallthrough
	case "outbound-reply":
		fallthrough
	case "unknown":
		*e = MessageDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageDirectionEnum: %v", v)
	}
}

// MessageError - The error returned if your message status is failed or undelivered.
type MessageError struct {
	// The error_code provides more information about the failure. If the message was successful, this value is null
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// MessagePrice - Price of the message.
type MessagePrice struct {
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency    *CurrencyEnum `json:"currency,omitempty"`
	PerUnit     *string       `json:"per_unit,omitempty"`
	TotalAmount *string       `json:"total_amount,omitempty"`
}

// MessageStatusEnum - Status of the delivery of the message.
type MessageStatusEnum string

const (
	MessageStatusEnumAccepted    MessageStatusEnum = "accepted"
	MessageStatusEnumScheduled   MessageStatusEnum = "scheduled"
	MessageStatusEnumCanceled    MessageStatusEnum = "canceled"
	MessageStatusEnumQueued      MessageStatusEnum = "queued"
	MessageStatusEnumSending     MessageStatusEnum = "sending"
	MessageStatusEnumSent        MessageStatusEnum = "sent"
	MessageStatusEnumFailed      MessageStatusEnum = "failed"
	MessageStatusEnumDelivered   MessageStatusEnum = "delivered"
	MessageStatusEnumUndelivered MessageStatusEnum = "undelivered"
	MessageStatusEnumReceiving   MessageStatusEnum = "receiving"
	MessageStatusEnumReceived    MessageStatusEnum = "received"
	MessageStatusEnumRead        MessageStatusEnum = "read"
)

func (e MessageStatusEnum) ToPointer() *MessageStatusEnum {
	return &e
}

func (e *MessageStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accepted":
		fallthrough
	case "scheduled":
		fallthrough
	case "canceled":
		fallthrough
	case "queued":
		fallthrough
	case "sending":
		fallthrough
	case "sent":
		fallthrough
	case "failed":
		fallthrough
	case "delivered":
		fallthrough
	case "undelivered":
		fallthrough
	case "receiving":
		fallthrough
	case "received":
		fallthrough
	case "read":
		*e = MessageStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageStatusEnum: %v", v)
	}
}

type Message struct {
	// The message text.
	Body string `json:"body"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The direction of the message.
	Direction *MessageDirectionEnum `json:"direction,omitempty"`
	// The error returned if your message status is failed or undelivered.
	Error *MessageError `json:"error,omitempty"`
	// The phone number that initiated the message.
	From string `json:"from"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
	MessagingServiceID *string `json:"messaging_service_id,omitempty"`
	// The number of media files associated with the message.
	NumberOfMediaFiles *int64 `json:"number_of_media_files,omitempty"`
	// The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.
	NumberOfUnits *int64 `json:"number_of_units,omitempty"`
	// Price of the message.
	Price *MessagePrice `json:"price,omitempty"`
	// A client reference.
	Reference *string `json:"reference,omitempty"`
	// The scheduled date and time of the message.
	ScheduledAt *time.Time `json:"scheduled_at,omitempty"`
	// The date and time that the message was sent
	SentAt *time.Time `json:"sent_at,omitempty"`
	// Status of the delivery of the message.
	Status  *MessageStatusEnum `json:"status,omitempty"`
	Subject *string            `json:"subject,omitempty"`
	// The phone number that received the message.
	To string `json:"to"`
	// Set to sms for SMS messages and mms for MMS messages.
	Type *MessageMessageTypeEnum `json:"type,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// Define a webhook to receive delivery notifications.
	WebhookURL *string `json:"webhook_url,omitempty"`
}
