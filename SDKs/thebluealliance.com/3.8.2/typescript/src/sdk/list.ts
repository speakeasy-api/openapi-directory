/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Calls that return a list of records.
 */
export class List {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets a list of events in the given district.
   */
  getDistrictEvents(
    req: operations.GetDistrictEventsRequest,
    security: operations.GetDistrictEventsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictEventsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictEventsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/events",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictEventsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictEventsResponse =
        new operations.GetDistrictEventsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of event keys for events in the given district.
   */
  getDistrictEventsKeys(
    req: operations.GetDistrictEventsKeysRequest,
    security: operations.GetDistrictEventsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictEventsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictEventsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/events/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictEventsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictEventsKeysResponse =
        new operations.GetDistrictEventsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDistrictEventsKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of events in the given district.
   */
  getDistrictEventsSimple(
    req: operations.GetDistrictEventsSimpleRequest,
    security: operations.GetDistrictEventsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictEventsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictEventsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/events/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictEventsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictEventsSimpleResponse =
        new operations.GetDistrictEventsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.eventSimples = utils.objectToClass(
              httpRes?.data,
              shared.EventSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of team district rankings for the given district.
   */
  getDistrictRankings(
    req: operations.GetDistrictRankingsRequest,
    security: operations.GetDistrictRankingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictRankingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictRankingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/rankings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictRankingsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictRankingsResponse =
        new operations.GetDistrictRankingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.districtRankings = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.districtRankings = utils.objectToClass(
              httpRes?.data,
              shared.DistrictRanking,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects that competed in events in the given district.
   */
  getDistrictTeams(
    req: operations.GetDistrictTeamsRequest,
    security: operations.GetDistrictTeamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictTeamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictTeamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/teams",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictTeamsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictTeamsResponse =
        new operations.GetDistrictTeamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teams = utils.objectToClass(
              httpRes?.data,
              shared.Team,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects that competed in events in the given district.
   */
  getDistrictTeamsKeys(
    req: operations.GetDistrictTeamsKeysRequest,
    security: operations.GetDistrictTeamsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictTeamsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictTeamsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/teams/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictTeamsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictTeamsKeysResponse =
        new operations.GetDistrictTeamsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDistrictTeamsKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of `Team` objects that competed in events in the given district.
   */
  getDistrictTeamsSimple(
    req: operations.GetDistrictTeamsSimpleRequest,
    security: operations.GetDistrictTeamsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictTeamsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictTeamsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/teams/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictTeamsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictTeamsSimpleResponse =
        new operations.GetDistrictTeamsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamSimples = utils.objectToClass(
              httpRes?.data,
              shared.TeamSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects that competed in the given event.
   */
  getEventTeams(
    req: operations.GetEventTeamsRequest,
    security: operations.GetEventTeamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsResponse =
        new operations.GetEventTeamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teams = utils.objectToClass(
              httpRes?.data,
              shared.Team,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` keys that competed in the given event.
   */
  getEventTeamsKeys(
    req: operations.GetEventTeamsKeysRequest,
    security: operations.GetEventTeamsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsKeysResponse =
        new operations.GetEventTeamsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventTeamsKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of `Team` objects that competed in the given event.
   */
  getEventTeamsSimple(
    req: operations.GetEventTeamsSimpleRequest,
    security: operations.GetEventTeamsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsSimpleResponse =
        new operations.GetEventTeamsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamSimples = utils.objectToClass(
              httpRes?.data,
              shared.TeamSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a key-value list of the event statuses for teams competing at the given event.
   */
  getEventTeamsStatuses(
    req: operations.GetEventTeamsStatusesRequest,
    security: operations.GetEventTeamsStatusesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTeamsStatusesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventTeamsStatusesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/teams/statuses",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventTeamsStatusesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTeamsStatusesResponse =
        new operations.GetEventTeamsStatusesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventTeamsStatuses200ApplicationJSONObject = {};
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getEventTeamsStatuses200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                shared.TeamEventStatus,
                resFieldDepth
              );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of events in the given year.
   */
  getEventsByYear(
    req: operations.GetEventsByYearRequest,
    security: operations.GetEventsByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventsByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventsByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/events/{year}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventsByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventsByYearResponse =
        new operations.GetEventsByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of event keys in the given year.
   */
  getEventsByYearKeys(
    req: operations.GetEventsByYearKeysRequest,
    security: operations.GetEventsByYearKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventsByYearKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventsByYearKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/events/{year}/keys", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventsByYearKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventsByYearKeysResponse =
        new operations.GetEventsByYearKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventsByYearKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of events in the given year.
   */
  getEventsByYearSimple(
    req: operations.GetEventsByYearSimpleRequest,
    security: operations.GetEventsByYearSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventsByYearSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventsByYearSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/events/{year}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventsByYearSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventsByYearSimpleResponse =
        new operations.GetEventsByYearSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.eventSimples = utils.objectToClass(
              httpRes?.data,
              shared.EventSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a key-value list of the event statuses for events this team has competed at in the given year.
   */
  getTeamEventsStatusesByYear(
    req: operations.GetTeamEventsStatusesByYearRequest,
    security: operations.GetTeamEventsStatusesByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventsStatusesByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventsStatusesByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/events/{year}/statuses",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventsStatusesByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventsStatusesByYearResponse =
        new operations.GetTeamEventsStatusesByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamEventsStatusesByYear200ApplicationJSONObject = {};
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getTeamEventsStatusesByYear200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                shared.TeamEventStatus,
                resFieldDepth
              );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects, paginated in groups of 500.
   */
  getTeams(
    req: operations.GetTeamsRequest,
    security: operations.GetTeamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/teams/{page_num}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsResponse = new operations.GetTeamsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teams = utils.objectToClass(
              httpRes?.data,
              shared.Team,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.
   */
  getTeamsByYear(
    req: operations.GetTeamsByYearRequest,
    security: operations.GetTeamsByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{year}/{page_num}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsByYearResponse =
        new operations.GetTeamsByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teams = utils.objectToClass(
              httpRes?.data,
              shared.Team,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list Team Keys that competed in the given year, paginated in groups of 500.
   */
  getTeamsByYearKeys(
    req: operations.GetTeamsByYearKeysRequest,
    security: operations.GetTeamsByYearKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsByYearKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsByYearKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{year}/{page_num}/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsByYearKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsByYearKeysResponse =
        new operations.GetTeamsByYearKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamsByYearKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.
   */
  getTeamsByYearSimple(
    req: operations.GetTeamsByYearSimpleRequest,
    security: operations.GetTeamsByYearSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsByYearSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsByYearSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{year}/{page_num}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsByYearSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsByYearSimpleResponse =
        new operations.GetTeamsByYearSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamSimples = utils.objectToClass(
              httpRes?.data,
              shared.TeamSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
   */
  getTeamsKeys(
    req: operations.GetTeamsKeysRequest,
    security: operations.GetTeamsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{page_num}/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsKeysResponse =
        new operations.GetTeamsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamsKeys200ApplicationJSONStrings = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of short form `Team_Simple` objects, paginated in groups of 500.
   */
  getTeamsSimple(
    req: operations.GetTeamsSimpleRequest,
    security: operations.GetTeamsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/teams/{page_num}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamsSimpleResponse =
        new operations.GetTeamsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamSimples = utils.objectToClass(
              httpRes?.data,
              shared.TeamSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
