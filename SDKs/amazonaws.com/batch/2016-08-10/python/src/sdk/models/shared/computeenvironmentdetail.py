"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cestate_enum as shared_cestate_enum
from ..shared import cestatus_enum as shared_cestatus_enum
from ..shared import cetype_enum as shared_cetype_enum
from ..shared import computeresource as shared_computeresource
from ..shared import eksconfiguration as shared_eksconfiguration
from ..shared import orchestrationtype_enum as shared_orchestrationtype_enum
from ..shared import updatepolicy as shared_updatepolicy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ComputeEnvironmentDetail:
    r"""An object that represents an Batch compute environment."""
    
    compute_environment_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computeEnvironmentArn') }})  
    compute_environment_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computeEnvironmentName') }})  
    compute_resources: Optional[shared_computeresource.ComputeResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computeResources'), 'exclude': lambda f: f is None }})  
    container_orchestration_type: Optional[shared_orchestrationtype_enum.OrchestrationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerOrchestrationType'), 'exclude': lambda f: f is None }})  
    ecs_cluster_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ecsClusterArn'), 'exclude': lambda f: f is None }})  
    eks_configuration: Optional[shared_eksconfiguration.EksConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eksConfiguration'), 'exclude': lambda f: f is None }})  
    service_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceRole'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_cestate_enum.CEStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_cestatus_enum.CEStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    status_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusReason'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_cetype_enum.CETypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    unmanagedv_cpus: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unmanagedvCpus'), 'exclude': lambda f: f is None }})  
    update_policy: Optional[shared_updatepolicy.UpdatePolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatePolicy'), 'exclude': lambda f: f is None }})  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})  
    