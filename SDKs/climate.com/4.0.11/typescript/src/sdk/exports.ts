/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * General data export endpoints.
 */
export class Exports {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve the binary contents of a processed export request.
   *
   * @remarks
   * Downloads larger than `5MiB` (`5242880 bytes`) in size must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB` (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).
   */
  fetchExportContentsById(
    req: operations.FetchExportContentsByIdRequest,
    security: operations.FetchExportContentsByIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchExportContentsByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchExportContentsByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v4/exports/{exportId}/contents",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchExportContentsByIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchExportContentsByIdResponse =
        new operations.FetchExportContentsByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 206:
          if (utils.matchContentType(contentType, `application/octet-stream`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 304:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
        case [400, 401, 403, 404, 409, 410, 416, 429, 500, 503].includes(
          httpRes?.status
        ):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve the status of an Export.
   *
   * @remarks
   * Check the status of an **Export** by ID.
   */
  fetchExportStatusById(
    req: operations.FetchExportStatusByIdRequest,
    security: operations.FetchExportStatusByIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchExportStatusByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchExportStatusByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v4/exports/{exportId}/status",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchExportStatusByIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchExportStatusByIdResponse =
        new operations.FetchExportStatusByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportStatus = utils.objectToClass(
              httpRes?.data,
              shared.ExportStatus
            );
          }
          break;
        case [400, 401, 403, 404, 429, 500, 503].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Initiate a new export request.
   *
   * @remarks
   * Step one in requesting a data product. The method will return an **Export** ID which the caller will use in subsequent `GET` requests.
   * The following `contentTypes` may be requested:
   *   * __application/vnd.climate.acrsi.geojson__ (Beta)
   *      Exports the planting activities accessible by the authenticated user and optionally filtered by resource owner
   *      as a [GeoJSON Feature Collection](https://tools.ietf.org/html/rfc7946#page-12).
   *
   *      The export request definition must contain the following properties:
   *        * plantingStartDate
   *        * plantingEndDate
   *        * resourceOwnerId
   *
   *      Requires `exports:read` and `plantingActivitySummary:read` scope.
   *
   *   * __application/vnd.climate.harvest.geojson__
   *      Exports the harvesting activities accessible by the authenticated user and optionally filtered by resource owner
   *      as a [GeoJSON Feature Collection](https://tools.ietf.org/html/rfc7946#page-12).
   *
   *      The export request definition must contain the following properties:
   *        * harvestStartDate
   *        * harvestEndDate
   *        * resourceOwnerId
   *
   *      Requires `exports:read` and `plantingActivitySummary:read` scope.
   */
  postExport(
    req: shared.Export,
    security: operations.PostExportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostExportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Export(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v4/exports";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostExportSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostExportResponse =
        new operations.PostExportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createdExport = utils.objectToClass(
              httpRes?.data,
              shared.CreatedExport
            );
          }
          break;
        case [400, 401, 403, 429, 500, 503].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
