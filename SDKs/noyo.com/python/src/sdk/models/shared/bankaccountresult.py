"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils

class BankAccountResultStatusEnum(str, Enum):
    r"""The bank account status"""
    CREATED = 'created'
    WIPED = 'wiped'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BankAccountResult:
    r"""Successful Response - Returns a single Bank Account"""
    
    account_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_number') }})
    r"""Account number"""  
    application_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('application_id') }})
    r"""Unique identifier of the associated application in Noyo"""  
    bank_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_name') }})
    r"""Name of the bank"""  
    created: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""The date the record was created"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier of the record in Noyo"""  
    is_checking: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_checking') }})
    r"""Whether the account is a checking account"""  
    modified: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified') }})
    r"""The date the record was last updated"""  
    routing_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routing_number') }})
    r"""Routing number"""  
    status: BankAccountResultStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The bank account status"""  
    version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})
    r"""Current version of the record"""  
    