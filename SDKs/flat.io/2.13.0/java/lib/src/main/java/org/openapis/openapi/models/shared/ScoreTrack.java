/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ScoreTrack - An audio track for a score
 */
public class ScoreTrack {
    /**
     * The creation date of the track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationDate")
    public OffsetDateTime creationDate;
    public ScoreTrack withCreationDate(OffsetDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    /**
     * The unique identifier of the track creator
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator")
    public String creator;
    public ScoreTrack withCreator(String creator) {
        this.creator = creator;
        return this;
    }
    
    /**
     * True if the track should be used as default audio source
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default")
    public Boolean default_;
    public ScoreTrack withDefault(Boolean default_) {
        this.default_ = default_;
        return this;
    }
    
    /**
     * The unique identifier of the score track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public ScoreTrack withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The unique identifier of the track when hosted on an external service.
     * For example, if the url is `https://www.youtube.com/watch?v=dQw4w9WgXcQ`, `mediaId` will be `dQw4w9WgXcQ`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaId")
    public String mediaId;
    public ScoreTrack withMediaId(String mediaId) {
        this.mediaId = mediaId;
        return this;
    }
    
    /**
     * The modification date of the track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modificationDate")
    public OffsetDateTime modificationDate;
    public ScoreTrack withModificationDate(OffsetDateTime modificationDate) {
        this.modificationDate = modificationDate;
        return this;
    }
    
    /**
     * The unique identifier of the score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("score")
    public String score;
    public ScoreTrack withScore(String score) {
        this.score = score;
        return this;
    }
    
    /**
     * State of the track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public ScoreTrackStateEnum state;
    public ScoreTrack withState(ScoreTrackStateEnum state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("synchronizationPoints")
    public ScoreTrackPoint[] synchronizationPoints;
    public ScoreTrack withSynchronizationPoints(ScoreTrackPoint[] synchronizationPoints) {
        this.synchronizationPoints = synchronizationPoints;
        return this;
    }
    
    /**
     * Title of the track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public ScoreTrack withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The type of an audio track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public ScoreTrackTypeEnum type;
    public ScoreTrack withType(ScoreTrackTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The URL of the track
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public ScoreTrack withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
