/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Define reusable message or web templates
 */
export class Templates {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create template
   */
  templatesCreate(
    req: operations.TemplatesCreateRequest,
    security: operations.TemplatesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TemplatesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TemplatesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{accountId}/templates",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "templateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TemplatesCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TemplatesCreateResponse =
        new operations.TemplatesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.templatesResponse = utils.objectToClass(
              httpRes?.data,
              shared.TemplatesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch template by ID
   */
  templatesFetch(
    req: operations.TemplatesFetchRequest,
    security: operations.TemplatesFetchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TemplatesFetchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TemplatesFetchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{accountId}/templates/{templateId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TemplatesFetchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TemplatesFetchResponse =
        new operations.TemplatesFetchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.templateResponse = utils.objectToClass(
              httpRes?.data,
              shared.TemplateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch templates
   */
  templatesFetchAll(
    req: operations.TemplatesFetchAllRequest,
    security: operations.TemplatesFetchAllSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TemplatesFetchAllResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TemplatesFetchAllRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{accountId}/templates",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TemplatesFetchAllSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TemplatesFetchAllResponse =
        new operations.TemplatesFetchAllResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.templatesResponse = utils.objectToClass(
              httpRes?.data,
              shared.TemplatesResponse
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a template
   */
  templatesRemove(
    req: operations.TemplatesRemoveRequest,
    security: operations.TemplatesRemoveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TemplatesRemoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TemplatesRemoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{accountId}/templates/{templateId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TemplatesRemoveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TemplatesRemoveResponse =
        new operations.TemplatesRemoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.templatesRemove200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TemplatesRemove200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a template
   */
  templatesUpdate(
    req: operations.TemplatesUpdateRequest,
    security: operations.TemplatesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TemplatesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TemplatesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/accounts/{accountId}/templates/{templateId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TemplatesUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TemplatesUpdateResponse =
        new operations.TemplatesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.templateResponse = utils.objectToClass(
              httpRes?.data,
              shared.TemplateResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
