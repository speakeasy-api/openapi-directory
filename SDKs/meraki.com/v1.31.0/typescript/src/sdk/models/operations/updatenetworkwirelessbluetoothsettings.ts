/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
 */
export enum UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum {
  NonUnique = "Non-unique",
  Unique = "Unique",
}

export class UpdateNetworkWirelessBluetoothSettingsRequestBody extends SpeakeasyBase {
  /**
   * Whether APs will advertise beacons.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "advertisingEnabled" })
  advertisingEnabled?: boolean;

  /**
   * The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "major" })
  major?: number;

  /**
   * The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
   */
  @SpeakeasyMetadata()
  @Expose({ name: "majorMinorAssignmentMode" })
  majorMinorAssignmentMode?: UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum;

  /**
   * The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minor" })
  minor?: number;

  /**
   * Whether APs will scan for Bluetooth enabled clients.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scanningEnabled" })
  scanningEnabled?: boolean;

  /**
   * The UUID to be used in the beacon identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class UpdateNetworkWirelessBluetoothSettingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateNetworkWirelessBluetoothSettingsRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * Successful operation
 */
export class UpdateNetworkWirelessBluetoothSettings200ApplicationJSON extends SpeakeasyBase {
  /**
   * Whether APs will advertise beacons.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "advertisingEnabled" })
  advertisingEnabled?: boolean;

  /**
   * Whether ESL is enabled on this network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eslEnabled" })
  eslEnabled?: boolean;

  /**
   * The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "major" })
  major?: number;

  /**
   * The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
   */
  @SpeakeasyMetadata()
  @Expose({ name: "majorMinorAssignmentMode" })
  majorMinorAssignmentMode?: string;

  /**
   * The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minor" })
  minor?: number;

  /**
   * Whether APs will scan for Bluetooth enabled clients.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scanningEnabled" })
  scanningEnabled?: boolean;

  /**
   * The UUID to be used in the beacon identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class UpdateNetworkWirelessBluetoothSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkWirelessBluetoothSettings200ApplicationJSONObject?: UpdateNetworkWirelessBluetoothSettings200ApplicationJSON;
}
