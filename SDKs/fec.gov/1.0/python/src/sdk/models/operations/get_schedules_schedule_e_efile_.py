"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import scheduleeefilepage as shared_scheduleeefilepage
from datetime import date
from enum import Enum
from typing import Optional

class GetSchedulesScheduleEEfileCandidateOfficeEnum(str, Enum):
    r"""Federal office candidate runs for: H, S or P"""
    UNKNOWN = ''
    H = 'H'
    S = 'S'
    P = 'P'

class GetSchedulesScheduleEEfileSupportOpposeIndicatorEnum(str, Enum):
    S = 'S'
    O = 'O'


@dataclasses.dataclass
class GetSchedulesScheduleEEfileRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    candidate_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'candidate_id', 'style': 'form', 'explode': True }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
    """  
    candidate_office: Optional[GetSchedulesScheduleEEfileCandidateOfficeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'candidate_office', 'style': 'form', 'explode': True }})
    r"""Federal office candidate runs for: H, S or P"""  
    candidate_office_district: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'candidate_office_district', 'style': 'form', 'explode': True }})
    r"""Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00."""  
    candidate_office_state: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'candidate_office_state', 'style': 'form', 'explode': True }})
    r"""US state or territory where a candidate runs for office"""  
    candidate_party: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'candidate_party', 'style': 'form', 'explode': True }})
    r"""Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party."""  
    candidate_search: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'candidate_search', 'style': 'form', 'explode': True }})
    r"""Search for candidates by candiate id or candidate first or last name"""  
    committee_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'committee_id', 'style': 'form', 'explode': True }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    filing_form: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filing_form', 'style': 'form', 'explode': True }})
    r"""The form where the underlying data comes from, for example, Form 1 would appear as F1:
        - F1   Statement of Organization
        - F1M  Notification of Multicandidate Status
        - F2   Statement of Candidacy
        - F3   Report of Receipts and Disbursements for an Authorized Committee
        - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
        - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
        - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
        - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
        - F5   Report of Independent Expenditures Made and Contributions Received
        - F6   48 Hour Notice of Contributions/Loans Received
        - F7   Report of Communication Costs by Corporations and Membership Organizations
        - F8   Debt Settlement Plan
        - F9   24 Hour Notice of Disbursements for Electioneering Communications
        - F13  Report of Donations Accepted for Inaugural Committee
        - F99  Miscellaneous Text
        - FRQ  Request for Additional Information
    """  
    image_number: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'image_number', 'style': 'form', 'explode': True }})
    r"""An unique identifier for each page where the electronic or paper filing is reported."""  
    is_notice: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'is_notice', 'style': 'form', 'explode': True }})
    r"""Record filed as 24- or 48-hour notice."""  
    max_dissemination_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_dissemination_date', 'style': 'form', 'explode': True }})
    r"""Selects all items distributed by this committee before this date"""  
    max_expenditure_amount: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_expenditure_amount', 'style': 'form', 'explode': True }})
    r"""Selects all items expended by this committee less than this amount"""  
    max_expenditure_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_expenditure_date', 'style': 'form', 'explode': True }})
    r"""Selects all items expended by this committee before this date"""  
    max_filed_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_filed_date', 'style': 'form', 'explode': True }})
    r"""Timestamp of electronic or paper record that FEC received"""  
    min_dissemination_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_dissemination_date', 'style': 'form', 'explode': True }})
    r"""Selects all items distributed by this committee after this date"""  
    min_expenditure_amount: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_expenditure_amount', 'style': 'form', 'explode': True }})
    r"""Selects all items expended by this committee greater than this amount"""  
    min_expenditure_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_expenditure_date', 'style': 'form', 'explode': True }})
    r"""Selects all items expended by this committee after this date"""  
    min_filed_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_filed_date', 'style': 'form', 'explode': True }})
    r"""Timestamp of electronic or paper record that FEC received"""  
    most_recent: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'most_recent', 'style': 'form', 'explode': True }})
    r"""The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (`null`) is always included."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""For paginating through results, starting at page 1"""  
    payee_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'payee_name', 'style': 'form', 'explode': True }})
    r"""Name of the entity that received the payment."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results returned per page. Defaults to 20."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order."""  
    sort_hide_null: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_hide_null', 'style': 'form', 'explode': True }})
    r"""Hide null values on sorted column(s)."""  
    sort_null_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_null_only', 'style': 'form', 'explode': True }})
    r"""Toggle that filters out all rows having sort column that is non-null"""  
    sort_nulls_last: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_nulls_last', 'style': 'form', 'explode': True }})
    r"""Toggle that sorts null values last"""  
    spender_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'spender_name', 'style': 'form', 'explode': True }})
    r"""The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records."""  
    support_oppose_indicator: Optional[list[GetSchedulesScheduleEEfileSupportOpposeIndicatorEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'support_oppose_indicator', 'style': 'form', 'explode': True }})
    r"""Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs."""  
    

@dataclasses.dataclass
class GetSchedulesScheduleEEfileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    schedule_e_efile_page: Optional[shared_scheduleeefilepage.ScheduleEEfilePage] = dataclasses.field(default=None)  
    