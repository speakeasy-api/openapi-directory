// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type WebinarUpdateMultipartSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum string

const (
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnumMinus1 WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum = "-1"
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnumOne    WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum = "1"
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnumTwo    WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum = "2"
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnumThree  WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum = "3"
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnumFour   WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum = "4"
)

func (e *WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum: %s", s)
	}
}

// WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
//
// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum string

const (
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnumOne   WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum = "1"
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnumTwo   WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum = "2"
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnumThree WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum = "3"
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnumFour  WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum = "4"
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnumFive  WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum = "5"
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnumSix   WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum = "6"
	WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnumSeven WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum = "7"
)

func (e *WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum: %s", s)
	}
}

// WebinarUpdateMultipartFormDataRecurrenceTypeEnum - Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type WebinarUpdateMultipartFormDataRecurrenceTypeEnum string

const (
	WebinarUpdateMultipartFormDataRecurrenceTypeEnumOne   WebinarUpdateMultipartFormDataRecurrenceTypeEnum = "1"
	WebinarUpdateMultipartFormDataRecurrenceTypeEnumTwo   WebinarUpdateMultipartFormDataRecurrenceTypeEnum = "2"
	WebinarUpdateMultipartFormDataRecurrenceTypeEnumThree WebinarUpdateMultipartFormDataRecurrenceTypeEnum = "3"
)

func (e *WebinarUpdateMultipartFormDataRecurrenceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = WebinarUpdateMultipartFormDataRecurrenceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateMultipartFormDataRecurrenceTypeEnum: %s", s)
	}
}

// WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum - This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
//
//	<br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum string

const (
	WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnumOne   WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum = "1"
	WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnumTwo   WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum = "2"
	WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnumThree WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum = "3"
	WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnumFour  WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum = "4"
	WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnumFive  WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum = "5"
	WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnumSix   WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum = "6"
	WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnumSeven WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum = "7"
)

func (e *WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum: %s", s)
	}
}

// WebinarUpdateMultipartFormDataRecurrence - Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
type WebinarUpdateMultipartFormDataRecurrence struct {
	// Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time `json:"end_date_time,omitempty"`
	// Select how many times the meeting should recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64 `json:"end_times,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64 `json:"monthly_day,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekEnum `json:"monthly_week,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
	//
	// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *WebinarUpdateMultipartFormDataRecurrenceMonthlyWeekDayEnum `json:"monthly_week_day,omitempty"`
	// Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
	//
	//
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type WebinarUpdateMultipartFormDataRecurrenceTypeEnum `json:"type"`
	// This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	//  <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	WeeklyDays *WebinarUpdateMultipartFormDataRecurrenceWeeklyDaysEnum `json:"weekly_days,omitempty"`
}

type WebinarUpdateMultipartFormDataTrackingFields struct {
	// Tracking fields type
	Field *string `json:"field,omitempty"`
	// Tracking fields value
	Value *string `json:"value,omitempty"`
}

// WebinarUpdateMultipartFormDataTypeEnum1 - Webinar Types:<br>`5` - webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
type WebinarUpdateMultipartFormDataTypeEnum1 string

const (
	WebinarUpdateMultipartFormDataTypeEnum1Five WebinarUpdateMultipartFormDataTypeEnum1 = "5"
	WebinarUpdateMultipartFormDataTypeEnum1Six  WebinarUpdateMultipartFormDataTypeEnum1 = "6"
	WebinarUpdateMultipartFormDataTypeEnum1Nine WebinarUpdateMultipartFormDataTypeEnum1 = "9"
)

func (e *WebinarUpdateMultipartFormDataTypeEnum1) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "9":
		*e = WebinarUpdateMultipartFormDataTypeEnum1(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarUpdateMultipartFormDataTypeEnum1: %s", s)
	}
}

// WebinarUpdateMultipartFormData3 - Base webinar object for sessions.
type WebinarUpdateMultipartFormData3 struct {
	// Webinar description.
	Agenda *string `multipartForm:"name=agenda"`
	// Webinar duration (minutes). Used for scheduled webinar only.
	Duration *int64 `multipartForm:"name=duration"`
	// [Webinar passcode](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords). By default, passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ * !] and can have a maximum of 10 characters.
	//
	// **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
	//
	// If "**Require a passcode when scheduling new meetings**" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the passcode field will be autogenerated for the Webinar in the response even if it is not provided in the API request. <br><br>
	//
	//
	//
	//
	//
	//
	//
	//
	Password *string `multipartForm:"name=password"`
	// Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
	Recurrence *WebinarUpdateMultipartFormDataRecurrence `multipartForm:"name=recurrence,json"`
	Settings   interface{}                               `multipartForm:"name=settings,json"`
	// Webinar start time, in the format "yyyy-MM-dd'T'HH:mm:ss'Z'." Should be in GMT time. In the format "yyyy-MM-dd'T'HH:mm:ss." This should be in local time and the timezone should be specified. Only used for scheduled webinars and recurring webinars with a fixed time.
	StartTime *time.Time `multipartForm:"name=start_time"`
	// Time zone to format start_time. For example, "America/Los_Angeles". For scheduled meetings only. Please reference our [time zone](#timezones) list for supported time zones and their formats.
	Timezone *string `multipartForm:"name=timezone"`
	// Webinar topic.
	Topic *string `multipartForm:"name=topic"`
	// Tracking fields
	TrackingFields []WebinarUpdateMultipartFormDataTrackingFields `multipartForm:"name=tracking_fields,json"`
	// Webinar Types:<br>`5` - webinar.<br>`6` - Recurring webinar with no fixed time.<br>`9` - Recurring webinar with a fixed time.
	Type *WebinarUpdateMultipartFormDataTypeEnum1 `multipartForm:"name=type"`
}

type WebinarUpdateMultipartRequest struct {
	// Webinar.
	RequestBody WebinarUpdateMultipartFormData3 `request:"mediaType=multipart/form-data"`
	// Webinar occurrence id. Support change of agenda, start_time, duration, settings: {host_video, panelist_video, hd_video, watermark, auto_recording}
	OccurrenceID *string `queryParam:"style=form,explode=true,name=occurrence_id"`
	// The webinar ID in "**long**" format(represented as int64 data type in JSON).
	WebinarID int64 `pathParam:"style=simple,explode=false,name=webinarId"`
}

type WebinarUpdateMultipartResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
