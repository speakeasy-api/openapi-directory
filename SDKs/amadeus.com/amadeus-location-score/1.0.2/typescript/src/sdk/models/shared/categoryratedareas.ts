/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * night life category
 */
export class CategoryRatedAreasCategoryScoresNightLife extends SpeakeasyBase {
  /**
   * score of nigh life possibility from 0 (nothing to do at night) to 100 (many night activities to enjoy)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "overall" })
  overall?: number;
}

/**
 * restaurant category
 */
export class CategoryRatedAreasCategoryScoresRestaurant extends SpeakeasyBase {
  /**
   * score of eating possibility from 0 (no place to eat) to 100 (many restaurants to enjoy)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "overall" })
  overall?: number;

  /**
   * score of vegetatian eating possibility from 0 (no place to eat vegetatian) to 100 (many restaurants to enjoy)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vegetarian" })
  vegetarian?: number;
}

/**
 * shopping category
 */
export class CategoryRatedAreasCategoryScoresShopping extends SpeakeasyBase {
  /**
   * score of luxury shopping possibility from 0 (no luxury shop) to 100 (many luxury shops to enjoy)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "luxury" })
  luxury?: number;

  /**
   * score of shopping possibility from 0 (no shop) to 100 (many shops to enjoy)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "overall" })
  overall?: number;
}

/**
 * sight category
 */
export class CategoryRatedAreasCategoryScoresSight extends SpeakeasyBase {
  /**
   * score of outdoor activity possibility from 0 (no outdoor spaces) to 100 (many parks or beaches to enjoy)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "beachAndPark" })
  beachAndPark?: number;

  /**
   * score of historical discovery possibility from 0 (no historical site) to 100 (many historical site to enjoy)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "historical" })
  historical?: number;

  /**
   * score of sight seeing possibility from 0 (nothing to see) to 100 (many sceneries to enjoy)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "overall" })
  overall?: number;
}

/**
 * category scoring of the location
 */
export class CategoryRatedAreasCategoryScores extends SpeakeasyBase {
  /**
   * night life category
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nightLife" })
  @Type(() => CategoryRatedAreasCategoryScoresNightLife)
  nightLife?: CategoryRatedAreasCategoryScoresNightLife;

  /**
   * restaurant category
   */
  @SpeakeasyMetadata()
  @Expose({ name: "restaurant" })
  @Type(() => CategoryRatedAreasCategoryScoresRestaurant)
  restaurant?: CategoryRatedAreasCategoryScoresRestaurant;

  /**
   * shopping category
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shopping" })
  @Type(() => CategoryRatedAreasCategoryScoresShopping)
  shopping?: CategoryRatedAreasCategoryScoresShopping;

  /**
   * sight category
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sight" })
  @Type(() => CategoryRatedAreasCategoryScoresSight)
  sight?: CategoryRatedAreasCategoryScoresSight;
}

/**
 * Geographic coordinates describing the position of any location on the surface of Earth
 */
export class CategoryRatedAreasGeoCode extends SpeakeasyBase {
  /**
   * Latitude of the position expressed in decimal degrees (WSG 84), e.g. 6.244203. A positive value denotes northern hemisphere or the equator, and a negative value denotes southern hemisphere. The number of digits to represent the precision of the coordinate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude?: number;

  /**
   * Longitude of the position expressed in decimal degrees (WSG 84), e.g. -75.581211. A positive value denotes east longitude or the prime meridian, and a negative value denotes west longitude.  The number of digits to represent the precision of the coordinate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude?: number;
}

/**
 * Identification of a specific version of a resource
 */
export class CategoryRatedAreas extends SpeakeasyBase {
  /**
   * category scoring of the location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "categoryScores" })
  @Type(() => CategoryRatedAreasCategoryScores)
  categoryScores?: CategoryRatedAreasCategoryScores;

  /**
   * Geographic coordinates describing the position of any location on the surface of Earth
   */
  @SpeakeasyMetadata()
  @Expose({ name: "geoCode" })
  @Type(() => CategoryRatedAreasGeoCode)
  geoCode?: CategoryRatedAreasGeoCode;

  /**
   * Radius of the area in meters
   */
  @SpeakeasyMetadata()
  @Expose({ name: "radius" })
  radius?: number;

  /**
   * Type of the manipulatd resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
