"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudIntegrationsV1alphaFailurePolicyRetryStrategyEnum(str, Enum):
    r"""Defines what happens to the task upon failure."""
    RETRY_STRATEGY_UNSPECIFIED = 'RETRY_STRATEGY_UNSPECIFIED'
    IGNORE = 'IGNORE'
    NONE = 'NONE'
    FATAL = 'FATAL'
    FIXED_INTERVAL = 'FIXED_INTERVAL'
    LINEAR_BACKOFF = 'LINEAR_BACKOFF'
    EXPONENTIAL_BACKOFF = 'EXPONENTIAL_BACKOFF'
    RESTART_INTEGRATION_WITH_BACKOFF = 'RESTART_INTEGRATION_WITH_BACKOFF'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudIntegrationsV1alphaFailurePolicy:
    r"""Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied)."""
    
    interval_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intervalTime'), 'exclude': lambda f: f is None }})
    r"""Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the initial interval in seconds for backoff."""  
    max_retries: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxRetries'), 'exclude': lambda f: f is None }})
    r"""Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the number of times the task will be retried if failed."""  
    retry_strategy: Optional[GoogleCloudIntegrationsV1alphaFailurePolicyRetryStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retryStrategy'), 'exclude': lambda f: f is None }})
    r"""Defines what happens to the task upon failure."""  
    