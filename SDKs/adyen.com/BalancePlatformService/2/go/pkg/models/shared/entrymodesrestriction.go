// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EntryModesRestrictionValueEnum string

const (
	EntryModesRestrictionValueEnumBarcode     EntryModesRestrictionValueEnum = "barcode"
	EntryModesRestrictionValueEnumChip        EntryModesRestrictionValueEnum = "chip"
	EntryModesRestrictionValueEnumCof         EntryModesRestrictionValueEnum = "cof"
	EntryModesRestrictionValueEnumContactless EntryModesRestrictionValueEnum = "contactless"
	EntryModesRestrictionValueEnumMagstripe   EntryModesRestrictionValueEnum = "magstripe"
	EntryModesRestrictionValueEnumManual      EntryModesRestrictionValueEnum = "manual"
	EntryModesRestrictionValueEnumOcr         EntryModesRestrictionValueEnum = "ocr"
	EntryModesRestrictionValueEnumServer      EntryModesRestrictionValueEnum = "server"
	EntryModesRestrictionValueEnumUnknown     EntryModesRestrictionValueEnum = "unknown"
)

func (e *EntryModesRestrictionValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "barcode":
		fallthrough
	case "chip":
		fallthrough
	case "cof":
		fallthrough
	case "contactless":
		fallthrough
	case "magstripe":
		fallthrough
	case "manual":
		fallthrough
	case "ocr":
		fallthrough
	case "server":
		fallthrough
	case "unknown":
		*e = EntryModesRestrictionValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EntryModesRestrictionValueEnum: %s", s)
	}
}

type EntryModesRestriction struct {
	// Defines how the condition must be evaluated.
	Operation string `json:"operation"`
	// List of point-of-sale entry modes.
	//
	// Possible values: **barcode**, **chip**, **cof**, **contactless**, **magstripe**, **manual**, **ocr**, **server**.
	//
	//
	Value []EntryModesRestrictionValueEnum `json:"value,omitempty"`
}
