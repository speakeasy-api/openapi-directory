"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CreativeFields:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_creative_fields_delete(self, request: operations.DfareportingCreativeFieldsDeleteRequest, security: operations.DfareportingCreativeFieldsDeleteSecurity) -> operations.DfareportingCreativeFieldsDeleteResponse:
        r"""Deletes an existing creative field."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCreativeFieldsDeleteRequest, base_url, '/userprofiles/{profileId}/creativeFields/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingCreativeFieldsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCreativeFieldsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dfareporting_creative_fields_get(self, request: operations.DfareportingCreativeFieldsGetRequest, security: operations.DfareportingCreativeFieldsGetSecurity) -> operations.DfareportingCreativeFieldsGetResponse:
        r"""Gets one creative field by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCreativeFieldsGetRequest, base_url, '/userprofiles/{profileId}/creativeFields/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingCreativeFieldsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCreativeFieldsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreativeField])
                res.creative_field = out

        return res

    def dfareporting_creative_fields_insert(self, request: operations.DfareportingCreativeFieldsInsertRequest, security: operations.DfareportingCreativeFieldsInsertSecurity) -> operations.DfareportingCreativeFieldsInsertResponse:
        r"""Inserts a new creative field."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCreativeFieldsInsertRequest, base_url, '/userprofiles/{profileId}/creativeFields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "creative_field", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingCreativeFieldsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCreativeFieldsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreativeField])
                res.creative_field = out

        return res

    def dfareporting_creative_fields_list(self, request: operations.DfareportingCreativeFieldsListRequest, security: operations.DfareportingCreativeFieldsListSecurity) -> operations.DfareportingCreativeFieldsListResponse:
        r"""Retrieves a list of creative fields, possibly filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCreativeFieldsListRequest, base_url, '/userprofiles/{profileId}/creativeFields', request)
        
        query_params = utils.get_query_params(operations.DfareportingCreativeFieldsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCreativeFieldsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreativeFieldsListResponse])
                res.creative_fields_list_response = out

        return res

    def dfareporting_creative_fields_patch(self, request: operations.DfareportingCreativeFieldsPatchRequest, security: operations.DfareportingCreativeFieldsPatchSecurity) -> operations.DfareportingCreativeFieldsPatchResponse:
        r"""Updates an existing creative field. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCreativeFieldsPatchRequest, base_url, '/userprofiles/{profileId}/creativeFields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "creative_field", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingCreativeFieldsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCreativeFieldsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreativeField])
                res.creative_field = out

        return res

    def dfareporting_creative_fields_update(self, request: operations.DfareportingCreativeFieldsUpdateRequest, security: operations.DfareportingCreativeFieldsUpdateSecurity) -> operations.DfareportingCreativeFieldsUpdateResponse:
        r"""Updates an existing creative field."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCreativeFieldsUpdateRequest, base_url, '/userprofiles/{profileId}/creativeFields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "creative_field", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingCreativeFieldsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCreativeFieldsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreativeField])
                res.creative_field = out

        return res

    