// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetUserUsernameTokenKindKindEnum - Token type
type GetUserUsernameTokenKindKindEnum string

const (
	GetUserUsernameTokenKindKindEnumAccess        GetUserUsernameTokenKindKindEnum = "'access'"
	GetUserUsernameTokenKindKindEnumRefresh       GetUserUsernameTokenKindKindEnum = "'refresh'"
	GetUserUsernameTokenKindKindEnumAuthorization GetUserUsernameTokenKindKindEnum = "'authorization'"
	GetUserUsernameTokenKindKindEnumID            GetUserUsernameTokenKindKindEnum = "'id'"
	GetUserUsernameTokenKindKindEnumSelfie        GetUserUsernameTokenKindKindEnum = "'selfie'"
	GetUserUsernameTokenKindKindEnumPlain         GetUserUsernameTokenKindKindEnum = "'plain'"
)

func (e *GetUserUsernameTokenKindKindEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "'access'":
		fallthrough
	case "'refresh'":
		fallthrough
	case "'authorization'":
		fallthrough
	case "'id'":
		fallthrough
	case "'selfie'":
		fallthrough
	case "'plain'":
		*e = GetUserUsernameTokenKindKindEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUserUsernameTokenKindKindEnum: %s", s)
	}
}

type GetUserUsernameTokenKindPathParams struct {
	// Token type
	Kind GetUserUsernameTokenKindKindEnum `pathParam:"style=simple,explode=false,name=kind"`
	// A username or email.
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

type GetUserUsernameTokenKindQueryParams struct {
	// OpenID Connect scope
	Scope *string `queryParam:"style=form,explode=true,name=scope"`
}

type GetUserUsernameTokenKindRequest struct {
	PathParams  GetUserUsernameTokenKindPathParams
	QueryParams GetUserUsernameTokenKindQueryParams
}

type GetUserUsernameTokenKindResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
