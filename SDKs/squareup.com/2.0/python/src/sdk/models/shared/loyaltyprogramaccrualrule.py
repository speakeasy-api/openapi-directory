"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import money as shared_money
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LoyaltyProgramAccrualRule:
    r"""Defines an accrual rule, which is how buyers can earn points."""
    
    accrual_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accrual_type') }})
    r"""The type of the accrual rule that defines how buyers can earn points."""  
    catalog_object_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalog_object_id'), 'exclude': lambda f: f is None }})
    r"""When the accrual rule is item-based or category-based, this field specifies the ID
    of the [catalog object](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) that buyers can purchase to earn points. 
    If `accrual_type` is `ITEM_VARIATION`, the object is an item variation. 
    If `accrual_type` is `CATEGORY`, the object is a category.
    """  
    excluded_category_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excluded_category_ids'), 'exclude': lambda f: f is None }})
    r"""When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field
    lists the IDs of any `CATEGORY` catalog objects that are excluded from points accrual. 
    
    You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects) 
    endpoint to retrieve information about the excluded categories.
    """  
    excluded_item_variation_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excluded_item_variation_ids'), 'exclude': lambda f: f is None }})
    r"""When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field
    lists the IDs of any `ITEM_VARIATION` catalog objects that are excluded from points accrual. 
    
    You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects) 
    endpoint to retrieve information about the excluded item variations.
    """  
    points: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('points'), 'exclude': lambda f: f is None }})
    r"""The number of points that
    buyers earn based on the `accrual_type`.
    """  
    spend_amount_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spend_amount_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    visit_minimum_amount_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visit_minimum_amount_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    