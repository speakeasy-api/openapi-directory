/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * # Overview
 * 
 * The ContentGroove Developer API enables you to add the power of ContentGroove's video AI to your own applications and workflows.
 * 
 * Webhooks are a way for ContentGroove to send video information
 * to your application, to update your system and/or trigger other business processes.
 * 
 * You can use Webhooks and the Developer API separately or together.
 * 
 * # Getting Started with Webhooks
 * 
 * - Sign up for an account at [app.contentgroove.com](https://app.contentgroove.com)
 * - Read "Using Webhooks" on the [API Reference page](https://developers.contentgroove.com/api_reference)
 * - Visit the [Webhooks page](https://app.contentgroove.com/webhook_subscriptions) and create a new webhook
 * 
 * # Using Webhooks
 * 
 * Webhooks, also known as callbacks, are a way for ContentGroove to notify your application as soon as possible after an event has occurred in ContentGroove.
 * For example after a media completes processing, ContentGroove can use a webhook to notify your application with information about the video: Suggested clips, transcription, and so on.
 * You can use the information sent to update your system and/or use the
 * webhook to trigger other business processes.
 * 
 * The webhook request is sent as an HTTP POST containing a payload of JSON-formatted data.
 * For the details of the payload format see the "CALLBACKS" sections below.
 * 
 * When your application receives the webhook request, it must respond with
 * a 200 HTTP status code (success).
 * If a 200 HTTP status code is not returned,
 * ContentGroove will assume that the webhook was not delivered and
 * will retry a limited number of times, using an exponential backoff algorithm.
 * 
 * ContentGroove makes a best effort to attempt to send the webhook at
 * least once.
 * Applications receiving webhooks must tolerate the
 * possibility of a single webhook payload being sent more than once
 * (idempotent behavior).
 * Applications receiving webhooks should tolerate the possibility that
 * a webhook could not be delivered
 * (for example your application was down when delivery was attempted).
 * 
 * # Getting Started with the Developer API
 * 
 * - Sign up for an account at [app.contentgroove.com](https://app.contentgroove.com)
 * - Visit the [API Keys page](https://app.contentgroove.com/api_keys)
 *   - Create a new API Key then copy and save the value.
 *     &gt; \u26a0\ufe0f **IMPORTANT**: This API Key is intended only for use on the server side. Be sure never to use a server-side API Key in client-side (web, mobile, or otherwise) code. \u26a0\ufe0f
 * - View all available endpoints, and try the API, on our [API Reference page](https://developers.contentgroove.com/api_reference)
 * 
 * # Using the Developer API
 * 
 * - Create a new media (video or audio) in ContentGroove
 *   - If the video or audio is available from a URL, you can create a media by providing the `source_url` parameter. ContentGroove will fetch the video or audio from the URL if possible.
 *   - Or, you can create a media from a video or audio file which you upload directly to ContentGroove (see File Uploading section below).
 * - After the new media is created, at first it will be in a "processing" state.
 *   Depending on the size and duration of the video or audio file, it will take some time for processing to complete.
 *   - You can use ContentGroove Webhooks to be notified immediately when processing has completed. (Details coming soon.)
 *   - You can also use the API to read the state of the media, to determine if the media has completed processing yet.
 * - After the media has completed processing, you can access all of these details about the media:
 *   - The media name and description
 *   - The transcription of spoken words
 *   - Topics and keywords which were discussed in the transcription
 *   - Suggested video clips are automatically created
 * - In addition to the automatically created video clips, you can create more video clips from the media
 * 
 * # Response Codes
 * 
 * The following is a comprehensive list of the status codes you may receive while using the ContentGroove API:
 * 
 * - 200 "Ok"
 *   - The request was valid
 * - 400 "Bad Request
 *   - This is returned when there was a problem parsing the JSON body of your request if you supplied the 'Content-Type': 'application/json' header, or if your request is missing the 'Content-Type' header altogether
 * - 401 "Unauthorized"
 *   - This is returned when you are attempting to perform an action on a resource that you are not authorized to do
 * - 402 "Payment Required"
 *   - This is returned when you are attempting to perform an action that would push your account above a usage limit. You can view your usage at: https://app.contentgroove.com/quota_usage
 * - 404 "Not Found"
 *   - This is returned when the resource you are trying to view does not exist
 * - 429 "Too Many Requests"
 *   - This is returned when you have performed too many requests within a given period of time
 * - 500 "Internal Server Error"
 *   - This is returned when your request was valid but there was a problem on our end
 * 
 * # File Uploading
 * 
 * - Step 1: Make a GET request to the direct uploads URL endpoint (/api/v1/direct_uploads) to receive an upload URL to upload the file to and an upload id.
 * - Step 2: Make a PUT request with the file as the body to the upload URL received in step 1. The response will have a 200 status with no body if the upload is successful.
 *   ```
 *   curl -T /path/to/file upload_url
 *   ```
 * - Step 3: After uploading the file to the upload URL, make a POST request to the create medias endpoint (/api/v1/medias), with the upload id and optionally a name and description for the new media.
 *   &gt; At this time, file uploads are limited to 5gb per file.
 * 
 * # Allowed media types
 * 
 * Video:
 * 
 * - Supported: Most common video formats and codecs are supported.
 * - Recommended: mp4
 * 
 * Audio:
 * 
 * - Supported: aac, mp3, flac, ogg, wav, and wma
 * - Recommended: aac
 * 
 * # Authentication
 * 
 * You can use the API Key to authenticate your API requests using any of these methods. (Replace abc123 with your actual API Key.)
 * 
 * - Request header `Authorization: Bearer abc123`
 * - Request header `X-API-KEY: abc123`
 * - Query parameter `api_key=abc123`
 *   &gt; \u26a0\ufe0f **IMPORTANT**: This API Key is intended only for use on the server side. Be sure never to use a server-side API Key in client-side (web, mobile, or otherwise) code. \u26a0\ufe0f
 * 
 * # Link to openapi.json spec
 * 
 * - https://api.contentgroove.com/api-docs/v1/openapi.json
 * 
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * V1 API server
         */
        "https://api.contentgroove.com/api/v1",
	};
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
	}

    /**
     * create clip
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateClipResponse createClip(org.openapis.openapi.models.operations.CreateClipRequestBody request, org.openapis.openapi.models.operations.CreateClipSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/clips");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateClipResponse res = new org.openapis.openapi.models.operations.CreateClipResponse(contentType, httpRes.statusCode()) {{
            clipResponseObject = null;
            unauthorizedErrorResponseObject = null;
            paymentRequiredErrorResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ClipResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ClipResponseObject.class);
                res.clipResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UnauthorizedErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UnauthorizedErrorResponseObject.class);
                res.unauthorizedErrorResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 402) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PaymentRequiredErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PaymentRequiredErrorResponseObject.class);
                res.paymentRequiredErrorResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }

    /**
     * create media
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateMediaResponse createMedia(org.openapis.openapi.models.operations.CreateMediaRequestBody request, org.openapis.openapi.models.operations.CreateMediaSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/medias");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateMediaResponse res = new org.openapis.openapi.models.operations.CreateMediaResponse(contentType, httpRes.statusCode()) {{
            mediaResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaResponseObject.class);
                res.mediaResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 402) {
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }

    /**
     * create webhook subscription
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateWebhookSubscriptionResponse createWebhookSubscription(org.openapis.openapi.models.operations.CreateWebhookSubscriptionRequestBody request, org.openapis.openapi.models.operations.CreateWebhookSubscriptionSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/webhook_subscriptions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWebhookSubscriptionResponse res = new org.openapis.openapi.models.operations.CreateWebhookSubscriptionResponse(contentType, httpRes.statusCode()) {{
            webhookSubscriptionResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WebhookSubscriptionResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WebhookSubscriptionResponseObject.class);
                res.webhookSubscriptionResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }

    /**
     * delete clip
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteClipByIdResponse deleteClipById(org.openapis.openapi.models.operations.DeleteClipByIdRequest request, org.openapis.openapi.models.operations.DeleteClipByIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteClipByIdRequest.class, baseUrl, "/clips/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteClipByIdResponse res = new org.openapis.openapi.models.operations.DeleteClipByIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 429) {
        }

        return res;
    }

    /**
     * delete media
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteMediaByIdResponse deleteMediaById(org.openapis.openapi.models.operations.DeleteMediaByIdRequest request, org.openapis.openapi.models.operations.DeleteMediaByIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteMediaByIdRequest.class, baseUrl, "/medias/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteMediaByIdResponse res = new org.openapis.openapi.models.operations.DeleteMediaByIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 429) {
        }

        return res;
    }

    /**
     * delete webhook subscription
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteWebhookSubscriptionByIdResponse deleteWebhookSubscriptionById(org.openapis.openapi.models.operations.DeleteWebhookSubscriptionByIdRequest request, org.openapis.openapi.models.operations.DeleteWebhookSubscriptionByIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWebhookSubscriptionByIdRequest.class, baseUrl, "/webhook_subscriptions/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWebhookSubscriptionByIdResponse res = new org.openapis.openapi.models.operations.DeleteWebhookSubscriptionByIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204 || httpRes.statusCode() == 401 || httpRes.statusCode() == 404 || httpRes.statusCode() == 429) {
        }

        return res;
    }

    /**
     * show clip
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetClipByIdResponse getClipById(org.openapis.openapi.models.operations.GetClipByIdRequest request, org.openapis.openapi.models.operations.GetClipByIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetClipByIdRequest.class, baseUrl, "/clips/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetClipByIdResponse res = new org.openapis.openapi.models.operations.GetClipByIdResponse(contentType, httpRes.statusCode()) {{
            clipResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ClipResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ClipResponseObject.class);
                res.clipResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }

    /**
     * list clips
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetClipsResponse getClips(org.openapis.openapi.models.operations.GetClipsRequest request, org.openapis.openapi.models.operations.GetClipsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/clips");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetClipsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetClipsResponse res = new org.openapis.openapi.models.operations.GetClipsResponse(contentType, httpRes.statusCode()) {{
            clipsResponseObject = null;
            unauthorizedErrorResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ClipsResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ClipsResponseObject.class);
                res.clipsResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UnauthorizedErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UnauthorizedErrorResponseObject.class);
                res.unauthorizedErrorResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }

    /**
     * show media
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetMediaByIdResponse getMediaById(org.openapis.openapi.models.operations.GetMediaByIdRequest request, org.openapis.openapi.models.operations.GetMediaByIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetMediaByIdRequest.class, baseUrl, "/medias/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetMediaByIdResponse res = new org.openapis.openapi.models.operations.GetMediaByIdResponse(contentType, httpRes.statusCode()) {{
            mediaResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaResponseObject.class);
                res.mediaResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }

    /**
     * list medias
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetMediasResponse getMedias(org.openapis.openapi.models.operations.GetMediasRequest request, org.openapis.openapi.models.operations.GetMediasSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/medias");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetMediasRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetMediasResponse res = new org.openapis.openapi.models.operations.GetMediasResponse(contentType, httpRes.statusCode()) {{
            mediasResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediasResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediasResponseObject.class);
                res.mediasResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }

    /**
     * prepare presigned upload url
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetUploadUrlResponse getUploadUrl(org.openapis.openapi.models.operations.GetUploadUrlSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/direct_uploads");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetUploadUrlResponse res = new org.openapis.openapi.models.operations.GetUploadUrlResponse(contentType, httpRes.statusCode()) {{
            directUploadResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.DirectUploadResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.DirectUploadResponseObject.class);
                res.directUploadResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }

    /**
     * show webhook subscription
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetWebhookSubscriptionByIdResponse getWebhookSubscriptionById(org.openapis.openapi.models.operations.GetWebhookSubscriptionByIdRequest request, org.openapis.openapi.models.operations.GetWebhookSubscriptionByIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetWebhookSubscriptionByIdRequest.class, baseUrl, "/webhook_subscriptions/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetWebhookSubscriptionByIdResponse res = new org.openapis.openapi.models.operations.GetWebhookSubscriptionByIdResponse(contentType, httpRes.statusCode()) {{
            webhookSubscriptionResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WebhookSubscriptionResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WebhookSubscriptionResponseObject.class);
                res.webhookSubscriptionResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 404) {
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }

    /**
     * list webhook subscriptions
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetWebhookSubscriptionsResponse getWebhookSubscriptions(org.openapis.openapi.models.operations.GetWebhookSubscriptionsRequest request, org.openapis.openapi.models.operations.GetWebhookSubscriptionsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/webhook_subscriptions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetWebhookSubscriptionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetWebhookSubscriptionsResponse res = new org.openapis.openapi.models.operations.GetWebhookSubscriptionsResponse(contentType, httpRes.statusCode()) {{
            webhookSubscriptionsResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WebhookSubscriptionsResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WebhookSubscriptionsResponseObject.class);
                res.webhookSubscriptionsResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }

    /**
     * update clip
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateClipByIdResponse updateClipById(org.openapis.openapi.models.operations.UpdateClipByIdRequest request, org.openapis.openapi.models.operations.UpdateClipByIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateClipByIdRequest.class, baseUrl, "/clips/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateClipByIdResponse res = new org.openapis.openapi.models.operations.UpdateClipByIdResponse(contentType, httpRes.statusCode()) {{
            clipResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ClipResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ClipResponseObject.class);
                res.clipResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }

    /**
     * update media
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateMediaByIdResponse updateMediaById(org.openapis.openapi.models.operations.UpdateMediaByIdRequest request, org.openapis.openapi.models.operations.UpdateMediaByIdSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateMediaByIdRequest.class, baseUrl, "/medias/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateMediaByIdResponse res = new org.openapis.openapi.models.operations.UpdateMediaByIdResponse(contentType, httpRes.statusCode()) {{
            mediaResponseObject = null;
            tooManyRequestsErrorResponseObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MediaResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MediaResponseObject.class);
                res.mediaResponseObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
        }
        else if (httpRes.statusCode() == 429) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TooManyRequestsErrorResponseObject.class);
                res.tooManyRequestsErrorResponseObject = out;
            }
        }

        return res;
    }
}