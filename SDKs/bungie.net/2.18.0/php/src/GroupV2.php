<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class GroupV2 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2AbdicateFoundershipRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2AbdicateFoundershipResponse
     */
	public function groupV2AbdicateFoundership(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2AbdicateFoundershipRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2AbdicateFoundershipResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2AbdicateFoundershipRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2AbdicateFoundershipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Add a new optional conversation/chat channel. Requires admin permissions to the group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2AddOptionalConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2AddOptionalConversationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2AddOptionalConversationResponse
     */
	public function groupV2AddOptionalConversation(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2AddOptionalConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2AddOptionalConversationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2AddOptionalConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/OptionalConversations/Add/', \OpenAPI\OpenAPI\Models\Operations\GroupV2AddOptionalConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2AddOptionalConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Approve all of the pending users for the given group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2ApproveAllPendingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2ApproveAllPendingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2ApproveAllPendingResponse
     */
	public function groupV2ApproveAllPending(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2ApproveAllPendingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2ApproveAllPendingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2ApproveAllPendingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/ApproveAll/', \OpenAPI\OpenAPI\Models\Operations\GroupV2ApproveAllPendingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2ApproveAllPendingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Approve the given membershipId to join the group/clan as long as they have applied.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingResponse
     */
	public function groupV2ApprovePending(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Approve all of the pending users for the given group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingForListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingForListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingForListResponse
     */
	public function groupV2ApprovePendingForList(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingForListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingForListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingForListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/ApproveList/', \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingForListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2ApprovePendingForListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Bans the requested member from the requested group for the specified period of time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2BanMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2BanMemberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2BanMemberResponse
     */
	public function groupV2BanMember(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2BanMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2BanMemberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2BanMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/', \OpenAPI\OpenAPI\Models\Operations\GroupV2BanMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2BanMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Deny all of the pending users for the given group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyAllPendingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyAllPendingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyAllPendingResponse
     */
	public function groupV2DenyAllPending(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyAllPendingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyAllPendingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyAllPendingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/DenyAll/', \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyAllPendingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyAllPendingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Deny all of the pending users for the given group that match the passed-in .
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyPendingForListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyPendingForListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyPendingForListResponse
     */
	public function groupV2DenyPendingForList(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyPendingForListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyPendingForListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyPendingForListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/DenyList/', \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyPendingForListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2DenyPendingForListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Edit an existing group's clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2EditClanBannerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2EditClanBannerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2EditClanBannerResponse
     */
	public function groupV2EditClanBanner(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2EditClanBannerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2EditClanBannerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2EditClanBannerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/EditClanBanner/', \OpenAPI\OpenAPI\Models\Operations\GroupV2EditClanBannerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2EditClanBannerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2EditFounderOptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2EditFounderOptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2EditFounderOptionsResponse
     */
	public function groupV2EditFounderOptions(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2EditFounderOptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2EditFounderOptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2EditFounderOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/EditFounderOptions/', \OpenAPI\OpenAPI\Models\Operations\GroupV2EditFounderOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2EditFounderOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupResponse
     */
	public function groupV2EditGroup(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Edit/', \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupMembershipRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupMembershipSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupMembershipResponse
     */
	public function groupV2EditGroupMembership(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupMembershipRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupMembershipSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupMembershipResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupMembershipRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2EditGroupMembershipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2EditOptionalConversationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2EditOptionalConversationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2EditOptionalConversationResponse
     */
	public function groupV2EditOptionalConversation(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2EditOptionalConversationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2EditOptionalConversationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2EditOptionalConversationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2EditOptionalConversationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2EditOptionalConversationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the list of members in a given group who are of admin level or higher.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAdminsAndFounderOfGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAdminsAndFounderOfGroupResponse
     */
	public function groupV2GetAdminsAndFounderOfGroup(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAdminsAndFounderOfGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAdminsAndFounderOfGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/AdminsAndFounder/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAdminsAndFounderOfGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupV2GetAdminsAndFounderOfGroupRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAdminsAndFounderOfGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of all available group avatars for the signed-in user.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAvailableAvatarsResponse
     */
	public function groupV2GetAvailableAvatars(
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAvailableAvatarsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/GetAvailableAvatars/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAvailableAvatarsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of all available group themes.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAvailableThemesResponse
     */
	public function groupV2GetAvailableThemes(
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAvailableThemesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/GetAvailableThemes/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetAvailableThemesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetBannedMembersOfGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetBannedMembersOfGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetBannedMembersOfGroupResponse
     */
	public function groupV2GetBannedMembersOfGroup(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetBannedMembersOfGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetBannedMembersOfGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetBannedMembersOfGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Banned/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetBannedMembersOfGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupV2GetBannedMembersOfGroupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetBannedMembersOfGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get information about a specific group of the given ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupResponse
     */
	public function groupV2GetGroup(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get information about a specific group with the given name and type.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupByNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupByNameResponse
     */
	public function groupV2GetGroupByName(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupByNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupByNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/Name/{groupName}/{groupType}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupByNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupByNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get information about a specific group with the given name and type. The POST version.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupByNameV2Response
     */
	public function groupV2GetGroupByNameV2(
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupByNameV2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/NameV2/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupByNameV2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets a list of available optional conversation channels and their settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupOptionalConversationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupOptionalConversationsResponse
     */
	public function groupV2GetGroupOptionalConversations(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupOptionalConversationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupOptionalConversationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/OptionalConversations/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupOptionalConversationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupOptionalConversationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get information about the groups that a given member has joined.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupsForMemberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupsForMemberResponse
     */
	public function groupV2GetGroupsForMember(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupsForMemberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupsForMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupsForMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetGroupsForMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the list of users who have been invited into the group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetInvitedIndividualsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetInvitedIndividualsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetInvitedIndividualsResponse
     */
	public function groupV2GetInvitedIndividuals(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetInvitedIndividualsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetInvitedIndividualsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetInvitedIndividualsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/InvitedIndividuals/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetInvitedIndividualsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupV2GetInvitedIndividualsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetInvitedIndividualsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the list of members in a given group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetMembersOfGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetMembersOfGroupResponse
     */
	public function groupV2GetMembersOfGroup(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetMembersOfGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetMembersOfGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetMembersOfGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupV2GetMembersOfGroupRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetMembersOfGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPendingMembershipsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPendingMembershipsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPendingMembershipsResponse
     */
	public function groupV2GetPendingMemberships(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPendingMembershipsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPendingMembershipsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPendingMembershipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/Pending/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPendingMembershipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupV2GetPendingMembershipsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPendingMembershipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get information about the groups that a given member has applied to or been invited to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPotentialGroupsForMemberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPotentialGroupsForMemberResponse
     */
	public function groupV2GetPotentialGroupsForMember(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPotentialGroupsForMemberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPotentialGroupsForMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPotentialGroupsForMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetPotentialGroupsForMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets groups recommended for you based on the groups to whom those you follow belong.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetRecommendedGroupsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetRecommendedGroupsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetRecommendedGroupsResponse
     */
	public function groupV2GetRecommendedGroups(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetRecommendedGroupsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetRecommendedGroupsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetRecommendedGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/Recommended/{groupType}/{createDateRange}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetRecommendedGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetRecommendedGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetUserClanInviteSettingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2GetUserClanInviteSettingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GetUserClanInviteSettingResponse
     */
	public function groupV2GetUserClanInviteSetting(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetUserClanInviteSettingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2GetUserClanInviteSettingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GetUserClanInviteSettingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/GetUserClanInviteSetting/{mType}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2GetUserClanInviteSettingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GetUserClanInviteSettingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Search for Groups.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2GroupSearchResponse
     */
	public function groupV2GroupSearch(
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2GroupSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/Search/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2GroupSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Invite a user to join this group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteResponse
     */
	public function groupV2IndividualGroupInvite(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Cancels a pending invitation to join a group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteCancelResponse
     */
	public function groupV2IndividualGroupInviteCancel(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2IndividualGroupInviteCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2KickMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2KickMemberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2KickMemberResponse
     */
	public function groupV2KickMember(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2KickMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2KickMemberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2KickMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/', \OpenAPI\OpenAPI\Models\Operations\GroupV2KickMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2KickMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Allows a founder to manually recover a group they can see in game but not on bungie.net
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2RecoverGroupForFounderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2RecoverGroupForFounderResponse
     */
	public function groupV2RecoverGroupForFounder(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2RecoverGroupForFounderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2RecoverGroupForFounderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/', \OpenAPI\OpenAPI\Models\Operations\GroupV2RecoverGroupForFounderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2RecoverGroupForFounderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Unbans the requested member, allowing them to re-apply for membership.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2UnbanMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupV2UnbanMemberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupV2UnbanMemberResponse
     */
	public function groupV2UnbanMember(
        \OpenAPI\OpenAPI\Models\Operations\GroupV2UnbanMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GroupV2UnbanMemberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupV2UnbanMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/', \OpenAPI\OpenAPI\Models\Operations\GroupV2UnbanMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupV2UnbanMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}