// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NonComplianceDetailInstallationFailureReasonEnum - If package_name is set and the non-compliance reason is APP_NOT_INSTALLED or APP_NOT_UPDATED, the detailed reason the app can't be installed or updated.
type NonComplianceDetailInstallationFailureReasonEnum string

const (
	NonComplianceDetailInstallationFailureReasonEnumInstallationFailureReasonUnspecified NonComplianceDetailInstallationFailureReasonEnum = "INSTALLATION_FAILURE_REASON_UNSPECIFIED"
	NonComplianceDetailInstallationFailureReasonEnumInstallationFailureReasonUnknown     NonComplianceDetailInstallationFailureReasonEnum = "INSTALLATION_FAILURE_REASON_UNKNOWN"
	NonComplianceDetailInstallationFailureReasonEnumInProgress                           NonComplianceDetailInstallationFailureReasonEnum = "IN_PROGRESS"
	NonComplianceDetailInstallationFailureReasonEnumNotFound                             NonComplianceDetailInstallationFailureReasonEnum = "NOT_FOUND"
	NonComplianceDetailInstallationFailureReasonEnumNotCompatibleWithDevice              NonComplianceDetailInstallationFailureReasonEnum = "NOT_COMPATIBLE_WITH_DEVICE"
	NonComplianceDetailInstallationFailureReasonEnumNotApproved                          NonComplianceDetailInstallationFailureReasonEnum = "NOT_APPROVED"
	NonComplianceDetailInstallationFailureReasonEnumPermissionsNotAccepted               NonComplianceDetailInstallationFailureReasonEnum = "PERMISSIONS_NOT_ACCEPTED"
	NonComplianceDetailInstallationFailureReasonEnumNotAvailableInCountry                NonComplianceDetailInstallationFailureReasonEnum = "NOT_AVAILABLE_IN_COUNTRY"
	NonComplianceDetailInstallationFailureReasonEnumNoLicensesRemaining                  NonComplianceDetailInstallationFailureReasonEnum = "NO_LICENSES_REMAINING"
	NonComplianceDetailInstallationFailureReasonEnumNotEnrolled                          NonComplianceDetailInstallationFailureReasonEnum = "NOT_ENROLLED"
	NonComplianceDetailInstallationFailureReasonEnumUserInvalid                          NonComplianceDetailInstallationFailureReasonEnum = "USER_INVALID"
)

func (e *NonComplianceDetailInstallationFailureReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INSTALLATION_FAILURE_REASON_UNSPECIFIED":
		fallthrough
	case "INSTALLATION_FAILURE_REASON_UNKNOWN":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "NOT_FOUND":
		fallthrough
	case "NOT_COMPATIBLE_WITH_DEVICE":
		fallthrough
	case "NOT_APPROVED":
		fallthrough
	case "PERMISSIONS_NOT_ACCEPTED":
		fallthrough
	case "NOT_AVAILABLE_IN_COUNTRY":
		fallthrough
	case "NO_LICENSES_REMAINING":
		fallthrough
	case "NOT_ENROLLED":
		fallthrough
	case "USER_INVALID":
		*e = NonComplianceDetailInstallationFailureReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NonComplianceDetailInstallationFailureReasonEnum: %s", s)
	}
}

// NonComplianceDetailNonComplianceReasonEnum - The reason the device is not in compliance with the setting.
type NonComplianceDetailNonComplianceReasonEnum string

const (
	NonComplianceDetailNonComplianceReasonEnumNonComplianceReasonUnspecified NonComplianceDetailNonComplianceReasonEnum = "NON_COMPLIANCE_REASON_UNSPECIFIED"
	NonComplianceDetailNonComplianceReasonEnumAPILevel                       NonComplianceDetailNonComplianceReasonEnum = "API_LEVEL"
	NonComplianceDetailNonComplianceReasonEnumManagementMode                 NonComplianceDetailNonComplianceReasonEnum = "MANAGEMENT_MODE"
	NonComplianceDetailNonComplianceReasonEnumUserAction                     NonComplianceDetailNonComplianceReasonEnum = "USER_ACTION"
	NonComplianceDetailNonComplianceReasonEnumInvalidValue                   NonComplianceDetailNonComplianceReasonEnum = "INVALID_VALUE"
	NonComplianceDetailNonComplianceReasonEnumAppNotInstalled                NonComplianceDetailNonComplianceReasonEnum = "APP_NOT_INSTALLED"
	NonComplianceDetailNonComplianceReasonEnumUnsupported                    NonComplianceDetailNonComplianceReasonEnum = "UNSUPPORTED"
	NonComplianceDetailNonComplianceReasonEnumAppInstalled                   NonComplianceDetailNonComplianceReasonEnum = "APP_INSTALLED"
	NonComplianceDetailNonComplianceReasonEnumPending                        NonComplianceDetailNonComplianceReasonEnum = "PENDING"
	NonComplianceDetailNonComplianceReasonEnumAppIncompatible                NonComplianceDetailNonComplianceReasonEnum = "APP_INCOMPATIBLE"
	NonComplianceDetailNonComplianceReasonEnumAppNotUpdated                  NonComplianceDetailNonComplianceReasonEnum = "APP_NOT_UPDATED"
)

func (e *NonComplianceDetailNonComplianceReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NON_COMPLIANCE_REASON_UNSPECIFIED":
		fallthrough
	case "API_LEVEL":
		fallthrough
	case "MANAGEMENT_MODE":
		fallthrough
	case "USER_ACTION":
		fallthrough
	case "INVALID_VALUE":
		fallthrough
	case "APP_NOT_INSTALLED":
		fallthrough
	case "UNSUPPORTED":
		fallthrough
	case "APP_INSTALLED":
		fallthrough
	case "PENDING":
		fallthrough
	case "APP_INCOMPATIBLE":
		fallthrough
	case "APP_NOT_UPDATED":
		*e = NonComplianceDetailNonComplianceReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NonComplianceDetailNonComplianceReasonEnum: %s", s)
	}
}

// NonComplianceDetailSpecificNonComplianceReasonEnum - The policy-specific reason the device is not in compliance with the setting.
type NonComplianceDetailSpecificNonComplianceReasonEnum string

const (
	NonComplianceDetailSpecificNonComplianceReasonEnumSpecificNonComplianceReasonUnspecified              NonComplianceDetailSpecificNonComplianceReasonEnum = "SPECIFIC_NON_COMPLIANCE_REASON_UNSPECIFIED"
	NonComplianceDetailSpecificNonComplianceReasonEnumPasswordPoliciesUserCredentialsConfirmationRequired NonComplianceDetailSpecificNonComplianceReasonEnum = "PASSWORD_POLICIES_USER_CREDENTIALS_CONFIRMATION_REQUIRED"
	NonComplianceDetailSpecificNonComplianceReasonEnumPasswordPoliciesPasswordExpired                     NonComplianceDetailSpecificNonComplianceReasonEnum = "PASSWORD_POLICIES_PASSWORD_EXPIRED"
	NonComplianceDetailSpecificNonComplianceReasonEnumPasswordPoliciesPasswordNotSufficient               NonComplianceDetailSpecificNonComplianceReasonEnum = "PASSWORD_POLICIES_PASSWORD_NOT_SUFFICIENT"
	NonComplianceDetailSpecificNonComplianceReasonEnumOncWifiInvalidValue                                 NonComplianceDetailSpecificNonComplianceReasonEnum = "ONC_WIFI_INVALID_VALUE"
	NonComplianceDetailSpecificNonComplianceReasonEnumOncWifiAPILevel                                     NonComplianceDetailSpecificNonComplianceReasonEnum = "ONC_WIFI_API_LEVEL"
)

func (e *NonComplianceDetailSpecificNonComplianceReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SPECIFIC_NON_COMPLIANCE_REASON_UNSPECIFIED":
		fallthrough
	case "PASSWORD_POLICIES_USER_CREDENTIALS_CONFIRMATION_REQUIRED":
		fallthrough
	case "PASSWORD_POLICIES_PASSWORD_EXPIRED":
		fallthrough
	case "PASSWORD_POLICIES_PASSWORD_NOT_SUFFICIENT":
		fallthrough
	case "ONC_WIFI_INVALID_VALUE":
		fallthrough
	case "ONC_WIFI_API_LEVEL":
		*e = NonComplianceDetailSpecificNonComplianceReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NonComplianceDetailSpecificNonComplianceReasonEnum: %s", s)
	}
}

// NonComplianceDetail - Provides detail about non-compliance with a policy setting.
type NonComplianceDetail struct {
	// If the policy setting could not be applied, the current value of the setting on the device.
	CurrentValue interface{} `json:"currentValue,omitempty"`
	// For settings with nested fields, if a particular nested field is out of compliance, this specifies the full path to the offending field. The path is formatted in the same way the policy JSON field would be referenced in JavaScript, that is: 1) For object-typed fields, the field name is followed by a dot then by a subfield name. 2) For array-typed fields, the field name is followed by the array index enclosed in brackets. For example, to indicate a problem with the url field in the externalData field in the 3rd application, the path would be applications[2].externalData.url
	FieldPath *string `json:"fieldPath,omitempty"`
	// If package_name is set and the non-compliance reason is APP_NOT_INSTALLED or APP_NOT_UPDATED, the detailed reason the app can't be installed or updated.
	InstallationFailureReason *NonComplianceDetailInstallationFailureReasonEnum `json:"installationFailureReason,omitempty"`
	// The reason the device is not in compliance with the setting.
	NonComplianceReason *NonComplianceDetailNonComplianceReasonEnum `json:"nonComplianceReason,omitempty"`
	// The package name indicating which app is out of compliance, if applicable.
	PackageName *string `json:"packageName,omitempty"`
	// The name of the policy setting. This is the JSON field name of a top-level Policy field.
	SettingName *string `json:"settingName,omitempty"`
	// Additional context for SpecificNonComplianceReason.
	SpecificNonComplianceContext *SpecificNonComplianceContext `json:"specificNonComplianceContext,omitempty"`
	// The policy-specific reason the device is not in compliance with the setting.
	SpecificNonComplianceReason *NonComplianceDetailSpecificNonComplianceReasonEnum `json:"specificNonComplianceReason,omitempty"`
}
