"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import candidatehistorytotalpage as shared_candidatehistorytotalpage
from enum import Enum
from typing import Optional

class GetCandidatesTotalsOfficeEnum(str, Enum):
    UNKNOWN = ''
    H = 'H'
    S = 'S'
    P = 'P'


@dataclasses.dataclass
class GetCandidatesTotalsRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    candidate_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'candidate_id', 'style': 'form', 'explode': True }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
    """  
    cycle: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cycle', 'style': 'form', 'explode': True }})
    r"""Filter records to only those that were applicable to a given
    two-year period.The cycle begins with an odd year and is named
    for its ending, even year.
    """  
    district: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'district', 'style': 'form', 'explode': True }})
    r"""District of candidate"""  
    election_full: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'election_full', 'style': 'form', 'explode': True }})
    r"""`True` indicates that full election period of a candidate.
    `False` indicates that two year election cycle.
    """  
    election_year: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'election_year', 'style': 'form', 'explode': True }})
    r"""Filter records to only those that were applicable to a given
    two-year period.The cycle begins with an odd year and is named
    for its ending, even year.
    """  
    federal_funds_flag: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'federal_funds_flag', 'style': 'form', 'explode': True }})
    r"""A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates."""  
    has_raised_funds: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'has_raised_funds', 'style': 'form', 'explode': True }})
    r"""A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)"""  
    is_active_candidate: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'is_active_candidate', 'style': 'form', 'explode': True }})
    r"""Candidates who are actively seeking office. If no value is specified, all candidates
    are returned. When True is specified, only active candidates are returned. When False is
    specified, only inactive candidates are returned.
    """  
    max_cash_on_hand_end_period: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_cash_on_hand_end_period', 'style': 'form', 'explode': True }})
    r"""Maximum cash on hand"""  
    max_debts_owed_by_committee: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_debts_owed_by_committee', 'style': 'form', 'explode': True }})
    r"""Maximum debt"""  
    max_disbursements: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_disbursements', 'style': 'form', 'explode': True }})
    r"""Maximum aggregated disbursements"""  
    max_receipts: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_receipts', 'style': 'form', 'explode': True }})
    r"""Maximum aggregated receipts"""  
    min_cash_on_hand_end_period: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_cash_on_hand_end_period', 'style': 'form', 'explode': True }})
    r"""Minimum cash on hand"""  
    min_debts_owed_by_committee: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_debts_owed_by_committee', 'style': 'form', 'explode': True }})
    r"""Minimum debt"""  
    min_disbursements: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_disbursements', 'style': 'form', 'explode': True }})
    r"""Minimum aggregated disbursements"""  
    min_receipts: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_receipts', 'style': 'form', 'explode': True }})
    r"""Minimum aggregated receipts"""  
    office: Optional[list[GetCandidatesTotalsOfficeEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'office', 'style': 'form', 'explode': True }})
    r"""Federal office candidate runs for: H, S or P"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""For paginating through results, starting at page 1"""  
    party: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'party', 'style': 'form', 'explode': True }})
    r"""Three-letter party code"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results returned per page. Defaults to 20."""  
    q: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Name of candidate running for office"""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order."""  
    sort_hide_null: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_hide_null', 'style': 'form', 'explode': True }})
    r"""Hide null values on sorted column(s)."""  
    sort_null_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_null_only', 'style': 'form', 'explode': True }})
    r"""Toggle that filters out all rows having sort column that is non-null"""  
    sort_nulls_last: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_nulls_last', 'style': 'form', 'explode': True }})
    r"""Toggle that sorts null values last"""  
    state: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""State of candidate"""  
    

@dataclasses.dataclass
class GetCandidatesTotalsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    candidate_history_total_page: Optional[shared_candidatehistorytotalpage.CandidateHistoryTotalPage] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    