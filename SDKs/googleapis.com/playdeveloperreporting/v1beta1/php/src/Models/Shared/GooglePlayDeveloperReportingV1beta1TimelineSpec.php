<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GooglePlayDeveloperReportingV1beta1TimelineSpec - Specification of the time-related aggregation parameters of a timeline. Timelines have an aggregation period (`DAILY`, `HOURLY`, etc) which defines how events are aggregated in metrics. The points in a timeline are defined by the starting DateTime of the aggregation period. The duration is implicit in the AggregationPeriod. Hourly aggregation periods, when supported by a metric set, are always specified in UTC to avoid ambiguities around daylight saving time transitions, where an hour is skipped when adopting DST, and repeated when abandoning DST. For example, the timestamp '2021-11-07 01:00:00 America/Los_Angeles' is ambiguous since it can correspond to '2021-11-07 08:00:00 UTC' or '2021-11-07 09:00:00 UTC'. Daily aggregation periods require specifying a timezone which will determine the precise instants of the start and the end of the day. Not all metric sets support all timezones, so make sure to check which timezones are supported by the metric set you want to query.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GooglePlayDeveloperReportingV1beta1TimelineSpec
{
    /**
     * Type of the aggregation period of the datapoints in the timeline. Intervals are identified by the date and time at the start of the interval.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GooglePlayDeveloperReportingV1beta1TimelineSpecAggregationPeriodEnum $aggregationPeriod
     */
	#[\JMS\Serializer\Annotation\SerializedName('aggregationPeriod')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\GooglePlayDeveloperReportingV1beta1TimelineSpecAggregationPeriodEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GooglePlayDeveloperReportingV1beta1TimelineSpecAggregationPeriodEnum $aggregationPeriod = null;
    
    /**
     * Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleTypeDateTime $endTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('endTime')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GoogleTypeDateTime')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleTypeDateTime $endTime = null;
    
    /**
     * Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleTypeDateTime $startTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('startTime')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GoogleTypeDateTime')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleTypeDateTime $startTime = null;
    
	public function __construct()
	{
		$this->aggregationPeriod = null;
		$this->endTime = null;
		$this->startTime = null;
	}
}
