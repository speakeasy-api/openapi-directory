// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TrainingOptionsBoosterTypeEnum - Booster type for boosted tree models.
type TrainingOptionsBoosterTypeEnum string

const (
	TrainingOptionsBoosterTypeEnumBoosterTypeUnspecified TrainingOptionsBoosterTypeEnum = "BOOSTER_TYPE_UNSPECIFIED"
	TrainingOptionsBoosterTypeEnumGbtree                 TrainingOptionsBoosterTypeEnum = "GBTREE"
	TrainingOptionsBoosterTypeEnumDart                   TrainingOptionsBoosterTypeEnum = "DART"
)

func (e TrainingOptionsBoosterTypeEnum) ToPointer() *TrainingOptionsBoosterTypeEnum {
	return &e
}

func (e *TrainingOptionsBoosterTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOOSTER_TYPE_UNSPECIFIED":
		fallthrough
	case "GBTREE":
		fallthrough
	case "DART":
		*e = TrainingOptionsBoosterTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsBoosterTypeEnum: %v", v)
	}
}

// TrainingOptionsColorSpaceEnum - Enums for color space, used for processing images in Object Table. See more details at https://www.tensorflow.org/io/tutorials/colorspace.
type TrainingOptionsColorSpaceEnum string

const (
	TrainingOptionsColorSpaceEnumColorSpaceUnspecified TrainingOptionsColorSpaceEnum = "COLOR_SPACE_UNSPECIFIED"
	TrainingOptionsColorSpaceEnumRgb                   TrainingOptionsColorSpaceEnum = "RGB"
	TrainingOptionsColorSpaceEnumHsv                   TrainingOptionsColorSpaceEnum = "HSV"
	TrainingOptionsColorSpaceEnumYiq                   TrainingOptionsColorSpaceEnum = "YIQ"
	TrainingOptionsColorSpaceEnumYuv                   TrainingOptionsColorSpaceEnum = "YUV"
	TrainingOptionsColorSpaceEnumGrayscale             TrainingOptionsColorSpaceEnum = "GRAYSCALE"
)

func (e TrainingOptionsColorSpaceEnum) ToPointer() *TrainingOptionsColorSpaceEnum {
	return &e
}

func (e *TrainingOptionsColorSpaceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COLOR_SPACE_UNSPECIFIED":
		fallthrough
	case "RGB":
		fallthrough
	case "HSV":
		fallthrough
	case "YIQ":
		fallthrough
	case "YUV":
		fallthrough
	case "GRAYSCALE":
		*e = TrainingOptionsColorSpaceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsColorSpaceEnum: %v", v)
	}
}

// TrainingOptionsDartNormalizeTypeEnum - Type of normalization algorithm for boosted tree models using dart booster.
type TrainingOptionsDartNormalizeTypeEnum string

const (
	TrainingOptionsDartNormalizeTypeEnumDartNormalizeTypeUnspecified TrainingOptionsDartNormalizeTypeEnum = "DART_NORMALIZE_TYPE_UNSPECIFIED"
	TrainingOptionsDartNormalizeTypeEnumTree                         TrainingOptionsDartNormalizeTypeEnum = "TREE"
	TrainingOptionsDartNormalizeTypeEnumForest                       TrainingOptionsDartNormalizeTypeEnum = "FOREST"
)

func (e TrainingOptionsDartNormalizeTypeEnum) ToPointer() *TrainingOptionsDartNormalizeTypeEnum {
	return &e
}

func (e *TrainingOptionsDartNormalizeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DART_NORMALIZE_TYPE_UNSPECIFIED":
		fallthrough
	case "TREE":
		fallthrough
	case "FOREST":
		*e = TrainingOptionsDartNormalizeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsDartNormalizeTypeEnum: %v", v)
	}
}

// TrainingOptionsDataFrequencyEnum - The data frequency of a time series.
type TrainingOptionsDataFrequencyEnum string

const (
	TrainingOptionsDataFrequencyEnumDataFrequencyUnspecified TrainingOptionsDataFrequencyEnum = "DATA_FREQUENCY_UNSPECIFIED"
	TrainingOptionsDataFrequencyEnumAutoFrequency            TrainingOptionsDataFrequencyEnum = "AUTO_FREQUENCY"
	TrainingOptionsDataFrequencyEnumYearly                   TrainingOptionsDataFrequencyEnum = "YEARLY"
	TrainingOptionsDataFrequencyEnumQuarterly                TrainingOptionsDataFrequencyEnum = "QUARTERLY"
	TrainingOptionsDataFrequencyEnumMonthly                  TrainingOptionsDataFrequencyEnum = "MONTHLY"
	TrainingOptionsDataFrequencyEnumWeekly                   TrainingOptionsDataFrequencyEnum = "WEEKLY"
	TrainingOptionsDataFrequencyEnumDaily                    TrainingOptionsDataFrequencyEnum = "DAILY"
	TrainingOptionsDataFrequencyEnumHourly                   TrainingOptionsDataFrequencyEnum = "HOURLY"
	TrainingOptionsDataFrequencyEnumPerMinute                TrainingOptionsDataFrequencyEnum = "PER_MINUTE"
)

func (e TrainingOptionsDataFrequencyEnum) ToPointer() *TrainingOptionsDataFrequencyEnum {
	return &e
}

func (e *TrainingOptionsDataFrequencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATA_FREQUENCY_UNSPECIFIED":
		fallthrough
	case "AUTO_FREQUENCY":
		fallthrough
	case "YEARLY":
		fallthrough
	case "QUARTERLY":
		fallthrough
	case "MONTHLY":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "DAILY":
		fallthrough
	case "HOURLY":
		fallthrough
	case "PER_MINUTE":
		*e = TrainingOptionsDataFrequencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsDataFrequencyEnum: %v", v)
	}
}

// TrainingOptionsDataSplitMethodEnum - The data split type for training and evaluation, e.g. RANDOM.
type TrainingOptionsDataSplitMethodEnum string

const (
	TrainingOptionsDataSplitMethodEnumDataSplitMethodUnspecified TrainingOptionsDataSplitMethodEnum = "DATA_SPLIT_METHOD_UNSPECIFIED"
	TrainingOptionsDataSplitMethodEnumRandom                     TrainingOptionsDataSplitMethodEnum = "RANDOM"
	TrainingOptionsDataSplitMethodEnumCustom                     TrainingOptionsDataSplitMethodEnum = "CUSTOM"
	TrainingOptionsDataSplitMethodEnumSequential                 TrainingOptionsDataSplitMethodEnum = "SEQUENTIAL"
	TrainingOptionsDataSplitMethodEnumNoSplit                    TrainingOptionsDataSplitMethodEnum = "NO_SPLIT"
	TrainingOptionsDataSplitMethodEnumAutoSplit                  TrainingOptionsDataSplitMethodEnum = "AUTO_SPLIT"
)

func (e TrainingOptionsDataSplitMethodEnum) ToPointer() *TrainingOptionsDataSplitMethodEnum {
	return &e
}

func (e *TrainingOptionsDataSplitMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATA_SPLIT_METHOD_UNSPECIFIED":
		fallthrough
	case "RANDOM":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "SEQUENTIAL":
		fallthrough
	case "NO_SPLIT":
		fallthrough
	case "AUTO_SPLIT":
		*e = TrainingOptionsDataSplitMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsDataSplitMethodEnum: %v", v)
	}
}

// TrainingOptionsDistanceTypeEnum - Distance type for clustering models.
type TrainingOptionsDistanceTypeEnum string

const (
	TrainingOptionsDistanceTypeEnumDistanceTypeUnspecified TrainingOptionsDistanceTypeEnum = "DISTANCE_TYPE_UNSPECIFIED"
	TrainingOptionsDistanceTypeEnumEuclidean               TrainingOptionsDistanceTypeEnum = "EUCLIDEAN"
	TrainingOptionsDistanceTypeEnumCosine                  TrainingOptionsDistanceTypeEnum = "COSINE"
)

func (e TrainingOptionsDistanceTypeEnum) ToPointer() *TrainingOptionsDistanceTypeEnum {
	return &e
}

func (e *TrainingOptionsDistanceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DISTANCE_TYPE_UNSPECIFIED":
		fallthrough
	case "EUCLIDEAN":
		fallthrough
	case "COSINE":
		*e = TrainingOptionsDistanceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsDistanceTypeEnum: %v", v)
	}
}

// TrainingOptionsFeedbackTypeEnum - Feedback type that specifies which algorithm to run for matrix factorization.
type TrainingOptionsFeedbackTypeEnum string

const (
	TrainingOptionsFeedbackTypeEnumFeedbackTypeUnspecified TrainingOptionsFeedbackTypeEnum = "FEEDBACK_TYPE_UNSPECIFIED"
	TrainingOptionsFeedbackTypeEnumImplicit                TrainingOptionsFeedbackTypeEnum = "IMPLICIT"
	TrainingOptionsFeedbackTypeEnumExplicit                TrainingOptionsFeedbackTypeEnum = "EXPLICIT"
)

func (e TrainingOptionsFeedbackTypeEnum) ToPointer() *TrainingOptionsFeedbackTypeEnum {
	return &e
}

func (e *TrainingOptionsFeedbackTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FEEDBACK_TYPE_UNSPECIFIED":
		fallthrough
	case "IMPLICIT":
		fallthrough
	case "EXPLICIT":
		*e = TrainingOptionsFeedbackTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsFeedbackTypeEnum: %v", v)
	}
}

// TrainingOptionsHolidayRegionEnum - The geographical region based on which the holidays are considered in time series modeling. If a valid value is specified, then holiday effects modeling is enabled.
type TrainingOptionsHolidayRegionEnum string

const (
	TrainingOptionsHolidayRegionEnumHolidayRegionUnspecified TrainingOptionsHolidayRegionEnum = "HOLIDAY_REGION_UNSPECIFIED"
	TrainingOptionsHolidayRegionEnumGlobal                   TrainingOptionsHolidayRegionEnum = "GLOBAL"
	TrainingOptionsHolidayRegionEnumNa                       TrainingOptionsHolidayRegionEnum = "NA"
	TrainingOptionsHolidayRegionEnumJapac                    TrainingOptionsHolidayRegionEnum = "JAPAC"
	TrainingOptionsHolidayRegionEnumEmea                     TrainingOptionsHolidayRegionEnum = "EMEA"
	TrainingOptionsHolidayRegionEnumLac                      TrainingOptionsHolidayRegionEnum = "LAC"
	TrainingOptionsHolidayRegionEnumAe                       TrainingOptionsHolidayRegionEnum = "AE"
	TrainingOptionsHolidayRegionEnumAr                       TrainingOptionsHolidayRegionEnum = "AR"
	TrainingOptionsHolidayRegionEnumAt                       TrainingOptionsHolidayRegionEnum = "AT"
	TrainingOptionsHolidayRegionEnumAu                       TrainingOptionsHolidayRegionEnum = "AU"
	TrainingOptionsHolidayRegionEnumBe                       TrainingOptionsHolidayRegionEnum = "BE"
	TrainingOptionsHolidayRegionEnumBr                       TrainingOptionsHolidayRegionEnum = "BR"
	TrainingOptionsHolidayRegionEnumCa                       TrainingOptionsHolidayRegionEnum = "CA"
	TrainingOptionsHolidayRegionEnumCh                       TrainingOptionsHolidayRegionEnum = "CH"
	TrainingOptionsHolidayRegionEnumCl                       TrainingOptionsHolidayRegionEnum = "CL"
	TrainingOptionsHolidayRegionEnumCn                       TrainingOptionsHolidayRegionEnum = "CN"
	TrainingOptionsHolidayRegionEnumCo                       TrainingOptionsHolidayRegionEnum = "CO"
	TrainingOptionsHolidayRegionEnumCs                       TrainingOptionsHolidayRegionEnum = "CS"
	TrainingOptionsHolidayRegionEnumCz                       TrainingOptionsHolidayRegionEnum = "CZ"
	TrainingOptionsHolidayRegionEnumDe                       TrainingOptionsHolidayRegionEnum = "DE"
	TrainingOptionsHolidayRegionEnumDk                       TrainingOptionsHolidayRegionEnum = "DK"
	TrainingOptionsHolidayRegionEnumDz                       TrainingOptionsHolidayRegionEnum = "DZ"
	TrainingOptionsHolidayRegionEnumEc                       TrainingOptionsHolidayRegionEnum = "EC"
	TrainingOptionsHolidayRegionEnumEe                       TrainingOptionsHolidayRegionEnum = "EE"
	TrainingOptionsHolidayRegionEnumEg                       TrainingOptionsHolidayRegionEnum = "EG"
	TrainingOptionsHolidayRegionEnumEs                       TrainingOptionsHolidayRegionEnum = "ES"
	TrainingOptionsHolidayRegionEnumFi                       TrainingOptionsHolidayRegionEnum = "FI"
	TrainingOptionsHolidayRegionEnumFr                       TrainingOptionsHolidayRegionEnum = "FR"
	TrainingOptionsHolidayRegionEnumGb                       TrainingOptionsHolidayRegionEnum = "GB"
	TrainingOptionsHolidayRegionEnumGr                       TrainingOptionsHolidayRegionEnum = "GR"
	TrainingOptionsHolidayRegionEnumHk                       TrainingOptionsHolidayRegionEnum = "HK"
	TrainingOptionsHolidayRegionEnumHu                       TrainingOptionsHolidayRegionEnum = "HU"
	TrainingOptionsHolidayRegionEnumID                       TrainingOptionsHolidayRegionEnum = "ID"
	TrainingOptionsHolidayRegionEnumIe                       TrainingOptionsHolidayRegionEnum = "IE"
	TrainingOptionsHolidayRegionEnumIl                       TrainingOptionsHolidayRegionEnum = "IL"
	TrainingOptionsHolidayRegionEnumIn                       TrainingOptionsHolidayRegionEnum = "IN"
	TrainingOptionsHolidayRegionEnumIr                       TrainingOptionsHolidayRegionEnum = "IR"
	TrainingOptionsHolidayRegionEnumIt                       TrainingOptionsHolidayRegionEnum = "IT"
	TrainingOptionsHolidayRegionEnumJp                       TrainingOptionsHolidayRegionEnum = "JP"
	TrainingOptionsHolidayRegionEnumKr                       TrainingOptionsHolidayRegionEnum = "KR"
	TrainingOptionsHolidayRegionEnumLv                       TrainingOptionsHolidayRegionEnum = "LV"
	TrainingOptionsHolidayRegionEnumMa                       TrainingOptionsHolidayRegionEnum = "MA"
	TrainingOptionsHolidayRegionEnumMx                       TrainingOptionsHolidayRegionEnum = "MX"
	TrainingOptionsHolidayRegionEnumMy                       TrainingOptionsHolidayRegionEnum = "MY"
	TrainingOptionsHolidayRegionEnumNg                       TrainingOptionsHolidayRegionEnum = "NG"
	TrainingOptionsHolidayRegionEnumNl                       TrainingOptionsHolidayRegionEnum = "NL"
	TrainingOptionsHolidayRegionEnumNo                       TrainingOptionsHolidayRegionEnum = "NO"
	TrainingOptionsHolidayRegionEnumNz                       TrainingOptionsHolidayRegionEnum = "NZ"
	TrainingOptionsHolidayRegionEnumPe                       TrainingOptionsHolidayRegionEnum = "PE"
	TrainingOptionsHolidayRegionEnumPh                       TrainingOptionsHolidayRegionEnum = "PH"
	TrainingOptionsHolidayRegionEnumPk                       TrainingOptionsHolidayRegionEnum = "PK"
	TrainingOptionsHolidayRegionEnumPl                       TrainingOptionsHolidayRegionEnum = "PL"
	TrainingOptionsHolidayRegionEnumPt                       TrainingOptionsHolidayRegionEnum = "PT"
	TrainingOptionsHolidayRegionEnumRo                       TrainingOptionsHolidayRegionEnum = "RO"
	TrainingOptionsHolidayRegionEnumRs                       TrainingOptionsHolidayRegionEnum = "RS"
	TrainingOptionsHolidayRegionEnumRu                       TrainingOptionsHolidayRegionEnum = "RU"
	TrainingOptionsHolidayRegionEnumSa                       TrainingOptionsHolidayRegionEnum = "SA"
	TrainingOptionsHolidayRegionEnumSe                       TrainingOptionsHolidayRegionEnum = "SE"
	TrainingOptionsHolidayRegionEnumSg                       TrainingOptionsHolidayRegionEnum = "SG"
	TrainingOptionsHolidayRegionEnumSi                       TrainingOptionsHolidayRegionEnum = "SI"
	TrainingOptionsHolidayRegionEnumSk                       TrainingOptionsHolidayRegionEnum = "SK"
	TrainingOptionsHolidayRegionEnumTh                       TrainingOptionsHolidayRegionEnum = "TH"
	TrainingOptionsHolidayRegionEnumTr                       TrainingOptionsHolidayRegionEnum = "TR"
	TrainingOptionsHolidayRegionEnumTw                       TrainingOptionsHolidayRegionEnum = "TW"
	TrainingOptionsHolidayRegionEnumUa                       TrainingOptionsHolidayRegionEnum = "UA"
	TrainingOptionsHolidayRegionEnumUs                       TrainingOptionsHolidayRegionEnum = "US"
	TrainingOptionsHolidayRegionEnumVe                       TrainingOptionsHolidayRegionEnum = "VE"
	TrainingOptionsHolidayRegionEnumVn                       TrainingOptionsHolidayRegionEnum = "VN"
	TrainingOptionsHolidayRegionEnumZa                       TrainingOptionsHolidayRegionEnum = "ZA"
)

func (e TrainingOptionsHolidayRegionEnum) ToPointer() *TrainingOptionsHolidayRegionEnum {
	return &e
}

func (e *TrainingOptionsHolidayRegionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HOLIDAY_REGION_UNSPECIFIED":
		fallthrough
	case "GLOBAL":
		fallthrough
	case "NA":
		fallthrough
	case "JAPAC":
		fallthrough
	case "EMEA":
		fallthrough
	case "LAC":
		fallthrough
	case "AE":
		fallthrough
	case "AR":
		fallthrough
	case "AT":
		fallthrough
	case "AU":
		fallthrough
	case "BE":
		fallthrough
	case "BR":
		fallthrough
	case "CA":
		fallthrough
	case "CH":
		fallthrough
	case "CL":
		fallthrough
	case "CN":
		fallthrough
	case "CO":
		fallthrough
	case "CS":
		fallthrough
	case "CZ":
		fallthrough
	case "DE":
		fallthrough
	case "DK":
		fallthrough
	case "DZ":
		fallthrough
	case "EC":
		fallthrough
	case "EE":
		fallthrough
	case "EG":
		fallthrough
	case "ES":
		fallthrough
	case "FI":
		fallthrough
	case "FR":
		fallthrough
	case "GB":
		fallthrough
	case "GR":
		fallthrough
	case "HK":
		fallthrough
	case "HU":
		fallthrough
	case "ID":
		fallthrough
	case "IE":
		fallthrough
	case "IL":
		fallthrough
	case "IN":
		fallthrough
	case "IR":
		fallthrough
	case "IT":
		fallthrough
	case "JP":
		fallthrough
	case "KR":
		fallthrough
	case "LV":
		fallthrough
	case "MA":
		fallthrough
	case "MX":
		fallthrough
	case "MY":
		fallthrough
	case "NG":
		fallthrough
	case "NL":
		fallthrough
	case "NO":
		fallthrough
	case "NZ":
		fallthrough
	case "PE":
		fallthrough
	case "PH":
		fallthrough
	case "PK":
		fallthrough
	case "PL":
		fallthrough
	case "PT":
		fallthrough
	case "RO":
		fallthrough
	case "RS":
		fallthrough
	case "RU":
		fallthrough
	case "SA":
		fallthrough
	case "SE":
		fallthrough
	case "SG":
		fallthrough
	case "SI":
		fallthrough
	case "SK":
		fallthrough
	case "TH":
		fallthrough
	case "TR":
		fallthrough
	case "TW":
		fallthrough
	case "UA":
		fallthrough
	case "US":
		fallthrough
	case "VE":
		fallthrough
	case "VN":
		fallthrough
	case "ZA":
		*e = TrainingOptionsHolidayRegionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsHolidayRegionEnum: %v", v)
	}
}

type TrainingOptionsHparamTuningObjectivesEnum string

const (
	TrainingOptionsHparamTuningObjectivesEnumHparamTuningObjectiveUnspecified   TrainingOptionsHparamTuningObjectivesEnum = "HPARAM_TUNING_OBJECTIVE_UNSPECIFIED"
	TrainingOptionsHparamTuningObjectivesEnumMeanAbsoluteError                  TrainingOptionsHparamTuningObjectivesEnum = "MEAN_ABSOLUTE_ERROR"
	TrainingOptionsHparamTuningObjectivesEnumMeanSquaredError                   TrainingOptionsHparamTuningObjectivesEnum = "MEAN_SQUARED_ERROR"
	TrainingOptionsHparamTuningObjectivesEnumMeanSquaredLogError                TrainingOptionsHparamTuningObjectivesEnum = "MEAN_SQUARED_LOG_ERROR"
	TrainingOptionsHparamTuningObjectivesEnumMedianAbsoluteError                TrainingOptionsHparamTuningObjectivesEnum = "MEDIAN_ABSOLUTE_ERROR"
	TrainingOptionsHparamTuningObjectivesEnumRSquared                           TrainingOptionsHparamTuningObjectivesEnum = "R_SQUARED"
	TrainingOptionsHparamTuningObjectivesEnumExplainedVariance                  TrainingOptionsHparamTuningObjectivesEnum = "EXPLAINED_VARIANCE"
	TrainingOptionsHparamTuningObjectivesEnumPrecision                          TrainingOptionsHparamTuningObjectivesEnum = "PRECISION"
	TrainingOptionsHparamTuningObjectivesEnumRecall                             TrainingOptionsHparamTuningObjectivesEnum = "RECALL"
	TrainingOptionsHparamTuningObjectivesEnumAccuracy                           TrainingOptionsHparamTuningObjectivesEnum = "ACCURACY"
	TrainingOptionsHparamTuningObjectivesEnumF1Score                            TrainingOptionsHparamTuningObjectivesEnum = "F1_SCORE"
	TrainingOptionsHparamTuningObjectivesEnumLogLoss                            TrainingOptionsHparamTuningObjectivesEnum = "LOG_LOSS"
	TrainingOptionsHparamTuningObjectivesEnumRocAuc                             TrainingOptionsHparamTuningObjectivesEnum = "ROC_AUC"
	TrainingOptionsHparamTuningObjectivesEnumDaviesBouldinIndex                 TrainingOptionsHparamTuningObjectivesEnum = "DAVIES_BOULDIN_INDEX"
	TrainingOptionsHparamTuningObjectivesEnumMeanAveragePrecision               TrainingOptionsHparamTuningObjectivesEnum = "MEAN_AVERAGE_PRECISION"
	TrainingOptionsHparamTuningObjectivesEnumNormalizedDiscountedCumulativeGain TrainingOptionsHparamTuningObjectivesEnum = "NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN"
	TrainingOptionsHparamTuningObjectivesEnumAverageRank                        TrainingOptionsHparamTuningObjectivesEnum = "AVERAGE_RANK"
)

func (e TrainingOptionsHparamTuningObjectivesEnum) ToPointer() *TrainingOptionsHparamTuningObjectivesEnum {
	return &e
}

func (e *TrainingOptionsHparamTuningObjectivesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HPARAM_TUNING_OBJECTIVE_UNSPECIFIED":
		fallthrough
	case "MEAN_ABSOLUTE_ERROR":
		fallthrough
	case "MEAN_SQUARED_ERROR":
		fallthrough
	case "MEAN_SQUARED_LOG_ERROR":
		fallthrough
	case "MEDIAN_ABSOLUTE_ERROR":
		fallthrough
	case "R_SQUARED":
		fallthrough
	case "EXPLAINED_VARIANCE":
		fallthrough
	case "PRECISION":
		fallthrough
	case "RECALL":
		fallthrough
	case "ACCURACY":
		fallthrough
	case "F1_SCORE":
		fallthrough
	case "LOG_LOSS":
		fallthrough
	case "ROC_AUC":
		fallthrough
	case "DAVIES_BOULDIN_INDEX":
		fallthrough
	case "MEAN_AVERAGE_PRECISION":
		fallthrough
	case "NORMALIZED_DISCOUNTED_CUMULATIVE_GAIN":
		fallthrough
	case "AVERAGE_RANK":
		*e = TrainingOptionsHparamTuningObjectivesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsHparamTuningObjectivesEnum: %v", v)
	}
}

// TrainingOptionsKmeansInitializationMethodEnum - The method used to initialize the centroids for kmeans algorithm.
type TrainingOptionsKmeansInitializationMethodEnum string

const (
	TrainingOptionsKmeansInitializationMethodEnumKmeansInitializationMethodUnspecified TrainingOptionsKmeansInitializationMethodEnum = "KMEANS_INITIALIZATION_METHOD_UNSPECIFIED"
	TrainingOptionsKmeansInitializationMethodEnumRandom                                TrainingOptionsKmeansInitializationMethodEnum = "RANDOM"
	TrainingOptionsKmeansInitializationMethodEnumCustom                                TrainingOptionsKmeansInitializationMethodEnum = "CUSTOM"
	TrainingOptionsKmeansInitializationMethodEnumKmeansPlusPlus                        TrainingOptionsKmeansInitializationMethodEnum = "KMEANS_PLUS_PLUS"
)

func (e TrainingOptionsKmeansInitializationMethodEnum) ToPointer() *TrainingOptionsKmeansInitializationMethodEnum {
	return &e
}

func (e *TrainingOptionsKmeansInitializationMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "KMEANS_INITIALIZATION_METHOD_UNSPECIFIED":
		fallthrough
	case "RANDOM":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "KMEANS_PLUS_PLUS":
		*e = TrainingOptionsKmeansInitializationMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsKmeansInitializationMethodEnum: %v", v)
	}
}

// TrainingOptionsLearnRateStrategyEnum - The strategy to determine learn rate for the current iteration.
type TrainingOptionsLearnRateStrategyEnum string

const (
	TrainingOptionsLearnRateStrategyEnumLearnRateStrategyUnspecified TrainingOptionsLearnRateStrategyEnum = "LEARN_RATE_STRATEGY_UNSPECIFIED"
	TrainingOptionsLearnRateStrategyEnumLineSearch                   TrainingOptionsLearnRateStrategyEnum = "LINE_SEARCH"
	TrainingOptionsLearnRateStrategyEnumConstant                     TrainingOptionsLearnRateStrategyEnum = "CONSTANT"
)

func (e TrainingOptionsLearnRateStrategyEnum) ToPointer() *TrainingOptionsLearnRateStrategyEnum {
	return &e
}

func (e *TrainingOptionsLearnRateStrategyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LEARN_RATE_STRATEGY_UNSPECIFIED":
		fallthrough
	case "LINE_SEARCH":
		fallthrough
	case "CONSTANT":
		*e = TrainingOptionsLearnRateStrategyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsLearnRateStrategyEnum: %v", v)
	}
}

// TrainingOptionsLossTypeEnum - Type of loss function used during training run.
type TrainingOptionsLossTypeEnum string

const (
	TrainingOptionsLossTypeEnumLossTypeUnspecified TrainingOptionsLossTypeEnum = "LOSS_TYPE_UNSPECIFIED"
	TrainingOptionsLossTypeEnumMeanSquaredLoss     TrainingOptionsLossTypeEnum = "MEAN_SQUARED_LOSS"
	TrainingOptionsLossTypeEnumMeanLogLoss         TrainingOptionsLossTypeEnum = "MEAN_LOG_LOSS"
)

func (e TrainingOptionsLossTypeEnum) ToPointer() *TrainingOptionsLossTypeEnum {
	return &e
}

func (e *TrainingOptionsLossTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOSS_TYPE_UNSPECIFIED":
		fallthrough
	case "MEAN_SQUARED_LOSS":
		fallthrough
	case "MEAN_LOG_LOSS":
		*e = TrainingOptionsLossTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsLossTypeEnum: %v", v)
	}
}

// TrainingOptionsOptimizationStrategyEnum - Optimization strategy for training linear regression models.
type TrainingOptionsOptimizationStrategyEnum string

const (
	TrainingOptionsOptimizationStrategyEnumOptimizationStrategyUnspecified TrainingOptionsOptimizationStrategyEnum = "OPTIMIZATION_STRATEGY_UNSPECIFIED"
	TrainingOptionsOptimizationStrategyEnumBatchGradientDescent            TrainingOptionsOptimizationStrategyEnum = "BATCH_GRADIENT_DESCENT"
	TrainingOptionsOptimizationStrategyEnumNormalEquation                  TrainingOptionsOptimizationStrategyEnum = "NORMAL_EQUATION"
)

func (e TrainingOptionsOptimizationStrategyEnum) ToPointer() *TrainingOptionsOptimizationStrategyEnum {
	return &e
}

func (e *TrainingOptionsOptimizationStrategyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPTIMIZATION_STRATEGY_UNSPECIFIED":
		fallthrough
	case "BATCH_GRADIENT_DESCENT":
		fallthrough
	case "NORMAL_EQUATION":
		*e = TrainingOptionsOptimizationStrategyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsOptimizationStrategyEnum: %v", v)
	}
}

// TrainingOptionsTreeMethodEnum - Tree construction algorithm for boosted tree models.
type TrainingOptionsTreeMethodEnum string

const (
	TrainingOptionsTreeMethodEnumTreeMethodUnspecified TrainingOptionsTreeMethodEnum = "TREE_METHOD_UNSPECIFIED"
	TrainingOptionsTreeMethodEnumAuto                  TrainingOptionsTreeMethodEnum = "AUTO"
	TrainingOptionsTreeMethodEnumExact                 TrainingOptionsTreeMethodEnum = "EXACT"
	TrainingOptionsTreeMethodEnumApprox                TrainingOptionsTreeMethodEnum = "APPROX"
	TrainingOptionsTreeMethodEnumHist                  TrainingOptionsTreeMethodEnum = "HIST"
)

func (e TrainingOptionsTreeMethodEnum) ToPointer() *TrainingOptionsTreeMethodEnum {
	return &e
}

func (e *TrainingOptionsTreeMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TREE_METHOD_UNSPECIFIED":
		fallthrough
	case "AUTO":
		fallthrough
	case "EXACT":
		fallthrough
	case "APPROX":
		fallthrough
	case "HIST":
		*e = TrainingOptionsTreeMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainingOptionsTreeMethodEnum: %v", v)
	}
}

// TrainingOptions - Options used in model training.
type TrainingOptions struct {
	// If true, detect step changes and make data adjustment in the input time series.
	AdjustStepChanges *bool `json:"adjustStepChanges,omitempty"`
	// Whether to enable auto ARIMA or not.
	AutoArima *bool `json:"autoArima,omitempty"`
	// The max value of the sum of non-seasonal p and q.
	AutoArimaMaxOrder *string `json:"autoArimaMaxOrder,omitempty"`
	// The min value of the sum of non-seasonal p and q.
	AutoArimaMinOrder *string `json:"autoArimaMinOrder,omitempty"`
	// Batch size for dnn models.
	BatchSize *string `json:"batchSize,omitempty"`
	// Booster type for boosted tree models.
	BoosterType *TrainingOptionsBoosterTypeEnum `json:"boosterType,omitempty"`
	// Whether or not p-value test should be computed for this model. Only available for linear and logistic regression models.
	CalculatePValues *bool `json:"calculatePValues,omitempty"`
	// If true, clean spikes and dips in the input time series.
	CleanSpikesAndDips *bool `json:"cleanSpikesAndDips,omitempty"`
	// Enums for color space, used for processing images in Object Table. See more details at https://www.tensorflow.org/io/tutorials/colorspace.
	ColorSpace *TrainingOptionsColorSpaceEnum `json:"colorSpace,omitempty"`
	// Subsample ratio of columns for each level for boosted tree models.
	ColsampleBylevel *float64 `json:"colsampleBylevel,omitempty"`
	// Subsample ratio of columns for each node(split) for boosted tree models.
	ColsampleBynode *float64 `json:"colsampleBynode,omitempty"`
	// Subsample ratio of columns when constructing each tree for boosted tree models.
	ColsampleBytree *float64 `json:"colsampleBytree,omitempty"`
	// Type of normalization algorithm for boosted tree models using dart booster.
	DartNormalizeType *TrainingOptionsDartNormalizeTypeEnum `json:"dartNormalizeType,omitempty"`
	// The data frequency of a time series.
	DataFrequency *TrainingOptionsDataFrequencyEnum `json:"dataFrequency,omitempty"`
	// The column to split data with. This column won't be used as a feature. 1. When data_split_method is CUSTOM, the corresponding column should be boolean. The rows with true value tag are eval data, and the false are training data. 2. When data_split_method is SEQ, the first DATA_SPLIT_EVAL_FRACTION rows (from smallest to largest) in the corresponding column are used as training data, and the rest are eval data. It respects the order in Orderable data types: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data-type-properties
	DataSplitColumn *string `json:"dataSplitColumn,omitempty"`
	// The fraction of evaluation data over the whole input data. The rest of data will be used as training data. The format should be double. Accurate to two decimal places. Default value is 0.2.
	DataSplitEvalFraction *float64 `json:"dataSplitEvalFraction,omitempty"`
	// The data split type for training and evaluation, e.g. RANDOM.
	DataSplitMethod *TrainingOptionsDataSplitMethodEnum `json:"dataSplitMethod,omitempty"`
	// If true, perform decompose time series and save the results.
	DecomposeTimeSeries *bool `json:"decomposeTimeSeries,omitempty"`
	// Distance type for clustering models.
	DistanceType *TrainingOptionsDistanceTypeEnum `json:"distanceType,omitempty"`
	// Dropout probability for dnn models.
	Dropout *float64 `json:"dropout,omitempty"`
	// Whether to stop early when the loss doesn't improve significantly any more (compared to min_relative_progress). Used only for iterative training algorithms.
	EarlyStop *bool `json:"earlyStop,omitempty"`
	// If true, enable global explanation during training.
	EnableGlobalExplain *bool `json:"enableGlobalExplain,omitempty"`
	// Feedback type that specifies which algorithm to run for matrix factorization.
	FeedbackType *TrainingOptionsFeedbackTypeEnum `json:"feedbackType,omitempty"`
	// Hidden units for dnn models.
	HiddenUnits []string `json:"hiddenUnits,omitempty"`
	// The geographical region based on which the holidays are considered in time series modeling. If a valid value is specified, then holiday effects modeling is enabled.
	HolidayRegion *TrainingOptionsHolidayRegionEnum `json:"holidayRegion,omitempty"`
	// The number of periods ahead that need to be forecasted.
	Horizon *string `json:"horizon,omitempty"`
	// The target evaluation metrics to optimize the hyperparameters for.
	HparamTuningObjectives []TrainingOptionsHparamTuningObjectivesEnum `json:"hparamTuningObjectives,omitempty"`
	// Include drift when fitting an ARIMA model.
	IncludeDrift *bool `json:"includeDrift,omitempty"`
	// Specifies the initial learning rate for the line search learn rate strategy.
	InitialLearnRate *float64 `json:"initialLearnRate,omitempty"`
	// Name of input label columns in training data.
	InputLabelColumns []string `json:"inputLabelColumns,omitempty"`
	// Name of the instance weight column for training data. This column isn't be used as a feature.
	InstanceWeightColumn *string `json:"instanceWeightColumn,omitempty"`
	// Number of integral steps for the integrated gradients explain method.
	IntegratedGradientsNumSteps *string `json:"integratedGradientsNumSteps,omitempty"`
	// Item column specified for matrix factorization models.
	ItemColumn *string `json:"itemColumn,omitempty"`
	// The column used to provide the initial centroids for kmeans algorithm when kmeans_initialization_method is CUSTOM.
	KmeansInitializationColumn *string `json:"kmeansInitializationColumn,omitempty"`
	// The method used to initialize the centroids for kmeans algorithm.
	KmeansInitializationMethod *TrainingOptionsKmeansInitializationMethodEnum `json:"kmeansInitializationMethod,omitempty"`
	// L1 regularization coefficient.
	L1Regularization *float64 `json:"l1Regularization,omitempty"`
	// L2 regularization coefficient.
	L2Regularization *float64 `json:"l2Regularization,omitempty"`
	// Weights associated with each label class, for rebalancing the training data. Only applicable for classification models.
	LabelClassWeights map[string]float64 `json:"labelClassWeights,omitempty"`
	// Learning rate in training. Used only for iterative training algorithms.
	LearnRate *float64 `json:"learnRate,omitempty"`
	// The strategy to determine learn rate for the current iteration.
	LearnRateStrategy *TrainingOptionsLearnRateStrategyEnum `json:"learnRateStrategy,omitempty"`
	// Type of loss function used during training run.
	LossType *TrainingOptionsLossTypeEnum `json:"lossType,omitempty"`
	// The maximum number of iterations in training. Used only for iterative training algorithms.
	MaxIterations *string `json:"maxIterations,omitempty"`
	// Maximum number of trials to run in parallel.
	MaxParallelTrials *string `json:"maxParallelTrials,omitempty"`
	// Get truncated length by last n points in time series. Use separately from time_series_length_fraction and min_time_series_length.
	MaxTimeSeriesLength *string `json:"maxTimeSeriesLength,omitempty"`
	// Maximum depth of a tree for boosted tree models.
	MaxTreeDepth *string `json:"maxTreeDepth,omitempty"`
	// When early_stop is true, stops training when accuracy improvement is less than 'min_relative_progress'. Used only for iterative training algorithms.
	MinRelativeProgress *float64 `json:"minRelativeProgress,omitempty"`
	// Minimum split loss for boosted tree models.
	MinSplitLoss *float64 `json:"minSplitLoss,omitempty"`
	// Set fast trend ARIMA_PLUS model minimum training length. Use in pair with time_series_length_fraction.
	MinTimeSeriesLength *string `json:"minTimeSeriesLength,omitempty"`
	// Minimum sum of instance weight needed in a child for boosted tree models.
	MinTreeChildWeight *string `json:"minTreeChildWeight,omitempty"`
	// Google Cloud Storage URI from which the model was imported. Only applicable for imported models.
	ModelURI *string `json:"modelUri,omitempty"`
	// Arima order, can be used for both non-seasonal and seasonal parts.
	NonSeasonalOrder *ArimaOrder `json:"nonSeasonalOrder,omitempty"`
	// Number of clusters for clustering models.
	NumClusters *string `json:"numClusters,omitempty"`
	// Num factors specified for matrix factorization models.
	NumFactors *string `json:"numFactors,omitempty"`
	// Number of parallel trees constructed during each iteration for boosted tree models.
	NumParallelTree *string `json:"numParallelTree,omitempty"`
	// Number of trials to run this hyperparameter tuning job.
	NumTrials *string `json:"numTrials,omitempty"`
	// Optimization strategy for training linear regression models.
	OptimizationStrategy *TrainingOptionsOptimizationStrategyEnum `json:"optimizationStrategy,omitempty"`
	// Whether to preserve the input structs in output feature names. Suppose there is a struct A with field b. When false (default), the output feature name is A_b. When true, the output feature name is A.b.
	PreserveInputStructs *bool `json:"preserveInputStructs,omitempty"`
	// Number of paths for the sampled Shapley explain method.
	SampledShapleyNumPaths *string `json:"sampledShapleyNumPaths,omitempty"`
	// Subsample fraction of the training data to grow tree to prevent overfitting for boosted tree models.
	Subsample *float64 `json:"subsample,omitempty"`
	// Based on the selected TF version, the corresponding docker image is used to train external models.
	TfVersion *string `json:"tfVersion,omitempty"`
	// Column to be designated as time series data for ARIMA model.
	TimeSeriesDataColumn *string `json:"timeSeriesDataColumn,omitempty"`
	// The time series id column that was used during ARIMA model training.
	TimeSeriesIDColumn *string `json:"timeSeriesIdColumn,omitempty"`
	// The time series id columns that were used during ARIMA model training.
	TimeSeriesIDColumns []string `json:"timeSeriesIdColumns,omitempty"`
	// Get truncated length by fraction in time series.
	TimeSeriesLengthFraction *float64 `json:"timeSeriesLengthFraction,omitempty"`
	// Column to be designated as time series timestamp for ARIMA model.
	TimeSeriesTimestampColumn *string `json:"timeSeriesTimestampColumn,omitempty"`
	// Tree construction algorithm for boosted tree models.
	TreeMethod *TrainingOptionsTreeMethodEnum `json:"treeMethod,omitempty"`
	// The smoothing window size for the trend component of the time series.
	TrendSmoothingWindowSize *string `json:"trendSmoothingWindowSize,omitempty"`
	// User column specified for matrix factorization models.
	UserColumn *string `json:"userColumn,omitempty"`
	// Hyperparameter for matrix factoration when implicit feedback type is specified.
	WalsAlpha *float64 `json:"walsAlpha,omitempty"`
	// Whether to train a model from the last checkpoint.
	WarmStart *bool `json:"warmStart,omitempty"`
	// User-selected XGBoost versions for training of XGBoost models.
	XgboostVersion *string `json:"xgboostVersion,omitempty"`
}
