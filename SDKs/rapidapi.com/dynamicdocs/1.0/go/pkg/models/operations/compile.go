// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CompilePathParams struct {
	// The template-token is available in your template settings after publishing your template.
	TemplateToken string `pathParam:"style=simple,explode=false,name=template-token"`
}

// CompileLatexCompilerEnum - The latex-compiler parameter can take the following values:  pdflatex lualatex
type CompileLatexCompilerEnum string

const (
	CompileLatexCompilerEnumPdflatex CompileLatexCompilerEnum = "pdflatex"
	CompileLatexCompilerEnumLualatex CompileLatexCompilerEnum = "lualatex"
)

func (e *CompileLatexCompilerEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdflatex":
		fallthrough
	case "lualatex":
		*e = CompileLatexCompilerEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CompileLatexCompilerEnum: %s", s)
	}
}

type CompileQueryParams struct {
	// The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required.
	DocFileName *string `queryParam:"style=form,explode=true,name=doc-file-name"`
	// The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document.
	DocURLExpiresIn *int64 `queryParam:"style=form,explode=true,name=doc-url-expires-in"`
	// The latex-compiler parameter can take the following values:  pdflatex lualatex
	LatexCompiler *CompileLatexCompilerEnum `queryParam:"style=form,explode=true,name=latex-compiler"`
	// The latex-runs is a numerical parameter and can take values of 1, 2 and 3.
	LatexRuns *int64 `queryParam:"style=form,explode=true,name=latex-runs "`
	// The main-file-name is a string parameter which identifies the main file to compile.
	MainFileName *string `queryParam:"style=form,explode=true,name=main-file-name"`
}

type CompileHeaders struct {
	// Should be set to "application/json"
	ContentType string `header:"style=simple,explode=false,name=Content-Type"`
}

type CompileRequest struct {
	PathParams  CompilePathParams
	QueryParams CompileQueryParams
	Headers     CompileHeaders
	// Post the dynamic data for the template to compile the document PDF.
	Request map[string]interface{} `request:"mediaType=application/json"`
}

type CompileResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Document Status URL Created
	Compile200ApplicationJSONObject map[string]interface{}
}
