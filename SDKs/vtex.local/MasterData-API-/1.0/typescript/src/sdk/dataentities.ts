/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Set of APIs that returns the structure of the data entities.
 */
export class DataEntities {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get data entity structure
   *
   * @remarks
   * Returns the data entity structure with its respective fields and data type.
   *
   * ### Response status code
   *
   * 1. Status Code `403`: Access not allowed
   * 2. Status Code `200`: Retrieves data entity structure
   *
   * > All headers listed below are required.
   */
  getdataentitystructure(
    req: operations.GetdataentitystructureRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetdataentitystructureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetdataentitystructureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/dataentities/{acronym}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetdataentitystructureResponse =
        new operations.GetdataentitystructureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getdataentityfields = utils.objectToClass(
              httpRes?.data,
              shared.Getdataentityfields
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List data entities
   *
   * @remarks
   * Retrieves the list of existing data entities in the store.
   *
   * ### Response status code
   *
   * 1. Status Code `403`: Access not allowed
   * 2. Status Code `200`: Retrieves data entity list
   *
   * > All headers listed below are required.
   */
  listdataentities(
    req: operations.ListdataentitiesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListdataentitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListdataentitiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/dataentities";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListdataentitiesResponse =
        new operations.ListdataentitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listdataentities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.listdataentities = utils.objectToClass(
              httpRes?.data,
              shared.Listdataentity,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
