/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Events - Successful response
 */
public class Events {
    /**
     * The user's access role for this calendar. Read-only. Possible values are:  
     * - "none" - The user has no access. 
     * - "freeBusyReader" - The user has read access to free/busy information. 
     * - "reader" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
     * - "writer" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
     * - "owner" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessRole")
    public String accessRole;

    public Events withAccessRole(String accessRole) {
        this.accessRole = accessRole;
        return this;
    }
    
    /**
     * The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultReminders")
    public EventReminder[] defaultReminders;

    public Events withDefaultReminders(EventReminder[] defaultReminders) {
        this.defaultReminders = defaultReminders;
        return this;
    }
    
    /**
     * Description of the calendar. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Events withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * ETag of the collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public Events withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * List of events on the calendar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    public Event[] items;

    public Events withItems(Event[] items) {
        this.items = items;
        return this;
    }
    
    /**
     * Type of the collection ("calendar#events").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Events withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextPageToken")
    public String nextPageToken;

    public Events withNextPageToken(String nextPageToken) {
        this.nextPageToken = nextPageToken;
        return this;
    }
    
    /**
     * Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextSyncToken")
    public String nextSyncToken;

    public Events withNextSyncToken(String nextSyncToken) {
        this.nextSyncToken = nextSyncToken;
        return this;
    }
    
    /**
     * Title of the calendar. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    public String summary;

    public Events withSummary(String summary) {
        this.summary = summary;
        return this;
    }
    
    /**
     * The time zone of the calendar. Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZone")
    public String timeZone;

    public Events withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * Last modification time of the calendar (as a RFC3339 timestamp). Read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated")
    public OffsetDateTime updated;

    public Events withUpdated(OffsetDateTime updated) {
        this.updated = updated;
        return this;
    }
    
    public Events(){}
}
