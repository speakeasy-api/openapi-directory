"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import tfl_api_presentation_entities_crowding as shared_tfl_api_presentation_entities_crowding
from ..shared import tfl_api_presentation_entities_disruption as shared_tfl_api_presentation_entities_disruption
from ..shared import tfl_api_presentation_entities_lineservicetypeinfo as shared_tfl_api_presentation_entities_lineservicetypeinfo
from ..shared import tfl_api_presentation_entities_linestatus as shared_tfl_api_presentation_entities_linestatus
from ..shared import tfl_api_presentation_entities_matchedroute as shared_tfl_api_presentation_entities_matchedroute
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesLine:
    
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    crowding: Optional[shared_tfl_api_presentation_entities_crowding.TflAPIPresentationEntitiesCrowding] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crowding'), 'exclude': lambda f: f is None }})  
    disruptions: Optional[list[shared_tfl_api_presentation_entities_disruption.TflAPIPresentationEntitiesDisruption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disruptions'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    line_statuses: Optional[list[shared_tfl_api_presentation_entities_linestatus.TflAPIPresentationEntitiesLineStatus]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineStatuses'), 'exclude': lambda f: f is None }})  
    mode_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modeName'), 'exclude': lambda f: f is None }})  
    modified: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    route_sections: Optional[list[shared_tfl_api_presentation_entities_matchedroute.TflAPIPresentationEntitiesMatchedRoute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routeSections'), 'exclude': lambda f: f is None }})  
    service_types: Optional[list[shared_tfl_api_presentation_entities_lineservicetypeinfo.TflAPIPresentationEntitiesLineServiceTypeInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceTypes'), 'exclude': lambda f: f is None }})  
    