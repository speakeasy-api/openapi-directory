// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnum - 'allow' or 'deny' traffic specified by this rule
type UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnum string

const (
	UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnumAllow UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnum = "allow"
	UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnumDeny  UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnum = "deny"
)

func (e UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnum) ToPointer() *UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "deny":
		*e = UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnum: %v", v)
	}
}

// UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum - The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
type UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum string

const (
	UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnumAny   UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum = "any"
	UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnumIcmp  UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum = "icmp"
	UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnumIcmp6 UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum = "icmp6"
	UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnumTCP   UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum = "tcp"
	UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnumUDP   UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum = "udp"
)

func (e UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum) ToPointer() *UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum {
	return &e
}

func (e *UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "icmp":
		fallthrough
	case "icmp6":
		fallthrough
	case "tcp":
		fallthrough
	case "udp":
		*e = UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum: %v", v)
	}
}

type UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRules struct {
	// Description of the rule (optional)
	Comment *string `json:"comment,omitempty"`
	// Comma-separated list of destination IP address(es) (in IP or CIDR notation) or 'any' (FQDN not supported)
	DestCidr string `json:"destCidr"`
	// Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'
	DestPort *string `json:"destPort,omitempty"`
	// 'allow' or 'deny' traffic specified by this rule
	Policy UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesPolicyEnum `json:"policy"`
	// The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
	Protocol UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRulesProtocolEnum `json:"protocol"`
	// Comma-separated list of source IP address(es) (in IP or CIDR notation), or 'any' (FQDN not supported)
	SrcCidr string `json:"srcCidr"`
	// Comma-separated list of source port(s) (integer in the range 1-65535), or 'any'
	SrcPort *string `json:"srcPort,omitempty"`
	// Log this rule to syslog (true or false, boolean value) - only applicable if a syslog has been configured (optional)
	SyslogEnabled *bool `json:"syslogEnabled,omitempty"`
}

type UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBody struct {
	// An ordered array of the firewall rules (not including the default rule)
	Rules []UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBodyRules `json:"rules,omitempty"`
	// Log the special default rule (boolean value - enable only if you've configured a syslog server) (optional)
	SyslogDefaultRule *bool `json:"syslogDefaultRule,omitempty"`
}

type UpdateOrganizationApplianceVpnVpnFirewallRulesRequest struct {
	RequestBody    *UpdateOrganizationApplianceVpnVpnFirewallRulesRequestBody `request:"mediaType=application/json"`
	OrganizationID string                                                     `pathParam:"style=simple,explode=false,name=organizationId"`
}

type UpdateOrganizationApplianceVpnVpnFirewallRulesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateOrganizationApplianceVpnVpnFirewallRules200ApplicationJSONObject map[string]interface{}
}
