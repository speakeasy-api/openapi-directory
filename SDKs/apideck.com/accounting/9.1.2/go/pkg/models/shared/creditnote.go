// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreditNoteAllocationsAllocationTypeEnum - Type of entity this payment should be attributed to.
type CreditNoteAllocationsAllocationTypeEnum string

const (
	CreditNoteAllocationsAllocationTypeEnumInvoice     CreditNoteAllocationsAllocationTypeEnum = "invoice"
	CreditNoteAllocationsAllocationTypeEnumOrder       CreditNoteAllocationsAllocationTypeEnum = "order"
	CreditNoteAllocationsAllocationTypeEnumExpense     CreditNoteAllocationsAllocationTypeEnum = "expense"
	CreditNoteAllocationsAllocationTypeEnumCreditMemo  CreditNoteAllocationsAllocationTypeEnum = "credit_memo"
	CreditNoteAllocationsAllocationTypeEnumOverPayment CreditNoteAllocationsAllocationTypeEnum = "over_payment"
	CreditNoteAllocationsAllocationTypeEnumPrePayment  CreditNoteAllocationsAllocationTypeEnum = "pre_payment"
)

func (e *CreditNoteAllocationsAllocationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invoice":
		fallthrough
	case "order":
		fallthrough
	case "expense":
		fallthrough
	case "credit_memo":
		fallthrough
	case "over_payment":
		fallthrough
	case "pre_payment":
		*e = CreditNoteAllocationsAllocationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditNoteAllocationsAllocationTypeEnum: %s", s)
	}
}

type CreditNoteAllocationsInput struct {
	// Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
	Amount *float64 `json:"amount,omitempty"`
	// Unique identifier of entity this payment should be attributed to.
	ID *string `json:"id,omitempty"`
	// Type of entity this payment should be attributed to.
	Type *CreditNoteAllocationsAllocationTypeEnum `json:"type,omitempty"`
}

// CreditNoteCreditNoteStatusEnum - Status of credit notes
type CreditNoteCreditNoteStatusEnum string

const (
	CreditNoteCreditNoteStatusEnumDraft      CreditNoteCreditNoteStatusEnum = "draft"
	CreditNoteCreditNoteStatusEnumAuthorised CreditNoteCreditNoteStatusEnum = "authorised"
	CreditNoteCreditNoteStatusEnumPaid       CreditNoteCreditNoteStatusEnum = "paid"
	CreditNoteCreditNoteStatusEnumVoided     CreditNoteCreditNoteStatusEnum = "voided"
	CreditNoteCreditNoteStatusEnumDeleted    CreditNoteCreditNoteStatusEnum = "deleted"
)

func (e *CreditNoteCreditNoteStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "draft":
		fallthrough
	case "authorised":
		fallthrough
	case "paid":
		fallthrough
	case "voided":
		fallthrough
	case "deleted":
		*e = CreditNoteCreditNoteStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditNoteCreditNoteStatusEnum: %s", s)
	}
}

// CreditNoteCreditNoteTypeEnum - Type of payment
type CreditNoteCreditNoteTypeEnum string

const (
	CreditNoteCreditNoteTypeEnumAccountsReceivableCredit CreditNoteCreditNoteTypeEnum = "accounts_receivable_credit"
	CreditNoteCreditNoteTypeEnumAccountsPayableCredit    CreditNoteCreditNoteTypeEnum = "accounts_payable_credit"
)

func (e *CreditNoteCreditNoteTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "accounts_receivable_credit":
		fallthrough
	case "accounts_payable_credit":
		*e = CreditNoteCreditNoteTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditNoteCreditNoteTypeEnum: %s", s)
	}
}

type CreditNoteInput struct {
	Account     *LinkedLedgerAccountInput    `json:"account,omitempty"`
	Allocations []CreditNoteAllocationsInput `json:"allocations,omitempty"`
	// The balance reflecting any payments made against the transaction.
	Balance *float64 `json:"balance,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomerInput `json:"customer,omitempty"`
	// Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
	DateIssued *time.Time `json:"date_issued,omitempty"`
	// Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
	DatePaid  *time.Time             `json:"date_paid,omitempty"`
	LineItems []InvoiceLineItemInput `json:"line_items,omitempty"`
	// Optional note to be associated with the credit note.
	Note *string `json:"note,omitempty"`
	// Credit note number.
	Number *string `json:"number,omitempty"`
	// Optional reference message ie: Debit remittance detail.
	Reference *string `json:"reference,omitempty"`
	// Indicates the total credit amount still available to apply towards the payment.
	RemainingCredit *float64 `json:"remaining_credit,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// Status of credit notes
	Status *CreditNoteCreditNoteStatusEnum `json:"status,omitempty"`
	// Sub-total amount, normally before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool `json:"tax_inclusive,omitempty"`
	// Optional terms to be associated with the credit note.
	Terms *string `json:"terms,omitempty"`
	// Amount of transaction
	TotalAmount float64 `json:"total_amount"`
	// Total tax amount applied to this invoice.
	TotalTax *float64 `json:"total_tax,omitempty"`
	// Type of payment
	Type *CreditNoteCreditNoteTypeEnum `json:"type,omitempty"`
}

type CreditNoteAllocations struct {
	// Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
	Amount *float64 `json:"amount,omitempty"`
	Code   *string  `json:"code,omitempty"`
	// Unique identifier of entity this payment should be attributed to.
	ID *string `json:"id,omitempty"`
	// Type of entity this payment should be attributed to.
	Type *CreditNoteAllocationsAllocationTypeEnum `json:"type,omitempty"`
}

type CreditNote struct {
	Account     *LinkedLedgerAccount    `json:"account,omitempty"`
	Allocations []CreditNoteAllocations `json:"allocations,omitempty"`
	// The balance reflecting any payments made against the transaction.
	Balance *float64 `json:"balance,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *CurrencyEnum `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomer `json:"customer,omitempty"`
	// Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
	DateIssued *time.Time `json:"date_issued,omitempty"`
	// Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
	DatePaid *time.Time `json:"date_paid,omitempty"`
	// Unique identifier representing the entity
	ID        string            `json:"id"`
	LineItems []InvoiceLineItem `json:"line_items,omitempty"`
	// Optional note to be associated with the credit note.
	Note *string `json:"note,omitempty"`
	// Credit note number.
	Number *string `json:"number,omitempty"`
	// Optional reference message ie: Debit remittance detail.
	Reference *string `json:"reference,omitempty"`
	// Indicates the total credit amount still available to apply towards the payment.
	RemainingCredit *float64 `json:"remaining_credit,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// Status of credit notes
	Status *CreditNoteCreditNoteStatusEnum `json:"status,omitempty"`
	// Sub-total amount, normally before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool `json:"tax_inclusive,omitempty"`
	// Optional terms to be associated with the credit note.
	Terms *string `json:"terms,omitempty"`
	// Amount of transaction
	TotalAmount float64 `json:"total_amount"`
	// Total tax amount applied to this invoice.
	TotalTax *float64 `json:"total_tax,omitempty"`
	// Type of payment
	Type *CreditNoteCreditNoteTypeEnum `json:"type,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
}
