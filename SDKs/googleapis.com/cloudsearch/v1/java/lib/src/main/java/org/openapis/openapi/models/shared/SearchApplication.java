/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SearchApplication - SearchApplication
 */
public class SearchApplication {
    /**
     * Retrictions applied to the configurations. The maximum number of elements is 10.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSourceRestrictions")
    public DataSourceRestriction[] dataSourceRestrictions;
    public SearchApplication withDataSourceRestrictions(DataSourceRestriction[] dataSourceRestrictions) {
        this.dataSourceRestrictions = dataSourceRestrictions;
        return this;
    }
    
    /**
     * The default fields for returning facet results. The sources specified here also have been included in data_source_restrictions above.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultFacetOptions")
    public FacetOptions[] defaultFacetOptions;
    public SearchApplication withDefaultFacetOptions(FacetOptions[] defaultFacetOptions) {
        this.defaultFacetOptions = defaultFacetOptions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultSortOptions")
    public SortOptions defaultSortOptions;
    public SearchApplication withDefaultSortOptions(SortOptions defaultSortOptions) {
        this.defaultSortOptions = defaultSortOptions;
        return this;
    }
    
    /**
     * Display name of the Search Application. The maximum length is 300 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public SearchApplication withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Indicates whether audit logging is on/off for requests made for the search application in query APIs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableAuditLog")
    public Boolean enableAuditLog;
    public SearchApplication withEnableAuditLog(Boolean enableAuditLog) {
        this.enableAuditLog = enableAuditLog;
        return this;
    }
    
    /**
     * The name of the Search Application. Format: searchapplications/{application_id}.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public SearchApplication withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. IDs of the Long Running Operations (LROs) currently running for this schema. Output only field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operationIds")
    public String[] operationIds;
    public SearchApplication withOperationIds(String[] operationIds) {
        this.operationIds = operationIds;
        return this;
    }
    
    /**
     * Default options to interpret user query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queryInterpretationConfig")
    public QueryInterpretationConfig queryInterpretationConfig;
    public SearchApplication withQueryInterpretationConfig(QueryInterpretationConfig queryInterpretationConfig) {
        this.queryInterpretationConfig = queryInterpretationConfig;
        return this;
    }
    
    /**
     * With each result we should return the URI for its thumbnail (when applicable)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnResultThumbnailUrls")
    public Boolean returnResultThumbnailUrls;
    public SearchApplication withReturnResultThumbnailUrls(Boolean returnResultThumbnailUrls) {
        this.returnResultThumbnailUrls = returnResultThumbnailUrls;
        return this;
    }
    
    /**
     * Scoring configurations for a source while processing a Search or Suggest request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scoringConfig")
    public ScoringConfig scoringConfig;
    public SearchApplication withScoringConfig(ScoringConfig scoringConfig) {
        this.scoringConfig = scoringConfig;
        return this;
    }
    
    /**
     * Configuration for a sources specified in data_source_restrictions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceConfig")
    public SourceConfig[] sourceConfig;
    public SearchApplication withSourceConfig(SourceConfig[] sourceConfig) {
        this.sourceConfig = sourceConfig;
        return this;
    }
    
}
