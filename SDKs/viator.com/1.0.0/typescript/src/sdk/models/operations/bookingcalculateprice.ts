/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class BookingCalculatepriceRequestBodyItemsTravellers extends SpeakeasyBase {
  /**
   * **unique numeric identifier** for the age band
   *
   * @remarks
   * - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bandId" })
  bandId?: number;
}

export class BookingCalculatepriceRequestBodyItems extends SpeakeasyBase {
  /**
   * **unique alphanumeric identifier** of the product the total price for which you which to calculate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productCode" })
  productCode?: string;

  /**
   * **alphanumeric identifier** for the tour grade for which to calculate the total price
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tourGradeCode" })
  tourGradeCode?: string;

  /**
   * **date** for which to calculate the total price (must be in the future)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "travelDate" })
  travelDate?: string;

  /**
   * **array of objects** detailing the age bands for which to calculate the total price
   */
  @SpeakeasyMetadata({
    elemType: BookingCalculatepriceRequestBodyItemsTravellers,
  })
  @Expose({ name: "travellers" })
  @Type(() => BookingCalculatepriceRequestBodyItemsTravellers)
  travellers?: BookingCalculatepriceRequestBodyItemsTravellers[];
}

export class BookingCalculatepriceRequestBody extends SpeakeasyBase {
  /**
   * **currency code** for the currency in which to display pricing details
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode?: string;

  /**
   * **array** of travel detail objects
   */
  @SpeakeasyMetadata({ elemType: BookingCalculatepriceRequestBodyItems })
  @Expose({ name: "items" })
  @Type(() => BookingCalculatepriceRequestBodyItems)
  items?: BookingCalculatepriceRequestBodyItems[];
}

export class BookingCalculatepriceRequest extends SpeakeasyBase {
  /**
   * Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Accept-Language",
  })
  acceptLanguage: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: BookingCalculatepriceRequestBody;
}

export class BookingCalculateprice200ApplicationJSONDataItineraryItemSummariesTravellerAgeBands extends SpeakeasyBase {
  /**
   * **unique numeric identifier** for the age band
   *
   * @remarks
   * - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ageBandId" })
  ageBandId?: number;

  /**
   * **number of travelers in *this* age band
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * **natural-language** description (singular) of *this* age band
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * **natural-language** description (plural) of *this* age band
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pluralDescription" })
  pluralDescription?: string;

  /**
   * **sort order** for *this* age band
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: number;
}

export class BookingCalculateprice200ApplicationJSONDataItineraryItemSummaries extends SpeakeasyBase {
  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applePassSupported" })
  applePassSupported?: boolean;

  /**
   * Indicates whether a voucher is required for each passenger; or, whether the requirement is one voucher per group booking.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "barcodeOption" })
  barcodeOption?: string;

  /**
   * **alphanumeric specifier** of the barcode type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "barcodeType" })
  barcodeType?: string;

  /**
   * [booking type indicator](#section/Key-concepts/Booking-concepts) that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
   *
   * @remarks
   *
   * *one of* the following:
   * - `"UF"` (FreesaleBE and UnconditionalBE) – this booking will be confirmed immediately
   * - `"OR"` (DeferredCRMBE) – the booked product is an on-request product, will not be confirmed immediately and will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
   * - `"FO"` (FreesaleOnRequestBE) – the booked product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingEngineId" })
  bookingEngineId?: shared.BookingEngineIdResponseEnum;

  /**
   * **object** containing item booking status information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingStatus" })
  @Type(() => shared.BookingStatusItem)
  bookingStatus?: shared.BookingStatusItem;

  /**
   * **currency code** for the currency in which pricing details are displayed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode?: string;

  /**
   * **natural-language description** of *this* item's general departure location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departsFrom" })
  departsFrom?: string;

  /**
   * **HTML-formatted description** of *this* product's departure location(s)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departurePoint" })
  departurePoint?: string;

  /**
   * **HTML-formatted description** of *this* product's departure address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departurePointAddress" })
  departurePointAddress?: string;

  /**
   * **HTML-formatted descriptive notes** about *this* product's departure location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departurePointDirections" })
  departurePointDirections?: string;

  /**
   * **unique numeric id** of the destination associated with *this* product
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destId" })
  destId?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distributorItemRef" })
  distributorItemRef?: string;

  /**
   * The `hoursConfirmed` field also indicates if the product is freesale or on request. The `hoursConfirmed` value is the approximate window for confirmation in hours, which can be presented to the customer. A value of `0` means that the product is **freesale**, and a value greater than `0` means that the product is **on-request**.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hoursConfirmed" })
  hoursConfirmed?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemId" })
  itemId?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itineraryId" })
  itineraryId?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "languageServicesLanguageCode" })
  languageServicesLanguageCode?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastRetailPrice" })
  lastRetailPrice?: number;

  /**
   * **currency-formatted most recent retail price** for *this* item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastRetailPriceFormatted" })
  lastRetailPriceFormatted?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leadTravellerFirstname" })
  leadTravellerFirstname?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leadTravellerSurname" })
  leadTravellerSurname?: string;

  /**
   * **title** of the lead traveler's name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leadTravellerTitle" })
  leadTravellerTitle?: string;

  /**
   * ignore (Viator only)
   *
   * @remarks
   *
   * For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantCancellable" })
  merchantCancellable?: boolean;

  /**
   * **numeric merchant net rate** for *this* product
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantNetPrice" })
  merchantNetPrice?: number;

  /**
   * **currency-formatted merchant net rate** for *this* product
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantNetPriceFormatted" })
  merchantNetPriceFormatted?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "obfsId" })
  obfsId?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "passbooks" })
  passbooks?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pickupHotelId" })
  pickupHotelId?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pickupHotelName" })
  pickupHotelName?: string;

  /**
   * **numeric suggested retail price** for *this* product
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price?: number;

  /**
   * **currency-formatted suggested retail price** for *this* product
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priceFormatted" })
  priceFormatted?: string;

  /**
   * **numeric price of *this* product** in USD
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priceUSD" })
  priceUSD?: number;

  /**
   * **unique alphanumeric identifier** of *this* product
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productCode" })
  productCode?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productPulledDown" })
  productPulledDown?: boolean;

  /**
   * **natural-language title** of *this* product
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productTitle" })
  productTitle?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productWidgetList" })
  productWidgetList?: string;

  /**
   * **array** of rules applied to *this* item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rulesApplied" })
  rulesApplied?: string[];

  /**
   * Ignore (Viator only)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "savingAmount" })
  savingAmount?: string;

  /**
   * Ignore (Viator only)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "savingAmountFormated" })
  savingAmountFormated?: string;

  /**
   * **sort-order** of *this* item summary
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: number;

  /**
   * **starting time** of the tour in the supplier's local time zone
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startingTime" })
  startingTime?: string;

  /**
   * **natural-language name** of *this* product's supplier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supplierName" })
  supplierName?: string;

  /**
   * **telephone number** of the supplier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supplierPhoneNumber" })
  supplierPhoneNumber?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "termsAndConditions" })
  termsAndConditions?: string;

  /**
   * **alphanumeric specifier** of the tour grade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tourGradeCode" })
  tourGradeCode?: string;

  /**
   * **natural-language description** of *this* item's tour grade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tourGradeDescription" })
  tourGradeDescription?: string;

  /**
   * **date** on which *this* product will operate (in the supplier's local time zone)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "travelDate" })
  travelDate?: string;

  /**
   * **array** of age-band objects
   */
  @SpeakeasyMetadata({
    elemType:
      BookingCalculateprice200ApplicationJSONDataItineraryItemSummariesTravellerAgeBands,
  })
  @Expose({ name: "travellerAgeBands" })
  @Type(
    () =>
      BookingCalculateprice200ApplicationJSONDataItineraryItemSummariesTravellerAgeBands
  )
  travellerAgeBands?: BookingCalculateprice200ApplicationJSONDataItineraryItemSummariesTravellerAgeBands[];

  /**
   * Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherKey" })
  voucherKey?: string;

  /**
   * **alphanumeric specifier** of the relevant voucher option
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherOption" })
  voucherOption?: string;

  /**
   * **natural-language description** of the voucher requirements for this tour (**note:** Should agree with value in `voucherOption` field)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherRequirements" })
  voucherRequirements?: string;

  /**
   * **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherURL" })
  voucherURL?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vouchers" })
  vouchers?: string;
}

/**
 * **summary results** for all itinerary items
 */
export class BookingCalculateprice200ApplicationJSONDataItinerary extends SpeakeasyBase {
  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookerEmail" })
  bookerEmail?: string;

  /**
   * **date** of *this* booking
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingDate" })
  bookingDate?: string;

  /**
   * **object** containing itinerary booking status information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingStatus" })
  @Type(() => shared.BookingStatusItinerary)
  bookingStatus?: shared.BookingStatusItinerary;

  /**
   * **specifier** of the currency in which pricing details are displayed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distributorRef" })
  distributorRef?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exchangeRate" })
  exchangeRate?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasVoucher" })
  hasVoucher?: boolean;

  /**
   * **array** of item summaries
   */
  @SpeakeasyMetadata({
    elemType: BookingCalculateprice200ApplicationJSONDataItineraryItemSummaries,
  })
  @Expose({ name: "itemSummaries" })
  @Type(() => BookingCalculateprice200ApplicationJSONDataItineraryItemSummaries)
  itemSummaries?: BookingCalculateprice200ApplicationJSONDataItineraryItemSummaries[];

  /**
   * **numeric identifier** for *this* order
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itineraryId" })
  itineraryId?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "omniPreRuleList" })
  omniPreRuleList?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paypalRedirectURL" })
  paypalRedirectURL?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rulesApplied" })
  rulesApplied?: string[];

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "securityToken" })
  securityToken?: string;

  /**
   * **sort order** for *this* itinerary
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: number;

  /**
   * **numeric total price (total)** for *this* order
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPrice" })
  totalPrice?: number;

  /**
   * **currency-formatted total price (including transaction fee)** for *this* order
   *
   * @remarks
   * - For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPriceFormatted" })
  totalPriceFormatted?: string;

  /**
   * **numeric total price** of *this* order in USD
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPriceUSD" })
  totalPriceUSD?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userId" })
  userId?: number;

  /**
   * Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherKey" })
  voucherKey?: string;

  /**
   * **URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voucherURL" })
  voucherURL?: string;
}

export class BookingCalculateprice200ApplicationJSONData extends SpeakeasyBase {
  /**
   * **specifier of the currency** in which pricing details are displayed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasPromoCode" })
  hasPromoCode?: boolean;

  /**
   * **summary results** for all itinerary items
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itinerary" })
  @Type(() => BookingCalculateprice200ApplicationJSONDataItinerary)
  itinerary?: BookingCalculateprice200ApplicationJSONDataItinerary;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itineraryFromPrice" })
  itineraryFromPrice?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itineraryFromPriceFormatted" })
  itineraryFromPriceFormatted?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itineraryNewPrice" })
  itineraryNewPrice?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itineraryNewPriceFormatted" })
  itineraryNewPriceFormatted?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itinerarySaving" })
  itinerarySaving?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itinerarySavingFormatted" })
  itinerarySavingFormatted?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentGatewayInfo" })
  paymentGatewayInfo?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "promoCode" })
  promoCode?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "promoCodeExpired" })
  promoCodeExpired?: boolean;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "promoCodeValid" })
  promoCodeValid?: boolean;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rulesApplied" })
  rulesApplied?: string[];
}

/**
 * Success
 */
export class BookingCalculateprice200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => BookingCalculateprice200ApplicationJSONData)
  data?: BookingCalculateprice200ApplicationJSONData;

  /**
   * **timestamp** of *this* response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateStamp" })
  dateStamp?: string;

  /**
   * **array** of error codes pertaining to *this* error
   *
   * @remarks
   * - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorCodes" })
  errorCodes?: string[];

  /**
   * **array** of error message strings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: any[];

  /**
   * **array** of error message strings in plain text
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessageText" })
  errorMessageText?: string;

  /**
   * **name** of *this* type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorName" })
  errorName?: string;

  /**
   * **reference number** of *this* error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorReference" })
  errorReference?: string;

  /**
   * **code** specifying the type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorType" })
  errorType?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraInfo" })
  extraInfo?: Record<string, any>;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraObject" })
  extraObject?: Record<string, any>;

  /**
   * **boolean indicator** of *this* request's outcome
   *
   * @remarks
   * - `true`: the request was successful with no errors
   * - `false`: an error was encountered
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  /**
   * **number** of results available for *this* service
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalCount" })
  totalCount?: number;

  /**
   * **unique numeric id** of the server that processed *this* request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vmid" })
  vmid?: string;
}

export class BookingCalculatepriceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  bookingCalculateprice200ApplicationJSONObject?: BookingCalculateprice200ApplicationJSON;
}
