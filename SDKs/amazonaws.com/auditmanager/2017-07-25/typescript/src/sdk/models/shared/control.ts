/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ControlMappingSource } from "./controlmappingsource";
import { ControlTypeEnum } from "./controltypeenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 *  A control in Audit Manager.
 */
export class Control extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "actionPlanInstructions" })
  actionPlanInstructions?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "actionPlanTitle" })
  actionPlanTitle?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata({ elemType: ControlMappingSource })
  @Expose({ name: "controlMappingSources" })
  @Type(() => ControlMappingSource)
  controlMappingSources?: ControlMappingSource[];

  @SpeakeasyMetadata()
  @Expose({ name: "controlSources" })
  controlSources?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  createdBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdatedBy" })
  lastUpdatedBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "testingInformation" })
  testingInformation?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ControlTypeEnum;
}
