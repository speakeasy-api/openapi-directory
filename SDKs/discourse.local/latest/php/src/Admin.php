<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Admin 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a user by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminGetUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminGetUserResponse
     */
	public function adminGetUser(
        \OpenAPI\OpenAPI\Models\Operations\AdminGetUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminGetUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{id}.json', \OpenAPI\OpenAPI\Models\Operations\AdminGetUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminGetUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminGetUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AdminGetUser200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdminListUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AdminListUsersResponse
     */
	public function adminListUsers(
        \OpenAPI\OpenAPI\Models\Operations\AdminListUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AdminListUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/list/{flag}.json', \OpenAPI\OpenAPI\Models\Operations\AdminListUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdminListUsersRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdminListUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminListUsers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AdminListUsers200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Anonymize a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnonymizeUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AnonymizeUserResponse
     */
	public function anonymizeUser(
        \OpenAPI\OpenAPI\Models\Operations\AnonymizeUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AnonymizeUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{id}/anonymize.json', \OpenAPI\OpenAPI\Models\Operations\AnonymizeUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnonymizeUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->anonymizeUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnonymizeUser200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserResponse
     */
	public function deleteUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{id}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteUser200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Log a user out
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LogOutUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LogOutUserResponse
     */
	public function logOutUser(
        \OpenAPI\OpenAPI\Models\Operations\LogOutUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LogOutUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{id}/log_out.json', \OpenAPI\OpenAPI\Models\Operations\LogOutUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LogOutUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->logOutUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LogOutUser200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Refresh gravatar
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RefreshGravatarRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RefreshGravatarResponse
     */
	public function refreshGravatar(
        \OpenAPI\OpenAPI\Models\Operations\RefreshGravatarRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RefreshGravatarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user_avatar/{username}/refresh_gravatar.json', \OpenAPI\OpenAPI\Models\Operations\RefreshGravatarRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RefreshGravatarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->refreshGravatar200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RefreshGravatar200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Silence a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SilenceUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SilenceUserResponse
     */
	public function silenceUser(
        \OpenAPI\OpenAPI\Models\Operations\SilenceUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SilenceUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{id}/silence.json', \OpenAPI\OpenAPI\Models\Operations\SilenceUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SilenceUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->silenceUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SilenceUser200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Suspend a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse
     */
	public function suspendUser(
        \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/users/{id}/suspend.json', \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->suspendUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SuspendUser200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}