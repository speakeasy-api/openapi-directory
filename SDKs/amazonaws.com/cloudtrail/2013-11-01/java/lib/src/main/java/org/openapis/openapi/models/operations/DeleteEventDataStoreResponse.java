/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.net.http.HttpResponse;

public class DeleteEventDataStoreResponse {
    /**
     * ChannelExistsForEDSException
     */
    
    public Object channelExistsForEDSException;
    public DeleteEventDataStoreResponse withChannelExistsForEDSException(Object channelExistsForEDSException) {
        this.channelExistsForEDSException = channelExistsForEDSException;
        return this;
    }
    
    
    public String contentType;
    public DeleteEventDataStoreResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Success
     */
    
    public java.util.Map<String, Object> deleteEventDataStoreResponse;
    public DeleteEventDataStoreResponse withDeleteEventDataStoreResponse(java.util.Map<String, Object> deleteEventDataStoreResponse) {
        this.deleteEventDataStoreResponse = deleteEventDataStoreResponse;
        return this;
    }
    
    /**
     * EventDataStoreARNInvalidException
     */
    
    public Object eventDataStoreARNInvalidException;
    public DeleteEventDataStoreResponse withEventDataStoreARNInvalidException(Object eventDataStoreARNInvalidException) {
        this.eventDataStoreARNInvalidException = eventDataStoreARNInvalidException;
        return this;
    }
    
    /**
     * EventDataStoreHasOngoingImportException
     */
    
    public Object eventDataStoreHasOngoingImportException;
    public DeleteEventDataStoreResponse withEventDataStoreHasOngoingImportException(Object eventDataStoreHasOngoingImportException) {
        this.eventDataStoreHasOngoingImportException = eventDataStoreHasOngoingImportException;
        return this;
    }
    
    /**
     * EventDataStoreNotFoundException
     */
    
    public Object eventDataStoreNotFoundException;
    public DeleteEventDataStoreResponse withEventDataStoreNotFoundException(Object eventDataStoreNotFoundException) {
        this.eventDataStoreNotFoundException = eventDataStoreNotFoundException;
        return this;
    }
    
    /**
     * EventDataStoreTerminationProtectedException
     */
    
    public Object eventDataStoreTerminationProtectedException;
    public DeleteEventDataStoreResponse withEventDataStoreTerminationProtectedException(Object eventDataStoreTerminationProtectedException) {
        this.eventDataStoreTerminationProtectedException = eventDataStoreTerminationProtectedException;
        return this;
    }
    
    /**
     * InactiveEventDataStoreException
     */
    
    public Object inactiveEventDataStoreException;
    public DeleteEventDataStoreResponse withInactiveEventDataStoreException(Object inactiveEventDataStoreException) {
        this.inactiveEventDataStoreException = inactiveEventDataStoreException;
        return this;
    }
    
    /**
     * InsufficientDependencyServiceAccessPermissionException
     */
    
    public Object insufficientDependencyServiceAccessPermissionException;
    public DeleteEventDataStoreResponse withInsufficientDependencyServiceAccessPermissionException(Object insufficientDependencyServiceAccessPermissionException) {
        this.insufficientDependencyServiceAccessPermissionException = insufficientDependencyServiceAccessPermissionException;
        return this;
    }
    
    /**
     * InvalidParameterException
     */
    
    public Object invalidParameterException;
    public DeleteEventDataStoreResponse withInvalidParameterException(Object invalidParameterException) {
        this.invalidParameterException = invalidParameterException;
        return this;
    }
    
    /**
     * NoManagementAccountSLRExistsException
     */
    
    public Object noManagementAccountSLRExistsException;
    public DeleteEventDataStoreResponse withNoManagementAccountSLRExistsException(Object noManagementAccountSLRExistsException) {
        this.noManagementAccountSLRExistsException = noManagementAccountSLRExistsException;
        return this;
    }
    
    /**
     * NotOrganizationMasterAccountException
     */
    
    public Object notOrganizationMasterAccountException;
    public DeleteEventDataStoreResponse withNotOrganizationMasterAccountException(Object notOrganizationMasterAccountException) {
        this.notOrganizationMasterAccountException = notOrganizationMasterAccountException;
        return this;
    }
    
    /**
     * OperationNotPermittedException
     */
    
    public Object operationNotPermittedException;
    public DeleteEventDataStoreResponse withOperationNotPermittedException(Object operationNotPermittedException) {
        this.operationNotPermittedException = operationNotPermittedException;
        return this;
    }
    
    
    public Integer statusCode;
    public DeleteEventDataStoreResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;
    public DeleteEventDataStoreResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * UnsupportedOperationException
     */
    
    public Object unsupportedOperationException;
    public DeleteEventDataStoreResponse withUnsupportedOperationException(Object unsupportedOperationException) {
        this.unsupportedOperationException = unsupportedOperationException;
        return this;
    }
    
}
