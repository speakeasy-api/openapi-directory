"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import membergroup as shared_membergroup
from ..shared import memberuser as shared_memberuser
from ..shared import s3path as shared_s3path
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GroupMembers:
    r"""A list of users or sub groups that belong to a group. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents."""
    
    member_groups: Optional[list[shared_membergroup.MemberGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MemberGroups'), 'exclude': lambda f: f is None }})  
    member_users: Optional[list[shared_memberuser.MemberUser]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MemberUsers'), 'exclude': lambda f: f is None }})  
    s3_pathfor_group_members: Optional[shared_s3path.S3Path] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3PathforGroupMembers'), 'exclude': lambda f: f is None }})  
    