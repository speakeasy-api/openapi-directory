// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SpcerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type SpcerRequestBodyCertificateParameters struct {
	// Candidate ID
	Cuid string `json:"CUID"`
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Index Number
	Idxn string `json:"IDXN"`
	// Aadhaar number
	UID string `json:"UID"`
	// Year Of Examination -YYYY
	Yoe string `json:"YOE"`
}

// SpcerRequestBodyFormatEnum - The format of the certificate in response.
type SpcerRequestBodyFormatEnum string

const (
	SpcerRequestBodyFormatEnumPdf SpcerRequestBodyFormatEnum = "pdf"
)

func (e *SpcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = SpcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SpcerRequestBodyFormatEnum: %s", s)
	}
}

// SpcerRequestBody - Request format
type SpcerRequestBody struct {
	CertificateParameters *SpcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SpcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type SpcerRequest struct {
	// Request format
	Request  *SpcerRequestBody `request:"mediaType=application/json"`
	Security SpcerSecurity
}

type Spcer504ApplicationJSONErrorEnum string

const (
	Spcer504ApplicationJSONErrorEnumGatewayTimeout Spcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Spcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Spcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Spcer504ApplicationJSONErrorDescriptionEnum string

const (
	Spcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Spcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Spcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Spcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Spcer504ApplicationJSON - Gateway timeout
type Spcer504ApplicationJSON struct {
	Error            *Spcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Spcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Spcer503ApplicationJSONErrorEnum string

const (
	Spcer503ApplicationJSONErrorEnumServiceUnavailable Spcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Spcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Spcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Spcer503ApplicationJSONErrorDescriptionEnum string

const (
	Spcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Spcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Spcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Spcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Spcer503ApplicationJSON - Service unavailable
type Spcer503ApplicationJSON struct {
	Error            *Spcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Spcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Spcer502ApplicationJSONErrorEnum string

const (
	Spcer502ApplicationJSONErrorEnumBadGatewy Spcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Spcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Spcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Spcer502ApplicationJSONErrorDescriptionEnum string

const (
	Spcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Spcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Spcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Spcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Spcer502ApplicationJSON - Bad gateway
type Spcer502ApplicationJSON struct {
	Error            *Spcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Spcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Spcer500ApplicationJSONErrorEnum string

const (
	Spcer500ApplicationJSONErrorEnumInternalServerError Spcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Spcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Spcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Spcer500ApplicationJSONErrorDescriptionEnum string

const (
	Spcer500ApplicationJSONErrorDescriptionEnumInternalServerError Spcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Spcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Spcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Spcer500ApplicationJSON - Internal server error
type Spcer500ApplicationJSON struct {
	Error            *Spcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Spcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Spcer404ApplicationJSONErrorEnum string

const (
	Spcer404ApplicationJSONErrorEnumRecordNotFound Spcer404ApplicationJSONErrorEnum = "record_not_found"
	Spcer404ApplicationJSONErrorEnumURLNotFound    Spcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Spcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Spcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Spcer404ApplicationJSONErrorDescriptionEnum string

const (
	Spcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Spcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Spcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Spcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Spcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Spcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Spcer404ApplicationJSON - No record found
type Spcer404ApplicationJSON struct {
	Error            *Spcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Spcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Spcer401ApplicationJSONErrorEnum string

const (
	Spcer401ApplicationJSONErrorEnumInvalidAuthentication Spcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Spcer401ApplicationJSONErrorEnumInvalidAuthorization  Spcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Spcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Spcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Spcer401ApplicationJSONErrorDescriptionEnum string

const (
	Spcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Spcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Spcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Spcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Spcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Spcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Spcer401ApplicationJSON - Unauthorized access
type Spcer401ApplicationJSON struct {
	Error            *Spcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Spcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Spcer400ApplicationJSONErrorEnum string

const (
	Spcer400ApplicationJSONErrorEnumMissingParameter Spcer400ApplicationJSONErrorEnum = "missing_parameter"
	Spcer400ApplicationJSONErrorEnumInvalidParameter Spcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Spcer400ApplicationJSONErrorEnumInvalidFormat    Spcer400ApplicationJSONErrorEnum = "invalid_format"
	Spcer400ApplicationJSONErrorEnumInvalidTxnid     Spcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Spcer400ApplicationJSONErrorEnumInvalidConsentid Spcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Spcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Spcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Spcer400ApplicationJSONErrorDescriptionEnum string

const (
	Spcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Spcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Spcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Spcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Spcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Spcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Spcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Spcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Spcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Spcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Spcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Spcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Spcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Spcer400ApplicationJSON - Bad request
type Spcer400ApplicationJSON struct {
	Error            *Spcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Spcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SpcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Spcer400ApplicationJSONObject *Spcer400ApplicationJSON
	// Unauthorized access
	Spcer401ApplicationJSONObject *Spcer401ApplicationJSON
	// No record found
	Spcer404ApplicationJSONObject *Spcer404ApplicationJSON
	// Internal server error
	Spcer500ApplicationJSONObject *Spcer500ApplicationJSON
	// Bad gateway
	Spcer502ApplicationJSONObject *Spcer502ApplicationJSON
	// Service unavailable
	Spcer503ApplicationJSONObject *Spcer503ApplicationJSON
	// Gateway timeout
	Spcer504ApplicationJSONObject *Spcer504ApplicationJSON
}
