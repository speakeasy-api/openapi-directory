<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SecretScanning 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a secret scanning alert
     * 
     * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
     * 
     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.1/rest/reference/secret-scanning#get-a-secret-scanning-alert - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretScanningGetAlertRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretScanningGetAlertResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/secret-scanning#get-a-secret-scanning-alert
     */
	public function secretScanningGetAlert(
        \OpenAPI\OpenAPI\Models\Operations\SecretScanningGetAlertRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretScanningGetAlertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}', \OpenAPI\OpenAPI\Models\Operations\SecretScanningGetAlertRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretScanningGetAlertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secretScanningAlert = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecretScanningAlert', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 404) {
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secretScanningGetAlert503ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SecretScanningGetAlert503ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List secret scanning alerts for a repository
     * 
     * Lists secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
     * 
     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.1/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretScanningListAlertsForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretScanningListAlertsForRepoResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository
     */
	public function secretScanningListAlertsForRepo(
        \OpenAPI\OpenAPI\Models\Operations\SecretScanningListAlertsForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretScanningListAlertsForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/secret-scanning/alerts', \OpenAPI\OpenAPI\Models\Operations\SecretScanningListAlertsForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecretScanningListAlertsForRepoRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretScanningListAlertsForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secretScanningAlerts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SecretScanningAlert>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secretScanningListAlertsForRepo503ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SecretScanningListAlertsForRepo503ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a secret scanning alert
     * 
     * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
     * 
     * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
     * https://docs.github.com/enterprise-server@3.1/rest/reference/secret-scanning#update-a-secret-scanning-alert - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecretScanningUpdateAlertRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SecretScanningUpdateAlertResponse
     * @see https://docs.github.com/enterprise-server@3.1/rest/reference/secret-scanning#update-a-secret-scanning-alert
     */
	public function secretScanningUpdateAlert(
        \OpenAPI\OpenAPI\Models\Operations\SecretScanningUpdateAlertRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SecretScanningUpdateAlertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}', \OpenAPI\OpenAPI\Models\Operations\SecretScanningUpdateAlertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecretScanningUpdateAlertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secretScanningAlert = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecretScanningAlert', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->secretScanningUpdateAlert503ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SecretScanningUpdateAlert503ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}