/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SearchJobsResponse - Output only. Response for SearchJob method.
 */
public class SearchJobsResponse {
    /**
     * If query broadening is enabled, we may append additional results from the broadened query. This number indicates how many of the jobs returned in the jobs field are from the broadened query. These results are always at the end of the jobs list. In particular, a value of 0, or if the field isn't set, all the jobs in the jobs list are from the original (without broadening) query. If this field is non-zero, subsequent requests with offset after this result set should contain all broadened results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("broadenedQueryJobsCount")
    public Integer broadenedQueryJobsCount;
    public SearchJobsResponse withBroadenedQueryJobsCount(Integer broadenedQueryJobsCount) {
        this.broadenedQueryJobsCount = broadenedQueryJobsCount;
        return this;
    }
    
    /**
     * An estimation of the number of jobs that match the specified query. This number is not guaranteed to be accurate. For accurate results, see SearchJobsResponse.total_size.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("estimatedTotalSize")
    public Integer estimatedTotalSize;
    public SearchJobsResponse withEstimatedTotalSize(Integer estimatedTotalSize) {
        this.estimatedTotalSize = estimatedTotalSize;
        return this;
    }
    
    /**
     * Output only. Histogram results that match HistogramFacets specified in SearchJobsRequest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("histogramResults")
    public HistogramResults histogramResults;
    public SearchJobsResponse withHistogramResults(HistogramResults histogramResults) {
        this.histogramResults = histogramResults;
        return this;
    }
    
    /**
     * The location filters that the service applied to the specified query. If any filters are lat-lng based, the JobLocation.location_type is JobLocation.LocationType#LOCATION_TYPE_UNSPECIFIED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationFilters")
    public Location[] locationFilters;
    public SearchJobsResponse withLocationFilters(Location[] locationFilters) {
        this.locationFilters = locationFilters;
        return this;
    }
    
    /**
     * The Job entities that match the specified SearchJobsRequest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchingJobs")
    public MatchingJob[] matchingJobs;
    public SearchJobsResponse withMatchingJobs(MatchingJob[] matchingJobs) {
        this.matchingJobs = matchingJobs;
        return this;
    }
    
    /**
     * Output only. Additional information returned to client, such as debugging information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public ResponseMetadata metadata;
    public SearchJobsResponse withMetadata(ResponseMetadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The token that specifies the starting position of the next page of results. This field is empty if there are no more results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextPageToken")
    public String nextPageToken;
    public SearchJobsResponse withNextPageToken(String nextPageToken) {
        this.nextPageToken = nextPageToken;
        return this;
    }
    
    /**
     * Output only. Spell check result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spellCorrection")
    public SpellingCorrection spellCorrection;
    public SearchJobsResponse withSpellCorrection(SpellingCorrection spellCorrection) {
        this.spellCorrection = spellCorrection;
        return this;
    }
    
    /**
     * The precise result count with limit 100,000.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalSize")
    public Integer totalSize;
    public SearchJobsResponse withTotalSize(Integer totalSize) {
        this.totalSize = totalSize;
        return this;
    }
    
}
