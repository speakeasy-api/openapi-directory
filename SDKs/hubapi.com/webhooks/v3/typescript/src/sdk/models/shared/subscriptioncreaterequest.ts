/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
 */
export enum SubscriptionCreateRequestEventTypeEnum {
  ContactPropertyChange = "contact.propertyChange",
  CompanyPropertyChange = "company.propertyChange",
  DealPropertyChange = "deal.propertyChange",
  TicketPropertyChange = "ticket.propertyChange",
  ProductPropertyChange = "product.propertyChange",
  LineItemPropertyChange = "line_item.propertyChange",
  ContactCreation = "contact.creation",
  ContactDeletion = "contact.deletion",
  ContactPrivacyDeletion = "contact.privacyDeletion",
  CompanyCreation = "company.creation",
  CompanyDeletion = "company.deletion",
  DealCreation = "deal.creation",
  DealDeletion = "deal.deletion",
  TicketCreation = "ticket.creation",
  TicketDeletion = "ticket.deletion",
  ProductCreation = "product.creation",
  ProductDeletion = "product.deletion",
  LineItemCreation = "line_item.creation",
  LineItemDeletion = "line_item.deletion",
  ConversationCreation = "conversation.creation",
  ConversationDeletion = "conversation.deletion",
  ConversationNewMessage = "conversation.newMessage",
  ConversationPrivacyDeletion = "conversation.privacyDeletion",
  ConversationPropertyChange = "conversation.propertyChange",
}

/**
 * New webhook settings for an app.
 */
export class SubscriptionCreateRequest extends SpeakeasyBase {
  /**
   * Determines if the subscription is active or paused. Defaults to false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;

  /**
   * Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventType" })
  eventType: SubscriptionCreateRequestEventTypeEnum;

  /**
   * The internal name of the property to monitor for changes. Only applies when `eventType` is `propertyChange`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "propertyName" })
  propertyName?: string;
}
