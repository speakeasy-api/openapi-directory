/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Metrics - Performance metrics. Values are only set for metrics requested explicitly in the request's search query.
 */
public class Metrics {
    /**
     * Average order size - the average number of items in an order. **This metric cannot be segmented by product dimensions and customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aos")
    public Double aos;

    public Metrics withAos(Double aos) {
        this.aos = aos;
        return this;
    }
    
    /**
     * Average order value in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) - the average value (total price of items) of all placed orders. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by product dimensions and customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aovMicros")
    public Double aovMicros;

    public Metrics withAovMicros(Double aovMicros) {
        this.aovMicros = aovMicros;
        return this;
    }
    
    /**
     * Number of clicks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clicks")
    public String clicks;

    public Metrics withClicks(String clicks) {
        this.clicks = clicks;
        return this;
    }
    
    /**
     * Number of conversions divided by the number of clicks, reported on the impression date. The metric is currently available only for the FREE_PRODUCT_LISTING program.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversionRate")
    public Double conversionRate;

    public Metrics withConversionRate(Double conversionRate) {
        this.conversionRate = conversionRate;
        return this;
    }
    
    /**
     * Value of conversions in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) attributed to the product, reported on the conversion date. The metric is currently available only for the FREE_PRODUCT_LISTING program. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversionValueMicros")
    public String conversionValueMicros;

    public Metrics withConversionValueMicros(String conversionValueMicros) {
        this.conversionValueMicros = conversionValueMicros;
        return this;
    }
    
    /**
     * Number of conversions attributed to the product, reported on the conversion date. Depending on the attribution model, a conversion might be distributed across multiple clicks, where each click gets its own credit assigned. This metric is a sum of all such credits. The metric is currently available only for the FREE_PRODUCT_LISTING program.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversions")
    public Double conversions;

    public Metrics withConversions(Double conversions) {
        this.conversions = conversions;
        return this;
    }
    
    /**
     * Click-through rate - the number of clicks merchant's products receive (clicks) divided by the number of times the products are shown (impressions).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ctr")
    public Double ctr;

    public Metrics withCtr(Double ctr) {
        this.ctr = ctr;
        return this;
    }
    
    /**
     * Average number of days between an order being placed and the order being fully shipped, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("daysToShip")
    public Double daysToShip;

    public Metrics withDaysToShip(Double daysToShip) {
        this.daysToShip = daysToShip;
        return this;
    }
    
    /**
     * Number of times merchant's products are shown.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("impressions")
    public String impressions;

    public Metrics withImpressions(String impressions) {
        this.impressions = impressions;
        return this;
    }
    
    /**
     * Average number of days between an item being ordered and the item being **This metric cannot be segmented by customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemDaysToShip")
    public Double itemDaysToShip;

    public Metrics withItemDaysToShip(Double itemDaysToShip) {
        this.itemDaysToShip = itemDaysToShip;
        return this;
    }
    
    /**
     * Percentage of shipped items in relation to all finalized items (shipped or rejected by the merchant; unshipped items are not taken into account), reported on the order date. Item fill rate is lowered by merchant rejections. **This metric cannot be segmented by customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemFillRate")
    public Double itemFillRate;

    public Metrics withItemFillRate(Double itemFillRate) {
        this.itemFillRate = itemFillRate;
        return this;
    }
    
    /**
     * Total price of ordered items in micros (1 millionth of a standard unit, 1 USD = 1000000 micros). Excludes shipping, taxes (US only), and customer cancellations that happened within 30 minutes of placing the order. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderedItemSalesMicros")
    public String orderedItemSalesMicros;

    public Metrics withOrderedItemSalesMicros(String orderedItemSalesMicros) {
        this.orderedItemSalesMicros = orderedItemSalesMicros;
        return this;
    }
    
    /**
     * Number of ordered items. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderedItems")
    public String orderedItems;

    public Metrics withOrderedItems(String orderedItems) {
        this.orderedItems = orderedItems;
        return this;
    }
    
    /**
     * Number of placed orders. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by product dimensions and customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orders")
    public String orders;

    public Metrics withOrders(String orders) {
        this.orders = orders;
        return this;
    }
    
    /**
     * Number of ordered items canceled by the merchant, reported on the order date. **This metric cannot be segmented by customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rejectedItems")
    public String rejectedItems;

    public Metrics withRejectedItems(String rejectedItems) {
        this.rejectedItems = rejectedItems;
        return this;
    }
    
    /**
     * Total price of returned items divided by the total price of shipped items, reported on the order date. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnRate")
    public Double returnRate;

    public Metrics withReturnRate(Double returnRate) {
        this.returnRate = returnRate;
        return this;
    }
    
    /**
     * Number of ordered items sent back for return, reported on the date when the merchant accepted the return. **This metric cannot be segmented by customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnedItems")
    public String returnedItems;

    public Metrics withReturnedItems(String returnedItems) {
        this.returnedItems = returnedItems;
        return this;
    }
    
    /**
     * Total price of ordered items sent back for return in micros (1 millionth of a standard unit, 1 USD = 1000000 micros), reported on the date when the merchant accepted the return. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnsMicros")
    public String returnsMicros;

    public Metrics withReturnsMicros(String returnsMicros) {
        this.returnsMicros = returnsMicros;
        return this;
    }
    
    /**
     * Total price of shipped items in micros (1 millionth of a standard unit, 1 USD = 1000000 micros), reported on the order date. Excludes shipping and taxes (US only). The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippedItemSalesMicros")
    public String shippedItemSalesMicros;

    public Metrics withShippedItemSalesMicros(String shippedItemSalesMicros) {
        this.shippedItemSalesMicros = shippedItemSalesMicros;
        return this;
    }
    
    /**
     * Number of shipped items, reported on the shipment date. **This metric cannot be segmented by customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippedItems")
    public String shippedItems;

    public Metrics withShippedItems(String shippedItems) {
        this.shippedItems = shippedItems;
        return this;
    }
    
    /**
     * Number of fully shipped orders, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippedOrders")
    public String shippedOrders;

    public Metrics withShippedOrders(String shippedOrders) {
        this.shippedOrders = shippedOrders;
        return this;
    }
    
    /**
     * Number of ordered items not shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped items over the days in the queried period. **This metric cannot be segmented by customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unshippedItems")
    public Double unshippedItems;

    public Metrics withUnshippedItems(Double unshippedItems) {
        this.unshippedItems = unshippedItems;
        return this;
    }
    
    /**
     * Number of orders not shipped or partially shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped orders over the days in the queried period. **This metric cannot be segmented by product dimensions and customer_country_code.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unshippedOrders")
    public Double unshippedOrders;

    public Metrics withUnshippedOrders(Double unshippedOrders) {
        this.unshippedOrders = unshippedOrders;
        return this;
    }
    
    public Metrics(){}
}
