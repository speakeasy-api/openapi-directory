"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetOrganizationDevicesStatusesProductTypesEnum(str, Enum):
    APPLIANCE = 'appliance'
    CAMERA = 'camera'
    CELLULAR_GATEWAY = 'cellularGateway'
    SENSOR = 'sensor'
    SWITCH = 'switch'
    SYSTEMS_MANAGER = 'systemsManager'
    WIRELESS = 'wireless'

class GetOrganizationDevicesStatusesStatusesEnum(str, Enum):
    ALERTING = 'alerting'
    DORMANT = 'dormant'
    OFFLINE = 'offline'
    ONLINE = 'online'

class GetOrganizationDevicesStatusesTagsFilterTypeEnum(str, Enum):
    r"""An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."""
    WITH_ALL_TAGS = 'withAllTags'
    WITH_ANY_TAGS = 'withAnyTags'


@dataclasses.dataclass
class GetOrganizationDevicesStatusesRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    ending_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endingBefore', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    models: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'models', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter devices by models."""  
    network_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'networkIds', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter devices by network ids."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'perPage', 'style': 'form', 'explode': True }})
    r"""The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."""  
    product_types: Optional[list[GetOrganizationDevicesStatusesProductTypesEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'productTypes', 'style': 'form', 'explode': False }})
    r"""An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor."""  
    serials: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serials', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter devices by serials."""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startingAfter', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    statuses: Optional[list[GetOrganizationDevicesStatusesStatusesEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'statuses', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter devices by statuses. Valid statuses are [\\"online\\", \\"alerting\\", \\"offline\\", \\"dormant\\"]."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tags', 'style': 'form', 'explode': False }})
    r"""An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below)."""  
    tags_filter_type: Optional[GetOrganizationDevicesStatusesTagsFilterTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tagsFilterType', 'style': 'form', 'explode': True }})
    r"""An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesStatuses200ApplicationJSONComponents:
    r"""Components"""
    
    power_supplies: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('powerSupplies'), 'exclude': lambda f: f is None }})
    r"""Power Supplies"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesStatuses200ApplicationJSON:
    r"""Successful operation"""
    
    components: Optional[GetOrganizationDevicesStatuses200ApplicationJSONComponents] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('components'), 'exclude': lambda f: f is None }})
    r"""Components"""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""IP Gateway"""  
    ip_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipType'), 'exclude': lambda f: f is None }})
    r"""IP Type"""  
    lan_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lanIp'), 'exclude': lambda f: f is None }})
    r"""LAN IP Address"""  
    last_reported_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastReportedAt'), 'exclude': lambda f: f is None }})
    r"""Device Last Reported Location"""  
    mac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac'), 'exclude': lambda f: f is None }})
    r"""MAC Address"""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Model"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Device Name"""  
    network_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkId'), 'exclude': lambda f: f is None }})
    r"""Network ID"""  
    primary_dns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryDns'), 'exclude': lambda f: f is None }})
    r"""Primary DNS"""  
    product_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType'), 'exclude': lambda f: f is None }})
    r"""Product Type"""  
    public_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicIp'), 'exclude': lambda f: f is None }})
    r"""Public IP Address"""  
    secondary_dns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryDns'), 'exclude': lambda f: f is None }})
    r"""Secondary DNS"""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""Device Serial Number"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Device Status"""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Tags"""  
    

@dataclasses.dataclass
class GetOrganizationDevicesStatusesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_devices_statuses_200_application_json_object: Optional[GetOrganizationDevicesStatuses200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    