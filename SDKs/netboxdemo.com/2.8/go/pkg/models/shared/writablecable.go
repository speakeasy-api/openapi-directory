// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableCableLengthUnitEnum string

const (
	WritableCableLengthUnitEnumM  WritableCableLengthUnitEnum = "m"
	WritableCableLengthUnitEnumCm WritableCableLengthUnitEnum = "cm"
	WritableCableLengthUnitEnumFt WritableCableLengthUnitEnum = "ft"
	WritableCableLengthUnitEnumIn WritableCableLengthUnitEnum = "in"
)

func (e *WritableCableLengthUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "m":
		fallthrough
	case "cm":
		fallthrough
	case "ft":
		fallthrough
	case "in":
		*e = WritableCableLengthUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableCableLengthUnitEnum: %s", s)
	}
}

type WritableCableStatusEnum string

const (
	WritableCableStatusEnumConnected       WritableCableStatusEnum = "connected"
	WritableCableStatusEnumPlanned         WritableCableStatusEnum = "planned"
	WritableCableStatusEnumDecommissioning WritableCableStatusEnum = "decommissioning"
)

func (e *WritableCableStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "connected":
		fallthrough
	case "planned":
		fallthrough
	case "decommissioning":
		*e = WritableCableStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableCableStatusEnum: %s", s)
	}
}

type WritableCableTypeEnum string

const (
	WritableCableTypeEnumCat3       WritableCableTypeEnum = "cat3"
	WritableCableTypeEnumCat5       WritableCableTypeEnum = "cat5"
	WritableCableTypeEnumCat5e      WritableCableTypeEnum = "cat5e"
	WritableCableTypeEnumCat6       WritableCableTypeEnum = "cat6"
	WritableCableTypeEnumCat6a      WritableCableTypeEnum = "cat6a"
	WritableCableTypeEnumCat7       WritableCableTypeEnum = "cat7"
	WritableCableTypeEnumDacActive  WritableCableTypeEnum = "dac-active"
	WritableCableTypeEnumDacPassive WritableCableTypeEnum = "dac-passive"
	WritableCableTypeEnumMrj21Trunk WritableCableTypeEnum = "mrj21-trunk"
	WritableCableTypeEnumCoaxial    WritableCableTypeEnum = "coaxial"
	WritableCableTypeEnumMmf        WritableCableTypeEnum = "mmf"
	WritableCableTypeEnumMmfOm1     WritableCableTypeEnum = "mmf-om1"
	WritableCableTypeEnumMmfOm2     WritableCableTypeEnum = "mmf-om2"
	WritableCableTypeEnumMmfOm3     WritableCableTypeEnum = "mmf-om3"
	WritableCableTypeEnumMmfOm4     WritableCableTypeEnum = "mmf-om4"
	WritableCableTypeEnumSmf        WritableCableTypeEnum = "smf"
	WritableCableTypeEnumSmfOs1     WritableCableTypeEnum = "smf-os1"
	WritableCableTypeEnumSmfOs2     WritableCableTypeEnum = "smf-os2"
	WritableCableTypeEnumAoc        WritableCableTypeEnum = "aoc"
	WritableCableTypeEnumPower      WritableCableTypeEnum = "power"
)

func (e *WritableCableTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cat3":
		fallthrough
	case "cat5":
		fallthrough
	case "cat5e":
		fallthrough
	case "cat6":
		fallthrough
	case "cat6a":
		fallthrough
	case "cat7":
		fallthrough
	case "dac-active":
		fallthrough
	case "dac-passive":
		fallthrough
	case "mrj21-trunk":
		fallthrough
	case "coaxial":
		fallthrough
	case "mmf":
		fallthrough
	case "mmf-om1":
		fallthrough
	case "mmf-om2":
		fallthrough
	case "mmf-om3":
		fallthrough
	case "mmf-om4":
		fallthrough
	case "smf":
		fallthrough
	case "smf-os1":
		fallthrough
	case "smf-os2":
		fallthrough
	case "aoc":
		fallthrough
	case "power":
		*e = WritableCableTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableCableTypeEnum: %s", s)
	}
}

type WritableCableInput struct {
	Color            *string                      `json:"color,omitempty"`
	Label            *string                      `json:"label,omitempty"`
	Length           *int64                       `json:"length,omitempty"`
	LengthUnit       *WritableCableLengthUnitEnum `json:"length_unit,omitempty"`
	Status           *WritableCableStatusEnum     `json:"status,omitempty"`
	TerminationAID   int64                        `json:"termination_a_id"`
	TerminationAType string                       `json:"termination_a_type"`
	TerminationBID   int64                        `json:"termination_b_id"`
	TerminationBType string                       `json:"termination_b_type"`
	Type             *WritableCableTypeEnum       `json:"type,omitempty"`
}
