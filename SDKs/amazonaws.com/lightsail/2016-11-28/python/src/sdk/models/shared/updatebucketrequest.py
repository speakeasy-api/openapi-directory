"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accessrules as shared_accessrules
from ..shared import bucketaccesslogconfig as shared_bucketaccesslogconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateBucketRequest:
    
    bucket_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketName') }})  
    access_log_config: Optional[shared_bucketaccesslogconfig.BucketAccessLogConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessLogConfig'), 'exclude': lambda f: f is None }})  
    access_rules: Optional[shared_accessrules.AccessRules] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessRules'), 'exclude': lambda f: f is None }})  
    readonly_access_accounts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readonlyAccessAccounts'), 'exclude': lambda f: f is None }})  
    versioning: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versioning'), 'exclude': lambda f: f is None }})  
    