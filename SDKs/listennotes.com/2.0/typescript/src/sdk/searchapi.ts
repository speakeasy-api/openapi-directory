/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoints to search podcasts
 */
export class SearchAPI {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Fetch related search terms
   *
   * @remarks
   * Suggest related search terms. The results are more comprehensive than from `GET /typeahead`. This endpoint is available only in the PRO/ENTERPRISE plan.
   */
  getRelatedSearches(
    req: operations.GetRelatedSearchesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRelatedSearchesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRelatedSearchesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/related_searches";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRelatedSearchesResponse =
        new operations.GetRelatedSearchesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.relatedSearchesResponse = utils.objectToClass(
              httpRes?.data,
              shared.RelatedSearchesResponse
            );
          }
          break;
        case httpRes?.status == 400 ||
          httpRes?.status == 401 ||
          httpRes?.status == 429 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Fetch trending search terms
   *
   * @remarks
   * Fetch up to 10 most recent trending search terms on the Listen Notes platform.
   */
  getTrendingSearches(
    req: operations.GetTrendingSearchesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTrendingSearchesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTrendingSearchesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/trending_searches";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTrendingSearchesResponse =
        new operations.GetTrendingSearchesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trendingSearchesResponse = utils.objectToClass(
              httpRes?.data,
              shared.TrendingSearchesResponse
            );
          }
          break;
        case httpRes?.status == 400 ||
          httpRes?.status == 401 ||
          httpRes?.status == 429 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Full-text search
   *
   * @remarks
   * Full-text search on episodes, podcasts, or curated lists of podcasts.
   * Use the `offset` parameter to paginate through search results.
   * The FREE plan allows to see up to 30 search results (or `offset` < 30) per query.
   * The PRO plan allows to see up to 300 search results (or `offset` < 300) per query.
   * The ENTERPRISE plan allows to see up to 10,000 search results (or `offset` < 10000) per query.
   *
   */
  search(
    req: operations.SearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/search";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchResponse = new operations.SearchResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchResponse
            );
          }
          break;
        case httpRes?.status == 400 ||
          httpRes?.status == 401 ||
          httpRes?.status == 429 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Spell check on a search term
   *
   * @remarks
   * Suggest a list of words that correct the spelling errors of a search term. This endpoint is available only in the PRO/ENTERPRISE plan.
   */
  spellcheck(
    req: operations.SpellcheckRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SpellcheckResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SpellcheckRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/spellcheck";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SpellcheckResponse =
        new operations.SpellcheckResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spellCheckResponse = utils.objectToClass(
              httpRes?.data,
              shared.SpellCheckResponse
            );
          }
          break;
        case httpRes?.status == 400 ||
          httpRes?.status == 401 ||
          httpRes?.status == 429 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Typeahead search
   *
   * @remarks
   * Suggest search terms, podcast genres, and podcasts.
   */
  typeahead(
    req: operations.TypeaheadRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TypeaheadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TypeaheadRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/typeahead";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TypeaheadResponse =
        new operations.TypeaheadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.typeaheadResponse = utils.objectToClass(
              httpRes?.data,
              shared.TypeaheadResponse
            );
          }
          break;
        case httpRes?.status == 400 ||
          httpRes?.status == 401 ||
          httpRes?.status == 429 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }
}
