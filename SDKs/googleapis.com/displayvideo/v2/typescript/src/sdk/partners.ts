/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Partners {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new channel. Returns the newly created channel if successful.
   */
  displayvideoPartnersChannelsCreate(
    req: operations.DisplayvideoPartnersChannelsCreateRequest,
    security: operations.DisplayvideoPartnersChannelsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersChannelsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoPartnersChannelsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}/channels",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "channelInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoPartnersChannelsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersChannelsCreateResponse =
        new operations.DisplayvideoPartnersChannelsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.channel = utils.objectToClass(httpRes?.data, shared.Channel);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists channels for a partner or advertiser.
   */
  displayvideoPartnersChannelsList(
    req: operations.DisplayvideoPartnersChannelsListRequest,
    security: operations.DisplayvideoPartnersChannelsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersChannelsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoPartnersChannelsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}/channels",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoPartnersChannelsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersChannelsListResponse =
        new operations.DisplayvideoPartnersChannelsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listChannelsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListChannelsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a channel. Returns the updated channel if successful.
   */
  displayvideoPartnersChannelsPatch(
    req: operations.DisplayvideoPartnersChannelsPatchRequest,
    security: operations.DisplayvideoPartnersChannelsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersChannelsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoPartnersChannelsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}/channels/{channelId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "channelInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoPartnersChannelsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersChannelsPatchResponse =
        new operations.DisplayvideoPartnersChannelsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.channel = utils.objectToClass(httpRes?.data, shared.Channel);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites.
   */
  displayvideoPartnersChannelsSitesBulkEdit(
    req: operations.DisplayvideoPartnersChannelsSitesBulkEditRequest,
    security: operations.DisplayvideoPartnersChannelsSitesBulkEditSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersChannelsSitesBulkEditResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoPartnersChannelsSitesBulkEditRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}/channels/{channelId}/sites:bulkEdit",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "bulkEditSitesRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoPartnersChannelsSitesBulkEditSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersChannelsSitesBulkEditResponse =
        new operations.DisplayvideoPartnersChannelsSitesBulkEditResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkEditSitesResponse = utils.objectToClass(
              httpRes?.data,
              shared.BulkEditSitesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a site from a channel.
   */
  displayvideoPartnersChannelsSitesDelete(
    req: operations.DisplayvideoPartnersChannelsSitesDeleteRequest,
    security: operations.DisplayvideoPartnersChannelsSitesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersChannelsSitesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoPartnersChannelsSitesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}/channels/{channelId}/sites/{urlOrAppId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoPartnersChannelsSitesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersChannelsSitesDeleteResponse =
        new operations.DisplayvideoPartnersChannelsSitesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists sites in a channel.
   */
  displayvideoPartnersChannelsSitesList(
    req: operations.DisplayvideoPartnersChannelsSitesListRequest,
    security: operations.DisplayvideoPartnersChannelsSitesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersChannelsSitesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoPartnersChannelsSitesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}/channels/{channelId}/sites",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoPartnersChannelsSitesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersChannelsSitesListResponse =
        new operations.DisplayvideoPartnersChannelsSitesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSitesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListSitesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites.
   */
  displayvideoPartnersChannelsSitesReplace(
    req: operations.DisplayvideoPartnersChannelsSitesReplaceRequest,
    security: operations.DisplayvideoPartnersChannelsSitesReplaceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersChannelsSitesReplaceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoPartnersChannelsSitesReplaceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}/channels/{channelId}/sites:replace",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "replaceSitesRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoPartnersChannelsSitesReplaceSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersChannelsSitesReplaceResponse =
        new operations.DisplayvideoPartnersChannelsSitesReplaceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.replaceSitesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ReplaceSitesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edits targeting options under a single partner. The operation will delete the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.deleteRequests and then create the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.createRequests .
   */
  displayvideoPartnersEditAssignedTargetingOptions(
    req: operations.DisplayvideoPartnersEditAssignedTargetingOptionsRequest,
    security: operations.DisplayvideoPartnersEditAssignedTargetingOptionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersEditAssignedTargetingOptionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DisplayvideoPartnersEditAssignedTargetingOptionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}:editAssignedTargetingOptions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "bulkEditPartnerAssignedTargetingOptionsRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoPartnersEditAssignedTargetingOptionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersEditAssignedTargetingOptionsResponse =
        new operations.DisplayvideoPartnersEditAssignedTargetingOptionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkEditPartnerAssignedTargetingOptionsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.BulkEditPartnerAssignedTargetingOptionsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a partner.
   */
  displayvideoPartnersGet(
    req: operations.DisplayvideoPartnersGetRequest,
    security: operations.DisplayvideoPartnersGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoPartnersGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoPartnersGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersGetResponse =
        new operations.DisplayvideoPartnersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.partner = utils.objectToClass(httpRes?.data, shared.Partner);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists partners that are accessible to the current user. The order is defined by the order_by parameter.
   */
  displayvideoPartnersList(
    req: operations.DisplayvideoPartnersListRequest,
    security: operations.DisplayvideoPartnersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisplayvideoPartnersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/partners";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DisplayvideoPartnersListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersListResponse =
        new operations.DisplayvideoPartnersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPartnersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPartnersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Assigns a targeting option to a partner. Returns the assigned targeting option if successful.
   */
  displayvideoPartnersTargetingTypesAssignedTargetingOptionsCreate(
    req: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateRequest,
    security: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "assignedTargetingOptionInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateResponse =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.assignedTargetingOption = utils.objectToClass(
              httpRes?.data,
              shared.AssignedTargetingOption
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an assigned targeting option from a partner.
   */
  displayvideoPartnersTargetingTypesAssignedTargetingOptionsDelete(
    req: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteRequest,
    security: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteResponse =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a single targeting option assigned to a partner.
   */
  displayvideoPartnersTargetingTypesAssignedTargetingOptionsGet(
    req: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetRequest,
    security: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetResponse =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.assignedTargetingOption = utils.objectToClass(
              httpRes?.data,
              shared.AssignedTargetingOption
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the targeting options assigned to a partner.
   */
  displayvideoPartnersTargetingTypesAssignedTargetingOptionsList(
    req: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListRequest,
    security: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListResponse =
        new operations.DisplayvideoPartnersTargetingTypesAssignedTargetingOptionsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPartnerAssignedTargetingOptionsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.ListPartnerAssignedTargetingOptionsResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
