"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import algorithmspecification as shared_algorithmspecification
from ..shared import channel as shared_channel
from ..shared import checkpointconfig as shared_checkpointconfig
from ..shared import debughookconfig as shared_debughookconfig
from ..shared import debugruleconfiguration as shared_debugruleconfiguration
from ..shared import debugruleevaluationstatus as shared_debugruleevaluationstatus
from ..shared import experimentconfig as shared_experimentconfig
from ..shared import metricdata as shared_metricdata
from ..shared import modelartifacts as shared_modelartifacts
from ..shared import outputdataconfig as shared_outputdataconfig
from ..shared import resourceconfig as shared_resourceconfig
from ..shared import retrystrategy as shared_retrystrategy
from ..shared import secondarystatus_enum as shared_secondarystatus_enum
from ..shared import secondarystatustransition as shared_secondarystatustransition
from ..shared import stoppingcondition as shared_stoppingcondition
from ..shared import tag as shared_tag
from ..shared import tensorboardoutputconfig as shared_tensorboardoutputconfig
from ..shared import trainingjobstatus_enum as shared_trainingjobstatus_enum
from ..shared import vpcconfig as shared_vpcconfig
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrainingJob:
    r"""Contains information about a training job."""
    
    algorithm_specification: Optional[shared_algorithmspecification.AlgorithmSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlgorithmSpecification'), 'exclude': lambda f: f is None }})  
    auto_ml_job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJobArn'), 'exclude': lambda f: f is None }})  
    billable_time_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BillableTimeInSeconds'), 'exclude': lambda f: f is None }})  
    checkpoint_config: Optional[shared_checkpointconfig.CheckpointConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckpointConfig'), 'exclude': lambda f: f is None }})
    r"""Contains information about the output location for managed spot training checkpoint data."""  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    debug_hook_config: Optional[shared_debughookconfig.DebugHookConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DebugHookConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href=\\"https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html\\">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>."""  
    debug_rule_configurations: Optional[list[shared_debugruleconfiguration.DebugRuleConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DebugRuleConfigurations'), 'exclude': lambda f: f is None }})  
    debug_rule_evaluation_statuses: Optional[list[shared_debugruleevaluationstatus.DebugRuleEvaluationStatus]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DebugRuleEvaluationStatuses'), 'exclude': lambda f: f is None }})  
    enable_inter_container_traffic_encryption: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableInterContainerTrafficEncryption'), 'exclude': lambda f: f is None }})  
    enable_managed_spot_training: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableManagedSpotTraining'), 'exclude': lambda f: f is None }})  
    enable_network_isolation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableNetworkIsolation'), 'exclude': lambda f: f is None }})  
    environment: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})  
    experiment_config: Optional[shared_experimentconfig.ExperimentConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExperimentConfig'), 'exclude': lambda f: f is None }})
    r"""<p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a>CreateProcessingJob</a> </p> </li> <li> <p> <a>CreateTrainingJob</a> </p> </li> <li> <p> <a>CreateTransformJob</a> </p> </li> </ul>"""  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    final_metric_data_list: Optional[list[shared_metricdata.MetricData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FinalMetricDataList'), 'exclude': lambda f: f is None }})  
    hyper_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameters'), 'exclude': lambda f: f is None }})  
    input_data_config: Optional[list[shared_channel.Channel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputDataConfig'), 'exclude': lambda f: f is None }})  
    labeling_job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelingJobArn'), 'exclude': lambda f: f is None }})  
    last_modified_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    model_artifacts: Optional[shared_modelartifacts.ModelArtifacts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelArtifacts'), 'exclude': lambda f: f is None }})  
    output_data_config: Optional[shared_outputdataconfig.OutputDataConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputDataConfig'), 'exclude': lambda f: f is None }})  
    resource_config: Optional[shared_resourceconfig.ResourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceConfig'), 'exclude': lambda f: f is None }})  
    retry_strategy: Optional[shared_retrystrategy.RetryStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryStrategy'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn'), 'exclude': lambda f: f is None }})  
    secondary_status: Optional[shared_secondarystatus_enum.SecondaryStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryStatus'), 'exclude': lambda f: f is None }})  
    secondary_status_transitions: Optional[list[shared_secondarystatustransition.SecondaryStatusTransition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryStatusTransitions'), 'exclude': lambda f: f is None }})  
    stopping_condition: Optional[shared_stoppingcondition.StoppingCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoppingCondition'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    tensor_board_output_config: Optional[shared_tensorboardoutputconfig.TensorBoardOutputConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TensorBoardOutputConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data."""  
    training_end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingEndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    training_job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobArn'), 'exclude': lambda f: f is None }})  
    training_job_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobName'), 'exclude': lambda f: f is None }})  
    training_job_status: Optional[shared_trainingjobstatus_enum.TrainingJobStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobStatus'), 'exclude': lambda f: f is None }})  
    training_start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingStartTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    training_time_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingTimeInSeconds'), 'exclude': lambda f: f is None }})  
    tuning_job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TuningJobArn'), 'exclude': lambda f: f is None }})  
    vpc_config: Optional[shared_vpcconfig.VpcConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfig'), 'exclude': lambda f: f is None }})  
    