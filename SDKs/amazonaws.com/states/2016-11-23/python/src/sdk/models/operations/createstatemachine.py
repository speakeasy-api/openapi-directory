"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createstatemachineinput as shared_createstatemachineinput
from ..shared import createstatemachineoutput as shared_createstatemachineoutput
from enum import Enum
from typing import Any, Optional

class CreateStateMachineXAmzTargetEnum(str, Enum):
    AWS_STEP_FUNCTIONS_CREATE_STATE_MACHINE = 'AWSStepFunctions.CreateStateMachine'


@dataclasses.dataclass
class CreateStateMachineRequest:
    
    create_state_machine_input: shared_createstatemachineinput.CreateStateMachineInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CreateStateMachineXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateStateMachineResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_state_machine_output: Optional[shared_createstatemachineoutput.CreateStateMachineOutput] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_arn: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidArn"""  
    invalid_definition: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidDefinition"""  
    invalid_logging_configuration: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidLoggingConfiguration"""  
    invalid_name: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidName"""  
    invalid_tracing_configuration: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTracingConfiguration"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    state_machine_already_exists: Optional[Any] = dataclasses.field(default=None)
    r"""StateMachineAlreadyExists"""  
    state_machine_deleting: Optional[Any] = dataclasses.field(default=None)
    r"""StateMachineDeleting"""  
    state_machine_limit_exceeded: Optional[Any] = dataclasses.field(default=None)
    r"""StateMachineLimitExceeded"""  
    state_machine_type_not_supported: Optional[Any] = dataclasses.field(default=None)
    r"""StateMachineTypeNotSupported"""  
    too_many_tags: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyTags"""  
    