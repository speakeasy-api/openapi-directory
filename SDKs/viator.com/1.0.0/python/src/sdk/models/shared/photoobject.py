"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhotoObject:
    r"""**object** detailing a single photo from a user"""
    
    caption: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caption'), 'exclude': lambda f: f is None }})
    r"""**HTML-formatted caption** for *this* photograph
    - may contain basic HTML mark-up - e.g., br, li, b, u, p, i, ul and ol
    """  
    editors_pick: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('editorsPick'), 'exclude': lambda f: f is None }})
    r"""**indicator**: `true` if *this* photograph has been tagged as an *editor's pick*; i.e., can be given preference for display"""  
    owner_avatar_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerAvatarURL'), 'exclude': lambda f: f is None }})
    r"""**URL** for the avatar image of the user that submitted *this* photograph"""  
    owner_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerCountry'), 'exclude': lambda f: f is None }})
    r"""**country** in which the owner of *this* photograph is located"""  
    owner_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** of the user that owns the photograph"""  
    owner_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerName'), 'exclude': lambda f: f is None }})
    r"""**handle** of the user that submitted *this* photograph; e.g., 'Husker1k'"""  
    photo_hi_res_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoHiResURL'), 'exclude': lambda f: f is None }})
    r"""**URL** of the high-resolution version of *this* photograph"""  
    photo_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** of *this* photograph"""  
    photo_medium_res_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoMediumResURL'), 'exclude': lambda f: f is None }})
    r"""**URL** of the medium-resolution version of *this* photograph"""  
    photo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoURL'), 'exclude': lambda f: f is None }})
    r"""**URL** for the standard-resolution version of *this* photograph"""  
    product_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCode'), 'exclude': lambda f: f is None }})
    r"""**product code** for the product that *this* photograph is of"""  
    product_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productTitle'), 'exclude': lambda f: f is None }})
    r"""**natural-language title** of the product associated with *this* photograph; e.g., 'Sydney and Bondi Hop-on Hop-off Tour'"""  
    product_url_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productUrlName'), 'exclude': lambda f: f is None }})
    r"""**URL-formatted title** of the product associated with *this* photograph; e.g., `Sydney-and-Bondi-Hop-on-Hop-off-Tour`"""  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** for *this* photograph; e.g., `3`"""  
    ssl_supported: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslSupported'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    thumbnail_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnailURL'), 'exclude': lambda f: f is None }})
    r"""**URL** of *this* product's thumbnail image"""  
    time_uploaded: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeUploaded'), 'exclude': lambda f: f is None }})
    r"""**date** on which *this* photograph was submitted"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""**title** of *this* photograph"""  
    