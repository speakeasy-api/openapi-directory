"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import cardactions as shared_cardactions
from ..shared import carddisplaybody as shared_carddisplaybody
from ..shared import cardfetchbody as shared_cardfetchbody
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CardResponse:
    r"""Current state of Card Definition"""
    
    actions: shared_cardactions.CardActions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions') }})
    r"""Configuration for custom user actions on cards."""  
    display: shared_carddisplaybody.CardDisplayBody = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display') }})
    r"""Configuration for displayed info on a card"""  
    fetch: shared_cardfetchbody.CardFetchBody = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fetch') }})
    r"""Configuration for this card's data fetch request."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Generated unique ID for card."""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""Displayed title of this card."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When this card was created."""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The last time this card was updated."""  
    