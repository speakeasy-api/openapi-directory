"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nestedcable as shared_nestedcable
from ..shared import nestedcircuit as shared_nestedcircuit
from ..shared import nestedsite as shared_nestedsite
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CircuitTerminationConnectionStatusLabelEnum(str, Enum):
    NOT_CONNECTED = 'Not Connected'
    CONNECTED = 'Connected'

class CircuitTerminationConnectionStatusValueEnum(str, Enum):
    FALSE = 'false'
    TRUE = 'true'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CircuitTerminationConnectionStatus:
    
    label: CircuitTerminationConnectionStatusLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: CircuitTerminationConnectionStatusValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class CircuitTerminationTerminationEnum(str, Enum):
    A = 'A'
    Z = 'Z'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CircuitTermination:
    
    circuit: shared_nestedcircuit.NestedCircuit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('circuit') }})  
    port_speed: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port_speed') }})  
    site: shared_nestedsite.NestedSite = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site') }})  
    term_side: CircuitTerminationTerminationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('term_side') }})  
    cable: Optional[shared_nestedcable.NestedCable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cable'), 'exclude': lambda f: f is None }})  
    connected_endpoint: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connected_endpoint'), 'exclude': lambda f: f is None }})
    r"""Return the appropriate serializer for the type of connected object."""  
    connected_endpoint_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connected_endpoint_type'), 'exclude': lambda f: f is None }})  
    connection_status: Optional[CircuitTerminationConnectionStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connection_status'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    pp_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pp_info'), 'exclude': lambda f: f is None }})  
    upstream_speed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upstream_speed'), 'exclude': lambda f: f is None }})
    r"""Upstream speed, if different from port speed"""  
    xconnect_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xconnect_id'), 'exclude': lambda f: f is None }})  
    