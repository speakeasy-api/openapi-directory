/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PathSegment } from "./pathsegment";
import { ValueMatcher } from "./valuematcher";
import { Expose, Type } from "class-transformer";

/**
 * StructMatcher provides a general interface to check if a given value is matched in google.protobuf.Struct. It uses `path` to retrieve the value from the struct and then check if it's matched to the specified value. For example, for the following Struct: .. code-block:: yaml fields: a: struct_value: fields: b: struct_value: fields: c: string_value: pro t: list_value: values: - string_value: m - string_value: n The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value "pro" from the Metadata which is matched to the specified prefix match. .. code-block:: yaml path: - key: a - key: b - key: c value: string_match: prefix: pr The following StructMatcher is matched as the code will match one of the string values in the list at the path [a, t]. .. code-block:: yaml path: - key: a - key: t value: list_match: one_of: string_match: exact: m An example use of StructMatcher is to match metadata in envoy.v*.core.Node.
 */
export class StructMatcher extends SpeakeasyBase {
  /**
   * The path to retrieve the Value from the Struct.
   */
  @SpeakeasyMetadata({ elemType: PathSegment })
  @Expose({ name: "path" })
  @Type(() => PathSegment)
  path?: PathSegment[];

  /**
   * Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported. StructValue is not supported and is always not matched. [#next-free-field: 7]
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  @Type(() => ValueMatcher)
  value?: ValueMatcher;
}
