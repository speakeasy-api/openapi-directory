// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TeamsUpdatePermissionsSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type TeamsUpdatePermissionsPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
	// The team's name
	TeamName string `pathParam:"style=simple,explode=false,name=team_name"`
}

type TeamsUpdatePermissionsRequestBodyPermissionsEnum string

const (
	TeamsUpdatePermissionsRequestBodyPermissionsEnumManager   TeamsUpdatePermissionsRequestBodyPermissionsEnum = "manager"
	TeamsUpdatePermissionsRequestBodyPermissionsEnumDeveloper TeamsUpdatePermissionsRequestBodyPermissionsEnum = "developer"
	TeamsUpdatePermissionsRequestBodyPermissionsEnumViewer    TeamsUpdatePermissionsRequestBodyPermissionsEnum = "viewer"
)

func (e *TeamsUpdatePermissionsRequestBodyPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		*e = TeamsUpdatePermissionsRequestBodyPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsUpdatePermissionsRequestBodyPermissionsEnum: %s", s)
	}
}

type TeamsUpdatePermissionsRequestBody struct {
	// The permissions all members of the team have on the app
	Permissions []TeamsUpdatePermissionsRequestBodyPermissionsEnum `json:"permissions"`
}

type TeamsUpdatePermissionsRequest struct {
	PathParams TeamsUpdatePermissionsPathParams
	Request    TeamsUpdatePermissionsRequestBody `request:"mediaType=application/json"`
	Security   TeamsUpdatePermissionsSecurity
}

type TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum string

const (
	TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumBadRequest          TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumConflict            TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumNotAcceptable       TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumNotFound            TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumInternalServerError TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumUnauthorized        TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnumTooManyRequests     TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type TeamsUpdatePermissionsDefaultApplicationJSONError struct {
	Code    TeamsUpdatePermissionsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                    `json:"message"`
}

// TeamsUpdatePermissionsDefaultApplicationJSON - Error
type TeamsUpdatePermissionsDefaultApplicationJSON struct {
	Error TeamsUpdatePermissionsDefaultApplicationJSONError `json:"error"`
}

type TeamsUpdatePermissions200ApplicationJSONAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnum string

const (
	TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnumManager   TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnum = "manager"
	TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnumDeveloper TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnum = "developer"
	TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnumViewer    TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnum = "viewer"
	TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnumTester    TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnum = "tester"
)

func (e *TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnum: %s", s)
	}
}

// TeamsUpdatePermissions200ApplicationJSONOriginEnum - The creation origin of this app
type TeamsUpdatePermissions200ApplicationJSONOriginEnum string

const (
	TeamsUpdatePermissions200ApplicationJSONOriginEnumAppcenter TeamsUpdatePermissions200ApplicationJSONOriginEnum = "appcenter"
	TeamsUpdatePermissions200ApplicationJSONOriginEnumHockeyapp TeamsUpdatePermissions200ApplicationJSONOriginEnum = "hockeyapp"
	TeamsUpdatePermissions200ApplicationJSONOriginEnumCodepush  TeamsUpdatePermissions200ApplicationJSONOriginEnum = "codepush"
)

func (e *TeamsUpdatePermissions200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = TeamsUpdatePermissions200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsUpdatePermissions200ApplicationJSONOriginEnum: %s", s)
	}
}

// TeamsUpdatePermissions200ApplicationJSONOsEnum - The OS the app will be running on
type TeamsUpdatePermissions200ApplicationJSONOsEnum string

const (
	TeamsUpdatePermissions200ApplicationJSONOsEnumAndroid TeamsUpdatePermissions200ApplicationJSONOsEnum = "Android"
	TeamsUpdatePermissions200ApplicationJSONOsEnumIOs     TeamsUpdatePermissions200ApplicationJSONOsEnum = "iOS"
	TeamsUpdatePermissions200ApplicationJSONOsEnumMacOs   TeamsUpdatePermissions200ApplicationJSONOsEnum = "macOS"
	TeamsUpdatePermissions200ApplicationJSONOsEnumTizen   TeamsUpdatePermissions200ApplicationJSONOsEnum = "Tizen"
	TeamsUpdatePermissions200ApplicationJSONOsEnumTvOs    TeamsUpdatePermissions200ApplicationJSONOsEnum = "tvOS"
	TeamsUpdatePermissions200ApplicationJSONOsEnumWindows TeamsUpdatePermissions200ApplicationJSONOsEnum = "Windows"
	TeamsUpdatePermissions200ApplicationJSONOsEnumLinux   TeamsUpdatePermissions200ApplicationJSONOsEnum = "Linux"
	TeamsUpdatePermissions200ApplicationJSONOsEnumCustom  TeamsUpdatePermissions200ApplicationJSONOsEnum = "Custom"
)

func (e *TeamsUpdatePermissions200ApplicationJSONOsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = TeamsUpdatePermissions200ApplicationJSONOsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsUpdatePermissions200ApplicationJSONOsEnum: %s", s)
	}
}

// TeamsUpdatePermissions200ApplicationJSONOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type TeamsUpdatePermissions200ApplicationJSONOwnerTypeEnum string

const (
	TeamsUpdatePermissions200ApplicationJSONOwnerTypeEnumOrg  TeamsUpdatePermissions200ApplicationJSONOwnerTypeEnum = "org"
	TeamsUpdatePermissions200ApplicationJSONOwnerTypeEnumUser TeamsUpdatePermissions200ApplicationJSONOwnerTypeEnum = "user"
)

func (e *TeamsUpdatePermissions200ApplicationJSONOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "org":
		fallthrough
	case "user":
		*e = TeamsUpdatePermissions200ApplicationJSONOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsUpdatePermissions200ApplicationJSONOwnerTypeEnum: %s", s)
	}
}

// TeamsUpdatePermissions200ApplicationJSONOwner - The information about the app's owner
type TeamsUpdatePermissions200ApplicationJSONOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type TeamsUpdatePermissions200ApplicationJSONOwnerTypeEnum `json:"type"`
}

// TeamsUpdatePermissions200ApplicationJSONPlatformEnum - The platform of the app
type TeamsUpdatePermissions200ApplicationJSONPlatformEnum string

const (
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumJava            TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "Java"
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumObjectiveCSwift TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "Objective-C-Swift"
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumUwp             TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "UWP"
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumCordova         TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "Cordova"
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumReactNative     TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "React-Native"
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumUnity           TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "Unity"
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumElectron        TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "Electron"
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumXamarin         TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "Xamarin"
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumWpf             TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "WPF"
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumWinForms        TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "WinForms"
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumUnknown         TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "Unknown"
	TeamsUpdatePermissions200ApplicationJSONPlatformEnumCustom          TeamsUpdatePermissions200ApplicationJSONPlatformEnum = "Custom"
)

func (e *TeamsUpdatePermissions200ApplicationJSONPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = TeamsUpdatePermissions200ApplicationJSONPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsUpdatePermissions200ApplicationJSONPlatformEnum: %s", s)
	}
}

type TeamsUpdatePermissions200ApplicationJSONTeamPermissionsEnum string

const (
	TeamsUpdatePermissions200ApplicationJSONTeamPermissionsEnumManager   TeamsUpdatePermissions200ApplicationJSONTeamPermissionsEnum = "manager"
	TeamsUpdatePermissions200ApplicationJSONTeamPermissionsEnumDeveloper TeamsUpdatePermissions200ApplicationJSONTeamPermissionsEnum = "developer"
	TeamsUpdatePermissions200ApplicationJSONTeamPermissionsEnumViewer    TeamsUpdatePermissions200ApplicationJSONTeamPermissionsEnum = "viewer"
)

func (e *TeamsUpdatePermissions200ApplicationJSONTeamPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		*e = TeamsUpdatePermissions200ApplicationJSONTeamPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsUpdatePermissions200ApplicationJSONTeamPermissionsEnum: %s", s)
	}
}

// TeamsUpdatePermissions200ApplicationJSON - Success
type TeamsUpdatePermissions200ApplicationJSON struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                                     `json:"app_secret"`
	AzureSubscription *TeamsUpdatePermissions200ApplicationJSONAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []TeamsUpdatePermissions200ApplicationJSONMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin TeamsUpdatePermissions200ApplicationJSONOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os TeamsUpdatePermissions200ApplicationJSONOsEnum `json:"os"`
	// The information about the app's owner
	Owner TeamsUpdatePermissions200ApplicationJSONOwner `json:"owner"`
	// The platform of the app
	Platform TeamsUpdatePermissions200ApplicationJSONPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The permissions the team has for the app
	TeamPermissions []TeamsUpdatePermissions200ApplicationJSONTeamPermissionsEnum `json:"team_permissions,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type TeamsUpdatePermissionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	TeamsUpdatePermissions200ApplicationJSONObject *TeamsUpdatePermissions200ApplicationJSON
	// Error
	TeamsUpdatePermissionsDefaultApplicationJSONObject *TeamsUpdatePermissionsDefaultApplicationJSON
}
