"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PublisherConnectionBiddingStateEnum(str, Enum):
    r"""Whether the publisher has been approved by the bidder."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    REJECTED = 'REJECTED'
    APPROVED = 'APPROVED'

class PublisherConnectionPublisherPlatformEnum(str, Enum):
    r"""Output only. Whether the publisher is an Ad Manager or AdMob publisher."""
    PUBLISHER_PLATFORM_UNSPECIFIED = 'PUBLISHER_PLATFORM_UNSPECIFIED'
    GOOGLE_AD_MANAGER = 'GOOGLE_AD_MANAGER'
    ADMOB = 'ADMOB'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublisherConnection:
    r"""An Open Bidding exchange's connection to a publisher. This is initiated by the publisher for the bidder to review. If approved by the bidder, this means that the bidder agrees to receive bid requests from the publisher."""
    
    bidding_state: Optional[PublisherConnectionBiddingStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('biddingState'), 'exclude': lambda f: f is None }})
    r"""Whether the publisher has been approved by the bidder."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time at which the publisher initiated a connection with the bidder (irrespective of if or when the bidder approves it). This is subsequently updated if the publisher revokes and re-initiates the connection."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Output only. Publisher display name."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Name of the publisher connection. This follows the pattern `bidders/{bidder}/publisherConnections/{publisher}`, where `{bidder}` represents the account ID of the bidder, and `{publisher}` is the ads.txt/app-ads.txt publisher ID."""  
    publisher_platform: Optional[PublisherConnectionPublisherPlatformEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherPlatform'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether the publisher is an Ad Manager or AdMob publisher."""  
    