"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttachedDisk = exports.AttachedDiskTypeEnum = exports.AttachedDiskSavedStateEnum = exports.AttachedDiskModeEnum = exports.AttachedDiskInterfaceEnum = exports.AttachedDiskArchitectureEnum = void 0;
var utils_1 = require("../../../internal/utils");
var attacheddiskinitializeparams_1 = require("./attacheddiskinitializeparams");
var customerencryptionkey_1 = require("./customerencryptionkey");
var guestosfeature_1 = require("./guestosfeature");
var initialstateconfig_1 = require("./initialstateconfig");
var class_transformer_1 = require("class-transformer");
/**
 * [Output Only] The architecture of the attached disk. Valid values are ARM64 or X86_64.
 */
var AttachedDiskArchitectureEnum;
(function (AttachedDiskArchitectureEnum) {
    AttachedDiskArchitectureEnum["ArchitectureUnspecified"] = "ARCHITECTURE_UNSPECIFIED";
    AttachedDiskArchitectureEnum["Arm64"] = "ARM64";
    AttachedDiskArchitectureEnum["X8664"] = "X86_64";
})(AttachedDiskArchitectureEnum = exports.AttachedDiskArchitectureEnum || (exports.AttachedDiskArchitectureEnum = {}));
/**
 * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. For most machine types, the default is SCSI. Local SSDs can use either NVME or SCSI. In certain configurations, persistent disks can use NVMe. For more information, see About persistent disks.
 */
var AttachedDiskInterfaceEnum;
(function (AttachedDiskInterfaceEnum) {
    AttachedDiskInterfaceEnum["Nvdimm"] = "NVDIMM";
    AttachedDiskInterfaceEnum["Nvme"] = "NVME";
    AttachedDiskInterfaceEnum["Scsi"] = "SCSI";
})(AttachedDiskInterfaceEnum = exports.AttachedDiskInterfaceEnum || (exports.AttachedDiskInterfaceEnum = {}));
/**
 * The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
 */
var AttachedDiskModeEnum;
(function (AttachedDiskModeEnum) {
    AttachedDiskModeEnum["ReadOnly"] = "READ_ONLY";
    AttachedDiskModeEnum["ReadWrite"] = "READ_WRITE";
})(AttachedDiskModeEnum = exports.AttachedDiskModeEnum || (exports.AttachedDiskModeEnum = {}));
/**
 * For LocalSSD disks on VM Instances in STOPPED or SUSPENDED state, this field is set to PRESERVED if the LocalSSD data has been saved to a persistent location by customer request. (see the discard_local_ssd option on Stop/Suspend). Read-only in the api.
 */
var AttachedDiskSavedStateEnum;
(function (AttachedDiskSavedStateEnum) {
    AttachedDiskSavedStateEnum["DiskSavedStateUnspecified"] = "DISK_SAVED_STATE_UNSPECIFIED";
    AttachedDiskSavedStateEnum["Preserved"] = "PRESERVED";
})(AttachedDiskSavedStateEnum = exports.AttachedDiskSavedStateEnum || (exports.AttachedDiskSavedStateEnum = {}));
/**
 * Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
 */
var AttachedDiskTypeEnum;
(function (AttachedDiskTypeEnum) {
    AttachedDiskTypeEnum["Persistent"] = "PERSISTENT";
    AttachedDiskTypeEnum["Scratch"] = "SCRATCH";
})(AttachedDiskTypeEnum = exports.AttachedDiskTypeEnum || (exports.AttachedDiskTypeEnum = {}));
/**
 * An instance-attached disk resource.
 */
var AttachedDisk = /** @class */ (function (_super) {
    __extends(AttachedDisk, _super);
    function AttachedDisk() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "architecture" }),
        __metadata("design:type", String)
    ], AttachedDisk.prototype, "architecture", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "autoDelete" }),
        __metadata("design:type", Boolean)
    ], AttachedDisk.prototype, "autoDelete", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "boot" }),
        __metadata("design:type", Boolean)
    ], AttachedDisk.prototype, "boot", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "deviceName" }),
        __metadata("design:type", String)
    ], AttachedDisk.prototype, "deviceName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "diskEncryptionKey" }),
        (0, class_transformer_1.Type)(function () { return customerencryptionkey_1.CustomerEncryptionKey; }),
        __metadata("design:type", customerencryptionkey_1.CustomerEncryptionKey)
    ], AttachedDisk.prototype, "diskEncryptionKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "diskSizeGb" }),
        __metadata("design:type", String)
    ], AttachedDisk.prototype, "diskSizeGb", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "forceAttach" }),
        __metadata("design:type", Boolean)
    ], AttachedDisk.prototype, "forceAttach", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: guestosfeature_1.GuestOsFeature }),
        (0, class_transformer_1.Expose)({ name: "guestOsFeatures" }),
        (0, class_transformer_1.Type)(function () { return guestosfeature_1.GuestOsFeature; }),
        __metadata("design:type", Array)
    ], AttachedDisk.prototype, "guestOsFeatures", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "index" }),
        __metadata("design:type", Number)
    ], AttachedDisk.prototype, "index", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "initializeParams" }),
        (0, class_transformer_1.Type)(function () { return attacheddiskinitializeparams_1.AttachedDiskInitializeParams; }),
        __metadata("design:type", attacheddiskinitializeparams_1.AttachedDiskInitializeParams)
    ], AttachedDisk.prototype, "initializeParams", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "interface" }),
        __metadata("design:type", String)
    ], AttachedDisk.prototype, "interface", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], AttachedDisk.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "licenses" }),
        __metadata("design:type", Array)
    ], AttachedDisk.prototype, "licenses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "locked" }),
        __metadata("design:type", Boolean)
    ], AttachedDisk.prototype, "locked", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mode" }),
        __metadata("design:type", String)
    ], AttachedDisk.prototype, "mode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "savedState" }),
        __metadata("design:type", String)
    ], AttachedDisk.prototype, "savedState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "shieldedInstanceInitialState" }),
        (0, class_transformer_1.Type)(function () { return initialstateconfig_1.InitialStateConfig; }),
        __metadata("design:type", initialstateconfig_1.InitialStateConfig)
    ], AttachedDisk.prototype, "shieldedInstanceInitialState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "source" }),
        __metadata("design:type", String)
    ], AttachedDisk.prototype, "source", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], AttachedDisk.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "userLicenses" }),
        __metadata("design:type", Array)
    ], AttachedDisk.prototype, "userLicenses", void 0);
    return AttachedDisk;
}(utils_1.SpeakeasyBase));
exports.AttachedDisk = AttachedDisk;
