<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Job 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Activate an ImportJob
     * 
     * Make an ImportJob active, so that it is executed
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivateImportJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivateImportJobSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivateImportJobResponse
     */
	public function activateImportJob(
        \OpenAPI\OpenAPI\Models\Operations\ActivateImportJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ActivateImportJobSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivateImportJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{id}/activate', \OpenAPI\OpenAPI\Models\Operations\ActivateImportJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivateImportJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create ImportJob
     * 
     * Create a new ImportJob
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ImportJob $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateImportJobSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateImportJobResponse
     */
	public function createImportJob(
        \OpenAPI\OpenAPI\Models\Shared\ImportJob $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateImportJobSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateImportJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateImportJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete ImportJob
     * 
     * Delete an ImportJob
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteImportJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteImportJobSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteImportJobResponse
     */
	public function deleteImportJob(
        \OpenAPI\OpenAPI\Models\Operations\DeleteImportJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteImportJobSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteImportJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteImportJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteImportJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the ImportJobs counter
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImportJobCounterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImportJobCounterResponse
     */
	public function getImportJobCounter(
        \OpenAPI\OpenAPI\Models\Operations\GetImportJobCounterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImportJobCounterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/count');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImportJobCounterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->counter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Counter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get ImportJobs
     * 
     * Retrieve a list of ImportJobs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImportJobsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImportJobsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImportJobsResponse
     */
	public function getImportJobs(
        \OpenAPI\OpenAPI\Models\Operations\GetImportJobsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetImportJobsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImportJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetImportJobsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImportJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importJobs = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ImportJob>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start an ImportJob
     * 
     * Starting an ImportJob forces it to immediatly import mock definitions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StartImportJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StartImportJobSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StartImportJobResponse
     */
	public function startImportJob(
        \OpenAPI\OpenAPI\Models\Operations\StartImportJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StartImportJobSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StartImportJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{id}/start', \OpenAPI\OpenAPI\Models\Operations\StartImportJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartImportJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stop an ImportJob
     * 
     * Stopping an ImportJob desactivate it, so that it won't execute at next schedule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopImportJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StopImportJobSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StopImportJobResponse
     */
	public function stopImportJob(
        \OpenAPI\OpenAPI\Models\Operations\StopImportJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StopImportJobSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StopImportJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{id}/stop', \OpenAPI\OpenAPI\Models\Operations\StopImportJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopImportJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get ImportJob
     * 
     * Retrieve an ImportJob using its identifier
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJobsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJobsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJobsIdResponse
     */
	public function getJobsId(
        \OpenAPI\OpenAPI\Models\Operations\GetJobsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetJobsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJobsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{id}', \OpenAPI\OpenAPI\Models\Operations\GetJobsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJobsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update ImportJob
     * 
     * Update an ImportJob
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostJobsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostJobsIdResponse
     */
	public function postJobsId(
        \OpenAPI\OpenAPI\Models\Operations\PostJobsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostJobsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/jobs/{id}', \OpenAPI\OpenAPI\Models\Operations\PostJobsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "importJob", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostJobsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upload an artifact
     * 
     * Uploads an artifact to be imported by Microcks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadArtifactRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UploadArtifactSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UploadArtifactResponse
     */
	public function uploadArtifact(
        \OpenAPI\OpenAPI\Models\Operations\UploadArtifactRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UploadArtifactSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UploadArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/artifact/upload');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "artifactUpload", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UploadArtifactRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UploadArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->uploadArtifact201TextPlainString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->uploadArtifact400TextPlainString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}