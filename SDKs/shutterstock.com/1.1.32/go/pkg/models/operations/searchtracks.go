// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SearchTracksSecurity struct {
	Basic              *shared.SchemeBasic `security:"scheme,type=http,subtype=basic"`
	CustomerAccessCode *string             `security:"scheme,type=oauth2,name=Authorization"`
}

// SearchTracksLibraryEnum - Which library to search
type SearchTracksLibraryEnum string

const (
	SearchTracksLibraryEnumShutterstock SearchTracksLibraryEnum = "shutterstock"
	SearchTracksLibraryEnumPremier      SearchTracksLibraryEnum = "premier"
)

func (e SearchTracksLibraryEnum) ToPointer() *SearchTracksLibraryEnum {
	return &e
}

func (e *SearchTracksLibraryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shutterstock":
		fallthrough
	case "premier":
		*e = SearchTracksLibraryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchTracksLibraryEnum: %v", v)
	}
}

// SearchTracksSortEnum - Sort by
type SearchTracksSortEnum string

const (
	SearchTracksSortEnumScore      SearchTracksSortEnum = "score"
	SearchTracksSortEnumRankingAll SearchTracksSortEnum = "ranking_all"
	SearchTracksSortEnumArtist     SearchTracksSortEnum = "artist"
	SearchTracksSortEnumTitle      SearchTracksSortEnum = "title"
	SearchTracksSortEnumBpm        SearchTracksSortEnum = "bpm"
	SearchTracksSortEnumFreshness  SearchTracksSortEnum = "freshness"
	SearchTracksSortEnumDuration   SearchTracksSortEnum = "duration"
)

func (e SearchTracksSortEnum) ToPointer() *SearchTracksSortEnum {
	return &e
}

func (e *SearchTracksSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "score":
		fallthrough
	case "ranking_all":
		fallthrough
	case "artist":
		fallthrough
	case "title":
		fallthrough
	case "bpm":
		fallthrough
	case "freshness":
		fallthrough
	case "duration":
		*e = SearchTracksSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchTracksSortEnum: %v", v)
	}
}

// SearchTracksSortOrderEnum - Sort order
type SearchTracksSortOrderEnum string

const (
	SearchTracksSortOrderEnumAsc  SearchTracksSortOrderEnum = "asc"
	SearchTracksSortOrderEnumDesc SearchTracksSortOrderEnum = "desc"
)

func (e SearchTracksSortOrderEnum) ToPointer() *SearchTracksSortOrderEnum {
	return &e
}

func (e *SearchTracksSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SearchTracksSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchTracksSortOrderEnum: %v", v)
	}
}

// SearchTracksViewEnum - Amount of detail to render in the response
type SearchTracksViewEnum string

const (
	SearchTracksViewEnumMinimal SearchTracksViewEnum = "minimal"
	SearchTracksViewEnumFull    SearchTracksViewEnum = "full"
)

func (e SearchTracksViewEnum) ToPointer() *SearchTracksViewEnum {
	return &e
}

func (e *SearchTracksViewEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minimal":
		fallthrough
	case "full":
		*e = SearchTracksViewEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchTracksViewEnum: %v", v)
	}
}

type SearchTracksRequest struct {
	// Show tracks with one of the specified artist names or IDs
	Artists []string `queryParam:"style=form,explode=true,name=artists"`
	// (Deprecated; use bpm_from and bpm_to instead) Show tracks with the specified beats per minute
	//
	// Deprecated: this field will be removed in a future release, please migrate away from it as soon as possible.
	Bpm *int64 `queryParam:"style=form,explode=true,name=bpm"`
	// Show tracks with the specified beats per minute or faster
	BpmFrom *int64 `queryParam:"style=form,explode=true,name=bpm_from"`
	// Show tracks with the specified beats per minute or slower
	BpmTo *int64 `queryParam:"style=form,explode=true,name=bpm_to"`
	// Show tracks with the specified duration in seconds
	Duration *int64 `queryParam:"style=form,explode=true,name=duration"`
	// Show tracks with the specified duration or longer in seconds
	DurationFrom *int64 `queryParam:"style=form,explode=true,name=duration_from"`
	// Show tracks with the specified duration or shorter in seconds
	DurationTo *int64 `queryParam:"style=form,explode=true,name=duration_to"`
	// Fields to display in the response; see the documentation for the fields parameter in the overview section
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Show tracks with each of the specified genres; to get the list of genres, use `GET /v2/audio/genres`
	Genre []string `queryParam:"style=form,explode=true,name=genre"`
	// Show tracks with each of the specified instruments; to get the list of instruments, use `GET /v2/audio/instruments`
	Instruments []string `queryParam:"style=form,explode=true,name=instruments"`
	// Show instrumental music only
	IsInstrumental *bool `queryParam:"style=form,explode=true,name=is_instrumental"`
	// Which language to search in
	Language *string `queryParam:"style=form,explode=true,name=language"`
	// Which library to search
	Library *SearchTracksLibraryEnum `queryParam:"style=form,explode=true,name=library"`
	// Show tracks with each of the specified moods; to get the list of moods, use `GET /v2/audio/moods`
	Moods []string `queryParam:"style=form,explode=true,name=moods"`
	// Page number
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Number of results per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// One or more search terms separated by spaces
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Sort by
	Sort *SearchTracksSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Sort order
	SortOrder *SearchTracksSortOrderEnum `queryParam:"style=form,explode=true,name=sort_order"`
	// Amount of detail to render in the response
	View *SearchTracksViewEnum `queryParam:"style=form,explode=true,name=view"`
	// Show tracks with the specified vocal description (male, female)
	VocalDescription *string `queryParam:"style=form,explode=true,name=vocal_description"`
}

type SearchTracksResponse struct {
	// OK
	AudioSearchResults *shared.AudioSearchResults
	ContentType        string
	StatusCode         int
	RawResponse        *http.Response
}
