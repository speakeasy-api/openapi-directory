"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TrackMetadataRequestTrackEmbeddableByEnum(str, Enum):
    r"""who can embed this track \\"all\\", \\"me\\", or \\"none\\" """
    ALL = 'all'
    ME = 'me'
    NONE = 'none'

class TrackMetadataRequestTrackLicenseEnum(str, Enum):
    r"""Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa"""
    NO_RIGHTS_RESERVED = 'no-rights-reserved'
    ALL_RIGHTS_RESERVED = 'all-rights-reserved'
    CC_BY = 'cc-by'
    CC_BY_NC = 'cc-by-nc'
    CC_BY_ND = 'cc-by-nd'
    CC_BY_SA = 'cc-by-sa'
    CC_BY_NC_ND = 'cc-by-nc-nd'
    CC_BY_NC_SA = 'cc-by-nc-sa'

class TrackMetadataRequestTrackSharingEnum(str, Enum):
    PUBLIC = 'public'
    PRIVATE = 'private'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackMetadataRequestTrack:
    
    commentable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commentable'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    downloadable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloadable'), 'exclude': lambda f: f is None }})  
    embeddable_by: Optional[TrackMetadataRequestTrackEmbeddableByEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embeddable_by'), 'exclude': lambda f: f is None }})
    r"""who can embed this track \\"all\\", \\"me\\", or \\"none\\" """  
    genre: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genre'), 'exclude': lambda f: f is None }})  
    isrc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isrc'), 'exclude': lambda f: f is None }})  
    label_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_name'), 'exclude': lambda f: f is None }})  
    license: Optional[TrackMetadataRequestTrackLicenseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license'), 'exclude': lambda f: f is None }})
    r"""Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa"""  
    permalink: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permalink'), 'exclude': lambda f: f is None }})  
    purchase_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchase_url'), 'exclude': lambda f: f is None }})  
    release: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release'), 'exclude': lambda f: f is None }})  
    release_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_date'), 'exclude': lambda f: f is None }})
    r"""string, formatted as yyyy-mm-dd, representing release date"""  
    sharing: Optional[TrackMetadataRequestTrackSharingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharing'), 'exclude': lambda f: f is None }})  
    streamable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamable'), 'exclude': lambda f: f is None }})  
    tag_list: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag_list'), 'exclude': lambda f: f is None }})
    r"""The tag_list property contains a list of tags separated by spaces. Multiword tags are quoted in double quotes. We also support machine tags that follow the pattern NAMESPACE:KEY=VALUE. For example: geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine tags are not revealed to the user on the track pages."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrackMetadataRequest:
    r"""Track payload"""
    
    track: Optional[TrackMetadataRequestTrack] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('track'), 'exclude': lambda f: f is None }})  
    