<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Topics 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates the given topic with the given name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsCreateResponse
     */
	public function pubsubTopicsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1a/topics');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "topic", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PubsubTopicsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->topic = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Topic', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the topic with the given name. Returns NOT_FOUND if the topic does not exist. After a topic is deleted, a new topic may be created with the same name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsDeleteResponse
     */
	public function pubsubTopicsDelete(
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1a/topics/{topic}', \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PubsubTopicsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the configuration of a topic. Since the topic only has the name attribute, this method is only useful to check the existence of a topic. If other attributes are added in the future, they will be returned here.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsGetResponse
     */
	public function pubsubTopicsGet(
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1a/topics/{topic}', \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PubsubTopicsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->topic = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Topic', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists matching topics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsListResponse
     */
	public function pubsubTopicsList(
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1a/topics');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PubsubTopicsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTopicsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTopicsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a message to the topic. Returns NOT_FOUND if the topic does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishResponse
     */
	public function pubsubTopicsPublish(
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1a/topics/publish');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "publishRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds one or more messages to the topic. Returns NOT_FOUND if the topic does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishBatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishBatchResponse
     */
	public function pubsubTopicsPublishBatch(
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishBatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1a/topics/publishBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "publishBatchRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishBatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PubsubTopicsPublishBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publishBatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublishBatchResponse', 'json');
            }
        }

        return $response;
    }
}