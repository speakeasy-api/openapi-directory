"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasePlan = exports.BasePlanStateEnum = exports.BasePlanInput = void 0;
var utils_1 = require("../../../internal/utils");
var autorenewingbaseplantype_1 = require("./autorenewingbaseplantype");
var offertag_1 = require("./offertag");
var otherregionsbaseplanconfig_1 = require("./otherregionsbaseplanconfig");
var prepaidbaseplantype_1 = require("./prepaidbaseplantype");
var regionalbaseplanconfig_1 = require("./regionalbaseplanconfig");
var class_transformer_1 = require("class-transformer");
/**
 * A single base plan for a subscription.
 */
var BasePlanInput = /** @class */ (function (_super) {
    __extends(BasePlanInput, _super);
    function BasePlanInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "autoRenewingBasePlanType" }),
        (0, class_transformer_1.Type)(function () { return autorenewingbaseplantype_1.AutoRenewingBasePlanType; }),
        __metadata("design:type", autorenewingbaseplantype_1.AutoRenewingBasePlanType)
    ], BasePlanInput.prototype, "autoRenewingBasePlanType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "basePlanId" }),
        __metadata("design:type", String)
    ], BasePlanInput.prototype, "basePlanId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: offertag_1.OfferTag }),
        (0, class_transformer_1.Expose)({ name: "offerTags" }),
        (0, class_transformer_1.Type)(function () { return offertag_1.OfferTag; }),
        __metadata("design:type", Array)
    ], BasePlanInput.prototype, "offerTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "otherRegionsConfig" }),
        (0, class_transformer_1.Type)(function () { return otherregionsbaseplanconfig_1.OtherRegionsBasePlanConfig; }),
        __metadata("design:type", otherregionsbaseplanconfig_1.OtherRegionsBasePlanConfig)
    ], BasePlanInput.prototype, "otherRegionsConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "prepaidBasePlanType" }),
        (0, class_transformer_1.Type)(function () { return prepaidbaseplantype_1.PrepaidBasePlanType; }),
        __metadata("design:type", prepaidbaseplantype_1.PrepaidBasePlanType)
    ], BasePlanInput.prototype, "prepaidBasePlanType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: regionalbaseplanconfig_1.RegionalBasePlanConfig }),
        (0, class_transformer_1.Expose)({ name: "regionalConfigs" }),
        (0, class_transformer_1.Type)(function () { return regionalbaseplanconfig_1.RegionalBasePlanConfig; }),
        __metadata("design:type", Array)
    ], BasePlanInput.prototype, "regionalConfigs", void 0);
    return BasePlanInput;
}(utils_1.SpeakeasyBase));
exports.BasePlanInput = BasePlanInput;
/**
 * Output only. The state of the base plan, i.e. whether it's active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead.
 */
var BasePlanStateEnum;
(function (BasePlanStateEnum) {
    BasePlanStateEnum["StateUnspecified"] = "STATE_UNSPECIFIED";
    BasePlanStateEnum["Draft"] = "DRAFT";
    BasePlanStateEnum["Active"] = "ACTIVE";
    BasePlanStateEnum["Inactive"] = "INACTIVE";
})(BasePlanStateEnum = exports.BasePlanStateEnum || (exports.BasePlanStateEnum = {}));
/**
 * A single base plan for a subscription.
 */
var BasePlan = /** @class */ (function (_super) {
    __extends(BasePlan, _super);
    function BasePlan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "autoRenewingBasePlanType" }),
        (0, class_transformer_1.Type)(function () { return autorenewingbaseplantype_1.AutoRenewingBasePlanType; }),
        __metadata("design:type", autorenewingbaseplantype_1.AutoRenewingBasePlanType)
    ], BasePlan.prototype, "autoRenewingBasePlanType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "basePlanId" }),
        __metadata("design:type", String)
    ], BasePlan.prototype, "basePlanId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: offertag_1.OfferTag }),
        (0, class_transformer_1.Expose)({ name: "offerTags" }),
        (0, class_transformer_1.Type)(function () { return offertag_1.OfferTag; }),
        __metadata("design:type", Array)
    ], BasePlan.prototype, "offerTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "otherRegionsConfig" }),
        (0, class_transformer_1.Type)(function () { return otherregionsbaseplanconfig_1.OtherRegionsBasePlanConfig; }),
        __metadata("design:type", otherregionsbaseplanconfig_1.OtherRegionsBasePlanConfig)
    ], BasePlan.prototype, "otherRegionsConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "prepaidBasePlanType" }),
        (0, class_transformer_1.Type)(function () { return prepaidbaseplantype_1.PrepaidBasePlanType; }),
        __metadata("design:type", prepaidbaseplantype_1.PrepaidBasePlanType)
    ], BasePlan.prototype, "prepaidBasePlanType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: regionalbaseplanconfig_1.RegionalBasePlanConfig }),
        (0, class_transformer_1.Expose)({ name: "regionalConfigs" }),
        (0, class_transformer_1.Type)(function () { return regionalbaseplanconfig_1.RegionalBasePlanConfig; }),
        __metadata("design:type", Array)
    ], BasePlan.prototype, "regionalConfigs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], BasePlan.prototype, "state", void 0);
    return BasePlan;
}(utils_1.SpeakeasyBase));
exports.BasePlan = BasePlan;
