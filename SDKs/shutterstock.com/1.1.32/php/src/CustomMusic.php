<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CustomMusic 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create rendered audio
     * 
     * This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateAudioRendersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAudioRendersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAudioRendersResponse
     */
	public function createAudioRenders(
        \OpenAPI\OpenAPI\Models\Shared\CreateAudioRendersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAudioRendersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAudioRendersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ai/audio/renders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAudioRendersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->audioRendersListResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AudioRendersListResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get details about audio renders
     * 
     * This endpoint shows the status of one or more audio renders, including download links for completed audio.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRendersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRendersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRendersResponse
     */
	public function fetchRenders(
        \OpenAPI\OpenAPI\Models\Operations\FetchRendersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRendersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRendersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ai/audio/renders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchRendersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRendersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->audioRendersListResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AudioRendersListResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List computer audio descriptors
     * 
     * This endpoint lists the descriptors that you can use in the audio regions in an audio render.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomDescriptorsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomDescriptorsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCustomDescriptorsResponse
     */
	public function listCustomDescriptors(
        \OpenAPI\OpenAPI\Models\Operations\ListCustomDescriptorsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCustomDescriptorsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCustomDescriptorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ai/audio/descriptors');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCustomDescriptorsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCustomDescriptorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->descriptorsListResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DescriptorsListResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List computer audio instruments
     * 
     * This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomInstrumentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomInstrumentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCustomInstrumentsResponse
     */
	public function listCustomInstruments(
        \OpenAPI\OpenAPI\Models\Operations\ListCustomInstrumentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCustomInstrumentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCustomInstrumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/ai/audio/instruments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCustomInstrumentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCustomInstrumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instrumentsListResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstrumentsListResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
}