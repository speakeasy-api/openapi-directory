/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
 */
export class ReposUpdateBranchProtectionRequestBodyRequiredPullRequestReviewsDismissalRestrictions extends SpeakeasyBase {
  /**
   * The list of team `slug`s with dismissal access
   */
  @SpeakeasyMetadata()
  @Expose({ name: "teams" })
  teams?: string[];

  /**
   * The list of user `login`s with dismissal access
   */
  @SpeakeasyMetadata()
  @Expose({ name: "users" })
  users?: string[];
}

/**
 * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
 */
export class ReposUpdateBranchProtectionRequestBodyRequiredPullRequestReviews extends SpeakeasyBase {
  /**
   * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dismiss_stale_reviews" })
  dismissStaleReviews?: boolean;

  /**
   * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dismissal_restrictions" })
  @Type(
    () =>
      ReposUpdateBranchProtectionRequestBodyRequiredPullRequestReviewsDismissalRestrictions
  )
  dismissalRestrictions?: ReposUpdateBranchProtectionRequestBodyRequiredPullRequestReviewsDismissalRestrictions;

  /**
   * Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_code_owner_reviews" })
  requireCodeOwnerReviews?: boolean;

  /**
   * Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required_approving_review_count" })
  requiredApprovingReviewCount?: number;
}

/**
 * Require status checks to pass before merging. Set to `null` to disable.
 */
export class ReposUpdateBranchProtectionRequestBodyRequiredStatusChecks extends SpeakeasyBase {
  /**
   * The list of status checks to require in order to merge into this branch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contexts" })
  contexts: string[];

  /**
   * Require branches to be up to date before merging.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "strict" })
  strict: boolean;
}

/**
 * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
 */
export class ReposUpdateBranchProtectionRequestBodyRestrictions extends SpeakeasyBase {
  /**
   * The list of app `slug`s with push access
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apps" })
  apps?: string[];

  /**
   * The list of team `slug`s with push access
   */
  @SpeakeasyMetadata()
  @Expose({ name: "teams" })
  teams: string[];

  /**
   * The list of user `login`s with push access
   */
  @SpeakeasyMetadata()
  @Expose({ name: "users" })
  users: string[];
}

export class ReposUpdateBranchProtectionRequestBody extends SpeakeasyBase {
  /**
   * Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_deletions" })
  allowDeletions?: boolean;

  /**
   * Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_force_pushes" })
  allowForcePushes?: boolean;

  /**
   * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enforce_admins" })
  enforceAdmins: boolean;

  /**
   * Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required_conversation_resolution" })
  requiredConversationResolution?: boolean;

  /**
   * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required_linear_history" })
  requiredLinearHistory?: boolean;

  /**
   * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required_pull_request_reviews" })
  @Type(() => ReposUpdateBranchProtectionRequestBodyRequiredPullRequestReviews)
  requiredPullRequestReviews: ReposUpdateBranchProtectionRequestBodyRequiredPullRequestReviews;

  /**
   * Require status checks to pass before merging. Set to `null` to disable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required_status_checks" })
  @Type(() => ReposUpdateBranchProtectionRequestBodyRequiredStatusChecks)
  requiredStatusChecks: ReposUpdateBranchProtectionRequestBodyRequiredStatusChecks;

  /**
   * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "restrictions" })
  @Type(() => ReposUpdateBranchProtectionRequestBodyRestrictions)
  restrictions: ReposUpdateBranchProtectionRequestBodyRestrictions;
}

export class ReposUpdateBranchProtectionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ReposUpdateBranchProtectionRequestBody;

  /**
   * The name of the branch.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=branch",
  })
  branch: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

/**
 * Preview header missing
 */
export class ReposUpdateBranchProtection415ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "documentation_url" })
  documentationUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class ReposUpdateBranchProtectionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  protectedBranch?: shared.ProtectedBranch;

  /**
   * Preview header missing
   */
  @SpeakeasyMetadata()
  reposUpdateBranchProtection415ApplicationJSONObject?: ReposUpdateBranchProtection415ApplicationJSON;

  /**
   * Validation failed
   */
  @SpeakeasyMetadata()
  validationErrorSimple?: shared.ValidationErrorSimple;
}
