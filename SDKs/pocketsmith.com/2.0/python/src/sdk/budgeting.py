"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Budgeting:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_users_id_forecast_cache(self, request: operations.DeleteUsersIDForecastCacheRequest) -> operations.DeleteUsersIDForecastCacheResponse:
        r"""Delete forecast cache for user
        Delete the user's cached forecast by recalculating the forecast.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUsersIDForecastCacheRequest, base_url, '/users/{id}/forecast_cache', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUsersIDForecastCacheResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_id_budget(self, request: operations.GetUsersIDBudgetRequest) -> operations.GetUsersIDBudgetResponse:
        r"""List budget for user
        Lists the user's budget, consisting of one or more budget analysis packages, one per category. Akin to the list on the Budget page in PocketSmith.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersIDBudgetRequest, base_url, '/users/{id}/budget', request)
        
        query_params = utils.get_query_params(operations.GetUsersIDBudgetRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersIDBudgetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BudgetAnalysisPackage]])
                res.budget_analysis_packages = out

        return res

    def get_users_id_budget_summary(self, request: operations.GetUsersIDBudgetSummaryRequest) -> operations.GetUsersIDBudgetSummaryResponse:
        r"""Get budget summary for user
        Get the user's budget summary, containing an expense and income analysis for all categories (excluding transfer categories) for the given period and date range. Akin to the overall budget shown on the Budget page in PocketSmith.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersIDBudgetSummaryRequest, base_url, '/users/{id}/budget_summary', request)
        
        query_params = utils.get_query_params(operations.GetUsersIDBudgetSummaryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersIDBudgetSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BudgetAnalysisPackage]])
                res.budget_analysis_packages = out
        elif http_res.status_code in [400, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_users_id_trend_analysis(self, request: operations.GetUsersIDTrendAnalysisRequest) -> operations.GetUsersIDTrendAnalysisResponse:
        r"""Get trend analysis for user
        Get an income and/or expense budget analysis for the given date range and period across any number of categories and scenarios. Akin to the Trends page in PocketSmith.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersIDTrendAnalysisRequest, base_url, '/users/{id}/trend_analysis', request)
        
        query_params = utils.get_query_params(operations.GetUsersIDTrendAnalysisRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersIDTrendAnalysisResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BudgetAnalysisPackage]])
                res.budget_analysis_packages = out
        elif http_res.status_code in [400, 403, 404, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    