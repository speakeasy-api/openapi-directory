"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import certificateauthorityconfiguration as shared_certificateauthorityconfiguration
from ..shared import certificateauthoritytype_enum as shared_certificateauthoritytype_enum
from ..shared import certificateauthorityusagemode_enum as shared_certificateauthorityusagemode_enum
from ..shared import keystoragesecuritystandard_enum as shared_keystoragesecuritystandard_enum
from ..shared import revocationconfiguration as shared_revocationconfiguration
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCertificateAuthorityRequest:
    
    certificate_authority_configuration: shared_certificateauthorityconfiguration.CertificateAuthorityConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateAuthorityConfiguration') }})  
    certificate_authority_type: shared_certificateauthoritytype_enum.CertificateAuthorityTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateAuthorityType') }})  
    idempotency_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdempotencyToken'), 'exclude': lambda f: f is None }})  
    key_storage_security_standard: Optional[shared_keystoragesecuritystandard_enum.KeyStorageSecurityStandardEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyStorageSecurityStandard'), 'exclude': lambda f: f is None }})  
    revocation_configuration: Optional[shared_revocationconfiguration.RevocationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RevocationConfiguration'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    usage_mode: Optional[shared_certificateauthorityusagemode_enum.CertificateAuthorityUsageModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UsageMode'), 'exclude': lambda f: f is None }})  
    