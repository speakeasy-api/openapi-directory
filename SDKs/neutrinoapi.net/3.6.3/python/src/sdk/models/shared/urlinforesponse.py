"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class URLInfoResponse:
    
    content: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""The actual content this URL responded with. Only set if the 'fetch-content' option was used"""  
    content_encoding: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content-encoding') }})
    r"""The encoding format the URL uses"""  
    content_size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content-size') }})
    r"""The size of the URL content in bytes"""  
    content_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content-type') }})
    r"""The content-type this URL serves"""  
    http_ok: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http-ok') }})
    r"""True if this URL responded with an HTTP OK (200) status"""  
    http_redirect: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http-redirect') }})
    r"""True if this URL responded with an HTTP redirect"""  
    http_status: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http-status') }})
    r"""The HTTP status code this URL responded with. An HTTP status of 0 indicates a network level issue"""  
    http_status_message: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http-status-message') }})
    r"""The HTTP status message assoicated with the status code"""  
    is_error: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-error') }})
    r"""True if an error occurred while loading the URL. This includes network errors, TLS errors and timeouts"""  
    is_timeout: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-timeout') }})
    r"""True if a timeout occurred while loading the URL. You can set the timeout with the request parameter 'timeout'"""  
    language_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language-code') }})
    r"""The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers"""  
    load_time: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('load-time') }})
    r"""The time taken to load the URL content in seconds"""  
    query: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query') }})
    r"""A key-value map of the URL query paramaters"""  
    real: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('real') }})
    r"""Is this URL actually serving real content"""  
    server_city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server-city') }})
    r"""The servers IP geo-location: full city name (if detectable)"""  
    server_country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server-country') }})
    r"""The servers IP geo-location: full country name"""  
    server_country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server-country-code') }})
    r"""The servers IP geo-location: ISO 2-letter country code"""  
    server_hostname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server-hostname') }})
    r"""The servers hostname (PTR record)"""  
    server_ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server-ip') }})
    r"""The IP address of the server hosting this URL"""  
    server_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server-name') }})
    r"""The name of the server software hosting this URL"""  
    server_region: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server-region') }})
    r"""The servers IP geo-location: full region name (if detectable)"""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""The document title"""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The fully qualified URL. This may be different to the URL requested if http-redirect is true"""  
    url_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url-path') }})
    r"""The URL path"""  
    url_port: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url-port') }})
    r"""The URL port"""  
    url_protocol: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url-protocol') }})
    r"""The URL protocol, usually http or https"""  
    valid: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid') }})
    r"""Is this a valid well-formed URL"""  
    