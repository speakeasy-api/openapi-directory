"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import associationstatus_enum as shared_associationstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StandardsControlAssociationSummary:
    r"""An array that provides the enablement status and other details for each control that applies to each enabled standard."""
    
    association_status: shared_associationstatus_enum.AssociationStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssociationStatus') }})  
    security_control_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityControlArn') }})  
    security_control_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityControlId') }})  
    standards_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StandardsArn') }})  
    related_requirements: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RelatedRequirements'), 'exclude': lambda f: f is None }})  
    standards_control_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StandardsControlDescription'), 'exclude': lambda f: f is None }})  
    standards_control_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StandardsControlTitle'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    updated_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedReason'), 'exclude': lambda f: f is None }})  
    