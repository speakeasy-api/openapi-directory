"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cachefillregions as shared_cachefillregions
from ..shared import usage as shared_usage
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CloudCdnWorkloadCacheFillOriginServiceEnum(str, Enum):
    r"""The source service for the cache fill."""
    CACHE_FILL_ORIGIN_SERVICE_UNSPECIFIED = 'CACHE_FILL_ORIGIN_SERVICE_UNSPECIFIED'
    CACHE_FILL_ORIGIN_SERVICE_GOOGLE_CLOUD_STORAGE_BUCKET = 'CACHE_FILL_ORIGIN_SERVICE_GOOGLE_CLOUD_STORAGE_BUCKET'
    CACHE_FILL_ORIGIN_SERVICE_BACKEND_SERVICE = 'CACHE_FILL_ORIGIN_SERVICE_BACKEND_SERVICE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CloudCdnWorkload:
    r"""Specifies usage for Cloud CDN resources."""
    
    cache_fill_origin_service: Optional[CloudCdnWorkloadCacheFillOriginServiceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cacheFillOriginService'), 'exclude': lambda f: f is None }})
    r"""The source service for the cache fill."""  
    cache_fill_rate: Optional[shared_usage.Usage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cacheFillRate'), 'exclude': lambda f: f is None }})
    r"""An amount of usage over a time frame."""  
    cache_fill_regions: Optional[shared_cachefillregions.CacheFillRegions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cacheFillRegions'), 'exclude': lambda f: f is None }})
    r"""Specifies the regions for Cache Fill."""  
    cache_look_up_rate: Optional[shared_usage.Usage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cacheLookUpRate'), 'exclude': lambda f: f is None }})
    r"""An amount of usage over a time frame."""  
    