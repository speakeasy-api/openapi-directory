/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UtilizationReport - Utilization report details the utilization (CPU, memory, etc.) of selected source VMs.
 */
public class UtilizationReport {
    /**
     * Output only. The time the report was created (this refers to the time of the request, not the time the report creation completed).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public UtilizationReport withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * The report display name, as assigned by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public UtilizationReport withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    public Status error;

    public UtilizationReport withError(Status error) {
        this.error = error;
        return this;
    }
    
    /**
     * Output only. The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the "frame_end_time" value is 2021/01/20 and the time frame is WEEK then the report covers the week between 2021/01/20 and 2021/01/14.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frameEndTime")
    public String frameEndTime;

    public UtilizationReport withFrameEndTime(String frameEndTime) {
        this.frameEndTime = frameEndTime;
        return this;
    }
    
    /**
     * Output only. The report unique name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public UtilizationReport withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. Current state of the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public UtilizationReportStateEnum state;

    public UtilizationReport withState(UtilizationReportStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. The time the state was last set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateTime")
    public String stateTime;

    public UtilizationReport withStateTime(String stateTime) {
        this.stateTime = stateTime;
        return this;
    }
    
    /**
     * Time frame of the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeFrame")
    public UtilizationReportTimeFrameEnum timeFrame;

    public UtilizationReport withTimeFrame(UtilizationReportTimeFrameEnum timeFrame) {
        this.timeFrame = timeFrame;
        return this;
    }
    
    /**
     * Output only. Total number of VMs included in the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmCount")
    public Integer vmCount;

    public UtilizationReport withVmCount(Integer vmCount) {
        this.vmCount = vmCount;
        return this;
    }
    
    /**
     * List of utilization information per VM. When sent as part of the request, the "vm_id" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vms")
    public VmUtilizationInfo[] vms;

    public UtilizationReport withVms(VmUtilizationInfo[] vms) {
        this.vms = vms;
        return this;
    }
    
    public UtilizationReport(){}
}
