// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NonComplianceDetailConditionNonComplianceReasonEnum - The reason the device is not in compliance with the setting. If not set, then this condition matches any reason.
type NonComplianceDetailConditionNonComplianceReasonEnum string

const (
	NonComplianceDetailConditionNonComplianceReasonEnumNonComplianceReasonUnspecified NonComplianceDetailConditionNonComplianceReasonEnum = "NON_COMPLIANCE_REASON_UNSPECIFIED"
	NonComplianceDetailConditionNonComplianceReasonEnumAPILevel                       NonComplianceDetailConditionNonComplianceReasonEnum = "API_LEVEL"
	NonComplianceDetailConditionNonComplianceReasonEnumManagementMode                 NonComplianceDetailConditionNonComplianceReasonEnum = "MANAGEMENT_MODE"
	NonComplianceDetailConditionNonComplianceReasonEnumUserAction                     NonComplianceDetailConditionNonComplianceReasonEnum = "USER_ACTION"
	NonComplianceDetailConditionNonComplianceReasonEnumInvalidValue                   NonComplianceDetailConditionNonComplianceReasonEnum = "INVALID_VALUE"
	NonComplianceDetailConditionNonComplianceReasonEnumAppNotInstalled                NonComplianceDetailConditionNonComplianceReasonEnum = "APP_NOT_INSTALLED"
	NonComplianceDetailConditionNonComplianceReasonEnumUnsupported                    NonComplianceDetailConditionNonComplianceReasonEnum = "UNSUPPORTED"
	NonComplianceDetailConditionNonComplianceReasonEnumAppInstalled                   NonComplianceDetailConditionNonComplianceReasonEnum = "APP_INSTALLED"
	NonComplianceDetailConditionNonComplianceReasonEnumPending                        NonComplianceDetailConditionNonComplianceReasonEnum = "PENDING"
	NonComplianceDetailConditionNonComplianceReasonEnumAppIncompatible                NonComplianceDetailConditionNonComplianceReasonEnum = "APP_INCOMPATIBLE"
	NonComplianceDetailConditionNonComplianceReasonEnumAppNotUpdated                  NonComplianceDetailConditionNonComplianceReasonEnum = "APP_NOT_UPDATED"
)

func (e NonComplianceDetailConditionNonComplianceReasonEnum) ToPointer() *NonComplianceDetailConditionNonComplianceReasonEnum {
	return &e
}

func (e *NonComplianceDetailConditionNonComplianceReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NON_COMPLIANCE_REASON_UNSPECIFIED":
		fallthrough
	case "API_LEVEL":
		fallthrough
	case "MANAGEMENT_MODE":
		fallthrough
	case "USER_ACTION":
		fallthrough
	case "INVALID_VALUE":
		fallthrough
	case "APP_NOT_INSTALLED":
		fallthrough
	case "UNSUPPORTED":
		fallthrough
	case "APP_INSTALLED":
		fallthrough
	case "PENDING":
		fallthrough
	case "APP_INCOMPATIBLE":
		fallthrough
	case "APP_NOT_UPDATED":
		*e = NonComplianceDetailConditionNonComplianceReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NonComplianceDetailConditionNonComplianceReasonEnum: %v", v)
	}
}

// NonComplianceDetailCondition - A compliance rule condition which is satisfied if there exists any matching NonComplianceDetail for the device. A NonComplianceDetail matches a NonComplianceDetailCondition if all the fields which are set within the NonComplianceDetailCondition match the corresponding NonComplianceDetail fields.
type NonComplianceDetailCondition struct {
	// The reason the device is not in compliance with the setting. If not set, then this condition matches any reason.
	NonComplianceReason *NonComplianceDetailConditionNonComplianceReasonEnum `json:"nonComplianceReason,omitempty"`
	// The package name of the app that's out of compliance. If not set, then this condition matches any package name.
	PackageName *string `json:"packageName,omitempty"`
	// The name of the policy setting. This is the JSON field name of a top-level Policy field. If not set, then this condition matches any setting name.
	SettingName *string `json:"settingName,omitempty"`
}
