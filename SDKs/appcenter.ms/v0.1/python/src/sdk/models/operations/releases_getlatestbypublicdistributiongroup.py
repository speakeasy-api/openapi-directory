"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReleasesGetLatestByPublicDistributionGroupRequest:
    
    app_secret: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_secret', 'style': 'simple', 'explode': False }})
    r"""The secret of the target application"""  
    distribution_group_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'distribution_group_id', 'style': 'simple', 'explode': False }})
    r"""the id for destination"""  
    is_install_page: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'is_install_page', 'style': 'form', 'explode': True }})
    r"""The check if the request is from Install page"""  
    
class ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesGetLatestByPublicDistributionGroup404ApplicationJSON:
    r"""Error Codes:
    - `not_found` - Distribution group or the app doesn't exist
    - `no_releases_for_app` - App has no releases.
    """
    
    code: ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesGetLatestByPublicDistributionGroup403ApplicationJSON:
    r"""Error Codes:
    - `forbidden` - Unauthorized to access private distribution group
    """
    
    code: ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONBuild:
    r"""Contains metadata about the build that produced the release being uploaded"""
    
    branch_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch_name'), 'exclude': lambda f: f is None }})
    r"""The branch name of the build producing the release"""  
    commit_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_hash'), 'exclude': lambda f: f is None }})
    r"""The commit hash of the build producing the release"""  
    commit_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_message'), 'exclude': lambda f: f is None }})
    r"""The commit message of the build producing the release"""  
    
class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum(str, Enum):
    r"""OBSOLETE. Will be removed in next version. The destination type.<br>
    <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
    <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>
    <b>tester</b>: The release distributed testers details will be returned.<br>
    """
    GROUP = 'group'
    STORE = 'store'
    TESTER = 'tester'

class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum(str, Enum):
    r"""Destination can be either store or group."""
    GROUP = 'group'
    STORE = 'store'
    TESTER = 'tester'

class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum(str, Enum):
    r"""type of the distribution store currently stores type can be intune, googleplay or windows."""
    INTUNE = 'intune'
    GOOGLEPLAY = 'googleplay'
    APPLE = 'apple'
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinations:
    r"""A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store."""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID identifying a unique distribution store."""  
    destination_type: Optional[ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_type'), 'exclude': lambda f: f is None }})
    r"""Destination can be either store or group."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})
    r"""Display name for the group or tester"""  
    is_latest: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_latest'), 'exclude': lambda f: f is None }})
    r"""Is the containing release the latest one in this distribution store."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A name identifying a unique distribution store."""  
    publishing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishing_status'), 'exclude': lambda f: f is None }})
    r"""publishing status of the release in the store."""  
    type: Optional[ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""type of the distribution store currently stores type can be intune, googleplay or windows."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionGroups:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID identifying a unique distribution group."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A name identifying a unique distribution group."""  
    
class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum(str, Enum):
    r"""type of the distribution store currently stores type can be intune, googleplay or windows."""
    INTUNE = 'intune'
    GOOGLEPLAY = 'googleplay'
    APPLE = 'apple'
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStores:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID identifying a unique distribution store."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A name identifying a unique distribution store."""  
    publishing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishing_status'), 'exclude': lambda f: f is None }})
    r"""publishing status of the release in the store."""  
    type: Optional[ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""type of the distribution store currently stores type can be intune, googleplay or windows."""  
    
class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum(str, Enum):
    r"""The release's origin"""
    HOCKEYAPP = 'hockeyapp'
    APPCENTER = 'appcenter'

class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum(str, Enum):
    r"""The type of the provisioning profile for the requested app version."""
    ADHOC = 'adhoc'
    ENTERPRISE = 'enterprise'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSON:
    r"""Details of an uploaded release"""
    
    app_display_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_display_name') }})
    r"""The app's display name."""  
    app_icon_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_icon_url') }})
    r"""A URL to the app's icon."""  
    app_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_name') }})
    r"""The app's name (extracted from the uploaded release)."""  
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})
    r"""This value determines the whether a release currently is enabled or disabled."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID identifying this unique release."""  
    short_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('short_version') }})
    r"""The release's short version.<br>
    For iOS: CFBundleShortVersionString from info.plist.
    For Android: android:versionName from AppManifest.xml.
    """  
    uploaded_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_at') }})
    r"""UTC time in ISO 8601 format of the uploaded time."""  
    version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})
    r"""The release's version.<br>
    For iOS: CFBundleVersion from info.plist.
    For Android: android:versionCode from AppManifest.xml.
    """  
    android_min_api_level: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('android_min_api_level'), 'exclude': lambda f: f is None }})
    r"""The release's minimum required Android API level."""  
    app_os: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_os'), 'exclude': lambda f: f is None }})
    r"""The app's OS."""  
    build: Optional[ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONBuild] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build'), 'exclude': lambda f: f is None }})
    r"""Contains metadata about the build that produced the release being uploaded"""  
    bundle_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundle_identifier'), 'exclude': lambda f: f is None }})
    r"""The identifier of the apps bundle."""  
    can_resign: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_resign'), 'exclude': lambda f: f is None }})
    r"""In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms."""  
    destination_type: Optional[ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_type'), 'exclude': lambda f: f is None }})
    r"""OBSOLETE. Will be removed in next version. The destination type.<br>
    <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
    <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>
    <b>tester</b>: The release distributed testers details will be returned.<br>
    """  
    destinations: Optional[list[ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinations'), 'exclude': lambda f: f is None }})
    r"""A list of distribution groups or stores."""  
    device_family: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_family'), 'exclude': lambda f: f is None }})
    r"""The release's device family."""  
    distribution_groups: Optional[list[ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionGroups]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distribution_groups'), 'exclude': lambda f: f is None }})
    r"""OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release."""  
    distribution_stores: Optional[list[ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStores]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distribution_stores'), 'exclude': lambda f: f is None }})
    r"""OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release."""  
    download_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download_url'), 'exclude': lambda f: f is None }})
    r"""The URL that hosts the binary for this release."""  
    fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint'), 'exclude': lambda f: f is None }})
    r"""MD5 checksum of the release binary."""  
    install_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('install_url'), 'exclude': lambda f: f is None }})
    r"""The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`"""  
    is_external_build: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_external_build'), 'exclude': lambda f: f is None }})
    r"""This value determines if a release is external or not."""  
    is_provisioning_profile_syncing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_provisioning_profile_syncing'), 'exclude': lambda f: f is None }})
    r"""A flag that determines whether the release's provisioning profile is still extracted or not."""  
    is_udid_provisioned: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_udid_provisioned'), 'exclude': lambda f: f is None }})
    r"""In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms."""  
    min_os: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_os'), 'exclude': lambda f: f is None }})
    r"""The release's minimum required operating system."""  
    origin: Optional[ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""The release's origin"""  
    package_hashes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package_hashes'), 'exclude': lambda f: f is None }})
    r"""Hashes for the packages."""  
    provisioning_profile_expiry_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioning_profile_expiry_date'), 'exclude': lambda f: f is None }})
    r"""expiration date of provisioning profile in UTC format."""  
    provisioning_profile_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioning_profile_name'), 'exclude': lambda f: f is None }})
    r"""The release's provisioning profile name."""  
    provisioning_profile_type: Optional[ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioning_profile_type'), 'exclude': lambda f: f is None }})
    r"""The type of the provisioning profile for the requested app version."""  
    release_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_notes'), 'exclude': lambda f: f is None }})
    r"""The release's release notes."""  
    secondary_download_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondary_download_url'), 'exclude': lambda f: f is None }})
    r"""The URL that hosts the secondary binary for this release, such as the apk file for aab releases."""  
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""The release's size in bytes."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the release."""  
    

@dataclasses.dataclass
class ReleasesGetLatestByPublicDistributionGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    releases_get_latest_by_public_distribution_group_200_application_json_object: Optional[ReleasesGetLatestByPublicDistributionGroup200ApplicationJSON] = dataclasses.field(default=None)
    r"""The full release details of the latest release that was distributed from the given public group."""  
    releases_get_latest_by_public_distribution_group_403_application_json_object: Optional[ReleasesGetLatestByPublicDistributionGroup403ApplicationJSON] = dataclasses.field(default=None)
    r"""Error Codes:
    - `forbidden` - Unauthorized to access private distribution group
    """  
    releases_get_latest_by_public_distribution_group_404_application_json_object: Optional[ReleasesGetLatestByPublicDistributionGroup404ApplicationJSON] = dataclasses.field(default=None)
    r"""Error Codes:
    - `not_found` - Distribution group or the app doesn't exist
    - `no_releases_for_app` - App has no releases.
    """  
    