/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { HrefType } from "./hreftype";
import { MessageCode400AISEnum } from "./messagecode400aisenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * This is a data element to support the declaration of additional errors in the context of [RFC7807].
 */
export class Error400AISAdditionalErrors extends SpeakeasyBase {
  /**
   * Message codes defined for AIS for HTTP Error code 400 (BAD_REQUEST).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: MessageCode400AISEnum;

  /**
   * Detailed human readable text specific to this instance of the error.
   *
   * @remarks
   * XPath might be used to point to the issue generating the error in addition.
   * Remark for Future: In future, a dedicated field might be introduced for the XPath.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;

  /**
   * Short human readable description of error type.
   *
   * @remarks
   * Could be in local language.
   * To be provided by ASPSPs.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

/**
 * Standardised definition of reporting error information according to [RFC7807]
 *
 * @remarks
 * in case of a HTTP error code 400 for AIS.
 *
 */
export class Error400AIS extends SpeakeasyBase {
  /**
   * A _link object with all availabel link types.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: HrefType })
  @Expose({ name: "_links" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, HrefType> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], HrefType);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  links?: Record<string, HrefType>;

  /**
   * Array of Error Information Blocks.
   *
   * @remarks
   *
   * Might be used if more than one error is to be communicated
   *
   */
  @SpeakeasyMetadata({ elemType: Error400AISAdditionalErrors })
  @Expose({ name: "additionalErrors" })
  @Type(() => Error400AISAdditionalErrors)
  additionalErrors?: Error400AISAdditionalErrors[];

  /**
   * Message codes defined for AIS for HTTP Error code 400 (BAD_REQUEST).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: MessageCode400AISEnum;

  /**
   * Detailed human readable text specific to this instance of the error.
   *
   * @remarks
   * XPath might be used to point to the issue generating the error in addition.
   * Remark for Future: In future, a dedicated field might be introduced for the XPath.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;

  /**
   * Short human readable description of error type.
   *
   * @remarks
   * Could be in local language.
   * To be provided by ASPSPs.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * A URI reference [RFC3986] that identifies the problem type.
   *
   * @remarks
   * Remark For Future: These URI will be provided by NextGen in future.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}
