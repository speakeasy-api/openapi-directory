"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Sensor:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_network_sensor_alerts_profile(self, request: operations.CreateNetworkSensorAlertsProfileRequest) -> operations.CreateNetworkSensorAlertsProfileResponse:
        r"""Creates a sensor alert profile for a network.
        Creates a sensor alert profile for a network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateNetworkSensorAlertsProfileRequest, base_url, '/networks/{networkId}/sensor/alerts/profiles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkSensorAlertsProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateNetworkSensorAlertsProfile200ApplicationJSON])
                res.create_network_sensor_alerts_profile_200_application_json_object = out

        return res

    def delete_network_sensor_alerts_profile(self, request: operations.DeleteNetworkSensorAlertsProfileRequest) -> operations.DeleteNetworkSensorAlertsProfileResponse:
        r"""Deletes a sensor alert profile from a network.
        Deletes a sensor alert profile from a network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNetworkSensorAlertsProfileRequest, base_url, '/networks/{networkId}/sensor/alerts/profiles/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNetworkSensorAlertsProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_device_sensor_relationships(self, request: operations.GetDeviceSensorRelationshipsRequest) -> operations.GetDeviceSensorRelationshipsResponse:
        r"""List the sensor roles for a given sensor or camera device.
        List the sensor roles for a given sensor or camera device.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceSensorRelationshipsRequest, base_url, '/devices/{serial}/sensor/relationships', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceSensorRelationshipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetDeviceSensorRelationships200ApplicationJSON]])
                res.get_device_sensor_relationships_200_application_json_objects = out

        return res

    def get_network_sensor_alerts_current_overview_by_metric(self, request: operations.GetNetworkSensorAlertsCurrentOverviewByMetricRequest) -> operations.GetNetworkSensorAlertsCurrentOverviewByMetricResponse:
        r"""Return an overview of currently alerting sensors by metric
        Return an overview of currently alerting sensors by metric
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSensorAlertsCurrentOverviewByMetricRequest, base_url, '/networks/{networkId}/sensor/alerts/current/overview/byMetric', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSensorAlertsCurrentOverviewByMetricResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSON])
                res.get_network_sensor_alerts_current_overview_by_metric_200_application_json_object = out

        return res

    def get_network_sensor_alerts_overview_by_metric(self, request: operations.GetNetworkSensorAlertsOverviewByMetricRequest) -> operations.GetNetworkSensorAlertsOverviewByMetricResponse:
        r"""Return an overview of alert occurrences over a timespan, by metric
        Return an overview of alert occurrences over a timespan, by metric
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSensorAlertsOverviewByMetricRequest, base_url, '/networks/{networkId}/sensor/alerts/overview/byMetric', request)
        
        query_params = utils.get_query_params(operations.GetNetworkSensorAlertsOverviewByMetricRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSensorAlertsOverviewByMetricResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkSensorAlertsOverviewByMetric200ApplicationJSON]])
                res.get_network_sensor_alerts_overview_by_metric_200_application_json_objects = out

        return res

    def get_network_sensor_alerts_profile(self, request: operations.GetNetworkSensorAlertsProfileRequest) -> operations.GetNetworkSensorAlertsProfileResponse:
        r"""Show details of a sensor alert profile for a network.
        Show details of a sensor alert profile for a network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSensorAlertsProfileRequest, base_url, '/networks/{networkId}/sensor/alerts/profiles/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSensorAlertsProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkSensorAlertsProfile200ApplicationJSON])
                res.get_network_sensor_alerts_profile_200_application_json_object = out

        return res

    def get_network_sensor_alerts_profiles(self, request: operations.GetNetworkSensorAlertsProfilesRequest) -> operations.GetNetworkSensorAlertsProfilesResponse:
        r"""Lists all sensor alert profiles for a network.
        Lists all sensor alert profiles for a network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSensorAlertsProfilesRequest, base_url, '/networks/{networkId}/sensor/alerts/profiles', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSensorAlertsProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkSensorAlertsProfiles200ApplicationJSON]])
                res.get_network_sensor_alerts_profiles_200_application_json_objects = out

        return res

    def get_network_sensor_relationships(self, request: operations.GetNetworkSensorRelationshipsRequest) -> operations.GetNetworkSensorRelationshipsResponse:
        r"""List the sensor roles for devices in a given network
        List the sensor roles for devices in a given network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSensorRelationshipsRequest, base_url, '/networks/{networkId}/sensor/relationships', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSensorRelationshipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkSensorRelationships200ApplicationJSON]])
                res.get_network_sensor_relationships_200_application_json_objects = out

        return res

    def get_organization_sensor_readings_history(self, request: operations.GetOrganizationSensorReadingsHistoryRequest) -> operations.GetOrganizationSensorReadingsHistoryResponse:
        r"""Return all reported readings from sensors in a given timespan, sorted by timestamp
        Return all reported readings from sensors in a given timespan, sorted by timestamp
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSensorReadingsHistoryRequest, base_url, '/organizations/{organizationId}/sensor/readings/history', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationSensorReadingsHistoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSensorReadingsHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationSensorReadingsHistory200ApplicationJSON]])
                res.get_organization_sensor_readings_history_200_application_json_objects = out

        return res

    def get_organization_sensor_readings_latest(self, request: operations.GetOrganizationSensorReadingsLatestRequest) -> operations.GetOrganizationSensorReadingsLatestResponse:
        r"""Return the latest available reading for each metric from each sensor, sorted by sensor serial
        Return the latest available reading for each metric from each sensor, sorted by sensor serial
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSensorReadingsLatestRequest, base_url, '/organizations/{organizationId}/sensor/readings/latest', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationSensorReadingsLatestRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSensorReadingsLatestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationSensorReadingsLatest200ApplicationJSON]])
                res.get_organization_sensor_readings_latest_200_application_json_objects = out

        return res

    def update_device_sensor_relationships(self, request: operations.UpdateDeviceSensorRelationshipsRequest) -> operations.UpdateDeviceSensorRelationshipsResponse:
        r"""Assign one or more sensor roles to a given sensor or camera device.
        Assign one or more sensor roles to a given sensor or camera device.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDeviceSensorRelationshipsRequest, base_url, '/devices/{serial}/sensor/relationships', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDeviceSensorRelationshipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateDeviceSensorRelationships200ApplicationJSON])
                res.update_device_sensor_relationships_200_application_json_object = out

        return res

    def update_network_sensor_alerts_profile(self, request: operations.UpdateNetworkSensorAlertsProfileRequest) -> operations.UpdateNetworkSensorAlertsProfileResponse:
        r"""Updates a sensor alert profile for a network.
        Updates a sensor alert profile for a network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkSensorAlertsProfileRequest, base_url, '/networks/{networkId}/sensor/alerts/profiles/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkSensorAlertsProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateNetworkSensorAlertsProfile200ApplicationJSON])
                res.update_network_sensor_alerts_profile_200_application_json_object = out

        return res

    