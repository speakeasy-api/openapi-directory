"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import experimenttemplatetargetinputfilter as shared_experimenttemplatetargetinputfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateExperimentTemplateTargetInput:
    r"""Specifies a target for an experiment. You must specify at least one Amazon Resource Name (ARN) or at least one resource tag. You cannot specify both."""
    
    resource_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType') }})  
    selection_mode: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectionMode') }})  
    filters: Optional[list[shared_experimenttemplatetargetinputfilter.ExperimentTemplateTargetInputFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters'), 'exclude': lambda f: f is None }})  
    parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})  
    resource_arns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceArns'), 'exclude': lambda f: f is None }})  
    resource_tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceTags'), 'exclude': lambda f: f is None }})  
    