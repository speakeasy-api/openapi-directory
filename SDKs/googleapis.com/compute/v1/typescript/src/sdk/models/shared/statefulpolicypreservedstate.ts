/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { StatefulPolicyPreservedStateDiskDevice } from "./statefulpolicypreservedstatediskdevice";
import { Expose, Transform } from "class-transformer";

/**
 * Configuration of preserved resources.
 */
export class StatefulPolicyPreservedState extends SpeakeasyBase {
  /**
   * Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
   */
  @SpeakeasyMetadata({ elemType: StatefulPolicyPreservedStateDiskDevice })
  @Expose({ name: "disks" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, StatefulPolicyPreservedStateDiskDevice> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          StatefulPolicyPreservedStateDiskDevice
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  disks?: Record<string, StatefulPolicyPreservedStateDiskDevice>;
}
