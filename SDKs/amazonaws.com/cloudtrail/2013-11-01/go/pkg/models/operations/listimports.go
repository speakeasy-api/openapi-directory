// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListImportsQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListImportsXAmzTargetEnum
type ListImportsXAmzTargetEnum string

const (
	ListImportsXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101ListImports ListImportsXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListImports"
)

func (e *ListImportsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListImports":
		*e = ListImportsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListImportsXAmzTargetEnum: %s", s)
	}
}

type ListImportsHeaders struct {
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListImportsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListImportsRequest struct {
	QueryParams ListImportsQueryParams
	Headers     ListImportsHeaders
	Request     shared.ListImportsRequest `request:"mediaType=application/json"`
}

type ListImportsResponse struct {
	ContentType string
	// EventDataStoreARNInvalidException
	EventDataStoreARNInvalidException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// Success
	ListImportsResponse *shared.ListImportsResponse
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
