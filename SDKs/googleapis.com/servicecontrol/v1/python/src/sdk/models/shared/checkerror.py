"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import status as shared_status
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CheckErrorCodeEnum(str, Enum):
    r"""The error code."""
    ERROR_CODE_UNSPECIFIED = 'ERROR_CODE_UNSPECIFIED'
    NOT_FOUND = 'NOT_FOUND'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    RESOURCE_EXHAUSTED = 'RESOURCE_EXHAUSTED'
    BUDGET_EXCEEDED = 'BUDGET_EXCEEDED'
    DENIAL_OF_SERVICE_DETECTED = 'DENIAL_OF_SERVICE_DETECTED'
    LOAD_SHEDDING = 'LOAD_SHEDDING'
    ABUSER_DETECTED = 'ABUSER_DETECTED'
    SERVICE_NOT_ACTIVATED = 'SERVICE_NOT_ACTIVATED'
    VISIBILITY_DENIED = 'VISIBILITY_DENIED'
    BILLING_DISABLED = 'BILLING_DISABLED'
    PROJECT_DELETED = 'PROJECT_DELETED'
    PROJECT_INVALID = 'PROJECT_INVALID'
    CONSUMER_INVALID = 'CONSUMER_INVALID'
    IP_ADDRESS_BLOCKED = 'IP_ADDRESS_BLOCKED'
    REFERER_BLOCKED = 'REFERER_BLOCKED'
    CLIENT_APP_BLOCKED = 'CLIENT_APP_BLOCKED'
    API_TARGET_BLOCKED = 'API_TARGET_BLOCKED'
    API_KEY_INVALID = 'API_KEY_INVALID'
    API_KEY_EXPIRED = 'API_KEY_EXPIRED'
    API_KEY_NOT_FOUND = 'API_KEY_NOT_FOUND'
    SPATULA_HEADER_INVALID = 'SPATULA_HEADER_INVALID'
    LOAS_ROLE_INVALID = 'LOAS_ROLE_INVALID'
    NO_LOAS_PROJECT = 'NO_LOAS_PROJECT'
    LOAS_PROJECT_DISABLED = 'LOAS_PROJECT_DISABLED'
    SECURITY_POLICY_VIOLATED = 'SECURITY_POLICY_VIOLATED'
    INVALID_CREDENTIAL = 'INVALID_CREDENTIAL'
    LOCATION_POLICY_VIOLATED = 'LOCATION_POLICY_VIOLATED'
    NAMESPACE_LOOKUP_UNAVAILABLE = 'NAMESPACE_LOOKUP_UNAVAILABLE'
    SERVICE_STATUS_UNAVAILABLE = 'SERVICE_STATUS_UNAVAILABLE'
    BILLING_STATUS_UNAVAILABLE = 'BILLING_STATUS_UNAVAILABLE'
    QUOTA_CHECK_UNAVAILABLE = 'QUOTA_CHECK_UNAVAILABLE'
    LOAS_PROJECT_LOOKUP_UNAVAILABLE = 'LOAS_PROJECT_LOOKUP_UNAVAILABLE'
    CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE = 'CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE'
    SECURITY_POLICY_BACKEND_UNAVAILABLE = 'SECURITY_POLICY_BACKEND_UNAVAILABLE'
    LOCATION_POLICY_BACKEND_UNAVAILABLE = 'LOCATION_POLICY_BACKEND_UNAVAILABLE'
    INJECTED_ERROR = 'INJECTED_ERROR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckError:
    r"""Defines the errors to be returned in google.api.servicecontrol.v1.CheckResponse.check_errors."""
    
    code: Optional[CheckErrorCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The error code."""  
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Free-form text providing details on the error cause of the error."""  
    status: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject'), 'exclude': lambda f: f is None }})
    r"""Subject to whom this error applies. See the specific code enum for more details on this field. For example: - \\"project:\\" - \\"folder:\\" - \\"organization:\\" """  
    