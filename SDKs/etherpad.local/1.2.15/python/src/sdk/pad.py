"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Pad:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def append_chat_message_using_get(self, request: operations.AppendChatMessageUsingGETRequest) -> operations.AppendChatMessageUsingGETResponse:
        r"""appends a chat message"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/appendChatMessage'
        
        query_params = utils.get_query_params(operations.AppendChatMessageUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppendChatMessageUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendChatMessageUsingGET200ApplicationJSON])
                res.append_chat_message_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendChatMessageUsingGET400ApplicationJSON])
                res.append_chat_message_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendChatMessageUsingGET401ApplicationJSON])
                res.append_chat_message_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendChatMessageUsingGET500ApplicationJSON])
                res.append_chat_message_using_get_500_application_json_object = out

        return res

    def append_chat_message_using_post(self, request: operations.AppendChatMessageUsingPOSTRequest) -> operations.AppendChatMessageUsingPOSTResponse:
        r"""appends a chat message"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/appendChatMessage'
        
        query_params = utils.get_query_params(operations.AppendChatMessageUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AppendChatMessageUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendChatMessageUsingPOST200ApplicationJSON])
                res.append_chat_message_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendChatMessageUsingPOST400ApplicationJSON])
                res.append_chat_message_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendChatMessageUsingPOST401ApplicationJSON])
                res.append_chat_message_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AppendChatMessageUsingPOST500ApplicationJSON])
                res.append_chat_message_using_post_500_application_json_object = out

        return res

    def check_token_using_get(self) -> operations.CheckTokenUsingGETResponse:
        r"""returns ok when the current api token is valid"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/checkToken'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckTokenUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CheckTokenUsingGET200ApplicationJSON])
                res.check_token_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CheckTokenUsingGET400ApplicationJSON])
                res.check_token_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CheckTokenUsingGET401ApplicationJSON])
                res.check_token_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CheckTokenUsingGET500ApplicationJSON])
                res.check_token_using_get_500_application_json_object = out

        return res

    def check_token_using_post(self) -> operations.CheckTokenUsingPOSTResponse:
        r"""returns ok when the current api token is valid"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/checkToken'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckTokenUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CheckTokenUsingPOST200ApplicationJSON])
                res.check_token_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CheckTokenUsingPOST400ApplicationJSON])
                res.check_token_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CheckTokenUsingPOST401ApplicationJSON])
                res.check_token_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CheckTokenUsingPOST500ApplicationJSON])
                res.check_token_using_post_500_application_json_object = out

        return res

    def create_diff_html_using_get(self, request: operations.CreateDiffHTMLUsingGETRequest) -> operations.CreateDiffHTMLUsingGETResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createDiffHTML'
        
        query_params = utils.get_query_params(operations.CreateDiffHTMLUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDiffHTMLUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateDiffHTMLUsingGET200ApplicationJSON])
                res.create_diff_html_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateDiffHTMLUsingGET400ApplicationJSON])
                res.create_diff_html_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateDiffHTMLUsingGET401ApplicationJSON])
                res.create_diff_html_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateDiffHTMLUsingGET500ApplicationJSON])
                res.create_diff_html_using_get_500_application_json_object = out

        return res

    def create_diff_html_using_post(self, request: operations.CreateDiffHTMLUsingPOSTRequest) -> operations.CreateDiffHTMLUsingPOSTResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createDiffHTML'
        
        query_params = utils.get_query_params(operations.CreateDiffHTMLUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDiffHTMLUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateDiffHTMLUsingPOST200ApplicationJSON])
                res.create_diff_html_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateDiffHTMLUsingPOST400ApplicationJSON])
                res.create_diff_html_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateDiffHTMLUsingPOST401ApplicationJSON])
                res.create_diff_html_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateDiffHTMLUsingPOST500ApplicationJSON])
                res.create_diff_html_using_post_500_application_json_object = out

        return res

    def create_pad_using_get(self, request: operations.CreatePadUsingGETRequest) -> operations.CreatePadUsingGETResponse:
        r"""creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createPad'
        
        query_params = utils.get_query_params(operations.CreatePadUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePadUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePadUsingGET200ApplicationJSON])
                res.create_pad_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePadUsingGET400ApplicationJSON])
                res.create_pad_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePadUsingGET401ApplicationJSON])
                res.create_pad_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePadUsingGET500ApplicationJSON])
                res.create_pad_using_get_500_application_json_object = out

        return res

    def create_pad_using_post(self, request: operations.CreatePadUsingPOSTRequest) -> operations.CreatePadUsingPOSTResponse:
        r"""creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createPad'
        
        query_params = utils.get_query_params(operations.CreatePadUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePadUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePadUsingPOST200ApplicationJSON])
                res.create_pad_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePadUsingPOST400ApplicationJSON])
                res.create_pad_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePadUsingPOST401ApplicationJSON])
                res.create_pad_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreatePadUsingPOST500ApplicationJSON])
                res.create_pad_using_post_500_application_json_object = out

        return res

    def delete_pad_using_get(self, request: operations.DeletePadUsingGETRequest) -> operations.DeletePadUsingGETResponse:
        r"""deletes a pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/deletePad'
        
        query_params = utils.get_query_params(operations.DeletePadUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePadUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeletePadUsingGET200ApplicationJSON])
                res.delete_pad_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeletePadUsingGET400ApplicationJSON])
                res.delete_pad_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeletePadUsingGET401ApplicationJSON])
                res.delete_pad_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeletePadUsingGET500ApplicationJSON])
                res.delete_pad_using_get_500_application_json_object = out

        return res

    def delete_pad_using_post(self, request: operations.DeletePadUsingPOSTRequest) -> operations.DeletePadUsingPOSTResponse:
        r"""deletes a pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/deletePad'
        
        query_params = utils.get_query_params(operations.DeletePadUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePadUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeletePadUsingPOST200ApplicationJSON])
                res.delete_pad_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeletePadUsingPOST400ApplicationJSON])
                res.delete_pad_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeletePadUsingPOST401ApplicationJSON])
                res.delete_pad_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeletePadUsingPOST500ApplicationJSON])
                res.delete_pad_using_post_500_application_json_object = out

        return res

    def get_chat_head_using_get(self, request: operations.GETChatHeadUsingGETRequest) -> operations.GETChatHeadUsingGETResponse:
        r"""returns the chatHead (chat-message) of the pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getChatHead'
        
        query_params = utils.get_query_params(operations.GETChatHeadUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETChatHeadUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETChatHeadUsingGET200ApplicationJSON])
                res.get_chat_head_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETChatHeadUsingGET400ApplicationJSON])
                res.get_chat_head_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETChatHeadUsingGET401ApplicationJSON])
                res.get_chat_head_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETChatHeadUsingGET500ApplicationJSON])
                res.get_chat_head_using_get_500_application_json_object = out

        return res

    def get_chat_head_using_post(self, request: operations.GetChatHeadUsingPOSTRequest) -> operations.GetChatHeadUsingPOSTResponse:
        r"""returns the chatHead (chat-message) of the pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getChatHead'
        
        query_params = utils.get_query_params(operations.GetChatHeadUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChatHeadUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetChatHeadUsingPOST200ApplicationJSON])
                res.get_chat_head_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetChatHeadUsingPOST400ApplicationJSON])
                res.get_chat_head_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetChatHeadUsingPOST401ApplicationJSON])
                res.get_chat_head_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetChatHeadUsingPOST500ApplicationJSON])
                res.get_chat_head_using_post_500_application_json_object = out

        return res

    def get_chat_history_using_get(self, request: operations.GETChatHistoryUsingGETRequest) -> operations.GETChatHistoryUsingGETResponse:
        r"""returns the chat history"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getChatHistory'
        
        query_params = utils.get_query_params(operations.GETChatHistoryUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETChatHistoryUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETChatHistoryUsingGET200ApplicationJSON])
                res.get_chat_history_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETChatHistoryUsingGET400ApplicationJSON])
                res.get_chat_history_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETChatHistoryUsingGET401ApplicationJSON])
                res.get_chat_history_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETChatHistoryUsingGET500ApplicationJSON])
                res.get_chat_history_using_get_500_application_json_object = out

        return res

    def get_chat_history_using_post(self, request: operations.GetChatHistoryUsingPOSTRequest) -> operations.GetChatHistoryUsingPOSTResponse:
        r"""returns the chat history"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getChatHistory'
        
        query_params = utils.get_query_params(operations.GetChatHistoryUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChatHistoryUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetChatHistoryUsingPOST200ApplicationJSON])
                res.get_chat_history_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetChatHistoryUsingPOST400ApplicationJSON])
                res.get_chat_history_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetChatHistoryUsingPOST401ApplicationJSON])
                res.get_chat_history_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetChatHistoryUsingPOST500ApplicationJSON])
                res.get_chat_history_using_post_500_application_json_object = out

        return res

    def get_html_using_get(self, request: operations.GETHTMLUsingGETRequest) -> operations.GETHTMLUsingGETResponse:
        r"""returns the text of a pad formatted as HTML"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getHTML'
        
        query_params = utils.get_query_params(operations.GETHTMLUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETHTMLUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETHTMLUsingGET200ApplicationJSON])
                res.get_html_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETHTMLUsingGET400ApplicationJSON])
                res.get_html_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETHTMLUsingGET401ApplicationJSON])
                res.get_html_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETHTMLUsingGET500ApplicationJSON])
                res.get_html_using_get_500_application_json_object = out

        return res

    def get_html_using_post(self, request: operations.GetHTMLUsingPOSTRequest) -> operations.GetHTMLUsingPOSTResponse:
        r"""returns the text of a pad formatted as HTML"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getHTML'
        
        query_params = utils.get_query_params(operations.GetHTMLUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHTMLUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetHTMLUsingPOST200ApplicationJSON])
                res.get_html_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetHTMLUsingPOST400ApplicationJSON])
                res.get_html_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetHTMLUsingPOST401ApplicationJSON])
                res.get_html_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetHTMLUsingPOST500ApplicationJSON])
                res.get_html_using_post_500_application_json_object = out

        return res

    def get_last_edited_using_get(self, request: operations.GETLastEditedUsingGETRequest) -> operations.GETLastEditedUsingGETResponse:
        r"""returns the timestamp of the last revision of the pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getLastEdited'
        
        query_params = utils.get_query_params(operations.GETLastEditedUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETLastEditedUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETLastEditedUsingGET200ApplicationJSON])
                res.get_last_edited_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETLastEditedUsingGET400ApplicationJSON])
                res.get_last_edited_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETLastEditedUsingGET401ApplicationJSON])
                res.get_last_edited_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETLastEditedUsingGET500ApplicationJSON])
                res.get_last_edited_using_get_500_application_json_object = out

        return res

    def get_last_edited_using_post(self, request: operations.GetLastEditedUsingPOSTRequest) -> operations.GetLastEditedUsingPOSTResponse:
        r"""returns the timestamp of the last revision of the pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getLastEdited'
        
        query_params = utils.get_query_params(operations.GetLastEditedUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLastEditedUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetLastEditedUsingPOST200ApplicationJSON])
                res.get_last_edited_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetLastEditedUsingPOST400ApplicationJSON])
                res.get_last_edited_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetLastEditedUsingPOST401ApplicationJSON])
                res.get_last_edited_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetLastEditedUsingPOST500ApplicationJSON])
                res.get_last_edited_using_post_500_application_json_object = out

        return res

    def get_public_status_using_get(self, request: operations.GETPublicStatusUsingGETRequest) -> operations.GETPublicStatusUsingGETResponse:
        r"""return true of false"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getPublicStatus'
        
        query_params = utils.get_query_params(operations.GETPublicStatusUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETPublicStatusUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETPublicStatusUsingGET200ApplicationJSON])
                res.get_public_status_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETPublicStatusUsingGET400ApplicationJSON])
                res.get_public_status_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETPublicStatusUsingGET401ApplicationJSON])
                res.get_public_status_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETPublicStatusUsingGET500ApplicationJSON])
                res.get_public_status_using_get_500_application_json_object = out

        return res

    def get_public_status_using_post(self, request: operations.GetPublicStatusUsingPOSTRequest) -> operations.GetPublicStatusUsingPOSTResponse:
        r"""return true of false"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getPublicStatus'
        
        query_params = utils.get_query_params(operations.GetPublicStatusUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPublicStatusUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPublicStatusUsingPOST200ApplicationJSON])
                res.get_public_status_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPublicStatusUsingPOST400ApplicationJSON])
                res.get_public_status_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPublicStatusUsingPOST401ApplicationJSON])
                res.get_public_status_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPublicStatusUsingPOST500ApplicationJSON])
                res.get_public_status_using_post_500_application_json_object = out

        return res

    def get_read_only_id_using_get(self, request: operations.GETReadOnlyIDUsingGETRequest) -> operations.GETReadOnlyIDUsingGETResponse:
        r"""returns the read only link of a pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getReadOnlyID'
        
        query_params = utils.get_query_params(operations.GETReadOnlyIDUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETReadOnlyIDUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETReadOnlyIDUsingGET200ApplicationJSON])
                res.get_read_only_id_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETReadOnlyIDUsingGET400ApplicationJSON])
                res.get_read_only_id_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETReadOnlyIDUsingGET401ApplicationJSON])
                res.get_read_only_id_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETReadOnlyIDUsingGET500ApplicationJSON])
                res.get_read_only_id_using_get_500_application_json_object = out

        return res

    def get_read_only_id_using_post(self, request: operations.GetReadOnlyIDUsingPOSTRequest) -> operations.GetReadOnlyIDUsingPOSTResponse:
        r"""returns the read only link of a pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getReadOnlyID'
        
        query_params = utils.get_query_params(operations.GetReadOnlyIDUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetReadOnlyIDUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetReadOnlyIDUsingPOST200ApplicationJSON])
                res.get_read_only_id_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetReadOnlyIDUsingPOST400ApplicationJSON])
                res.get_read_only_id_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetReadOnlyIDUsingPOST401ApplicationJSON])
                res.get_read_only_id_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetReadOnlyIDUsingPOST500ApplicationJSON])
                res.get_read_only_id_using_post_500_application_json_object = out

        return res

    def get_revisions_count_using_get(self, request: operations.GETRevisionsCountUsingGETRequest) -> operations.GETRevisionsCountUsingGETResponse:
        r"""returns the number of revisions of this pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getRevisionsCount'
        
        query_params = utils.get_query_params(operations.GETRevisionsCountUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRevisionsCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETRevisionsCountUsingGET200ApplicationJSON])
                res.get_revisions_count_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETRevisionsCountUsingGET400ApplicationJSON])
                res.get_revisions_count_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETRevisionsCountUsingGET401ApplicationJSON])
                res.get_revisions_count_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETRevisionsCountUsingGET500ApplicationJSON])
                res.get_revisions_count_using_get_500_application_json_object = out

        return res

    def get_revisions_count_using_post(self, request: operations.GetRevisionsCountUsingPOSTRequest) -> operations.GetRevisionsCountUsingPOSTResponse:
        r"""returns the number of revisions of this pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getRevisionsCount'
        
        query_params = utils.get_query_params(operations.GetRevisionsCountUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRevisionsCountUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRevisionsCountUsingPOST200ApplicationJSON])
                res.get_revisions_count_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRevisionsCountUsingPOST400ApplicationJSON])
                res.get_revisions_count_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRevisionsCountUsingPOST401ApplicationJSON])
                res.get_revisions_count_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRevisionsCountUsingPOST500ApplicationJSON])
                res.get_revisions_count_using_post_500_application_json_object = out

        return res

    def get_text_using_get(self, request: operations.GETTextUsingGETRequest) -> operations.GETTextUsingGETResponse:
        r"""returns the text of a pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getText'
        
        query_params = utils.get_query_params(operations.GETTextUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETTextUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETTextUsingGET200ApplicationJSON])
                res.get_text_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETTextUsingGET400ApplicationJSON])
                res.get_text_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETTextUsingGET401ApplicationJSON])
                res.get_text_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETTextUsingGET500ApplicationJSON])
                res.get_text_using_get_500_application_json_object = out

        return res

    def get_text_using_post(self, request: operations.GetTextUsingPOSTRequest) -> operations.GetTextUsingPOSTResponse:
        r"""returns the text of a pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getText'
        
        query_params = utils.get_query_params(operations.GetTextUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTextUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTextUsingPOST200ApplicationJSON])
                res.get_text_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTextUsingPOST400ApplicationJSON])
                res.get_text_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTextUsingPOST401ApplicationJSON])
                res.get_text_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetTextUsingPOST500ApplicationJSON])
                res.get_text_using_post_500_application_json_object = out

        return res

    def list_all_pads_using_get(self) -> operations.ListAllPadsUsingGETResponse:
        r"""list all the pads"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listAllPads'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAllPadsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllPadsUsingGET200ApplicationJSON])
                res.list_all_pads_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllPadsUsingGET400ApplicationJSON])
                res.list_all_pads_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllPadsUsingGET401ApplicationJSON])
                res.list_all_pads_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllPadsUsingGET500ApplicationJSON])
                res.list_all_pads_using_get_500_application_json_object = out

        return res

    def list_all_pads_using_post(self) -> operations.ListAllPadsUsingPOSTResponse:
        r"""list all the pads"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listAllPads'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAllPadsUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllPadsUsingPOST200ApplicationJSON])
                res.list_all_pads_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllPadsUsingPOST400ApplicationJSON])
                res.list_all_pads_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllPadsUsingPOST401ApplicationJSON])
                res.list_all_pads_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAllPadsUsingPOST500ApplicationJSON])
                res.list_all_pads_using_post_500_application_json_object = out

        return res

    def list_authors_of_pad_using_get(self, request: operations.ListAuthorsOfPadUsingGETRequest) -> operations.ListAuthorsOfPadUsingGETResponse:
        r"""returns an array of authors who contributed to this pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listAuthorsOfPad'
        
        query_params = utils.get_query_params(operations.ListAuthorsOfPadUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAuthorsOfPadUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAuthorsOfPadUsingGET200ApplicationJSON])
                res.list_authors_of_pad_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAuthorsOfPadUsingGET400ApplicationJSON])
                res.list_authors_of_pad_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAuthorsOfPadUsingGET401ApplicationJSON])
                res.list_authors_of_pad_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAuthorsOfPadUsingGET500ApplicationJSON])
                res.list_authors_of_pad_using_get_500_application_json_object = out

        return res

    def list_authors_of_pad_using_post(self, request: operations.ListAuthorsOfPadUsingPOSTRequest) -> operations.ListAuthorsOfPadUsingPOSTResponse:
        r"""returns an array of authors who contributed to this pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listAuthorsOfPad'
        
        query_params = utils.get_query_params(operations.ListAuthorsOfPadUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAuthorsOfPadUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAuthorsOfPadUsingPOST200ApplicationJSON])
                res.list_authors_of_pad_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAuthorsOfPadUsingPOST400ApplicationJSON])
                res.list_authors_of_pad_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAuthorsOfPadUsingPOST401ApplicationJSON])
                res.list_authors_of_pad_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAuthorsOfPadUsingPOST500ApplicationJSON])
                res.list_authors_of_pad_using_post_500_application_json_object = out

        return res

    def pad_users_count_using_get(self, request: operations.PadUsersCountUsingGETRequest) -> operations.PadUsersCountUsingGETResponse:
        r"""returns the number of user that are currently editing this pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/padUsersCount'
        
        query_params = utils.get_query_params(operations.PadUsersCountUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PadUsersCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersCountUsingGET200ApplicationJSON])
                res.pad_users_count_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersCountUsingGET400ApplicationJSON])
                res.pad_users_count_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersCountUsingGET401ApplicationJSON])
                res.pad_users_count_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersCountUsingGET500ApplicationJSON])
                res.pad_users_count_using_get_500_application_json_object = out

        return res

    def pad_users_count_using_post(self, request: operations.PadUsersCountUsingPOSTRequest) -> operations.PadUsersCountUsingPOSTResponse:
        r"""returns the number of user that are currently editing this pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/padUsersCount'
        
        query_params = utils.get_query_params(operations.PadUsersCountUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PadUsersCountUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersCountUsingPOST200ApplicationJSON])
                res.pad_users_count_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersCountUsingPOST400ApplicationJSON])
                res.pad_users_count_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersCountUsingPOST401ApplicationJSON])
                res.pad_users_count_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersCountUsingPOST500ApplicationJSON])
                res.pad_users_count_using_post_500_application_json_object = out

        return res

    def pad_users_using_get(self, request: operations.PadUsersUsingGETRequest) -> operations.PadUsersUsingGETResponse:
        r"""returns the list of users that are currently editing this pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/padUsers'
        
        query_params = utils.get_query_params(operations.PadUsersUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PadUsersUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersUsingGET200ApplicationJSON])
                res.pad_users_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersUsingGET400ApplicationJSON])
                res.pad_users_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersUsingGET401ApplicationJSON])
                res.pad_users_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersUsingGET500ApplicationJSON])
                res.pad_users_using_get_500_application_json_object = out

        return res

    def pad_users_using_post(self, request: operations.PadUsersUsingPOSTRequest) -> operations.PadUsersUsingPOSTResponse:
        r"""returns the list of users that are currently editing this pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/padUsers'
        
        query_params = utils.get_query_params(operations.PadUsersUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PadUsersUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersUsingPOST200ApplicationJSON])
                res.pad_users_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersUsingPOST400ApplicationJSON])
                res.pad_users_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersUsingPOST401ApplicationJSON])
                res.pad_users_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PadUsersUsingPOST500ApplicationJSON])
                res.pad_users_using_post_500_application_json_object = out

        return res

    def send_clients_message_using_get(self, request: operations.SendClientsMessageUsingGETRequest) -> operations.SendClientsMessageUsingGETResponse:
        r"""sends a custom message of type msg to the pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sendClientsMessage'
        
        query_params = utils.get_query_params(operations.SendClientsMessageUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendClientsMessageUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendClientsMessageUsingGET200ApplicationJSON])
                res.send_clients_message_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendClientsMessageUsingGET400ApplicationJSON])
                res.send_clients_message_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendClientsMessageUsingGET401ApplicationJSON])
                res.send_clients_message_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendClientsMessageUsingGET500ApplicationJSON])
                res.send_clients_message_using_get_500_application_json_object = out

        return res

    def send_clients_message_using_post(self, request: operations.SendClientsMessageUsingPOSTRequest) -> operations.SendClientsMessageUsingPOSTResponse:
        r"""sends a custom message of type msg to the pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sendClientsMessage'
        
        query_params = utils.get_query_params(operations.SendClientsMessageUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendClientsMessageUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendClientsMessageUsingPOST200ApplicationJSON])
                res.send_clients_message_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendClientsMessageUsingPOST400ApplicationJSON])
                res.send_clients_message_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendClientsMessageUsingPOST401ApplicationJSON])
                res.send_clients_message_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SendClientsMessageUsingPOST500ApplicationJSON])
                res.send_clients_message_using_post_500_application_json_object = out

        return res

    def set_html_using_get(self, request: operations.SetHTMLUsingGETRequest) -> operations.SetHTMLUsingGETResponse:
        r"""sets the text of a pad with HTML"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setHTML'
        
        query_params = utils.get_query_params(operations.SetHTMLUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetHTMLUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetHTMLUsingGET200ApplicationJSON])
                res.set_html_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetHTMLUsingGET400ApplicationJSON])
                res.set_html_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetHTMLUsingGET401ApplicationJSON])
                res.set_html_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetHTMLUsingGET500ApplicationJSON])
                res.set_html_using_get_500_application_json_object = out

        return res

    def set_html_using_post(self, request: operations.SetHTMLUsingPOSTRequest) -> operations.SetHTMLUsingPOSTResponse:
        r"""sets the text of a pad with HTML"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setHTML'
        
        query_params = utils.get_query_params(operations.SetHTMLUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetHTMLUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetHTMLUsingPOST200ApplicationJSON])
                res.set_html_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetHTMLUsingPOST400ApplicationJSON])
                res.set_html_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetHTMLUsingPOST401ApplicationJSON])
                res.set_html_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetHTMLUsingPOST500ApplicationJSON])
                res.set_html_using_post_500_application_json_object = out

        return res

    def set_public_status_using_get(self, request: operations.SetPublicStatusUsingGETRequest) -> operations.SetPublicStatusUsingGETResponse:
        r"""sets a boolean for the public status of a pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setPublicStatus'
        
        query_params = utils.get_query_params(operations.SetPublicStatusUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetPublicStatusUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetPublicStatusUsingGET200ApplicationJSON])
                res.set_public_status_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetPublicStatusUsingGET400ApplicationJSON])
                res.set_public_status_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetPublicStatusUsingGET401ApplicationJSON])
                res.set_public_status_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetPublicStatusUsingGET500ApplicationJSON])
                res.set_public_status_using_get_500_application_json_object = out

        return res

    def set_public_status_using_post(self, request: operations.SetPublicStatusUsingPOSTRequest) -> operations.SetPublicStatusUsingPOSTResponse:
        r"""sets a boolean for the public status of a pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setPublicStatus'
        
        query_params = utils.get_query_params(operations.SetPublicStatusUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetPublicStatusUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetPublicStatusUsingPOST200ApplicationJSON])
                res.set_public_status_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetPublicStatusUsingPOST400ApplicationJSON])
                res.set_public_status_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetPublicStatusUsingPOST401ApplicationJSON])
                res.set_public_status_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetPublicStatusUsingPOST500ApplicationJSON])
                res.set_public_status_using_post_500_application_json_object = out

        return res

    def set_text_using_get(self, request: operations.SetTextUsingGETRequest) -> operations.SetTextUsingGETResponse:
        r"""sets the text of a pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setText'
        
        query_params = utils.get_query_params(operations.SetTextUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetTextUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetTextUsingGET200ApplicationJSON])
                res.set_text_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetTextUsingGET400ApplicationJSON])
                res.set_text_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetTextUsingGET401ApplicationJSON])
                res.set_text_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetTextUsingGET500ApplicationJSON])
                res.set_text_using_get_500_application_json_object = out

        return res

    def set_text_using_post(self, request: operations.SetTextUsingPOSTRequest) -> operations.SetTextUsingPOSTResponse:
        r"""sets the text of a pad"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setText'
        
        query_params = utils.get_query_params(operations.SetTextUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetTextUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetTextUsingPOST200ApplicationJSON])
                res.set_text_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetTextUsingPOST400ApplicationJSON])
                res.set_text_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetTextUsingPOST401ApplicationJSON])
                res.set_text_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SetTextUsingPOST500ApplicationJSON])
                res.set_text_using_post_500_application_json_object = out

        return res

    