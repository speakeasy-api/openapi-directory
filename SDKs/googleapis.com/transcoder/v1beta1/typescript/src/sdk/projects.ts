/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a job template in the specified region.
   */
  transcoderProjectsLocationsJobTemplatesCreate(
    req: operations.TranscoderProjectsLocationsJobTemplatesCreateRequest,
    security: operations.TranscoderProjectsLocationsJobTemplatesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TranscoderProjectsLocationsJobTemplatesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TranscoderProjectsLocationsJobTemplatesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/jobTemplates",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jobTemplate",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TranscoderProjectsLocationsJobTemplatesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TranscoderProjectsLocationsJobTemplatesCreateResponse =
        new operations.TranscoderProjectsLocationsJobTemplatesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jobTemplate = utils.objectToClass(
              httpRes?.data,
              shared.JobTemplate
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a job template.
   */
  transcoderProjectsLocationsJobTemplatesDelete(
    req: operations.TranscoderProjectsLocationsJobTemplatesDeleteRequest,
    security: operations.TranscoderProjectsLocationsJobTemplatesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TranscoderProjectsLocationsJobTemplatesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TranscoderProjectsLocationsJobTemplatesDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TranscoderProjectsLocationsJobTemplatesDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TranscoderProjectsLocationsJobTemplatesDeleteResponse =
        new operations.TranscoderProjectsLocationsJobTemplatesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the job template data.
   */
  transcoderProjectsLocationsJobTemplatesGet(
    req: operations.TranscoderProjectsLocationsJobTemplatesGetRequest,
    security: operations.TranscoderProjectsLocationsJobTemplatesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TranscoderProjectsLocationsJobTemplatesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TranscoderProjectsLocationsJobTemplatesGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TranscoderProjectsLocationsJobTemplatesGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TranscoderProjectsLocationsJobTemplatesGetResponse =
        new operations.TranscoderProjectsLocationsJobTemplatesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jobTemplate = utils.objectToClass(
              httpRes?.data,
              shared.JobTemplate
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists job templates in the specified region.
   */
  transcoderProjectsLocationsJobTemplatesList(
    req: operations.TranscoderProjectsLocationsJobTemplatesListRequest,
    security: operations.TranscoderProjectsLocationsJobTemplatesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TranscoderProjectsLocationsJobTemplatesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TranscoderProjectsLocationsJobTemplatesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/jobTemplates",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TranscoderProjectsLocationsJobTemplatesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TranscoderProjectsLocationsJobTemplatesListResponse =
        new operations.TranscoderProjectsLocationsJobTemplatesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJobTemplatesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListJobTemplatesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a job in the specified region.
   */
  transcoderProjectsLocationsJobsCreate(
    req: operations.TranscoderProjectsLocationsJobsCreateRequest,
    security: operations.TranscoderProjectsLocationsJobsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TranscoderProjectsLocationsJobsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TranscoderProjectsLocationsJobsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/jobs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jobInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TranscoderProjectsLocationsJobsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TranscoderProjectsLocationsJobsCreateResponse =
        new operations.TranscoderProjectsLocationsJobsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists jobs in the specified region.
   */
  transcoderProjectsLocationsJobsList(
    req: operations.TranscoderProjectsLocationsJobsListRequest,
    security: operations.TranscoderProjectsLocationsJobsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TranscoderProjectsLocationsJobsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TranscoderProjectsLocationsJobsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/jobs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TranscoderProjectsLocationsJobsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TranscoderProjectsLocationsJobsListResponse =
        new operations.TranscoderProjectsLocationsJobsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
