"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ResourceRecordSets:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dns_resource_record_sets_create(self, request: operations.DNSResourceRecordSetsCreateRequest, security: operations.DNSResourceRecordSetsCreateSecurity) -> operations.DNSResourceRecordSetsCreateResponse:
        r"""Creates a new ResourceRecordSet."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResourceRecordSetsCreateRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "resource_record_set", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSResourceRecordSetsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResourceRecordSetsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceRecordSet])
                res.resource_record_set = out

        return res

    def dns_resource_record_sets_delete(self, request: operations.DNSResourceRecordSetsDeleteRequest, security: operations.DNSResourceRecordSetsDeleteSecurity) -> operations.DNSResourceRecordSetsDeleteResponse:
        r"""Deletes a previously created ResourceRecordSet."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResourceRecordSetsDeleteRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}', request)
        
        query_params = utils.get_query_params(operations.DNSResourceRecordSetsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResourceRecordSetsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dns_resource_record_sets_get(self, request: operations.DNSResourceRecordSetsGetRequest, security: operations.DNSResourceRecordSetsGetSecurity) -> operations.DNSResourceRecordSetsGetResponse:
        r"""Fetches the representation of an existing ResourceRecordSet."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResourceRecordSetsGetRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}', request)
        
        query_params = utils.get_query_params(operations.DNSResourceRecordSetsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResourceRecordSetsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceRecordSet])
                res.resource_record_set = out

        return res

    def dns_resource_record_sets_list(self, request: operations.DNSResourceRecordSetsListRequest, security: operations.DNSResourceRecordSetsListSecurity) -> operations.DNSResourceRecordSetsListResponse:
        r"""Enumerates ResourceRecordSets that you have created but not yet deleted."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResourceRecordSetsListRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets', request)
        
        query_params = utils.get_query_params(operations.DNSResourceRecordSetsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResourceRecordSetsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceRecordSetsListResponse])
                res.resource_record_sets_list_response = out

        return res

    def dns_resource_record_sets_patch(self, request: operations.DNSResourceRecordSetsPatchRequest, security: operations.DNSResourceRecordSetsPatchSecurity) -> operations.DNSResourceRecordSetsPatchResponse:
        r"""Applies a partial update to an existing ResourceRecordSet."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResourceRecordSetsPatchRequest, base_url, '/dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "resource_record_set", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSResourceRecordSetsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResourceRecordSetsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceRecordSet])
                res.resource_record_set = out

        return res

    