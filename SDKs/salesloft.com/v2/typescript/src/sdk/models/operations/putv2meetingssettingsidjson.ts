/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class PutV2MeetingsSettingsIdJsonRequestBody extends SpeakeasyBase {
  /**
   * Allow other team members to schedule on you behalf.
   */
  @SpeakeasyMetadata({ data: "form, name=allow_booking_on_behalf" })
  allowBookingOnBehalf?: boolean;

  /**
   * Allow team members to insert available time outside your working hours.
   */
  @SpeakeasyMetadata({ data: "form, name=allow_booking_overtime" })
  allowBookingOvertime?: boolean;

  /**
   * Allow team members to double book events on your calendar.
   */
  @SpeakeasyMetadata({ data: "form, name=allow_event_overlap" })
  allowEventOverlap?: boolean;

  /**
   * The number of days out the user allows a prospect to schedule a meeting
   */
  @SpeakeasyMetadata({ data: "form, name=availability_limit" })
  availabilityLimit?: number;

  /**
   * If Availability Limits have been turned on
   */
  @SpeakeasyMetadata({ data: "form, name=availability_limit_enabled" })
  availabilityLimitEnabled?: boolean;

  /**
   * Default buffer duration in minutes set by a user
   */
  @SpeakeasyMetadata({ data: "form, name=buffer_time_duration" })
  bufferTimeDuration?: number;

  /**
   * Calendar type
   */
  @SpeakeasyMetadata({ data: "form, name=calendar_type" })
  calendarType?: string;

  /**
   * Default meeting length in minutes set by the user
   */
  @SpeakeasyMetadata({ data: "form, name=default_meeting_length" })
  defaultMeetingLength?: number;

  /**
   * Default description of the meeting
   */
  @SpeakeasyMetadata({ data: "form, name=description" })
  description?: string;

  /**
   * Determines if a user enabled Calendar Sync feature
   */
  @SpeakeasyMetadata({ data: "form, name=enable_calendar_sync" })
  enableCalendarSync?: boolean;

  /**
   * Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)
   */
  @SpeakeasyMetadata({ data: "form, name=enable_dynamic_location" })
  enableDynamicLocation?: boolean;

  /**
   * Default location of the meeting
   */
  @SpeakeasyMetadata({ data: "form, name=location" })
  location?: string;

  /**
   * Determines if the user lost calendar connection
   */
  @SpeakeasyMetadata({ data: "form, name=primary_calendar_connection_failed" })
  primaryCalendarConnectionFailed?: boolean;

  /**
   * ID of the primary calendar
   */
  @SpeakeasyMetadata({ data: "form, name=primary_calendar_id" })
  primaryCalendarId?: string;

  /**
   * Display name of the primary calendar
   */
  @SpeakeasyMetadata({ data: "form, name=primary_calendar_name" })
  primaryCalendarName?: string;

  /**
   * Determines if meetings are scheduled with a 15 minute buffer between them
   */
  @SpeakeasyMetadata({ data: "form, name=schedule_buffer_enabled" })
  scheduleBufferEnabled?: boolean;

  /**
   * The number of hours in advance a user requires someone to a book a meeting with them
   */
  @SpeakeasyMetadata({ data: "form, name=schedule_delay" })
  scheduleDelay?: number;

  /**
   * Allow team members to see the details of events on your calendar.
   */
  @SpeakeasyMetadata({ data: "form, name=share_event_detail" })
  shareEventDetail?: boolean;

  /**
   * Time zone for current calendar
   */
  @SpeakeasyMetadata({ data: "form, name=time_zone" })
  timeZone?: string;

  /**
   * Times available set by a user that can be used to book meetings
   */
  @SpeakeasyMetadata({ data: "form, name=times_available;json=true" })
  timesAvailable?: Record<string, any>;

  /**
   * Default title of the meeting
   */
  @SpeakeasyMetadata({ data: "form, name=title" })
  title?: string;
}

export class PutV2MeetingsSettingsIdJsonRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: PutV2MeetingsSettingsIdJsonRequestBody;

  /**
   * MeetingSetting ID
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;
}

export class PutV2MeetingsSettingsIdJsonResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
