"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import policycontrollermonitoringconfig as shared_policycontrollermonitoringconfig
from ..shared import policycontrollerpolicycontentspec as shared_policycontrollerpolicycontentspec
from ..shared import policycontrollerpolicycontrollerdeploymentconfig as shared_policycontrollerpolicycontrollerdeploymentconfig
from ..shared import policycontrollertemplatelibraryconfig as shared_policycontrollertemplatelibraryconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PolicyControllerHubConfigInstallSpecEnum(str, Enum):
    r"""The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state."""
    INSTALL_SPEC_UNSPECIFIED = 'INSTALL_SPEC_UNSPECIFIED'
    INSTALL_SPEC_NOT_INSTALLED = 'INSTALL_SPEC_NOT_INSTALLED'
    INSTALL_SPEC_ENABLED = 'INSTALL_SPEC_ENABLED'
    INSTALL_SPEC_SUSPENDED = 'INSTALL_SPEC_SUSPENDED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PolicyControllerHubConfig:
    r"""Configuration for Policy Controller"""
    
    audit_interval_seconds: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auditIntervalSeconds'), 'exclude': lambda f: f is None }})
    r"""Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether."""  
    constraint_violation_limit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constraintViolationLimit'), 'exclude': lambda f: f is None }})
    r"""The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used."""  
    deployment_configs: Optional[dict[str, shared_policycontrollerpolicycontrollerdeploymentconfig.PolicyControllerPolicyControllerDeploymentConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentConfigs'), 'exclude': lambda f: f is None }})
    r"""Map of deployment configs to deployments (“admission”, “audit”, “mutation”)."""  
    exemptable_namespaces: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptableNamespaces'), 'exclude': lambda f: f is None }})
    r"""The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster."""  
    install_spec: Optional[PolicyControllerHubConfigInstallSpecEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installSpec'), 'exclude': lambda f: f is None }})
    r"""The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state."""  
    log_denies_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logDeniesEnabled'), 'exclude': lambda f: f is None }})
    r"""Logs all denies and dry run failures."""  
    monitoring: Optional[shared_policycontrollermonitoringconfig.PolicyControllerMonitoringConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monitoring'), 'exclude': lambda f: f is None }})
    r"""MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: [\\"cloudmonitoring\\", \\"prometheus\\"]"""  
    mutation_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mutationEnabled'), 'exclude': lambda f: f is None }})
    r"""Enables the ability to mutate resources using Policy Controller."""  
    policy_content: Optional[shared_policycontrollerpolicycontentspec.PolicyControllerPolicyContentSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyContent'), 'exclude': lambda f: f is None }})
    r"""PolicyContentSpec defines the user's desired content configuration on the cluster."""  
    referential_rules_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referentialRulesEnabled'), 'exclude': lambda f: f is None }})
    r"""Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated."""  
    template_library_config: Optional[shared_policycontrollertemplatelibraryconfig.PolicyControllerTemplateLibraryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('templateLibraryConfig'), 'exclude': lambda f: f is None }})
    r"""The config specifying which default library templates to install."""  
    