// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeTypeActionEnum
type GETDescribeTypeActionEnum string

const (
	GETDescribeTypeActionEnumDescribeType GETDescribeTypeActionEnum = "DescribeType"
)

func (e *GETDescribeTypeActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeType":
		*e = GETDescribeTypeActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeTypeActionEnum: %s", s)
	}
}

// GETDescribeTypeTypeEnum - <p>The kind of extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
type GETDescribeTypeTypeEnum string

const (
	GETDescribeTypeTypeEnumResource GETDescribeTypeTypeEnum = "RESOURCE"
	GETDescribeTypeTypeEnumModule   GETDescribeTypeTypeEnum = "MODULE"
	GETDescribeTypeTypeEnumHook     GETDescribeTypeTypeEnum = "HOOK"
)

func (e *GETDescribeTypeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RESOURCE":
		fallthrough
	case "MODULE":
		fallthrough
	case "HOOK":
		*e = GETDescribeTypeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeTypeTypeEnum: %s", s)
	}
}

// GETDescribeTypeVersionEnum
type GETDescribeTypeVersionEnum string

const (
	GETDescribeTypeVersionEnumTwoThousandAndTen0515 GETDescribeTypeVersionEnum = "2010-05-15"
)

func (e *GETDescribeTypeVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-15":
		*e = GETDescribeTypeVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeTypeVersionEnum: %s", s)
	}
}

type GETDescribeTypeRequest struct {
	Action GETDescribeTypeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The Amazon Resource Name (ARN) of the extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	Arn *string `queryParam:"style=form,explode=true,name=Arn"`
	// The version number of a public third-party extension.
	PublicVersionNumber *string `queryParam:"style=form,explode=true,name=PublicVersionNumber"`
	// <p>The publisher ID of the extension publisher.</p> <p>Extensions provided by Amazon Web Services are not assigned a publisher ID.</p>
	PublisherID *string `queryParam:"style=form,explode=true,name=PublisherId"`
	// <p>The kind of extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	Type *GETDescribeTypeTypeEnum `queryParam:"style=form,explode=true,name=Type"`
	// <p>The name of the extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	TypeName *string                    `queryParam:"style=form,explode=true,name=TypeName"`
	Version  GETDescribeTypeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// <p>The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.</p> <p>If you specify a <code>VersionId</code>, <code>DescribeType</code> returns information about that specific extension version. Otherwise, it returns information about the default extension version.</p>
	VersionID         *string `queryParam:"style=form,explode=true,name=VersionId"`
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeTypeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
