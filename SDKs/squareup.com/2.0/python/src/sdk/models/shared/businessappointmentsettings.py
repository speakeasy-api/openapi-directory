"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import money as shared_money
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BusinessAppointmentSettings:
    r"""The service appointment settings, including where and how the service is provided."""
    
    alignment_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alignment_time'), 'exclude': lambda f: f is None }})
    r"""The time unit of the service duration for bookings."""  
    any_team_member_booking_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('any_team_member_booking_enabled'), 'exclude': lambda f: f is None }})
    r"""Indicates whether a customer can choose from all available time slots and have a staff member assigned
    automatically (`true`) or not (`false`).
    """  
    cancellation_fee_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellation_fee_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    cancellation_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellation_policy'), 'exclude': lambda f: f is None }})
    r"""The cancellation policy adopted by the seller."""  
    cancellation_policy_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellation_policy_text'), 'exclude': lambda f: f is None }})
    r"""The free-form text of the seller's cancellation policy."""  
    cancellation_window_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellation_window_seconds'), 'exclude': lambda f: f is None }})
    r"""The cut-off time in seconds for allowing clients to cancel or reschedule an appointment."""  
    location_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_types'), 'exclude': lambda f: f is None }})
    r"""Types of the location allowed for bookings."""  
    max_appointments_per_day_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_appointments_per_day_limit'), 'exclude': lambda f: f is None }})
    r"""The maximum number of daily appointments per team member or per location."""  
    max_appointments_per_day_limit_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_appointments_per_day_limit_type'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the daily appointment limit applies to team members or to
    business locations.
    """  
    max_booking_lead_time_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_booking_lead_time_seconds'), 'exclude': lambda f: f is None }})
    r"""The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time."""  
    min_booking_lead_time_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_booking_lead_time_seconds'), 'exclude': lambda f: f is None }})
    r"""The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time."""  
    multiple_service_booking_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiple_service_booking_enabled'), 'exclude': lambda f: f is None }})
    r"""Indicates whether a customer can book multiple services in a single online booking."""  
    skip_booking_flow_staff_selection: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_booking_flow_staff_selection'), 'exclude': lambda f: f is None }})
    r"""Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`)."""  
    