// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type TaxDeclarationInput struct {
	// If the employee has approved withholding variation. e.g (0 - 100)
	ApprovedWithholdingVariationPercentage *float64 `json:"ApprovedWithholdingVariationPercentage,omitempty"`
	// If the employee is Australian resident for tax purposes. e.g true or false
	AustralianResidentForTaxPurposes *bool `json:"AustralianResidentForTaxPurposes,omitempty"`
	// If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false
	EligibleToReceiveLeaveLoading *bool `json:"EligibleToReceiveLeaveLoading,omitempty"`
	// Address line 1 for employee home address
	EmployeeID      *string              `json:"EmployeeID,omitempty"`
	EmploymentBasis *EmploymentBasisEnum `json:"EmploymentBasis,omitempty"`
	// If employee has HECS or HELP debt. e.g true or false
	HasHELPDebt *bool `json:"HasHELPDebt,omitempty"`
	// If employee has financial supplement debt. e.g true or false
	HasSFSSDebt *bool `json:"HasSFSSDebt,omitempty"`
	// If the employee is eligible for student startup loan rules
	HasStudentStartupLoan *bool `json:"HasStudentStartupLoan,omitempty"`
	// If employee has trade support loan. e.g true or false
	HasTradeSupportLoanDebt *bool                 `json:"HasTradeSupportLoanDebt,omitempty"`
	ResidencyStatus         *ResidencyStatusEnum  `json:"ResidencyStatus,omitempty"`
	TFNExemptionType        *TFNExemptionTypeEnum `json:"TFNExemptionType,omitempty"`
	// The tax file number e.g 123123123.
	TaxFileNumber *string `json:"TaxFileNumber,omitempty"`
	// If tax free threshold claimed. e.g true or false
	TaxFreeThresholdClaimed *bool `json:"TaxFreeThresholdClaimed,omitempty"`
	// If has tax offset estimated then the tax offset estimated amount. e.g 100
	TaxOffsetEstimatedAmount *float64 `json:"TaxOffsetEstimatedAmount,omitempty"`
	// If the employee has requested that additional tax be withheld each pay run. e.g 50
	UpwardVariationTaxWithholdingAmount *float64 `json:"UpwardVariationTaxWithholdingAmount,omitempty"`
}

type TaxDeclaration struct {
	// If the employee has approved withholding variation. e.g (0 - 100)
	ApprovedWithholdingVariationPercentage *float64 `json:"ApprovedWithholdingVariationPercentage,omitempty"`
	// If the employee is Australian resident for tax purposes. e.g true or false
	AustralianResidentForTaxPurposes *bool `json:"AustralianResidentForTaxPurposes,omitempty"`
	// If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false
	EligibleToReceiveLeaveLoading *bool `json:"EligibleToReceiveLeaveLoading,omitempty"`
	// Address line 1 for employee home address
	EmployeeID      *string              `json:"EmployeeID,omitempty"`
	EmploymentBasis *EmploymentBasisEnum `json:"EmploymentBasis,omitempty"`
	// If employee has HECS or HELP debt. e.g true or false
	HasHELPDebt *bool `json:"HasHELPDebt,omitempty"`
	// If employee has financial supplement debt. e.g true or false
	HasSFSSDebt *bool `json:"HasSFSSDebt,omitempty"`
	// If the employee is eligible for student startup loan rules
	HasStudentStartupLoan *bool `json:"HasStudentStartupLoan,omitempty"`
	// If employee has trade support loan. e.g true or false
	HasTradeSupportLoanDebt *bool                 `json:"HasTradeSupportLoanDebt,omitempty"`
	ResidencyStatus         *ResidencyStatusEnum  `json:"ResidencyStatus,omitempty"`
	TFNExemptionType        *TFNExemptionTypeEnum `json:"TFNExemptionType,omitempty"`
	// The tax file number e.g 123123123.
	TaxFileNumber *string `json:"TaxFileNumber,omitempty"`
	// If tax free threshold claimed. e.g true or false
	TaxFreeThresholdClaimed *bool `json:"TaxFreeThresholdClaimed,omitempty"`
	// If has tax offset estimated then the tax offset estimated amount. e.g 100
	TaxOffsetEstimatedAmount *float64 `json:"TaxOffsetEstimatedAmount,omitempty"`
	// Last modified timestamp
	UpdatedDateUTC *string `json:"UpdatedDateUTC,omitempty"`
	// If the employee has requested that additional tax be withheld each pay run. e.g 50
	UpwardVariationTaxWithholdingAmount *float64 `json:"UpwardVariationTaxWithholdingAmount,omitempty"`
}
