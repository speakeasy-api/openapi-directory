// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SetV2LoggingLevelRequestBodyLogLevelEnum - The log level.
type SetV2LoggingLevelRequestBodyLogLevelEnum string

const (
	SetV2LoggingLevelRequestBodyLogLevelEnumDebug    SetV2LoggingLevelRequestBodyLogLevelEnum = "DEBUG"
	SetV2LoggingLevelRequestBodyLogLevelEnumInfo     SetV2LoggingLevelRequestBodyLogLevelEnum = "INFO"
	SetV2LoggingLevelRequestBodyLogLevelEnumError    SetV2LoggingLevelRequestBodyLogLevelEnum = "ERROR"
	SetV2LoggingLevelRequestBodyLogLevelEnumWarn     SetV2LoggingLevelRequestBodyLogLevelEnum = "WARN"
	SetV2LoggingLevelRequestBodyLogLevelEnumDisabled SetV2LoggingLevelRequestBodyLogLevelEnum = "DISABLED"
)

func (e SetV2LoggingLevelRequestBodyLogLevelEnum) ToPointer() *SetV2LoggingLevelRequestBodyLogLevelEnum {
	return &e
}

func (e *SetV2LoggingLevelRequestBodyLogLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEBUG":
		fallthrough
	case "INFO":
		fallthrough
	case "ERROR":
		fallthrough
	case "WARN":
		fallthrough
	case "DISABLED":
		*e = SetV2LoggingLevelRequestBodyLogLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SetV2LoggingLevelRequestBodyLogLevelEnum: %v", v)
	}
}

// SetV2LoggingLevelRequestBodyLogTarget - A log target.
type SetV2LoggingLevelRequestBodyLogTarget struct {
	TargetName *string                   `json:"targetName,omitempty"`
	TargetType *shared.LogTargetTypeEnum `json:"targetType,omitempty"`
}

type SetV2LoggingLevelRequestBody struct {
	// The log level.
	LogLevel SetV2LoggingLevelRequestBodyLogLevelEnum `json:"logLevel"`
	// A log target.
	LogTarget SetV2LoggingLevelRequestBodyLogTarget `json:"logTarget"`
}

type SetV2LoggingLevelRequest struct {
	RequestBody       SetV2LoggingLevelRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type SetV2LoggingLevelResponse struct {
	ContentType string
	// InternalException
	InternalException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// NotConfiguredException
	NotConfiguredException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
}
