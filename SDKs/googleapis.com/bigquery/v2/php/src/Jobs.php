<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Jobs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Requests that a job be cancelled. This call will return immediately, and the client will need to poll for the job status to see if the cancel completed successfully. Cancelled jobs may still incur costs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsCancelResponse
     */
	public function bigqueryJobsCancel(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/jobs/{jobId}/cancel', \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryJobsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobCancelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobCancelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Requests the deletion of the metadata of a job. This call returns when the job's metadata is deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsDeleteResponse
     */
	public function bigqueryJobsDelete(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/jobs/{jobId}/delete', \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryJobsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns information about a specific job. Job information is available for a six month period after creation. Requires that you're the person who ran the job, or have the Is Owner project role.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetResponse
     */
	public function bigqueryJobsGet(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the results of a query job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetQueryResultsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetQueryResultsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetQueryResultsResponse
     */
	public function bigqueryJobsGetQueryResults(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetQueryResultsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetQueryResultsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetQueryResultsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/queries/{jobId}', \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetQueryResultsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetQueryResultsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsGetQueryResultsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getQueryResultsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetQueryResultsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a new asynchronous job. Requires the Can View project role.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsInsertResponse
     */
	public function bigqueryJobsInsert(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/jobs', \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryJobsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all jobs that you started in the specified project. Job information is available for a six month period after creation. The job list is sorted in reverse chronological order, by job creation time. Requires the Can View project role, or the Is Owner project role if you set the allUsers property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsListResponse
     */
	public function bigqueryJobsList(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/jobs', \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Runs a BigQuery SQL query synchronously and returns query results if the query completes within a specified timeout.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsQuerySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsQueryResponse
     */
	public function bigqueryJobsQuery(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsQuerySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/queries', \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "queryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryJobsQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryJobsQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueryResponse', 'json');
            }
        }

        return $response;
    }
}