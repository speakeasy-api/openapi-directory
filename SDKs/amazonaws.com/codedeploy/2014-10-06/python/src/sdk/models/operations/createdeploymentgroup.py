"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createdeploymentgroupinput as shared_createdeploymentgroupinput
from ..shared import createdeploymentgroupoutput as shared_createdeploymentgroupoutput
from enum import Enum
from typing import Any, Optional

class CreateDeploymentGroupXAmzTargetEnum(str, Enum):
    CODE_DEPLOY_20141006_CREATE_DEPLOYMENT_GROUP = 'CodeDeploy_20141006.CreateDeploymentGroup'


@dataclasses.dataclass
class CreateDeploymentGroupRequest:
    
    create_deployment_group_input: shared_createdeploymentgroupinput.CreateDeploymentGroupInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CreateDeploymentGroupXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateDeploymentGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    alarms_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AlarmsLimitExceededException"""  
    application_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ApplicationDoesNotExistException"""  
    application_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ApplicationNameRequiredException"""  
    create_deployment_group_output: Optional[shared_createdeploymentgroupoutput.CreateDeploymentGroupOutput] = dataclasses.field(default=None)
    r"""Success"""  
    deployment_config_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeploymentConfigDoesNotExistException"""  
    deployment_group_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeploymentGroupAlreadyExistsException"""  
    deployment_group_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeploymentGroupLimitExceededException"""  
    deployment_group_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeploymentGroupNameRequiredException"""  
    ecs_service_mapping_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ECSServiceMappingLimitExceededException"""  
    invalid_alarm_config_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidAlarmConfigException"""  
    invalid_application_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidApplicationNameException"""  
    invalid_auto_rollback_config_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidAutoRollbackConfigException"""  
    invalid_auto_scaling_group_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidAutoScalingGroupException"""  
    invalid_blue_green_deployment_configuration_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidBlueGreenDeploymentConfigurationException"""  
    invalid_deployment_config_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidDeploymentConfigNameException"""  
    invalid_deployment_group_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidDeploymentGroupNameException"""  
    invalid_deployment_style_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidDeploymentStyleException"""  
    invalid_ec2_tag_combination_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidEC2TagCombinationException"""  
    invalid_ec2_tag_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidEC2TagException"""  
    invalid_ecs_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidECSServiceException"""  
    invalid_input_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInputException"""  
    invalid_load_balancer_info_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidLoadBalancerInfoException"""  
    invalid_on_premises_tag_combination_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidOnPremisesTagCombinationException"""  
    invalid_role_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRoleException"""  
    invalid_tag_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTagException"""  
    invalid_tags_to_add_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTagsToAddException"""  
    invalid_target_group_pair_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTargetGroupPairException"""  
    invalid_traffic_routing_configuration_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTrafficRoutingConfigurationException"""  
    invalid_trigger_config_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTriggerConfigException"""  
    lifecycle_hook_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LifecycleHookLimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    role_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RoleRequiredException"""  
    tag_set_list_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TagSetListLimitExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    trigger_targets_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TriggerTargetsLimitExceededException"""  
    