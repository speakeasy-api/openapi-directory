<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const CREATE_DOCUMENT_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const CREATE_SERVICE_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const CREATE_STREAM_MESSAGE_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const CREATE_SYNC_LIST_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const CREATE_SYNC_LIST_ITEM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const CREATE_SYNC_MAP_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const CREATE_SYNC_MAP_ITEM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const CREATE_SYNC_STREAM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const DELETE_DOCUMENT_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const DELETE_DOCUMENT_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const DELETE_SERVICE_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const DELETE_SYNC_LIST_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const DELETE_SYNC_LIST_ITEM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const DELETE_SYNC_LIST_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const DELETE_SYNC_MAP_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const DELETE_SYNC_MAP_ITEM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const DELETE_SYNC_MAP_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const DELETE_SYNC_STREAM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const FETCH_DOCUMENT_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const FETCH_DOCUMENT_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const FETCH_SERVICE_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const FETCH_SYNC_LIST_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const FETCH_SYNC_LIST_ITEM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const FETCH_SYNC_LIST_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const FETCH_SYNC_MAP_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const FETCH_SYNC_MAP_ITEM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const FETCH_SYNC_MAP_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const FETCH_SYNC_STREAM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const LIST_DOCUMENT_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const LIST_DOCUMENT_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const LIST_SERVICE_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const LIST_SYNC_LIST_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const LIST_SYNC_LIST_ITEM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const LIST_SYNC_LIST_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const LIST_SYNC_MAP_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const LIST_SYNC_MAP_ITEM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const LIST_SYNC_MAP_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const LIST_SYNC_STREAM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const UPDATE_DOCUMENT_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const UPDATE_DOCUMENT_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const UPDATE_SERVICE_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const UPDATE_SYNC_LIST_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const UPDATE_SYNC_LIST_ITEM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const UPDATE_SYNC_LIST_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const UPDATE_SYNC_MAP_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const UPDATE_SYNC_MAP_ITEM_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const UPDATE_SYNC_MAP_PERMISSION_SERVERS = [
		'https://sync.twilio.com',
	];
	
	public const UPDATE_SYNC_STREAM_SERVERS = [
		'https://sync.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createDocument
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDocumentResponse
     */
	public function createDocument(
        \OpenAPI\OpenAPI\Models\Operations\CreateDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDocumentResponse
    {
        $baseUrl = SDK::CREATE_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Documents', \OpenAPI\OpenAPI\Models\Operations\CreateDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
     */
	public function createService(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Stream Message.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateStreamMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateStreamMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateStreamMessageResponse
     */
	public function createStreamMessage(
        \OpenAPI\OpenAPI\Models\Operations\CreateStreamMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateStreamMessageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateStreamMessageResponse
    {
        $baseUrl = SDK::CREATE_STREAM_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Streams/{StreamSid}/Messages', \OpenAPI\OpenAPI\Models\Operations\CreateStreamMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateStreamMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncStreamStreamMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncStreamStreamMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSyncList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSyncListResponse
     */
	public function createSyncList(
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSyncListResponse
    {
        $baseUrl = SDK::CREATE_SYNC_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists', \OpenAPI\OpenAPI\Models\Operations\CreateSyncListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSyncListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSyncListItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncListItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncListItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSyncListItemResponse
     */
	public function createSyncListItem(
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncListItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncListItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSyncListItemResponse
    {
        $baseUrl = SDK::CREATE_SYNC_LIST_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Items', \OpenAPI\OpenAPI\Models\Operations\CreateSyncListItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSyncListItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncListSyncListItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncListSyncListItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSyncMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapResponse
     */
	public function createSyncMap(
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapResponse
    {
        $baseUrl = SDK::CREATE_SYNC_MAP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps', \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncMap = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncMap', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSyncMapItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapItemResponse
     */
	public function createSyncMapItem(
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapItemResponse
    {
        $baseUrl = SDK::CREATE_SYNC_MAP_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Items', \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSyncMapItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncMapSyncMapItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncMapSyncMapItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Stream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncStreamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncStreamSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSyncStreamResponse
     */
	public function createSyncStream(
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncStreamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncStreamSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSyncStreamResponse
    {
        $baseUrl = SDK::CREATE_SYNC_STREAM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Streams', \OpenAPI\OpenAPI\Models\Operations\CreateSyncStreamRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSyncStreamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncStream = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncStream', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteDocument
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentResponse
     */
	public function deleteDocument(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentResponse
    {
        $baseUrl = SDK::DELETE_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Documents/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Sync Document Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentPermissionResponse
     */
	public function deleteDocumentPermission(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentPermissionResponse
    {
        $baseUrl = SDK::DELETE_DOCUMENT_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDocumentPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
     */
	public function deleteService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSyncList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListResponse
     */
	public function deleteSyncList(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListResponse
    {
        $baseUrl = SDK::DELETE_SYNC_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSyncListItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListItemResponse
     */
	public function deleteSyncListItem(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListItemResponse
    {
        $baseUrl = SDK::DELETE_SYNC_LIST_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Sync List Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListPermissionResponse
     */
	public function deleteSyncListPermission(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListPermissionResponse
    {
        $baseUrl = SDK::DELETE_SYNC_LIST_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncListPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSyncMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapResponse
     */
	public function deleteSyncMap(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapResponse
    {
        $baseUrl = SDK::DELETE_SYNC_MAP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSyncMapItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapItemResponse
     */
	public function deleteSyncMapItem(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapItemResponse
    {
        $baseUrl = SDK::DELETE_SYNC_MAP_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Sync Map Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapPermissionResponse
     */
	public function deleteSyncMapPermission(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapPermissionResponse
    {
        $baseUrl = SDK::DELETE_SYNC_MAP_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncMapPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Stream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncStreamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncStreamSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncStreamResponse
     */
	public function deleteSyncStream(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncStreamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncStreamSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncStreamResponse
    {
        $baseUrl = SDK::DELETE_SYNC_STREAM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Streams/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncStreamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncStreamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * fetchDocument
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDocumentResponse
     */
	public function fetchDocument(
        \OpenAPI\OpenAPI\Models\Operations\FetchDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDocumentResponse
    {
        $baseUrl = SDK::FETCH_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Documents/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Sync Document Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDocumentPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDocumentPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDocumentPermissionResponse
     */
	public function fetchDocumentPermission(
        \OpenAPI\OpenAPI\Models\Operations\FetchDocumentPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDocumentPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDocumentPermissionResponse
    {
        $baseUrl = SDK::FETCH_DOCUMENT_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\FetchDocumentPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDocumentPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceDocumentDocumentPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceDocumentDocumentPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
     */
	public function fetchService(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSyncList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncListResponse
     */
	public function fetchSyncList(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncListResponse
    {
        $baseUrl = SDK::FETCH_SYNC_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSyncListItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncListItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncListItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncListItemResponse
     */
	public function fetchSyncListItem(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncListItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncListItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncListItemResponse
    {
        $baseUrl = SDK::FETCH_SYNC_LIST_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncListItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncListItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncListSyncListItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncListSyncListItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Sync List Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncListPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncListPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncListPermissionResponse
     */
	public function fetchSyncListPermission(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncListPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncListPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncListPermissionResponse
    {
        $baseUrl = SDK::FETCH_SYNC_LIST_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncListPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncListPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncListSyncListPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncListSyncListPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSyncMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapResponse
     */
	public function fetchSyncMap(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapResponse
    {
        $baseUrl = SDK::FETCH_SYNC_MAP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncMap = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncMap', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSyncMapItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapItemResponse
     */
	public function fetchSyncMapItem(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapItemResponse
    {
        $baseUrl = SDK::FETCH_SYNC_MAP_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncMapSyncMapItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncMapSyncMapItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Sync Map Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapPermissionResponse
     */
	public function fetchSyncMapPermission(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapPermissionResponse
    {
        $baseUrl = SDK::FETCH_SYNC_MAP_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncMapPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncMapSyncMapPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncMapSyncMapPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Stream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncStreamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncStreamSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncStreamResponse
     */
	public function fetchSyncStream(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncStreamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncStreamSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncStreamResponse
    {
        $baseUrl = SDK::FETCH_SYNC_STREAM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Streams/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncStreamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncStreamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncStream = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncStream', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listDocument
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDocumentResponse
     */
	public function listDocument(
        \OpenAPI\OpenAPI\Models\Operations\ListDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDocumentResponse
    {
        $baseUrl = SDK::LIST_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Documents', \OpenAPI\OpenAPI\Models\Operations\ListDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDocumentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDocumentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDocumentListDocumentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Permissions applying to a Sync Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDocumentPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDocumentPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDocumentPermissionResponse
     */
	public function listDocumentPermission(
        \OpenAPI\OpenAPI\Models\Operations\ListDocumentPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDocumentPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDocumentPermissionResponse
    {
        $baseUrl = SDK::LIST_DOCUMENT_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions', \OpenAPI\OpenAPI\Models\Operations\ListDocumentPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDocumentPermissionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDocumentPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDocumentPermissionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDocumentPermissionListDocumentPermissionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
     */
	public function listService(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
    {
        $baseUrl = SDK::LIST_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceListServiceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSyncList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncListResponse
     */
	public function listSyncList(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncListResponse
    {
        $baseUrl = SDK::LIST_SYNC_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists', \OpenAPI\OpenAPI\Models\Operations\ListSyncListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncListListSyncListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSyncListItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncListItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncListItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncListItemResponse
     */
	public function listSyncListItem(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncListItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncListItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncListItemResponse
    {
        $baseUrl = SDK::LIST_SYNC_LIST_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Items', \OpenAPI\OpenAPI\Models\Operations\ListSyncListItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncListItemRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncListItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncListItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncListItemListSyncListItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Permissions applying to a Sync List.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncListPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncListPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncListPermissionResponse
     */
	public function listSyncListPermission(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncListPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncListPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncListPermissionResponse
    {
        $baseUrl = SDK::LIST_SYNC_LIST_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions', \OpenAPI\OpenAPI\Models\Operations\ListSyncListPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncListPermissionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncListPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncListPermissionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncListPermissionListSyncListPermissionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSyncMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncMapSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncMapResponse
     */
	public function listSyncMap(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncMapSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncMapResponse
    {
        $baseUrl = SDK::LIST_SYNC_MAP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps', \OpenAPI\OpenAPI\Models\Operations\ListSyncMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncMapRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncMapResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncMapListSyncMapResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSyncMapItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncMapItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncMapItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncMapItemResponse
     */
	public function listSyncMapItem(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncMapItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncMapItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncMapItemResponse
    {
        $baseUrl = SDK::LIST_SYNC_MAP_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Items', \OpenAPI\OpenAPI\Models\Operations\ListSyncMapItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncMapItemRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncMapItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncMapItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncMapItemListSyncMapItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Permissions applying to a Sync Map.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncMapPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncMapPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncMapPermissionResponse
     */
	public function listSyncMapPermission(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncMapPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncMapPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncMapPermissionResponse
    {
        $baseUrl = SDK::LIST_SYNC_MAP_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions', \OpenAPI\OpenAPI\Models\Operations\ListSyncMapPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncMapPermissionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncMapPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncMapPermissionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncMapPermissionListSyncMapPermissionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Streams in a Service Instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncStreamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncStreamSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncStreamResponse
     */
	public function listSyncStream(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncStreamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncStreamSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncStreamResponse
    {
        $baseUrl = SDK::LIST_SYNC_STREAM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Streams', \OpenAPI\OpenAPI\Models\Operations\ListSyncStreamRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncStreamRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncStreamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncStreamResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncStreamListSyncStreamResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateDocument
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentResponse
     */
	public function updateDocument(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentResponse
    {
        $baseUrl = SDK::UPDATE_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Documents/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an identity's access to a specific Sync Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentPermissionResponse
     */
	public function updateDocumentPermission(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentPermissionResponse
    {
        $baseUrl = SDK::UPDATE_DOCUMENT_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDocumentPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceDocumentDocumentPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceDocumentDocumentPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
     */
	public function updateService(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSyncList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListResponse
     */
	public function updateSyncList(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSyncListItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListItemResponse
     */
	public function updateSyncListItem(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListItemResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_LIST_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncListSyncListItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncListSyncListItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an identity's access to a specific Sync List.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListPermissionResponse
     */
	public function updateSyncListPermission(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListPermissionResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_LIST_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncListPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncListSyncListPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncListSyncListPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSyncMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapResponse
     */
	public function updateSyncMap(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_MAP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncMap = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncMap', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSyncMapItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapItemResponse
     */
	public function updateSyncMapItem(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapItemResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_MAP_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncMapSyncMapItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncMapSyncMapItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an identity's access to a specific Sync Map.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapPermissionResponse
     */
	public function updateSyncMapPermission(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapPermissionResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_MAP_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncMapPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncMapSyncMapPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncMapSyncMapPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Stream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncStreamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncStreamSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncStreamResponse
     */
	public function updateSyncStream(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncStreamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncStreamSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncStreamResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_STREAM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Streams/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncStreamRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncStreamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->syncV1ServiceSyncStream = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SyncV1ServiceSyncStream', 'json');
            }
        }

        return $response;
    }
}