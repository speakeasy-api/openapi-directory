/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * # Introduction
 *
 * @remarks
 * These API services designed to use it inside a mobile applications to get statistics data and services directly from telematics platform and show it in the app
 *
 * # Scheme
 * ![API statistics](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/API+statistics+integration.png)
 */
export class TwoForMobileAppOptional {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Trips - trip details
   *
   * @remarks
   * Trips - trip details
   */
  tripsTripDetails(
    req: operations.TripsTripDetailsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TripsTripDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TripsTripDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/mobilesdk/stage/track/get_track/v1";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TripsTripDetailsResponse =
        new operations.TripsTripDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tripsTripDetails200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TripsTripDetails200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * User safe scoring - Accumulated value - v1/Scorings/individual
   *
   * @remarks
   * Safe driving score API. This API is a part of Telematics API that we provide to our clients.
   *
   * Rating description presents the universal approach, developed by our company on the basis of many years of experience; most of the input variables presented in this document could be adopted depending on the needs of the company and the focus on the specific characteristics of clients' driving style.
   * Since 2019 we have moved to the 3rd Generation of the scoring model which allows distinguishing a context of events and add penalty points in accordance with a level of risk generated by an event
   *
   * [More details](https://docs.telematicssdk.com)
   */
  userSafeScoringAccumulatedValueV1ScoringsIndividual(
    req: operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/statistics/v1/Scorings/individual/";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualResponse =
        new operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userSafeScoringAccumulatedValueV1ScoringsIndividual200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.UserSafeScoringAccumulatedValueV1ScoringsIndividual200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * User safe scoring - daily value - /v1/Scorings/individual/daily
   *
   * @remarks
   * User safe scoring - daily value - /v1/Scorings/individual/daily
   */
  userSafeScoringDailyValueV1ScoringsIndividualDaily(
    req: operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/statistics/v1/Scorings/individual/daily";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyResponse =
        new operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userSafeScoringDailyValueV1ScoringsIndividualDaily200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.UserSafeScoringDailyValueV1ScoringsIndividualDaily200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * User statistice - Daily value - v1/Statistics/individual/daily
   *
   * @remarks
   * User statistice - Daily value - v1/Statistics/individual/daily
   */
  userStatisticeDailyValueV1StatisticsIndividualDaily(
    req: operations.UserStatisticeDailyValueV1StatisticsIndividualDailyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UserStatisticeDailyValueV1StatisticsIndividualDailyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.UserStatisticeDailyValueV1StatisticsIndividualDailyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/statistics/v1/Statistics/individual/daily/";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UserStatisticeDailyValueV1StatisticsIndividualDailyResponse =
        new operations.UserStatisticeDailyValueV1StatisticsIndividualDailyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userStatisticeDailyValueV1StatisticsIndividualDaily200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.UserStatisticeDailyValueV1StatisticsIndividualDaily200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * User statistics - Accumulated value - /v1/Statistics/individual
   *
   * @remarks
   * User statistics - Accumulated value - /v1/Statistics/individual
   */
  userStatisticsAccumulatedValueV1StatisticsIndividual(
    req: operations.UserStatisticsAccumulatedValueV1StatisticsIndividualRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UserStatisticsAccumulatedValueV1StatisticsIndividualResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.UserStatisticsAccumulatedValueV1StatisticsIndividualRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/statistics/v1/Statistics/individual/";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UserStatisticsAccumulatedValueV1StatisticsIndividualResponse =
        new operations.UserStatisticsAccumulatedValueV1StatisticsIndividualResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userStatisticsAccumulatedValueV1StatisticsIndividual200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.UserStatisticsAccumulatedValueV1StatisticsIndividual200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
