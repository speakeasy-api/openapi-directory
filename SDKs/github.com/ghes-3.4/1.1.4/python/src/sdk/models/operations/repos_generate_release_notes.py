"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import release_notes_content as shared_release_notes_content
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposGenerateReleaseNotesRequestBody:
    
    tag_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag_name') }})
    r"""The tag name for the release. This can be an existing tag or a new one."""  
    configuration_file_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configuration_file_path'), 'exclude': lambda f: f is None }})
    r"""Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used."""  
    previous_tag_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_tag_name'), 'exclude': lambda f: f is None }})
    r"""The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release."""  
    target_commitish: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_commitish'), 'exclude': lambda f: f is None }})
    r"""Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists."""  
    

@dataclasses.dataclass
class ReposGenerateReleaseNotesRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    request_body: ReposGenerateReleaseNotesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ReposGenerateReleaseNotesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    release_notes_content: Optional[shared_release_notes_content.ReleaseNotesContent] = dataclasses.field(default=None)
    r"""Name and body of generated release notes"""  
    