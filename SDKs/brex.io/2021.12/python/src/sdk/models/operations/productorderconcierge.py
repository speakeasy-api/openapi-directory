"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ProductOrderConciergeSecurity:
    
    user_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'user_key' }})  
    

@dataclasses.dataclass
class ProductOrderConciergeRequestBody:
    r"""Parameters for the concierge order"""
    
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'companyName' }})
    r"""Name of the company for which a document should be ordered. (Not required if subjectId is given)"""  
    contact_email: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'contactEmail' }})
    r"""Contact E-Mail, will be contacted if concierge costs are exceeding the threshhold configured on your plan"""  
    contact_phone: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'contactPhone' }})
    r"""Contact phone, will be contacted if concierge costs are exceeding the threshhold configured on your plan"""  
    cost_confirmation: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'costConfirmation' }})
    r"""If the concierge cost should require additional confirmation if a threshold is reached (configured on your plan)"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'country' }})
    r"""Two letter ISO code of the country of the company"""  
    financial_data: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'financialData' }})
    r"""If you want financial data of the company to be retrieved"""  
    historic_information: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'historicInformation' }})
    r"""If you want historical data of the company to be retrieved"""  
    information_requirements: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'informationRequirements' }})
    r"""Requirements on what document or information should be provided. Please be very precise"""  
    location_investigation: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'locationInvestigation' }})
    r"""If the companies residency should be investigated"""  
    priority: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'priority' }})
    r"""Priority of order: standard/express are allowed"""  
    register_data: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'registerData' }})
    r"""If you want register data of the company to be retrieved"""  
    register_number: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'registerNumber' }})
    r"""Registration number of the company for which a document should be ordered. (Not required if subjectId is given)"""  
    subject_id: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'subjectId' }})
    r"""Kompanyid of the company you want to place the order for"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductOrderConciergeDefaultApplicationJSON:
    r"""Detailed information about the error"""
    
    code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    tag: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag') }})  
    fault: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fault'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductOrderConcierge200ApplicationJSON:
    r"""Product order details"""
    
    identity: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identity') }})  
    option: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('option') }})  
    ordered: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ordered'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})  
    owner: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})  
    sku: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku') }})  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    subject_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjectId') }})  
    subject_value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjectValue') }})  
    

@dataclasses.dataclass
class ProductOrderConciergeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    product_order_concierge_200_application_json_object: Optional[ProductOrderConcierge200ApplicationJSON] = dataclasses.field(default=None)
    r"""Product order details"""  
    product_order_concierge_default_application_json_object: Optional[ProductOrderConciergeDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Detailed information about the error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    