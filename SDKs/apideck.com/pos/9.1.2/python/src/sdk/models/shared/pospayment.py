"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import currency_enum as shared_currency_enum
from ..shared import paymentcard as shared_paymentcard
from ..shared import posbankaccount as shared_posbankaccount
from ..shared import servicecharge as shared_servicecharge
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PosPaymentCardDetailsInput:
    
    card: Optional[shared_paymentcard.PaymentCardInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card'), 'exclude': lambda f: f is None }})
    r"""A card's non-confidential details."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PosPaymentCashDetails:
    r"""Cash details for this payment"""
    
    amount: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The amount of cash given by the customer."""  
    charge_back_amount: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charge_back_amount'), 'exclude': lambda f: f is None }})
    r"""The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields."""  
    
class PosPaymentExternalDetailsTypeEnum(str, Enum):
    r"""The type of external payment the seller received. It can be one of the following:
    - CHECK - Paid using a physical check.
    - BANK_TRANSFER - Paid using external bank transfer.
    - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
    - CRYPTO - Paid using a crypto currency.
    - SQUARE_CASH - Paid using Square Cash App.
    - SOCIAL - Paid using peer-to-peer payment applications.
    - EXTERNAL - A third-party application gathered this payment outside of Square.
    - EMONEY - Paid using an E-money provider.
    - CARD - A credit or debit card that Square does not support.
    - STORED_BALANCE - Use for house accounts, store credit, and so forth.
    - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
    - OTHER - A type not listed here.
    """
    CHECK = 'check'
    BANK_TRANSFER = 'bank_transfer'
    OTHER_GIFT_CARD = 'other_gift_card'
    CRYPTO = 'crypto'
    SQUARE_CASH = 'square_cash'
    SOCIAL = 'social'
    EXTERNAL = 'external'
    EMONEY = 'emoney'
    CARD = 'card'
    STORED_BALANCE = 'stored_balance'
    FOOD_VOUCHER = 'food_voucher'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PosPaymentExternalDetails:
    r"""Details about an external payment."""
    
    source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})
    r"""A description of the external payment source. For example,
    \"Food Delivery Service\".
    """  
    type: PosPaymentExternalDetailsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of external payment the seller received. It can be one of the following:
    - CHECK - Paid using a physical check.
    - BANK_TRANSFER - Paid using external bank transfer.
    - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
    - CRYPTO - Paid using a crypto currency.
    - SQUARE_CASH - Paid using Square Cash App.
    - SOCIAL - Paid using peer-to-peer payment applications.
    - EXTERNAL - A third-party application gathered this payment outside of Square.
    - EMONEY - Paid using an E-money provider.
    - CARD - A credit or debit card that Square does not support.
    - STORED_BALANCE - Use for house accounts, store credit, and so forth.
    - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
    - OTHER - A type not listed here.
    """  
    source_fee_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_fee_amount'), 'exclude': lambda f: f is None }})
    r"""The fees paid to the source. The amount minus this field is the net amount seller receives."""  
    source_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_id'), 'exclude': lambda f: f is None }})
    r"""An ID to associate the payment to its originating source."""  
    
class PosPaymentProcessingFeesTypeEnum(str, Enum):
    INITIAL = 'initial'
    ADJUSTMENT = 'adjustment'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PosPaymentProcessingFees:
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})  
    effective_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effective_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    processing_type: Optional[PosPaymentProcessingFeesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_type'), 'exclude': lambda f: f is None }})  
    
class PosPaymentSourceEnum(str, Enum):
    r"""Source of this payment."""
    CARD = 'card'
    BANK_ACCOUNT = 'bank_account'
    WALLET = 'wallet'
    BNPL = 'bnpl'
    CASH = 'cash'
    EXTERNAL = 'external'
    OTHER = 'other'

class PosPaymentStatusEnum(str, Enum):
    r"""Status of this payment."""
    APPROVED = 'approved'
    PENDING = 'pending'
    COMPLETED = 'completed'
    CANCELED = 'canceled'
    FAILED = 'failed'
    OTHER = 'other'

class PosPaymentWalletDetailsStatusEnum(str, Enum):
    r"""The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED."""
    AUTHORIZED = 'authorized'
    CAPTURED = 'captured'
    VOIDED = 'voided'
    FAILED = 'failed'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PosPaymentWalletDetails:
    r"""Wallet details for this payment. This field is currently not available. Reach out to our team for more info."""
    
    status: Optional[PosPaymentWalletDetailsStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PosPaymentInput:
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})  
    currency: shared_currency_enum.CurrencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)."""  
    customer_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id') }})  
    order_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_id') }})  
    source_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_id') }})
    r"""The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`."""  
    tender_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tender_id') }})  
    app_fee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_fee'), 'exclude': lambda f: f is None }})
    r"""The amount the developer is taking as a fee for facilitating the payment on behalf of the seller."""  
    approved: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved'), 'exclude': lambda f: f is None }})
    r"""The initial amount of money approved for this payment."""  
    bank_account: Optional[shared_posbankaccount.PosBankAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_account'), 'exclude': lambda f: f is None }})
    r"""Card details for this payment. This field is currently not available. Reach out to our team for more info."""  
    card_details: Optional[PosPaymentCardDetailsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_details'), 'exclude': lambda f: f is None }})  
    cash: Optional[PosPaymentCashDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cash'), 'exclude': lambda f: f is None }})
    r"""Cash details for this payment"""  
    change_back_cash_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('change_back_cash_amount'), 'exclude': lambda f: f is None }})  
    device_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_id'), 'exclude': lambda f: f is None }})  
    employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employee_id'), 'exclude': lambda f: f is None }})  
    external_details: Optional[PosPaymentExternalDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_details'), 'exclude': lambda f: f is None }})
    r"""Details about an external payment."""  
    external_payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_payment_id'), 'exclude': lambda f: f is None }})  
    idempotency_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idempotency_key'), 'exclude': lambda f: f is None }})
    r"""A value you specify that uniquely identifies this request among requests you have sent."""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id'), 'exclude': lambda f: f is None }})  
    merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant_id'), 'exclude': lambda f: f is None }})  
    processing_fees: Optional[list[PosPaymentProcessingFees]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_fees'), 'exclude': lambda f: f is None }})  
    refunded: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded'), 'exclude': lambda f: f is None }})
    r"""The initial amount of money approved for this payment."""  
    service_charges: Optional[list[shared_servicecharge.ServiceChargeInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_charges'), 'exclude': lambda f: f is None }})
    r"""Optional service charges or gratuity tip applied to the order."""  
    source: Optional[PosPaymentSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Source of this payment."""  
    status: Optional[PosPaymentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of this payment."""  
    tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})  
    tip: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tip'), 'exclude': lambda f: f is None }})  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})  
    wallet: Optional[PosPaymentWalletDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wallet'), 'exclude': lambda f: f is None }})
    r"""Wallet details for this payment. This field is currently not available. Reach out to our team for more info."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PosPaymentCardDetails:
    
    card: Optional[shared_paymentcard.PaymentCard] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card'), 'exclude': lambda f: f is None }})
    r"""A card's non-confidential details."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PosPayment:
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})  
    currency: shared_currency_enum.CurrencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)."""  
    customer_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id') }})  
    order_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_id') }})  
    source_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_id') }})
    r"""The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`."""  
    tender_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tender_id') }})  
    app_fee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_fee'), 'exclude': lambda f: f is None }})
    r"""The amount the developer is taking as a fee for facilitating the payment on behalf of the seller."""  
    approved: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved'), 'exclude': lambda f: f is None }})
    r"""The initial amount of money approved for this payment."""  
    bank_account: Optional[shared_posbankaccount.PosBankAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_account'), 'exclude': lambda f: f is None }})
    r"""Card details for this payment. This field is currently not available. Reach out to our team for more info."""  
    card_details: Optional[PosPaymentCardDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_details'), 'exclude': lambda f: f is None }})  
    cash: Optional[PosPaymentCashDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cash'), 'exclude': lambda f: f is None }})
    r"""Cash details for this payment"""  
    change_back_cash_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('change_back_cash_amount'), 'exclude': lambda f: f is None }})  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the object was created."""  
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by'), 'exclude': lambda f: f is None }})
    r"""The user who created the object."""  
    device_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_id'), 'exclude': lambda f: f is None }})  
    employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employee_id'), 'exclude': lambda f: f is None }})  
    external_details: Optional[PosPaymentExternalDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_details'), 'exclude': lambda f: f is None }})
    r"""Details about an external payment."""  
    external_payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_payment_id'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for an object."""  
    idempotency_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idempotency_key'), 'exclude': lambda f: f is None }})
    r"""A value you specify that uniquely identifies this request among requests you have sent."""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id'), 'exclude': lambda f: f is None }})  
    merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant_id'), 'exclude': lambda f: f is None }})  
    processing_fees: Optional[list[PosPaymentProcessingFees]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_fees'), 'exclude': lambda f: f is None }})  
    refunded: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded'), 'exclude': lambda f: f is None }})
    r"""The initial amount of money approved for this payment."""  
    service_charges: Optional[list[shared_servicecharge.ServiceCharge]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_charges'), 'exclude': lambda f: f is None }})
    r"""Optional service charges or gratuity tip applied to the order."""  
    source: Optional[PosPaymentSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Source of this payment."""  
    status: Optional[PosPaymentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of this payment."""  
    tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})  
    tip: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tip'), 'exclude': lambda f: f is None }})  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the object was last updated."""  
    updated_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_by'), 'exclude': lambda f: f is None }})
    r"""The user who last updated the object."""  
    wallet: Optional[PosPaymentWalletDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wallet'), 'exclude': lambda f: f is None }})
    r"""Wallet details for this payment. This field is currently not available. Reach out to our team for more info."""  
    