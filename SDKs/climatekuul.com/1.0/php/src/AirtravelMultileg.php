<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AirtravelMultileg 
{
	
	public const AIRTRAVEL_MULTILEG_SERVERS = [
		'http://api.climatekuul.com:8000/footprint',
	];
	
	public const CONFIRM_CARBON_OFFSET3_SERVERS = [
		'http://api.climatekuul.com:8000/footprint',
	];
	
	public const CONFIRM_PAYMENT3_SERVERS = [
		'http://api.climatekuul.com:8000/footprint',
	];
	
	public const CONFIRM_PAYMENT_OF_TRANSACTION3_SERVERS = [
		'http://api.climatekuul.com:8000/footprint',
	];
	
	public const CONFIRMS_PLANTING3_SERVERS = [
		'http://api.climatekuul.com:8000/footprint',
	];

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * airtravelMultileg
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AirtravelMultilegRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\AirtravelMultilegResponse
     */
	public function airtravelMultileg(
        \OpenAPI\OpenAPI\Models\Shared\AirtravelMultilegRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\AirtravelMultilegResponse
    {
        $baseUrl = AirtravelMultileg::AIRTRAVEL_MULTILEG_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/airtravelMultileg');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AirtravelMultilegResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * confirmCarbonOffset
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfirmCarbonOffset3RequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfirmCarbonOffset3Response
     */
	public function confirmCarbonOffset3(
        \OpenAPI\OpenAPI\Models\Operations\ConfirmCarbonOffset3RequestBody $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfirmCarbonOffset3Response
    {
        $baseUrl = AirtravelMultileg::CONFIRM_CARBON_OFFSET3_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/airtravelMultileg/confirmCarbonOffset');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfirmCarbonOffset3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * confirmPayment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfirmPayment3RequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfirmPayment3Response
     */
	public function confirmPayment3(
        \OpenAPI\OpenAPI\Models\Operations\ConfirmPayment3RequestBody $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfirmPayment3Response
    {
        $baseUrl = AirtravelMultileg::CONFIRM_PAYMENT3_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/airtravelMultileg/confirmPayment');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfirmPayment3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * confirmTransaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfirmPaymentOfTransaction3RequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfirmPaymentOfTransaction3Response
     */
	public function confirmPaymentOfTransaction3(
        \OpenAPI\OpenAPI\Models\Operations\ConfirmPaymentOfTransaction3RequestBody $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfirmPaymentOfTransaction3Response
    {
        $baseUrl = AirtravelMultileg::CONFIRM_PAYMENT_OF_TRANSACTION3_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/airtravelMultileg/confirmTransaction');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfirmPaymentOfTransaction3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * confirmPlanting
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfirmsPlanting3RequestBody $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfirmsPlanting3Response
     */
	public function confirmsPlanting3(
        \OpenAPI\OpenAPI\Models\Operations\ConfirmsPlanting3RequestBody $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfirmsPlanting3Response
    {
        $baseUrl = AirtravelMultileg::CONFIRMS_PLANTING3_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/airtravelMultileg/confirmPlanting');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfirmsPlanting3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}