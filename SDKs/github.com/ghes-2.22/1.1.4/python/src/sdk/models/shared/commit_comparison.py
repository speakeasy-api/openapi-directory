"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import commit as shared_commit
from ..shared import diff_entry as shared_diff_entry
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CommitComparisonStatusEnum(str, Enum):
    DIVERGED = 'diverged'
    AHEAD = 'ahead'
    BEHIND = 'behind'
    IDENTICAL = 'identical'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitComparison:
    r"""Commit Comparison"""
    
    ahead_by: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ahead_by') }})  
    base_commit: shared_commit.Commit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_commit') }})
    r"""Commit"""  
    behind_by: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('behind_by') }})  
    commits: list[shared_commit.Commit] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commits') }})  
    diff_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diff_url') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    merge_base_commit: shared_commit.Commit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merge_base_commit') }})
    r"""Commit"""  
    patch_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patch_url') }})  
    permalink_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permalink_url') }})  
    status: CommitComparisonStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    total_commits: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_commits') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    files: Optional[list[shared_diff_entry.DiffEntry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files'), 'exclude': lambda f: f is None }})  
    