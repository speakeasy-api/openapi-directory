// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateApplicationHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateApplicationRequestBodyDefinition - The application definition for a particular application.
type CreateApplicationRequestBodyDefinition struct {
	Content    *string `json:"content,omitempty"`
	S3Location *string `json:"s3Location,omitempty"`
}

// CreateApplicationRequestBodyEngineTypeEnum - The type of the target platform for this application.
type CreateApplicationRequestBodyEngineTypeEnum string

const (
	CreateApplicationRequestBodyEngineTypeEnumMicrofocus CreateApplicationRequestBodyEngineTypeEnum = "microfocus"
	CreateApplicationRequestBodyEngineTypeEnumBluage     CreateApplicationRequestBodyEngineTypeEnum = "bluage"
)

func (e *CreateApplicationRequestBodyEngineTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "microfocus":
		fallthrough
	case "bluage":
		*e = CreateApplicationRequestBodyEngineTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateApplicationRequestBodyEngineTypeEnum: %s", s)
	}
}

type CreateApplicationRequestBody struct {
	// Unique, case-sensitive identifier the service generates to ensure the idempotency of the request to create an application. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires.
	ClientToken *string `json:"clientToken,omitempty"`
	// The application definition for a particular application.
	Definition CreateApplicationRequestBodyDefinition `json:"definition"`
	// The description of the application.
	Description *string `json:"description,omitempty"`
	// The type of the target platform for this application.
	EngineType CreateApplicationRequestBodyEngineTypeEnum `json:"engineType"`
	// The identifier of a customer managed key.
	KmsKeyID *string `json:"kmsKeyId,omitempty"`
	// The unique identifier of the application.
	Name string `json:"name"`
	// A list of tags to apply to the application.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateApplicationRequest struct {
	Headers CreateApplicationHeaders
	Request CreateApplicationRequestBody `request:"mediaType=application/json"`
}

type CreateApplicationResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateApplicationResponse *shared.CreateApplicationResponse
	// InternalServerException
	InternalServerException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
