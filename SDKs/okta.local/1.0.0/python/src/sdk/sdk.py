"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .create_user import CreateUser
from .credential_operations import CredentialOperations
from .lifecycle_operations import LifecycleOperations
from sdk.models import operations

SERVERS = [
    "http://okta.local",
    "https://,",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The [Okta User API](/docs/api/rest/users.html) provides operations to manage users in your organization."""
    create_user: CreateUser
    credential_operations: CredentialOperations
    lifecycle_operations: LifecycleOperations

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.create_user = CreateUser(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.credential_operations = CredentialOperations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.lifecycle_operations = LifecycleOperations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    def clear_user_sessions(self, request: operations.ClearUserSessionsRequest) -> operations.ClearUserSessionsResponse:
        r"""Clear User Sessions
        Clear User Sessions
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClearUserSessionsRequest, base_url, '/api/v1/users/{userId}/sessions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClearUserSessionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def find_user(self, request: operations.FindUserRequest) -> operations.FindUserResponse:
        r"""Find User
        Find User
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FindUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_assigned_app_links(self, request: operations.GetAssignedAppLinksRequest) -> operations.GetAssignedAppLinksResponse:
        r"""Get Assigned App Links
        Get Assigned App Links
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAssignedAppLinksRequest, base_url, '/api/v1/users/{userId}/appLinks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('GET', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAssignedAppLinksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_current_user(self, request: bytes) -> operations.GetCurrentUserResponse:
        r"""Get Current User
        Get Current User
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/users/me'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('GET', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCurrentUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_groups_for_user(self, request: operations.GetGroupsForUserRequest) -> operations.GetGroupsForUserResponse:
        r"""Get Groups for User
        Get Groups for User
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupsForUserRequest, base_url, '/api/v1/users/{userId}/groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('GET', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupsForUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_user(self, request: operations.GetUserRequest) -> operations.GetUserResponse:
        r"""Get User
        Get User
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserRequest, base_url, '/api/v1/users/{userId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('GET', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_factors(self, request: operations.ResetFactorsRequest) -> operations.ResetFactorsResponse:
        r"""Reset Factors
        Reset Factors
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResetFactorsRequest, base_url, '/api/v1/users/{userId}/lifecycle/reset_factors', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetFactorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    