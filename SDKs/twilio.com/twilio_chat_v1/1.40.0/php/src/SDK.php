<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const CREATE_CHANNEL_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const CREATE_CREDENTIAL_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const CREATE_INVITE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const CREATE_MEMBER_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const CREATE_MESSAGE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const CREATE_ROLE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const CREATE_SERVICE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const CREATE_USER_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const DELETE_CHANNEL_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const DELETE_CREDENTIAL_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const DELETE_INVITE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const DELETE_MEMBER_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const DELETE_MESSAGE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const DELETE_ROLE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const DELETE_SERVICE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const DELETE_USER_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const FETCH_CHANNEL_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const FETCH_CREDENTIAL_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const FETCH_INVITE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const FETCH_MEMBER_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const FETCH_MESSAGE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const FETCH_ROLE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const FETCH_SERVICE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const FETCH_USER_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const LIST_CHANNEL_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const LIST_CREDENTIAL_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const LIST_INVITE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const LIST_MEMBER_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const LIST_MESSAGE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const LIST_ROLE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const LIST_SERVICE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const LIST_USER_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const LIST_USER_CHANNEL_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const UPDATE_CHANNEL_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const UPDATE_CREDENTIAL_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const UPDATE_MEMBER_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const UPDATE_MESSAGE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const UPDATE_ROLE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const UPDATE_SERVICE_SERVERS = [
		'https://chat.twilio.com',
	];
	
	public const UPDATE_USER_SERVERS = [
		'https://chat.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateChannelResponse
     */
	public function createChannel(
        \OpenAPI\OpenAPI\Models\Operations\CreateChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateChannelResponse
    {
        $baseUrl = SDK::CREATE_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels', \OpenAPI\OpenAPI\Models\Operations\CreateChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createCredential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialCreateCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCredentialResponse
     */
	public function createCredential(
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialCreateCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCredentialResponse
    {
        $baseUrl = SDK::CREATE_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1Credential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1Credential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createInvite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInviteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInviteSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInviteResponse
     */
	public function createInvite(
        \OpenAPI\OpenAPI\Models\Operations\CreateInviteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInviteSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInviteResponse
    {
        $baseUrl = SDK::CREATE_INVITE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites', \OpenAPI\OpenAPI\Models\Operations\CreateInviteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceChannelInvite = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceChannelInvite', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createMember
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMemberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMemberResponse
     */
	public function createMember(
        \OpenAPI\OpenAPI\Models\Operations\CreateMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateMemberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMemberResponse
    {
        $baseUrl = SDK::CREATE_MEMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members', \OpenAPI\OpenAPI\Models\Operations\CreateMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceChannelMember = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceChannelMember', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createMessage
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMessageResponse
     */
	public function createMessage(
        \OpenAPI\OpenAPI\Models\Operations\CreateMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateMessageSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMessageResponse
    {
        $baseUrl = SDK::CREATE_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages', \OpenAPI\OpenAPI\Models\Operations\CreateMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceChannelMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceChannelMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createRole
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateRoleResponse
     */
	public function createRole(
        \OpenAPI\OpenAPI\Models\Operations\CreateRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateRoleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateRoleResponse
    {
        $baseUrl = SDK::CREATE_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Roles', \OpenAPI\OpenAPI\Models\Operations\CreateRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
     */
	public function createService(
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateServiceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse
    {
        $baseUrl = SDK::CREATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createUser
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUserResponse
     */
	public function createUser(
        \OpenAPI\OpenAPI\Models\Operations\CreateUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUserResponse
    {
        $baseUrl = SDK::CREATE_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Users', \OpenAPI\OpenAPI\Models\Operations\CreateUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteChannelResponse
     */
	public function deleteChannel(
        \OpenAPI\OpenAPI\Models\Operations\DeleteChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteChannelResponse
    {
        $baseUrl = SDK::DELETE_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteCredential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialResponse
     */
	public function deleteCredential(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialResponse
    {
        $baseUrl = SDK::DELETE_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteInvite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteInviteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteInviteSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteInviteResponse
     */
	public function deleteInvite(
        \OpenAPI\OpenAPI\Models\Operations\DeleteInviteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteInviteSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteInviteResponse
    {
        $baseUrl = SDK::DELETE_INVITE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteInviteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteMember
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMemberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMemberResponse
     */
	public function deleteMember(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMemberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMemberResponse
    {
        $baseUrl = SDK::DELETE_MEMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteMessage
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMessageResponse
     */
	public function deleteMessage(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMessageSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMessageResponse
    {
        $baseUrl = SDK::DELETE_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteRole
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRoleResponse
     */
	public function deleteRole(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRoleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRoleResponse
    {
        $baseUrl = SDK::DELETE_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Roles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
     */
	public function deleteService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteServiceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse
    {
        $baseUrl = SDK::DELETE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteUser
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserResponse
     */
	public function deleteUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserResponse
    {
        $baseUrl = SDK::DELETE_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Users/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * fetchChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchChannelResponse
     */
	public function fetchChannel(
        \OpenAPI\OpenAPI\Models\Operations\FetchChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchChannelResponse
    {
        $baseUrl = SDK::FETCH_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchCredential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCredentialResponse
     */
	public function fetchCredential(
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCredentialResponse
    {
        $baseUrl = SDK::FETCH_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1Credential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1Credential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchInvite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInviteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInviteSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchInviteResponse
     */
	public function fetchInvite(
        \OpenAPI\OpenAPI\Models\Operations\FetchInviteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchInviteSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchInviteResponse
    {
        $baseUrl = SDK::FETCH_INVITE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchInviteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceChannelInvite = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceChannelInvite', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchMember
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMemberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMemberResponse
     */
	public function fetchMember(
        \OpenAPI\OpenAPI\Models\Operations\FetchMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMemberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMemberResponse
    {
        $baseUrl = SDK::FETCH_MEMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceChannelMember = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceChannelMember', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchMessage
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMessageResponse
     */
	public function fetchMessage(
        \OpenAPI\OpenAPI\Models\Operations\FetchMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMessageSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMessageResponse
    {
        $baseUrl = SDK::FETCH_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceChannelMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceChannelMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchRole
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRoleResponse
     */
	public function fetchRole(
        \OpenAPI\OpenAPI\Models\Operations\FetchRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRoleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRoleResponse
    {
        $baseUrl = SDK::FETCH_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Roles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
     */
	public function fetchService(
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchServiceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse
    {
        $baseUrl = SDK::FETCH_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUser
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUserResponse
     */
	public function fetchUser(
        \OpenAPI\OpenAPI\Models\Operations\FetchUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUserResponse
    {
        $baseUrl = SDK::FETCH_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Users/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceUser', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListChannelResponse
     */
	public function listChannel(
        \OpenAPI\OpenAPI\Models\Operations\ListChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListChannelResponse
    {
        $baseUrl = SDK::LIST_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels', \OpenAPI\OpenAPI\Models\Operations\ListChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListChannelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listChannelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListChannelListChannelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listCredential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCredentialResponse
     */
	public function listCredential(
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCredentialResponse
    {
        $baseUrl = SDK::LIST_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCredentialRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCredentialResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCredentialListCredentialResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listInvite
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInviteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInviteSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInviteResponse
     */
	public function listInvite(
        \OpenAPI\OpenAPI\Models\Operations\ListInviteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInviteSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInviteResponse
    {
        $baseUrl = SDK::LIST_INVITE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites', \OpenAPI\OpenAPI\Models\Operations\ListInviteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInviteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInviteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInviteListInviteResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listMember
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMemberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMemberResponse
     */
	public function listMember(
        \OpenAPI\OpenAPI\Models\Operations\ListMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMemberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMemberResponse
    {
        $baseUrl = SDK::LIST_MEMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members', \OpenAPI\OpenAPI\Models\Operations\ListMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMemberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMemberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMemberListMemberResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listMessage
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMessageResponse
     */
	public function listMessage(
        \OpenAPI\OpenAPI\Models\Operations\ListMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMessageSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMessageResponse
    {
        $baseUrl = SDK::LIST_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages', \OpenAPI\OpenAPI\Models\Operations\ListMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMessageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMessageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMessageListMessageResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listRole
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRoleResponse
     */
	public function listRole(
        \OpenAPI\OpenAPI\Models\Operations\ListRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRoleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRoleResponse
    {
        $baseUrl = SDK::LIST_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Roles', \OpenAPI\OpenAPI\Models\Operations\ListRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRoleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRoleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRoleListRoleResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
     */
	public function listService(
        \OpenAPI\OpenAPI\Models\Operations\ListServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListServiceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse
    {
        $baseUrl = SDK::LIST_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListServiceListServiceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUser
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUserResponse
     */
	public function listUser(
        \OpenAPI\OpenAPI\Models\Operations\ListUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUserResponse
    {
        $baseUrl = SDK::LIST_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Users', \OpenAPI\OpenAPI\Models\Operations\ListUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUserRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUserListUserResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all Channels for a given User.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUserChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUserChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUserChannelResponse
     */
	public function listUserChannel(
        \OpenAPI\OpenAPI\Models\Operations\ListUserChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUserChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUserChannelResponse
    {
        $baseUrl = SDK::LIST_USER_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Users/{UserSid}/Channels', \OpenAPI\OpenAPI\Models\Operations\ListUserChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUserChannelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUserChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUserChannelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUserChannelListUserChannelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateChannelResponse
     */
	public function updateChannel(
        \OpenAPI\OpenAPI\Models\Operations\UpdateChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateChannelResponse
    {
        $baseUrl = SDK::UPDATE_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateCredential
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialResponse
     */
	public function updateCredential(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialResponse
    {
        $baseUrl = SDK::UPDATE_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Credentials/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1Credential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1Credential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateMember
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMemberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMemberResponse
     */
	public function updateMember(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateMemberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMemberResponse
    {
        $baseUrl = SDK::UPDATE_MEMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceChannelMember = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceChannelMember', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateMessage
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMessageResponse
     */
	public function updateMessage(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateMessageSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMessageResponse
    {
        $baseUrl = SDK::UPDATE_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceChannelMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceChannelMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateRole
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRoleResponse
     */
	public function updateRole(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoleSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRoleResponse
    {
        $baseUrl = SDK::UPDATE_ROLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Roles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceRole = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceRole', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
     */
	public function updateService(
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateServiceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse
    {
        $baseUrl = SDK::UPDATE_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1Service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateUser
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUserResponse
     */
	public function updateUser(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUserResponse
    {
        $baseUrl = SDK::UPDATE_USER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Services/{ServiceSid}/Users/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->chatV1ServiceUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChatV1ServiceUser', 'json');
            }
        }

        return $response;
    }
}