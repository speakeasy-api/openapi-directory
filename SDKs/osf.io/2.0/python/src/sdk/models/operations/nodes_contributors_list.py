"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class NodesContributorsListRequest:
    
    node_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'node_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the node."""  
    
class NodesContributorsListContributorAttributesPermissionEnum(str, Enum):
    r"""The permission level of the contributor. The default value is 'write'."""
    READ = 'read'
    WRITE = 'write'
    ADMIN = 'admin'


@dataclasses.dataclass
class NodesContributorsListContributorAttributes:
    r"""The properties of the contributor entity."""
    
    bibliographic: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not the contributor will be included in citations for the node. The default value is true."""  
    index: Optional[int] = dataclasses.field(default=None)
    r"""The position of this contributor in the list of project contributors and in project citations."""  
    permission: Optional[NodesContributorsListContributorAttributesPermissionEnum] = dataclasses.field(default=None)
    r"""The permission level of the contributor. The default value is 'write'."""  
    unregistered_contributor: Optional[str] = dataclasses.field(default=None)
    r"""The assigned name of the contributor if the contributor has not yet claimed their account."""  
    

@dataclasses.dataclass
class NodesContributorsListContributorLinks:
    r"""URLs to alternative representations of the contributor entity."""
    
    self_: Optional[str] = dataclasses.field(default=None)
    r"""A link to the the canonical API endpoint for the contributor."""  
    

@dataclasses.dataclass
class NodesContributorsListContributorRelationships:
    r"""URLs to other entities or entity collections that have a relationship to the contributor entity."""
    
    node: str = dataclasses.field()
    r"""A relationship to the node that was created for the preprint, or from which the preprint was created."""  
    user: str = dataclasses.field()
    r"""A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."""  
    

@dataclasses.dataclass
class NodesContributorsListContributor:
    
    relationships: NodesContributorsListContributorRelationships = dataclasses.field()
    r"""URLs to other entities or entity collections that have a relationship to the contributor entity."""  
    type: str = dataclasses.field()
    r"""The type identifier of the contributor entity (`contributors`)."""  
    attributes: Optional[NodesContributorsListContributorAttributes] = dataclasses.field(default=None)
    r"""The properties of the contributor entity."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."""  
    links: Optional[NodesContributorsListContributorLinks] = dataclasses.field(default=None)
    r"""URLs to alternative representations of the contributor entity."""  
    

@dataclasses.dataclass
class NodesContributorsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    