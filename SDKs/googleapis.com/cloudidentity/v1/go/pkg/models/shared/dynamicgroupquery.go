// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DynamicGroupQueryResourceTypeEnum - Resource type for the Dynamic Group Query
type DynamicGroupQueryResourceTypeEnum string

const (
	DynamicGroupQueryResourceTypeEnumResourceTypeUnspecified DynamicGroupQueryResourceTypeEnum = "RESOURCE_TYPE_UNSPECIFIED"
	DynamicGroupQueryResourceTypeEnumUser                    DynamicGroupQueryResourceTypeEnum = "USER"
)

func (e DynamicGroupQueryResourceTypeEnum) ToPointer() *DynamicGroupQueryResourceTypeEnum {
	return &e
}

func (e *DynamicGroupQueryResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESOURCE_TYPE_UNSPECIFIED":
		fallthrough
	case "USER":
		*e = DynamicGroupQueryResourceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DynamicGroupQueryResourceTypeEnum: %v", v)
	}
}

// DynamicGroupQuery - Defines a query on a resource.
type DynamicGroupQuery struct {
	// Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`
	Query *string `json:"query,omitempty"`
	// Resource type for the Dynamic Group Query
	ResourceType *DynamicGroupQueryResourceTypeEnum `json:"resourceType,omitempty"`
}
