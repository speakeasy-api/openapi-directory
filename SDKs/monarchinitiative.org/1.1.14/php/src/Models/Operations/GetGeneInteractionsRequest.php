<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetGeneInteractionsRequest
{
    /**
     * Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
     * 
     * @var ?bool $direct
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=direct')]
    public ?bool $direct = null;
    
    /**
     * Set true to exclude inferred taxa
     * 
     * @var ?bool $directTaxon
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=direct_taxon')]
    public ?bool $directTaxon = null;
    
    /**
     * Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
     * 
     * @var ?string $evidence
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=evidence')]
    public ?string $evidence = null;
    
    /**
     * If true, excludes associations that involve IEAs (ECO:0000501)
     * 
     * @var ?bool $excludeAutomaticAssertions
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=exclude_automatic_assertions')]
    public ?bool $excludeAutomaticAssertions = null;
    
    /**
     * Enable faceting
     * 
     * @var ?bool $facet
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=facet')]
    public ?bool $facet = null;
    
    /**
     * Fields to facet on
     * 
     * @var ?array<string> $facetFields
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=facet_fields')]
    public ?array $facetFields = null;
    
    /**
     * If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
     * 
     * @var ?bool $fetchObjects
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=fetch_objects')]
    public ?bool $fetchObjects = null;
    
    /**
     * id, e.g. NCBIGene:3630. Equivalent IDs can be used with same results
     * 
     * @var string $id
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=id')]
    public string $id;
    
    /**
     * Query string to filter documents
     * 
     * @var ?string $q
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=q')]
    public ?string $q = null;
    
    /**
     * A relation CURIE to filter associations
     * 
     * @var ?string $relation
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=relation')]
    public ?string $relation = null;
    
    /**
     * number of rows
     * 
     * @var ?int $rows
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=rows')]
    public ?int $rows = null;
    
    /**
     * Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
     * 
     * @var ?array<string> $slim
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=slim')]
    public ?array $slim = null;
    
    /**
     * Sorting responses <field> <desc,asc>
     * 
     * @var ?string $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?string $sort = null;
    
    /**
     * beginning row
     * 
     * @var ?int $start
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=start')]
    public ?int $start = null;
    
    /**
     * One or more taxon CURIE to filter associations by subject taxon; includes inferred associations by default
     * 
     * @var ?array<string> $taxon
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=taxon')]
    public ?array $taxon = null;
    
    /**
     * If true, excludes evidence objects in response
     * 
     * @var ?bool $unselectEvidence
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=unselect_evidence')]
    public ?bool $unselectEvidence = null;
    
    /**
     * If true, returns results in compact associations format
     * 
     * @var ?bool $useCompactAssociations
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=use_compact_associations')]
    public ?bool $useCompactAssociations = null;
    
	public function __construct()
	{
		$this->direct = null;
		$this->directTaxon = null;
		$this->evidence = null;
		$this->excludeAutomaticAssertions = null;
		$this->facet = null;
		$this->facetFields = null;
		$this->fetchObjects = null;
		$this->id = "";
		$this->q = null;
		$this->relation = null;
		$this->rows = null;
		$this->slim = null;
		$this->sort = null;
		$this->start = null;
		$this->taxon = null;
		$this->unselectEvidence = null;
		$this->useCompactAssociations = null;
	}
}
