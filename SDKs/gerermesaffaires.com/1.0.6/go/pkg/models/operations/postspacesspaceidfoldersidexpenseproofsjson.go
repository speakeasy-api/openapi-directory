// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDExpenseProofsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum string

const (
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnumCab PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum = "CAB"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnumIkm PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum = "IKM"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnumPrk PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum = "PRK"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnumTxi PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum = "TXI"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnumVoy PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum = "VOY"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnumPtt PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum = "PTT"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnumFhr PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum = "FHR"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnumDiv PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum = "DIV"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnumRes PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum = "RES"
)

func (e *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAB":
		fallthrough
	case "IKM":
		fallthrough
	case "PRK":
		fallthrough
	case "TXI":
		fallthrough
	case "VOY":
		fallthrough
	case "PTT":
		fallthrough
	case "FHR":
		fallthrough
	case "DIV":
		fallthrough
	case "RES":
		*e = PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2Accounting struct {
	AccountedOn *string                                                                        `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                        `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnum string

const (
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnumR PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnum = "R"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnumV PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnum = "V"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnumW PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnum = "W"
)

func (e *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "R":
		fallthrough
	case "V":
		fallthrough
	case "W":
		*e = PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2 struct {
	Account         *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum `json:"Account,omitempty"`
	Accounting      *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2Accounting  `json:"Accounting,omitempty"`
	ArchivalDate    *string                                                             `json:"ArchivalDate,omitempty"`
	Author          *string                                                             `json:"Author,omitempty"`
	BeforeVAT       *float64                                                            `json:"BeforeVAT,omitempty"`
	Code            *string                                                             `json:"Code,omitempty"`
	Comment         *string                                                             `json:"Comment,omitempty"`
	Date            *string                                                             `json:"Date,omitempty"`
	ExpenseDate     *string                                                             `json:"ExpenseDate,omitempty"`
	ExpenseReportID *string                                                             `json:"ExpenseReportId,omitempty"`
	File            PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2File         `json:"File"`
	Provider        *string                                                             `json:"Provider,omitempty"`
	Reason          *string                                                             `json:"Reason,omitempty"`
	Status          *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnum  `json:"Status,omitempty"`
	Title           string                                                              `json:"Title"`
	Vat             *float64                                                            `json:"VAT,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum string

const (
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnumCab PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum = "CAB"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnumIkm PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum = "IKM"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnumPrk PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum = "PRK"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnumTxi PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum = "TXI"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnumVoy PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum = "VOY"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnumPtt PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum = "PTT"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnumFhr PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum = "FHR"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnumDiv PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum = "DIV"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnumRes PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum = "RES"
)

func (e *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAB":
		fallthrough
	case "IKM":
		fallthrough
	case "PRK":
		fallthrough
	case "TXI":
		fallthrough
	case "VOY":
		fallthrough
	case "PTT":
		fallthrough
	case "FHR":
		fallthrough
	case "DIV":
		fallthrough
	case "RES":
		*e = PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnum string

const (
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnumR PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnum = "R"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnumV PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnum = "V"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnumW PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnum = "W"
)

func (e *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "R":
		fallthrough
	case "V":
		fallthrough
	case "W":
		*e = PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1 struct {
	Account         *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum `json:"Account,omitempty"`
	ArchivalDate    *string                                                             `json:"ArchivalDate,omitempty"`
	BeforeVAT       *float64                                                            `json:"BeforeVAT,omitempty"`
	DocumentID      string                                                              `json:"DocumentId"`
	ExpenseDate     *string                                                             `json:"ExpenseDate,omitempty"`
	ExpenseReportID *string                                                             `json:"ExpenseReportId,omitempty"`
	Provider        *string                                                             `json:"Provider,omitempty"`
	Reason          *string                                                             `json:"Reason,omitempty"`
	Status          *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnum  `json:"Status,omitempty"`
	Vat             *float64                                                            `json:"VAT,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1 PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/expense-proofs_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2 PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/expense-proofs_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1 *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1
	PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2 *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONPostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1(postSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1 PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1) PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1

	return PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON{
		PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1: &postSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONPostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2(postSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2 PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2) PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2

	return PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON{
		PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2: &postSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1 = postSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2 = postSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSONTypePostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDExpenseProofsJSONRequest struct {
	// Expense proof to add (either DocumentId, ExpenseDate either (File,Name,Content64Encoded,Title,ExpenseDate) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON `request:"mediaType=application/json"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDExpenseProofsJSON201ApplicationJSON - Id of expense proof created
type PostSpacesSpaceIDFoldersIDExpenseProofsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of expense proof created
	PostSpacesSpaceIDFoldersIDExpenseProofsJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDExpenseProofsJSON201ApplicationJSON
}
