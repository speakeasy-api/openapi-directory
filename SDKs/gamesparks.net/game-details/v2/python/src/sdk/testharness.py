"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TestHarness:
    r"""Test Harness Restv 2 Controller"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_test_harness_scenario_using_post(self, request: operations.CreateTestHarnessScenarioUsingPOSTRequest) -> operations.CreateTestHarnessScenarioUsingPOSTResponse:
        r"""createTestHarnessScenario"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateTestHarnessScenarioUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/admin/testHarness/scenarios', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_harness_scenario_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTestHarnessScenarioUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestHarnessScenarioModel])
                res.test_harness_scenario_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def delete_test_harness_scenario_using_delete(self, request: operations.DELETETestHarnessScenarioUsingDELETERequest) -> operations.DELETETestHarnessScenarioUsingDELETEResponse:
        r"""deleteTestHarnessScenario"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DELETETestHarnessScenarioUsingDELETERequest, base_url, '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DELETETestHarnessScenarioUsingDELETEResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_test_harness_scenario_using_get(self, request: operations.GETTestHarnessScenarioUsingGETRequest) -> operations.GETTestHarnessScenarioUsingGETResponse:
        r"""getTestHarnessScenario"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETTestHarnessScenarioUsingGETRequest, base_url, '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETTestHarnessScenarioUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestHarnessScenarioModel])
                res.test_harness_scenario_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_test_harness_scenarios_using_get(self, request: operations.GETTestHarnessScenariosUsingGETRequest) -> operations.GETTestHarnessScenariosUsingGETResponse:
        r"""getTestHarnessScenarios"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETTestHarnessScenariosUsingGETRequest, base_url, '/restv2/game/{apiKey}/admin/testHarness/scenarios', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETTestHarnessScenariosUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TestHarnessScenarioModel]])
                res.test_harness_scenario_models = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def update_test_harness_scenario_using_put(self, request: operations.UpdateTestHarnessScenarioUsingPUTRequest) -> operations.UpdateTestHarnessScenarioUsingPUTResponse:
        r"""updateTestHarnessScenario"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTestHarnessScenarioUsingPUTRequest, base_url, '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_harness_scenario_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTestHarnessScenarioUsingPUTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestHarnessScenarioModel])
                res.test_harness_scenario_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    