// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type BillingAggregatedInformationGetAllSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// BillingAggregatedInformationGetAllPeriodEnum - Type of period that should be included in the Billing Information
type BillingAggregatedInformationGetAllPeriodEnum string

const (
	BillingAggregatedInformationGetAllPeriodEnumPrevious BillingAggregatedInformationGetAllPeriodEnum = "Previous"
	BillingAggregatedInformationGetAllPeriodEnumCurrent  BillingAggregatedInformationGetAllPeriodEnum = "Current"
	BillingAggregatedInformationGetAllPeriodEnumNext     BillingAggregatedInformationGetAllPeriodEnum = "Next"
)

func (e *BillingAggregatedInformationGetAllPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Previous":
		fallthrough
	case "Current":
		fallthrough
	case "Next":
		*e = BillingAggregatedInformationGetAllPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetAllPeriodEnum: %s", s)
	}
}

// BillingAggregatedInformationGetAllServiceEnum - Type of service that should be included in the Billing Information
type BillingAggregatedInformationGetAllServiceEnum string

const (
	BillingAggregatedInformationGetAllServiceEnumTest  BillingAggregatedInformationGetAllServiceEnum = "Test"
	BillingAggregatedInformationGetAllServiceEnumBuild BillingAggregatedInformationGetAllServiceEnum = "Build"
)

func (e *BillingAggregatedInformationGetAllServiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Test":
		fallthrough
	case "Build":
		*e = BillingAggregatedInformationGetAllServiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetAllServiceEnum: %s", s)
	}
}

type BillingAggregatedInformationGetAllRequest struct {
	// Type of period that should be included in the Billing Information
	Period *BillingAggregatedInformationGetAllPeriodEnum `queryParam:"style=form,explode=true,name=period"`
	// Type of service that should be included in the Billing Information
	Service *BillingAggregatedInformationGetAllServiceEnum `queryParam:"style=form,explode=true,name=service"`
	// Controls whether the API should show the original plan when Azure Subscription is not enabled
	ShowOriginalPlans *bool `queryParam:"style=form,explode=true,name=showOriginalPlans"`
}

// BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum string

const (
	BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnumFourHundred         BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum = "400"
	BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnumFourHundredAndThree BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum = "403"
	BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnumFiveHundred         BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum = "500"
)

func (e *BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		fallthrough
	case "403":
		fallthrough
	case "500":
		*e = BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type BillingAggregatedInformationGetAllDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *BillingAggregatedInformationGetAllDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed
	Message *string `json:"message,omitempty"`
}

// BillingAggregatedInformationGetAllDefaultApplicationJSON - Error
type BillingAggregatedInformationGetAllDefaultApplicationJSON struct {
	Error *BillingAggregatedInformationGetAllDefaultApplicationJSONError `json:"error,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum - State of the Azure subscription used for billing
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum string

const (
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnumEnabled  BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum = "Enabled"
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnumDisabled BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum = "Disabled"
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnumNotSet   BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum = "NotSet"
)

func (e *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Enabled":
		fallthrough
	case "Disabled":
		fallthrough
	case "NotSet":
		*e = BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum: %s", s)
	}
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum - Service that receives payments for this billing plan.
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum string

const (
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumNone      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "None"
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumAppCenter BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "AppCenter"
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumGitHub    BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "GitHub"
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumXtc       BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "Xtc"
)

func (e *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "AppCenter":
		fallthrough
	case "GitHub":
		fallthrough
	case "Xtc":
		*e = BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum: %s", s)
	}
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum - Name of the service that the plan applies to.
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum string

const (
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnumBuild BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum = "Build"
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnumTest  BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum = "Test"
)

func (e *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Build":
		fallthrough
	case "Test":
		*e = BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum: %s", s)
	}
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan - Billing Plan
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan struct {
	// Collection of attribute values.
	Attributes map[string]map[string]interface{} `json:"attributes,omitempty"`
	// The Billing Plan ID
	ID *string `json:"id,omitempty"`
	// A collection of named numeric values
	Limits   map[string]float64 `json:"limits,omitempty"`
	ParentID *string            `json:"parentId,omitempty"`
	// Service that receives payments for this billing plan.
	PaymentSource *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum `json:"paymentSource,omitempty"`
	// Price of the Billing Plan
	Price *float64 `json:"price,omitempty"`
	// Name of the service that the plan applies to.
	Service *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlanServiceEnum `json:"service,omitempty"`
	// Version of the Billing Plan schema
	Version *string `json:"version,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccount - Selection of a billing plan
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccount struct {
	// Number of instances of the billing plan.
	Count *int64 `json:"count,omitempty"`
	// Billing Plan
	Plan *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccountPlan `json:"plan,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriod - Billing plans for a given period
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriod struct {
	// Selection of a billing plan
	ByAccount *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriodByAccount `json:"byAccount,omitempty"`
	// Exclusive end of the period.
	EndTime *string `json:"endTime,omitempty"`
	// Inclusive start of the period
	StartTime *string `json:"startTime,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildService - Billing Plans for a single service
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildService struct {
	// Can customer select trial plan for that service (if it exists)?
	CanSelectTrialPlan *bool `json:"canSelectTrialPlan,omitempty"`
	// Billing plans for a given period
	CurrentBillingPeriod *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildServiceCurrentBillingPeriod `json:"currentBillingPeriod,omitempty"`
	// Expiration time of the last selected trial plan. Will be null if trial plan was not used.
	LastTrialPlanExpirationTime *string `json:"lastTrialPlanExpirationTime,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum - Service that receives payments for this billing plan.
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum string

const (
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumNone      BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "None"
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumAppCenter BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "AppCenter"
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumGitHub    BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "GitHub"
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnumXtc       BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum = "Xtc"
)

func (e *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "AppCenter":
		fallthrough
	case "GitHub":
		fallthrough
	case "Xtc":
		*e = BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum: %s", s)
	}
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum - Name of the service that the plan applies to.
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum string

const (
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnumBuild BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum = "Build"
	BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnumTest  BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum = "Test"
)

func (e *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Build":
		fallthrough
	case "Test":
		*e = BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum: %s", s)
	}
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlan - Billing Plan
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlan struct {
	// Collection of attribute values.
	Attributes map[string]map[string]interface{} `json:"attributes,omitempty"`
	// The Billing Plan ID
	ID *string `json:"id,omitempty"`
	// A collection of named numeric values
	Limits   map[string]float64 `json:"limits,omitempty"`
	ParentID *string            `json:"parentId,omitempty"`
	// Service that receives payments for this billing plan.
	PaymentSource *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanPaymentSourceEnum `json:"paymentSource,omitempty"`
	// Price of the Billing Plan
	Price *float64 `json:"price,omitempty"`
	// Name of the service that the plan applies to.
	Service *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlanServiceEnum `json:"service,omitempty"`
	// Version of the Billing Plan schema
	Version *string `json:"version,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccount - Selection of a billing plan
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccount struct {
	// Number of instances of the billing plan.
	Count *int64 `json:"count,omitempty"`
	// Billing Plan
	Plan *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccountPlan `json:"plan,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriod - Billing plans for a given period
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriod struct {
	// Selection of a billing plan
	ByAccount *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriodByAccount `json:"byAccount,omitempty"`
	// Exclusive end of the period.
	EndTime *string `json:"endTime,omitempty"`
	// Inclusive start of the period
	StartTime *string `json:"startTime,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestService - Billing Plans for a single service
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestService struct {
	// Can customer select trial plan for that service (if it exists)?
	CanSelectTrialPlan *bool `json:"canSelectTrialPlan,omitempty"`
	// Billing plans for a given period
	CurrentBillingPeriod *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestServiceCurrentBillingPeriod `json:"currentBillingPeriod,omitempty"`
	// Expiration time of the last selected trial plan. Will be null if trial plan was not used.
	LastTrialPlanExpirationTime *string `json:"lastTrialPlanExpirationTime,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlans - Billing Plans section in the Billing Information
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlans struct {
	// Billing Plans for a single service
	BuildService *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansBuildService `json:"buildService,omitempty"`
	// Billing Plans for a single service
	TestService *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlansTestService `json:"testService,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildServiceCurrentUsagePeriod - Usage for a single period
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildServiceCurrentUsagePeriod struct {
	// A collection of named numeric values
	ByAccount map[string]float64 `json:"byAccount,omitempty"`
	// A collection of  named numeric values grouped by app
	ByApp map[string]map[string]float64 `json:"byApp,omitempty"`
	// Exclusive end time of the usage period.
	EndTime *string `json:"endTime,omitempty"`
	// Inclusive start time of the usage period
	StartTime *string `json:"startTime,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildService - Resource usage for a single Mobile Center service
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildService struct {
	// Usage for a single period
	CurrentUsagePeriod *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildServiceCurrentUsagePeriod `json:"currentUsagePeriod,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestServiceCurrentUsagePeriod - Usage for a single period
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestServiceCurrentUsagePeriod struct {
	// A collection of named numeric values
	ByAccount map[string]float64 `json:"byAccount,omitempty"`
	// A collection of  named numeric values grouped by app
	ByApp map[string]map[string]float64 `json:"byApp,omitempty"`
	// Exclusive end time of the usage period.
	EndTime *string `json:"endTime,omitempty"`
	// Inclusive start time of the usage period
	StartTime *string `json:"startTime,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestService - Resource usage for a single Mobile Center service
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestService struct {
	// Usage for a single period
	CurrentUsagePeriod *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestServiceCurrentUsagePeriod `json:"currentUsagePeriod,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsage - Usage section in the Billing Information
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsage struct {
	// Resource usage for a single Mobile Center service
	BuildService *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageBuildService `json:"buildService,omitempty"`
	// Resource usage for a single Mobile Center service
	TestService *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsageTestService `json:"testService,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillings - Aggregated Billing Information for a user or an organization
type BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillings struct {
	// Unique identifier for the Azure subscription used for billing
	AzureSubscriptionID *string `json:"azureSubscriptionId,omitempty"`
	// State of the Azure subscription used for billing
	AzureSubscriptionState *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsAzureSubscriptionStateEnum `json:"azureSubscriptionState,omitempty"`
	// Billing Plans section in the Billing Information
	BillingPlans *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsBillingPlans `json:"billingPlans,omitempty"`
	// ID of the user or organization
	ID *string `json:"id,omitempty"`
	// The ISO 8601 datetime of last modification
	Timestamp *string `json:"timestamp,omitempty"`
	// Usage section in the Billing Information
	Usage *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillingsUsage `json:"usage,omitempty"`
	// Version of the Billing Information schema
	Version *string `json:"version,omitempty"`
}

// BillingAggregatedInformationGetAll200ApplicationJSON - Aggregated Billing Information for a user an the organizations in which the user is an admin.
type BillingAggregatedInformationGetAll200ApplicationJSON struct {
	// Aggregated Billing Information for a user or an organization
	AggregatedBillings *BillingAggregatedInformationGetAll200ApplicationJSONAggregatedBillings `json:"aggregatedBillings,omitempty"`
}

type BillingAggregatedInformationGetAllResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
	BillingAggregatedInformationGetAll200ApplicationJSONObject *BillingAggregatedInformationGetAll200ApplicationJSON
	// Error code with reason
	BillingAggregatedInformationGetAllDefaultApplicationJSONObject *BillingAggregatedInformationGetAllDefaultApplicationJSON
}
