/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GooglePrivacyDlpV2BigQueryOptions - Options defining BigQuery table and row identifiers.
 */
public class GooglePrivacyDlpV2BigQueryOptions {
    /**
     * References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excludedFields")
    public GooglePrivacyDlpV2FieldId[] excludedFields;
    public GooglePrivacyDlpV2BigQueryOptions withExcludedFields(GooglePrivacyDlpV2FieldId[] excludedFields) {
        this.excludedFields = excludedFields;
        return this;
    }
    
    /**
     * Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identifyingFields")
    public GooglePrivacyDlpV2FieldId[] identifyingFields;
    public GooglePrivacyDlpV2BigQueryOptions withIdentifyingFields(GooglePrivacyDlpV2FieldId[] identifyingFields) {
        this.identifyingFields = identifyingFields;
        return this;
    }
    
    /**
     * Limit scanning only to these fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includedFields")
    public GooglePrivacyDlpV2FieldId[] includedFields;
    public GooglePrivacyDlpV2BigQueryOptions withIncludedFields(GooglePrivacyDlpV2FieldId[] includedFields) {
        this.includedFields = includedFields;
        return this;
    }
    
    /**
     * Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowsLimit")
    public String rowsLimit;
    public GooglePrivacyDlpV2BigQueryOptions withRowsLimit(String rowsLimit) {
        this.rowsLimit = rowsLimit;
        return this;
    }
    
    /**
     * Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowsLimitPercent")
    public Integer rowsLimitPercent;
    public GooglePrivacyDlpV2BigQueryOptions withRowsLimitPercent(Integer rowsLimitPercent) {
        this.rowsLimitPercent = rowsLimitPercent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sampleMethod")
    public GooglePrivacyDlpV2BigQueryOptionsSampleMethodEnum sampleMethod;
    public GooglePrivacyDlpV2BigQueryOptions withSampleMethod(GooglePrivacyDlpV2BigQueryOptionsSampleMethodEnum sampleMethod) {
        this.sampleMethod = sampleMethod;
        return this;
    }
    
    /**
     * Message defining the location of a BigQuery table. A table is uniquely identified by its project_id, dataset_id, and table_name. Within a query a table is often referenced with a string in the format of: `:.` or `..`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tableReference")
    public GooglePrivacyDlpV2BigQueryTable tableReference;
    public GooglePrivacyDlpV2BigQueryOptions withTableReference(GooglePrivacyDlpV2BigQueryTable tableReference) {
        this.tableReference = tableReference;
        return this;
    }
    
}
