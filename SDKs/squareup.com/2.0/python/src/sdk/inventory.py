"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Inventory:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def batch_change_inventory(self, request: shared.BatchChangeInventoryRequest, security: operations.BatchChangeInventorySecurity) -> operations.BatchChangeInventoryResponse:
        r"""BatchChangeInventory
        Applies adjustments and counts to the provided item quantities.
        
        On success: returns the current calculated counts for all objects
        referenced in the request.
        On failure: returns a list of related errors.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/inventory/changes/batch-create'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BatchChangeInventoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchChangeInventoryResponse])
                res.batch_change_inventory_response = out

        return res

    def batch_retrieve_inventory_changes(self, request: shared.BatchRetrieveInventoryChangesRequest, security: operations.BatchRetrieveInventoryChangesSecurity) -> operations.BatchRetrieveInventoryChangesResponse:
        r"""BatchRetrieveInventoryChanges
        Returns historical physical counts and adjustments based on the
        provided filter criteria.
        
        Results are paginated and sorted in ascending order according their
        `occurred_at` timestamp (oldest first).
        
        BatchRetrieveInventoryChanges is a catch-all query endpoint for queries
        that cannot be handled by other, simpler endpoints.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/inventory/changes/batch-retrieve'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BatchRetrieveInventoryChangesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchRetrieveInventoryChangesResponse])
                res.batch_retrieve_inventory_changes_response = out

        return res

    def batch_retrieve_inventory_counts(self, request: shared.BatchRetrieveInventoryCountsRequest, security: operations.BatchRetrieveInventoryCountsSecurity) -> operations.BatchRetrieveInventoryCountsResponse:
        r"""BatchRetrieveInventoryCounts
        Returns current counts for the provided
        [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s at the requested
        [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s.
        
        Results are paginated and sorted in descending order according to their
        `calculated_at` timestamp (newest first).
        
        When `updated_after` is specified, only counts that have changed since that
        time (based on the server timestamp for the most recent change) are
        returned. This allows clients to perform a \"sync\" operation, for example
        in response to receiving a Webhook notification.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/inventory/counts/batch-retrieve'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BatchRetrieveInventoryCountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchRetrieveInventoryCountsResponse])
                res.batch_retrieve_inventory_counts_response = out

        return res

    def deprecated_batch_change_inventory(self, request: shared.BatchChangeInventoryRequest, security: operations.DeprecatedBatchChangeInventorySecurity) -> operations.DeprecatedBatchChangeInventoryResponse:
        r"""DeprecatedBatchChangeInventory
        Deprecated version of [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory) after the endpoint URL 
        is updated to conform to the standard convention.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/inventory/batch-change'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeprecatedBatchChangeInventoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchChangeInventoryResponse])
                res.batch_change_inventory_response = out

        return res

    def deprecated_batch_retrieve_inventory_changes(self, request: shared.BatchRetrieveInventoryChangesRequest, security: operations.DeprecatedBatchRetrieveInventoryChangesSecurity) -> operations.DeprecatedBatchRetrieveInventoryChangesResponse:
        r"""DeprecatedBatchRetrieveInventoryChanges
        Deprecated version of [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes) after the endpoint URL 
        is updated to conform to the standard convention.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/inventory/batch-retrieve-changes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeprecatedBatchRetrieveInventoryChangesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchRetrieveInventoryChangesResponse])
                res.batch_retrieve_inventory_changes_response = out

        return res

    def deprecated_batch_retrieve_inventory_counts(self, request: shared.BatchRetrieveInventoryCountsRequest, security: operations.DeprecatedBatchRetrieveInventoryCountsSecurity) -> operations.DeprecatedBatchRetrieveInventoryCountsResponse:
        r"""DeprecatedBatchRetrieveInventoryCounts
        Deprecated version of [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts) after the endpoint URL 
        is updated to conform to the standard convention.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/inventory/batch-retrieve-counts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeprecatedBatchRetrieveInventoryCountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchRetrieveInventoryCountsResponse])
                res.batch_retrieve_inventory_counts_response = out

        return res

    def deprecated_retrieve_inventory_adjustment(self, request: operations.DeprecatedRetrieveInventoryAdjustmentRequest, security: operations.DeprecatedRetrieveInventoryAdjustmentSecurity) -> operations.DeprecatedRetrieveInventoryAdjustmentResponse:
        r"""DeprecatedRetrieveInventoryAdjustment
        Deprecated version of [RetrieveInventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-adjustment) after the endpoint URL 
        is updated to conform to the standard convention.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeprecatedRetrieveInventoryAdjustmentRequest, base_url, '/v2/inventory/adjustment/{adjustment_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeprecatedRetrieveInventoryAdjustmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveInventoryAdjustmentResponse])
                res.retrieve_inventory_adjustment_response = out

        return res

    def deprecated_retrieve_inventory_physical_count(self, request: operations.DeprecatedRetrieveInventoryPhysicalCountRequest, security: operations.DeprecatedRetrieveInventoryPhysicalCountSecurity) -> operations.DeprecatedRetrieveInventoryPhysicalCountResponse:
        r"""DeprecatedRetrieveInventoryPhysicalCount
        Deprecated version of [RetrieveInventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-physical-count) after the endpoint URL 
        is updated to conform to the standard convention.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeprecatedRetrieveInventoryPhysicalCountRequest, base_url, '/v2/inventory/physical-count/{physical_count_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeprecatedRetrieveInventoryPhysicalCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveInventoryPhysicalCountResponse])
                res.retrieve_inventory_physical_count_response = out

        return res

    def retrieve_inventory_adjustment(self, request: operations.RetrieveInventoryAdjustmentRequest, security: operations.RetrieveInventoryAdjustmentSecurity) -> operations.RetrieveInventoryAdjustmentResponse:
        r"""RetrieveInventoryAdjustment
        Returns the [InventoryAdjustment](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryAdjustment) object
        with the provided `adjustment_id`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveInventoryAdjustmentRequest, base_url, '/v2/inventory/adjustments/{adjustment_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveInventoryAdjustmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveInventoryAdjustmentResponse])
                res.retrieve_inventory_adjustment_response = out

        return res

    def retrieve_inventory_changes(self, request: operations.RetrieveInventoryChangesRequest, security: operations.RetrieveInventoryChangesSecurity) -> operations.RetrieveInventoryChangesResponse:
        r"""RetrieveInventoryChanges
        Returns a set of physical counts and inventory adjustments for the
        provided [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at the requested
        [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s. 
        
        You can achieve the same result by calling [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes) 
        and having the `catalog_object_ids` list contain a single element of the `CatalogObject` ID.
        
        Results are paginated and sorted in descending order according to their
        `occurred_at` timestamp (newest first).
        
        There are no limits on how far back the caller can page. This endpoint can be 
        used to display recent changes for a specific item. For more
        sophisticated queries, use a batch endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveInventoryChangesRequest, base_url, '/v2/inventory/{catalog_object_id}/changes', request)
        
        query_params = utils.get_query_params(operations.RetrieveInventoryChangesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveInventoryChangesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveInventoryChangesResponse])
                res.retrieve_inventory_changes_response = out

        return res

    def retrieve_inventory_count(self, request: operations.RetrieveInventoryCountRequest, security: operations.RetrieveInventoryCountSecurity) -> operations.RetrieveInventoryCountResponse:
        r"""RetrieveInventoryCount
        Retrieves the current calculated stock count for a given
        [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) at a given set of
        [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location)s. Responses are paginated and unsorted.
        For more sophisticated queries, use a batch endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveInventoryCountRequest, base_url, '/v2/inventory/{catalog_object_id}', request)
        
        query_params = utils.get_query_params(operations.RetrieveInventoryCountRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveInventoryCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveInventoryCountResponse])
                res.retrieve_inventory_count_response = out

        return res

    def retrieve_inventory_physical_count(self, request: operations.RetrieveInventoryPhysicalCountRequest, security: operations.RetrieveInventoryPhysicalCountSecurity) -> operations.RetrieveInventoryPhysicalCountResponse:
        r"""RetrieveInventoryPhysicalCount
        Returns the [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount)
        object with the provided `physical_count_id`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveInventoryPhysicalCountRequest, base_url, '/v2/inventory/physical-counts/{physical_count_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveInventoryPhysicalCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveInventoryPhysicalCountResponse])
                res.retrieve_inventory_physical_count_response = out

        return res

    def retrieve_inventory_transfer(self, request: operations.RetrieveInventoryTransferRequest, security: operations.RetrieveInventoryTransferSecurity) -> operations.RetrieveInventoryTransferResponse:
        r"""RetrieveInventoryTransfer
        Returns the [InventoryTransfer](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryTransfer) object
        with the provided `transfer_id`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveInventoryTransferRequest, base_url, '/v2/inventory/transfers/{transfer_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveInventoryTransferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveInventoryTransferResponse])
                res.retrieve_inventory_transfer_response = out

        return res

    