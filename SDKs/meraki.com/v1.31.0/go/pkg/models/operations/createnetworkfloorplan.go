// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type CreateNetworkFloorPlanPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// CreateNetworkFloorPlanRequestBodyBottomLeftCorner - The longitude and latitude of the bottom left corner of your floor plan.
type CreateNetworkFloorPlanRequestBodyBottomLeftCorner struct {
	// Latitude
	Lat *float32 `json:"lat,omitempty"`
	// Longitude
	Lng *float32 `json:"lng,omitempty"`
}

// CreateNetworkFloorPlanRequestBodyBottomRightCorner - The longitude and latitude of the bottom right corner of your floor plan.
type CreateNetworkFloorPlanRequestBodyBottomRightCorner struct {
	// Latitude
	Lat *float32 `json:"lat,omitempty"`
	// Longitude
	Lng *float32 `json:"lng,omitempty"`
}

// CreateNetworkFloorPlanRequestBodyCenter - The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
type CreateNetworkFloorPlanRequestBodyCenter struct {
	// Latitude
	Lat *float32 `json:"lat,omitempty"`
	// Longitude
	Lng *float32 `json:"lng,omitempty"`
}

// CreateNetworkFloorPlanRequestBodyTopLeftCorner - The longitude and latitude of the top left corner of your floor plan.
type CreateNetworkFloorPlanRequestBodyTopLeftCorner struct {
	// Latitude
	Lat *float32 `json:"lat,omitempty"`
	// Longitude
	Lng *float32 `json:"lng,omitempty"`
}

// CreateNetworkFloorPlanRequestBodyTopRightCorner - The longitude and latitude of the top right corner of your floor plan.
type CreateNetworkFloorPlanRequestBodyTopRightCorner struct {
	// Latitude
	Lat *float32 `json:"lat,omitempty"`
	// Longitude
	Lng *float32 `json:"lng,omitempty"`
}

type CreateNetworkFloorPlanRequestBody struct {
	// The longitude and latitude of the bottom left corner of your floor plan.
	BottomLeftCorner *CreateNetworkFloorPlanRequestBodyBottomLeftCorner `json:"bottomLeftCorner,omitempty"`
	// The longitude and latitude of the bottom right corner of your floor plan.
	BottomRightCorner *CreateNetworkFloorPlanRequestBodyBottomRightCorner `json:"bottomRightCorner,omitempty"`
	// The longitude and latitude of the center of your floor plan. The 'center' or two adjacent corners (e.g. 'topLeftCorner' and 'bottomLeftCorner') must be specified. If 'center' is specified, the floor plan is placed over that point with no rotation. If two adjacent corners are specified, the floor plan is rotated to line up with the two specified points. The aspect ratio of the floor plan's image is preserved regardless of which corners/center are specified. (This means if that more than two corners are specified, only two corners may be used to preserve the floor plan's aspect ratio.). No two points can have the same latitude, longitude pair.
	Center *CreateNetworkFloorPlanRequestBodyCenter `json:"center,omitempty"`
	// The file contents (a base 64 encoded string) of your image. Supported formats are PNG, GIF, and JPG. Note that all images are saved as PNG files, regardless of the format they are uploaded in.
	ImageContents string `json:"imageContents"`
	// The name of your floor plan.
	Name string `json:"name"`
	// The longitude and latitude of the top left corner of your floor plan.
	TopLeftCorner *CreateNetworkFloorPlanRequestBodyTopLeftCorner `json:"topLeftCorner,omitempty"`
	// The longitude and latitude of the top right corner of your floor plan.
	TopRightCorner *CreateNetworkFloorPlanRequestBodyTopRightCorner `json:"topRightCorner,omitempty"`
}

type CreateNetworkFloorPlanRequest struct {
	PathParams CreateNetworkFloorPlanPathParams
	Request    CreateNetworkFloorPlanRequestBody `request:"mediaType=application/json"`
}

type CreateNetworkFloorPlanResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CreateNetworkFloorPlan201ApplicationJSONObject map[string]interface{}
}
