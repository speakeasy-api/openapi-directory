// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// TflAPIPresentationEntitiesPrediction - DTO to capture the prediction details
type TflAPIPresentationEntitiesPrediction struct {
	// Bearing (between 0 to 359)
	Bearing *string `json:"bearing,omitempty"`
	// The current location of the vehicle.
	CurrentLocation *string `json:"currentLocation,omitempty"`
	// Name of the destination
	DestinationName *string `json:"destinationName,omitempty"`
	// Naptan Identifier for the prediction's destination
	DestinationNaptanID *string `json:"destinationNaptanId,omitempty"`
	// Direction (unified to inbound/outbound)
	Direction *string `json:"direction,omitempty"`
	// The expected arrival time of the vehicle at the stop/station
	ExpectedArrival *time.Time `json:"expectedArrival,omitempty"`
	// The identitier for the prediction
	ID *string `json:"id,omitempty"`
	// Unique identifier for the Line
	LineID *string `json:"lineId,omitempty"`
	// Line Name
	LineName *string `json:"lineName,omitempty"`
	// The mode name of the station/line the prediction relates to
	ModeName *string `json:"modeName,omitempty"`
	// Identifier for the prediction
	NaptanID *string `json:"naptanId,omitempty"`
	// The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)
	OperationType *int `json:"operationType,omitempty"`
	// Platform name (for bus, this is the stop letter)
	PlatformName *string `json:"platformName,omitempty"`
	// Station name
	StationName *string `json:"stationName,omitempty"`
	// The expiry time for the prediction
	TimeToLive *time.Time `json:"timeToLive,omitempty"`
	// Prediction of the Time to station in seconds
	TimeToStation *int `json:"timeToStation,omitempty"`
	// Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)
	Timestamp *time.Time                                  `json:"timestamp,omitempty"`
	Timing    *TflAPIPresentationEntitiesPredictionTiming `json:"timing,omitempty"`
	// Routing information or other descriptive text about the path of the vehicle towards the destination
	Towards *string `json:"towards,omitempty"`
	// The actual vehicle in transit (for train modes, the leading car of the rolling set)
	VehicleID *string `json:"vehicleId,omitempty"`
}
