// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DeviceFilterAttributeEnum string

const (
	DeviceFilterAttributeEnumArn                 DeviceFilterAttributeEnum = "ARN"
	DeviceFilterAttributeEnumPlatform            DeviceFilterAttributeEnum = "PLATFORM"
	DeviceFilterAttributeEnumOsVersion           DeviceFilterAttributeEnum = "OS_VERSION"
	DeviceFilterAttributeEnumModel               DeviceFilterAttributeEnum = "MODEL"
	DeviceFilterAttributeEnumAvailability        DeviceFilterAttributeEnum = "AVAILABILITY"
	DeviceFilterAttributeEnumFormFactor          DeviceFilterAttributeEnum = "FORM_FACTOR"
	DeviceFilterAttributeEnumManufacturer        DeviceFilterAttributeEnum = "MANUFACTURER"
	DeviceFilterAttributeEnumRemoteAccessEnabled DeviceFilterAttributeEnum = "REMOTE_ACCESS_ENABLED"
	DeviceFilterAttributeEnumRemoteDebugEnabled  DeviceFilterAttributeEnum = "REMOTE_DEBUG_ENABLED"
	DeviceFilterAttributeEnumInstanceArn         DeviceFilterAttributeEnum = "INSTANCE_ARN"
	DeviceFilterAttributeEnumInstanceLabels      DeviceFilterAttributeEnum = "INSTANCE_LABELS"
	DeviceFilterAttributeEnumFleetType           DeviceFilterAttributeEnum = "FLEET_TYPE"
)

func (e DeviceFilterAttributeEnum) ToPointer() *DeviceFilterAttributeEnum {
	return &e
}

func (e *DeviceFilterAttributeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ARN":
		fallthrough
	case "PLATFORM":
		fallthrough
	case "OS_VERSION":
		fallthrough
	case "MODEL":
		fallthrough
	case "AVAILABILITY":
		fallthrough
	case "FORM_FACTOR":
		fallthrough
	case "MANUFACTURER":
		fallthrough
	case "REMOTE_ACCESS_ENABLED":
		fallthrough
	case "REMOTE_DEBUG_ENABLED":
		fallthrough
	case "INSTANCE_ARN":
		fallthrough
	case "INSTANCE_LABELS":
		fallthrough
	case "FLEET_TYPE":
		*e = DeviceFilterAttributeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceFilterAttributeEnum: %v", v)
	}
}
