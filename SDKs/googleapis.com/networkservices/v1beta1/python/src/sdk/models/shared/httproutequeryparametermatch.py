"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HTTPRouteQueryParameterMatch:
    r"""Specifications to match a query parameter in the request."""
    
    exact_match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exactMatch'), 'exclude': lambda f: f is None }})
    r"""The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set."""  
    present_match: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('presentMatch'), 'exclude': lambda f: f is None }})
    r"""Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set."""  
    query_parameter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryParameter'), 'exclude': lambda f: f is None }})
    r"""The name of the query parameter to match."""  
    regex_match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regexMatch'), 'exclude': lambda f: f is None }})
    r"""The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set."""  
    