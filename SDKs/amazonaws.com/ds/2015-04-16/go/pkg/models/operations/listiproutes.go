// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListIPRoutesXAmzTargetEnum
type ListIPRoutesXAmzTargetEnum string

const (
	ListIPRoutesXAmzTargetEnumDirectoryService20150416ListIPRoutes ListIPRoutesXAmzTargetEnum = "DirectoryService_20150416.ListIpRoutes"
)

func (e ListIPRoutesXAmzTargetEnum) ToPointer() *ListIPRoutesXAmzTargetEnum {
	return &e
}

func (e *ListIPRoutesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DirectoryService_20150416.ListIpRoutes":
		*e = ListIPRoutesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListIPRoutesXAmzTargetEnum: %v", v)
	}
}

type ListIPRoutesRequest struct {
	// Pagination limit
	Limit               *string                    `queryParam:"style=form,explode=true,name=Limit"`
	ListIPRoutesRequest shared.ListIPRoutesRequest `request:"mediaType=application/json"`
	// Pagination token
	NextToken         *string                    `queryParam:"style=form,explode=true,name=NextToken"`
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListIPRoutesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListIPRoutesResponse struct {
	// ClientException
	ClientException interface{}
	ContentType     string
	// EntityDoesNotExistException
	EntityDoesNotExistException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// Success
	ListIPRoutesResult *shared.ListIPRoutesResult
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
}
