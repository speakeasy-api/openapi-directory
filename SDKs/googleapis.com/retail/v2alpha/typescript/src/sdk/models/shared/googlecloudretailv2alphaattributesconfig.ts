/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { GoogleCloudRetailV2alphaCatalogAttribute } from "./googlecloudretailv2alphacatalogattribute";
import { Expose, Transform } from "class-transformer";

/**
 * Output only. The AttributeConfigLevel used for this catalog.
 */
export enum GoogleCloudRetailV2alphaAttributesConfigAttributeConfigLevelEnum {
  AttributeConfigLevelUnspecified = "ATTRIBUTE_CONFIG_LEVEL_UNSPECIFIED",
  ProductLevelAttributeConfig = "PRODUCT_LEVEL_ATTRIBUTE_CONFIG",
  CatalogLevelAttributeConfig = "CATALOG_LEVEL_ATTRIBUTE_CONFIG",
}

/**
 * Catalog level attribute config.
 */
export class GoogleCloudRetailV2alphaAttributesConfig extends SpeakeasyBase {
  /**
   * Output only. The AttributeConfigLevel used for this catalog.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attributeConfigLevel" })
  attributeConfigLevel?: GoogleCloudRetailV2alphaAttributesConfigAttributeConfigLevelEnum;

  /**
   * Enable attribute(s) config at catalog level. For example, indexable, dynamic_facetable, or searchable for each attribute. The key is catalog attribute's name. For example: `color`, `brands`, `attributes.custom_attribute`, such as `attributes.xyz`. The maximum number of catalog attributes allowed in a request is 1000.
   */
  @SpeakeasyMetadata({ elemType: GoogleCloudRetailV2alphaCatalogAttribute })
  @Expose({ name: "catalogAttributes" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, GoogleCloudRetailV2alphaCatalogAttribute> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          GoogleCloudRetailV2alphaCatalogAttribute
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  catalogAttributes?: Record<string, GoogleCloudRetailV2alphaCatalogAttribute>;

  /**
   * Required. Immutable. The fully qualified resource name of the attribute config. Format: `projects/* /locations/* /catalogs/* /attributesConfig`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}
