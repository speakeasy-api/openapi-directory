/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Deprecated. Must use the MetricDescriptor.launch_stage instead.
 */
export enum MetricDescriptorMetadataLaunchStageEnum {
  LaunchStageUnspecified = "LAUNCH_STAGE_UNSPECIFIED",
  Unimplemented = "UNIMPLEMENTED",
  Prelaunch = "PRELAUNCH",
  EarlyAccess = "EARLY_ACCESS",
  Alpha = "ALPHA",
  Beta = "BETA",
  Ga = "GA",
  Deprecated = "DEPRECATED",
}

/**
 * Additional annotations that can be used to guide the usage of a metric.
 */
export class MetricDescriptorMetadata extends SpeakeasyBase {
  /**
   * The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ingestDelay" })
  ingestDelay?: string;

  /**
   * Deprecated. Must use the MetricDescriptor.launch_stage instead.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "launchStage" })
  launchStage?: MetricDescriptorMetadataLaunchStageEnum;

  /**
   * The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "samplePeriod" })
  samplePeriod?: string;
}
