// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TreatMissingDataEnum string

const (
	TreatMissingDataEnumBreaching    TreatMissingDataEnum = "breaching"
	TreatMissingDataEnumNotBreaching TreatMissingDataEnum = "notBreaching"
	TreatMissingDataEnumIgnore       TreatMissingDataEnum = "ignore"
	TreatMissingDataEnumMissing      TreatMissingDataEnum = "missing"
)

func (e TreatMissingDataEnum) ToPointer() *TreatMissingDataEnum {
	return &e
}

func (e *TreatMissingDataEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "breaching":
		fallthrough
	case "notBreaching":
		fallthrough
	case "ignore":
		fallthrough
	case "missing":
		*e = TreatMissingDataEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TreatMissingDataEnum: %v", v)
	}
}
