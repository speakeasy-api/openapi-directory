"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listactiveviolationsresponse as shared_listactiveviolationsresponse
from enum import Enum
from typing import Any, Optional

class ListActiveViolationsBehaviorCriteriaTypeEnum(str, Enum):
    r"""The criteria for a behavior."""
    STATIC = 'STATIC'
    STATISTICAL = 'STATISTICAL'
    MACHINE_LEARNING = 'MACHINE_LEARNING'

class ListActiveViolationsVerificationStateEnum(str, Enum):
    r"""The verification state of the violation (detect alarm)."""
    FALSE_POSITIVE = 'FALSE_POSITIVE'
    BENIGN_POSITIVE = 'BENIGN_POSITIVE'
    TRUE_POSITIVE = 'TRUE_POSITIVE'
    UNKNOWN = 'UNKNOWN'


@dataclasses.dataclass
class ListActiveViolationsRequest:
    
    behavior_criteria_type: Optional[ListActiveViolationsBehaviorCriteriaTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'behaviorCriteriaType', 'style': 'form', 'explode': True }})
    r"""The criteria for a behavior."""  
    list_suppressed_alerts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'listSuppressedAlerts', 'style': 'form', 'explode': True }})
    r"""A list of all suppressed alerts."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return at one time."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""The token for the next set of results."""  
    security_profile_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'securityProfileName', 'style': 'form', 'explode': True }})
    r"""The name of the Device Defender security profile for which violations are listed."""  
    thing_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'thingName', 'style': 'form', 'explode': True }})
    r"""The name of the thing whose active violations are listed."""  
    verification_state: Optional[ListActiveViolationsVerificationStateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'verificationState', 'style': 'form', 'explode': True }})
    r"""The verification state of the violation (detect alarm)."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListActiveViolationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    list_active_violations_response: Optional[shared_listactiveviolationsresponse.ListActiveViolationsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    