/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UserSettingsUpdateApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement - This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
 */
public class UserSettingsUpdateApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement {
    /**
     * Indicates whether or not passcode must contain at least one alphabetical letter (a, b, c..).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("have_letter")
    public Boolean haveLetter;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement withHaveLetter(Boolean haveLetter) {
        this.haveLetter = haveLetter;
        return this;
    }
    
    /**
     * Indicates whether or not passcode must contain at least one number(1, 2, 3..).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("have_number")
    public Boolean haveNumber;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement withHaveNumber(Boolean haveNumber) {
        this.haveNumber = haveNumber;
        return this;
    }
    
    /**
     * Indicates whether or not passcode must contain at least one special character(!, @, #..).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("have_special_character")
    public Boolean haveSpecialCharacter;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement withHaveSpecialCharacter(Boolean haveSpecialCharacter) {
        this.haveSpecialCharacter = haveSpecialCharacter;
        return this;
    }
    
    /**
     * Minimum required length for the passcode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("length")
    public Long length;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement withLength(Long length) {
        this.length = length;
        return this;
    }
    
    /**
     * Indicates whether or not passcode must contain only numeric characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("only_allow_numeric")
    public Boolean onlyAllowNumeric;
    public UserSettingsUpdateApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement withOnlyAllowNumeric(Boolean onlyAllowNumeric) {
        this.onlyAllowNumeric = onlyAllowNumeric;
        return this;
    }
    
}
