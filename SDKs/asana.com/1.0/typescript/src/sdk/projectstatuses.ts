/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * *Deprecated: new integrations should prefer using [status updates](/docs/asana-statuses)*
 *
 * @remarks
 *
 * A project status is an update on the progress of a particular project,
 * and is sent out to all project followers when created. These updates
 * include both text describing the update and a color code intended to
 * represent the overall state of the project: "green" for projects that
 * are on track, "yellow" for projects at risk, "red" for projects that
 * are behind, and "blue" for projects on hold.
 *
 * Project statuses can be created and deleted, but not modified.
 */
export class ProjectStatuses {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create a project status
   *
   * @remarks
   * *Deprecated: new integrations should prefer the `/status_updates` route.*
   *
   * Creates a new status update on the project.
   *
   * Returns the full record of the newly created project status update.
   */
  createProjectStatusForProject(
    req: operations.CreateProjectStatusForProjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateProjectStatusForProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateProjectStatusForProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_gid}/project_statuses",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateProjectStatusForProjectResponse =
        new operations.CreateProjectStatusForProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createProjectStatusForProject201ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateProjectStatusForProject201ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a project status
   *
   * @remarks
   * *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*
   *
   * Deletes a specific, existing project status update.
   *
   * Returns an empty data record.
   */
  deleteProjectStatus(
    req: operations.DeleteProjectStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteProjectStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteProjectStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project_statuses/{project_status_gid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteProjectStatusResponse =
        new operations.DeleteProjectStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteProjectStatus200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteProjectStatus200ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a project status
   *
   * @remarks
   * *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*
   *
   * Returns the complete record for a single status update.
   */
  getProjectStatus(
    req: operations.GetProjectStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project_statuses/{project_status_gid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectStatusResponse =
        new operations.GetProjectStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getProjectStatus200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetProjectStatus200ApplicationJSON
            );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get statuses from a project
   *
   * @remarks
   * *Deprecated: new integrations should prefer the `/status_updates` route.*
   *
   * Returns the compact project status update records for all updates on the project.
   */
  getProjectStatusesForProject(
    req: operations.GetProjectStatusesForProjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectStatusesForProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectStatusesForProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_gid}/project_statuses",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectStatusesForProjectResponse =
        new operations.GetProjectStatusesForProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getProjectStatusesForProject200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetProjectStatusesForProject200ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
