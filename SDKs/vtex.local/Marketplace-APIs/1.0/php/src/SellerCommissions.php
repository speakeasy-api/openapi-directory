<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SellerCommissions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Upsert Seller Commissions in Bulk
     * 
     * This endpoint is used by marketplace operators to define comissions for multiple categories.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BulkUpsertSellerCommissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkUpsertSellerCommissionsResponse
     */
	public function bulkUpsertSellerCommissions(
        \OpenAPI\OpenAPI\Models\Operations\BulkUpsertSellerCommissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkUpsertSellerCommissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/seller-register/pvt/sellers/{sellerId}/commissions/categories', \OpenAPI\OpenAPI\Models\Operations\BulkUpsertSellerCommissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BulkUpsertSellerCommissionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkUpsertSellerCommissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List Seller Commissions by seller ID
     * 
     * This endpoint retrieves all comissions configured for a specific seller.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSellerCommissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSellerCommissionsResponse
     */
	public function listSellerCommissions(
        \OpenAPI\OpenAPI\Models\Operations\ListSellerCommissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSellerCommissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/seller-register/pvt/sellers/{sellerId}/commissions', \OpenAPI\OpenAPI\Models\Operations\ListSellerCommissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSellerCommissionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSellerCommissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Remove Seller Commissions by Category ID
     * 
     * This endpoint removes a seller comission on the selected category.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveSellerCommissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveSellerCommissionsResponse
     */
	public function removeSellerCommissions(
        \OpenAPI\OpenAPI\Models\Operations\RemoveSellerCommissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveSellerCommissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}', \OpenAPI\OpenAPI\Models\Operations\RemoveSellerCommissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemoveSellerCommissionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveSellerCommissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Seller Commissions by Category ID
     * 
     * This endpoint retrieves seller comissions applied to the selected category.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveSellerCommissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveSellerCommissionsResponse
     */
	public function retrieveSellerCommissions(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveSellerCommissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveSellerCommissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}', \OpenAPI\OpenAPI\Models\Operations\RetrieveSellerCommissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RetrieveSellerCommissionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveSellerCommissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Upsert Seller Commissions by Category ID
     * 
     * This endpoint is used by marketplace operators to define comissions for a single category, by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpsertSellerCommissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpsertSellerCommissionsResponse
     */
	public function upsertSellerCommissions(
        \OpenAPI\OpenAPI\Models\Operations\UpsertSellerCommissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpsertSellerCommissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}', \OpenAPI\OpenAPI\Models\Operations\UpsertSellerCommissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "upsertSellerCommissionsRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpsertSellerCommissionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpsertSellerCommissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}