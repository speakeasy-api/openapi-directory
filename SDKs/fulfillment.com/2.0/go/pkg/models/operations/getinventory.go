// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetInventorySecurity struct {
	FdcAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type GetInventoryRequest struct {
	// A CSV of sku reference names, 'skuName1' or 'skuName1,skuName2,skuName3'
	ExternalSkuNames []string `queryParam:"style=form,explode=false,name=externalSkuNames"`
	// The numbers of items to return
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// A CSV of merchant id, '123' or '1,2,3'
	MerchantIds []int64 `queryParam:"style=form,explode=false,name=merchantIds"`
	// A multiplier of the number of items (limit parameter) to skip before returning results
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// A CSV of warehouse id, '123' or '1,2,3'
	WarehouseIds []int64 `queryParam:"style=form,explode=false,name=warehouseIds"`
}

// GetInventoryItemInventoryArrayV2ItemInventoryV2Item - Item this inventory data is based on
type GetInventoryItemInventoryArrayV2ItemInventoryV2Item struct {
	// FDC ID for this Item
	ID *int64 `json:"id,omitempty"`
	// Sku reference name for this item
	SkuReference *string `json:"skuReference,omitempty"`
}

// GetInventoryItemInventoryArrayV2ItemInventoryV2Merchant - Merchant that owns this item
type GetInventoryItemInventoryArrayV2ItemInventoryV2Merchant struct {
	// Merchants name for this item
	Name *string `json:"name,omitempty"`
}

type GetInventoryItemInventoryArrayV2ItemInventoryV2QuantityTotal struct {
	// Number of items that are available to be used in an order
	AvailableToPromise *int64 `json:"availableToPromise,omitempty"`
}

type GetInventoryItemInventoryArrayV2ItemInventoryV2Quantity struct {
	Total *GetInventoryItemInventoryArrayV2ItemInventoryV2QuantityTotal `json:"total,omitempty"`
}

type GetInventoryItemInventoryArrayV2ItemInventoryV2 struct {
	// Item this inventory data is based on
	Item *GetInventoryItemInventoryArrayV2ItemInventoryV2Item `json:"item,omitempty"`
	// Merchant that owns this item
	Merchant *GetInventoryItemInventoryArrayV2ItemInventoryV2Merchant `json:"merchant,omitempty"`
	Quantity *GetInventoryItemInventoryArrayV2ItemInventoryV2Quantity `json:"quantity,omitempty"`
}

type GetInventoryItemInventoryArrayV2MetaPaginationV2 struct {
	// Count of records returned in response, this will be equal to or less then the limit parameter
	Count *int64 `json:"count,omitempty"`
	// Current page of the response, this will match the page parameter
	CurrentPage *int64 `json:"currentPage,omitempty"`
	// Total number of records available to request
	Total *int64 `json:"total,omitempty"`
	// Total number of pages available to request
	TotalPages *int64 `json:"totalPages,omitempty"`
}

type GetInventoryItemInventoryArrayV2Meta struct {
	Pagination *GetInventoryItemInventoryArrayV2MetaPaginationV2 `json:"pagination,omitempty"`
}

// GetInventoryItemInventoryArrayV2 - Found Inventory
type GetInventoryItemInventoryArrayV2 struct {
	Data []GetInventoryItemInventoryArrayV2ItemInventoryV2 `json:"data,omitempty"`
	Meta *GetInventoryItemInventoryArrayV2Meta             `json:"meta,omitempty"`
}

type GetInventoryResponse struct {
	ContentType string
	// Found Inventory
	ItemInventoryArrayV2 *GetInventoryItemInventoryArrayV2
	StatusCode           int
	RawResponse          *http.Response
	// Bad Request
	OneordersGetResponses404ContentApplication1jsonSchema *shared.OneordersGetResponses404ContentApplication1jsonSchema
}
