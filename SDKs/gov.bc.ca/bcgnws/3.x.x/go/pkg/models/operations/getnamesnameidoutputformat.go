// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetNamesNameIDOutputFormatOutputFormatEnum - The format of the output.
type GetNamesNameIDOutputFormatOutputFormatEnum string

const (
	GetNamesNameIDOutputFormatOutputFormatEnumJSON GetNamesNameIDOutputFormatOutputFormatEnum = "json"
	GetNamesNameIDOutputFormatOutputFormatEnumXML  GetNamesNameIDOutputFormatOutputFormatEnum = "xml"
	GetNamesNameIDOutputFormatOutputFormatEnumKml  GetNamesNameIDOutputFormatOutputFormatEnum = "kml"
	GetNamesNameIDOutputFormatOutputFormatEnumCsv  GetNamesNameIDOutputFormatOutputFormatEnum = "csv"
	GetNamesNameIDOutputFormatOutputFormatEnumHTML GetNamesNameIDOutputFormatOutputFormatEnum = "html"
)

func (e GetNamesNameIDOutputFormatOutputFormatEnum) ToPointer() *GetNamesNameIDOutputFormatOutputFormatEnum {
	return &e
}

func (e *GetNamesNameIDOutputFormatOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "csv":
		fallthrough
	case "html":
		*e = GetNamesNameIDOutputFormatOutputFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNameIDOutputFormatOutputFormatEnum: %v", v)
	}
}

type GetNamesNameIDOutputFormatRequest struct {
	// The unique identifier for a name
	NameID int64 `pathParam:"style=simple,explode=false,name=nameId"`
	// The format of the output.
	OutputFormat GetNamesNameIDOutputFormatOutputFormatEnum `pathParam:"style=simple,explode=false,name=outputFormat"`
}

type GetNamesNameIDOutputFormatResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
