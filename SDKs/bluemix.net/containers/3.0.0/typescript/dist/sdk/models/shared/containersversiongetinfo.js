"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainersVersionGetInfo = exports.ContainersVersionGetInfoBuildDetail = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var ContainersVersionGetInfoBuildDetail = /** @class */ (function (_super) {
    __extends(ContainersVersionGetInfoBuildDetail, _super);
    function ContainersVersionGetInfoBuildDetail() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "api" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "api", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "automount" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "automount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "grupdater" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "grupdater", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "harmony" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "harmony", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "health-monitor" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "healthMonitor", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "hijack" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "hijack", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ldap" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "ldap", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "logmet" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "logmet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lumberjack" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "lumberjack", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "redis-cluster" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "redisCluster", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sgwatcher" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "sgwatcher", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "volmgr" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfoBuildDetail.prototype, "volmgr", void 0);
    return ContainersVersionGetInfoBuildDetail;
}(utils_1.SpeakeasyBase));
exports.ContainersVersionGetInfoBuildDetail = ContainersVersionGetInfoBuildDetail;
/**
 * OK. A list of the current API and microservices versions is returend.
 */
var ContainersVersionGetInfo = /** @class */ (function (_super) {
    __extends(ContainersVersionGetInfo, _super);
    function ContainersVersionGetInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ApiVersion" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfo.prototype, "apiVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Arch" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfo.prototype, "arch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "BuildDetail" }),
        (0, class_transformer_1.Type)(function () { return ContainersVersionGetInfoBuildDetail; }),
        __metadata("design:type", ContainersVersionGetInfoBuildDetail)
    ], ContainersVersionGetInfo.prototype, "buildDetail", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "BuildID" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfo.prototype, "buildID", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "BuildNumber" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfo.prototype, "buildNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "BuildTime" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfo.prototype, "buildTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "GitCommit" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfo.prototype, "gitCommit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "GoVersion" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfo.prototype, "goVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "KernelVersion" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfo.prototype, "kernelVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Os" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfo.prototype, "os", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Version" }),
        __metadata("design:type", String)
    ], ContainersVersionGetInfo.prototype, "version", void 0);
    return ContainersVersionGetInfo;
}(utils_1.SpeakeasyBase));
exports.ContainersVersionGetInfo = ContainersVersionGetInfo;
