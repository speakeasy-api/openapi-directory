// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetRecordsSecurity struct {
	BasicAuth shared.SchemeBasicAuth `security:"scheme,type=http,subtype=basic"`
}

// GetRecordsDirectionEnum - Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
type GetRecordsDirectionEnum string

const (
	GetRecordsDirectionEnumInbound  GetRecordsDirectionEnum = "inbound"
	GetRecordsDirectionEnumOutbound GetRecordsDirectionEnum = "outbound"
)

func (e *GetRecordsDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound":
		fallthrough
	case "outbound":
		*e = GetRecordsDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecordsDirectionEnum: %s", s)
	}
}

// GetRecordsIncludeMessageEnum - Include the message contents in the records. Only applicable for use with products `SMS` and `MESSAGES`, where it is optional.
type GetRecordsIncludeMessageEnum string

const (
	GetRecordsIncludeMessageEnumTrue  GetRecordsIncludeMessageEnum = "true"
	GetRecordsIncludeMessageEnumFalse GetRecordsIncludeMessageEnum = "false"
)

func (e *GetRecordsIncludeMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = GetRecordsIncludeMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecordsIncludeMessageEnum: %s", s)
	}
}

// GetRecordsProductEnum - The product to return records for
type GetRecordsProductEnum string

const (
	GetRecordsProductEnumSms           GetRecordsProductEnum = "SMS"
	GetRecordsProductEnumVoiceCall     GetRecordsProductEnum = "VOICE-CALL"
	GetRecordsProductEnumVoiceFailed   GetRecordsProductEnum = "VOICE-FAILED"
	GetRecordsProductEnumInAppVoice    GetRecordsProductEnum = "IN-APP-VOICE"
	GetRecordsProductEnumWebsocketCall GetRecordsProductEnum = "WEBSOCKET-CALL"
	GetRecordsProductEnumVerifyAPI     GetRecordsProductEnum = "VERIFY-API"
	GetRecordsProductEnumNumberInsight GetRecordsProductEnum = "NUMBER-INSIGHT"
	GetRecordsProductEnumMessages      GetRecordsProductEnum = "MESSAGES"
	GetRecordsProductEnumAsr           GetRecordsProductEnum = "ASR"
	GetRecordsProductEnumConversations GetRecordsProductEnum = "CONVERSATIONS"
	GetRecordsProductEnumReportsUsage  GetRecordsProductEnum = "REPORTS-USAGE"
)

func (e *GetRecordsProductEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SMS":
		fallthrough
	case "VOICE-CALL":
		fallthrough
	case "VOICE-FAILED":
		fallthrough
	case "IN-APP-VOICE":
		fallthrough
	case "WEBSOCKET-CALL":
		fallthrough
	case "VERIFY-API":
		fallthrough
	case "NUMBER-INSIGHT":
		fallthrough
	case "MESSAGES":
		fallthrough
	case "ASR":
		fallthrough
	case "CONVERSATIONS":
		fallthrough
	case "REPORTS-USAGE":
		*e = GetRecordsProductEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecordsProductEnum: %s", s)
	}
}

// GetRecordsShowConcatenatedEnum - Indicates whether the SMS was split up into multiple parts (due to its length).
type GetRecordsShowConcatenatedEnum string

const (
	GetRecordsShowConcatenatedEnumTrue  GetRecordsShowConcatenatedEnum = "true"
	GetRecordsShowConcatenatedEnumFalse GetRecordsShowConcatenatedEnum = "false"
)

func (e *GetRecordsShowConcatenatedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = GetRecordsShowConcatenatedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecordsShowConcatenatedEnum: %s", s)
	}
}

// GetRecordsStatusEnum - The SMS status to search for. Optional where product is `SMS`.
type GetRecordsStatusEnum string

const (
	GetRecordsStatusEnumDelivered GetRecordsStatusEnum = "delivered"
	GetRecordsStatusEnumExpired   GetRecordsStatusEnum = "expired"
	GetRecordsStatusEnumFailed    GetRecordsStatusEnum = "failed"
	GetRecordsStatusEnumRejected  GetRecordsStatusEnum = "rejected"
	GetRecordsStatusEnumAccepted  GetRecordsStatusEnum = "accepted"
	GetRecordsStatusEnumBuffered  GetRecordsStatusEnum = "buffered"
	GetRecordsStatusEnumUnknown   GetRecordsStatusEnum = "unknown"
	GetRecordsStatusEnumDeleted   GetRecordsStatusEnum = "deleted"
)

func (e *GetRecordsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "delivered":
		fallthrough
	case "expired":
		fallthrough
	case "failed":
		fallthrough
	case "rejected":
		fallthrough
	case "accepted":
		fallthrough
	case "buffered":
		fallthrough
	case "unknown":
		fallthrough
	case "deleted":
		*e = GetRecordsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecordsStatusEnum: %s", s)
	}
}

type GetRecordsQueryParams struct {
	// The account for which the list of reports will be queried.
	AccountID string `queryParam:"style=form,explode=true,name=account_id"`
	// **Must be no more than 24 hours later than `date_start`**
	//
	// ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.
	//
	// It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR.
	//
	// If you provide this, you must provide `date_start` and must not provide `id`.
	//
	DateEnd *types.Date `queryParam:"style=form,explode=true,name=date_end"`
	// ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]±hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports should begin.
	//
	// It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.
	//
	// If you provide this, you must provide `date_end` and must not provide `id`.
	//
	DateStart *types.Date `queryParam:"style=form,explode=true,name=date_start"`
	// Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
	Direction *GetRecordsDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// The UUID of the message or call to be searched for. You can specify a comma-separated list of UUIDs. If UUIDs are not found they are listed in the response in the `ids_not_found` field.
	//
	// If you specify `id`, you must not specify `status`, `date_start` or `date_end`.
	//
	ID *string `queryParam:"style=form,explode=true,name=id"`
	// Include the message contents in the records. Only applicable for use with products `SMS` and `MESSAGES`, where it is optional.
	IncludeMessage *GetRecordsIncludeMessageEnum `queryParam:"style=form,explode=true,name=include_message"`
	// The product to return records for
	Product GetRecordsProductEnum `queryParam:"style=form,explode=true,name=product"`
	// Indicates whether the SMS was split up into multiple parts (due to its length).
	ShowConcatenated *GetRecordsShowConcatenatedEnum `queryParam:"style=form,explode=true,name=show_concatenated"`
	// The SMS status to search for. Optional where product is `SMS`.
	Status *GetRecordsStatusEnum `queryParam:"style=form,explode=true,name=status"`
}

type GetRecordsRequest struct {
	QueryParams GetRecordsQueryParams
	Security    GetRecordsSecurity
}

// GetRecords422ApplicationJSON3 - Invalid filter
type GetRecords422ApplicationJSON3 struct {
	Detail   *string `json:"detail,omitempty"`
	Instance *string `json:"instance,omitempty"`
	Title    *string `json:"title,omitempty"`
	Type     *string `json:"type,omitempty"`
}

type GetRecords422ApplicationJSON2InvalidParameters struct {
	Name   *string `json:"name,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// GetRecords422ApplicationJSON2 - Invalid Product
type GetRecords422ApplicationJSON2 struct {
	Instance          *string                                          `json:"instance,omitempty"`
	InvalidParameters []GetRecords422ApplicationJSON2InvalidParameters `json:"invalid_parameters,omitempty"`
	Title             *string                                          `json:"title,omitempty"`
}

type GetRecords422ApplicationJSON1InvalidParameters struct {
	Name   *string `json:"name,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// GetRecords422ApplicationJSON1 - Missing parameter
type GetRecords422ApplicationJSON1 struct {
	Instance          *string                                          `json:"instance,omitempty"`
	InvalidParameters []GetRecords422ApplicationJSON1InvalidParameters `json:"invalid_parameters,omitempty"`
	Title             *string                                          `json:"title,omitempty"`
}

type GetRecords422ApplicationJSONType string

const (
	GetRecords422ApplicationJSONTypeGetRecords422ApplicationJSON1 GetRecords422ApplicationJSONType = "get-records_422ApplicationJSON_1"
	GetRecords422ApplicationJSONTypeGetRecords422ApplicationJSON2 GetRecords422ApplicationJSONType = "get-records_422ApplicationJSON_2"
	GetRecords422ApplicationJSONTypeGetRecords422ApplicationJSON3 GetRecords422ApplicationJSONType = "get-records_422ApplicationJSON_3"
)

type GetRecords422ApplicationJSON struct {
	GetRecords422ApplicationJSON1 *GetRecords422ApplicationJSON1
	GetRecords422ApplicationJSON2 *GetRecords422ApplicationJSON2
	GetRecords422ApplicationJSON3 *GetRecords422ApplicationJSON3

	Type GetRecords422ApplicationJSONType
}

func CreateGetRecords422ApplicationJSONGetRecords422ApplicationJSON1(getRecords422ApplicationJSON1 GetRecords422ApplicationJSON1) GetRecords422ApplicationJSON {
	typ := GetRecords422ApplicationJSONTypeGetRecords422ApplicationJSON1

	return GetRecords422ApplicationJSON{
		GetRecords422ApplicationJSON1: &getRecords422ApplicationJSON1,
		Type:                          typ,
	}
}

func CreateGetRecords422ApplicationJSONGetRecords422ApplicationJSON2(getRecords422ApplicationJSON2 GetRecords422ApplicationJSON2) GetRecords422ApplicationJSON {
	typ := GetRecords422ApplicationJSONTypeGetRecords422ApplicationJSON2

	return GetRecords422ApplicationJSON{
		GetRecords422ApplicationJSON2: &getRecords422ApplicationJSON2,
		Type:                          typ,
	}
}

func CreateGetRecords422ApplicationJSONGetRecords422ApplicationJSON3(getRecords422ApplicationJSON3 GetRecords422ApplicationJSON3) GetRecords422ApplicationJSON {
	typ := GetRecords422ApplicationJSONTypeGetRecords422ApplicationJSON3

	return GetRecords422ApplicationJSON{
		GetRecords422ApplicationJSON3: &getRecords422ApplicationJSON3,
		Type:                          typ,
	}
}

func (u *GetRecords422ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getRecords422ApplicationJSON1 := new(GetRecords422ApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords422ApplicationJSON1); err == nil {
		u.GetRecords422ApplicationJSON1 = getRecords422ApplicationJSON1
		u.Type = GetRecords422ApplicationJSONTypeGetRecords422ApplicationJSON1
		return nil
	}

	getRecords422ApplicationJSON2 := new(GetRecords422ApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords422ApplicationJSON2); err == nil {
		u.GetRecords422ApplicationJSON2 = getRecords422ApplicationJSON2
		u.Type = GetRecords422ApplicationJSONTypeGetRecords422ApplicationJSON2
		return nil
	}

	getRecords422ApplicationJSON3 := new(GetRecords422ApplicationJSON3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords422ApplicationJSON3); err == nil {
		u.GetRecords422ApplicationJSON3 = getRecords422ApplicationJSON3
		u.Type = GetRecords422ApplicationJSONTypeGetRecords422ApplicationJSON3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRecords422ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.GetRecords422ApplicationJSON1 != nil {
		return json.Marshal(u.GetRecords422ApplicationJSON1)
	}

	if u.GetRecords422ApplicationJSON2 != nil {
		return json.Marshal(u.GetRecords422ApplicationJSON2)
	}

	if u.GetRecords422ApplicationJSON3 != nil {
		return json.Marshal(u.GetRecords422ApplicationJSON3)
	}

	return nil, nil
}

// GetRecords403ApplicationJSON - Unprocessable entity
type GetRecords403ApplicationJSON struct {
	Detail   *string `json:"detail,omitempty"`
	Instance *string `json:"instance,omitempty"`
	Title    *string `json:"title,omitempty"`
}

type GetRecords200ApplicationJSON11LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetRecords200ApplicationJSON11Links struct {
	Self *GetRecords200ApplicationJSON11LinksSelf `json:"self,omitempty"`
}

// GetRecords200ApplicationJSON11 - Conversations
type GetRecords200ApplicationJSON11 struct {
	Links *GetRecords200ApplicationJSON11Links `json:"_links,omitempty"`
	// The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
	AccountID *string `json:"account_id,omitempty"`
	// Currency of the price of the request.
	Currency *string `json:"currency,omitempty"`
	// If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
	IdsNotFound *string `json:"ids_not_found,omitempty"`
	// The number of returned records
	ItemsCount *int64 `json:"items_count,omitempty"`
	// Price of the request.
	Price *float64 `json:"price,omitempty"`
	// Which product you wish to generate a report for.
	Product *shared.ProductConversationsEnum `json:"product,omitempty"`
	// Time at which the report request was received by the service.
	ReceivedAt *types.Date `json:"received_at,omitempty"`
	// Records in JSON format
	Records []shared.CsvConversations `json:"records,omitempty"`
	// UUID of the request.
	RequestID *string `json:"request_id,omitempty"`
	// Status of the request.
	RequestStatus *shared.RequestStatusEnum `json:"request_status,omitempty"`
}

type GetRecords200ApplicationJSON10LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetRecords200ApplicationJSON10Links struct {
	Self *GetRecords200ApplicationJSON10LinksSelf `json:"self,omitempty"`
}

// GetRecords200ApplicationJSON10 - ASR
type GetRecords200ApplicationJSON10 struct {
	Links *GetRecords200ApplicationJSON10Links `json:"_links,omitempty"`
	// The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
	AccountID *string `json:"account_id,omitempty"`
	// Currency of the price of the request.
	Currency *string `json:"currency,omitempty"`
	// If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
	IdsNotFound *string `json:"ids_not_found,omitempty"`
	// The number of returned records
	ItemsCount *int64 `json:"items_count,omitempty"`
	// Price of the request.
	Price *float64 `json:"price,omitempty"`
	// Which product you wish to generate a report for.
	Product *shared.ProductAsrEnum `json:"product,omitempty"`
	// Time at which the report request was received by the service.
	ReceivedAt *types.Date `json:"received_at,omitempty"`
	// Records in JSON format
	Records []shared.CsvAsr `json:"records,omitempty"`
	// UUID of the request.
	RequestID *string `json:"request_id,omitempty"`
	// Status of the request.
	RequestStatus *shared.RequestStatusEnum `json:"request_status,omitempty"`
}

type GetRecords200ApplicationJSON9LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetRecords200ApplicationJSON9Links struct {
	Self *GetRecords200ApplicationJSON9LinksSelf `json:"self,omitempty"`
}

// GetRecords200ApplicationJSON9DirectionEnum - Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
type GetRecords200ApplicationJSON9DirectionEnum string

const (
	GetRecords200ApplicationJSON9DirectionEnumInbound  GetRecords200ApplicationJSON9DirectionEnum = "inbound"
	GetRecords200ApplicationJSON9DirectionEnumOutbound GetRecords200ApplicationJSON9DirectionEnum = "outbound"
)

func (e *GetRecords200ApplicationJSON9DirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound":
		fallthrough
	case "outbound":
		*e = GetRecords200ApplicationJSON9DirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecords200ApplicationJSON9DirectionEnum: %s", s)
	}
}

// GetRecords200ApplicationJSON9 - Messages (Inbound)
type GetRecords200ApplicationJSON9 struct {
	Links *GetRecords200ApplicationJSON9Links `json:"_links,omitempty"`
	// The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
	AccountID *string `json:"account_id,omitempty"`
	// Currency of the price of the request.
	Currency *string `json:"currency,omitempty"`
	// Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
	Direction *GetRecords200ApplicationJSON9DirectionEnum `json:"direction,omitempty"`
	// If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
	IdsNotFound *string `json:"ids_not_found,omitempty"`
	// Include the text of messages in the report.
	IncludeMessage *bool `json:"include_message,omitempty"`
	// The number of returned records
	ItemsCount *int64 `json:"items_count,omitempty"`
	// Price of the request.
	Price *float64 `json:"price,omitempty"`
	// Which product you wish to generate a report for.
	Product *shared.ProductMessagesEnum `json:"product,omitempty"`
	// Time at which the report request was received by the service.
	ReceivedAt *types.Date `json:"received_at,omitempty"`
	// Records in JSON format
	Records []shared.CsvMessagesInbound `json:"records,omitempty"`
	// UUID of the request.
	RequestID *string `json:"request_id,omitempty"`
	// Status of the request.
	RequestStatus *shared.RequestStatusEnum `json:"request_status,omitempty"`
	// Indicates whether the SMS was split up into multiple parts (due to its length).
	ShowConcatenated *bool `json:"show_concatenated,omitempty"`
}

type GetRecords200ApplicationJSON8LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetRecords200ApplicationJSON8Links struct {
	Self *GetRecords200ApplicationJSON8LinksSelf `json:"self,omitempty"`
}

// GetRecords200ApplicationJSON8DirectionEnum - Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
type GetRecords200ApplicationJSON8DirectionEnum string

const (
	GetRecords200ApplicationJSON8DirectionEnumInbound  GetRecords200ApplicationJSON8DirectionEnum = "inbound"
	GetRecords200ApplicationJSON8DirectionEnumOutbound GetRecords200ApplicationJSON8DirectionEnum = "outbound"
)

func (e *GetRecords200ApplicationJSON8DirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound":
		fallthrough
	case "outbound":
		*e = GetRecords200ApplicationJSON8DirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecords200ApplicationJSON8DirectionEnum: %s", s)
	}
}

// GetRecords200ApplicationJSON8 - Messages (Outbound)
type GetRecords200ApplicationJSON8 struct {
	Links *GetRecords200ApplicationJSON8Links `json:"_links,omitempty"`
	// The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
	AccountID *string `json:"account_id,omitempty"`
	// Currency of the price of the request.
	Currency *string `json:"currency,omitempty"`
	// Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
	Direction *GetRecords200ApplicationJSON8DirectionEnum `json:"direction,omitempty"`
	// If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
	IdsNotFound *string `json:"ids_not_found,omitempty"`
	// Include the text of messages in the report.
	IncludeMessage *bool `json:"include_message,omitempty"`
	// The number of returned records
	ItemsCount *int64 `json:"items_count,omitempty"`
	// Price of the request.
	Price *float64 `json:"price,omitempty"`
	// Which product you wish to generate a report for.
	Product *shared.ProductMessagesEnum `json:"product,omitempty"`
	// Time at which the report request was received by the service.
	ReceivedAt *types.Date `json:"received_at,omitempty"`
	// Records in JSON format
	Records []shared.CsvMessagesOutbound `json:"records,omitempty"`
	// UUID of the request.
	RequestID *string `json:"request_id,omitempty"`
	// Status of the request.
	RequestStatus *shared.RequestStatusEnum `json:"request_status,omitempty"`
	// Indicates whether the SMS was split up into multiple parts (due to its length).
	ShowConcatenated *bool `json:"show_concatenated,omitempty"`
}

type GetRecords200ApplicationJSON7LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetRecords200ApplicationJSON7Links struct {
	Self *GetRecords200ApplicationJSON7LinksSelf `json:"self,omitempty"`
}

// GetRecords200ApplicationJSON7 - Number Insight
type GetRecords200ApplicationJSON7 struct {
	Links *GetRecords200ApplicationJSON7Links `json:"_links,omitempty"`
	// The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
	AccountID *string `json:"account_id,omitempty"`
	// Currency of the price of the request.
	Currency *string `json:"currency,omitempty"`
	// If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
	IdsNotFound *string `json:"ids_not_found,omitempty"`
	// The number of returned records
	ItemsCount *int64 `json:"items_count,omitempty"`
	// Price of the request.
	Price *float64 `json:"price,omitempty"`
	// Which product you wish to generate a report for.
	Product *shared.ProductNiEnum `json:"product,omitempty"`
	// Time at which the report request was received by the service.
	ReceivedAt *types.Date `json:"received_at,omitempty"`
	// Records in JSON format
	Records []shared.CsvNi `json:"records,omitempty"`
	// UUID of the request.
	RequestID *string `json:"request_id,omitempty"`
	// Status of the request.
	RequestStatus *shared.RequestStatusEnum `json:"request_status,omitempty"`
}

type GetRecords200ApplicationJSON6LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetRecords200ApplicationJSON6Links struct {
	Self *GetRecords200ApplicationJSON6LinksSelf `json:"self,omitempty"`
}

// GetRecords200ApplicationJSON6 - Verify
type GetRecords200ApplicationJSON6 struct {
	Links *GetRecords200ApplicationJSON6Links `json:"_links,omitempty"`
	// The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
	AccountID *string `json:"account_id,omitempty"`
	// Currency of the price of the request.
	Currency *string `json:"currency,omitempty"`
	// If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
	IdsNotFound *string `json:"ids_not_found,omitempty"`
	// The number of returned records
	ItemsCount *int64 `json:"items_count,omitempty"`
	// Price of the request.
	Price *float64 `json:"price,omitempty"`
	// Which product you wish to generate a report for.
	Product *shared.ProductVerifyEnum `json:"product,omitempty"`
	// Time at which the report request was received by the service.
	ReceivedAt *types.Date `json:"received_at,omitempty"`
	// Records in JSON format
	Records []shared.CsvVerify `json:"records,omitempty"`
	// UUID of the request.
	RequestID *string `json:"request_id,omitempty"`
	// Status of the request.
	RequestStatus *shared.RequestStatusEnum `json:"request_status,omitempty"`
}

type GetRecords200ApplicationJSON5LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetRecords200ApplicationJSON5Links struct {
	Self *GetRecords200ApplicationJSON5LinksSelf `json:"self,omitempty"`
}

// GetRecords200ApplicationJSON5 - WebSocket Call
type GetRecords200ApplicationJSON5 struct {
	Links *GetRecords200ApplicationJSON5Links `json:"_links,omitempty"`
	// The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
	AccountID *string `json:"account_id,omitempty"`
	// Currency of the price of the request.
	Currency *string `json:"currency,omitempty"`
	// If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
	IdsNotFound *string `json:"ids_not_found,omitempty"`
	// The number of returned records
	ItemsCount *int64 `json:"items_count,omitempty"`
	// Price of the request.
	Price *float64 `json:"price,omitempty"`
	// Which product you wish to generate a report for.
	Product *shared.ProductWebsocketEnum `json:"product,omitempty"`
	// Time at which the report request was received by the service.
	ReceivedAt *types.Date `json:"received_at,omitempty"`
	// Records in JSON format
	Records []shared.CsvWebsockets `json:"records,omitempty"`
	// UUID of the request.
	RequestID *string `json:"request_id,omitempty"`
	// Status of the request.
	RequestStatus *shared.RequestStatusEnum `json:"request_status,omitempty"`
}

type GetRecords200ApplicationJSON4LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetRecords200ApplicationJSON4Links struct {
	Self *GetRecords200ApplicationJSON4LinksSelf `json:"self,omitempty"`
}

// GetRecords200ApplicationJSON4 - In App Voice
type GetRecords200ApplicationJSON4 struct {
	Links *GetRecords200ApplicationJSON4Links `json:"_links,omitempty"`
	// The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
	AccountID *string `json:"account_id,omitempty"`
	// Currency of the price of the request.
	Currency *string `json:"currency,omitempty"`
	// If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
	IdsNotFound *string `json:"ids_not_found,omitempty"`
	// The number of returned records
	ItemsCount *int64 `json:"items_count,omitempty"`
	// Price of the request.
	Price *float64 `json:"price,omitempty"`
	// Which product you wish to generate a report for.
	Product *shared.ProductInAppVoiceEnum `json:"product,omitempty"`
	// Time at which the report request was received by the service.
	ReceivedAt *types.Date `json:"received_at,omitempty"`
	// Records in JSON format
	Records []shared.CsvInAppVoice `json:"records,omitempty"`
	// UUID of the request.
	RequestID *string `json:"request_id,omitempty"`
	// Status of the request.
	RequestStatus *shared.RequestStatusEnum `json:"request_status,omitempty"`
}

type GetRecords200ApplicationJSON3LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetRecords200ApplicationJSON3Links struct {
	Self *GetRecords200ApplicationJSON3LinksSelf `json:"self,omitempty"`
}

// GetRecords200ApplicationJSON3 - Voice Call
type GetRecords200ApplicationJSON3 struct {
	Links *GetRecords200ApplicationJSON3Links `json:"_links,omitempty"`
	// The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
	AccountID *string `json:"account_id,omitempty"`
	// Currency of the price of the request.
	Currency *string `json:"currency,omitempty"`
	// Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
	Direction *shared.DirectionEnum `json:"direction,omitempty"`
	// If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
	IdsNotFound *string `json:"ids_not_found,omitempty"`
	// The number of returned records
	ItemsCount *int64 `json:"items_count,omitempty"`
	// Price of the request.
	Price *float64 `json:"price,omitempty"`
	// Which product you wish to generate a report for.
	Product *shared.ProductVoiceEnum `json:"product,omitempty"`
	// Time at which the report request was received by the service.
	ReceivedAt *types.Date `json:"received_at,omitempty"`
	// Records in JSON format
	Records []shared.CsvVoice `json:"records,omitempty"`
	// UUID of the request.
	RequestID *string `json:"request_id,omitempty"`
	// Status of the request.
	RequestStatus *shared.RequestStatusEnum `json:"request_status,omitempty"`
}

type GetRecords200ApplicationJSON2LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetRecords200ApplicationJSON2Links struct {
	Self *GetRecords200ApplicationJSON2LinksSelf `json:"self,omitempty"`
}

// GetRecords200ApplicationJSON2DirectionEnum - Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
type GetRecords200ApplicationJSON2DirectionEnum string

const (
	GetRecords200ApplicationJSON2DirectionEnumInbound  GetRecords200ApplicationJSON2DirectionEnum = "inbound"
	GetRecords200ApplicationJSON2DirectionEnumOutbound GetRecords200ApplicationJSON2DirectionEnum = "outbound"
)

func (e *GetRecords200ApplicationJSON2DirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound":
		fallthrough
	case "outbound":
		*e = GetRecords200ApplicationJSON2DirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecords200ApplicationJSON2DirectionEnum: %s", s)
	}
}

// GetRecords200ApplicationJSON2 - SMS (Inbound)
type GetRecords200ApplicationJSON2 struct {
	Links *GetRecords200ApplicationJSON2Links `json:"_links,omitempty"`
	// The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
	AccountID *string `json:"account_id,omitempty"`
	// Currency of the price of the request.
	Currency *string `json:"currency,omitempty"`
	// Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
	Direction *GetRecords200ApplicationJSON2DirectionEnum `json:"direction,omitempty"`
	// If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
	IdsNotFound *string `json:"ids_not_found,omitempty"`
	// Include the text of messages in the report.
	IncludeMessage *bool `json:"include_message,omitempty"`
	// The number of returned records
	ItemsCount *int64 `json:"items_count,omitempty"`
	// Price of the request.
	Price *float64 `json:"price,omitempty"`
	// Which product you wish to generate a report for.
	Product *shared.ProductSmsEnum `json:"product,omitempty"`
	// Time at which the report request was received by the service.
	ReceivedAt *types.Date `json:"received_at,omitempty"`
	// Records in JSON format
	Records []shared.JSONSmsInboundWithBody `json:"records,omitempty"`
	// UUID of the request.
	RequestID *string `json:"request_id,omitempty"`
	// Status of the request.
	RequestStatus *shared.RequestStatusEnum `json:"request_status,omitempty"`
	// Indicates whether the SMS was split up into multiple parts (due to its length).
	ShowConcatenated *bool `json:"show_concatenated,omitempty"`
}

type GetRecords200ApplicationJSON1LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type GetRecords200ApplicationJSON1Links struct {
	Self *GetRecords200ApplicationJSON1LinksSelf `json:"self,omitempty"`
}

// GetRecords200ApplicationJSON1DirectionEnum - Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
type GetRecords200ApplicationJSON1DirectionEnum string

const (
	GetRecords200ApplicationJSON1DirectionEnumInbound  GetRecords200ApplicationJSON1DirectionEnum = "inbound"
	GetRecords200ApplicationJSON1DirectionEnumOutbound GetRecords200ApplicationJSON1DirectionEnum = "outbound"
)

func (e *GetRecords200ApplicationJSON1DirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound":
		fallthrough
	case "outbound":
		*e = GetRecords200ApplicationJSON1DirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecords200ApplicationJSON1DirectionEnum: %s", s)
	}
}

// GetRecords200ApplicationJSON1 - SMS (Outbound)
type GetRecords200ApplicationJSON1 struct {
	Links *GetRecords200ApplicationJSON1Links `json:"_links,omitempty"`
	// The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
	AccountID *string `json:"account_id,omitempty"`
	// Currency of the price of the request.
	Currency *string `json:"currency,omitempty"`
	// Direction of the communication, either `inbound` (received by our services), or `outbound` (originated from our services). Required for products `SMS` and `MESSAGES`. Optional for `VOICE-CALL`. Invalid for `IN-APP-VOICE`, `CONVERSATIONS`, `NUMBER-INSIGHT`, `VERIFY-API`.
	Direction *GetRecords200ApplicationJSON1DirectionEnum `json:"direction,omitempty"`
	// If you request multiple records using a comma-separated list of UUIDs, then the UUIDs of any records not found are listed in this field.
	IdsNotFound *string `json:"ids_not_found,omitempty"`
	// Include the text of messages in the report.
	IncludeMessage *bool `json:"include_message,omitempty"`
	// The number of returned records
	ItemsCount *int64 `json:"items_count,omitempty"`
	// Price of the request.
	Price *float64 `json:"price,omitempty"`
	// Which product you wish to generate a report for.
	Product *shared.ProductSmsEnum `json:"product,omitempty"`
	// Time at which the report request was received by the service.
	ReceivedAt *types.Date `json:"received_at,omitempty"`
	// Records in JSON format
	Records []shared.JSONSmsOutboundWithBody `json:"records,omitempty"`
	// UUID of the request.
	RequestID *string `json:"request_id,omitempty"`
	// Status of the request.
	RequestStatus *shared.RequestStatusEnum `json:"request_status,omitempty"`
	// Indicates whether the SMS was split up into multiple parts (due to its length).
	ShowConcatenated *bool `json:"show_concatenated,omitempty"`
}

type GetRecords200ApplicationJSONType string

const (
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON1  GetRecords200ApplicationJSONType = "get-records_200ApplicationJSON_1"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON2  GetRecords200ApplicationJSONType = "get-records_200ApplicationJSON_2"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON3  GetRecords200ApplicationJSONType = "get-records_200ApplicationJSON_3"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON4  GetRecords200ApplicationJSONType = "get-records_200ApplicationJSON_4"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON5  GetRecords200ApplicationJSONType = "get-records_200ApplicationJSON_5"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON6  GetRecords200ApplicationJSONType = "get-records_200ApplicationJSON_6"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON7  GetRecords200ApplicationJSONType = "get-records_200ApplicationJSON_7"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON8  GetRecords200ApplicationJSONType = "get-records_200ApplicationJSON_8"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON9  GetRecords200ApplicationJSONType = "get-records_200ApplicationJSON_9"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON10 GetRecords200ApplicationJSONType = "get-records_200ApplicationJSON_10"
	GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON11 GetRecords200ApplicationJSONType = "get-records_200ApplicationJSON_11"
)

type GetRecords200ApplicationJSON struct {
	GetRecords200ApplicationJSON1  *GetRecords200ApplicationJSON1
	GetRecords200ApplicationJSON2  *GetRecords200ApplicationJSON2
	GetRecords200ApplicationJSON3  *GetRecords200ApplicationJSON3
	GetRecords200ApplicationJSON4  *GetRecords200ApplicationJSON4
	GetRecords200ApplicationJSON5  *GetRecords200ApplicationJSON5
	GetRecords200ApplicationJSON6  *GetRecords200ApplicationJSON6
	GetRecords200ApplicationJSON7  *GetRecords200ApplicationJSON7
	GetRecords200ApplicationJSON8  *GetRecords200ApplicationJSON8
	GetRecords200ApplicationJSON9  *GetRecords200ApplicationJSON9
	GetRecords200ApplicationJSON10 *GetRecords200ApplicationJSON10
	GetRecords200ApplicationJSON11 *GetRecords200ApplicationJSON11

	Type GetRecords200ApplicationJSONType
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON1(getRecords200ApplicationJSON1 GetRecords200ApplicationJSON1) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON1

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON1: &getRecords200ApplicationJSON1,
		Type:                          typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON2(getRecords200ApplicationJSON2 GetRecords200ApplicationJSON2) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON2

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON2: &getRecords200ApplicationJSON2,
		Type:                          typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON3(getRecords200ApplicationJSON3 GetRecords200ApplicationJSON3) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON3

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON3: &getRecords200ApplicationJSON3,
		Type:                          typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON4(getRecords200ApplicationJSON4 GetRecords200ApplicationJSON4) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON4

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON4: &getRecords200ApplicationJSON4,
		Type:                          typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON5(getRecords200ApplicationJSON5 GetRecords200ApplicationJSON5) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON5

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON5: &getRecords200ApplicationJSON5,
		Type:                          typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON6(getRecords200ApplicationJSON6 GetRecords200ApplicationJSON6) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON6

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON6: &getRecords200ApplicationJSON6,
		Type:                          typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON7(getRecords200ApplicationJSON7 GetRecords200ApplicationJSON7) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON7

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON7: &getRecords200ApplicationJSON7,
		Type:                          typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON8(getRecords200ApplicationJSON8 GetRecords200ApplicationJSON8) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON8

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON8: &getRecords200ApplicationJSON8,
		Type:                          typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON9(getRecords200ApplicationJSON9 GetRecords200ApplicationJSON9) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON9

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON9: &getRecords200ApplicationJSON9,
		Type:                          typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON10(getRecords200ApplicationJSON10 GetRecords200ApplicationJSON10) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON10

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON10: &getRecords200ApplicationJSON10,
		Type:                           typ,
	}
}

func CreateGetRecords200ApplicationJSONGetRecords200ApplicationJSON11(getRecords200ApplicationJSON11 GetRecords200ApplicationJSON11) GetRecords200ApplicationJSON {
	typ := GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON11

	return GetRecords200ApplicationJSON{
		GetRecords200ApplicationJSON11: &getRecords200ApplicationJSON11,
		Type:                           typ,
	}
}

func (u *GetRecords200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getRecords200ApplicationJSON1 := new(GetRecords200ApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON1); err == nil {
		u.GetRecords200ApplicationJSON1 = getRecords200ApplicationJSON1
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON1
		return nil
	}

	getRecords200ApplicationJSON2 := new(GetRecords200ApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON2); err == nil {
		u.GetRecords200ApplicationJSON2 = getRecords200ApplicationJSON2
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON2
		return nil
	}

	getRecords200ApplicationJSON3 := new(GetRecords200ApplicationJSON3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON3); err == nil {
		u.GetRecords200ApplicationJSON3 = getRecords200ApplicationJSON3
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON3
		return nil
	}

	getRecords200ApplicationJSON4 := new(GetRecords200ApplicationJSON4)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON4); err == nil {
		u.GetRecords200ApplicationJSON4 = getRecords200ApplicationJSON4
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON4
		return nil
	}

	getRecords200ApplicationJSON5 := new(GetRecords200ApplicationJSON5)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON5); err == nil {
		u.GetRecords200ApplicationJSON5 = getRecords200ApplicationJSON5
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON5
		return nil
	}

	getRecords200ApplicationJSON6 := new(GetRecords200ApplicationJSON6)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON6); err == nil {
		u.GetRecords200ApplicationJSON6 = getRecords200ApplicationJSON6
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON6
		return nil
	}

	getRecords200ApplicationJSON7 := new(GetRecords200ApplicationJSON7)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON7); err == nil {
		u.GetRecords200ApplicationJSON7 = getRecords200ApplicationJSON7
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON7
		return nil
	}

	getRecords200ApplicationJSON8 := new(GetRecords200ApplicationJSON8)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON8); err == nil {
		u.GetRecords200ApplicationJSON8 = getRecords200ApplicationJSON8
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON8
		return nil
	}

	getRecords200ApplicationJSON9 := new(GetRecords200ApplicationJSON9)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON9); err == nil {
		u.GetRecords200ApplicationJSON9 = getRecords200ApplicationJSON9
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON9
		return nil
	}

	getRecords200ApplicationJSON10 := new(GetRecords200ApplicationJSON10)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON10); err == nil {
		u.GetRecords200ApplicationJSON10 = getRecords200ApplicationJSON10
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON10
		return nil
	}

	getRecords200ApplicationJSON11 := new(GetRecords200ApplicationJSON11)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRecords200ApplicationJSON11); err == nil {
		u.GetRecords200ApplicationJSON11 = getRecords200ApplicationJSON11
		u.Type = GetRecords200ApplicationJSONTypeGetRecords200ApplicationJSON11
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetRecords200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.GetRecords200ApplicationJSON1 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON1)
	}

	if u.GetRecords200ApplicationJSON2 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON2)
	}

	if u.GetRecords200ApplicationJSON3 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON3)
	}

	if u.GetRecords200ApplicationJSON4 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON4)
	}

	if u.GetRecords200ApplicationJSON5 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON5)
	}

	if u.GetRecords200ApplicationJSON6 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON6)
	}

	if u.GetRecords200ApplicationJSON7 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON7)
	}

	if u.GetRecords200ApplicationJSON8 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON8)
	}

	if u.GetRecords200ApplicationJSON9 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON9)
	}

	if u.GetRecords200ApplicationJSON10 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON10)
	}

	if u.GetRecords200ApplicationJSON11 != nil {
		return json.Marshal(u.GetRecords200ApplicationJSON11)
	}

	return nil, nil
}

type GetRecordsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	GetRecords200ApplicationJSONOneOf *GetRecords200ApplicationJSON
	// Unprocessable entity
	GetRecords403ApplicationJSONObject *GetRecords403ApplicationJSON
	// Unprocessable entity
	GetRecords422ApplicationJSONOneOf *GetRecords422ApplicationJSON
}
