/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UsageTieredWithOveragePricingOverride - Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
 * 
 */
public class UsageTieredWithOveragePricingOverride {
    /**
     * Number of periods that Zuora considers when calculating overage charges with overage smoothing.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfPeriods")
    public Long numberOfPeriods;
    public UsageTieredWithOveragePricingOverride withNumberOfPeriods(Long numberOfPeriods) {
        this.numberOfPeriods = numberOfPeriods;
        return this;
    }
    
    /**
     * Price per overage unit consumed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overagePrice")
    public Double overagePrice;
    public UsageTieredWithOveragePricingOverride withOveragePrice(Double overagePrice) {
        this.overagePrice = overagePrice;
        return this;
    }
    
    /**
     * Specifies whether to credit the customer for unused units.
     * 
     * If the value of this field is `CreditBySpecificRate`, use the `unusedUnitsCreditRates` field to specify the rate at which to credit the customer for unused units.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overageUnusedUnitsCreditOption")
    public UsageTieredWithOveragePricingOverrideOverageUnusedUnitsCreditOptionEnum overageUnusedUnitsCreditOption;
    public UsageTieredWithOveragePricingOverride withOverageUnusedUnitsCreditOption(UsageTieredWithOveragePricingOverrideOverageUnusedUnitsCreditOptionEnum overageUnusedUnitsCreditOption) {
        this.overageUnusedUnitsCreditOption = overageUnusedUnitsCreditOption;
        return this;
    }
    
    /**
     * Specifies how Zuora changes the price of the charge each time the subscription renews.
     * 
     * If the value of this field is `SpecificPercentageValue`, use the `priceIncreasePercentage` field to specify how much the price of the charge should change.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceChangeOption")
    public UsageTieredWithOveragePricingOverridePriceChangeOptionEnum priceChangeOption;
    public UsageTieredWithOveragePricingOverride withPriceChangeOption(UsageTieredWithOveragePricingOverridePriceChangeOptionEnum priceChangeOption) {
        this.priceChangeOption = priceChangeOption;
        return this;
    }
    
    /**
     * Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceIncreasePercentage")
    public Double priceIncreasePercentage;
    public UsageTieredWithOveragePricingOverride withPriceIncreasePercentage(Double priceIncreasePercentage) {
        this.priceIncreasePercentage = priceIncreasePercentage;
        return this;
    }
    
    /**
     * List of cumulative pricing tiers in the charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tiers")
    public ChargeTier[] tiers;
    public UsageTieredWithOveragePricingOverride withTiers(ChargeTier[] tiers) {
        this.tiers = tiers;
        return this;
    }
    
    /**
     * Per-unit rate at which to credit the customer for unused units. Only applicable if the value of the `overageUnusedUnitsCreditOption` field is `CreditBySpecificRate`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unusedUnitsCreditRates")
    public Double unusedUnitsCreditRates;
    public UsageTieredWithOveragePricingOverride withUnusedUnitsCreditRates(Double unusedUnitsCreditRates) {
        this.unusedUnitsCreditRates = unusedUnitsCreditRates;
        return this;
    }
    
}
