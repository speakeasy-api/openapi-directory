/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EventFilter } from "./eventfilter";
import { Expose, Type } from "class-transformer";

/**
 * The position of the path the filter should match to (first, last, or any event in path).
 */
export enum PathFilterPathMatchPositionEnum {
  PathMatchPositionUnspecified = "PATH_MATCH_POSITION_UNSPECIFIED",
  Any = "ANY",
  First = "FIRST",
  Last = "LAST",
}

/**
 * Path filters specify which paths to include in a report. A path is the result of combining DV360 events based on User ID to create a workflow of users' actions. When a path filter is set, the resulting report will only include paths that match the specified event at the specified position. All other paths will be excluded.
 */
export class PathFilter extends SpeakeasyBase {
  /**
   * Filter on an event to be applied to some part of the path.
   */
  @SpeakeasyMetadata({ elemType: EventFilter })
  @Expose({ name: "eventFilters" })
  @Type(() => EventFilter)
  eventFilters?: EventFilter[];

  /**
   * The position of the path the filter should match to (first, last, or any event in path).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pathMatchPosition" })
  pathMatchPosition?: PathFilterPathMatchPositionEnum;
}
