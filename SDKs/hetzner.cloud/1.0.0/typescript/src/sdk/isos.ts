/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * ISOs are read-only Images of DVDs. While we recommend using our Image functionality to install your Servers we also provide some stock ISOs so you can install more exotic operating systems by yourself.
 *
 * @remarks
 *
 * On request our support uploads a private ISO just for you. These are marked with type `private` and only visible in your Project.
 *
 * To attach an ISO to your Server use `POST /servers/{id}/actions/attach_iso`.
 *
 */
export class ISOs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get all ISOs
   *
   * @remarks
   * Returns all available ISO objects.
   */
  getIsos(
    req: operations.GetIsosRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIsosResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetIsosRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/isos";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIsosResponse = new operations.GetIsosResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIsos200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetIsos200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an ISO
   *
   * @remarks
   * Returns a specific ISO object.
   */
  getIsosId(
    req: operations.GetIsosIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIsosIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetIsosIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/isos/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIsosIdResponse =
        new operations.GetIsosIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIsosId200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetIsosId200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
