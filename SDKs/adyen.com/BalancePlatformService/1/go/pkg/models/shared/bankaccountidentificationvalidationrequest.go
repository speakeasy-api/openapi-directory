// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type BankAccountIdentificationValidationRequestAccountIdentificationType string

const (
	BankAccountIdentificationValidationRequestAccountIdentificationTypeAULocalAccountIdentification      BankAccountIdentificationValidationRequestAccountIdentificationType = "AULocalAccountIdentification"
	BankAccountIdentificationValidationRequestAccountIdentificationTypeCALocalAccountIdentification      BankAccountIdentificationValidationRequestAccountIdentificationType = "CALocalAccountIdentification"
	BankAccountIdentificationValidationRequestAccountIdentificationTypeCZLocalAccountIdentification      BankAccountIdentificationValidationRequestAccountIdentificationType = "CZLocalAccountIdentification"
	BankAccountIdentificationValidationRequestAccountIdentificationTypeHULocalAccountIdentification      BankAccountIdentificationValidationRequestAccountIdentificationType = "HULocalAccountIdentification"
	BankAccountIdentificationValidationRequestAccountIdentificationTypeIbanAccountIdentification         BankAccountIdentificationValidationRequestAccountIdentificationType = "IbanAccountIdentification"
	BankAccountIdentificationValidationRequestAccountIdentificationTypeNOLocalAccountIdentification      BankAccountIdentificationValidationRequestAccountIdentificationType = "NOLocalAccountIdentification"
	BankAccountIdentificationValidationRequestAccountIdentificationTypeNumberAndBicAccountIdentification BankAccountIdentificationValidationRequestAccountIdentificationType = "NumberAndBicAccountIdentification"
	BankAccountIdentificationValidationRequestAccountIdentificationTypePLLocalAccountIdentification      BankAccountIdentificationValidationRequestAccountIdentificationType = "PLLocalAccountIdentification"
	BankAccountIdentificationValidationRequestAccountIdentificationTypeSELocalAccountIdentification      BankAccountIdentificationValidationRequestAccountIdentificationType = "SELocalAccountIdentification"
	BankAccountIdentificationValidationRequestAccountIdentificationTypeSGLocalAccountIdentification      BankAccountIdentificationValidationRequestAccountIdentificationType = "SGLocalAccountIdentification"
	BankAccountIdentificationValidationRequestAccountIdentificationTypeUKLocalAccountIdentification      BankAccountIdentificationValidationRequestAccountIdentificationType = "UKLocalAccountIdentification"
	BankAccountIdentificationValidationRequestAccountIdentificationTypeUSLocalAccountIdentification      BankAccountIdentificationValidationRequestAccountIdentificationType = "USLocalAccountIdentification"
)

type BankAccountIdentificationValidationRequestAccountIdentification struct {
	AULocalAccountIdentification      *AULocalAccountIdentification
	CALocalAccountIdentification      *CALocalAccountIdentification
	CZLocalAccountIdentification      *CZLocalAccountIdentification
	HULocalAccountIdentification      *HULocalAccountIdentification
	IbanAccountIdentification         *IbanAccountIdentification
	NOLocalAccountIdentification      *NOLocalAccountIdentification
	NumberAndBicAccountIdentification *NumberAndBicAccountIdentification
	PLLocalAccountIdentification      *PLLocalAccountIdentification
	SELocalAccountIdentification      *SELocalAccountIdentification
	SGLocalAccountIdentification      *SGLocalAccountIdentification
	UKLocalAccountIdentification      *UKLocalAccountIdentification
	USLocalAccountIdentification      *USLocalAccountIdentification

	Type BankAccountIdentificationValidationRequestAccountIdentificationType
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationAULocalAccountIdentification(auLocalAccountIdentification AULocalAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypeAULocalAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		AULocalAccountIdentification: &auLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationCALocalAccountIdentification(caLocalAccountIdentification CALocalAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypeCALocalAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		CALocalAccountIdentification: &caLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationCZLocalAccountIdentification(czLocalAccountIdentification CZLocalAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypeCZLocalAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		CZLocalAccountIdentification: &czLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationHULocalAccountIdentification(huLocalAccountIdentification HULocalAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypeHULocalAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		HULocalAccountIdentification: &huLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationIbanAccountIdentification(ibanAccountIdentification IbanAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypeIbanAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		IbanAccountIdentification: &ibanAccountIdentification,
		Type:                      typ,
	}
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationNOLocalAccountIdentification(noLocalAccountIdentification NOLocalAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypeNOLocalAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		NOLocalAccountIdentification: &noLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationNumberAndBicAccountIdentification(numberAndBicAccountIdentification NumberAndBicAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypeNumberAndBicAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		NumberAndBicAccountIdentification: &numberAndBicAccountIdentification,
		Type:                              typ,
	}
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationPLLocalAccountIdentification(plLocalAccountIdentification PLLocalAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypePLLocalAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		PLLocalAccountIdentification: &plLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationSELocalAccountIdentification(seLocalAccountIdentification SELocalAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypeSELocalAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		SELocalAccountIdentification: &seLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationSGLocalAccountIdentification(sgLocalAccountIdentification SGLocalAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypeSGLocalAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		SGLocalAccountIdentification: &sgLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationUKLocalAccountIdentification(ukLocalAccountIdentification UKLocalAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypeUKLocalAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		UKLocalAccountIdentification: &ukLocalAccountIdentification,
		Type:                         typ,
	}
}

func CreateBankAccountIdentificationValidationRequestAccountIdentificationUSLocalAccountIdentification(usLocalAccountIdentification USLocalAccountIdentification) BankAccountIdentificationValidationRequestAccountIdentification {
	typ := BankAccountIdentificationValidationRequestAccountIdentificationTypeUSLocalAccountIdentification

	return BankAccountIdentificationValidationRequestAccountIdentification{
		USLocalAccountIdentification: &usLocalAccountIdentification,
		Type:                         typ,
	}
}

func (u *BankAccountIdentificationValidationRequestAccountIdentification) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	auLocalAccountIdentification := new(AULocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&auLocalAccountIdentification); err == nil {
		u.AULocalAccountIdentification = auLocalAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypeAULocalAccountIdentification
		return nil
	}

	caLocalAccountIdentification := new(CALocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&caLocalAccountIdentification); err == nil {
		u.CALocalAccountIdentification = caLocalAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypeCALocalAccountIdentification
		return nil
	}

	czLocalAccountIdentification := new(CZLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&czLocalAccountIdentification); err == nil {
		u.CZLocalAccountIdentification = czLocalAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypeCZLocalAccountIdentification
		return nil
	}

	huLocalAccountIdentification := new(HULocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&huLocalAccountIdentification); err == nil {
		u.HULocalAccountIdentification = huLocalAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypeHULocalAccountIdentification
		return nil
	}

	ibanAccountIdentification := new(IbanAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ibanAccountIdentification); err == nil {
		u.IbanAccountIdentification = ibanAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypeIbanAccountIdentification
		return nil
	}

	noLocalAccountIdentification := new(NOLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&noLocalAccountIdentification); err == nil {
		u.NOLocalAccountIdentification = noLocalAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypeNOLocalAccountIdentification
		return nil
	}

	numberAndBicAccountIdentification := new(NumberAndBicAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&numberAndBicAccountIdentification); err == nil {
		u.NumberAndBicAccountIdentification = numberAndBicAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypeNumberAndBicAccountIdentification
		return nil
	}

	plLocalAccountIdentification := new(PLLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&plLocalAccountIdentification); err == nil {
		u.PLLocalAccountIdentification = plLocalAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypePLLocalAccountIdentification
		return nil
	}

	seLocalAccountIdentification := new(SELocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&seLocalAccountIdentification); err == nil {
		u.SELocalAccountIdentification = seLocalAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypeSELocalAccountIdentification
		return nil
	}

	sgLocalAccountIdentification := new(SGLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sgLocalAccountIdentification); err == nil {
		u.SGLocalAccountIdentification = sgLocalAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypeSGLocalAccountIdentification
		return nil
	}

	ukLocalAccountIdentification := new(UKLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ukLocalAccountIdentification); err == nil {
		u.UKLocalAccountIdentification = ukLocalAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypeUKLocalAccountIdentification
		return nil
	}

	usLocalAccountIdentification := new(USLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&usLocalAccountIdentification); err == nil {
		u.USLocalAccountIdentification = usLocalAccountIdentification
		u.Type = BankAccountIdentificationValidationRequestAccountIdentificationTypeUSLocalAccountIdentification
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u BankAccountIdentificationValidationRequestAccountIdentification) MarshalJSON() ([]byte, error) {
	if u.AULocalAccountIdentification != nil {
		return json.Marshal(u.AULocalAccountIdentification)
	}

	if u.CALocalAccountIdentification != nil {
		return json.Marshal(u.CALocalAccountIdentification)
	}

	if u.CZLocalAccountIdentification != nil {
		return json.Marshal(u.CZLocalAccountIdentification)
	}

	if u.HULocalAccountIdentification != nil {
		return json.Marshal(u.HULocalAccountIdentification)
	}

	if u.IbanAccountIdentification != nil {
		return json.Marshal(u.IbanAccountIdentification)
	}

	if u.NOLocalAccountIdentification != nil {
		return json.Marshal(u.NOLocalAccountIdentification)
	}

	if u.NumberAndBicAccountIdentification != nil {
		return json.Marshal(u.NumberAndBicAccountIdentification)
	}

	if u.PLLocalAccountIdentification != nil {
		return json.Marshal(u.PLLocalAccountIdentification)
	}

	if u.SELocalAccountIdentification != nil {
		return json.Marshal(u.SELocalAccountIdentification)
	}

	if u.SGLocalAccountIdentification != nil {
		return json.Marshal(u.SGLocalAccountIdentification)
	}

	if u.UKLocalAccountIdentification != nil {
		return json.Marshal(u.UKLocalAccountIdentification)
	}

	if u.USLocalAccountIdentification != nil {
		return json.Marshal(u.USLocalAccountIdentification)
	}

	return nil, nil
}

type BankAccountIdentificationValidationRequest struct {
	// Bank account identification.
	AccountIdentification BankAccountIdentificationValidationRequestAccountIdentification `json:"accountIdentification"`
}
