"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class QueryOperatorTypeEnum(str, Enum):
    r"""The type of the operator."""
    UNKNOWN = 'UNKNOWN'
    INTEGER = 'INTEGER'
    DOUBLE = 'DOUBLE'
    TIMESTAMP = 'TIMESTAMP'
    BOOLEAN = 'BOOLEAN'
    ENUM = 'ENUM'
    DATE = 'DATE'
    TEXT = 'TEXT'
    HTML = 'HTML'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryOperator:
    r"""The definition of a operator that can be used in a Search/Suggest request."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Display name of the operator"""  
    enum_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enumValues'), 'exclude': lambda f: f is None }})
    r"""Potential list of values for the opeatror field. This field is only filled when we can safely enumerate all the possible values of this operator."""  
    greater_than_operator_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('greaterThanOperatorName'), 'exclude': lambda f: f is None }})
    r"""Indicates the operator name that can be used to isolate the property using the greater-than operator."""  
    is_facetable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isFacetable'), 'exclude': lambda f: f is None }})
    r"""Can this operator be used to get facets."""  
    is_repeatable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isRepeatable'), 'exclude': lambda f: f is None }})
    r"""Indicates if multiple values can be set for this property."""  
    is_returnable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isReturnable'), 'exclude': lambda f: f is None }})
    r"""Will the property associated with this facet be returned as part of search results."""  
    is_sortable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSortable'), 'exclude': lambda f: f is None }})
    r"""Can this operator be used to sort results."""  
    is_suggestable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSuggestable'), 'exclude': lambda f: f is None }})
    r"""Can get suggestions for this field."""  
    less_than_operator_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lessThanOperatorName'), 'exclude': lambda f: f is None }})
    r"""Indicates the operator name that can be used to isolate the property using the less-than operator."""  
    object_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectType'), 'exclude': lambda f: f is None }})
    r"""The name of the object corresponding to the operator. This field is only filled for schema-specific operators, and is unset for common operators."""  
    operator_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operatorName'), 'exclude': lambda f: f is None }})
    r"""The name of the operator."""  
    type: Optional[QueryOperatorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the operator."""  
    