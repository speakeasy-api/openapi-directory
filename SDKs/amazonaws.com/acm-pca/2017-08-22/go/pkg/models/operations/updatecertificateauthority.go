// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateCertificateAuthorityXAmzTargetEnum
type UpdateCertificateAuthorityXAmzTargetEnum string

const (
	UpdateCertificateAuthorityXAmzTargetEnumAcmPrivateCaUpdateCertificateAuthority UpdateCertificateAuthorityXAmzTargetEnum = "ACMPrivateCA.UpdateCertificateAuthority"
)

func (e UpdateCertificateAuthorityXAmzTargetEnum) ToPointer() *UpdateCertificateAuthorityXAmzTargetEnum {
	return &e
}

func (e *UpdateCertificateAuthorityXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACMPrivateCA.UpdateCertificateAuthority":
		*e = UpdateCertificateAuthorityXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCertificateAuthorityXAmzTargetEnum: %v", v)
	}
}

type UpdateCertificateAuthorityRequest struct {
	UpdateCertificateAuthorityRequest shared.UpdateCertificateAuthorityRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                     *string                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                 *string                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                    *string                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                          *string                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                 *string                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                     *string                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                 *string                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                        UpdateCertificateAuthorityXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateCertificateAuthorityResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// InvalidArgsException
	InvalidArgsException interface{}
	// InvalidArnException
	InvalidArnException interface{}
	// InvalidPolicyException
	InvalidPolicyException interface{}
	// InvalidStateException
	InvalidStateException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
