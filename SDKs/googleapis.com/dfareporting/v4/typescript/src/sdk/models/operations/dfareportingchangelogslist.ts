/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class DfareportingChangeLogsListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

/**
 * Select only change logs with the specified action.
 */
export enum DfareportingChangeLogsListActionEnum {
  ActionCreate = "ACTION_CREATE",
  ActionUpdate = "ACTION_UPDATE",
  ActionDelete = "ACTION_DELETE",
  ActionEnable = "ACTION_ENABLE",
  ActionDisable = "ACTION_DISABLE",
  ActionAdd = "ACTION_ADD",
  ActionRemove = "ACTION_REMOVE",
  ActionMarkAsDefault = "ACTION_MARK_AS_DEFAULT",
  ActionAssociate = "ACTION_ASSOCIATE",
  ActionAssign = "ACTION_ASSIGN",
  ActionUnassign = "ACTION_UNASSIGN",
  ActionSend = "ACTION_SEND",
  ActionLink = "ACTION_LINK",
  ActionUnlink = "ACTION_UNLINK",
  ActionPush = "ACTION_PUSH",
  ActionEmailTags = "ACTION_EMAIL_TAGS",
  ActionShare = "ACTION_SHARE",
}

/**
 * Select only change logs with the specified object type.
 */
export enum DfareportingChangeLogsListObjectTypeEnum {
  ObjectAdvertiser = "OBJECT_ADVERTISER",
  ObjectFloodlightConfiguration = "OBJECT_FLOODLIGHT_CONFIGURATION",
  ObjectAd = "OBJECT_AD",
  ObjectFloodlightActvity = "OBJECT_FLOODLIGHT_ACTVITY",
  ObjectCampaign = "OBJECT_CAMPAIGN",
  ObjectFloodlightActivityGroup = "OBJECT_FLOODLIGHT_ACTIVITY_GROUP",
  ObjectCreative = "OBJECT_CREATIVE",
  ObjectPlacement = "OBJECT_PLACEMENT",
  ObjectDfaSite = "OBJECT_DFA_SITE",
  ObjectUserRole = "OBJECT_USER_ROLE",
  ObjectUserProfile = "OBJECT_USER_PROFILE",
  ObjectAdvertiserGroup = "OBJECT_ADVERTISER_GROUP",
  ObjectAccount = "OBJECT_ACCOUNT",
  ObjectSubaccount = "OBJECT_SUBACCOUNT",
  ObjectRichmediaCreative = "OBJECT_RICHMEDIA_CREATIVE",
  ObjectInstreamCreative = "OBJECT_INSTREAM_CREATIVE",
  ObjectMediaOrder = "OBJECT_MEDIA_ORDER",
  ObjectContentCategory = "OBJECT_CONTENT_CATEGORY",
  ObjectPlacementStrategy = "OBJECT_PLACEMENT_STRATEGY",
  ObjectSdSite = "OBJECT_SD_SITE",
  ObjectSize = "OBJECT_SIZE",
  ObjectCreativeGroup = "OBJECT_CREATIVE_GROUP",
  ObjectCreativeAsset = "OBJECT_CREATIVE_ASSET",
  ObjectUserProfileFilter = "OBJECT_USER_PROFILE_FILTER",
  ObjectLandingPage = "OBJECT_LANDING_PAGE",
  ObjectCreativeField = "OBJECT_CREATIVE_FIELD",
  ObjectRemarketingList = "OBJECT_REMARKETING_LIST",
  ObjectProvidedListClient = "OBJECT_PROVIDED_LIST_CLIENT",
  ObjectEventTag = "OBJECT_EVENT_TAG",
  ObjectCreativeBundle = "OBJECT_CREATIVE_BUNDLE",
  ObjectBillingAccountGroup = "OBJECT_BILLING_ACCOUNT_GROUP",
  ObjectBillingFeature = "OBJECT_BILLING_FEATURE",
  ObjectRateCard = "OBJECT_RATE_CARD",
  ObjectAccountBillingFeature = "OBJECT_ACCOUNT_BILLING_FEATURE",
  ObjectBillingMinimumFee = "OBJECT_BILLING_MINIMUM_FEE",
  ObjectBillingProfile = "OBJECT_BILLING_PROFILE",
  ObjectPlaystoreLink = "OBJECT_PLAYSTORE_LINK",
  ObjectTargetingTemplate = "OBJECT_TARGETING_TEMPLATE",
  ObjectSearchLiftStudy = "OBJECT_SEARCH_LIFT_STUDY",
  ObjectFloodlightDv360Link = "OBJECT_FLOODLIGHT_DV360_LINK",
  ObjectAdvertiserCustomerLink = "OBJECT_ADVERTISER_CUSTOMER_LINK",
}

export class DfareportingChangeLogsListRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Select only change logs with the specified action.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=action",
  })
  action?: DfareportingChangeLogsListActionEnum;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * Select only change logs with these IDs.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=ids" })
  ids?: string[];

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * Select only change logs whose change time is before the specified maxChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxChangeTime",
  })
  maxChangeTime?: string;

  /**
   * Maximum number of results to return.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * Select only change logs whose change time is after the specified minChangeTime.The time should be formatted as an RFC3339 date/time string. For example, for 10:54 PM on July 18th, 2015, in the America/New York time zone, the format is "2015-07-18T22:54:00-04:00". In other words, the year, month, day, the letter T, the hour (24-hour clock system), minute, second, and then the time zone offset.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=minChangeTime",
  })
  minChangeTime?: string;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Select only change logs with these object IDs.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=objectIds",
  })
  objectIds?: string[];

  /**
   * Select only change logs with the specified object type.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=objectType",
  })
  objectType?: DfareportingChangeLogsListObjectTypeEnum;

  /**
   * Value of the nextPageToken from the previous result page.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageToken",
  })
  pageToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * User profile ID associated with this request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=profileId",
  })
  profileId: string;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * Select only change logs whose object ID, user name, old or new values match the search string.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=searchString",
  })
  searchString?: string;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;

  /**
   * Select only change logs with these user profile IDs.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=userProfileIds",
  })
  userProfileIds?: string[];
}

export class DfareportingChangeLogsListResponse extends SpeakeasyBase {
  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  changeLogsListResponse?: shared.ChangeLogsListResponse;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
