"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Scripts:
    r"""Everything about Otoroshi request transformer scripts"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def compile_script(self, request: shared.Script, security: operations.CompileScriptSecurity) -> operations.CompileScriptResponse:
        r"""Compile a script
        Compile a script
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/scripts/_compile'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompileScriptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScriptCompilationResult])
                res.script_compilation_result = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def create_script(self, request: shared.Script, security: operations.CreateScriptSecurity) -> operations.CreateScriptResponse:
        r"""Create a new script
        Create a new script
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/scripts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateScriptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Script])
                res.script = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def delete_script(self, request: operations.DeleteScriptRequest, security: operations.DeleteScriptSecurity) -> operations.DeleteScriptResponse:
        r"""Delete a script
        Delete a script
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteScriptRequest, base_url, '/api/scripts/{scriptId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteScriptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deleted])
                res.deleted = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def find_all_scripts(self) -> operations.FindAllScriptsResponse:
        r"""Get all scripts
        Get all scripts
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/scripts'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindAllScriptsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Script]])
                res.scripts = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def find_script_by_id(self, request: operations.FindScriptByIDRequest, security: operations.FindScriptByIDSecurity) -> operations.FindScriptByIDResponse:
        r"""Get a script
        Get a script
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FindScriptByIDRequest, base_url, '/api/scripts/{scriptId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindScriptByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Script])
                res.script = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_script(self, request: operations.PatchScriptRequest, security: operations.PatchScriptSecurity) -> operations.PatchScriptResponse:
        r"""Update a script with a diff
        Update a script with a diff
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchScriptRequest, base_url, '/api/scripts/{scriptId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchScriptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Script])
                res.script = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_script(self, request: operations.UpdateScriptRequest, security: operations.UpdateScriptSecurity) -> operations.UpdateScriptResponse:
        r"""Update a script
        Update a script
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateScriptRequest, base_url, '/api/scripts/{scriptId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "script", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateScriptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Script])
                res.script = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    