<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class RepositoryConfigurationsList200ApplicationJSON
{
    /**
     * The external user id from the repository provider. Required for GitLab.com repositories
     * 
     * @var ?string $externalUserId
     */
	#[\JMS\Serializer\Annotation\SerializedName('external_user_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $externalUserId = null;
    
    /**
     * Repository configuration identifier
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * The GitHub App Installation id. Required for repositories connected from GitHub App
     * 
     * @var ?string $installationId
     */
	#[\JMS\Serializer\Annotation\SerializedName('installation_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $installationId = null;
    
    /**
     * The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com
     * 
     * @var ?string $repoId
     */
	#[\JMS\Serializer\Annotation\SerializedName('repo_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $repoId = null;
    
    /**
     * The repository's git url, must be a HTTPS URL
     * 
     * @var string $repoUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('repo_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $repoUrl;
    
    /**
     * The id of the service connection (private). Required for GitLab self-hosted repositories
     * 
     * @var ?string $serviceConnectionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('service_connection_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $serviceConnectionId = null;
    
    /**
     * State of the configuration
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsList200ApplicationJSONStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsList200ApplicationJSONStateEnum>')]
    public RepositoryConfigurationsList200ApplicationJSONStateEnum $state;
    
    /**
     * Type of repository
     * 
     * @var string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $type;
    
    /**
     * Email of the user who linked the repository
     * 
     * @var ?string $userEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('user_email')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userEmail = null;
    
	public function __construct()
	{
		$this->externalUserId = null;
		$this->id = "";
		$this->installationId = null;
		$this->repoId = null;
		$this->repoUrl = "";
		$this->serviceConnectionId = null;
		$this->state = \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsList200ApplicationJSONStateEnum::UNAUTHORIZED;
		$this->type = "";
		$this->userEmail = null;
	}
}
