"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import money as shared_money
from ..shared import orderlineitemapplieddiscount as shared_orderlineitemapplieddiscount
from ..shared import orderlineitemappliedtax as shared_orderlineitemappliedtax
from ..shared import orderquantityunit as shared_orderquantityunit
from ..shared import orderreturnlineitemmodifier as shared_orderreturnlineitemmodifier
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrderReturnLineItem:
    r"""The line item being returned in an order."""
    
    quantity: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})
    r"""The quantity returned, formatted as a decimal number.
    For example, `\"3\"`.
    
    Line items with a `quantity_unit` can have non-integer quantities.
    For example, `\"1.70000\"`.
    """  
    applied_discounts: Optional[list[shared_orderlineitemapplieddiscount.OrderLineItemAppliedDiscount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applied_discounts'), 'exclude': lambda f: f is None }})
    r"""The list of references to `OrderReturnDiscount` entities applied to the return line item. Each
    `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
    `OrderReturnDiscount` applied to the return line item. On reads, the applied amount
    is populated.
    """  
    applied_taxes: Optional[list[shared_orderlineitemappliedtax.OrderLineItemAppliedTax]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applied_taxes'), 'exclude': lambda f: f is None }})
    r"""The list of references to `OrderReturnTax` entities applied to the return line item. Each
    `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level
    `OrderReturnTax` applied to the return line item. On reads, the applied amount
    is populated.
    """  
    base_price_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_price_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    catalog_object_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalog_object_id'), 'exclude': lambda f: f is None }})
    r"""The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this return line item."""  
    catalog_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalog_version'), 'exclude': lambda f: f is None }})
    r"""The version of the catalog object that this line item references."""  
    gross_return_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gross_return_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    item_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_type'), 'exclude': lambda f: f is None }})
    r"""The type of line item: an itemized return, a non-itemized return (custom amount),
    or the return of an unactivated gift card sale.
    """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the line item."""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""The note of the return line item."""  
    quantity_unit: Optional[shared_orderquantityunit.OrderQuantityUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity_unit'), 'exclude': lambda f: f is None }})
    r"""Contains the measurement unit for a quantity and a precision that
    specifies the number of digits after the decimal point for decimal quantities.
    """  
    return_modifiers: Optional[list[shared_orderreturnlineitemmodifier.OrderReturnLineItemModifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_modifiers'), 'exclude': lambda f: f is None }})
    r"""The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item."""  
    source_line_item_uid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_line_item_uid'), 'exclude': lambda f: f is None }})
    r"""The `uid` of the line item in the original sale order."""  
    total_discount_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_discount_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    total_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    total_tax_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_tax_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    uid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uid'), 'exclude': lambda f: f is None }})
    r"""A unique ID for this return line-item entry."""  
    variation_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variation_name'), 'exclude': lambda f: f is None }})
    r"""The name of the variation applied to this return line item."""  
    variation_total_price_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variation_total_price_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    