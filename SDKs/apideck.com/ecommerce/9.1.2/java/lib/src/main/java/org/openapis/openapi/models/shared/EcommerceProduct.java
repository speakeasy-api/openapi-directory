/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class EcommerceProduct {
    /**
     * An array of categories for the product, used for organization and searching.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public EcommerceProductCategories[] categories;
    public EcommerceProduct withCategories(EcommerceProductCategories[] categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public EcommerceProduct withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * A detailed description of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public EcommerceProduct withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    public String id;
    public EcommerceProduct withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * An array of image URLs for the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    public EcommerceProductImages[] images;
    public EcommerceProduct withImages(EcommerceProductImages[] images) {
        this.images = images;
        return this;
    }
    
    /**
     * The quantity of the product in stock.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory_quantity")
    public String inventoryQuantity;
    public EcommerceProduct withInventoryQuantity(String inventoryQuantity) {
        this.inventoryQuantity = inventoryQuantity;
        return this;
    }
    
    /**
     * The name of the product as it should be displayed to customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public EcommerceProduct withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * An array of options for the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    public EcommerceProductOptions[] options;
    public EcommerceProduct withOptions(EcommerceProductOptions[] options) {
        this.options = options;
        return this;
    }
    
    /**
     * The price of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public String price;
    public EcommerceProduct withPrice(String price) {
        this.price = price;
        return this;
    }
    
    /**
     * The stock keeping unit of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    public String sku;
    public EcommerceProduct withSku(String sku) {
        this.sku = sku;
        return this;
    }
    
    /**
     * The current status of the product (active or archived).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public EcommerceProductProductStatusEnum status;
    public EcommerceProduct withStatus(EcommerceProductProductStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * An array of tags for the product, used for organization and searching.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String[] tags;
    public EcommerceProduct withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public EcommerceProduct withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variants")
    public EcommerceProductVariants[] variants;
    public EcommerceProduct withVariants(EcommerceProductVariants[] variants) {
        this.variants = variants;
        return this;
    }
    
    /**
     * The weight of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    public String weight;
    public EcommerceProduct withWeight(String weight) {
        this.weight = weight;
        return this;
    }
    
    /**
     * The unit of measurement for the weight of the product.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight_unit")
    public String weightUnit;
    public EcommerceProduct withWeightUnit(String weightUnit) {
        this.weightUnit = weightUnit;
        return this;
    }
    
}
