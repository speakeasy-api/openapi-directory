"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import payrunstatus_enum as shared_payrunstatus_enum
from ..shared import payslipsummary as shared_payslipsummary
from ..shared import validationerror as shared_validationerror
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayRunInput:
    
    payroll_calendar_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayrollCalendarID') }})
    r"""Xero identifier for pay run"""  
    deductions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Deductions'), 'exclude': lambda f: f is None }})
    r"""The total Deductions for the Payrun"""  
    net_pay: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetPay'), 'exclude': lambda f: f is None }})
    r"""The total NetPay for the Payrun"""  
    payment_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentDate'), 'exclude': lambda f: f is None }})
    r"""Payment Date for the PayRun (YYYY-MM-DD)"""  
    pay_run_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayRunID'), 'exclude': lambda f: f is None }})
    r"""Xero identifier for pay run"""  
    pay_run_period_end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayRunPeriodEndDate'), 'exclude': lambda f: f is None }})
    r"""Period End Date for the PayRun (YYYY-MM-DD)"""  
    pay_run_period_start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayRunPeriodStartDate'), 'exclude': lambda f: f is None }})
    r"""Period Start Date for the PayRun (YYYY-MM-DD)"""  
    pay_run_status: Optional[shared_payrunstatus_enum.PayRunStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayRunStatus'), 'exclude': lambda f: f is None }})  
    payslip_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayslipMessage'), 'exclude': lambda f: f is None }})
    r"""Payslip message for the PayRun"""  
    payslips: Optional[list[shared_payslipsummary.PayslipSummaryInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Payslips'), 'exclude': lambda f: f is None }})
    r"""The payslips in the payrun"""  
    reimbursement: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reimbursement'), 'exclude': lambda f: f is None }})
    r"""The total Reimbursements for the Payrun"""  
    super: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Super'), 'exclude': lambda f: f is None }})
    r"""The total Super for the Payrun"""  
    tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tax'), 'exclude': lambda f: f is None }})
    r"""The total Tax for the Payrun"""  
    validation_errors: Optional[list[shared_validationerror.ValidationError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValidationErrors'), 'exclude': lambda f: f is None }})
    r"""Displays array of validation error messages from the API"""  
    wages: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Wages'), 'exclude': lambda f: f is None }})
    r"""The total Wages for the Payrun"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayRun:
    
    payroll_calendar_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayrollCalendarID') }})
    r"""Xero identifier for pay run"""  
    deductions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Deductions'), 'exclude': lambda f: f is None }})
    r"""The total Deductions for the Payrun"""  
    net_pay: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetPay'), 'exclude': lambda f: f is None }})
    r"""The total NetPay for the Payrun"""  
    payment_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentDate'), 'exclude': lambda f: f is None }})
    r"""Payment Date for the PayRun (YYYY-MM-DD)"""  
    pay_run_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayRunID'), 'exclude': lambda f: f is None }})
    r"""Xero identifier for pay run"""  
    pay_run_period_end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayRunPeriodEndDate'), 'exclude': lambda f: f is None }})
    r"""Period End Date for the PayRun (YYYY-MM-DD)"""  
    pay_run_period_start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayRunPeriodStartDate'), 'exclude': lambda f: f is None }})
    r"""Period Start Date for the PayRun (YYYY-MM-DD)"""  
    pay_run_status: Optional[shared_payrunstatus_enum.PayRunStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayRunStatus'), 'exclude': lambda f: f is None }})  
    payslip_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayslipMessage'), 'exclude': lambda f: f is None }})
    r"""Payslip message for the PayRun"""  
    payslips: Optional[list[shared_payslipsummary.PayslipSummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Payslips'), 'exclude': lambda f: f is None }})
    r"""The payslips in the payrun"""  
    reimbursement: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reimbursement'), 'exclude': lambda f: f is None }})
    r"""The total Reimbursements for the Payrun"""  
    super: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Super'), 'exclude': lambda f: f is None }})
    r"""The total Super for the Payrun"""  
    tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tax'), 'exclude': lambda f: f is None }})
    r"""The total Tax for the Payrun"""  
    updated_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDateUTC'), 'exclude': lambda f: f is None }})
    r"""Last modified timestamp"""  
    validation_errors: Optional[list[shared_validationerror.ValidationError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValidationErrors'), 'exclude': lambda f: f is None }})
    r"""Displays array of validation error messages from the API"""  
    wages: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Wages'), 'exclude': lambda f: f is None }})
    r"""The total Wages for the Payrun"""  
    