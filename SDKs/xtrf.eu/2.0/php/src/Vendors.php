<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Vendors 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Removes a provider.
     * 
     * Removes a provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete10Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete10Response
     */
	public function delete10(
        \OpenAPI\OpenAPI\Models\Operations\Delete10Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete10Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{providerId}', \OpenAPI\OpenAPI\Models\Operations\Delete10Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete10Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes a person.
     * 
     * Removes a person.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete8Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete8Response
     */
	public function delete8(
        \OpenAPI\OpenAPI\Models\Operations\Delete8Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete8Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/persons/{personId}', \OpenAPI\OpenAPI\Models\Operations\Delete8Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete8Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes a provider price list.
     * 
     * Removes a provider price list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete9Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete9Response
     */
	public function delete9(
        \OpenAPI\OpenAPI\Models\Operations\Delete9Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete9Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/priceLists/{priceListId}', \OpenAPI\OpenAPI\Models\Operations\Delete9Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete9Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns address of a given provider.
     * 
     * Returns address of a given provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddress1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddress1Response
     */
	public function getAddress1(
        \OpenAPI\OpenAPI\Models\Operations\GetAddress1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddress1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{providerId}/address', \OpenAPI\OpenAPI\Models\Operations\GetAddress1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddress1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addressDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddressDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns persons' internal identifiers.
     * 
     * Returns persons' internal identifiers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllIds4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllIds4Response
     */
	public function getAllIds4(
        \OpenAPI\OpenAPI\Models\Operations\GetAllIds4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllIds4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/persons/ids');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllIds4Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllIds4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAllIds4DefaultApplicationVndXtrfV1PlusJsonInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns providers' internal identifiers.
     * 
     * Returns providers' internal identifiers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllIds5Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllIds5Response
     */
	public function getAllIds5(
        \OpenAPI\OpenAPI\Models\Operations\GetAllIds5Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllIds5Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/ids');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllIds5Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllIds5Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAllIds5DefaultApplicationVndXtrfV1PlusJsonInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns person details.
     * 
     * Returns person details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetById4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetById4Response
     */
	public function getById4(
        \OpenAPI\OpenAPI\Models\Operations\GetById4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetById4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/persons/{personId}', \OpenAPI\OpenAPI\Models\Operations\GetById4Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetById4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->providerPersonDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProviderPersonDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns provider details.
     * 
     * Returns provider details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetById5Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetById5Response
     */
	public function getById5(
        \OpenAPI\OpenAPI\Models\Operations\GetById5Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetById5Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{providerId}', \OpenAPI\OpenAPI\Models\Operations\GetById5Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetById5Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetById5Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->providerDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProviderDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns competencies of a given provider.
     * 
     * Returns competencies of a given provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompetenciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompetenciesResponse
     */
	public function getCompetencies(
        \OpenAPI\OpenAPI\Models\Operations\GetCompetenciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompetenciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{providerId}/competencies', \OpenAPI\OpenAPI\Models\Operations\GetCompetenciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompetenciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->competenciesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompetenciesDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns contact of a given person.
     * 
     * Returns contact of a given person.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContact2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContact2Response
     */
	public function getContact2(
        \OpenAPI\OpenAPI\Models\Operations\GetContact2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContact2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/persons/{personId}/contact', \OpenAPI\OpenAPI\Models\Operations\GetContact2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContact2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personContactDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonContactDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns contact of a given provider.
     * 
     * Returns contact of a given provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContact3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContact3Response
     */
	public function getContact3(
        \OpenAPI\OpenAPI\Models\Operations\GetContact3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContact3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{providerId}/contact', \OpenAPI\OpenAPI\Models\Operations\GetContact3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContact3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns correspondence address of a given provider.
     * 
     * Returns correspondence address of a given provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddress1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddress1Response
     */
	public function getCorrespondenceAddress1(
        \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddress1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddress1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{providerId}/correspondenceAddress', \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddress1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddress1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addressDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddressDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns custom fields of a given person.
     * 
     * Returns custom fields of a given person.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomFields2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomFields2Response
     */
	public function getCustomFields2(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomFields2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomFields2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/persons/{personId}/customFields', \OpenAPI\OpenAPI\Models\Operations\GetCustomFields2Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomFields2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns custom fields of a given provider.
     * 
     * Returns custom fields of a given provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomFields3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomFields3Response
     */
	public function getCustomFields3(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomFields3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomFields3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{providerId}/customFields', \OpenAPI\OpenAPI\Models\Operations\GetCustomFields3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomFields3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends invitation to Vendor Portal.
     * 
     * Sends invitation to Vendor Portal.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SendInvitationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SendInvitationsResponse
     */
	public function sendInvitations(
        \OpenAPI\OpenAPI\Models\Operations\SendInvitationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SendInvitationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/persons/{personId}/notification/invitation', \OpenAPI\OpenAPI\Models\Operations\SendInvitationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendInvitationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->invitationStatisticsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InvitationStatisticsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends invitations to Vendor Portal.
     * 
     * Sends invitations to Vendor Portal.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SendInvitations1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SendInvitations1Response
     */
	public function sendInvitations1(
        \OpenAPI\OpenAPI\Models\Operations\SendInvitations1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SendInvitations1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/providers/{providerId}/notification/invitation', \OpenAPI\OpenAPI\Models\Operations\SendInvitations1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendInvitations1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->invitationStatisticsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InvitationStatisticsDTO', 'json');
            }
        }

        return $response;
    }
}