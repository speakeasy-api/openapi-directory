<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AgeUsd 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Calculates SigRSV exchange
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalcSigmaRsvExchangeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CalcSigmaRsvExchangeResponse
     */
	public function calcSigmaRsvExchange(
        \OpenAPI\OpenAPI\Models\Operations\CalcSigmaRsvExchangeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CalcSigmaRsvExchangeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sigrsv/exchange/{amount}/info', \OpenAPI\OpenAPI\Models\Operations\CalcSigmaRsvExchangeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalcSigmaRsvExchangeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->calcSigmaRsvExchange400WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->calcSigmaRsvExchange401WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->calcSigmaRsvExchange404WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->calcSigmaRsvExchange409WildcardString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Calculates SigUSD exchange
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalcSigmaUsdExchangeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CalcSigmaUsdExchangeResponse
     */
	public function calcSigmaUsdExchange(
        \OpenAPI\OpenAPI\Models\Operations\CalcSigmaUsdExchangeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CalcSigmaUsdExchangeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sigusd/exchange/{amount}/info', \OpenAPI\OpenAPI\Models\Operations\CalcSigmaUsdExchangeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalcSigmaUsdExchangeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->calcSigmaUsdExchange400WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->calcSigmaUsdExchange401WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->calcSigmaUsdExchange404WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->calcSigmaUsdExchange409WildcardString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Builds ErgoPayRequest for SigRSV exchange
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoSigmaRsvExchangeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DoSigmaRsvExchangeResponse
     */
	public function doSigmaRsvExchange(
        \OpenAPI\OpenAPI\Models\Operations\DoSigmaRsvExchangeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DoSigmaRsvExchangeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sigrsv/exchange/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoSigmaRsvExchangeRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoSigmaRsvExchangeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->doSigmaRsvExchange400WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->doSigmaRsvExchange401WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->doSigmaRsvExchange404WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->doSigmaRsvExchange409WildcardString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Builds ErgoPayRequest for SigUSD exchange
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoSigmaUsdExchangeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DoSigmaUsdExchangeResponse
     */
	public function doSigmaUsdExchange(
        \OpenAPI\OpenAPI\Models\Operations\DoSigmaUsdExchangeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DoSigmaUsdExchangeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sigusd/exchange/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DoSigmaUsdExchangeRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoSigmaUsdExchangeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->doSigmaUsdExchange400WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->doSigmaUsdExchange401WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->doSigmaUsdExchange404WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->doSigmaUsdExchange409WildcardString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns state of AgeUSD at this moment
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAgeUsdInfoResponse
     */
	public function getAgeUsdInfo(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAgeUsdInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ageusd/info');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAgeUsdInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getAgeUsdInfo400WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getAgeUsdInfo401WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getAgeUsdInfo404WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getAgeUsdInfo409WildcardString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists price and available volume for SigmaRSV
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSigmaRsvPriceResponse
     */
	public function getSigmaRsvPrice(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSigmaRsvPriceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sigrsv/price');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSigmaRsvPriceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getSigmaRsvPrice400WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getSigmaRsvPrice401WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getSigmaRsvPrice404WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getSigmaRsvPrice409WildcardString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists price and available volume for SigmaUSD
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSigmaUsdPriceResponse
     */
	public function getSigmaUsdPrice(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSigmaUsdPriceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sigusd/price');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSigmaUsdPriceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getSigmaUsdPrice400WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getSigmaUsdPrice401WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getSigmaUsdPrice404WildcardString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->getSigmaUsdPrice409WildcardString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}