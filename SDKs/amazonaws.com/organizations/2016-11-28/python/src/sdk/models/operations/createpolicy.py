"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createpolicyrequest as shared_createpolicyrequest
from ..shared import createpolicyresponse as shared_createpolicyresponse
from enum import Enum
from typing import Any, Optional

class CreatePolicyXAmzTargetEnum(str, Enum):
    AWS_ORGANIZATIONS_V20161128_CREATE_POLICY = 'AWSOrganizationsV20161128.CreatePolicy'


@dataclasses.dataclass
class CreatePolicyRequest:
    
    create_policy_request: shared_createpolicyrequest.CreatePolicyRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CreatePolicyXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreatePolicyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    aws_organizations_not_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AWSOrganizationsNotInUseException"""  
    concurrent_modification_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConcurrentModificationException"""  
    constraint_violation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConstraintViolationException"""  
    create_policy_response: Optional[shared_createpolicyresponse.CreatePolicyResponse] = dataclasses.field(default=None)
    r"""Success"""  
    duplicate_policy_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DuplicatePolicyException"""  
    invalid_input_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInputException"""  
    malformed_policy_document_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MalformedPolicyDocumentException"""  
    policy_type_not_available_for_organization_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PolicyTypeNotAvailableForOrganizationException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceException"""  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    unsupported_api_endpoint_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedAPIEndpointException"""  
    