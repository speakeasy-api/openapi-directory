/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Comment - A comment on a file.
 */
public class Comment {
    /**
     * A region of the document represented as a JSON string. For details on defining anchor properties, refer to  Add comments and replies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anchor")
    public String anchor;
    public Comment withAnchor(String anchor) {
        this.anchor = anchor;
        return this;
    }
    
    /**
     * Information about a Drive user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    public User author;
    public Comment withAuthor(User author) {
        this.author = author;
        return this;
    }
    
    /**
     * The plain text content of the comment. This field is used for setting the content, while htmlContent should be displayed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    public String content;
    public Comment withContent(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * The time at which the comment was created (RFC 3339 date-time).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdTime")
    public OffsetDateTime createdTime;
    public Comment withCreatedTime(OffsetDateTime createdTime) {
        this.createdTime = createdTime;
        return this;
    }
    
    /**
     * Whether the comment has been deleted. A deleted comment has no content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    public Boolean deleted;
    public Comment withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * The content of the comment with HTML formatting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htmlContent")
    public String htmlContent;
    public Comment withHtmlContent(String htmlContent) {
        this.htmlContent = htmlContent;
        return this;
    }
    
    /**
     * The ID of the comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Comment withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "drive#comment".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Comment withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The last time the comment or any of its replies was modified (RFC 3339 date-time).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modifiedTime")
    public OffsetDateTime modifiedTime;
    public Comment withModifiedTime(OffsetDateTime modifiedTime) {
        this.modifiedTime = modifiedTime;
        return this;
    }
    
    /**
     * The file content to which the comment refers, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotedFileContent")
    public CommentQuotedFileContent quotedFileContent;
    public Comment withQuotedFileContent(CommentQuotedFileContent quotedFileContent) {
        this.quotedFileContent = quotedFileContent;
        return this;
    }
    
    /**
     * The full list of replies to the comment in chronological order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replies")
    public Reply[] replies;
    public Comment withReplies(Reply[] replies) {
        this.replies = replies;
        return this;
    }
    
    /**
     * Whether the comment has been resolved by one of its replies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolved")
    public Boolean resolved;
    public Comment withResolved(Boolean resolved) {
        this.resolved = resolved;
        return this;
    }
    
}
