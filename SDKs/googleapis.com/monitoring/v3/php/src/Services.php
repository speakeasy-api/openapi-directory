<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Services 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesCreateResponse
     */
	public function monitoringServicesCreate(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringServicesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Services for this Metrics Scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesListResponse
     */
	public function monitoringServicesList(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListServicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a ServiceLevelObjective for the given Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesCreateResponse
     */
	public function monitoringServicesServiceLevelObjectivesCreate(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/serviceLevelObjectives', \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceLevelObjective", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceLevelObjective = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceLevelObjective', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the given ServiceLevelObjective.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesDeleteResponse
     */
	public function monitoringServicesServiceLevelObjectivesDelete(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}', \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a ServiceLevelObjective by name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesGetResponse
     */
	public function monitoringServicesServiceLevelObjectivesGet(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}', \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceLevelObjective = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceLevelObjective', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the ServiceLevelObjectives for the given Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesListResponse
     */
	public function monitoringServicesServiceLevelObjectivesList(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/serviceLevelObjectives', \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServiceLevelObjectivesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListServiceLevelObjectivesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the given ServiceLevelObjective.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesPatchResponse
     */
	public function monitoringServicesServiceLevelObjectivesPatch(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}', \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceLevelObjective", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringServicesServiceLevelObjectivesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceLevelObjective = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceLevelObjective', 'json');
            }
        }

        return $response;
    }
}