"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import gceinstancefilter as shared_gceinstancefilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResourceFilter:
    r"""Message describing resource filters"""
    
    gce_instance_filter: Optional[shared_gceinstancefilter.GceInstanceFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gceInstanceFilter'), 'exclude': lambda f: f is None }})
    r"""Message describing compute engine instance filter"""  
    inclusion_labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inclusionLabels'), 'exclude': lambda f: f is None }})
    r"""The label used for filter resource"""  
    resource_id_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceIdPatterns'), 'exclude': lambda f: f is None }})
    r"""The id pattern for filter resource"""  
    scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""The scopes of evaluation resource"""  
    