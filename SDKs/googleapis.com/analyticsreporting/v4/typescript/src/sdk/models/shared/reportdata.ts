/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DateRangeValues } from "./daterangevalues";
import { ReportRow } from "./reportrow";
import { Expose, Type } from "class-transformer";

/**
 * The data part of the report.
 */
export class ReportData extends SpeakeasyBase {
  /**
   * The last time the data in the report was refreshed. All the hits received before this timestamp are included in the calculation of the report.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataLastRefreshed" })
  dataLastRefreshed?: string;

  /**
   * If empty reason is specified, the report is empty for this reason.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emptyReason" })
  emptyReason?: string;

  /**
   * Indicates if response to this request is golden or not. Data is golden when the exact same request will not produce any new results if asked at a later point in time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isDataGolden" })
  isDataGolden?: boolean;

  /**
   * Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.
   */
  @SpeakeasyMetadata({ elemType: DateRangeValues })
  @Expose({ name: "maximums" })
  @Type(() => DateRangeValues)
  maximums?: DateRangeValues[];

  /**
   * Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.
   */
  @SpeakeasyMetadata({ elemType: DateRangeValues })
  @Expose({ name: "minimums" })
  @Type(() => DateRangeValues)
  minimums?: DateRangeValues[];

  /**
   * Total number of matching rows for this query.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rowCount" })
  rowCount?: number;

  /**
   * There's one ReportRow for every unique combination of dimensions.
   */
  @SpeakeasyMetadata({ elemType: ReportRow })
  @Expose({ name: "rows" })
  @Type(() => ReportRow)
  rows?: ReportRow[];

  /**
   * If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples read, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "samplesReadCounts" })
  samplesReadCounts?: string[];

  /**
   * If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples present, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "samplingSpaceSizes" })
  samplingSpaceSizes?: string[];

  /**
   * For each requested date range, for the set of all rows that match the query, every requested value format gets a total. The total for a value format is computed by first totaling the metrics mentioned in the value format and then evaluating the value format as a scalar expression. E.g., The "totals" for `3 / (ga:sessions + 2)` we compute `3 / ((sum of all relevant ga:sessions) + 2)`. Totals are computed before pagination.
   */
  @SpeakeasyMetadata({ elemType: DateRangeValues })
  @Expose({ name: "totals" })
  @Type(() => DateRangeValues)
  totals?: DateRangeValues[];
}
