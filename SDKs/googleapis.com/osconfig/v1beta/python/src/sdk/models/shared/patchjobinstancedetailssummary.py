"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchJobInstanceDetailsSummary:
    r"""A summary of the current patch state across all instances that this patch job affects. Contains counts of instances in different states. These states map to `InstancePatchState`. List patch job instance details to see the specific states of each instance."""
    
    acked_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ackedInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that have acked and will start shortly."""  
    applying_patches_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applyingPatchesInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that are applying patches."""  
    downloading_patches_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloadingPatchesInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that are downloading patches."""  
    failed_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failedInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that failed."""  
    inactive_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inactiveInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that are inactive."""  
    no_agent_detected_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noAgentDetectedInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that do not appear to be running the agent. Check to ensure that the agent is installed, running, and able to communicate with the service."""  
    notified_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifiedInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances notified about patch job."""  
    pending_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pendingInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances pending patch job."""  
    post_patch_step_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postPatchStepInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that are running the post-patch step."""  
    pre_patch_step_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prePatchStepInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that are running the pre-patch step."""  
    rebooting_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rebootingInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances rebooting."""  
    started_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startedInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that have started."""  
    succeeded_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('succeededInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that have completed successfully."""  
    succeeded_reboot_required_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('succeededRebootRequiredInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that require reboot."""  
    timed_out_instance_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timedOutInstanceCount'), 'exclude': lambda f: f is None }})
    r"""Number of instances that exceeded the time out while applying the patch."""  
    