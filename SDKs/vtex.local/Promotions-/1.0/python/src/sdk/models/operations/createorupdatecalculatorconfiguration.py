"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationRequestBodyAffiliates:
    r"""Object with information of the affiliate."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Affiliate ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Affiliate Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationRequestBodyBrands:
    r"""Object with information of the brand."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Brand ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Brand Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationRequestBodyCategories:
    r"""Object with information of the category."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Category ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Category Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationRequestBodyCollections:
    r"""Object with information of the collection."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Collection ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Collection Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationRequestBodyPaymentsMethods:
    r"""Object with information of the Payment Method."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Payment Method ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Payment Method Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationRequestBodyProducts:
    r"""Object with information of the product."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Product ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Product Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationRequestBodySkus:
    r"""Object with information of the SKU."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""SKU ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""SKU Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationRequestBodySkusGift:
    r"""SKU Gift Object. Total discount on the product value set as a gift."""
    
    gifts: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gifts'), 'exclude': lambda f: f is None }})
    r"""Array with SKU Gifts IDs."""  
    quantity_selectable: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantitySelectable'), 'exclude': lambda f: f is None }})
    r"""Quantity of SKU Gifts."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationRequestBodyZipCodeRanges:
    r"""Zip code that applies the promotion."""
    
    inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inclusive'), 'exclude': lambda f: f is None }})
    r"""Defines if the zip code applies the promotion."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationRequestBody:
    
    absolute_shipping_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('absoluteShippingDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Maximum shipping value."""  
    accumulate_with_manual_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accumulateWithManualPrice'), 'exclude': lambda f: f is None }})
    r"""Allows the promotion to apply to products whose prices have been manually added by a call-center operator."""  
    activate_gifts_multiplier: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activateGiftsMultiplier'), 'exclude': lambda f: f is None }})
    r"""If set as `true`, it activates gifts Multiplier."""  
    active_days_of_week: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeDaysOfWeek'), 'exclude': lambda f: f is None }})
    r"""Defines which days of the week the Promotion or Tax will applied."""  
    affiliates: Optional[list[CreateOrUpdateCalculatorConfigurationRequestBodyAffiliates]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affiliates'), 'exclude': lambda f: f is None }})
    r"""Marketplace order identifier. The discount will apply to selected affiliates."""  
    apply_to_all_shippings: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applyToAllShippings'), 'exclude': lambda f: f is None }})
    r"""Promotion or Tax will be applied to all kind of shipping."""  
    are_sales_channel_ids_exclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areSalesChannelIdsExclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `false`, this Promotion or Tax will be applied to any trade policies present on the `idsSalesChannel` field. If set to `true`, trade policies present on that field will make this Promotion or Tax not to be applied."""  
    begin_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginDateUtc'), 'exclude': lambda f: f is None }})
    r"""Promotion or Tax Begin Date (UTC)."""  
    brands: Optional[list[CreateOrUpdateCalculatorConfigurationRequestBodyBrands]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brands'), 'exclude': lambda f: f is None }})
    r"""Object composed by the brands that will activate or deactivate the Promotion or Tax."""  
    brands_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandsAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this Promotion or Tax will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this Promotion or Tax not to be applied."""  
    campaigns: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaigns'), 'exclude': lambda f: f is None }})
    r"""Campaign Audiences that activate this Promotion or Tax."""  
    card_issuers: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardIssuers'), 'exclude': lambda f: f is None }})  
    categories: Optional[list[CreateOrUpdateCalculatorConfigurationRequestBodyCategories]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})
    r"""Object composed by the categories that will activate or deactivate the Promotion or Tax."""  
    categories_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoriesAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this Promotion or Tax will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this Promotion or Tax not to be applied."""  
    cluster_expressions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterExpressions'), 'exclude': lambda f: f is None }})
    r"""An expression to use with clusters."""  
    collections: Optional[list[CreateOrUpdateCalculatorConfigurationRequestBodyCollections]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collections'), 'exclude': lambda f: f is None }})
    r"""Object composed by the collections that will activate or deactivate the Promotion or Tax."""  
    collections1_buy_together: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collections1BuyTogether'), 'exclude': lambda f: f is None }})
    r"""Collections that will generate the Promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**."""  
    collections2_buy_together: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collections2BuyTogether'), 'exclude': lambda f: f is None }})  
    collections_is_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collectionsIsInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this Promotion or Tax will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this Promotion or Tax not to be applied."""  
    compare_list_price_and_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compareListPriceAndPrice'), 'exclude': lambda f: f is None }})
    r"""If the **List Price** and **Price** are the same."""  
    conditions_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditionsIds'), 'exclude': lambda f: f is None }})
    r"""Array with conditions IDs."""  
    coupon: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coupon'), 'exclude': lambda f: f is None }})  
    cumulative: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cumulative'), 'exclude': lambda f: f is None }})
    r"""Defines if a Promotion or Tax can accumulate with another one. (`true`) or not (`false`)."""  
    days_ago_of_purchases: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daysAgoOfPurchases'), 'exclude': lambda f: f is None }})
    r"""Number of days that are considered to add the purchase history."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Internal description of the Promotion or Tax."""  
    disable_deal: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableDeal'), 'exclude': lambda f: f is None }})  
    discount_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discountType'), 'exclude': lambda f: f is None }})
    r"""The type of discount that will apply to the promotion."""  
    enable_buy_together_per_sku: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableBuyTogetherPerSku'), 'exclude': lambda f: f is None }})
    r"""Enable **Buy Together** per SKU."""  
    end_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDateUtc'), 'exclude': lambda f: f is None }})
    r"""Promotion or Tax End Date (UTC)."""  
    first_buy_is_profile_optimistic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstBuyIsProfileOptimistic'), 'exclude': lambda f: f is None }})
    r"""Applies the discount even if the user is not logged."""  
    gift_list_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giftListTypes'), 'exclude': lambda f: f is None }})
    r"""Gifts List Type."""  
    id_calculator_configuration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idCalculatorConfiguration'), 'exclude': lambda f: f is None }})
    r"""Promotion ID or Tax ID."""  
    id_seller: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idSeller'), 'exclude': lambda f: f is None }})
    r"""Seller Name."""  
    id_seller_is_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idSellerIsInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this Promotion or Tax will be applied to any seller present on the `idSeller` field. If set to `false`, sellers present on that field will make this Promotion or Tax not to be applied."""  
    ids_sales_channel: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idsSalesChannel'), 'exclude': lambda f: f is None }})
    r"""List of Trade Policies that activate this Promotion or Tax."""  
    installment: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installment'), 'exclude': lambda f: f is None }})  
    is_active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isActive'), 'exclude': lambda f: f is None }})
    r"""If set as `true` the Promotion or Tax is activated. If set as `false` the Promotion or Tax is deactivated."""  
    is_archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isArchived'), 'exclude': lambda f: f is None }})
    r"""If set as `true` the Promotion or Tax is archived. If set as `false` the Promotion or Tax is not archived."""  
    is_different_list_price_and_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDifferentListPriceAndPrice'), 'exclude': lambda f: f is None }})
    r"""Applies the Promotion or Tax only if the list price and price is different."""  
    is_featured: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isFeatured'), 'exclude': lambda f: f is None }})
    r"""Insert a flag with the promotion name used in the product's window display and page."""  
    is_first_buy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isFirstBuy'), 'exclude': lambda f: f is None }})
    r"""Applies the discount only if it's a first buy."""  
    is_min_max_installments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isMinMaxInstallments'), 'exclude': lambda f: f is None }})
    r"""Set if the Promotion or Tax will be applied considering a minimum and maximum values for installments."""  
    is_sla_selected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSlaSelected'), 'exclude': lambda f: f is None }})
    r"""Applies selected discount only when one of the defined shipping method is selected by the customer."""  
    item_max_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemMaxPrice'), 'exclude': lambda f: f is None }})
    r"""Maximum price of the item."""  
    item_min_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemMinPrice'), 'exclude': lambda f: f is None }})
    r"""Minimum price of the item."""  
    last_modified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModified'), 'exclude': lambda f: f is None }})
    r"""Date when the Promotion or Tax was last modified."""  
    list_sku1_buy_together: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listSku1BuyTogether'), 'exclude': lambda f: f is None }})
    r"""SKU first list for the promotion **Buy Together**."""  
    list_sku2_buy_together: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listSku2BuyTogether'), 'exclude': lambda f: f is None }})
    r"""SKU second list for the promotion **Buy Together**."""  
    marketing_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingTags'), 'exclude': lambda f: f is None }})
    r"""Promotion or Tax Marketing tags."""  
    marketing_tags_are_not_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingTagsAreNotInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `false`, this Promotion or Tax will be applied to any marketing tag present on the `marketingTags` field. If set to `true`, marketing tags present on that field will make this Promotion or Tax not to be applied."""  
    maximum_unit_price_discount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumUnitPriceDiscount'), 'exclude': lambda f: f is None }})
    r"""The maximum price for each item of the purchase will be the price set up."""  
    max_installment: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxInstallment'), 'exclude': lambda f: f is None }})
    r"""Maximum value for installment."""  
    max_number_of_affected_items: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxNumberOfAffectedItems'), 'exclude': lambda f: f is None }})
    r"""The maximum number of affected items for a promotion."""  
    max_number_of_affected_items_group_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxNumberOfAffectedItemsGroupKey'), 'exclude': lambda f: f is None }})
    r"""The maximum number of affected items by group key for a promotion."""  
    max_prices_per_items: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPricesPerItems'), 'exclude': lambda f: f is None }})  
    max_usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxUsage'), 'exclude': lambda f: f is None }})
    r"""Defines how many times the Promotion or Tax can be used."""  
    max_usage_per_client: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxUsagePerClient'), 'exclude': lambda f: f is None }})
    r"""Defines if the promotion can be used multiple times per client."""  
    merchants: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchants'), 'exclude': lambda f: f is None }})  
    minimum_quantity_buy_together: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumQuantityBuyTogether'), 'exclude': lambda f: f is None }})
    r"""Minimum quantity for **Buy Together** promotion."""  
    min_installment: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minInstallment'), 'exclude': lambda f: f is None }})
    r"""Minimum value for installment."""  
    multiple_use_per_client: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multipleUsePerClient'), 'exclude': lambda f: f is None }})
    r"""Defines if the promotion can be used multiple times per client."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Promotion name or Tax name."""  
    new_offset: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newOffset'), 'exclude': lambda f: f is None }})
    r"""New time offset from UTC in seconds."""  
    nominal_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nominalDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Exact discount to be applied for the total purchase value."""  
    nominal_reward_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nominalRewardValue'), 'exclude': lambda f: f is None }})
    r"""Nominal value for rewards program."""  
    nominal_shipping_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nominalShippingDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Exact discount to be applied for the shipping value."""  
    nominal_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nominalTax'), 'exclude': lambda f: f is None }})
    r"""Nominal Tax."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})
    r"""Time offset from UTC in seconds."""  
    order_status_reward_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderStatusRewardValue'), 'exclude': lambda f: f is None }})
    r"""Order status reward value."""  
    origin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""Origin of the Promotion or Tax, `marketplace` or `Fulfillment`.  Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information."""  
    payments_methods: Optional[list[CreateOrUpdateCalculatorConfigurationRequestBodyPaymentsMethods]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentsMethods'), 'exclude': lambda f: f is None }})
    r"""Array composed by all the Payments Methods that activate this Promotion or Tax."""  
    payments_rules: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentsRules'), 'exclude': lambda f: f is None }})  
    percentual_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Percentage discount to be applied for total purchase value."""  
    percentual_discount_value_list: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualDiscountValueList'), 'exclude': lambda f: f is None }})
    r"""Percentual discount value list."""  
    percentual_discount_value_list1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualDiscountValueList1'), 'exclude': lambda f: f is None }})
    r"""Valid discounts for the SKUs in `listSku1BuyTogether`, discount list used for Buy Together Promotions."""  
    percentual_discount_value_list2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualDiscountValueList2'), 'exclude': lambda f: f is None }})
    r"""Equivalent to `percentualDiscountValueList1`."""  
    percentual_reward_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualRewardValue'), 'exclude': lambda f: f is None }})
    r"""Percentage value for rewards program."""  
    percentual_shipping_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualShippingDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Percentage discount to be applied for shipping value."""  
    percentual_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualTax'), 'exclude': lambda f: f is None }})
    r"""Percentual Tax over purchase total value."""  
    products: Optional[list[CreateOrUpdateCalculatorConfigurationRequestBodyProducts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})
    r"""Object composed by the products that will activate or deactivate the Promotion or Tax."""  
    products_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productsAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this Promotion or Tax will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this Promotion or Tax not to be applied."""  
    products_specifications: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productsSpecifications'), 'exclude': lambda f: f is None }})  
    quantity_to_affect_buy_together: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantityToAffectBuyTogether'), 'exclude': lambda f: f is None }})
    r"""Quantity to affect **Buy Together** promotion."""  
    rebate_percentual_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rebatePercentualDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Percentual Shipping Discount Value."""  
    restrictions_bins: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictionsBins'), 'exclude': lambda f: f is None }})
    r"""The discount will be granted if the card's BIN is given."""  
    shipping_percentual_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingPercentualTax'), 'exclude': lambda f: f is None }})
    r"""Shipping Percentual Tax over purchase total value."""  
    should_distribute_discount_among_matched_items: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shouldDistributeDiscountAmongMatchedItems'), 'exclude': lambda f: f is None }})
    r"""Should distribute discount among matched items."""  
    skus: Optional[list[CreateOrUpdateCalculatorConfigurationRequestBodySkus]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skus'), 'exclude': lambda f: f is None }})
    r"""Object composed by the SKUs that will activate or deactivate the Promotion or Tax."""  
    skus_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skusAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this Promotion or Tax will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this Promotion or Tax not to be applied."""  
    skus_gift: Optional[CreateOrUpdateCalculatorConfigurationRequestBodySkusGift] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skusGift'), 'exclude': lambda f: f is None }})
    r"""SKU Gift Object. Total discount on the product value set as a gift."""  
    slas_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slasIds'), 'exclude': lambda f: f is None }})
    r"""The discount will be granted if the shipping method is the same as the one given."""  
    stores: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stores'), 'exclude': lambda f: f is None }})  
    stores_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storesAreInclusive'), 'exclude': lambda f: f is None }})  
    total_value_celing: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalValueCeling'), 'exclude': lambda f: f is None }})
    r"""Maximum chart value to activate the Promotion or Tax."""  
    total_value_floor: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalValueFloor'), 'exclude': lambda f: f is None }})
    r"""Minimum chart value to activate the Promotion or Tax."""  
    total_value_include_all_items: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalValueIncludeAllItems'), 'exclude': lambda f: f is None }})  
    total_value_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalValueMode'), 'exclude': lambda f: f is None }})
    r"""Defines if products that already are receiving a promotion will be considered on the chart total value. There are three options available: `IncludeMatchedItems`, `ExcludeMatchedItems`, `AllItems`."""  
    total_value_purchase: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalValuePurchase'), 'exclude': lambda f: f is None }})
    r"""Total value a client must have in past orders to activate the Promotion or Tax."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Defines what is the type of the promotion or indicates if it is a tax. Possible values: `regular` ([Regular Promotion](https://help.vtex.com/tutorial/regular-promotion--tutorials_327)), `combo` ([Buy Together](https://help.vtex.com/en/tutorial/buy-together--tutorials_323)), `forThePriceOf` ([More for Less](https://help.vtex.com/en/tutorial/creating-a-more-for-less-promotion--tutorials_325)), `progressive` ([Progressive Discount](https://help.vtex.com/en/tutorial/progressive-discount--tutorials_324)), `buyAndWin` ([Buy One Get One](https://help.vtex.com/en/tutorial/buy-one-get-one--tutorials_322)), `maxPricePerItem` (Deprecated), `campaign` ([Campaign Promotion](https://help.vtex.com/en/tutorial/campaign-promotion--1ChYXhK2AQGuS6wAqS8Ume)), `tax` (Tax), `multipleEffects` (Multiple Effects)."""  
    use_new_progressive_algorithm: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useNewProgressiveAlgorithm'), 'exclude': lambda f: f is None }})
    r"""Use new progressive algorithm."""  
    utm_campaign: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmCampaign'), 'exclude': lambda f: f is None }})
    r"""Coupon utmCampaign code."""  
    utm_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmSource'), 'exclude': lambda f: f is None }})
    r"""Coupon utmSource code."""  
    zip_code_ranges: Optional[list[CreateOrUpdateCalculatorConfigurationRequestBodyZipCodeRanges]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zipCodeRanges'), 'exclude': lambda f: f is None }})
    r"""Range of the zip code that applies the promotion."""  
    

@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    request_body: CreateOrUpdateCalculatorConfigurationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfiguration200ApplicationJSONAffiliates:
    r"""Object with information of the affiliate."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Affiliate ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Affiliate Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfiguration200ApplicationJSONBrands:
    r"""Object with information of the brand."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Brand ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Brand Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfiguration200ApplicationJSONCategories:
    r"""Object with information of the category."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Category ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Category Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfiguration200ApplicationJSONCollections:
    r"""Object with information of the collection."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Collection ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Collection Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfiguration200ApplicationJSONPaymentsMethods:
    r"""Object with information of the Payment Method."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Payment Method ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Payment Method Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfiguration200ApplicationJSONProducts:
    r"""Object with information of the product."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Product ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Product Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkus:
    r"""Object with information of the SKU."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""SKU ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""SKU Name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkusGift:
    r"""SKU Gift Object. Total discount on the product value set as a gift."""
    
    gifts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gifts'), 'exclude': lambda f: f is None }})
    r"""Array with SKU Gifts IDs."""  
    quantity_selectable: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantitySelectable'), 'exclude': lambda f: f is None }})
    r"""Quantity of SKU Gifts."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrUpdateCalculatorConfiguration200ApplicationJSON:
    r"""OK"""
    
    absolute_shipping_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('absoluteShippingDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Maximum shipping value."""  
    accumulate_with_manual_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accumulateWithManualPrice'), 'exclude': lambda f: f is None }})
    r"""Allows the promotion to apply to products whose prices have been manually added by a call-center operator."""  
    activate_gifts_multiplier: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activateGiftsMultiplier'), 'exclude': lambda f: f is None }})
    r"""If set as `true`, it activates gifts Multiplier."""  
    active_days_of_week: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeDaysOfWeek'), 'exclude': lambda f: f is None }})
    r"""Defines which days of the week the promotion will applied."""  
    affiliates: Optional[list[CreateOrUpdateCalculatorConfiguration200ApplicationJSONAffiliates]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affiliates'), 'exclude': lambda f: f is None }})
    r"""Marketplace order identifier. The discount will apply to selected affiliates."""  
    apply_to_all_shippings: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applyToAllShippings'), 'exclude': lambda f: f is None }})
    r"""Promotion will be applied to all kind of shipping."""  
    are_sales_channel_ids_exclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('areSalesChannelIdsExclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `false`, this promotion will be applied to any trade policies present on the `idsSalesChannel` field. If set to `true`, trade policies present on that field will make this promotion not to be applied."""  
    begin_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginDateUtc'), 'exclude': lambda f: f is None }})
    r"""Promotion Begin Date (UTC)."""  
    brands: Optional[list[CreateOrUpdateCalculatorConfiguration200ApplicationJSONBrands]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brands'), 'exclude': lambda f: f is None }})
    r"""Object composed by the brands that will activate or deactivate the promotion."""  
    brands_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandsAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this promotion will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this promotion not to be applied."""  
    campaigns: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaigns'), 'exclude': lambda f: f is None }})
    r"""Campaign Audiences that activate this promotion."""  
    card_issuers: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardIssuers'), 'exclude': lambda f: f is None }})  
    categories: Optional[list[CreateOrUpdateCalculatorConfiguration200ApplicationJSONCategories]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})
    r"""Object composed by the categories that will activate or deactivate the promotion."""  
    categories_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoriesAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this promotion will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this promotion not to be applied."""  
    cluster_expressions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterExpressions'), 'exclude': lambda f: f is None }})
    r"""An expression to use with clusters."""  
    collections: Optional[list[CreateOrUpdateCalculatorConfiguration200ApplicationJSONCollections]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collections'), 'exclude': lambda f: f is None }})
    r"""Object composed by the collections that will activate or deactivate the promotion."""  
    collections1_buy_together: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collections1BuyTogether'), 'exclude': lambda f: f is None }})
    r"""Collections that will generate the promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**."""  
    collections2_buy_together: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collections2BuyTogether'), 'exclude': lambda f: f is None }})  
    collections_is_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collectionsIsInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this promotion will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this promotion not to be applied."""  
    compare_list_price_and_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compareListPriceAndPrice'), 'exclude': lambda f: f is None }})
    r"""If the **List Price** and **Price** are the same."""  
    conditions_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditionsIds'), 'exclude': lambda f: f is None }})
    r"""Array with conditions IDs."""  
    coupon: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coupon'), 'exclude': lambda f: f is None }})  
    cumulative: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cumulative'), 'exclude': lambda f: f is None }})
    r"""Defines if a promotion can accumulate with another one. (`true`) or not (`false`)."""  
    days_ago_of_purchases: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daysAgoOfPurchases'), 'exclude': lambda f: f is None }})
    r"""Number of days that are considered to add the purchase history."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Promotion internal description."""  
    disable_deal: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableDeal'), 'exclude': lambda f: f is None }})  
    discount_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discountType'), 'exclude': lambda f: f is None }})
    r"""The type of discount that will apply to the promotion."""  
    enable_buy_together_per_sku: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableBuyTogetherPerSku'), 'exclude': lambda f: f is None }})
    r"""Enable **Buy Together** per SKU."""  
    end_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDateUtc'), 'exclude': lambda f: f is None }})
    r"""Promotion End Date (UTC)."""  
    first_buy_is_profile_optimistic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstBuyIsProfileOptimistic'), 'exclude': lambda f: f is None }})
    r"""Applies the discount even if the user is not logged."""  
    gift_list_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giftListTypes'), 'exclude': lambda f: f is None }})
    r"""Gifts List Type."""  
    id_calculator_configuration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idCalculatorConfiguration'), 'exclude': lambda f: f is None }})
    r"""Promotion ID."""  
    id_seller: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idSeller'), 'exclude': lambda f: f is None }})
    r"""Seller Name."""  
    id_seller_is_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idSellerIsInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this promotion will be applied to any seller present on the `idSeller` field. If set to `false`, sellers present on that field will make this promotion not to be applied."""  
    ids_sales_channel: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idsSalesChannel'), 'exclude': lambda f: f is None }})
    r"""List of Trade Policies that activate this promotion."""  
    installment: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installment'), 'exclude': lambda f: f is None }})  
    is_active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isActive'), 'exclude': lambda f: f is None }})
    r"""If set as `true` the Promotion is activated. If set as `false` the Promotion is deactivated."""  
    is_archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isArchived'), 'exclude': lambda f: f is None }})
    r"""If set as `true` the Promotion is archived. If set as `false` the Promotion is not archived."""  
    is_different_list_price_and_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDifferentListPriceAndPrice'), 'exclude': lambda f: f is None }})
    r"""Applies the promotion only if the list price and price is different."""  
    is_featured: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isFeatured'), 'exclude': lambda f: f is None }})
    r"""Insert a flag with the promotion name used in the product's window display and page."""  
    is_first_buy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isFirstBuy'), 'exclude': lambda f: f is None }})
    r"""Applies the discount only if it's a first buy."""  
    is_min_max_installments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isMinMaxInstallments'), 'exclude': lambda f: f is None }})
    r"""Set if the promotion will be applied considering a minimum and maximum values for installments."""  
    is_sla_selected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSlaSelected'), 'exclude': lambda f: f is None }})
    r"""Applies selected discount only when one of the defined shipping method is selected by the customer."""  
    item_max_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemMaxPrice'), 'exclude': lambda f: f is None }})
    r"""Maximum price of the item."""  
    item_min_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemMinPrice'), 'exclude': lambda f: f is None }})
    r"""Minimum price of the item."""  
    last_modified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModified'), 'exclude': lambda f: f is None }})
    r"""When the Promotion was last modified."""  
    list_sku1_buy_together: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listSku1BuyTogether'), 'exclude': lambda f: f is None }})
    r"""SKU first list for the promotion **Buy Together**."""  
    list_sku2_buy_together: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listSku2BuyTogether'), 'exclude': lambda f: f is None }})
    r"""SKU second list for the promotion **Buy Together**."""  
    marketing_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingTags'), 'exclude': lambda f: f is None }})
    r"""Promotion Marketing tags."""  
    marketing_tags_are_not_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingTagsAreNotInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `false`, this promotion will be applied to any marketing tag present on the `marketingTags` field. If set to `true`, marketing tags present on that field will make this promotion not to be applied."""  
    maximum_unit_price_discount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumUnitPriceDiscount'), 'exclude': lambda f: f is None }})
    r"""The maximum price for each item of the purchase will be the price set up."""  
    max_installment: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxInstallment'), 'exclude': lambda f: f is None }})
    r"""Maximum value for installment."""  
    max_number_of_affected_items: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxNumberOfAffectedItems'), 'exclude': lambda f: f is None }})
    r"""The maximum number of affected items for a promotion."""  
    max_number_of_affected_items_group_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxNumberOfAffectedItemsGroupKey'), 'exclude': lambda f: f is None }})
    r"""The maximum number of affected items by group key for a promotion."""  
    max_prices_per_items: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPricesPerItems'), 'exclude': lambda f: f is None }})  
    max_usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxUsage'), 'exclude': lambda f: f is None }})
    r"""Defines how many times the promotion can be used."""  
    max_usage_per_client: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxUsagePerClient'), 'exclude': lambda f: f is None }})
    r"""Defines if the promotion can be used multiple times per client."""  
    merchants: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchants'), 'exclude': lambda f: f is None }})  
    minimum_quantity_buy_together: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumQuantityBuyTogether'), 'exclude': lambda f: f is None }})
    r"""Minimum quantity for **Buy Together** promotion."""  
    min_installment: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minInstallment'), 'exclude': lambda f: f is None }})
    r"""Minimum value for installment."""  
    multiple_use_per_client: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multipleUsePerClient'), 'exclude': lambda f: f is None }})
    r"""Defines if the promotion can be used multiple times per client."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Promotion Name."""  
    new_offset: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newOffset'), 'exclude': lambda f: f is None }})
    r"""New time offset from UTC in seconds."""  
    nominal_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nominalDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Exact discount to be applied for the total purchase value."""  
    nominal_reward_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nominalRewardValue'), 'exclude': lambda f: f is None }})
    r"""Nominal value for rewards program."""  
    nominal_shipping_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nominalShippingDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Exact discount to be applied for the shipping value."""  
    nominal_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nominalTax'), 'exclude': lambda f: f is None }})
    r"""Nominal Tax."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})
    r"""Time offset from UTC in seconds."""  
    order_status_reward_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderStatusRewardValue'), 'exclude': lambda f: f is None }})
    r"""Order status reward value."""  
    origin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""Origin of the promotion, `marketplace` or `Fulfillment`.  Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information."""  
    payments_methods: Optional[list[CreateOrUpdateCalculatorConfiguration200ApplicationJSONPaymentsMethods]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentsMethods'), 'exclude': lambda f: f is None }})
    r"""Array composed by all the Payments Methods."""  
    payments_rules: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentsRules'), 'exclude': lambda f: f is None }})  
    percentual_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Percentage discount to be applied for total purchase value."""  
    percentual_discount_value_list: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualDiscountValueList'), 'exclude': lambda f: f is None }})
    r"""Percentual discount value list."""  
    percentual_discount_value_list1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualDiscountValueList1'), 'exclude': lambda f: f is None }})
    r"""Valid discounts for the SKUs in `listSku1BuyTogether`, discount list used for Buy Together Promotions."""  
    percentual_discount_value_list2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualDiscountValueList2'), 'exclude': lambda f: f is None }})
    r"""Equivalent to `percentualDiscountValueList1`."""  
    percentual_reward_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualRewardValue'), 'exclude': lambda f: f is None }})
    r"""Percentage value for rewards program."""  
    percentual_shipping_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualShippingDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Percentage discount to be applied for shipping value."""  
    percentual_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentualTax'), 'exclude': lambda f: f is None }})
    r"""Percentual Tax over purchase total value."""  
    products: Optional[list[CreateOrUpdateCalculatorConfiguration200ApplicationJSONProducts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})
    r"""Object composed by the products that will activate or deactivate the promotion."""  
    products_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productsAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this promotion will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this promotion not to be applied."""  
    products_specifications: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productsSpecifications'), 'exclude': lambda f: f is None }})  
    quantity_to_affect_buy_together: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantityToAffectBuyTogether'), 'exclude': lambda f: f is None }})
    r"""Quantity to affect **Buy Together** promotion."""  
    rebate_percentual_discount_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rebatePercentualDiscountValue'), 'exclude': lambda f: f is None }})
    r"""Percentual Shipping Discount Value."""  
    restrictions_bins: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictionsBins'), 'exclude': lambda f: f is None }})
    r"""The discount will be granted if the card's BIN is given."""  
    shipping_percentual_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingPercentualTax'), 'exclude': lambda f: f is None }})
    r"""Shipping Percentual Tax over purchase total value."""  
    should_distribute_discount_among_matched_items: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shouldDistributeDiscountAmongMatchedItems'), 'exclude': lambda f: f is None }})
    r"""Should distribute discount among matched items."""  
    skus: Optional[list[CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkus]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skus'), 'exclude': lambda f: f is None }})
    r"""Object composed by the SKUs that will activate or deactivate the promotion."""  
    skus_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skusAreInclusive'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this promotion will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this promotion not to be applied."""  
    skus_gift: Optional[CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkusGift] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skusGift'), 'exclude': lambda f: f is None }})
    r"""SKU Gift Object. Total discount on the product value set as a gift."""  
    slas_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slasIds'), 'exclude': lambda f: f is None }})
    r"""The discount will be granted if the shipping method is the same as the one given."""  
    stores: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stores'), 'exclude': lambda f: f is None }})  
    stores_are_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storesAreInclusive'), 'exclude': lambda f: f is None }})  
    total_value_celing: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalValueCeling'), 'exclude': lambda f: f is None }})
    r"""Maximum chart value to activate the promotion."""  
    total_value_floor: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalValueFloor'), 'exclude': lambda f: f is None }})
    r"""Minimum chart value to activate the promotion."""  
    total_value_include_all_items: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalValueIncludeAllItems'), 'exclude': lambda f: f is None }})  
    total_value_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalValueMode'), 'exclude': lambda f: f is None }})
    r"""Defines if products that already are receiving a promotion will be considered on the chart total value. There are three options available: `IncludeMatchedItems`, `ExcludeMatchedItems`, `AllItems`."""  
    total_value_purchase: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalValuePurchase'), 'exclude': lambda f: f is None }})
    r"""Total value a client must have in past orders to active the promotion."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Defines what is the type of the promotion or indicates if it is a tax. Possible values: `regular` ([Regular Promotion](https://help.vtex.com/tutorial/regular-promotion--tutorials_327)), `combo` ([Buy Together](https://help.vtex.com/en/tutorial/buy-together--tutorials_323)), `forThePriceOf` ([More for Less](https://help.vtex.com/en/tutorial/creating-a-more-for-less-promotion--tutorials_325)), `progressive` ([Progressive Discount](https://help.vtex.com/en/tutorial/progressive-discount--tutorials_324)), `buyAndWin` ([Buy One Get One](https://help.vtex.com/en/tutorial/buy-one-get-one--tutorials_322)), `maxPricePerItem` (Deprecated), `campaign` ([Campaign Promotion](https://help.vtex.com/en/tutorial/campaign-promotion--1ChYXhK2AQGuS6wAqS8Ume)), `tax` (Tax), `multipleEffects` (Multiple Effects)."""  
    use_new_progressive_algorithm: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useNewProgressiveAlgorithm'), 'exclude': lambda f: f is None }})
    r"""Use new progressive algorithm."""  
    utm_campaign: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmCampaign'), 'exclude': lambda f: f is None }})
    r"""Coupon utmCampaign code."""  
    utm_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmSource'), 'exclude': lambda f: f is None }})
    r"""Coupon utmSource code."""  
    zip_code_ranges: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zipCodeRanges'), 'exclude': lambda f: f is None }})
    r"""Range of the zip code that applies the promotion."""  
    

@dataclasses.dataclass
class CreateOrUpdateCalculatorConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_or_update_calculator_configuration_200_application_json_object: Optional[CreateOrUpdateCalculatorConfiguration200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    