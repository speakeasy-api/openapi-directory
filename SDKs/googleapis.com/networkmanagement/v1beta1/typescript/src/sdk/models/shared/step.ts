/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AbortInfo } from "./abortinfo";
import { AppEngineVersionInfo } from "./appengineversioninfo";
import { CloudFunctionInfo } from "./cloudfunctioninfo";
import { CloudRunRevisionInfo } from "./cloudrunrevisioninfo";
import { CloudSQLInstanceInfo } from "./cloudsqlinstanceinfo";
import { DeliverInfo } from "./deliverinfo";
import { DropInfo } from "./dropinfo";
import { EndpointInfo } from "./endpointinfo";
import { FirewallInfo } from "./firewallinfo";
import { ForwardInfo } from "./forwardinfo";
import { ForwardingRuleInfo } from "./forwardingruleinfo";
import { GKEMasterInfo } from "./gkemasterinfo";
import { InstanceInfo } from "./instanceinfo";
import { LoadBalancerInfo } from "./loadbalancerinfo";
import { NetworkInfo } from "./networkinfo";
import { RouteInfo } from "./routeinfo";
import { VpcConnectorInfo } from "./vpcconnectorinfo";
import { VpnGatewayInfo } from "./vpngatewayinfo";
import { VpnTunnelInfo } from "./vpntunnelinfo";
import { Expose, Type } from "class-transformer";

/**
 * Each step is in one of the pre-defined states.
 */
export enum StepStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  StartFromInstance = "START_FROM_INSTANCE",
  StartFromInternet = "START_FROM_INTERNET",
  StartFromPrivateNetwork = "START_FROM_PRIVATE_NETWORK",
  StartFromGkeMaster = "START_FROM_GKE_MASTER",
  StartFromCloudSqlInstance = "START_FROM_CLOUD_SQL_INSTANCE",
  StartFromCloudFunction = "START_FROM_CLOUD_FUNCTION",
  StartFromAppEngineVersion = "START_FROM_APP_ENGINE_VERSION",
  StartFromCloudRunRevision = "START_FROM_CLOUD_RUN_REVISION",
  ApplyIngressFirewallRule = "APPLY_INGRESS_FIREWALL_RULE",
  ApplyEgressFirewallRule = "APPLY_EGRESS_FIREWALL_RULE",
  ApplyRoute = "APPLY_ROUTE",
  ApplyForwardingRule = "APPLY_FORWARDING_RULE",
  SpoofingApproved = "SPOOFING_APPROVED",
  ArriveAtInstance = "ARRIVE_AT_INSTANCE",
  ArriveAtInternalLoadBalancer = "ARRIVE_AT_INTERNAL_LOAD_BALANCER",
  ArriveAtExternalLoadBalancer = "ARRIVE_AT_EXTERNAL_LOAD_BALANCER",
  ArriveAtVpnGateway = "ARRIVE_AT_VPN_GATEWAY",
  ArriveAtVpnTunnel = "ARRIVE_AT_VPN_TUNNEL",
  ArriveAtVpcConnector = "ARRIVE_AT_VPC_CONNECTOR",
  Nat = "NAT",
  ProxyConnection = "PROXY_CONNECTION",
  Deliver = "DELIVER",
  Drop = "DROP",
  Forward = "FORWARD",
  Abort = "ABORT",
  ViewerPermissionMissing = "VIEWER_PERMISSION_MISSING",
}

/**
 * A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration.
 */
export class Step extends SpeakeasyBase {
  /**
   * Details of the final state "abort" and associated resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "abort" })
  @Type(() => AbortInfo)
  abort?: AbortInfo;

  /**
   * For display only. Metadata associated with an App Engine version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appEngineVersion" })
  @Type(() => AppEngineVersionInfo)
  appEngineVersion?: AppEngineVersionInfo;

  /**
   * This is a step that leads to the final state Drop.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "causesDrop" })
  causesDrop?: boolean;

  /**
   * For display only. Metadata associated with a Cloud Function.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloudFunction" })
  @Type(() => CloudFunctionInfo)
  cloudFunction?: CloudFunctionInfo;

  /**
   * For display only. Metadata associated with a Cloud Run revision.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloudRunRevision" })
  @Type(() => CloudRunRevisionInfo)
  cloudRunRevision?: CloudRunRevisionInfo;

  /**
   * For display only. Metadata associated with a Cloud SQL instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloudSqlInstance" })
  @Type(() => CloudSQLInstanceInfo)
  cloudSqlInstance?: CloudSQLInstanceInfo;

  /**
   * Details of the final state "deliver" and associated resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deliver" })
  @Type(() => DeliverInfo)
  deliver?: DeliverInfo;

  /**
   * A description of the step. Usually this is a summary of the state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Details of the final state "drop" and associated resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "drop" })
  @Type(() => DropInfo)
  drop?: DropInfo;

  /**
   * For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endpoint" })
  @Type(() => EndpointInfo)
  endpoint?: EndpointInfo;

  /**
   * For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firewall" })
  @Type(() => FirewallInfo)
  firewall?: FirewallInfo;

  /**
   * Details of the final state "forward" and associated resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "forward" })
  @Type(() => ForwardInfo)
  forward?: ForwardInfo;

  /**
   * For display only. Metadata associated with a Compute Engine forwarding rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "forwardingRule" })
  @Type(() => ForwardingRuleInfo)
  forwardingRule?: ForwardingRuleInfo;

  /**
   * For display only. Metadata associated with a Google Kubernetes Engine (GKE) cluster master.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gkeMaster" })
  @Type(() => GKEMasterInfo)
  gkeMaster?: GKEMasterInfo;

  /**
   * For display only. Metadata associated with a Compute Engine instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instance" })
  @Type(() => InstanceInfo)
  instance?: InstanceInfo;

  /**
   * For display only. Metadata associated with a load balancer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "loadBalancer" })
  @Type(() => LoadBalancerInfo)
  loadBalancer?: LoadBalancerInfo;

  /**
   * For display only. Metadata associated with a Compute Engine network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  @Type(() => NetworkInfo)
  network?: NetworkInfo;

  /**
   * Project ID that contains the configuration this step is validating.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "projectId" })
  projectId?: string;

  /**
   * For display only. Metadata associated with a Compute Engine route.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "route" })
  @Type(() => RouteInfo)
  route?: RouteInfo;

  /**
   * Each step is in one of the pre-defined states.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: StepStateEnum;

  /**
   * For display only. Metadata associated with a VPC connector.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vpcConnector" })
  @Type(() => VpcConnectorInfo)
  vpcConnector?: VpcConnectorInfo;

  /**
   * For display only. Metadata associated with a Compute Engine VPN gateway.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vpnGateway" })
  @Type(() => VpnGatewayInfo)
  vpnGateway?: VpnGatewayInfo;

  /**
   * For display only. Metadata associated with a Compute Engine VPN tunnel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vpnTunnel" })
  @Type(() => VpnTunnelInfo)
  vpnTunnel?: VpnTunnelInfo;
}
