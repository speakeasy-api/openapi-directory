/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetConsumerV1ServicesRequest {
    /**
     * Search All Locations, default is false
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=allLocations")
    public Boolean allLocations;
    public GetConsumerV1ServicesRequest withAllLocations(Boolean allLocations) {
        this.allLocations = allLocations;
        return this;
    }
    
    /**
     * Filter by default service, default is false
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=defaultService")
    public Boolean defaultService;
    public GetConsumerV1ServicesRequest withDefaultService(Boolean defaultService) {
        this.defaultService = defaultService;
        return this;
    }
    
    /**
     * Page limit default 20, max 100
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Integer limit;
    public GetConsumerV1ServicesRequest withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * id of business location, defaults to primary business location
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=locationId")
    public String locationId;
    public GetConsumerV1ServicesRequest withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * Filter by Name, supports Partial name search
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    public String name;
    public GetConsumerV1ServicesRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Starting row of page, default 0
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    public Integer offset;
    public GetConsumerV1ServicesRequest withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Filter by scope, Company, Location or All, default is All
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scope")
    public org.openapis.openapi.models.shared.ServicesScopeEnum scope;
    public GetConsumerV1ServicesRequest withScope(org.openapis.openapi.models.shared.ServicesScopeEnum scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * Filter by groupId
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=serviceGroupId")
    public Integer serviceGroupId;
    public GetConsumerV1ServicesRequest withServiceGroupId(Integer serviceGroupId) {
        this.serviceGroupId = serviceGroupId;
        return this;
    }
    
    /**
     * Filter by ServiceId, using this parameter would ignore all other parameters
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=serviceId")
    public String serviceId;
    public GetConsumerV1ServicesRequest withServiceId(String serviceId) {
        this.serviceId = serviceId;
        return this;
    }
    
    /**
     * Sort results in Descending Order, default true
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sortDescending")
    public Boolean sortDescending;
    public GetConsumerV1ServicesRequest withSortDescending(Boolean sortDescending) {
        this.sortDescending = sortDescending;
        return this;
    }
    
    /**
     * Sort results using Natural Sort or Sorted alphabetically by Service Names, default is natural
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sortOrder")
    public org.openapis.openapi.models.shared.ServiceSortOrderEnum sortOrder;
    public GetConsumerV1ServicesRequest withSortOrder(org.openapis.openapi.models.shared.ServiceSortOrderEnum sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
}
