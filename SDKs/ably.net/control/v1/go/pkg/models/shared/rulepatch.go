// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type RulePatchType string

const (
	RulePatchTypeAmqp                    RulePatchType = "amqp"
	RulePatchTypeAmqpExternal            RulePatchType = "amqp/external"
	RulePatchTypeAwsKinesis              RulePatchType = "aws/kinesis"
	RulePatchTypeAwsLambda               RulePatchType = "aws/lambda"
	RulePatchTypeAwsSqs                  RulePatchType = "aws/sqs"
	RulePatchTypeHTTP                    RulePatchType = "http"
	RulePatchTypeHTTPAzureFunction       RulePatchType = "http/azure-function"
	RulePatchTypeHTTPCloudflareWorker    RulePatchType = "http/cloudflare-worker"
	RulePatchTypeHTTPGoogleCloudFunction RulePatchType = "http/google-cloud-function"
	RulePatchTypeHTTPIfttt               RulePatchType = "http/ifttt"
	RulePatchTypeHTTPZapier              RulePatchType = "http/zapier"
	RulePatchTypeKafka                   RulePatchType = "kafka"
	RulePatchTypePulsar                  RulePatchType = "pulsar"
)

type RulePatch struct {
	HTTPRulePatch                *HTTPRulePatch
	IftttRulePatch               *IftttRulePatch
	ZapierRulePatch              *ZapierRulePatch
	CloudflareWorkerRulePatch    *CloudflareWorkerRulePatch
	AzureFunctionRulePatch       *AzureFunctionRulePatch
	GoogleCloudFunctionRulePatch *GoogleCloudFunctionRulePatch
	AwsLambdaRulePatch           *AwsLambdaRulePatch
	AwsKinesisRulePatch          *AwsKinesisRulePatch
	AwsSqsRulePatch              *AwsSqsRulePatch
	AmqpRulePatch                *AmqpRulePatch
	AmqpExternalRulePatch        *AmqpExternalRulePatch
	KafkaRulePatch               *KafkaRulePatch
	PulsarRulePatch              *PulsarRulePatch

	Type RulePatchType
}

func CreateRulePatchAmqp(amqp AmqpRulePatch) RulePatch {
	typ := RulePatchTypeAmqp
	typStr := AmqpRulePatchRuleTypeEnum(typ)
	amqp.RuleType = typStr

	return RulePatch{
		AmqpRulePatch: &amqp,
		Type:          typ,
	}
}

func CreateRulePatchAmqpExternal(amqpExternal AmqpExternalRulePatch) RulePatch {
	typ := RulePatchTypeAmqpExternal
	typStr := AmqpExternalRulePatchRuleTypeEnum(typ)
	amqpExternal.RuleType = typStr

	return RulePatch{
		AmqpExternalRulePatch: &amqpExternal,
		Type:                  typ,
	}
}

func CreateRulePatchAwsKinesis(awsKinesis AwsKinesisRulePatch) RulePatch {
	typ := RulePatchTypeAwsKinesis
	typStr := AwsKinesisRulePatchRuleTypeEnum(typ)
	awsKinesis.RuleType = typStr

	return RulePatch{
		AwsKinesisRulePatch: &awsKinesis,
		Type:                typ,
	}
}

func CreateRulePatchAwsLambda(awsLambda AwsLambdaRulePatch) RulePatch {
	typ := RulePatchTypeAwsLambda
	typStr := AwsLambdaRulePatchRuleTypeEnum(typ)
	awsLambda.RuleType = typStr

	return RulePatch{
		AwsLambdaRulePatch: &awsLambda,
		Type:               typ,
	}
}

func CreateRulePatchAwsSqs(awsSqs AwsSqsRulePatch) RulePatch {
	typ := RulePatchTypeAwsSqs
	typStr := AwsSqsRulePatchRuleTypeEnum(typ)
	awsSqs.RuleType = typStr

	return RulePatch{
		AwsSqsRulePatch: &awsSqs,
		Type:            typ,
	}
}

func CreateRulePatchHTTP(http HTTPRulePatch) RulePatch {
	typ := RulePatchTypeHTTP
	typStr := HTTPRulePatchRuleTypeEnum(typ)
	http.RuleType = typStr

	return RulePatch{
		HTTPRulePatch: &http,
		Type:          typ,
	}
}

func CreateRulePatchHTTPAzureFunction(httpAzureFunction AzureFunctionRulePatch) RulePatch {
	typ := RulePatchTypeHTTPAzureFunction
	typStr := AzureFunctionRulePatchRuleTypeEnum(typ)
	httpAzureFunction.RuleType = typStr

	return RulePatch{
		AzureFunctionRulePatch: &httpAzureFunction,
		Type:                   typ,
	}
}

func CreateRulePatchHTTPCloudflareWorker(httpCloudflareWorker CloudflareWorkerRulePatch) RulePatch {
	typ := RulePatchTypeHTTPCloudflareWorker
	typStr := CloudflareWorkerRulePatchRuleTypeEnum(typ)
	httpCloudflareWorker.RuleType = typStr

	return RulePatch{
		CloudflareWorkerRulePatch: &httpCloudflareWorker,
		Type:                      typ,
	}
}

func CreateRulePatchHTTPGoogleCloudFunction(httpGoogleCloudFunction GoogleCloudFunctionRulePatch) RulePatch {
	typ := RulePatchTypeHTTPGoogleCloudFunction
	typStr := GoogleCloudFunctionRulePatchRuleTypeEnum(typ)
	httpGoogleCloudFunction.RuleType = typStr

	return RulePatch{
		GoogleCloudFunctionRulePatch: &httpGoogleCloudFunction,
		Type:                         typ,
	}
}

func CreateRulePatchHTTPIfttt(httpIfttt IftttRulePatch) RulePatch {
	typ := RulePatchTypeHTTPIfttt
	typStr := IftttRulePatchRuleTypeEnum(typ)
	httpIfttt.RuleType = typStr

	return RulePatch{
		IftttRulePatch: &httpIfttt,
		Type:           typ,
	}
}

func CreateRulePatchHTTPZapier(httpZapier ZapierRulePatch) RulePatch {
	typ := RulePatchTypeHTTPZapier
	typStr := ZapierRulePatchRuleTypeEnum(typ)
	httpZapier.RuleType = typStr

	return RulePatch{
		ZapierRulePatch: &httpZapier,
		Type:            typ,
	}
}

func CreateRulePatchKafka(kafka KafkaRulePatch) RulePatch {
	typ := RulePatchTypeKafka
	typStr := KafkaRulePatchRuleTypeEnum(typ)
	kafka.RuleType = typStr

	return RulePatch{
		KafkaRulePatch: &kafka,
		Type:           typ,
	}
}

func CreateRulePatchPulsar(pulsar PulsarRulePatch) RulePatch {
	typ := RulePatchTypePulsar
	typStr := PulsarRulePatchRuleTypeEnum(typ)
	pulsar.RuleType = typStr

	return RulePatch{
		PulsarRulePatch: &pulsar,
		Type:            typ,
	}
}

func (u *RulePatch) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		RuleType string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.RuleType {
	case "amqp":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		amqpRulePatch := new(AmqpRulePatch)
		if err := d.Decode(&amqpRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AmqpRulePatch = amqpRulePatch
		u.Type = RulePatchTypeAmqp
		return nil
	case "amqp/external":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		amqpExternalRulePatch := new(AmqpExternalRulePatch)
		if err := d.Decode(&amqpExternalRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AmqpExternalRulePatch = amqpExternalRulePatch
		u.Type = RulePatchTypeAmqpExternal
		return nil
	case "aws/kinesis":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsKinesisRulePatch := new(AwsKinesisRulePatch)
		if err := d.Decode(&awsKinesisRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsKinesisRulePatch = awsKinesisRulePatch
		u.Type = RulePatchTypeAwsKinesis
		return nil
	case "aws/lambda":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsLambdaRulePatch := new(AwsLambdaRulePatch)
		if err := d.Decode(&awsLambdaRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsLambdaRulePatch = awsLambdaRulePatch
		u.Type = RulePatchTypeAwsLambda
		return nil
	case "aws/sqs":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsSqsRulePatch := new(AwsSqsRulePatch)
		if err := d.Decode(&awsSqsRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsSqsRulePatch = awsSqsRulePatch
		u.Type = RulePatchTypeAwsSqs
		return nil
	case "http":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		httpRulePatch := new(HTTPRulePatch)
		if err := d.Decode(&httpRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.HTTPRulePatch = httpRulePatch
		u.Type = RulePatchTypeHTTP
		return nil
	case "http/azure-function":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		azureFunctionRulePatch := new(AzureFunctionRulePatch)
		if err := d.Decode(&azureFunctionRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AzureFunctionRulePatch = azureFunctionRulePatch
		u.Type = RulePatchTypeHTTPAzureFunction
		return nil
	case "http/cloudflare-worker":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		cloudflareWorkerRulePatch := new(CloudflareWorkerRulePatch)
		if err := d.Decode(&cloudflareWorkerRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.CloudflareWorkerRulePatch = cloudflareWorkerRulePatch
		u.Type = RulePatchTypeHTTPCloudflareWorker
		return nil
	case "http/google-cloud-function":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		googleCloudFunctionRulePatch := new(GoogleCloudFunctionRulePatch)
		if err := d.Decode(&googleCloudFunctionRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GoogleCloudFunctionRulePatch = googleCloudFunctionRulePatch
		u.Type = RulePatchTypeHTTPGoogleCloudFunction
		return nil
	case "http/ifttt":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		iftttRulePatch := new(IftttRulePatch)
		if err := d.Decode(&iftttRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.IftttRulePatch = iftttRulePatch
		u.Type = RulePatchTypeHTTPIfttt
		return nil
	case "http/zapier":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		zapierRulePatch := new(ZapierRulePatch)
		if err := d.Decode(&zapierRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ZapierRulePatch = zapierRulePatch
		u.Type = RulePatchTypeHTTPZapier
		return nil
	case "kafka":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		kafkaRulePatch := new(KafkaRulePatch)
		if err := d.Decode(&kafkaRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.KafkaRulePatch = kafkaRulePatch
		u.Type = RulePatchTypeKafka
		return nil
	case "pulsar":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		pulsarRulePatch := new(PulsarRulePatch)
		if err := d.Decode(&pulsarRulePatch); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.PulsarRulePatch = pulsarRulePatch
		u.Type = RulePatchTypePulsar
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RulePatch) MarshalJSON() ([]byte, error) {
	if u.HTTPRulePatch != nil {
		return json.Marshal(u.HTTPRulePatch)
	}

	if u.IftttRulePatch != nil {
		return json.Marshal(u.IftttRulePatch)
	}

	if u.ZapierRulePatch != nil {
		return json.Marshal(u.ZapierRulePatch)
	}

	if u.CloudflareWorkerRulePatch != nil {
		return json.Marshal(u.CloudflareWorkerRulePatch)
	}

	if u.AzureFunctionRulePatch != nil {
		return json.Marshal(u.AzureFunctionRulePatch)
	}

	if u.GoogleCloudFunctionRulePatch != nil {
		return json.Marshal(u.GoogleCloudFunctionRulePatch)
	}

	if u.AwsLambdaRulePatch != nil {
		return json.Marshal(u.AwsLambdaRulePatch)
	}

	if u.AwsKinesisRulePatch != nil {
		return json.Marshal(u.AwsKinesisRulePatch)
	}

	if u.AwsSqsRulePatch != nil {
		return json.Marshal(u.AwsSqsRulePatch)
	}

	if u.AmqpRulePatch != nil {
		return json.Marshal(u.AmqpRulePatch)
	}

	if u.AmqpExternalRulePatch != nil {
		return json.Marshal(u.AmqpExternalRulePatch)
	}

	if u.KafkaRulePatch != nil {
		return json.Marshal(u.KafkaRulePatch)
	}

	if u.PulsarRulePatch != nil {
		return json.Marshal(u.PulsarRulePatch)
	}

	return nil, nil
}
