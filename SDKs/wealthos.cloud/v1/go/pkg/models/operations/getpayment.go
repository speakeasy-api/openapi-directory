// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetPaymentSecurity struct {
	APISecretKey shared.SchemeAPISecretKey `security:"scheme,type=apiKey,subtype=header"`
}

type GetPaymentPathParams struct {
	// Transaction Id
	TransactionID string `pathParam:"style=simple,explode=false,name=transaction_id"`
}

type GetPaymentHeaders struct {
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

type GetPaymentRequest struct {
	PathParams GetPaymentPathParams
	Headers    GetPaymentHeaders
	Security   GetPaymentSecurity
}

// GetPayment500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type GetPayment500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetPayment429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type GetPayment429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetPayment404ApplicationJSON - The specified resource was not found
type GetPayment404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetPayment403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type GetPayment403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetPayment401ApplicationJSON - You do not have permissions to access this resource.
type GetPayment401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetPayment400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type GetPayment400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

type GetPaymentRootTypeForPaymentsInvestmentInstructions struct {
	InvestmentProductID string `json:"investment_product_id"`
	// Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed.
	Quantity *string `json:"quantity,omitempty"`
	// Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25).
	Value *string `json:"value,omitempty"`
}

type GetPaymentRootTypeForPaymentsPaymentTypeEnum string

const (
	GetPaymentRootTypeForPaymentsPaymentTypeEnumCard                   GetPaymentRootTypeForPaymentsPaymentTypeEnum = "card"
	GetPaymentRootTypeForPaymentsPaymentTypeEnumElectronicFundTransfer GetPaymentRootTypeForPaymentsPaymentTypeEnum = "electronic_fund_transfer"
)

func (e *GetPaymentRootTypeForPaymentsPaymentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "card":
		fallthrough
	case "electronic_fund_transfer":
		*e = GetPaymentRootTypeForPaymentsPaymentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentRootTypeForPaymentsPaymentTypeEnum: %s", s)
	}
}

type GetPaymentRootTypeForPaymentsPurposeEnum string

const (
	GetPaymentRootTypeForPaymentsPurposeEnumCash   GetPaymentRootTypeForPaymentsPurposeEnum = "cash"
	GetPaymentRootTypeForPaymentsPurposeEnumInvest GetPaymentRootTypeForPaymentsPurposeEnum = "invest"
)

func (e *GetPaymentRootTypeForPaymentsPurposeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cash":
		fallthrough
	case "invest":
		*e = GetPaymentRootTypeForPaymentsPurposeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentRootTypeForPaymentsPurposeEnum: %s", s)
	}
}

type GetPaymentRootTypeForPaymentsServiceProviderEnum string

const (
	GetPaymentRootTypeForPaymentsServiceProviderEnumStripe    GetPaymentRootTypeForPaymentsServiceProviderEnum = "stripe"
	GetPaymentRootTypeForPaymentsServiceProviderEnumTruelayer GetPaymentRootTypeForPaymentsServiceProviderEnum = "truelayer"
	GetPaymentRootTypeForPaymentsServiceProviderEnumNone      GetPaymentRootTypeForPaymentsServiceProviderEnum = "none"
)

func (e *GetPaymentRootTypeForPaymentsServiceProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "stripe":
		fallthrough
	case "truelayer":
		fallthrough
	case "none":
		*e = GetPaymentRootTypeForPaymentsServiceProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentRootTypeForPaymentsServiceProviderEnum: %s", s)
	}
}

// GetPaymentRootTypeForPaymentsServiceProviderParams - Custom parameters based on prerequisites of the selected provider
type GetPaymentRootTypeForPaymentsServiceProviderParams struct {
	// Bank account ID of Investor (include if service_provider="truelayer")
	BankAccountID *string `json:"bank_account_id,omitempty"`
	// URL for Hosted Payment Page (include if service_provider="truelayer")
	HppURL *string `json:"hpp_url,omitempty"`
	// Payment intent ID (include if service_provider="truelayer")
	PaymentIntentID *string `json:"payment_intent_id,omitempty"`
}

// GetPaymentRootTypeForPaymentsStatusEnum - Status of the payment
//
// - `pending_confirmation`: Payment is pending approvals and confirmation
// - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque)
// - `succeeded`: Payment is successful. Cash is cleaned in account.
// - `cancelled`: Payment cancelled, and any held funds have been returned.
// - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
type GetPaymentRootTypeForPaymentsStatusEnum string

const (
	GetPaymentRootTypeForPaymentsStatusEnumPendingConfirmation GetPaymentRootTypeForPaymentsStatusEnum = "pending_confirmation"
	GetPaymentRootTypeForPaymentsStatusEnumProcessing          GetPaymentRootTypeForPaymentsStatusEnum = "processing"
	GetPaymentRootTypeForPaymentsStatusEnumSucceeded           GetPaymentRootTypeForPaymentsStatusEnum = "succeeded"
	GetPaymentRootTypeForPaymentsStatusEnumCancelled           GetPaymentRootTypeForPaymentsStatusEnum = "cancelled"
	GetPaymentRootTypeForPaymentsStatusEnumFailed              GetPaymentRootTypeForPaymentsStatusEnum = "failed"
)

func (e *GetPaymentRootTypeForPaymentsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending_confirmation":
		fallthrough
	case "processing":
		fallthrough
	case "succeeded":
		fallthrough
	case "cancelled":
		fallthrough
	case "failed":
		*e = GetPaymentRootTypeForPaymentsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentRootTypeForPaymentsStatusEnum: %s", s)
	}
}

// GetPaymentRootTypeForPayments - success
type GetPaymentRootTypeForPayments struct {
	Amount   string `json:"amount"`
	Currency string `json:"currency"`
	// mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager)
	InvestmentInstructions []GetPaymentRootTypeForPaymentsInvestmentInstructions `json:"investment_instructions,omitempty"`
	PaymentType            GetPaymentRootTypeForPaymentsPaymentTypeEnum          `json:"payment_type"`
	PotID                  string                                                `json:"pot_id"`
	Purpose                GetPaymentRootTypeForPaymentsPurposeEnum              `json:"purpose"`
	ServiceProvider        GetPaymentRootTypeForPaymentsServiceProviderEnum      `json:"service_provider"`
	// Custom parameters based on prerequisites of the selected provider
	ServiceProviderParams *GetPaymentRootTypeForPaymentsServiceProviderParams `json:"service_provider_params,omitempty"`
	// Status of the payment
	//
	// - `pending_confirmation`: Payment is pending approvals and confirmation
	// - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque)
	// - `succeeded`: Payment is successful. Cash is cleaned in account.
	// - `cancelled`: Payment cancelled, and any held funds have been returned.
	// - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
	Status        GetPaymentRootTypeForPaymentsStatusEnum `json:"status"`
	TransactionID string                                  `json:"transaction_id"`
}

type GetPaymentResponse struct {
	ContentType string
	// success
	RootTypeForPayments *GetPaymentRootTypeForPayments
	StatusCode          int
	RawResponse         *http.Response
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	GetPayment400ApplicationJSONObject *GetPayment400ApplicationJSON
	// You do not have permissions to access this resource.
	GetPayment401ApplicationJSONObject *GetPayment401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	GetPayment403ApplicationJSONObject *GetPayment403ApplicationJSON
	// The specified resource was not found
	GetPayment404ApplicationJSONObject *GetPayment404ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	GetPayment429ApplicationJSONObject *GetPayment429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	GetPayment500ApplicationJSONObject *GetPayment500ApplicationJSON
}
