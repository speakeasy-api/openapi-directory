"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://bulkexports.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_export_custom_job(self, request: operations.CreateExportCustomJobRequest, security: operations.CreateExportCustomJobSecurity, server_url: Optional[str] = None) -> operations.CreateExportCustomJobResponse:
        base_url = operations.CREATE_EXPORT_CUSTOM_JOB_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateExportCustomJobRequest, base_url, '/v1/Exports/{ResourceType}/Jobs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateExportCustomJobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkexportsV1ExportExportCustomJob])
                res.bulkexports_v1_export_export_custom_job = out

        return res

    def delete_job(self, request: operations.DeleteJobRequest, security: operations.DeleteJobSecurity, server_url: Optional[str] = None) -> operations.DeleteJobResponse:
        base_url = operations.DELETE_JOB_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteJobRequest, base_url, '/v1/Exports/Jobs/{JobSid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteJobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_day(self, request: operations.FetchDayRequest, security: operations.FetchDaySecurity, server_url: Optional[str] = None) -> operations.FetchDayResponse:
        r"""Fetch a specific Day."""
        base_url = operations.FETCH_DAY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchDayRequest, base_url, '/v1/Exports/{ResourceType}/Days/{Day}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchDayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 307:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkexportsV1ExportDayInstance])
                res.bulkexports_v1_export_day_instance = out

        return res

    def fetch_export(self, request: operations.FetchExportRequest, security: operations.FetchExportSecurity, server_url: Optional[str] = None) -> operations.FetchExportResponse:
        r"""Fetch a specific Export."""
        base_url = operations.FETCH_EXPORT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchExportRequest, base_url, '/v1/Exports/{ResourceType}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchExportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkexportsV1Export])
                res.bulkexports_v1_export = out

        return res

    def fetch_export_configuration(self, request: operations.FetchExportConfigurationRequest, security: operations.FetchExportConfigurationSecurity, server_url: Optional[str] = None) -> operations.FetchExportConfigurationResponse:
        r"""Fetch a specific Export Configuration."""
        base_url = operations.FETCH_EXPORT_CONFIGURATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchExportConfigurationRequest, base_url, '/v1/Exports/{ResourceType}/Configuration', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchExportConfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkexportsV1ExportConfiguration])
                res.bulkexports_v1_export_configuration = out

        return res

    def fetch_job(self, request: operations.FetchJobRequest, security: operations.FetchJobSecurity, server_url: Optional[str] = None) -> operations.FetchJobResponse:
        base_url = operations.FETCH_JOB_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchJobRequest, base_url, '/v1/Exports/Jobs/{JobSid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchJobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkexportsV1ExportJob])
                res.bulkexports_v1_export_job = out

        return res

    def list_day(self, request: operations.ListDayRequest, security: operations.ListDaySecurity, server_url: Optional[str] = None) -> operations.ListDayResponse:
        r"""Retrieve a list of all Days for a resource."""
        base_url = operations.LIST_DAY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListDayRequest, base_url, '/v1/Exports/{ResourceType}/Days', request)
        
        query_params = utils.get_query_params(operations.ListDayRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListDayListDayResponse])
                res.list_day_response = out

        return res

    def list_export_custom_job(self, request: operations.ListExportCustomJobRequest, security: operations.ListExportCustomJobSecurity, server_url: Optional[str] = None) -> operations.ListExportCustomJobResponse:
        base_url = operations.LIST_EXPORT_CUSTOM_JOB_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListExportCustomJobRequest, base_url, '/v1/Exports/{ResourceType}/Jobs', request)
        
        query_params = utils.get_query_params(operations.ListExportCustomJobRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListExportCustomJobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListExportCustomJobListExportCustomJobResponse])
                res.list_export_custom_job_response = out

        return res

    def update_export_configuration(self, request: operations.UpdateExportConfigurationRequest, security: operations.UpdateExportConfigurationSecurity, server_url: Optional[str] = None) -> operations.UpdateExportConfigurationResponse:
        r"""Update a specific Export Configuration."""
        base_url = operations.UPDATE_EXPORT_CONFIGURATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateExportConfigurationRequest, base_url, '/v1/Exports/{ResourceType}/Configuration', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateExportConfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkexportsV1ExportConfiguration])
                res.bulkexports_v1_export_configuration = out

        return res

    