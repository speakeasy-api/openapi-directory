// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type IftttRuleResponseRuleTypeEnum string

const (
	IftttRuleResponseRuleTypeEnumHTTPIfttt IftttRuleResponseRuleTypeEnum = "http/ifttt"
)

func (e IftttRuleResponseRuleTypeEnum) ToPointer() *IftttRuleResponseRuleTypeEnum {
	return &e
}

func (e *IftttRuleResponseRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http/ifttt":
		*e = IftttRuleResponseRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IftttRuleResponseRuleTypeEnum: %v", v)
	}
}

type IftttRuleResponseTarget struct {
	EventName  string `json:"eventName"`
	WebhookKey string `json:"webhookKey"`
}

type IftttRuleResponse struct {
	Links       map[string]interface{}        `json:"_links,omitempty"`
	AppID       *string                       `json:"appId,omitempty"`
	Created     *float64                      `json:"created,omitempty"`
	ID          *string                       `json:"id,omitempty"`
	Modified    *float64                      `json:"modified,omitempty"`
	RequestMode string                        `json:"requestMode"`
	RuleType    IftttRuleResponseRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                    `json:"source"`
	Status      *string                       `json:"status,omitempty"`
	Target      IftttRuleResponseTarget       `json:"target"`
	Version     *string                       `json:"version,omitempty"`
}
