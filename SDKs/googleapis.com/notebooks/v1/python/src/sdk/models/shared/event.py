"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EventTypeEnum(str, Enum):
    r"""Event type."""
    EVENT_TYPE_UNSPECIFIED = 'EVENT_TYPE_UNSPECIFIED'
    IDLE = 'IDLE'
    HEARTBEAT = 'HEARTBEAT'
    HEALTH = 'HEALTH'
    MAINTENANCE = 'MAINTENANCE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Event:
    r"""The definition of an Event for a managed / semi-managed notebook instance."""
    
    details: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Optional. Event details. This field is used to pass event information."""  
    report_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportTime'), 'exclude': lambda f: f is None }})
    r"""Event report time."""  
    type: Optional[EventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Event type."""  
    