/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ContainersUsageInfoLimits {
    /**
     * The number of containers that can be created in the space. If -1 is returned, then an unlimited number of containers can be created. The number however is counted towards and limited by the container memory. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containers")
    public Integer containers;
    public ContainersUsageInfoLimits withContainers(Integer containers) {
        this.containers = containers;
        return this;
    }
    
    /**
     * The number of public IP addresses that can be allocated to the space.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floating_ips")
    public Integer floatingIps;
    public ContainersUsageInfoLimits withFloatingIps(Integer floatingIps) {
        this.floatingIps = floatingIps;
        return this;
    }
    
    /**
     * The amount of container memory that can be used in the space in megabyte.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memory_MB")
    public Integer memoryMB;
    public ContainersUsageInfoLimits withMemoryMB(Integer memoryMB) {
        this.memoryMB = memoryMB;
        return this;
    }
    
    /**
     * The number of virtual CPUs that are assigned to the space.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vcpu")
    public Integer vcpu;
    public ContainersUsageInfoLimits withVcpu(Integer vcpu) {
        this.vcpu = vcpu;
        return this;
    }
    
}
