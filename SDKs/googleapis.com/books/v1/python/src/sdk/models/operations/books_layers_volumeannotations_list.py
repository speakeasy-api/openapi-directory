"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import volumeannotations as shared_volumeannotations
from typing import Optional


@dataclasses.dataclass
class BooksLayersVolumeAnnotationsListSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class BooksLayersVolumeAnnotationsListRequest:
    
    content_version: str = dataclasses.field(metadata={'query_param': { 'field_name': 'contentVersion', 'style': 'form', 'explode': True }})
    r"""The content version for the requested volume."""  
    layer_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'layerId', 'style': 'simple', 'explode': False }})
    r"""The ID for the layer to get the annotations."""  
    volume_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'volumeId', 'style': 'simple', 'explode': False }})
    r"""The volume to retrieve annotations for."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    end_offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endOffset', 'style': 'form', 'explode': True }})
    r"""The end offset to end retrieving data from."""  
    end_position: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endPosition', 'style': 'form', 'explode': True }})
    r"""The end position to end retrieving data from."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locale', 'style': 'form', 'explode': True }})
    r"""The locale information for the data. ISO-639-1 language and ISO-3166-1 country code. Ex: 'en_US'."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return"""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""The value of the nextToken from the previous page."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    show_deleted: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'showDeleted', 'style': 'form', 'explode': True }})
    r"""Set to true to return deleted annotations. updatedMin must be in the request to use this. Defaults to false."""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source', 'style': 'form', 'explode': True }})
    r"""String to identify the originator of this request."""  
    start_offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startOffset', 'style': 'form', 'explode': True }})
    r"""The start offset to start retrieving data from."""  
    start_position: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startPosition', 'style': 'form', 'explode': True }})
    r"""The start position to start retrieving data from."""  
    updated_max: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updatedMax', 'style': 'form', 'explode': True }})
    r"""RFC 3339 timestamp to restrict to items updated prior to this timestamp (exclusive)."""  
    updated_min: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updatedMin', 'style': 'form', 'explode': True }})
    r"""RFC 3339 timestamp to restrict to items updated since this timestamp (inclusive)."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    volume_annotations_version: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'volumeAnnotationsVersion', 'style': 'form', 'explode': True }})
    r"""The version of the volume annotations that you are requesting."""  
    

@dataclasses.dataclass
class BooksLayersVolumeAnnotationsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    volumeannotations: Optional[shared_volumeannotations.Volumeannotations] = dataclasses.field(default=None)
    r"""Successful response"""  
    