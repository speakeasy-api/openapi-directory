/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AppExternalCpd } from "./appexternalcpd";
import { DNSRuleDescriptor } from "./dnsruledescriptor";
import { FeatureDependency } from "./featuredependency";
import { LatencyDescriptor } from "./latencydescriptor";
import { ServiceDependency } from "./servicedependency";
import { ServiceDescriptor } from "./servicedescriptor";
import { TrafficRuleDescriptor } from "./trafficruledescriptor";
import { TransportDependency } from "./transportdependency";

/**
 * Content of the AppD is returned.
 */
export class AppD extends SpeakeasyBase {
  /**
   * Identifier of this MEC application descriptor. This attribute shall be globally unique. See note 1.
   */
  @SpeakeasyMetadata()
  appDId: string;

  /**
   * Describes DNS rules the MEC application requires.
   */
  @SpeakeasyMetadata({ elemType: DNSRuleDescriptor })
  appDNSRule?: DNSRuleDescriptor[];

  /**
   * Identifies the version of the application descriptor.
   */
  @SpeakeasyMetadata()
  appDVersion: string;

  /**
   * Human readable description of the MEC application.
   */
  @SpeakeasyMetadata()
  appDescription: string;

  /**
   * Describes external interface(s) exposed by this MEC application.
   */
  @SpeakeasyMetadata({ elemType: AppExternalCpd })
  appExtCpd?: AppExternalCpd[];

  /**
   * Describes features a MEC application may use if available.
   */
  @SpeakeasyMetadata({ elemType: FeatureDependency })
  appFeatureOptional?: FeatureDependency[];

  /**
   * Describes features a MEC application requires to run.
   */
  @SpeakeasyMetadata({ elemType: FeatureDependency })
  appFeatureRequired?: FeatureDependency[];

  /**
   * Human readable name for the MEC application.
   */
  @SpeakeasyMetadata()
  appInfoName?: string;

  @SpeakeasyMetadata()
  appLatency?: LatencyDescriptor;

  /**
   * Name to identify the MEC application.
   */
  @SpeakeasyMetadata()
  appName: string;

  /**
   * Provider of the application and of the AppD.
   */
  @SpeakeasyMetadata()
  appProvider: string;

  /**
   * Describes services a MEC application may use if available.
   */
  @SpeakeasyMetadata({ elemType: ServiceDependency })
  appServiceOptional?: ServiceDependency[];

  /**
   * Describes services a MEC application is able to produce to the platform or other MEC applications. Only relevant for service-producing apps.
   */
  @SpeakeasyMetadata({ elemType: ServiceDescriptor })
  appServiceProduced?: ServiceDescriptor[];

  /**
   * Describes services a MEC application requires to run.
   */
  @SpeakeasyMetadata({ elemType: ServiceDependency })
  appServiceRequired?: ServiceDependency[];

  /**
   * Identifies the version of software of the MEC application.
   */
  @SpeakeasyMetadata()
  appSoftVersion: string;

  /**
   * Describes traffic rules the MEC application requires.
   */
  @SpeakeasyMetadata({ elemType: TrafficRuleDescriptor })
  appTrafficRule?: TrafficRuleDescriptor[];

  /**
   * NFV
   */
  @SpeakeasyMetadata()
  changeAppInstanceStateOpConfig?: string;

  /**
   * Identifies version(s) of MEC system compatible with the MEC application described in this version of the AppD.
   */
  @SpeakeasyMetadata()
  mecVersion: string[];

  /**
   * Ref NFV
   */
  @SpeakeasyMetadata()
  swImageDescriptor: string;

  /**
   * NFV
   */
  @SpeakeasyMetadata()
  terminateAppInstanceOpConfig?: string;

  /**
   * Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps. See note 2.
   */
  @SpeakeasyMetadata({ elemType: TransportDependency })
  transportDependencies?: TransportDependency[];

  /**
   * Ref NFV
   */
  @SpeakeasyMetadata()
  virtualComputeDescriptor: string;

  /**
   * Defines descriptors of virtual storage resources to be used by the MEC application.
   */
  @SpeakeasyMetadata()
  virtualStorageDescriptor?: string[];
}
