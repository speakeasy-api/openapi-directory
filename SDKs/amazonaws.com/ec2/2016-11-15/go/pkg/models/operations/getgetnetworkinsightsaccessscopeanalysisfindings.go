// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETGETNetworkInsightsAccessScopeAnalysisFindingsActionEnum
type GETGETNetworkInsightsAccessScopeAnalysisFindingsActionEnum string

const (
	GETGETNetworkInsightsAccessScopeAnalysisFindingsActionEnumGetNetworkInsightsAccessScopeAnalysisFindings GETGETNetworkInsightsAccessScopeAnalysisFindingsActionEnum = "GetNetworkInsightsAccessScopeAnalysisFindings"
)

func (e GETGETNetworkInsightsAccessScopeAnalysisFindingsActionEnum) ToPointer() *GETGETNetworkInsightsAccessScopeAnalysisFindingsActionEnum {
	return &e
}

func (e *GETGETNetworkInsightsAccessScopeAnalysisFindingsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GetNetworkInsightsAccessScopeAnalysisFindings":
		*e = GETGETNetworkInsightsAccessScopeAnalysisFindingsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETNetworkInsightsAccessScopeAnalysisFindingsActionEnum: %v", v)
	}
}

// GETGETNetworkInsightsAccessScopeAnalysisFindingsVersionEnum
type GETGETNetworkInsightsAccessScopeAnalysisFindingsVersionEnum string

const (
	GETGETNetworkInsightsAccessScopeAnalysisFindingsVersionEnumTwoThousandAndSixteen1115 GETGETNetworkInsightsAccessScopeAnalysisFindingsVersionEnum = "2016-11-15"
)

func (e GETGETNetworkInsightsAccessScopeAnalysisFindingsVersionEnum) ToPointer() *GETGETNetworkInsightsAccessScopeAnalysisFindingsVersionEnum {
	return &e
}

func (e *GETGETNetworkInsightsAccessScopeAnalysisFindingsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETGETNetworkInsightsAccessScopeAnalysisFindingsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETNetworkInsightsAccessScopeAnalysisFindingsVersionEnum: %v", v)
	}
}

type GETGETNetworkInsightsAccessScopeAnalysisFindingsRequest struct {
	Action GETGETNetworkInsightsAccessScopeAnalysisFindingsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=MaxResults"`
	// The ID of the Network Access Scope analysis.
	NetworkInsightsAccessScopeAnalysisID string `queryParam:"style=form,explode=true,name=NetworkInsightsAccessScopeAnalysisId"`
	// The token for the next page of results.
	NextToken         *string                                                     `queryParam:"style=form,explode=true,name=NextToken"`
	Version           GETGETNetworkInsightsAccessScopeAnalysisFindingsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETGETNetworkInsightsAccessScopeAnalysisFindingsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
