/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The type of resource.
 */
export enum ListAnalyzedResourcesRequestBodyResourceTypeEnum {
  AWSS3Bucket = "AWS::S3::Bucket",
  AWSIAMRole = "AWS::IAM::Role",
  AWSSQSQueue = "AWS::SQS::Queue",
  AWSLambdaFunction = "AWS::Lambda::Function",
  AWSLambdaLayerVersion = "AWS::Lambda::LayerVersion",
  AWSKMSKey = "AWS::KMS::Key",
  AWSSecretsManagerSecret = "AWS::SecretsManager::Secret",
  AWSEFSFileSystem = "AWS::EFS::FileSystem",
  AWSEc2Snapshot = "AWS::EC2::Snapshot",
  AWSECRRepository = "AWS::ECR::Repository",
  AWSRDSDBSnapshot = "AWS::RDS::DBSnapshot",
  AWSRDSDBClusterSnapshot = "AWS::RDS::DBClusterSnapshot",
  AWSSNSTopic = "AWS::SNS::Topic",
}

export class ListAnalyzedResourcesRequestBody extends SpeakeasyBase {
  /**
   * The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html#permission-resources">ARN of the analyzer</a> to retrieve a list of analyzed resources from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "analyzerArn" })
  analyzerArn: string;

  /**
   * The maximum number of results to return in the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * A token used for pagination of results returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   * The type of resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceType" })
  resourceType?: ListAnalyzedResourcesRequestBodyResourceTypeEnum;
}

export class ListAnalyzedResourcesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListAnalyzedResourcesRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class ListAnalyzedResourcesResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listAnalyzedResourcesResponse?: shared.ListAnalyzedResourcesResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
