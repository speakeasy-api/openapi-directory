"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import allowedclient as shared_allowedclient
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NfsShareStateEnum(str, Enum):
    r"""Output only. The state of the NFS share."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PROVISIONED = 'PROVISIONED'
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'

class NfsShareStorageTypeEnum(str, Enum):
    r"""Immutable. The storage type of the underlying volume."""
    STORAGE_TYPE_UNSPECIFIED = 'STORAGE_TYPE_UNSPECIFIED'
    SSD = 'SSD'
    HDD = 'HDD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NfsShare:
    r"""An NFS share."""
    
    allowed_clients: Optional[list[shared_allowedclient.AllowedClient]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedClients'), 'exclude': lambda f: f is None }})
    r"""List of allowed access points."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Output only. An identifier for the NFS share, generated by the backend. This is the same value as nfs_share_id and will replace it in the future."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels as key value pairs."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Immutable. The name of the NFS share."""  
    nfs_share_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nfsShareId'), 'exclude': lambda f: f is None }})
    r"""Output only. An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead."""  
    requested_size_gib: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestedSizeGib'), 'exclude': lambda f: f is None }})
    r"""The requested size, in GiB."""  
    state: Optional[NfsShareStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of the NFS share."""  
    storage_type: Optional[NfsShareStorageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storageType'), 'exclude': lambda f: f is None }})
    r"""Immutable. The storage type of the underlying volume."""  
    volume: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volume'), 'exclude': lambda f: f is None }})
    r"""Output only. The underlying volume of the share. Created automatically during provisioning."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NfsShareInput:
    r"""An NFS share."""
    
    allowed_clients: Optional[list[shared_allowedclient.AllowedClientInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedClients'), 'exclude': lambda f: f is None }})
    r"""List of allowed access points."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels as key value pairs."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Immutable. The name of the NFS share."""  
    requested_size_gib: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestedSizeGib'), 'exclude': lambda f: f is None }})
    r"""The requested size, in GiB."""  
    storage_type: Optional[NfsShareStorageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storageType'), 'exclude': lambda f: f is None }})
    r"""Immutable. The storage type of the underlying volume."""  
    