"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Social:
    r"""social"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def social_accept_friend_request(self, request: operations.SocialAcceptFriendRequestRequest, security: operations.SocialAcceptFriendRequestSecurity) -> operations.SocialAcceptFriendRequestResponse:
        r"""Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SocialAcceptFriendRequestRequest, base_url, '/Social/Friends/Requests/Accept/{membershipId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SocialAcceptFriendRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def social_decline_friend_request(self, request: operations.SocialDeclineFriendRequestRequest, security: operations.SocialDeclineFriendRequestSecurity) -> operations.SocialDeclineFriendRequestResponse:
        r"""Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SocialDeclineFriendRequestRequest, base_url, '/Social/Friends/Requests/Decline/{membershipId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SocialDeclineFriendRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def social_get_friend_list(self) -> operations.SocialGetFriendListResponse:
        r"""Returns your Bungie Friend list"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Social/Friends/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SocialGetFriendListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def social_get_friend_request_list(self) -> operations.SocialGetFriendRequestListResponse:
        r"""Returns your friend request queue."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Social/Friends/Requests/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SocialGetFriendRequestListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def social_get_platform_friend_list(self, request: operations.SocialGetPlatformFriendListRequest) -> operations.SocialGetPlatformFriendListResponse:
        r"""Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SocialGetPlatformFriendListRequest, base_url, '/Social/PlatformFriends/{friendPlatform}/{page}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SocialGetPlatformFriendListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def social_issue_friend_request(self, request: operations.SocialIssueFriendRequestRequest, security: operations.SocialIssueFriendRequestSecurity) -> operations.SocialIssueFriendRequestResponse:
        r"""Requests a friend relationship with the target user. Any of the target user's linked membership ids are valid inputs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SocialIssueFriendRequestRequest, base_url, '/Social/Friends/Add/{membershipId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SocialIssueFriendRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def social_remove_friend(self, request: operations.SocialRemoveFriendRequest, security: operations.SocialRemoveFriendSecurity) -> operations.SocialRemoveFriendResponse:
        r"""Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SocialRemoveFriendRequest, base_url, '/Social/Friends/Remove/{membershipId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SocialRemoveFriendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def social_remove_friend_request(self, request: operations.SocialRemoveFriendRequestRequest, security: operations.SocialRemoveFriendRequestSecurity) -> operations.SocialRemoveFriendRequestResponse:
        r"""Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SocialRemoveFriendRequestRequest, base_url, '/Social/Friends/Requests/Remove/{membershipId}/', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SocialRemoveFriendRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    