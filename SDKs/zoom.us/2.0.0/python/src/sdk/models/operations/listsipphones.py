"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListSipPhonesSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ListSipPhonesRequest:
    
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_number', 'style': 'form', 'explode': True }})
    r"""**Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use \\"next_page_token\\" for pagination instead of this field.
    
    The page number of the current page in the returned records.
    """  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    search_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search_key', 'style': 'form', 'explode': True }})
    r"""User name or email address of a user. If this parameter is provided, only the SIP phone system integration enabled for that specific user will be returned. Otherwise, all SIP phones on an account will be returned."""  
    
class ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum(str, Enum):
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""
    UDP = 'UDP'
    TCP = 'TCP'
    TLS = 'TLS'
    AUTO = 'AUTO'

class ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum(str, Enum):
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""
    UDP = 'UDP'
    TCP = 'TCP'
    TLS = 'TLS'
    AUTO = 'AUTO'

class ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum(str, Enum):
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""
    UDP = 'UDP'
    TCP = 'TCP'
    TLS = 'TLS'
    AUTO = 'AUTO'


@dataclasses.dataclass
class ListSipPhones200ApplicationXMLPhones:
    
    authorization_name: Optional[str] = dataclasses.field(default=None)
    r"""Authorization name of the user  registered for SIP Phone."""  
    domain: Optional[str] = dataclasses.field(default=None)
    r"""The name or IP address of your provider’s SIP domain. (example: CDC.WEB)."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Unique Identifier of the SIP Phone."""  
    password: Optional[str] = dataclasses.field(default=None)
    r"""The password generated for the user in the SIP account."""  
    proxy_server: Optional[str] = dataclasses.field(default=None)
    r"""IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty."""  
    proxy_server2: Optional[str] = dataclasses.field(default=None)
    r"""IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty."""  
    proxy_server3: Optional[str] = dataclasses.field(default=None)
    r"""IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty."""  
    register_server: Optional[str] = dataclasses.field(default=None)
    r"""IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address."""  
    register_server2: Optional[str] = dataclasses.field(default=None)
    r"""IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address."""  
    register_server3: Optional[str] = dataclasses.field(default=None)
    r"""IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address."""  
    registration_expire_time: Optional[int] = dataclasses.field(default=None)
    r"""The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server."""  
    transport_protocol: Optional[ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum] = dataclasses.field(default=None)
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""  
    transport_protocol2: Optional[ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum] = dataclasses.field(default=None)
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""  
    transport_protocol3: Optional[ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum] = dataclasses.field(default=None)
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""  
    user_email: Optional[str] = dataclasses.field(default=None)
    r"""The email address of the user to associate with the SIP Phone. Can add [.win, .mac, .android, .ipad, .iphone, .linux, .pc, .mobile, .pad] at the end of the email (ex. user@test.com.mac) to add accounts for different platforms for the same user."""  
    user_name: Optional[str] = dataclasses.field(default=None)
    r"""The phone number associated with the user in the SIP account."""  
    voice_mail: Optional[str] = dataclasses.field(default=None)
    r"""The number to dial for checking voicemail."""  
    

@dataclasses.dataclass
class ListSipPhones200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    SIP Phones listed successfully.
    
    **Error Code:** `200`<br>
    Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.
    """
    
    next_page_token: Optional[str] = dataclasses.field(default=None)  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""The number of pages returned for the request made."""  
    page_number: Optional[int] = dataclasses.field(default=None)
    r"""The page number of the current results."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    phones: Optional[list[ListSipPhones200ApplicationXMLPhones]] = dataclasses.field(default=None)
    r"""SIP phones object."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of all the records available across pages."""  
    
class ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum(str, Enum):
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""
    UDP = 'UDP'
    TCP = 'TCP'
    TLS = 'TLS'
    AUTO = 'AUTO'

class ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum(str, Enum):
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""
    UDP = 'UDP'
    TCP = 'TCP'
    TLS = 'TLS'
    AUTO = 'AUTO'

class ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum(str, Enum):
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""
    UDP = 'UDP'
    TCP = 'TCP'
    TLS = 'TLS'
    AUTO = 'AUTO'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListSipPhones200ApplicationJSONPhones:
    
    authorization_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorization_name'), 'exclude': lambda f: f is None }})
    r"""Authorization name of the user  registered for SIP Phone."""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""The name or IP address of your provider’s SIP domain. (example: CDC.WEB)."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique Identifier of the SIP Phone."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The password generated for the user in the SIP account."""  
    proxy_server: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxy_server'), 'exclude': lambda f: f is None }})
    r"""IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty."""  
    proxy_server2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxy_server2'), 'exclude': lambda f: f is None }})
    r"""IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty."""  
    proxy_server3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxy_server3'), 'exclude': lambda f: f is None }})
    r"""IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty."""  
    register_server: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('register_server'), 'exclude': lambda f: f is None }})
    r"""IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address."""  
    register_server2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('register_server2'), 'exclude': lambda f: f is None }})
    r"""IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address."""  
    register_server3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('register_server3'), 'exclude': lambda f: f is None }})
    r"""IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address."""  
    registration_expire_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registration_expire_time'), 'exclude': lambda f: f is None }})
    r"""The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server."""  
    transport_protocol: Optional[ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transport_protocol'), 'exclude': lambda f: f is None }})
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""  
    transport_protocol2: Optional[ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transport_protocol2'), 'exclude': lambda f: f is None }})
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""  
    transport_protocol3: Optional[ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transport_protocol3'), 'exclude': lambda f: f is None }})
    r"""Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`."""  
    user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_email'), 'exclude': lambda f: f is None }})
    r"""The email address of the user to associate with the SIP Phone. Can add [.win, .mac, .android, .ipad, .iphone, .linux, .pc, .mobile, .pad] at the end of the email (ex. user@test.com.mac) to add accounts for different platforms for the same user."""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name'), 'exclude': lambda f: f is None }})
    r"""The phone number associated with the user in the SIP account."""  
    voice_mail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_mail'), 'exclude': lambda f: f is None }})
    r"""The number to dial for checking voicemail."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListSipPhones200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    SIP Phones listed successfully.
    
    **Error Code:** `200`<br>
    Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.
    """
    
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""The number of pages returned for the request made."""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_number'), 'exclude': lambda f: f is None }})
    r"""The page number of the current results."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    phones: Optional[list[ListSipPhones200ApplicationJSONPhones]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phones'), 'exclude': lambda f: f is None }})
    r"""SIP phones object."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of all the records available across pages."""  
    

@dataclasses.dataclass
class ListSipPhonesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    list_sip_phones_200_application_json_object: Optional[ListSipPhones200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    SIP Phones listed successfully.
    
    **Error Code:** `200`<br>
    Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    