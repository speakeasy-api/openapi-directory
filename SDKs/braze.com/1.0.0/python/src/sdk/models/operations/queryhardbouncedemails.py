"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class QueryHardBouncedEmailsRequest:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'email', 'style': 'form', 'explode': True }})
    r"""(Optional*) String
    
    If provided, we will return whether or not the user has hard bounced.
    
    *You must provide either an `email` or a `start_date`, and an `end_date`.
    """  
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end_date', 'style': 'form', 'explode': True }})
    r"""(Optional*) String in YYYY-MM-DD format
    
    String in YYYY-MM-DD format. End date of the range to retrieve hard bounces. This is treated as midnight in UTC time by the API.
    
    *You must provide either an `email` or a `start_date`, and an `end_date`.
    """  
    limit: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""(Optional) Integer
    
    Optional field to limit the number of results returned. Defaults to 100, maximum is 500.
    """  
    offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""(Optional) Integer
    
    Optional beginning point in the list to retrieve from.
    """  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start_date', 'style': 'form', 'explode': True }})
    r"""(Optional*) String in YYYY-MM-DD format
    
    Start date of the range to retrieve hard bounces, must be earlier than `end_date`. This is treated as midnight in UTC time by the API.
    
    *You must provide either an `email` or a `start_date`, and an `end_date`.
    """  
    

@dataclasses.dataclass
class QueryHardBouncedEmailsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    