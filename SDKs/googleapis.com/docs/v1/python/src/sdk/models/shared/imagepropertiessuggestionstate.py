"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import croppropertiessuggestionstate as shared_croppropertiessuggestionstate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImagePropertiesSuggestionState:
    r"""A mask that indicates which of the fields on the base ImageProperties have been changed in this suggestion. For any field set to true, there's a new suggested value."""
    
    angle_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('angleSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to angle."""  
    brightness_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brightnessSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to brightness."""  
    content_uri_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentUriSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to content_uri."""  
    contrast_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contrastSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to contrast."""  
    crop_properties_suggestion_state: Optional[shared_croppropertiessuggestionstate.CropPropertiesSuggestionState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cropPropertiesSuggestionState'), 'exclude': lambda f: f is None }})
    r"""A mask that indicates which of the fields on the base CropProperties have been changed in this suggestion. For any field set to true, there's a new suggested value."""  
    source_uri_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceUriSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to source_uri."""  
    transparency_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transparencySuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to transparency."""  
    