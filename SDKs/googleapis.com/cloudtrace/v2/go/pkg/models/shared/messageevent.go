// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MessageEventTypeEnum - Type of MessageEvent. Indicates whether the message was sent or received.
type MessageEventTypeEnum string

const (
	MessageEventTypeEnumTypeUnspecified MessageEventTypeEnum = "TYPE_UNSPECIFIED"
	MessageEventTypeEnumSent            MessageEventTypeEnum = "SENT"
	MessageEventTypeEnumReceived        MessageEventTypeEnum = "RECEIVED"
)

func (e MessageEventTypeEnum) ToPointer() *MessageEventTypeEnum {
	return &e
}

func (e *MessageEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "SENT":
		fallthrough
	case "RECEIVED":
		*e = MessageEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageEventTypeEnum: %v", v)
	}
}

// MessageEvent - An event describing a message sent/received between Spans.
type MessageEvent struct {
	// The number of compressed bytes sent or received. If missing, the compressed size is assumed to be the same size as the uncompressed size.
	CompressedSizeBytes *string `json:"compressedSizeBytes,omitempty"`
	// An identifier for the MessageEvent's message that can be used to match `SENT` and `RECEIVED` MessageEvents.
	ID *string `json:"id,omitempty"`
	// Type of MessageEvent. Indicates whether the message was sent or received.
	Type *MessageEventTypeEnum `json:"type,omitempty"`
	// The number of uncompressed bytes sent or received.
	UncompressedSizeBytes *string `json:"uncompressedSizeBytes,omitempty"`
}
