// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum - The target network type.
type DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum string

const (
	DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnumVpc DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum = "vpc"
)

func (e DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum) ToPointer() *DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum {
	return &e
}

func (e *DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vpc":
		*e = DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum: %v", v)
	}
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks - Describes a target network that is associated with a Client VPN endpoint. A target network is a subnet in a VPC.
type DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks struct {
	NetworkID   *string
	NetworkType *DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory - Information about the Active Directory, if applicable.
type DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory struct {
	DirectoryID *string
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication - Information about the IAM SAML identity provider, if applicable.
type DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication struct {
	SamlProviderArn            *string
	SelfServiceSamlProviderArn *string
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication - Information about the authentication certificates, if applicable.
type DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication struct {
	ClientRootCertificateChain *string
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum - The authentication type used.
type DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum string

const (
	DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnumCertificateAuthentication      DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum = "certificate-authentication"
	DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnumDirectoryServiceAuthentication DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum = "directory-service-authentication"
	DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnumFederatedAuthentication        DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum = "federated-authentication"
)

func (e DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum) ToPointer() *DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum {
	return &e
}

func (e *DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "certificate-authentication":
		fallthrough
	case "directory-service-authentication":
		fallthrough
	case "federated-authentication":
		*e = DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum: %v", v)
	}
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions - Describes the authentication methods used by a Client VPN endpoint. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html">Authentication</a> in the <i>Client VPN Administrator Guide</i>.
type DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions struct {
	ActiveDirectory         *DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory
	FederatedAuthentication *DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication
	MutualAuthentication    *DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication
	Type                    *DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum - The status code.
type DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum string

const (
	DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnumApplying DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum = "applying"
	DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnumApplied  DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum = "applied"
)

func (e DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum) ToPointer() *DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum {
	return &e
}

func (e *DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "applying":
		fallthrough
	case "applied":
		*e = DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum: %v", v)
	}
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus - The status of any updates to the client connect options.
type DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus struct {
	Code    *DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum
	Message *string
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions - The options for managing connection authorization for new client connections.
type DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions struct {
	Enabled           *bool
	LambdaFunctionArn *string
	Status            *DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions - Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.
type DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions struct {
	BannerText *string
	Enabled    *bool
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions - Information about the client connection logging options for the Client VPN endpoint.
type DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions struct {
	CloudwatchLogGroup  *string
	CloudwatchLogStream *string
	Enabled             *bool
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum - <p>The state of the Client VPN endpoint. Possible states include:</p> <ul> <li> <p> <code>pending-associate</code> - The Client VPN endpoint has been created but no target networks have been associated. The Client VPN endpoint cannot accept connections.</p> </li> <li> <p> <code>available</code> - The Client VPN endpoint has been created and a target network has been associated. The Client VPN endpoint can accept connections.</p> </li> <li> <p> <code>deleting</code> - The Client VPN endpoint is being deleted. The Client VPN endpoint cannot accept connections.</p> </li> <li> <p> <code>deleted</code> - The Client VPN endpoint has been deleted. The Client VPN endpoint cannot accept connections.</p> </li> </ul>
type DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum string

const (
	DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnumPendingAssociate DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum = "pending-associate"
	DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnumAvailable        DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum = "available"
	DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnumDeleting         DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum = "deleting"
	DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnumDeleted          DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum = "deleted"
)

func (e DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum) ToPointer() *DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum {
	return &e
}

func (e *DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending-associate":
		fallthrough
	case "available":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		*e = DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum: %v", v)
	}
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsStatus - The current state of the Client VPN endpoint.
type DescribeClientVpnEndpointsResultClientVpnEndpointsStatus struct {
	Code    *DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum
	Message *string
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsTags - Describes a tag.
type DescribeClientVpnEndpointsResultClientVpnEndpointsTags struct {
	Key   *string
	Value *string
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum - The transport protocol used by the Client VPN endpoint.
type DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum string

const (
	DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnumTCP DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum = "tcp"
	DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnumUDP DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum = "udp"
)

func (e DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum) ToPointer() *DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum {
	return &e
}

func (e *DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "udp":
		*e = DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum: %v", v)
	}
}

// DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum - The protocol used by the VPN session.
type DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum string

const (
	DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnumOpenvpn DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum = "openvpn"
)

func (e DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum) ToPointer() *DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum {
	return &e
}

func (e *DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openvpn":
		*e = DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum: %v", v)
	}
}

// DescribeClientVpnEndpointsResultClientVpnEndpoints - Describes a Client VPN endpoint.
type DescribeClientVpnEndpointsResultClientVpnEndpoints struct {
	AssociatedTargetNetworks []DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks
	AuthenticationOptions    []DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions
	ClientCidrBlock          *string
	ClientConnectOptions     *DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions
	ClientLoginBannerOptions *DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions
	ClientVpnEndpointID      *string
	ConnectionLogOptions     *DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions
	CreationTime             *string
	DeletionTime             *string
	Description              *string
	DNSName                  *string
	DNSServers               []string
	SecurityGroupIds         []string
	SelfServicePortalURL     *string
	ServerCertificateArn     *string
	SessionTimeoutHours      *int64
	SplitTunnel              *bool
	Status                   *DescribeClientVpnEndpointsResultClientVpnEndpointsStatus
	Tags                     []DescribeClientVpnEndpointsResultClientVpnEndpointsTags
	TransportProtocol        *DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum
	VpcID                    *string
	VpnPort                  *int64
	VpnProtocol              *DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum
}

// DescribeClientVpnEndpointsResult - Success
type DescribeClientVpnEndpointsResult struct {
	ClientVpnEndpoints []DescribeClientVpnEndpointsResultClientVpnEndpoints
	NextToken          *string
}
