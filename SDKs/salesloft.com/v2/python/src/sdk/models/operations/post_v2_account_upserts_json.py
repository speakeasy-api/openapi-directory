"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class PostV2AccountUpsertsJSONRequestBody:
    
    domain: str = dataclasses.field(metadata={'form': { 'field_name': 'domain' }})
    r"""Website domain, not a fully qualified URI"""  
    name: str = dataclasses.field(metadata={'form': { 'field_name': 'name' }})
    r"""Account Full Name"""  
    account_tier_id: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'account_tier_id' }})
    r"""ID of the Account Tier for this Account"""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'city' }})
    r"""City"""  
    company_stage_id: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'company_stage_id' }})
    r"""ID of the CompanyStage assigned to this Account"""  
    company_type: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'company_type' }})
    r"""Type of the Account's company"""  
    conversational_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'conversational_name' }})
    r"""Conversational name of the Account"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'country' }})
    r"""Country"""  
    crm_id: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'crm_id' }})
    r"""Requires Salesforce.
    
    ID of the person in your external CRM. You must provide a crm_id_type if this is included.
    
    Validations will be applied to the crm_id depending on the crm_id_type. A \"salesforce\" ID must be exactly 18 characters. A \"salesforce\" ID must be either an Account (001) object. The type will be validated using the 18 character ID.
    
    This field can only be used if your application or API key has the \"account:set_crm_id\" scope.
    """  
    crm_id_type: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'crm_id_type' }})
    r"""The CRM that the provided crm_id is for. Must be one of: salesforce"""  
    custom_fields: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'custom_fields', 'json': True }})
    r"""Custom fields are defined by the user's team. Only fields with values are presented in the API."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'description' }})
    r"""Description"""  
    do_not_contact: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'do_not_contact' }})
    r"""Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications"""  
    founded: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'founded' }})
    r"""Date or year of founding"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'id' }})
    r"""ID of the account to update. Used if the upsert_key=id. When id and another upsert_key are provided,
    the request will fail if the upsert record id and id parameter don't match.
    """  
    industry: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'industry' }})
    r"""Industry"""  
    linkedin_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'linkedin_url' }})
    r"""Full LinkedIn url"""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'locale' }})
    r"""Time locale"""  
    owner_id: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'owner_id' }})
    r"""ID of the User that owns this Account"""  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'phone' }})
    r"""Phone number without formatting"""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'postal_code' }})
    r"""Postal code"""  
    revenue_range: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'revenue_range' }})
    r"""Estimated revenue range"""  
    size: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'size' }})
    r"""Estimated number of people in employment"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'state' }})
    r"""State"""  
    street: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'street' }})
    r"""Street name and number"""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'tags' }})
    r"""All tags applied to this Account"""  
    twitter_handle: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'twitter_handle' }})
    r"""Twitter handle, with @"""  
    upsert_key: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'upsert_key' }})
    r"""Name of the parameter to upsert on. The field must be provided in the input parameters, or the request will fail.
    The request will also fail if there are multiple records matched by the upsert field.
    
    If upsert_key is not provided, this endpoint will not update an existing record.
    
    Valid options are: id, crm_id, domain. If crm_id is provided, then a valid crm_id_type must be provided, as documented
    for the account create and update endpoints.
    """  
    website: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'website' }})
    r"""Website"""  
    

@dataclasses.dataclass
class PostV2AccountUpsertsJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    