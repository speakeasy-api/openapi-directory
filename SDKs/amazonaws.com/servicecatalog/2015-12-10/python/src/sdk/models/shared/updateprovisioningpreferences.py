"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import stacksetoperationtype_enum as shared_stacksetoperationtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateProvisioningPreferences:
    r"""The user-defined preferences that will be applied when updating a provisioned product. Not all preferences are applicable to all provisioned product types."""
    
    stack_set_accounts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackSetAccounts'), 'exclude': lambda f: f is None }})  
    stack_set_failure_tolerance_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackSetFailureToleranceCount'), 'exclude': lambda f: f is None }})  
    stack_set_failure_tolerance_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackSetFailureTolerancePercentage'), 'exclude': lambda f: f is None }})  
    stack_set_max_concurrency_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackSetMaxConcurrencyCount'), 'exclude': lambda f: f is None }})  
    stack_set_max_concurrency_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackSetMaxConcurrencyPercentage'), 'exclude': lambda f: f is None }})  
    stack_set_operation_type: Optional[shared_stacksetoperationtype_enum.StackSetOperationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackSetOperationType'), 'exclude': lambda f: f is None }})  
    stack_set_regions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackSetRegions'), 'exclude': lambda f: f is None }})  
    