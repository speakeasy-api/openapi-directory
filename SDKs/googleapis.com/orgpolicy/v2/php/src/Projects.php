<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists constraints that could be applied on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsConstraintsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsConstraintsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsConstraintsListResponse
     */
	public function orgpolicyProjectsConstraintsList(
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsConstraintsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsConstraintsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsConstraintsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/constraints', \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsConstraintsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsConstraintsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsConstraintsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudOrgpolicyV2ListConstraintsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudOrgpolicyV2ListConstraintsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Google Cloud resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesCreateResponse
     */
	public function orgpolicyProjectsPoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/policies', \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudOrgpolicyV2PolicyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudOrgpolicyV2Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudOrgpolicyV2Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or organization policy does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesDeleteResponse
     */
	public function orgpolicyProjectsPoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a policy on a resource. If no policy is set on the resource, `NOT_FOUND` is returned. The `etag` value can be used with `UpdatePolicy()` to update a policy during read-modify-write.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetResponse
     */
	public function orgpolicyProjectsPoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudOrgpolicyV2Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudOrgpolicyV2Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the effective policy on a resource. This is the result of merging policies in the resource hierarchy and evaluating conditions. The returned policy will not have an `etag` or `condition` set because it is an evaluated policy across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetEffectivePolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetEffectivePolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetEffectivePolicyResponse
     */
	public function orgpolicyProjectsPoliciesGetEffectivePolicy(
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetEffectivePolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetEffectivePolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetEffectivePolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:getEffectivePolicy', \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetEffectivePolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetEffectivePolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesGetEffectivePolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudOrgpolicyV2Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudOrgpolicyV2Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves all of the policies that exist on a particular resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesListResponse
     */
	public function orgpolicyProjectsPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/policies', \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudOrgpolicyV2ListPoliciesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudOrgpolicyV2ListPoliciesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesPatchResponse
     */
	public function orgpolicyProjectsPoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudOrgpolicyV2PolicyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OrgpolicyProjectsPoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudOrgpolicyV2Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudOrgpolicyV2Policy', 'json');
            }
        }

        return $response;
    }
}