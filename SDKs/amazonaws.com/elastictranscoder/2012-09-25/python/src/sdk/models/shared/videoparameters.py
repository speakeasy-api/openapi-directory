"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import presetwatermark as shared_presetwatermark
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoParameters:
    r"""The <code>VideoParameters</code> structure."""
    
    aspect_ratio: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AspectRatio'), 'exclude': lambda f: f is None }})  
    bit_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BitRate'), 'exclude': lambda f: f is None }})  
    codec: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Codec'), 'exclude': lambda f: f is None }})  
    codec_options: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CodecOptions'), 'exclude': lambda f: f is None }})  
    display_aspect_ratio: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DisplayAspectRatio'), 'exclude': lambda f: f is None }})  
    fixed_gop: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FixedGOP'), 'exclude': lambda f: f is None }})  
    frame_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FrameRate'), 'exclude': lambda f: f is None }})  
    keyframes_max_dist: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyframesMaxDist'), 'exclude': lambda f: f is None }})  
    max_frame_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxFrameRate'), 'exclude': lambda f: f is None }})  
    max_height: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxHeight'), 'exclude': lambda f: f is None }})  
    max_width: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxWidth'), 'exclude': lambda f: f is None }})  
    padding_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaddingPolicy'), 'exclude': lambda f: f is None }})  
    resolution: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Resolution'), 'exclude': lambda f: f is None }})  
    sizing_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SizingPolicy'), 'exclude': lambda f: f is None }})  
    watermarks: Optional[list[shared_presetwatermark.PresetWatermark]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Watermarks'), 'exclude': lambda f: f is None }})  
    