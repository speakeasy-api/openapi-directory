"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import analysisstatusunion as shared_analysisstatusunion
from ..shared import analysistype_enum as shared_analysistype_enum
from ..shared import antipatternreportresult as shared_antipatternreportresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Result:
    r"""The error in server analysis."""
    
    analysis_status: Optional[shared_analysisstatusunion.AnalysisStatusUnion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisStatus'), 'exclude': lambda f: f is None }})  
    analysis_type: Optional[shared_analysistype_enum.AnalysisTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysisType'), 'exclude': lambda f: f is None }})  
    antipattern_report_result_list: Optional[list[shared_antipatternreportresult.AntipatternReportResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antipatternReportResultList'), 'exclude': lambda f: f is None }})  
    status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusMessage'), 'exclude': lambda f: f is None }})  
    