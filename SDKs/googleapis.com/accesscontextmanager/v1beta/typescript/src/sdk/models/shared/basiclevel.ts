/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Condition } from "./condition";
import { Expose, Type } from "class-transformer";

/**
 * How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.
 */
export enum BasicLevelCombiningFunctionEnum {
  And = "AND",
  Or = "OR",
}

/**
 * `BasicLevel` is an `AccessLevel` using a set of recommended features.
 */
export class BasicLevel extends SpeakeasyBase {
  /**
   * How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "combiningFunction" })
  combiningFunction?: BasicLevelCombiningFunctionEnum;

  /**
   * Required. A list of requirements for the `AccessLevel` to be granted.
   */
  @SpeakeasyMetadata({ elemType: Condition })
  @Expose({ name: "conditions" })
  @Type(() => Condition)
  conditions?: Condition[];
}
