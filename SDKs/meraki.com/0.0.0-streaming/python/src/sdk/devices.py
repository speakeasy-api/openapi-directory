"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Devices:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def claim_network_devices(self, request: operations.ClaimNetworkDevicesRequest) -> operations.ClaimNetworkDevicesResponse:
        r"""Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed)
        Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requests against that device to succeed)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClaimNetworkDevicesRequest, base_url, '/networks/{networkId}/devices/claim', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClaimNetworkDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def cycle_device_switch_ports(self, request: operations.CycleDeviceSwitchPortsRequest) -> operations.CycleDeviceSwitchPortsResponse:
        r"""Cycle a set of switch ports
        Cycle a set of switch ports
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CycleDeviceSwitchPortsRequest, base_url, '/devices/{serial}/switch/ports/cycle', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CycleDeviceSwitchPortsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.cycle_device_switch_ports_200_application_json_object = out

        return res

    def get_network_device(self, request: operations.GetNetworkDeviceRequest) -> operations.GetNetworkDeviceResponse:
        r"""Return a single device
        Return a single device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkDeviceRequest, base_url, '/networks/{networkId}/devices/{serial}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_device_200_application_json_object = out

        return res

    def get_network_device_loss_and_latency_history(self, request: operations.GetNetworkDeviceLossAndLatencyHistoryRequest) -> operations.GetNetworkDeviceLossAndLatencyHistoryResponse:
        r"""Get the uplink loss percentage and latency in milliseconds for a wired network device.
        Get the uplink loss percentage and latency in milliseconds for a wired network device.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkDeviceLossAndLatencyHistoryRequest, base_url, '/networks/{networkId}/devices/{serial}/lossAndLatencyHistory', request)
        
        query_params = utils.get_query_params(operations.GetNetworkDeviceLossAndLatencyHistoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkDeviceLossAndLatencyHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_device_loss_and_latency_history_200_application_json_objects = out

        return res

    def get_network_device_performance(self, request: operations.GetNetworkDevicePerformanceRequest) -> operations.GetNetworkDevicePerformanceResponse:
        r"""Return the performance score for a single MX
        Return the performance score for a single MX. Only primary MX devices supported. If no data is available, a 204 error code is returned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkDevicePerformanceRequest, base_url, '/networks/{networkId}/devices/{serial}/performance', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkDevicePerformanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_device_performance_200_application_json_object = out

        return res

    def get_network_device_uplink(self, request: operations.GetNetworkDeviceUplinkRequest) -> operations.GetNetworkDeviceUplinkResponse:
        r"""Return the uplink information for a device.
        Return the uplink information for a device.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkDeviceUplinkRequest, base_url, '/networks/{networkId}/devices/{serial}/uplink', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkDeviceUplinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_device_uplink_200_application_json_objects = out

        return res

    def get_network_devices(self, request: operations.GetNetworkDevicesRequest) -> operations.GetNetworkDevicesResponse:
        r"""List the devices in a network
        List the devices in a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkDevicesRequest, base_url, '/networks/{networkId}/devices', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_devices_200_application_json_objects = out

        return res

    def get_organization_devices(self, request: operations.GetOrganizationDevicesRequest) -> operations.GetOrganizationDevicesResponse:
        r"""List the devices in an organization
        List the devices in an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationDevicesRequest, base_url, '/organizations/{organizationId}/devices', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationDevicesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_devices_200_application_json_objects = out

        return res

    def reboot_network_device(self, request: operations.RebootNetworkDeviceRequest) -> operations.RebootNetworkDeviceResponse:
        r"""Reboot a device
        Reboot a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RebootNetworkDeviceRequest, base_url, '/networks/{networkId}/devices/{serial}/reboot', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RebootNetworkDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.reboot_network_device_200_application_json_object = out

        return res

    def remove_network_device(self, request: operations.RemoveNetworkDeviceRequest) -> operations.RemoveNetworkDeviceResponse:
        r"""Remove a single device
        Remove a single device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveNetworkDeviceRequest, base_url, '/networks/{networkId}/devices/{serial}/remove', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveNetworkDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_network_device(self, request: operations.UpdateNetworkDeviceRequest) -> operations.UpdateNetworkDeviceResponse:
        r"""Update the attributes of a device
        Update the attributes of a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkDeviceRequest, base_url, '/networks/{networkId}/devices/{serial}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_device_200_application_json_object = out

        return res

    