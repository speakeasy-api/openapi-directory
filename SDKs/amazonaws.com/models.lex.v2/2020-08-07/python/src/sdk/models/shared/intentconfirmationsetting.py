"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import conditionalspecification as shared_conditionalspecification
from ..shared import dialogcodehookinvocationsetting as shared_dialogcodehookinvocationsetting
from ..shared import dialogstate as shared_dialogstate
from ..shared import elicitationcodehookinvocationsetting as shared_elicitationcodehookinvocationsetting
from ..shared import promptspecification as shared_promptspecification
from ..shared import responsespecification as shared_responsespecification
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IntentConfirmationSetting:
    r"""Provides a prompt for making sure that the user is ready for the intent to be fulfilled."""
    
    prompt_specification: shared_promptspecification.PromptSpecification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promptSpecification') }})  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})  
    code_hook: Optional[shared_dialogcodehookinvocationsetting.DialogCodeHookInvocationSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codeHook'), 'exclude': lambda f: f is None }})  
    confirmation_conditional: Optional[shared_conditionalspecification.ConditionalSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmationConditional'), 'exclude': lambda f: f is None }})  
    confirmation_next_step: Optional[shared_dialogstate.DialogState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmationNextStep'), 'exclude': lambda f: f is None }})  
    confirmation_response: Optional[shared_responsespecification.ResponseSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmationResponse'), 'exclude': lambda f: f is None }})
    r"""Specifies a list of message groups that Amazon Lex uses to respond the user input."""  
    declination_conditional: Optional[shared_conditionalspecification.ConditionalSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('declinationConditional'), 'exclude': lambda f: f is None }})  
    declination_next_step: Optional[shared_dialogstate.DialogState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('declinationNextStep'), 'exclude': lambda f: f is None }})  
    declination_response: Optional[shared_responsespecification.ResponseSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('declinationResponse'), 'exclude': lambda f: f is None }})  
    elicitation_code_hook: Optional[shared_elicitationcodehookinvocationsetting.ElicitationCodeHookInvocationSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elicitationCodeHook'), 'exclude': lambda f: f is None }})  
    failure_conditional: Optional[shared_conditionalspecification.ConditionalSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureConditional'), 'exclude': lambda f: f is None }})
    r"""Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition."""  
    failure_next_step: Optional[shared_dialogstate.DialogState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureNextStep'), 'exclude': lambda f: f is None }})  
    failure_response: Optional[shared_responsespecification.ResponseSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureResponse'), 'exclude': lambda f: f is None }})
    r"""Specifies a list of message groups that Amazon Lex uses to respond the user input."""  
    