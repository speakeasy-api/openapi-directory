// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateSlotRequestBodyMultipleValuesSetting - Indicates whether a slot can return multiple values.
type CreateSlotRequestBodyMultipleValuesSetting struct {
	AllowMultipleValues *bool `json:"allowMultipleValues,omitempty"`
}

// CreateSlotRequestBodyObfuscationSetting - Determines whether Amazon Lex obscures slot values in conversation logs.
type CreateSlotRequestBodyObfuscationSetting struct {
	ObfuscationSettingType *shared.ObfuscationSettingTypeEnum `json:"obfuscationSettingType,omitempty"`
}

// CreateSlotRequestBodySubSlotSetting - Specifications for the constituent sub slots and the expression for the composite slot.
type CreateSlotRequestBodySubSlotSetting struct {
	Expression         *string                          `json:"expression,omitempty"`
	SlotSpecifications map[string]shared.Specifications `json:"slotSpecifications,omitempty"`
}

// CreateSlotRequestBodyValueElicitationSetting - Specifies the elicitation setting details for constituent sub slots of a composite slot.
type CreateSlotRequestBodyValueElicitationSetting struct {
	DefaultValueSpecification *shared.SlotDefaultValueSpecification `json:"defaultValueSpecification,omitempty"`
	PromptSpecification       *shared.PromptSpecification           `json:"promptSpecification,omitempty"`
	SampleUtterances          []shared.SampleUtterance              `json:"sampleUtterances,omitempty"`
	SlotCaptureSetting        *shared.SlotCaptureSetting            `json:"slotCaptureSetting,omitempty"`
	SlotConstraint            *shared.SlotConstraintEnum            `json:"slotConstraint,omitempty"`
	// Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
	WaitAndContinueSpecification *shared.WaitAndContinueSpecification `json:"waitAndContinueSpecification,omitempty"`
}

type CreateSlotRequestBody struct {
	// A description of the slot. Use this to help identify the slot in lists.
	Description *string `json:"description,omitempty"`
	// Indicates whether a slot can return multiple values.
	MultipleValuesSetting *CreateSlotRequestBodyMultipleValuesSetting `json:"multipleValuesSetting,omitempty"`
	// Determines whether Amazon Lex obscures slot values in conversation logs.
	ObfuscationSetting *CreateSlotRequestBodyObfuscationSetting `json:"obfuscationSetting,omitempty"`
	// The name of the slot. Slot names must be unique within the bot that contains the slot.
	SlotName string `json:"slotName"`
	// The unique identifier for the slot type associated with this slot. The slot type determines the values that can be entered into the slot.
	SlotTypeID *string `json:"slotTypeId,omitempty"`
	// Specifications for the constituent sub slots and the expression for the composite slot.
	SubSlotSetting *CreateSlotRequestBodySubSlotSetting `json:"subSlotSetting,omitempty"`
	// Specifies the elicitation setting details for constituent sub slots of a composite slot.
	ValueElicitationSetting CreateSlotRequestBodyValueElicitationSetting `json:"valueElicitationSetting"`
}

type CreateSlotRequest struct {
	RequestBody       CreateSlotRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The identifier of the bot associated with the slot.
	BotID string `pathParam:"style=simple,explode=false,name=botId"`
	// The version of the bot associated with the slot.
	BotVersion string `pathParam:"style=simple,explode=false,name=botVersion"`
	// The identifier of the intent that contains the slot.
	IntentID string `pathParam:"style=simple,explode=false,name=intentId"`
	// The identifier of the language and locale that the slot will be used in. The string must match one of the supported locales. All of the bots, intents, slot types used by the slot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.
	LocaleID string `pathParam:"style=simple,explode=false,name=localeId"`
}

type CreateSlotResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateSlotResponse *shared.CreateSlotResponse
	// InternalServerException
	InternalServerException interface{}
	// PreconditionFailedException
	PreconditionFailedException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
