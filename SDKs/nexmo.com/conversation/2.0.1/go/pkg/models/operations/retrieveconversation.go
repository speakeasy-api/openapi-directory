// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type RetrieveConversationRequest struct {
	// Conversation ID
	ConversationID string `pathParam:"style=simple,explode=false,name=conversation_id"`
}

type RetrieveConversation200ApplicationJSONMembers struct {
	// A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`
	Channel   *shared.Channel   `json:"channel,omitempty"`
	Initiator *shared.Initiator `json:"initiator,omitempty"`
	// Member ID
	MemberID *string `json:"member_id,omitempty"`
	// Unique name for a user
	Name *string `json:"name,omitempty"`
	// The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`
	State     *shared.MemberStateEnum    `json:"state,omitempty"`
	Timestamp *shared.TimestampResMember `json:"timestamp,omitempty"`
	// User ID
	UserID *string `json:"user_id,omitempty"`
}

type RetrieveConversation200ApplicationJSONProperties struct {
	Video *bool `json:"video,omitempty"`
}

// RetrieveConversation200ApplicationJSON - Conversation Object
type RetrieveConversation200ApplicationJSON struct {
	Links *shared.LinksConversation `json:"_links,omitempty"`
	// The API key for your account
	APIKey *string `json:"api_key,omitempty"`
	// The display name for the conversation. It does not have to be unique
	DisplayName *string `json:"display_name,omitempty"`
	// Users associated to this conversation as members
	Members []RetrieveConversation200ApplicationJSONMembers `json:"members,omitempty"`
	// Unique name for a conversation
	Name       *string                                           `json:"name,omitempty"`
	Numbers    map[string]interface{}                            `json:"numbers,omitempty"`
	Properties *RetrieveConversation200ApplicationJSONProperties `json:"properties,omitempty"`
	// The last Event ID in this conversation. This ID can be used to [retrieve a specific event](#getEvent)
	SequenceNumber *string                          `json:"sequence_number,omitempty"`
	Timestamp      *shared.TimestampResConversation `json:"timestamp,omitempty"`
	// The unique identifier for this conversation
	UUID string `json:"uuid"`
}

type RetrieveConversationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Retrieve a conversation
	RetrieveConversation200ApplicationJSONObject *RetrieveConversation200ApplicationJSON
}
