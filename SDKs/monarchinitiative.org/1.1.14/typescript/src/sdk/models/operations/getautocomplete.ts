/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetAutocompleteRequest extends SpeakeasyBase {
  /**
   * boost function e.g. pow(edges,0.334)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=boost_fx",
  })
  boostFx?: string[];

  /**
   * boost query e.g. category:genotype^-10
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=boost_q",
  })
  boostQ?: string[];

  /**
   * e.g. gene, disease
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=category",
  })
  category?: string[];

  /**
   * Exclude grouping classes (classes with subclasses)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_groups",
  })
  excludeGroups?: boolean;

  /**
   * fq string passed directly to solr, note that multiple filters will be combined with an AND operator. Combining fq_string with other parameters may result in unexpected behavior.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=fq" })
  fq?: string[];

  /**
   * highlight class
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=highlight_class",
  })
  highlightClass?: string;

  /**
   * Include equivalent ids in prefix filter
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_eqs",
  })
  includeEqs?: boolean;

  /**
   * minimum should match parameter, see solr docs for details
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_match",
  })
  minMatch?: string;

  /**
   * set to true to use the minimal tokenizer, good for variants and genotypes
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=minimal_tokenizer",
  })
  minimalTokenizer?: boolean;

  /**
   * ontology prefix: HP, -MONDO
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prefix",
  })
  prefix?: string[];

  /**
   * number of rows
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=rows" })
  rows?: number;

  /**
   * row number to start from
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=start" })
  start?: string;

  /**
   * taxon filter, eg NCBITaxon:9606, includes inferred taxa
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=taxon" })
  taxon?: string[];

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=term",
  })
  term: string;
}

export class GetAutocompleteResponse extends SpeakeasyBase {
  /**
   * Success
   */
  @SpeakeasyMetadata()
  autocompleteResults?: shared.AutocompleteResults;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
