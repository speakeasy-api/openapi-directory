// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AssociateResourceResourceTypeEnum - The type of resource of which the application will be associated.
type AssociateResourceResourceTypeEnum string

const (
	AssociateResourceResourceTypeEnumCfnStack         AssociateResourceResourceTypeEnum = "CFN_STACK"
	AssociateResourceResourceTypeEnumResourceTagValue AssociateResourceResourceTypeEnum = "RESOURCE_TAG_VALUE"
)

func (e AssociateResourceResourceTypeEnum) ToPointer() *AssociateResourceResourceTypeEnum {
	return &e
}

func (e *AssociateResourceResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CFN_STACK":
		fallthrough
	case "RESOURCE_TAG_VALUE":
		*e = AssociateResourceResourceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateResourceResourceTypeEnum: %v", v)
	}
}

type AssociateResourceRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	//  The name, ID, or ARN of the application.
	Application string `pathParam:"style=simple,explode=false,name=application"`
	// The name or ID of the resource of which the application will be associated.
	Resource string `pathParam:"style=simple,explode=false,name=resource"`
	// The type of resource of which the application will be associated.
	ResourceType AssociateResourceResourceTypeEnum `pathParam:"style=simple,explode=false,name=resourceType"`
}

type AssociateResourceResponse struct {
	// Success
	AssociateResourceResponse *shared.AssociateResourceResponse
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
