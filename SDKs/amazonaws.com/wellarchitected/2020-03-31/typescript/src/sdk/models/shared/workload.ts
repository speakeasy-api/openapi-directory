/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { WorkloadDiscoveryConfig } from "./workloaddiscoveryconfig";
import { WorkloadEnvironmentEnum } from "./workloadenvironmentenum";
import { WorkloadImprovementStatusEnum } from "./workloadimprovementstatusenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A workload return object.
 */
export class Workload extends SpeakeasyBase {
  /**
   * The list of Amazon Web Services account IDs associated with the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountIds" })
  accountIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "Applications" })
  applications?: string[];

  /**
   * The URL of the architectural design for the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ArchitecturalDesign" })
  architecturalDesign?: string;

  /**
   * The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AwsRegions" })
  awsRegions?: string[];

  /**
   * The description for the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DiscoveryConfig" })
  @Type(() => WorkloadDiscoveryConfig)
  discoveryConfig?: WorkloadDiscoveryConfig;

  /**
   * The environment for the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Environment" })
  environment?: WorkloadEnvironmentEnum;

  /**
   * The improvement status for a workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ImprovementStatus" })
  improvementStatus?: WorkloadImprovementStatusEnum;

  /**
   * The industry for the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Industry" })
  industry?: string;

  /**
   * <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IndustryType" })
  industryType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "IsReviewOwnerUpdateAcknowledged" })
  isReviewOwnerUpdateAcknowledged?: boolean;

  /**
   * The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Lenses" })
  lenses?: string[];

  /**
   *  The list of non-Amazon Web Services Regions associated with the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NonAwsRegions" })
  nonAwsRegions?: string[];

  /**
   * The notes associated with the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Notes" })
  notes?: string;

  /**
   * An Amazon Web Services account ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Owner" })
  owner?: string;

  /**
   * The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PillarPriorities" })
  pillarPriorities?: string[];

  /**
   * The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReviewOwner" })
  reviewOwner?: string;

  /**
   * The date and time recorded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReviewRestrictionDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  reviewRestrictionDate?: Date;

  /**
   * A map from risk names to the count of how questions have that rating.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RiskCounts" })
  riskCounts?: Record<string, number>;

  @SpeakeasyMetadata()
  @Expose({ name: "ShareInvitationId" })
  shareInvitationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;

  /**
   * The date and time recorded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * The ARN for the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "WorkloadArn" })
  workloadArn?: string;

  /**
   * The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "WorkloadId" })
  workloadId?: string;

  /**
   * <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "WorkloadName" })
  workloadName?: string;
}
