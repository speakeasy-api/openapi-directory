"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import networkaddressreservation as shared_networkaddressreservation
from ..shared import networkmountpoint as shared_networkmountpoint
from ..shared import vrf as shared_vrf
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NetworkStateEnum(str, Enum):
    r"""The Network state."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PROVISIONING = 'PROVISIONING'
    PROVISIONED = 'PROVISIONED'
    DEPROVISIONING = 'DEPROVISIONING'
    UPDATING = 'UPDATING'

class NetworkTypeEnum(str, Enum):
    r"""The type of this network."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CLIENT = 'CLIENT'
    PRIVATE = 'PRIVATE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Network:
    r"""A Network."""
    
    cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cidr'), 'exclude': lambda f: f is None }})
    r"""The cidr of the Network."""  
    gateway_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayIp'), 'exclude': lambda f: f is None }})
    r"""Output only. Gateway ip address."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""An identifier for the `Network`, generated by the backend."""  
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipAddress'), 'exclude': lambda f: f is None }})
    r"""IP address configured."""  
    jumbo_frames_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jumboFramesEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether network uses standard frames or jumbo ones."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels as key value pairs."""  
    mac_address: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('macAddress'), 'exclude': lambda f: f is None }})
    r"""List of physical interfaces."""  
    mount_points: Optional[list[shared_networkmountpoint.NetworkMountPoint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mountPoints'), 'exclude': lambda f: f is None }})
    r"""Input only. List of mount points to attach the network to."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`"""  
    pod: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pod'), 'exclude': lambda f: f is None }})
    r"""Output only. Pod name."""  
    reservations: Optional[list[shared_networkaddressreservation.NetworkAddressReservation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservations'), 'exclude': lambda f: f is None }})
    r"""List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server."""  
    services_cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servicesCidr'), 'exclude': lambda f: f is None }})
    r"""IP range for reserved for services (e.g. NFS)."""  
    state: Optional[NetworkStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The Network state."""  
    type: Optional[NetworkTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of this network."""  
    vlan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanId'), 'exclude': lambda f: f is None }})
    r"""The vlan id of the Network."""  
    vrf: Optional[shared_vrf.Vrf] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vrf'), 'exclude': lambda f: f is None }})
    r"""A network VRF."""  
    