// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TeamHittingVsStartingPitcherFormatEnum - Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
type TeamHittingVsStartingPitcherFormatEnum string

const (
	TeamHittingVsStartingPitcherFormatEnumXML  TeamHittingVsStartingPitcherFormatEnum = "XML"
	TeamHittingVsStartingPitcherFormatEnumJSON TeamHittingVsStartingPitcherFormatEnum = "JSON"
)

func (e *TeamHittingVsStartingPitcherFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "XML":
		fallthrough
	case "JSON":
		*e = TeamHittingVsStartingPitcherFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamHittingVsStartingPitcherFormatEnum: %s", s)
	}
}

type TeamHittingVsStartingPitcherPathParams struct {
	// Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
	Format TeamHittingVsStartingPitcherFormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// The GameID of an MLB game.  GameIDs can be found in the Games API.  Valid entries are <code>14620</code> or <code>16905</code>
	Gameid string `pathParam:"style=simple,explode=false,name=gameid"`
	// The abbreviation of the requested team.
	// <br>Examples: <code>SF</code>, <code>NYY</code>.
	Team string `pathParam:"style=simple,explode=false,name=team"`
}

type TeamHittingVsStartingPitcherRequest struct {
	PathParams TeamHittingVsStartingPitcherPathParams
}

type TeamHittingVsStartingPitcherResponse struct {
	ContentType   string
	PlayerSeasons []shared.PlayerSeason
	StatusCode    int
	RawResponse   *http.Response
}
