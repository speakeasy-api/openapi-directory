// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// Order - Contains all information related to a single order to process with Square,
// including line items that specify the products to purchase. `Order` objects also
// include information about any associated tenders, refunds, and returns.
//
// All Connect V2 Transactions have all been converted to Orders including all associated
// itemization data.
type Order struct {
	// The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example "2016-09-04T23:59:33.123Z").
	ClosedAt *string `json:"closed_at,omitempty"`
	// The timestamp for when the order was created, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
	CreatedAt *string `json:"created_at,omitempty"`
	// The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.
	//
	// __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions
	// to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the
	// `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the
	// creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
	CustomerID *string `json:"customer_id,omitempty"`
	// The list of all discounts associated with the order.
	//
	// Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`,
	// an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to.
	// For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount`
	// for every line item.
	//
	// __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated
	// `line_items.discounts` field results in an error. Use `line_items.applied_discounts`
	// instead.
	Discounts []OrderLineItemDiscount `json:"discounts,omitempty"`
	// Details about order fulfillment.
	//
	// Orders can only be created with at most one fulfillment. However, orders returned
	// by the API might contain multiple fulfillments.
	Fulfillments []OrderFulfillment `json:"fulfillments,omitempty"`
	// The order's unique ID.
	ID *string `json:"id,omitempty"`
	// The line items included in the order.
	LineItems []OrderLineItem `json:"line_items,omitempty"`
	// The ID of the seller location that this order is associated with.
	LocationID string `json:"location_id"`
	// Application-defined data attached to this order. Metadata fields are intended
	// to store descriptive references or associations with an entity in another system or store brief
	// information about the object. Square does not process this field; it only stores and returns it
	// in relevant API calls. Do not use metadata to store any sensitive information (such as personally
	// identifiable information or card details).
	//
	// Keys written by applications must be 60 characters or less and must be in the character set
	// `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
	// with a namespace, separated from the key with a ':' character.
	//
	// Values have a maximum length of 255 characters.
	//
	// An application can have up to 10 entries per metadata field.
	//
	// Entries written by applications are private and can only be read or modified by the same
	// application.
	//
	// For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
	Metadata map[string]string `json:"metadata,omitempty"`
	// A collection of various money amounts.
	NetAmounts *OrderMoneyAmounts `json:"net_amounts,omitempty"`
	// Pricing options for an order. The options affect how the order's price is calculated.
	// They can be used, for example, to apply automatic price adjustments that are based on preconfigured
	// [pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
	PricingOptions *OrderPricingOptions `json:"pricing_options,omitempty"`
	// A client-specified ID to associate an entity in another system
	// with this order.
	ReferenceID *string `json:"reference_id,omitempty"`
	// The refunds that are part of this order.
	Refunds []Refund `json:"refunds,omitempty"`
	// A collection of various money amounts.
	ReturnAmounts *OrderMoneyAmounts `json:"return_amounts,omitempty"`
	// A collection of items from sale orders being returned in this one. Normally part of an
	// itemized return or exchange. There is exactly one `Return` object per sale `Order` being
	// referenced.
	Returns []OrderReturn `json:"returns,omitempty"`
	// A set-like list of Rewards that have been added to the Order.
	Rewards []OrderReward `json:"rewards,omitempty"`
	// A rounding adjustment of the money being returned. Commonly used to apply cash rounding
	// when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
	RoundingAdjustment *OrderRoundingAdjustment `json:"rounding_adjustment,omitempty"`
	// A list of service charges applied to the order.
	ServiceCharges []OrderServiceCharge `json:"service_charges,omitempty"`
	// Represents the origination details of an order.
	Source *OrderSource `json:"source,omitempty"`
	// The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`.
	State *string `json:"state,omitempty"`
	// The list of all taxes associated with the order.
	//
	// Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an
	// `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes
	// with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.
	//
	// On reads, each tax in the list includes the total amount of that tax applied to the order.
	//
	// __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated
	// `line_items.taxes` field results in an error. Use `line_items.applied_taxes`
	// instead.
	Taxes []OrderLineItemTax `json:"taxes,omitempty"`
	// The tenders that were used to pay for the order.
	Tenders []Tender `json:"tenders,omitempty"`
	// Represents an amount of money. `Money` fields can be signed or unsigned.
	// Fields that do not explicitly define whether they are signed or unsigned are
	// considered unsigned and can only hold positive amounts. For signed fields, the
	// sign of the value indicates the purpose of the money transfer. See
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	// for more information.
	TotalDiscountMoney *Money `json:"total_discount_money,omitempty"`
	// Represents an amount of money. `Money` fields can be signed or unsigned.
	// Fields that do not explicitly define whether they are signed or unsigned are
	// considered unsigned and can only hold positive amounts. For signed fields, the
	// sign of the value indicates the purpose of the money transfer. See
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	// for more information.
	TotalMoney *Money `json:"total_money,omitempty"`
	// Represents an amount of money. `Money` fields can be signed or unsigned.
	// Fields that do not explicitly define whether they are signed or unsigned are
	// considered unsigned and can only hold positive amounts. For signed fields, the
	// sign of the value indicates the purpose of the money transfer. See
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	// for more information.
	TotalServiceChargeMoney *Money `json:"total_service_charge_money,omitempty"`
	// Represents an amount of money. `Money` fields can be signed or unsigned.
	// Fields that do not explicitly define whether they are signed or unsigned are
	// considered unsigned and can only hold positive amounts. For signed fields, the
	// sign of the value indicates the purpose of the money transfer. See
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	// for more information.
	TotalTaxMoney *Money `json:"total_tax_money,omitempty"`
	// Represents an amount of money. `Money` fields can be signed or unsigned.
	// Fields that do not explicitly define whether they are signed or unsigned are
	// considered unsigned and can only hold positive amounts. For signed fields, the
	// sign of the value indicates the purpose of the money transfer. See
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
	// for more information.
	TotalTipMoney *Money `json:"total_tip_money,omitempty"`
	// The timestamp for when the order was last updated, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
	UpdatedAt *string `json:"updated_at,omitempty"`
	// The version number, which is incremented each time an update is committed to the order.
	// Orders not created through the API do not include a version number and
	// therefore cannot be updated.
	//
	// [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
	Version *int64 `json:"version,omitempty"`
}
