// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateTokenSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// CreateTokenRequestBodyActionEnum - For <i>type=ACTION</i> only; defines token action to be perfromed
type CreateTokenRequestBodyActionEnum string

const (
	CreateTokenRequestBodyActionEnumLicenseeLogin CreateTokenRequestBodyActionEnum = "licenseeLogin"
)

func (e CreateTokenRequestBodyActionEnum) ToPointer() *CreateTokenRequestBodyActionEnum {
	return &e
}

func (e *CreateTokenRequestBodyActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "licenseeLogin":
		*e = CreateTokenRequestBodyActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTokenRequestBodyActionEnum: %v", v)
	}
}

// CreateTokenRequestBodyAPIKeyRoleEnum - For <i>tokenType=APIKEY</i> only (default: ROLE_APIKEY_LICENSEE); defines token RoleID
type CreateTokenRequestBodyAPIKeyRoleEnum string

const (
	CreateTokenRequestBodyAPIKeyRoleEnumRoleApikeyLicensee    CreateTokenRequestBodyAPIKeyRoleEnum = "ROLE_APIKEY_LICENSEE"
	CreateTokenRequestBodyAPIKeyRoleEnumRoleApikeyAnalytics   CreateTokenRequestBodyAPIKeyRoleEnum = "ROLE_APIKEY_ANALYTICS"
	CreateTokenRequestBodyAPIKeyRoleEnumRoleApikeyOperation   CreateTokenRequestBodyAPIKeyRoleEnum = "ROLE_APIKEY_OPERATION"
	CreateTokenRequestBodyAPIKeyRoleEnumRoleApikeyMaintenance CreateTokenRequestBodyAPIKeyRoleEnum = "ROLE_APIKEY_MAINTENANCE"
	CreateTokenRequestBodyAPIKeyRoleEnumRoleApikeyAdmin       CreateTokenRequestBodyAPIKeyRoleEnum = "ROLE_APIKEY_ADMIN"
)

func (e CreateTokenRequestBodyAPIKeyRoleEnum) ToPointer() *CreateTokenRequestBodyAPIKeyRoleEnum {
	return &e
}

func (e *CreateTokenRequestBodyAPIKeyRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ROLE_APIKEY_LICENSEE":
		fallthrough
	case "ROLE_APIKEY_ANALYTICS":
		fallthrough
	case "ROLE_APIKEY_OPERATION":
		fallthrough
	case "ROLE_APIKEY_MAINTENANCE":
		fallthrough
	case "ROLE_APIKEY_ADMIN":
		*e = CreateTokenRequestBodyAPIKeyRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTokenRequestBodyAPIKeyRoleEnum: %v", v)
	}
}

// CreateTokenRequestBodyTokenTypeEnum - Token type to be generated
type CreateTokenRequestBodyTokenTypeEnum string

const (
	CreateTokenRequestBodyTokenTypeEnumDefault CreateTokenRequestBodyTokenTypeEnum = "DEFAULT"
	CreateTokenRequestBodyTokenTypeEnumShop    CreateTokenRequestBodyTokenTypeEnum = "SHOP"
	CreateTokenRequestBodyTokenTypeEnumApikey  CreateTokenRequestBodyTokenTypeEnum = "APIKEY"
)

func (e CreateTokenRequestBodyTokenTypeEnum) ToPointer() *CreateTokenRequestBodyTokenTypeEnum {
	return &e
}

func (e *CreateTokenRequestBodyTokenTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEFAULT":
		fallthrough
	case "SHOP":
		fallthrough
	case "APIKEY":
		*e = CreateTokenRequestBodyTokenTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTokenRequestBodyTokenTypeEnum: %v", v)
	}
}

// CreateTokenRequestBodyTypeEnum - For <i>tokenType=DEFAULT</i> only; action type to be set
type CreateTokenRequestBodyTypeEnum string

const (
	CreateTokenRequestBodyTypeEnumAction CreateTokenRequestBodyTypeEnum = "ACTION"
)

func (e CreateTokenRequestBodyTypeEnum) ToPointer() *CreateTokenRequestBodyTypeEnum {
	return &e
}

func (e *CreateTokenRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION":
		*e = CreateTokenRequestBodyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTokenRequestBodyTypeEnum: %v", v)
	}
}

type CreateTokenRequestBody struct {
	// For <i>type=ACTION</i> only; defines token action to be perfromed
	Action *CreateTokenRequestBodyActionEnum `form:"name=action"`
	// For <i>tokenType=APIKEY</i> only (default: ROLE_APIKEY_LICENSEE); defines token RoleID
	APIKeyRole *CreateTokenRequestBodyAPIKeyRoleEnum `form:"name=apiKeyRole"`
	// For <i>tokenType=SHOP</i> only; take customers to this URL when they cancel their checkout
	CancelURL *string `form:"name=cancelURL"`
	// For <i>tokenType=SHOP</i> only; shop link title for cancel checkout process
	CancelURLTitle *string `form:"name=cancelURLTitle"`
	// For <i>tokenType=SHOP</i> only; identifies LicenseTemplate that will be assigned to the shop token
	LicenseTemplateNumber *string `form:"name=licenseTemplateNumber"`
	// For <i>tokenType=SHOP</i> or <i>type=ACTION</i> only (mandatory); identifies Licensee that will be assigned to the shop token
	LicenseeNumber *string `form:"name=licenseeNumber"`
	// For <i>tokenType=SHOP</i> only; identifies Shopping Item name that will be shown to the customer
	PredefinedShoppingItem *string `form:"name=predefinedShoppingItem"`
	// For <i>tokenType=APIKEY</i> only (optional); defines PrivateKey to be used with the validate method<br/><strong>Please Note:</strong> PrivateKey need to be provided as one line without spaces
	PrivateKey *string `form:"name=privateKey"`
	// For <i>tokenType=SHOP</i> only (mandatory); identifies Product that will be assigned to the shop token
	ProductNumber *string `form:"name=productNumber"`
	// For <i>tokenType=SHOP</i> only; take customers to this URL when they finish checkout
	SuccessURL *string `form:"name=successURL"`
	// For <i>tokenType=SHOP</i> only; shop link title for successful checkout process
	SuccessURLTitle *string `form:"name=successURLTitle"`
	// Token type to be generated
	TokenType CreateTokenRequestBodyTokenTypeEnum `form:"name=tokenType"`
	// For <i>tokenType=DEFAULT</i> only; action type to be set
	Type *CreateTokenRequestBodyTypeEnum `form:"name=type"`
}

type CreateTokenResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful request
	Netlicensing *shared.Netlicensing
}
