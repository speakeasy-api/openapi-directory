<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a batch workload that executes asynchronously.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesCreateResponse
     */
	public function dataprocProjectsLocationsBatchesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/batches', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists batch workloads.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesListResponse
     */
	public function dataprocProjectsLocationsBatchesList(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/batches', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsLocationsBatchesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBatchesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBatchesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates new autoscaling policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesCreateResponse
     */
	public function dataprocProjectsRegionsAutoscalingPoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/autoscalingPolicies', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "autoscalingPolicyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->autoscalingPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AutoscalingPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists autoscaling policies in the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesListResponse
     */
	public function dataprocProjectsRegionsAutoscalingPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/autoscalingPolicies', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsAutoscalingPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAutoscalingPoliciesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAutoscalingPoliciesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersCreateResponse
     */
	public function dataprocProjectsRegionsClustersCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/clusters', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clusterInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDeleteResponse
     */
	public function dataprocProjectsRegionsClustersDelete(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/clusters/{clusterName}', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets cluster diagnostic information. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata). After the operation completes, Operation.response contains DiagnoseClusterResults (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#diagnoseclusterresults).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDiagnoseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDiagnoseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDiagnoseResponse
     */
	public function dataprocProjectsRegionsClustersDiagnose(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDiagnoseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDiagnoseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDiagnoseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:diagnose', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDiagnoseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "diagnoseClusterRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDiagnoseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersDiagnoseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the resource representation for a cluster in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersGetResponse
     */
	public function dataprocProjectsRegionsClustersGet(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/clusters/{clusterName}', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cluster = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Cluster', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inject encrypted credentials into all of the VMs in a cluster.The target cluster must be a personal auth cluster assigned to the user who is issuing the RPC.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersInjectCredentialsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersInjectCredentialsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersInjectCredentialsResponse
     */
	public function dataprocProjectsRegionsClustersInjectCredentials(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersInjectCredentialsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersInjectCredentialsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersInjectCredentialsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{project}/{region}/{cluster}:injectCredentials', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersInjectCredentialsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "injectCredentialsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersInjectCredentialsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersInjectCredentialsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all regions/{region}/clusters in a project alphabetically.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersListResponse
     */
	public function dataprocProjectsRegionsClustersList(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/clusters', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listClustersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListClustersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a node group in a cluster. The returned Operation.metadata is NodeGroupOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#nodegroupoperationmetadata).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsCreateResponse
     */
	public function dataprocProjectsRegionsClustersNodeGroupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/nodeGroups', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeGroupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resizes a node group in a cluster. The returned Operation.metadata is NodeGroupOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#nodegroupoperationmetadata).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsResizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsResizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsResizeResponse
     */
	public function dataprocProjectsRegionsClustersNodeGroupsResize(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsResizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsResizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsResizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:resize', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsResizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resizeNodeGroupRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsResizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersNodeGroupsResizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata). The cluster must be in a RUNNING state or an error is returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersPatchResponse
     */
	public function dataprocProjectsRegionsClustersPatch(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/clusters/{clusterName}', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clusterInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Repairs a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersRepairRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersRepairSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersRepairResponse
     */
	public function dataprocProjectsRegionsClustersRepair(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersRepairRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersRepairSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersRepairResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:repair', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersRepairRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "repairClusterRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersRepairRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersRepairResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a cluster in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStartResponse
     */
	public function dataprocProjectsRegionsClustersStart(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:start', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "startClusterRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a cluster in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStopResponse
     */
	public function dataprocProjectsRegionsClustersStop(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:stop', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "stopClusterRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsClustersStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts a job cancellation request. To access the job resource after cancellation, call regions/{region}/jobs.list (https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/list) or regions/{region}/jobs.get (https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/get).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsCancelResponse
     */
	public function dataprocProjectsRegionsJobsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/jobs/{jobId}:cancel', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the job from the project. If the job is active, the delete fails, and the response returns FAILED_PRECONDITION.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsDeleteResponse
     */
	public function dataprocProjectsRegionsJobsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the resource representation for a job in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsGetResponse
     */
	public function dataprocProjectsRegionsJobsGet(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists regions/{region}/jobs in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsListResponse
     */
	public function dataprocProjectsRegionsJobsList(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/jobs', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a job in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsPatchResponse
     */
	public function dataprocProjectsRegionsJobsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Submits a job to a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitResponse
     */
	public function dataprocProjectsRegionsJobsSubmit(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/jobs:submit', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "submitJobRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Submits job to a cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitAsOperationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitAsOperationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitAsOperationResponse
     */
	public function dataprocProjectsRegionsJobsSubmitAsOperation(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitAsOperationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitAsOperationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitAsOperationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/projects/{projectId}/regions/{region}/jobs:submitAsOperation', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitAsOperationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "submitJobRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitAsOperationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsJobsSubmitAsOperationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsOperationsCancelResponse
     */
	public function dataprocProjectsRegionsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates new workflow template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesCreateResponse
     */
	public function dataprocProjectsRegionsWorkflowTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/workflowTemplates', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workflowTemplateInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workflowTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WorkflowTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a workflow template. It does not cancel in-progress workflows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesDeleteResponse
     */
	public function dataprocProjectsRegionsWorkflowTemplatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the latest workflow template.Can retrieve previously instantiated template by specifying optional version parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetResponse
     */
	public function dataprocProjectsRegionsWorkflowTemplatesGet(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workflowTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WorkflowTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetIamPolicyResponse
     */
	public function dataprocProjectsRegionsWorkflowTemplatesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Instantiates a template and begins execution.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateResponse
     */
	public function dataprocProjectsRegionsWorkflowTemplatesInstantiate(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:instantiate', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instantiateWorkflowTemplateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Instantiates a template and begins execution.This method is equivalent to executing the sequence CreateWorkflowTemplate, InstantiateWorkflowTemplate, DeleteWorkflowTemplate.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateInlineRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateInlineSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateInlineResponse
     */
	public function dataprocProjectsRegionsWorkflowTemplatesInstantiateInline(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateInlineRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateInlineSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateInlineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/workflowTemplates:instantiateInline', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateInlineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workflowTemplateInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateInlineRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesInstantiateInlineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists workflows that match the specified filter in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesListResponse
     */
	public function dataprocProjectsRegionsWorkflowTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/workflowTemplates', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWorkflowTemplatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWorkflowTemplatesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesSetIamPolicyResponse
     */
	public function dataprocProjectsRegionsWorkflowTemplatesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesTestIamPermissionsResponse
     */
	public function dataprocProjectsRegionsWorkflowTemplatesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates (replaces) workflow template. The updated template must contain version that matches the current server version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesUpdateResponse
     */
	public function dataprocProjectsRegionsWorkflowTemplatesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "workflowTemplateInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataprocProjectsRegionsWorkflowTemplatesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->workflowTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WorkflowTemplate', 'json');
            }
        }

        return $response;
    }
}