// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type UpdateMediaAffinityIntentHandlingInvocationResponseType string

const (
	UpdateMediaAffinityIntentHandlingInvocationResponseTypeProtocolException                                    UpdateMediaAffinityIntentHandlingInvocationResponseType = "ProtocolException"
	UpdateMediaAffinityIntentHandlingInvocationResponseTypeUpdateMediaAffinityIntentHandlingHandle              UpdateMediaAffinityIntentHandlingInvocationResponseType = "UpdateMediaAffinityIntentHandling.handle"
	UpdateMediaAffinityIntentHandlingInvocationResponseTypeUpdateMediaAffinityIntentHandlingResolveAffinityType UpdateMediaAffinityIntentHandlingInvocationResponseType = "UpdateMediaAffinityIntentHandling.resolveAffinityType"
	UpdateMediaAffinityIntentHandlingInvocationResponseTypeUpdateMediaAffinityIntentHandlingResolveMediaItems   UpdateMediaAffinityIntentHandlingInvocationResponseType = "UpdateMediaAffinityIntentHandling.resolveMediaItems"
)

type UpdateMediaAffinityIntentHandlingInvocationResponse struct {
	UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse   *UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse
	UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse *UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse
	UpdateMediaAffinityIntentHandlingHandleInvocationResponse              *UpdateMediaAffinityIntentHandlingHandleInvocationResponse
	ProtocolExceptionInvocationResponse                                    *ProtocolExceptionInvocationResponse

	Type UpdateMediaAffinityIntentHandlingInvocationResponseType
}

func CreateUpdateMediaAffinityIntentHandlingInvocationResponseProtocolException(protocolException ProtocolExceptionInvocationResponse) UpdateMediaAffinityIntentHandlingInvocationResponse {
	typ := UpdateMediaAffinityIntentHandlingInvocationResponseTypeProtocolException
	typStr := string(typ)
	protocolException.Method = typStr

	return UpdateMediaAffinityIntentHandlingInvocationResponse{
		ProtocolExceptionInvocationResponse: &protocolException,
		Type:                                typ,
	}
}

func CreateUpdateMediaAffinityIntentHandlingInvocationResponseUpdateMediaAffinityIntentHandlingHandle(updateMediaAffinityIntentHandlingHandle UpdateMediaAffinityIntentHandlingHandleInvocationResponse) UpdateMediaAffinityIntentHandlingInvocationResponse {
	typ := UpdateMediaAffinityIntentHandlingInvocationResponseTypeUpdateMediaAffinityIntentHandlingHandle
	typStr := string(typ)
	updateMediaAffinityIntentHandlingHandle.Method = typStr

	return UpdateMediaAffinityIntentHandlingInvocationResponse{
		UpdateMediaAffinityIntentHandlingHandleInvocationResponse: &updateMediaAffinityIntentHandlingHandle,
		Type: typ,
	}
}

func CreateUpdateMediaAffinityIntentHandlingInvocationResponseUpdateMediaAffinityIntentHandlingResolveAffinityType(updateMediaAffinityIntentHandlingResolveAffinityType UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse) UpdateMediaAffinityIntentHandlingInvocationResponse {
	typ := UpdateMediaAffinityIntentHandlingInvocationResponseTypeUpdateMediaAffinityIntentHandlingResolveAffinityType
	typStr := string(typ)
	updateMediaAffinityIntentHandlingResolveAffinityType.Method = typStr

	return UpdateMediaAffinityIntentHandlingInvocationResponse{
		UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse: &updateMediaAffinityIntentHandlingResolveAffinityType,
		Type: typ,
	}
}

func CreateUpdateMediaAffinityIntentHandlingInvocationResponseUpdateMediaAffinityIntentHandlingResolveMediaItems(updateMediaAffinityIntentHandlingResolveMediaItems UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse) UpdateMediaAffinityIntentHandlingInvocationResponse {
	typ := UpdateMediaAffinityIntentHandlingInvocationResponseTypeUpdateMediaAffinityIntentHandlingResolveMediaItems
	typStr := string(typ)
	updateMediaAffinityIntentHandlingResolveMediaItems.Method = typStr

	return UpdateMediaAffinityIntentHandlingInvocationResponse{
		UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse: &updateMediaAffinityIntentHandlingResolveMediaItems,
		Type: typ,
	}
}

func (u *UpdateMediaAffinityIntentHandlingInvocationResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Method string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Method {
	case "ProtocolException":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		protocolExceptionInvocationResponse := new(ProtocolExceptionInvocationResponse)
		if err := d.Decode(&protocolExceptionInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ProtocolExceptionInvocationResponse = protocolExceptionInvocationResponse
		u.Type = UpdateMediaAffinityIntentHandlingInvocationResponseTypeProtocolException
		return nil
	case "UpdateMediaAffinityIntentHandling.handle":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		updateMediaAffinityIntentHandlingHandleInvocationResponse := new(UpdateMediaAffinityIntentHandlingHandleInvocationResponse)
		if err := d.Decode(&updateMediaAffinityIntentHandlingHandleInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.UpdateMediaAffinityIntentHandlingHandleInvocationResponse = updateMediaAffinityIntentHandlingHandleInvocationResponse
		u.Type = UpdateMediaAffinityIntentHandlingInvocationResponseTypeUpdateMediaAffinityIntentHandlingHandle
		return nil
	case "UpdateMediaAffinityIntentHandling.resolveAffinityType":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		updateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse := new(UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse)
		if err := d.Decode(&updateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse = updateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse
		u.Type = UpdateMediaAffinityIntentHandlingInvocationResponseTypeUpdateMediaAffinityIntentHandlingResolveAffinityType
		return nil
	case "UpdateMediaAffinityIntentHandling.resolveMediaItems":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		updateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse := new(UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse)
		if err := d.Decode(&updateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse = updateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse
		u.Type = UpdateMediaAffinityIntentHandlingInvocationResponseTypeUpdateMediaAffinityIntentHandlingResolveMediaItems
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateMediaAffinityIntentHandlingInvocationResponse) MarshalJSON() ([]byte, error) {
	if u.UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse != nil {
		return json.Marshal(u.UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse)
	}

	if u.UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse != nil {
		return json.Marshal(u.UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse)
	}

	if u.UpdateMediaAffinityIntentHandlingHandleInvocationResponse != nil {
		return json.Marshal(u.UpdateMediaAffinityIntentHandlingHandleInvocationResponse)
	}

	if u.ProtocolExceptionInvocationResponse != nil {
		return json.Marshal(u.ProtocolExceptionInvocationResponse)
	}

	return nil, nil
}
