// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetGanalyticsOrphanURLsMediumEnum - Type of traffic, value: 'organic' (from search engine)or 'social' (from a social network)
type GetGanalyticsOrphanURLsMediumEnum string

const (
	GetGanalyticsOrphanURLsMediumEnumOrganic GetGanalyticsOrphanURLsMediumEnum = "organic"
	GetGanalyticsOrphanURLsMediumEnumSocial  GetGanalyticsOrphanURLsMediumEnum = "social"
)

func (e GetGanalyticsOrphanURLsMediumEnum) ToPointer() *GetGanalyticsOrphanURLsMediumEnum {
	return &e
}

func (e *GetGanalyticsOrphanURLsMediumEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "organic":
		fallthrough
	case "social":
		*e = GetGanalyticsOrphanURLsMediumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGanalyticsOrphanURLsMediumEnum: %v", v)
	}
}

// GetGanalyticsOrphanURLsSourceEnum - Traffic source, value: name of the search engine or social network
type GetGanalyticsOrphanURLsSourceEnum string

const (
	GetGanalyticsOrphanURLsSourceEnumAll        GetGanalyticsOrphanURLsSourceEnum = "all"
	GetGanalyticsOrphanURLsSourceEnumAol        GetGanalyticsOrphanURLsSourceEnum = "aol"
	GetGanalyticsOrphanURLsSourceEnumAsk        GetGanalyticsOrphanURLsSourceEnum = "ask"
	GetGanalyticsOrphanURLsSourceEnumBaidu      GetGanalyticsOrphanURLsSourceEnum = "baidu"
	GetGanalyticsOrphanURLsSourceEnumBing       GetGanalyticsOrphanURLsSourceEnum = "bing"
	GetGanalyticsOrphanURLsSourceEnumFacebook   GetGanalyticsOrphanURLsSourceEnum = "facebook"
	GetGanalyticsOrphanURLsSourceEnumGoogle     GetGanalyticsOrphanURLsSourceEnum = "google"
	GetGanalyticsOrphanURLsSourceEnumGooglePlus GetGanalyticsOrphanURLsSourceEnum = "google+"
	GetGanalyticsOrphanURLsSourceEnumLinkedin   GetGanalyticsOrphanURLsSourceEnum = "linkedin"
	GetGanalyticsOrphanURLsSourceEnumNaver      GetGanalyticsOrphanURLsSourceEnum = "naver"
	GetGanalyticsOrphanURLsSourceEnumPinterest  GetGanalyticsOrphanURLsSourceEnum = "pinterest"
	GetGanalyticsOrphanURLsSourceEnumReddit     GetGanalyticsOrphanURLsSourceEnum = "reddit"
	GetGanalyticsOrphanURLsSourceEnumTumblr     GetGanalyticsOrphanURLsSourceEnum = "tumblr"
	GetGanalyticsOrphanURLsSourceEnumTwitter    GetGanalyticsOrphanURLsSourceEnum = "twitter"
	GetGanalyticsOrphanURLsSourceEnumYahoo      GetGanalyticsOrphanURLsSourceEnum = "yahoo"
	GetGanalyticsOrphanURLsSourceEnumYandex     GetGanalyticsOrphanURLsSourceEnum = "yandex"
)

func (e GetGanalyticsOrphanURLsSourceEnum) ToPointer() *GetGanalyticsOrphanURLsSourceEnum {
	return &e
}

func (e *GetGanalyticsOrphanURLsSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "aol":
		fallthrough
	case "ask":
		fallthrough
	case "baidu":
		fallthrough
	case "bing":
		fallthrough
	case "facebook":
		fallthrough
	case "google":
		fallthrough
	case "google+":
		fallthrough
	case "linkedin":
		fallthrough
	case "naver":
		fallthrough
	case "pinterest":
		fallthrough
	case "reddit":
		fallthrough
	case "tumblr":
		fallthrough
	case "twitter":
		fallthrough
	case "yahoo":
		fallthrough
	case "yandex":
		*e = GetGanalyticsOrphanURLsSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetGanalyticsOrphanURLsSourceEnum: %v", v)
	}
}

type GetGanalyticsOrphanURLsRequest struct {
	// Analysis' identifier
	AnalysisSlug string `pathParam:"style=simple,explode=false,name=analysis_slug"`
	// Type of traffic, value: 'organic' (from search engine)or 'social' (from a social network)
	Medium GetGanalyticsOrphanURLsMediumEnum `pathParam:"style=simple,explode=false,name=medium"`
	// Page Number
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Project's identifier
	ProjectSlug string `pathParam:"style=simple,explode=false,name=project_slug"`
	// Page Size
	Size *int64 `queryParam:"style=form,explode=true,name=size"`
	// Traffic source, value: name of the search engine or social network
	Source GetGanalyticsOrphanURLsSourceEnum `pathParam:"style=simple,explode=false,name=source"`
	// User's identifier
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

// GetGanalyticsOrphanURLs200ApplicationJSON - Successful operation
type GetGanalyticsOrphanURLs200ApplicationJSON struct {
	Count    *int64                   `json:"count,omitempty"`
	Next     *string                  `json:"next,omitempty"`
	Page     *int64                   `json:"page,omitempty"`
	Previous *string                  `json:"previous,omitempty"`
	Results  []shared.CrawlOrphanURLs `json:"results,omitempty"`
	Size     *int64                   `json:"size,omitempty"`
}

type GetGanalyticsOrphanURLsResponse struct {
	ContentType string
	// error payload
	DefaultPayload *shared.DefaultPayload
	StatusCode     int
	RawResponse    *http.Response
	// Successful operation
	GetGanalyticsOrphanURLs200ApplicationJSONObject *GetGanalyticsOrphanURLs200ApplicationJSON
}
