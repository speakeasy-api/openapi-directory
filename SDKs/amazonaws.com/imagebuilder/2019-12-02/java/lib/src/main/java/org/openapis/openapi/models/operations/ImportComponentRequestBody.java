/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ImportComponentRequestBody {
    /**
     * The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changeDescription")
    public String changeDescription;
    public ImportComponentRequestBody withChangeDescription(String changeDescription) {
        this.changeDescription = changeDescription;
        return this;
    }
    
    /**
     * The idempotency token of the component.
     */
    @JsonProperty("clientToken")
    public String clientToken;
    public ImportComponentRequestBody withClientToken(String clientToken) {
        this.clientToken = clientToken;
        return this;
    }
    
    /**
     * The data of the component. Used to specify the data inline. Either &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;uri&lt;/code&gt; can be used to specify the data within the component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    public String data;
    public ImportComponentRequestBody withData(String data) {
        this.data = data;
        return this;
    }
    
    /**
     * The description of the component. Describes the contents of the component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public ImportComponentRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The format of the resource that you want to import as a component.
     */
    @JsonProperty("format")
    public ImportComponentRequestBodyFormatEnum format;
    public ImportComponentRequestBody withFormat(ImportComponentRequestBodyFormatEnum format) {
        this.format = format;
        return this;
    }
    
    /**
     * The ID of the KMS key that should be used to encrypt this component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kmsKeyId")
    public String kmsKeyId;
    public ImportComponentRequestBody withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }
    
    /**
     *  The name of the component.
     */
    @JsonProperty("name")
    public String name;
    public ImportComponentRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The platform of the component.
     */
    @JsonProperty("platform")
    public ImportComponentRequestBodyPlatformEnum platform;
    public ImportComponentRequestBody withPlatform(ImportComponentRequestBodyPlatformEnum platform) {
        this.platform = platform;
        return this;
    }
    
    /**
     * &lt;p&gt;The semantic version of the component. This version follows the semantic version syntax.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The semantic version has four nodes: &amp;lt;major&amp;gt;.&amp;lt;minor&amp;gt;.&amp;lt;patch&amp;gt;/&amp;lt;build&amp;gt;. You can assign values for the first three, and can filter on all of them.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Filtering:&lt;/b&gt; With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.&lt;/p&gt; &lt;/note&gt;
     */
    @JsonProperty("semanticVersion")
    public String semanticVersion;
    public ImportComponentRequestBody withSemanticVersion(String semanticVersion) {
        this.semanticVersion = semanticVersion;
        return this;
    }
    
    /**
     * The tags of the component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;
    public ImportComponentRequestBody withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The type of the component denotes whether the component is used to build the image, or only to test it.
     */
    @JsonProperty("type")
    public ImportComponentRequestBodyTypeEnum type;
    public ImportComponentRequestBody withType(ImportComponentRequestBodyTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The uri of the component. Must be an Amazon S3 URL and the requester must have permission to access the Amazon S3 bucket. If you use Amazon S3, you can specify component content up to your service quota. Either &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;uri&lt;/code&gt; can be used to specify the data within the component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uri")
    public String uri;
    public ImportComponentRequestBody withUri(String uri) {
        this.uri = uri;
        return this;
    }
    
}
