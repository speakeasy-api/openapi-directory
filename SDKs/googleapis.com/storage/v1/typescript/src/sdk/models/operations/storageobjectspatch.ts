/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class StorageObjectsPatchSecurityOption1 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class StorageObjectsPatchSecurityOption2 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class StorageObjectsPatchSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "security, option=true" })
  option1?: StorageObjectsPatchSecurityOption1;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option2?: StorageObjectsPatchSecurityOption2;
}

/**
 * Apply a predefined set of access controls to this object.
 */
export enum StorageObjectsPatchPredefinedACLEnum {
  AuthenticatedRead = "authenticatedRead",
  BucketOwnerFullControl = "bucketOwnerFullControl",
  BucketOwnerRead = "bucketOwnerRead",
  Private = "private",
  ProjectPrivate = "projectPrivate",
  PublicRead = "publicRead",
}

/**
 * Set of properties to return. Defaults to full.
 */
export enum StorageObjectsPatchProjectionEnum {
  Full = "full",
  NoAcl = "noAcl",
}

export class StorageObjectsPatchRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  object1?: shared.ObjectT;

  /**
   * Data format for the response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * Name of the bucket in which the object resides.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=bucket",
  })
  bucket: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * If present, selects a specific revision of this object (as opposed to the latest version, the default).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=generation",
  })
  generation?: string;

  /**
   * Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ifGenerationMatch",
  })
  ifGenerationMatch?: string;

  /**
   * Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ifGenerationNotMatch",
  })
  ifGenerationNotMatch?: string;

  /**
   * Makes the operation conditional on whether the object's current metageneration matches the given value.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ifMetagenerationMatch",
  })
  ifMetagenerationMatch?: string;

  /**
   * Makes the operation conditional on whether the object's current metageneration does not match the given value.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ifMetagenerationNotMatch",
  })
  ifMetagenerationNotMatch?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=object",
  })
  objectPathParameter: string;

  /**
   * Apply a predefined set of access controls to this object.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=predefinedAcl",
  })
  predefinedAcl?: StorageObjectsPatchPredefinedACLEnum;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Set of properties to return. Defaults to full.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=projection",
  })
  projection?: StorageObjectsPatchProjectionEnum;

  /**
   * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * Upload protocol for media (e.g. "media", "multipart", "resumable").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Deprecated. Please use quotaUser instead.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=userIp",
  })
  userIp?: string;

  /**
   * The project to be billed for this request, for Requester Pays buckets.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=userProject",
  })
  userProject?: string;
}

export class StorageObjectsPatchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  object?: shared.ObjectT;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
