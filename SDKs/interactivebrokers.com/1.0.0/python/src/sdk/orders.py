"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Orders:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_accounts_account_orders_customer_order_id_(self, request: operations.DeleteAccountsAccountOrdersCustomerOrderIDRequest) -> operations.DeleteAccountsAccountOrdersCustomerOrderIDResponse:
        r"""Cancel Order
        Cancels the order with the referenced Customer Order ID for the account passed in the URL.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAccountsAccountOrdersCustomerOrderIDRequest, base_url, '/accounts/{account}/orders/{CustomerOrderId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAccountsAccountOrdersCustomerOrderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.DeleteAccountsAccountOrdersCustomerOrderID200ApplicationJSON]])
                res.delete_accounts_account_orders_customer_order_id_200_application_json_objects = out
        elif http_res.status_code in [202, 204, 400, 401, 403, 408]:
            pass

        return res

    def get_accounts_account_orders(self, request: operations.GetAccountsAccountOrdersRequest) -> operations.GetAccountsAccountOrdersResponse:
        r"""Open Orders
        Returns a list of orders for the account passed in the URL
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountsAccountOrdersRequest, base_url, '/accounts/{account}/orders', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountsAccountOrdersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OrderState]])
                res.order_states = out
        elif http_res.status_code in [202, 204, 400, 401, 403, 408]:
            pass

        return res

    def get_accounts_account_orders_customer_order_id_(self, request: operations.GetAccountsAccountOrdersCustomerOrderIDRequest) -> operations.GetAccountsAccountOrdersCustomerOrderIDResponse:
        r"""Return specific order info
        Returns the order with the referenced Customer Order ID for the account passed in the URL.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountsAccountOrdersCustomerOrderIDRequest, base_url, '/accounts/{account}/orders/{CustomerOrderId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountsAccountOrdersCustomerOrderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OrderState]])
                res.order_states = out
        elif http_res.status_code in [202, 204, 400, 401, 403, 408]:
            pass

        return res

    def post_accounts_account_orders(self, request: operations.PostAccountsAccountOrdersRequest) -> operations.PostAccountsAccountOrdersResponse:
        r"""Place Order
        Places order
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAccountsAccountOrdersRequest, base_url, '/accounts/{account}/orders', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAccountsAccountOrdersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OrderState]])
                res.order_states = out
        elif http_res.status_code in [202, 204, 400, 401, 403, 408]:
            pass

        return res

    def put_accounts_account_orders_customer_order_id_(self, request: operations.PutAccountsAccountOrdersCustomerOrderIDRequest) -> operations.PutAccountsAccountOrdersCustomerOrderIDResponse:
        r"""Modify Order
        Allows the caller to modify the order with the referenced Customer Order ID specified in the URL. A separate Customer Order ID must be provided in the request body for the modification.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutAccountsAccountOrdersCustomerOrderIDRequest, base_url, '/accounts/{account}/orders/{CustomerOrderId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutAccountsAccountOrdersCustomerOrderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.PutAccountsAccountOrdersCustomerOrderID200ApplicationJSON]])
                res.put_accounts_account_orders_customer_order_id_200_application_json_objects = out
        elif http_res.status_code in [202, 204, 400, 401, 403, 408]:
            pass

        return res

    