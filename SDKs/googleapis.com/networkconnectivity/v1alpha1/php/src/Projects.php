<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new Network Connectivity Center hub in the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsCreateResponse
     */
	public function networkconnectivityProjectsLocationsGlobalHubsCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/hubs', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hubInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the Network Connectivity Center hubs associated with a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsListResponse
     */
	public function networkconnectivityProjectsLocationsGlobalHubsList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/hubs', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsGlobalHubsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHubsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListHubsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new internal range in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesCreateResponse
     */
	public function networkconnectivityProjectsLocationsInternalRangesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/internalRanges', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "internalRangeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists internal ranges in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesListResponse
     */
	public function networkconnectivityProjectsLocationsInternalRangesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/internalRanges', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsInternalRangesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInternalRangesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInternalRangesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsListResponse
     */
	public function networkconnectivityProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsCancelResponse
     */
	public function networkconnectivityProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsListResponse
     */
	public function networkconnectivityProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Network Connectivity Center spoke.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesCreateResponse
     */
	public function networkconnectivityProjectsLocationsSpokesCreate(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/spokes', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "spokeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Network Connectivity Center spoke.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesDeleteResponse
     */
	public function networkconnectivityProjectsLocationsSpokesDelete(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details about a Network Connectivity Center spoke.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetResponse
     */
	public function networkconnectivityProjectsLocationsSpokesGet(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->spoke = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Spoke', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetIamPolicyResponse
     */
	public function networkconnectivityProjectsLocationsSpokesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the Network Connectivity Center spokes in a specified project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesListResponse
     */
	public function networkconnectivityProjectsLocationsSpokesList(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/spokes', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSpokesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSpokesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a Network Connectivity Center spoke.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesPatchResponse
     */
	public function networkconnectivityProjectsLocationsSpokesPatch(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "spokeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesSetIamPolicyResponse
     */
	public function networkconnectivityProjectsLocationsSpokesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsResponse
     */
	public function networkconnectivityProjectsLocationsSpokesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NetworkconnectivityProjectsLocationsSpokesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}