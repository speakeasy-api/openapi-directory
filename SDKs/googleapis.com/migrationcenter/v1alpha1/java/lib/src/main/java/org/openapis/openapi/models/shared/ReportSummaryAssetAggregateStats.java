/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ReportSummaryAssetAggregateStats - Aggregate statistics for a collection of assets.
 */
public class ReportSummaryAssetAggregateStats {
    /**
     * Describes a collection of data points rendered as a Chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assetAge")
    public ReportSummaryChartData assetAge;

    public ReportSummaryAssetAggregateStats withAssetAge(ReportSummaryChartData assetAge) {
        this.assetAge = assetAge;
        return this;
    }
    
    /**
     * A Histogram Chart shows a distribution of values into buckets, showing a count of values which fall into a bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coreCountHistogram")
    public ReportSummaryHistogramChartData coreCountHistogram;

    public ReportSummaryAssetAggregateStats withCoreCountHistogram(ReportSummaryHistogramChartData coreCountHistogram) {
        this.coreCountHistogram = coreCountHistogram;
        return this;
    }
    
    /**
     * A Histogram Chart shows a distribution of values into buckets, showing a count of values which fall into a bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryBytesHistogram")
    public ReportSummaryHistogramChartData memoryBytesHistogram;

    public ReportSummaryAssetAggregateStats withMemoryBytesHistogram(ReportSummaryHistogramChartData memoryBytesHistogram) {
        this.memoryBytesHistogram = memoryBytesHistogram;
        return this;
    }
    
    /**
     * Describes a collection of data points rendered as a Chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryUtilization")
    public ReportSummaryChartData memoryUtilization;

    public ReportSummaryAssetAggregateStats withMemoryUtilization(ReportSummaryChartData memoryUtilization) {
        this.memoryUtilization = memoryUtilization;
        return this;
    }
    
    /**
     * Utilization Chart is a specific type of visualization which displays a metric classified into "Used" and "Free" buckets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryUtilizationChart")
    public ReportSummaryUtilizationChartData memoryUtilizationChart;

    public ReportSummaryAssetAggregateStats withMemoryUtilizationChart(ReportSummaryUtilizationChartData memoryUtilizationChart) {
        this.memoryUtilizationChart = memoryUtilizationChart;
        return this;
    }
    
    /**
     * Describes a collection of data points rendered as a Chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operatingSystem")
    public ReportSummaryChartData operatingSystem;

    public ReportSummaryAssetAggregateStats withOperatingSystem(ReportSummaryChartData operatingSystem) {
        this.operatingSystem = operatingSystem;
        return this;
    }
    
    /**
     * A Histogram Chart shows a distribution of values into buckets, showing a count of values which fall into a bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageBytesHistogram")
    public ReportSummaryHistogramChartData storageBytesHistogram;

    public ReportSummaryAssetAggregateStats withStorageBytesHistogram(ReportSummaryHistogramChartData storageBytesHistogram) {
        this.storageBytesHistogram = storageBytesHistogram;
        return this;
    }
    
    /**
     * Describes a collection of data points rendered as a Chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageUtilization")
    public ReportSummaryChartData storageUtilization;

    public ReportSummaryAssetAggregateStats withStorageUtilization(ReportSummaryChartData storageUtilization) {
        this.storageUtilization = storageUtilization;
        return this;
    }
    
    /**
     * Utilization Chart is a specific type of visualization which displays a metric classified into "Used" and "Free" buckets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageUtilizationChart")
    public ReportSummaryUtilizationChartData storageUtilizationChart;

    public ReportSummaryAssetAggregateStats withStorageUtilizationChart(ReportSummaryUtilizationChartData storageUtilizationChart) {
        this.storageUtilizationChart = storageUtilizationChart;
        return this;
    }
    
    /**
     * Count of the number of unique assets in this collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAssets")
    public String totalAssets;

    public ReportSummaryAssetAggregateStats withTotalAssets(String totalAssets) {
        this.totalAssets = totalAssets;
        return this;
    }
    
    /**
     * Sum of the CPU core count of all the assets in this collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalCores")
    public String totalCores;

    public ReportSummaryAssetAggregateStats withTotalCores(String totalCores) {
        this.totalCores = totalCores;
        return this;
    }
    
    /**
     * Sum of the memory in bytes of all the assets in this collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalMemoryBytes")
    public String totalMemoryBytes;

    public ReportSummaryAssetAggregateStats withTotalMemoryBytes(String totalMemoryBytes) {
        this.totalMemoryBytes = totalMemoryBytes;
        return this;
    }
    
    /**
     * Sum of persistent storage in bytes of all the assets in this collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalStorageBytes")
    public String totalStorageBytes;

    public ReportSummaryAssetAggregateStats withTotalStorageBytes(String totalStorageBytes) {
        this.totalStorageBytes = totalStorageBytes;
        return this;
    }
    
    public ReportSummaryAssetAggregateStats(){}
}
