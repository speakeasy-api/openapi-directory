// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateGlobalReplicationGroupActionEnum
type GETCreateGlobalReplicationGroupActionEnum string

const (
	GETCreateGlobalReplicationGroupActionEnumCreateGlobalReplicationGroup GETCreateGlobalReplicationGroupActionEnum = "CreateGlobalReplicationGroup"
)

func (e GETCreateGlobalReplicationGroupActionEnum) ToPointer() *GETCreateGlobalReplicationGroupActionEnum {
	return &e
}

func (e *GETCreateGlobalReplicationGroupActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateGlobalReplicationGroup":
		*e = GETCreateGlobalReplicationGroupActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateGlobalReplicationGroupActionEnum: %v", v)
	}
}

// GETCreateGlobalReplicationGroupVersionEnum
type GETCreateGlobalReplicationGroupVersionEnum string

const (
	GETCreateGlobalReplicationGroupVersionEnumTwoThousandAndFifteen0202 GETCreateGlobalReplicationGroupVersionEnum = "2015-02-02"
)

func (e GETCreateGlobalReplicationGroupVersionEnum) ToPointer() *GETCreateGlobalReplicationGroupVersionEnum {
	return &e
}

func (e *GETCreateGlobalReplicationGroupVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2015-02-02":
		*e = GETCreateGlobalReplicationGroupVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateGlobalReplicationGroupVersionEnum: %v", v)
	}
}

type GETCreateGlobalReplicationGroupRequest struct {
	Action GETCreateGlobalReplicationGroupActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Provides details of the Global datastore
	GlobalReplicationGroupDescription *string `queryParam:"style=form,explode=true,name=GlobalReplicationGroupDescription"`
	// <p>The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with "dsdfu" along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. </p> <p>For a full list of Amazon Regions and their respective Global datastore iD prefixes, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html">Using the Amazon CLI with Global datastores </a>.</p>
	GlobalReplicationGroupIDSuffix string `queryParam:"style=form,explode=true,name=GlobalReplicationGroupIdSuffix"`
	// The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.
	PrimaryReplicationGroupID string                                     `queryParam:"style=form,explode=true,name=PrimaryReplicationGroupId"`
	Version                   GETCreateGlobalReplicationGroupVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm             *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateGlobalReplicationGroupResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
