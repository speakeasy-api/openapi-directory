/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Picture } from "./picture";
import { Expose, Type } from "class-transformer";

/**
 * The user's account type:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `basic` - The user has a Vimeo Basic subscription.
 *  * `business` - The user has a Vimeo Business subscription.
 *  * `live_business` - The user has a Vimeo Business Live subscription.
 *  * `live_premium` - The user has a Vimeo Premium subscription.
 *  * `live_pro` - The user has a Vimeo PRO Live subscription.
 *  * `plus` - The user has a Vimeo Plus subscription.
 *  * `pro` - The user has a Vimeo Pro subscription.
 *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
 *  * `producer` - The user has a Vimeo Producer subscription.
 *
 */
export enum UserAccountEnum {
  Basic = "basic",
  Business = "business",
  LiveBusiness = "live_business",
  LivePremium = "live_premium",
  LivePro = "live_pro",
  Plus = "plus",
  Pro = "pro",
  ProUnlimited = "pro_unlimited",
  Producer = "producer",
}

/**
 * The user's content filters:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `drugs` - Drugs or alcohol use.
 *  * `language` - Profanity or sexually suggestive content.
 *  * `nudity` - Nudity.
 *  * `safe` - Suitable for all audiences.
 *  * `unrated` - No rating.
 *  * `violence` - Violent or graphic content.
 *
 */
export enum UserContentFilterEnum {
  Drugs = "drugs",
  Language = "language",
  Nudity = "nudity",
  Safe = "safe",
  Unrated = "unrated",
  Violence = "violence",
}

/**
 * Information about the albums created by this user.
 */
export class UserMetadataConnectionsAlbums extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of albums on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the appearances of this user in other videos.
 */
export class UserMetadataConnectionsAppearances extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of appearances on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
 */
export class UserMetadataConnectionsBlock extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's followed categories.
 */
export class UserMetadataConnectionsCategories extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of categories on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's subscribed channels.
 */
export class UserMetadataConnectionsChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's feed.
 */
export class UserMetadataConnectionsFeed extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's folders.
 */
export class UserMetadataConnectionsFolders extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of folders on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the user's followers.
 */
export class UserMetadataConnectionsFollowers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of followers on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the users that the current user is following.
 */
export class UserMetadataConnectionsFollowing extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the groups created by this user.
 */
export class UserMetadataConnectionsGroups extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of groups on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has liked.
 */
export class UserMetadataConnectionsLikes extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of likes on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the channels that this user moderates.
 */
export class UserMetadataConnectionsModeratedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portraits.
 */
export class UserMetadataConnectionsPictures extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of pictures on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about this user's portfolios.
 */
export class UserMetadataConnectionsPortfolios extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of portfolios on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class UserMetadataConnectionsRecommendedChannels extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of channels on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
 */
export class UserMetadataConnectionsRecommendedUsers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that have been shared with this user.
 */
export class UserMetadataConnectionsShared extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos uploaded by this user.
 */
export class UserMetadataConnectionsVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user has watched.
 */
export class UserMetadataConnectionsWatchedVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that this user wants to watch later.
 */
export class UserMetadataConnectionsWatchlater extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * The list of resource URIs related to the user.
 */
export class UserMetadataConnections extends SpeakeasyBase {
  /**
   * Information about the albums created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "albums" })
  @Type(() => UserMetadataConnectionsAlbums)
  albums: UserMetadataConnectionsAlbums;

  /**
   * Information about the appearances of this user in other videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appearances" })
  @Type(() => UserMetadataConnectionsAppearances)
  appearances: UserMetadataConnectionsAppearances;

  /**
   * Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => UserMetadataConnectionsBlock)
  block: UserMetadataConnectionsBlock;

  /**
   * Information about this user's followed categories.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "categories" })
  @Type(() => UserMetadataConnectionsCategories)
  categories: UserMetadataConnectionsCategories;

  /**
   * Information about this user's subscribed channels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channels" })
  @Type(() => UserMetadataConnectionsChannels)
  channels: UserMetadataConnectionsChannels;

  /**
   * Information about this user's feed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feed" })
  @Type(() => UserMetadataConnectionsFeed)
  feed: UserMetadataConnectionsFeed;

  /**
   * Information about this user's folders.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "folders" })
  @Type(() => UserMetadataConnectionsFolders)
  folders: UserMetadataConnectionsFolders;

  /**
   * Information about the user's followers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "followers" })
  @Type(() => UserMetadataConnectionsFollowers)
  followers: UserMetadataConnectionsFollowers;

  /**
   * Information about the users that the current user is following.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "following" })
  @Type(() => UserMetadataConnectionsFollowing)
  following: UserMetadataConnectionsFollowing;

  /**
   * Information about the groups created by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groups" })
  @Type(() => UserMetadataConnectionsGroups)
  groups: UserMetadataConnectionsGroups;

  /**
   * Information about the videos that this user has liked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "likes" })
  @Type(() => UserMetadataConnectionsLikes)
  likes: UserMetadataConnectionsLikes;

  /**
   * Information about the channels that this user moderates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "moderated_channels" })
  @Type(() => UserMetadataConnectionsModeratedChannels)
  moderatedChannels: UserMetadataConnectionsModeratedChannels;

  /**
   * Information about this user's portraits.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => UserMetadataConnectionsPictures)
  pictures: UserMetadataConnectionsPictures;

  /**
   * Information about this user's portfolios.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portfolios" })
  @Type(() => UserMetadataConnectionsPortfolios)
  portfolios: UserMetadataConnectionsPortfolios;

  /**
   * A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_channels" })
  @Type(() => UserMetadataConnectionsRecommendedChannels)
  recommendedChannels: UserMetadataConnectionsRecommendedChannels;

  /**
   * A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recommended_users" })
  @Type(() => UserMetadataConnectionsRecommendedUsers)
  recommendedUsers: UserMetadataConnectionsRecommendedUsers;

  /**
   * Information about the videos that have been shared with this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shared" })
  @Type(() => UserMetadataConnectionsShared)
  shared: UserMetadataConnectionsShared;

  /**
   * Information about the videos uploaded by this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => UserMetadataConnectionsVideos)
  videos: UserMetadataConnectionsVideos;

  /**
   * Information about the videos that this user has watched.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watched_videos" })
  @Type(() => UserMetadataConnectionsWatchedVideos)
  watchedVideos: UserMetadataConnectionsWatchedVideos;

  /**
   * Information about the videos that this user wants to watch later.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watchlater" })
  @Type(() => UserMetadataConnectionsWatchlater)
  watchlater: UserMetadataConnectionsWatchlater;
}

export class UserMetadataInteractionsAddPrivacyUser extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options?: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Information related to the block status of this user.
 */
export class UserMetadataInteractionsBlock extends SpeakeasyBase {
  /**
   * Whether a user is blocking the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format when the block occurred, or the null value if no block exists.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to block or unblock the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information related to the followed status of this user.
 */
export class UserMetadataInteractionsFollow extends SpeakeasyBase {
  /**
   * Whether a user is following the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The URI to follow the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information regarding where and how to report a user.
 */
export class UserMetadataInteractionsReport extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * List of valid reasons for reporting a video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: string[];

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

export class UserMetadataInteractions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "add_privacy_user" })
  @Type(() => UserMetadataInteractionsAddPrivacyUser)
  addPrivacyUser?: UserMetadataInteractionsAddPrivacyUser;

  /**
   * Information related to the block status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block" })
  @Type(() => UserMetadataInteractionsBlock)
  block: UserMetadataInteractionsBlock;

  /**
   * Information related to the followed status of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "follow" })
  @Type(() => UserMetadataInteractionsFollow)
  follow: UserMetadataInteractionsFollow;

  /**
   * Information regarding where and how to report a user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "report" })
  @Type(() => UserMetadataInteractionsReport)
  report: UserMetadataInteractionsReport;
}

/**
 * The user's metadata.
 */
export class UserMetadata extends SpeakeasyBase {
  /**
   * The list of resource URIs related to the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => UserMetadataConnections)
  connections: UserMetadataConnections;

  @SpeakeasyMetadata()
  @Expose({ name: "interactions" })
  @Type(() => UserMetadataInteractions)
  interactions: UserMetadataInteractions;
}

/**
 * The user's privacy preference for comments:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can comment on the user's videos.
 *  * `contacts` - Only contacts can comment on the user's videos.
 *  * `nobody` - No one can comment on the user's videos.
 *
 */
export enum UserPreferencesVideosPrivacyCommentsEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Nobody = "nobody",
}

/**
 * The user's privacy preference for embeds:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `private` - Only the user can embed their own videos.
 *  * `public` - Anyone can embed the user's videos.
 *  * `whitelist` - Only those on the whitelist can embed the user's videos.
 *
 */
export enum UserPreferencesVideosPrivacyEmbedEnum {
  Private = "private",
  Public = "public",
  Whitelist = "whitelist",
}

/**
 * The user's privacy preference for views:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can view the user's videos.
 *  * `contacts` - Only contacts can view the user's videos.
 *  * `disable` - Views are disabled for the user's videos.
 *  * `nobody` - No one except the user can view the user's videos.
 *  * `password` - Only those with the password can view the user's videos.
 *  * `unlisted` - Anybody can view the user's videos if they have a link.
 *  * `users` - Only other Vimeo members can view the user's videos.
 *
 */
export enum UserPreferencesVideosPrivacyViewEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Disable = "disable",
  Nobody = "nobody",
  Password = "password",
  Unlisted = "unlisted",
  Users = "users",
}

export class UserPreferencesVideosPrivacy extends SpeakeasyBase {
  /**
   * Whether other users can add the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add" })
  add?: boolean;

  /**
   * The user's privacy preference for comments:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can comment on the user's videos.
   *  * `contacts` - Only contacts can comment on the user's videos.
   *  * `nobody` - No one can comment on the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: UserPreferencesVideosPrivacyCommentsEnum;

  /**
   * Whether other users can download the user's videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download?: boolean;

  /**
   * The user's privacy preference for embeds:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `private` - Only the user can embed their own videos.
   *  * `public` - Anyone can embed the user's videos.
   *  * `whitelist` - Only those on the whitelist can embed the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: UserPreferencesVideosPrivacyEmbedEnum;

  /**
   * The user's privacy preference for views:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can view the user's videos.
   *  * `contacts` - Only contacts can view the user's videos.
   *  * `disable` - Views are disabled for the user's videos.
   *  * `nobody` - No one except the user can view the user's videos.
   *  * `password` - Only those with the password can view the user's videos.
   *  * `unlisted` - Anybody can view the user's videos if they have a link.
   *  * `users` - Only other Vimeo members can view the user's videos.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view?: UserPreferencesVideosPrivacyViewEnum;
}

export class UserPreferencesVideos extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => UserPreferencesVideosPrivacy)
  privacy?: UserPreferencesVideosPrivacy;
}

export class UserPreferences extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => UserPreferencesVideos)
  videos?: UserPreferencesVideos;
}

/**
 * Information about the user's lifetime upload usage.
 */
export class UserUploadQuotaLifetime extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your lifetime maximum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload across the lifetime of your account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The number of bytes that you've already uploaded against your lifetime limit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Information about the user's usage for the current period.
 */
export class UserUploadQuotaPeriodic extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The total number of bytes that you can upload per period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * The time in ISO 8601 format when your upload quota resets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reset_date" })
  resetDate: string;

  /**
   * The number of bytes that you've already uploaded against your quota in the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
 */
export enum UserUploadQuotaSpaceShowingEnum {
  Lifetime = "lifetime",
  Periodic = "periodic",
}

/**
 * Information about the user's upload space remaining for the current period.
 */
export class UserUploadQuotaSpace extends SpeakeasyBase {
  /**
   * The number of bytes remaining in your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "free" })
  free: number;

  /**
   * The maximum number of bytes allotted to your upload quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max" })
  max: number;

  /**
   * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showing" })
  showing: UserUploadQuotaSpaceShowingEnum;

  /**
   * The number of bytes that you've already uploaded against your quota.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "used" })
  used: number;
}

/**
 * Appears only when the user has upload access and is looking at their own user record.
 */
export class UserUploadQuota extends SpeakeasyBase {
  /**
   * Information about the user's lifetime upload usage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifetime" })
  @Type(() => UserUploadQuotaLifetime)
  lifetime: UserUploadQuotaLifetime;

  /**
   * Information about the user's usage for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "periodic" })
  @Type(() => UserUploadQuotaPeriodic)
  periodic: UserUploadQuotaPeriodic;

  /**
   * Information about the user's upload space remaining for the current period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "space" })
  @Type(() => UserUploadQuotaSpace)
  space: UserUploadQuotaSpace;
}

export class UserWebsites extends SpeakeasyBase {
  /**
   * The website's description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The URL of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The name of the website.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * The moderators were removed.
 */
export class User extends SpeakeasyBase {
  /**
   * The user's account type:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `basic` - The user has a Vimeo Basic subscription.
   *  * `business` - The user has a Vimeo Business subscription.
   *  * `live_business` - The user has a Vimeo Business Live subscription.
   *  * `live_premium` - The user has a Vimeo Premium subscription.
   *  * `live_pro` - The user has a Vimeo PRO Live subscription.
   *  * `plus` - The user has a Vimeo Plus subscription.
   *  * `pro` - The user has a Vimeo Pro subscription.
   *  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
   *  * `producer` - The user has a Vimeo Producer subscription.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  account: UserAccountEnum;

  /**
   * The user's bio.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bio" })
  bio: string;

  /**
   * The user's content filters:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `drugs` - Drugs or alcohol use.
   *  * `language` - Profanity or sexually suggestive content.
   *  * `nudity` - Nudity.
   *  * `safe` - Suitable for all audiences.
   *  * `unrated` - No rating.
   *  * `violence` - Violent or graphic content.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_filter" })
  contentFilter?: UserContentFilterEnum;

  /**
   * The time in ISO 8601 format when the user account was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * The user's email address. This data requires a bearer token with the `email` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The absolute URL of this user's profile page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The user's location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location: string;

  /**
   * The user's metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => UserMetadata)
  metadata: UserMetadata;

  /**
   * The user's display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The active portrait of this user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => Picture)
  pictures: Picture;

  @SpeakeasyMetadata()
  @Expose({ name: "preferences" })
  @Type(() => UserPreferences)
  preferences?: UserPreferences;

  /**
   * The user's resource key string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * Appears only when the user has upload access and is looking at their own user record.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload_quota" })
  @Type(() => UserUploadQuota)
  uploadQuota: UserUploadQuota;

  /**
   * The user's canonical relative URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The user's websites.
   */
  @SpeakeasyMetadata({ elemType: UserWebsites })
  @Expose({ name: "websites" })
  @Type(() => UserWebsites)
  websites: UserWebsites[];
}
