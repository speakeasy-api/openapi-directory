"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudVisionV1p2beta1FeatureTypeEnum(str, Enum):
    r"""The feature type."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    FACE_DETECTION = 'FACE_DETECTION'
    LANDMARK_DETECTION = 'LANDMARK_DETECTION'
    LOGO_DETECTION = 'LOGO_DETECTION'
    LABEL_DETECTION = 'LABEL_DETECTION'
    TEXT_DETECTION = 'TEXT_DETECTION'
    DOCUMENT_TEXT_DETECTION = 'DOCUMENT_TEXT_DETECTION'
    SAFE_SEARCH_DETECTION = 'SAFE_SEARCH_DETECTION'
    IMAGE_PROPERTIES = 'IMAGE_PROPERTIES'
    CROP_HINTS = 'CROP_HINTS'
    WEB_DETECTION = 'WEB_DETECTION'
    PRODUCT_SEARCH = 'PRODUCT_SEARCH'
    OBJECT_LOCALIZATION = 'OBJECT_LOCALIZATION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudVisionV1p2beta1Feature:
    r"""The type of Google Cloud Vision API detection to perform, and the maximum number of results to return for that type. Multiple `Feature` objects can be specified in the `features` list."""
    
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxResults'), 'exclude': lambda f: f is None }})
    r"""Maximum number of results of this type. Does not apply to `TEXT_DETECTION`, `DOCUMENT_TEXT_DETECTION`, or `CROP_HINTS`."""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Model to use for the feature. Supported values: \\"builtin/stable\\" (the default if unset) and \\"builtin/latest\\". `DOCUMENT_TEXT_DETECTION` and `TEXT_DETECTION` also support \\"builtin/weekly\\" for the bleeding edge release updated weekly."""  
    type: Optional[GoogleCloudVisionV1p2beta1FeatureTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The feature type."""  
    