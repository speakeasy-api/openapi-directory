// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConnectorInput - Definition of a Serverless VPC Access connector.
type ConnectorInput struct {
	// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
	IPCidrRange *string `json:"ipCidrRange,omitempty"`
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType *string `json:"machineType,omitempty"`
	// Maximum value of instances in autoscaling group underlying the connector.
	MaxInstances *int `json:"maxInstances,omitempty"`
	// Maximum throughput of the connector in Mbps. Default is 300, max is 1000.
	MaxThroughput *int `json:"maxThroughput,omitempty"`
	// Minimum value of instances in autoscaling group underlying the connector.
	MinInstances *int `json:"minInstances,omitempty"`
	// Minimum throughput of the connector in Mbps. Default and min is 200.
	MinThroughput *int `json:"minThroughput,omitempty"`
	// The resource name in the format `projects/*/locations/*/connectors/*`.
	Name *string `json:"name,omitempty"`
	// Name of a VPC network.
	Network *string `json:"network,omitempty"`
	// The subnet in which to house the connector
	Subnet *Subnet `json:"subnet,omitempty"`
}

// ConnectorStateEnum - Output only. State of the VPC access connector.
type ConnectorStateEnum string

const (
	ConnectorStateEnumStateUnspecified ConnectorStateEnum = "STATE_UNSPECIFIED"
	ConnectorStateEnumReady            ConnectorStateEnum = "READY"
	ConnectorStateEnumCreating         ConnectorStateEnum = "CREATING"
	ConnectorStateEnumDeleting         ConnectorStateEnum = "DELETING"
	ConnectorStateEnumError            ConnectorStateEnum = "ERROR"
	ConnectorStateEnumUpdating         ConnectorStateEnum = "UPDATING"
)

func (e ConnectorStateEnum) ToPointer() *ConnectorStateEnum {
	return &e
}

func (e *ConnectorStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "READY":
		fallthrough
	case "CREATING":
		fallthrough
	case "DELETING":
		fallthrough
	case "ERROR":
		fallthrough
	case "UPDATING":
		*e = ConnectorStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectorStateEnum: %v", v)
	}
}

// Connector - Definition of a Serverless VPC Access connector.
type Connector struct {
	// Output only. List of projects using the connector.
	ConnectedProjects []string `json:"connectedProjects,omitempty"`
	// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
	IPCidrRange *string `json:"ipCidrRange,omitempty"`
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType *string `json:"machineType,omitempty"`
	// Maximum value of instances in autoscaling group underlying the connector.
	MaxInstances *int `json:"maxInstances,omitempty"`
	// Maximum throughput of the connector in Mbps. Default is 300, max is 1000.
	MaxThroughput *int `json:"maxThroughput,omitempty"`
	// Minimum value of instances in autoscaling group underlying the connector.
	MinInstances *int `json:"minInstances,omitempty"`
	// Minimum throughput of the connector in Mbps. Default and min is 200.
	MinThroughput *int `json:"minThroughput,omitempty"`
	// The resource name in the format `projects/*/locations/*/connectors/*`.
	Name *string `json:"name,omitempty"`
	// Name of a VPC network.
	Network *string `json:"network,omitempty"`
	// Output only. State of the VPC access connector.
	State *ConnectorStateEnum `json:"state,omitempty"`
	// The subnet in which to house the connector
	Subnet *Subnet `json:"subnet,omitempty"`
}
