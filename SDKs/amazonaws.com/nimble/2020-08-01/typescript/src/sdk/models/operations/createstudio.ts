/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Configuration of the encryption method that is used for the studio.
 */
export class CreateStudioRequestBodyStudioEncryptionConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "keyArn" })
  keyArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "keyType" })
  keyType?: shared.StudioEncryptionConfigurationKeyTypeEnum;
}

export class CreateStudioRequestBody extends SpeakeasyBase {
  /**
   * The IAM role that studio admins will assume when logging in to the Nimble Studio portal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adminRoleArn" })
  adminRoleArn: string;

  /**
   * A friendly name for the studio.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName: string;

  /**
   * Configuration of the encryption method that is used for the studio.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "studioEncryptionConfiguration" })
  @Type(() => CreateStudioRequestBodyStudioEncryptionConfiguration)
  studioEncryptionConfiguration?: CreateStudioRequestBodyStudioEncryptionConfiguration;

  /**
   * The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "studioName" })
  studioName: string;

  /**
   * A collection of labels, in the form of key-value pairs, that apply to this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  /**
   * The IAM role that studio users will assume when logging in to the Nimble Studio portal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userRoleArn" })
  userRoleArn: string;
}

export class CreateStudioRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateStudioRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Client-Token",
  })
  xAmzClientToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateStudioResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createStudioResponse?: shared.CreateStudioResponse;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
