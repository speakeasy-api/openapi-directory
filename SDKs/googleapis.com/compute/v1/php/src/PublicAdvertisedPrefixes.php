<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PublicAdvertisedPrefixes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified PublicAdvertisedPrefix
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesDeleteResponse
     */
	public function computePublicAdvertisedPrefixesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}', \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified PublicAdvertisedPrefix resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesGetResponse
     */
	public function computePublicAdvertisedPrefixesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}', \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicAdvertisedPrefix = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublicAdvertisedPrefix', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a PublicAdvertisedPrefix in the specified project using the parameters that are included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesInsertResponse
     */
	public function computePublicAdvertisedPrefixesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/publicAdvertisedPrefixes', \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "publicAdvertisedPrefix", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the PublicAdvertisedPrefixes for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesListResponse
     */
	public function computePublicAdvertisedPrefixesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/publicAdvertisedPrefixes', \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicAdvertisedPrefixList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublicAdvertisedPrefixList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesPatchResponse
     */
	public function computePublicAdvertisedPrefixesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}', \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "publicAdvertisedPrefix1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputePublicAdvertisedPrefixesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}