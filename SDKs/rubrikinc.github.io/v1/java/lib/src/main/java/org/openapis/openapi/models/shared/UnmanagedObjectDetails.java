/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UnmanagedObjectDetails {
    /**
     * The amount of storage on the archival location used by unmanaged snapshots.
     */
    @JsonProperty("archiveStorage")
    public Long archiveStorage;

    public UnmanagedObjectDetails withArchiveStorage(Long archiveStorage) {
        this.archiveStorage = archiveStorage;
        return this;
    }
    
    /**
     * A boolean that specifies whether any of the snapshots for this object are being retained by a SLA Domain at any location.
     * 
     */
    @JsonProperty("hasSnapshotsWithPolicy")
    public Boolean hasSnapshotsWithPolicy;

    public UnmanagedObjectDetails withHasSnapshotsWithPolicy(Boolean hasSnapshotsWithPolicy) {
        this.hasSnapshotsWithPolicy = hasSnapshotsWithPolicy;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public UnmanagedObjectDetails withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Boolean that specifies whether the object is remote or local. A value of true indicates that the object is remote.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRemote")
    public Boolean isRemote;

    public UnmanagedObjectDetails withIsRemote(Boolean isRemote) {
        this.isRemote = isRemote;
        return this;
    }
    
    /**
     * The amount of storage on the local cluster used by unmanaged snapshots.
     */
    @JsonProperty("localStorage")
    public Long localStorage;

    public UnmanagedObjectDetails withLocalStorage(Long localStorage) {
        this.localStorage = localStorage;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public UnmanagedObjectDetails withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The type of the unmanaged object. Valid object types are VirtualMachine, MssqlDatabase, LinuxFileset, ShareFileset, WindowsFileset, NutanixVirtualMachine, Ec2Instance and StorageArrayVolumeGroup.
     */
    @JsonProperty("objectType")
    public UnmanagedObjectDetailsObjectTypeEnum objectType;

    public UnmanagedObjectDetails withObjectType(UnmanagedObjectDetailsObjectTypeEnum objectType) {
        this.objectType = objectType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingSlaDomain")
    public ManagedObjectPendingSlaInfo pendingSlaDomain;

    public UnmanagedObjectDetails withPendingSlaDomain(ManagedObjectPendingSlaInfo pendingSlaDomain) {
        this.pendingSlaDomain = pendingSlaDomain;
        return this;
    }
    
    /**
     * Summary information of all objects on the physical path to this object.
     */
    @JsonProperty("physicalLocation")
    public LocationPathPoint[] physicalLocation;

    public UnmanagedObjectDetails withPhysicalLocation(LocationPathPoint[] physicalLocation) {
        this.physicalLocation = physicalLocation;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recoveryInfo")
    public SnappableRecoveryInfo recoveryInfo;

    public UnmanagedObjectDetails withRecoveryInfo(SnappableRecoveryInfo recoveryInfo) {
        this.recoveryInfo = recoveryInfo;
        return this;
    }
    
    /**
     * ID assigned to an SLA Domain retention policy.
     */
    @JsonProperty("retentionSlaDomainId")
    public String retentionSlaDomainId;

    public UnmanagedObjectDetails withRetentionSlaDomainId(String retentionSlaDomainId) {
        this.retentionSlaDomainId = retentionSlaDomainId;
        return this;
    }
    
    /**
     * Name of an SLA Domain retention policy.
     */
    @JsonProperty("retentionSlaDomainName")
    public String retentionSlaDomainName;

    public UnmanagedObjectDetails withRetentionSlaDomainName(String retentionSlaDomainName) {
        this.retentionSlaDomainName = retentionSlaDomainName;
        return this;
    }
    
    /**
     * Optional field with the ID assigned to an SLA Domain by Polaris.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retentionSlaDomainPolarisManagedId")
    public String retentionSlaDomainPolarisManagedId;

    public UnmanagedObjectDetails withRetentionSlaDomainPolarisManagedId(String retentionSlaDomainPolarisManagedId) {
        this.retentionSlaDomainPolarisManagedId = retentionSlaDomainPolarisManagedId;
        return this;
    }
    
    /**
     * Total number of snapshots to for the specified object.
     */
    @JsonProperty("snapshotCount")
    public Long snapshotCount;

    public UnmanagedObjectDetails withSnapshotCount(Long snapshotCount) {
        this.snapshotCount = snapshotCount;
        return this;
    }
    
    /**
     * Unmanaged Status of this object. Protected means that this object is still protected by an SLA Policy. Unprotected means that this object has become unprotected. Relic means that Rubrik has lost contact with this object.
     */
    @JsonProperty("unmanagedStatus")
    public UnmanagedObjectDetailsUnmanagedStatusEnum unmanagedStatus;

    public UnmanagedObjectDetails withUnmanagedStatus(UnmanagedObjectDetailsUnmanagedStatusEnum unmanagedStatus) {
        this.unmanagedStatus = unmanagedStatus;
        return this;
    }
    
    public UnmanagedObjectDetails(@JsonProperty("archiveStorage") Long archiveStorage, @JsonProperty("hasSnapshotsWithPolicy") Boolean hasSnapshotsWithPolicy, @JsonProperty("id") String id, @JsonProperty("localStorage") Long localStorage, @JsonProperty("name") String name, @JsonProperty("objectType") UnmanagedObjectDetailsObjectTypeEnum objectType, @JsonProperty("physicalLocation") LocationPathPoint[] physicalLocation, @JsonProperty("retentionSlaDomainId") String retentionSlaDomainId, @JsonProperty("retentionSlaDomainName") String retentionSlaDomainName, @JsonProperty("snapshotCount") Long snapshotCount, @JsonProperty("unmanagedStatus") UnmanagedObjectDetailsUnmanagedStatusEnum unmanagedStatus) {
        this.archiveStorage = archiveStorage;
        this.hasSnapshotsWithPolicy = hasSnapshotsWithPolicy;
        this.id = id;
        this.localStorage = localStorage;
        this.name = name;
        this.objectType = objectType;
        this.physicalLocation = physicalLocation;
        this.retentionSlaDomainId = retentionSlaDomainId;
        this.retentionSlaDomainName = retentionSlaDomainName;
        this.snapshotCount = snapshotCount;
        this.unmanagedStatus = unmanagedStatus;
  }
}
