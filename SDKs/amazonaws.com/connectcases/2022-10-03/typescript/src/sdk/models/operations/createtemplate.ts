/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Object to store configuration of layouts associated to the template.
 */
export class CreateTemplateRequestBodyLayoutConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "defaultLayout" })
  defaultLayout?: string;
}

/**
 * The status of the template.
 */
export enum CreateTemplateRequestBodyStatusEnum {
  Active = "Active",
  Inactive = "Inactive",
}

export class CreateTemplateRequestBody extends SpeakeasyBase {
  /**
   * A brief description of the template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Object to store configuration of layouts associated to the template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "layoutConfiguration" })
  @Type(() => CreateTemplateRequestBodyLayoutConfiguration)
  layoutConfiguration?: CreateTemplateRequestBodyLayoutConfiguration;

  /**
   * A name for the template. It must be unique per domain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * A list of fields that must contain a value for a case to be successfully created with this template.
   */
  @SpeakeasyMetadata({ elemType: shared.RequiredField })
  @Expose({ name: "requiredFields" })
  @Type(() => shared.RequiredField)
  requiredFields?: shared.RequiredField[];

  /**
   * The status of the template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: CreateTemplateRequestBodyStatusEnum;
}

export class CreateTemplateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateTemplateRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique identifier of the Cases domain.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=domainId",
  })
  domainId: string;
}

export class CreateTemplateResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createTemplateResponse?: shared.CreateTemplateResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
