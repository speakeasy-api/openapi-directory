"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import autoscalingpolicy as shared_autoscalingpolicy
from ..shared import configuration as shared_configuration
from ..shared import ebsconfiguration as shared_ebsconfiguration
from ..shared import instanceroletype_enum as shared_instanceroletype_enum
from ..shared import markettype_enum as shared_markettype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstanceGroupConfig:
    r"""Configuration defining a new instance group."""
    
    instance_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceCount') }})  
    instance_role: shared_instanceroletype_enum.InstanceRoleTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceRole') }})  
    instance_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType') }})  
    auto_scaling_policy: Optional[shared_autoscalingpolicy.AutoScalingPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoScalingPolicy'), 'exclude': lambda f: f is None }})  
    bid_price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BidPrice'), 'exclude': lambda f: f is None }})  
    configurations: Optional[list[shared_configuration.Configuration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Configurations'), 'exclude': lambda f: f is None }})  
    custom_ami_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomAmiId'), 'exclude': lambda f: f is None }})  
    ebs_configuration: Optional[shared_ebsconfiguration.EbsConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EbsConfiguration'), 'exclude': lambda f: f is None }})  
    market: Optional[shared_markettype_enum.MarketTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Market'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    