"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import querystageplannode as shared_querystageplannode
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryStage:
    r"""Stage statistics such as input and output rows and bytes, execution time and stage state. This information also includes substages and the query stage plan."""
    
    execution_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionTime'), 'exclude': lambda f: f is None }})  
    input_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputBytes'), 'exclude': lambda f: f is None }})  
    input_rows: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputRows'), 'exclude': lambda f: f is None }})  
    output_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputBytes'), 'exclude': lambda f: f is None }})  
    output_rows: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputRows'), 'exclude': lambda f: f is None }})  
    query_stage_plan: Optional[shared_querystageplannode.QueryStagePlanNode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QueryStagePlan'), 'exclude': lambda f: f is None }})  
    stage_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StageId'), 'exclude': lambda f: f is None }})  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    sub_stages: Optional[list[QueryStage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubStages'), 'exclude': lambda f: f is None }})  
    