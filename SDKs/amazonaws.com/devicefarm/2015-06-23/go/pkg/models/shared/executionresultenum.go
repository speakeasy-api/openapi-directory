// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ExecutionResultEnum string

const (
	ExecutionResultEnumPending ExecutionResultEnum = "PENDING"
	ExecutionResultEnumPassed  ExecutionResultEnum = "PASSED"
	ExecutionResultEnumWarned  ExecutionResultEnum = "WARNED"
	ExecutionResultEnumFailed  ExecutionResultEnum = "FAILED"
	ExecutionResultEnumSkipped ExecutionResultEnum = "SKIPPED"
	ExecutionResultEnumErrored ExecutionResultEnum = "ERRORED"
	ExecutionResultEnumStopped ExecutionResultEnum = "STOPPED"
)

func (e *ExecutionResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PENDING":
		fallthrough
	case "PASSED":
		fallthrough
	case "WARNED":
		fallthrough
	case "FAILED":
		fallthrough
	case "SKIPPED":
		fallthrough
	case "ERRORED":
		fallthrough
	case "STOPPED":
		*e = ExecutionResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecutionResultEnum: %s", s)
	}
}
