"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import structuralelement as shared_structuralelement
from ..shared import suggestedtablecellstyle as shared_suggestedtablecellstyle
from ..shared import tablecellstyle as shared_tablecellstyle
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TableCell:
    r"""The contents and style of a cell in a Table."""
    
    content: Optional[list[shared_structuralelement.StructuralElement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content'), 'exclude': lambda f: f is None }})
    r"""The content of the cell."""  
    end_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endIndex'), 'exclude': lambda f: f is None }})
    r"""The zero-based end index of this cell, exclusive, in UTF-16 code units."""  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startIndex'), 'exclude': lambda f: f is None }})
    r"""The zero-based start index of this cell, in UTF-16 code units."""  
    suggested_deletion_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedDeletionIds'), 'exclude': lambda f: f is None }})
    r"""The suggested deletion IDs. If empty, then there are no suggested deletions of this content."""  
    suggested_insertion_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedInsertionIds'), 'exclude': lambda f: f is None }})
    r"""The suggested insertion IDs. A TableCell may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion."""  
    suggested_table_cell_style_changes: Optional[dict[str, shared_suggestedtablecellstyle.SuggestedTableCellStyle]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedTableCellStyleChanges'), 'exclude': lambda f: f is None }})
    r"""The suggested changes to the table cell style, keyed by suggestion ID."""  
    table_cell_style: Optional[shared_tablecellstyle.TableCellStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableCellStyle'), 'exclude': lambda f: f is None }})
    r"""The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table's style."""  
    