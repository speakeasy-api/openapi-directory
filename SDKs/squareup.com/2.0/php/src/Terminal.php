<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Terminal 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * CancelTerminalCheckout
     * 
     * Cancels a Terminal checkout request if the status of the request permits it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelTerminalCheckoutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelTerminalCheckoutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelTerminalCheckoutResponse
     */
	public function cancelTerminalCheckout(
        \OpenAPI\OpenAPI\Models\Operations\CancelTerminalCheckoutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CancelTerminalCheckoutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelTerminalCheckoutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/terminals/checkouts/{checkout_id}/cancel', \OpenAPI\OpenAPI\Models\Operations\CancelTerminalCheckoutRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelTerminalCheckoutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cancelTerminalCheckoutResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CancelTerminalCheckoutResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CancelTerminalRefund
     * 
     * Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelTerminalRefundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelTerminalRefundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelTerminalRefundResponse
     */
	public function cancelTerminalRefund(
        \OpenAPI\OpenAPI\Models\Operations\CancelTerminalRefundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CancelTerminalRefundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelTerminalRefundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/terminals/refunds/{terminal_refund_id}/cancel', \OpenAPI\OpenAPI\Models\Operations\CancelTerminalRefundRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelTerminalRefundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cancelTerminalRefundResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CancelTerminalRefundResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateTerminalCheckout
     * 
     * Creates a Terminal checkout request and sends it to the specified device to take a payment
     * for the requested amount.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateTerminalCheckoutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTerminalCheckoutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTerminalCheckoutResponse
     */
	public function createTerminalCheckout(
        \OpenAPI\OpenAPI\Models\Shared\CreateTerminalCheckoutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTerminalCheckoutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTerminalCheckoutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/terminals/checkouts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTerminalCheckoutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTerminalCheckoutResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateTerminalCheckoutResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateTerminalRefund
     * 
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateTerminalRefundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTerminalRefundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTerminalRefundResponse
     */
	public function createTerminalRefund(
        \OpenAPI\OpenAPI\Models\Shared\CreateTerminalRefundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTerminalRefundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTerminalRefundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/terminals/refunds');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTerminalRefundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTerminalRefundResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateTerminalRefundResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * GetTerminalCheckout
     * 
     * Retrieves a Terminal checkout request by `checkout_id`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTerminalCheckoutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTerminalCheckoutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTerminalCheckoutResponse
     */
	public function getTerminalCheckout(
        \OpenAPI\OpenAPI\Models\Operations\GetTerminalCheckoutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTerminalCheckoutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTerminalCheckoutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/terminals/checkouts/{checkout_id}', \OpenAPI\OpenAPI\Models\Operations\GetTerminalCheckoutRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTerminalCheckoutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTerminalCheckoutResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTerminalCheckoutResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * GetTerminalRefund
     * 
     * Retrieves an Interac Terminal refund object by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTerminalRefundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTerminalRefundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTerminalRefundResponse
     */
	public function getTerminalRefund(
        \OpenAPI\OpenAPI\Models\Operations\GetTerminalRefundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTerminalRefundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTerminalRefundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/terminals/refunds/{terminal_refund_id}', \OpenAPI\OpenAPI\Models\Operations\GetTerminalRefundRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTerminalRefundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTerminalRefundResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTerminalRefundResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SearchTerminalCheckouts
     * 
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SearchTerminalCheckoutsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchTerminalCheckoutsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchTerminalCheckoutsResponse
     */
	public function searchTerminalCheckouts(
        \OpenAPI\OpenAPI\Models\Shared\SearchTerminalCheckoutsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchTerminalCheckoutsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchTerminalCheckoutsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/terminals/checkouts/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchTerminalCheckoutsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchTerminalCheckoutsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchTerminalCheckoutsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SearchTerminalRefunds
     * 
     * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SearchTerminalRefundsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchTerminalRefundsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchTerminalRefundsResponse
     */
	public function searchTerminalRefunds(
        \OpenAPI\OpenAPI\Models\Shared\SearchTerminalRefundsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchTerminalRefundsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchTerminalRefundsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/terminals/refunds/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchTerminalRefundsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchTerminalRefundsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchTerminalRefundsResponse', 'json');
            }
        }

        return $response;
    }
}