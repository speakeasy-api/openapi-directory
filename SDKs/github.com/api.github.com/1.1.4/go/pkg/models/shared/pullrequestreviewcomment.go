// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PullRequestReviewCommentLinksHTML struct {
	Href string `json:"href"`
}

type PullRequestReviewCommentLinksPullRequest struct {
	Href string `json:"href"`
}

type PullRequestReviewCommentLinksSelf struct {
	Href string `json:"href"`
}

type PullRequestReviewCommentLinks struct {
	HTML        PullRequestReviewCommentLinksHTML        `json:"html"`
	PullRequest PullRequestReviewCommentLinksPullRequest `json:"pull_request"`
	Self        PullRequestReviewCommentLinksSelf        `json:"self"`
}

// PullRequestReviewCommentSideEnum - The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
type PullRequestReviewCommentSideEnum string

const (
	PullRequestReviewCommentSideEnumLeft  PullRequestReviewCommentSideEnum = "LEFT"
	PullRequestReviewCommentSideEnumRight PullRequestReviewCommentSideEnum = "RIGHT"
)

func (e PullRequestReviewCommentSideEnum) ToPointer() *PullRequestReviewCommentSideEnum {
	return &e
}

func (e *PullRequestReviewCommentSideEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LEFT":
		fallthrough
	case "RIGHT":
		*e = PullRequestReviewCommentSideEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PullRequestReviewCommentSideEnum: %v", v)
	}
}

// PullRequestReviewCommentStartSideEnum - The side of the first line of the range for a multi-line comment.
type PullRequestReviewCommentStartSideEnum string

const (
	PullRequestReviewCommentStartSideEnumLeft  PullRequestReviewCommentStartSideEnum = "LEFT"
	PullRequestReviewCommentStartSideEnumRight PullRequestReviewCommentStartSideEnum = "RIGHT"
)

func (e PullRequestReviewCommentStartSideEnum) ToPointer() *PullRequestReviewCommentStartSideEnum {
	return &e
}

func (e *PullRequestReviewCommentStartSideEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LEFT":
		fallthrough
	case "RIGHT":
		*e = PullRequestReviewCommentStartSideEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PullRequestReviewCommentStartSideEnum: %v", v)
	}
}

// PullRequestReviewComment - Pull Request Review Comments are comments on a portion of the Pull Request's diff.
type PullRequestReviewComment struct {
	Links PullRequestReviewCommentLinks `json:"_links"`
	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociationEnum `json:"author_association"`
	// The text of the comment.
	Body     string  `json:"body"`
	BodyHTML *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`
	// The SHA of the commit to which the comment applies.
	CommitID  string    `json:"commit_id"`
	CreatedAt time.Time `json:"created_at"`
	// The diff of the line that the comment refers to.
	DiffHunk string `json:"diff_hunk"`
	// HTML URL for the pull request review comment.
	HTMLURL string `json:"html_url"`
	// The ID of the pull request review comment.
	ID int64 `json:"id"`
	// The comment ID to reply to.
	InReplyToID *int64 `json:"in_reply_to_id,omitempty"`
	// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line *int64 `json:"line,omitempty"`
	// The node ID of the pull request review comment.
	NodeID string `json:"node_id"`
	// The SHA of the original commit to which the comment applies.
	OriginalCommitID string `json:"original_commit_id"`
	// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	OriginalLine *int64 `json:"original_line,omitempty"`
	// The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
	OriginalPosition int64 `json:"original_position"`
	// The first line of the range for a multi-line comment.
	OriginalStartLine *int64 `json:"original_start_line,omitempty"`
	// The relative path of the file to which the comment applies.
	Path string `json:"path"`
	// The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
	Position int64 `json:"position"`
	// The ID of the pull request review to which the comment belongs.
	PullRequestReviewID int64 `json:"pull_request_review_id"`
	// URL for the pull request that the review comment belongs to.
	PullRequestURL string          `json:"pull_request_url"`
	Reactions      *ReactionRollup `json:"reactions,omitempty"`
	// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
	Side *PullRequestReviewCommentSideEnum `json:"side,omitempty"`
	// The first line of the range for a multi-line comment.
	StartLine *int64 `json:"start_line,omitempty"`
	// The side of the first line of the range for a multi-line comment.
	StartSide *PullRequestReviewCommentStartSideEnum `json:"start_side,omitempty"`
	UpdatedAt time.Time                              `json:"updated_at"`
	// URL for the pull request review comment
	URL string `json:"url"`
	// A GitHub user.
	User SimpleUser `json:"user"`
}
