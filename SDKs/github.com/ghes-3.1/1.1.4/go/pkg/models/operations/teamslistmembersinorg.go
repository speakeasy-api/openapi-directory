// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TeamsListMembersInOrgPathParams struct {
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
	// The slug of the team name.
	TeamSlug string `pathParam:"style=simple,explode=false,name=team_slug"`
}

// TeamsListMembersInOrgRoleEnum - Filters members returned by their role in the team.
type TeamsListMembersInOrgRoleEnum string

const (
	TeamsListMembersInOrgRoleEnumMember     TeamsListMembersInOrgRoleEnum = "member"
	TeamsListMembersInOrgRoleEnumMaintainer TeamsListMembersInOrgRoleEnum = "maintainer"
	TeamsListMembersInOrgRoleEnumAll        TeamsListMembersInOrgRoleEnum = "all"
)

func (e *TeamsListMembersInOrgRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "member":
		fallthrough
	case "maintainer":
		fallthrough
	case "all":
		*e = TeamsListMembersInOrgRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsListMembersInOrgRoleEnum: %s", s)
	}
}

type TeamsListMembersInOrgQueryParams struct {
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Filters members returned by their role in the team.
	Role *TeamsListMembersInOrgRoleEnum `queryParam:"style=form,explode=true,name=role"`
}

type TeamsListMembersInOrgRequest struct {
	PathParams  TeamsListMembersInOrgPathParams
	QueryParams TeamsListMembersInOrgQueryParams
}

type TeamsListMembersInOrgResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Response
	SimpleUsers []shared.SimpleUser
}
