/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The type of definition. Can be one of 'application', 'applicationCategory', 'host', 'port', 'ipRange' or 'localNet'.
 */
export enum UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesDefinitionsTypeEnum {
  Application = "application",
  ApplicationCategory = "applicationCategory",
  Host = "host",
  IpRange = "ipRange",
  LocalNet = "localNet",
  Port = "port",
}

export class UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesDefinitions extends SpeakeasyBase {
  /**
   * The type of definition. Can be one of 'application', 'applicationCategory', 'host', 'port', 'ipRange' or 'localNet'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesDefinitionsTypeEnum;

  /**
   *     If "type" is 'host', 'port', 'ipRange' or 'localNet', then "value" must be a string, matching either
   *
   * @remarks
   *     a hostname (e.g. "somesite.com"), a port (e.g. 8080), or an IP range ("192.1.0.0",
   *     "192.1.0.0/16", or "10.1.0.0/16:80"). 'localNet' also supports CIDR notation, excluding
   *     custom ports.
   *      If "type" is 'application' or 'applicationCategory', then "value" must be an object
   *     with the structure { "id": "meraki:layer7/..." }, where "id" is the application category or
   *     application ID (for a list of IDs for your network, use the trafficShaping/applicationCategories
   *     endpoint).
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: string;
}

/**
 * The bandwidth limits object, specifying the upload ('limitUp') and download ('limitDown') speed in Kbps. These are only enforced if 'settings' is set to 'custom'.
 */
export class UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesPerClientBandwidthLimitsBandwidthLimits extends SpeakeasyBase {
  /**
   * The maximum download limit (integer, in Kbps).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "limitDown" })
  limitDown?: number;

  /**
   * The maximum upload limit (integer, in Kbps).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "limitUp" })
  limitUp?: number;
}

/**
 *     An object describing the bandwidth settings for your rule.
 *
 * @remarks
 *
 */
export class UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesPerClientBandwidthLimits extends SpeakeasyBase {
  /**
   * The bandwidth limits object, specifying the upload ('limitUp') and download ('limitDown') speed in Kbps. These are only enforced if 'settings' is set to 'custom'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bandwidthLimits" })
  @Type(
    () =>
      UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesPerClientBandwidthLimitsBandwidthLimits
  )
  bandwidthLimits?: UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesPerClientBandwidthLimitsBandwidthLimits;

  /**
   * How bandwidth limits are applied by your rule. Can be one of 'network default', 'ignore' or 'custom'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settings" })
  settings?: string;
}

export class UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRules extends SpeakeasyBase {
  /**
   *     A list of objects describing the definitions of your traffic shaping rule. At least one definition is required.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesDefinitions,
  })
  @Expose({ name: "definitions" })
  @Type(
    () =>
      UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesDefinitions
  )
  definitions: UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesDefinitions[];

  /**
   *     The DSCP tag applied by your rule. null means 'Do not change DSCP tag'.
   *
   * @remarks
   *     For a list of possible tag values, use the trafficShaping/dscpTaggingOptions endpoint.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dscpTagValue" })
  dscpTagValue?: number;

  /**
   *     The PCP tag applied by your rule. Can be 0 (lowest priority) through 7 (highest priority).
   *
   * @remarks
   *     null means 'Do not set PCP tag'.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pcpTagValue" })
  pcpTagValue?: number;

  /**
   *     An object describing the bandwidth settings for your rule.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "perClientBandwidthLimits" })
  @Type(
    () =>
      UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesPerClientBandwidthLimits
  )
  perClientBandwidthLimits?: UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRulesPerClientBandwidthLimits;
}

export class UpdateNetworkWirelessSsidTrafficShapingRulesRequestBody extends SpeakeasyBase {
  /**
   * Whether default traffic shaping rules are enabled (true) or disabled (false). There are 4 default rules, which can be seen on your network's traffic shaping page. Note that default rules count against the rule limit of 8.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultRulesEnabled" })
  defaultRulesEnabled?: boolean;

  /**
   *     An array of traffic shaping rules. Rules are applied in the order that
   *
   * @remarks
   *     they are specified in. An empty list (or null) means no rules. Note that
   *     you are allowed a maximum of 8 rules.
   *
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRules,
  })
  @Expose({ name: "rules" })
  @Type(() => UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRules)
  rules?: UpdateNetworkWirelessSsidTrafficShapingRulesRequestBodyRules[];

  /**
   * Whether traffic shaping rules are applied to clients on your SSID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trafficShapingEnabled" })
  trafficShapingEnabled?: boolean;
}

export class UpdateNetworkWirelessSsidTrafficShapingRulesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateNetworkWirelessSsidTrafficShapingRulesRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=number",
  })
  number: string;
}

export class UpdateNetworkWirelessSsidTrafficShapingRulesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkWirelessSsidTrafficShapingRules200ApplicationJSONObject?: Record<
    string,
    any
  >;
}
