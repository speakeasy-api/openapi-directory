"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import links as shared_links
from ..shared import meta as shared_meta
from ..shared import obactiveorhistoriccurrencyandamount as shared_obactiveorhistoriccurrencyandamount
from ..shared import obcashaccountdebtor4 as shared_obcashaccountdebtor4
from ..shared import obchargebearertype1code_enum as shared_obchargebearertype1code_enum
from ..shared import obpostaladdress6 as shared_obpostaladdress6
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticResponse5DataCharges:
    r"""Set of elements used to provide details of a charge for the payment initiation."""
    
    amount: shared_obactiveorhistoriccurrencyandamount.OBActiveOrHistoricCurrencyAndAmount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount') }})
    r"""Amount of money associated with the charge type."""  
    charge_bearer: shared_obchargebearertype1code_enum.OBChargeBearerType1CodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargeBearer') }})
    r"""Specifies which party/parties will bear the charges associated with the processing of the payment transaction."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})
    r"""Charge type, in a coded form."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticResponse5DataInitiationCreditorAccount:
    r"""Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction."""
    
    identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Identification') }})
    r"""Identification assigned by an institution to identify an account. This identification is known by the account owner."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""The account name is the name or names of the account owner(s) represented at an account level.
    Note, the account name is not the product name or the nickname of the account.
    OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
    """  
    scheme_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName') }})
    r"""Name of the identification scheme, in a coded form as published in an external list."""  
    secondary_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryIdentification'), 'exclude': lambda f: f is None }})
    r"""This is secondary identification of the account, as assigned by the account servicing institution.
    This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticResponse5DataInitiationDebtorAccount:
    r"""Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction."""
    
    identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Identification') }})
    r"""Identification assigned by an institution to identify an account. This identification is known by the account owner."""  
    scheme_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName') }})
    r"""Name of the identification scheme, in a coded form as published in an external list."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
    Note, the account name is not the product name or the nickname of the account.
    """  
    secondary_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryIdentification'), 'exclude': lambda f: f is None }})
    r"""This is secondary identification of the account, as assigned by the account servicing institution.
    This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticResponse5DataInitiationInstructedAmount:
    r"""Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
    Usage: This amount has to be transported unchanged through the transaction chain.
    """
    
    amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount') }})
    r"""A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217."""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency') }})
    r"""A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \\"Codes for the representation of currencies and funds\\"."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticResponse5DataInitiationRemittanceInformation:
    r"""Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system."""
    
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reference'), 'exclude': lambda f: f is None }})
    r"""Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
    Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
    If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
    OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
    """  
    unstructured: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unstructured'), 'exclude': lambda f: f is None }})
    r"""Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticResponse5DataInitiation:
    r"""The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment."""
    
    creditor_account: OBWriteDomesticResponse5DataInitiationCreditorAccount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditorAccount') }})
    r"""Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction."""  
    end_to_end_identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndToEndIdentification') }})
    r"""Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
    Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
    OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
    """  
    instructed_amount: OBWriteDomesticResponse5DataInitiationInstructedAmount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstructedAmount') }})
    r"""Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
    Usage: This amount has to be transported unchanged through the transaction chain.
    """  
    instruction_identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstructionIdentification') }})
    r"""Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
    Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
    """  
    creditor_postal_address: Optional[shared_obpostaladdress6.OBPostalAddress6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditorPostalAddress'), 'exclude': lambda f: f is None }})
    r"""Information that locates and identifies a specific address, as defined by postal services."""  
    debtor_account: Optional[OBWriteDomesticResponse5DataInitiationDebtorAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DebtorAccount'), 'exclude': lambda f: f is None }})
    r"""Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction."""  
    local_instrument: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocalInstrument'), 'exclude': lambda f: f is None }})
    r"""User community specific instrument.
    Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
    """  
    remittance_information: Optional[OBWriteDomesticResponse5DataInitiationRemittanceInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemittanceInformation'), 'exclude': lambda f: f is None }})
    r"""Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system."""  
    supplementary_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupplementaryData'), 'exclude': lambda f: f is None }})
    r"""Additional information that can not be captured in the structured fields and/or any other specific block."""  
    
class OBWriteDomesticResponse5DataMultiAuthorisationStatusEnum(str, Enum):
    r"""Specifies the status of the authorisation flow in code form."""
    AUTHORISED = 'Authorised'
    AWAITING_FURTHER_AUTHORISATION = 'AwaitingFurtherAuthorisation'
    REJECTED = 'Rejected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticResponse5DataMultiAuthorisation:
    r"""The multiple authorisation flow response from the ASPSP."""
    
    status: OBWriteDomesticResponse5DataMultiAuthorisationStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status') }})
    r"""Specifies the status of the authorisation flow in code form."""  
    expiration_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpirationDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    last_update_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdateDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    number_received: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberReceived'), 'exclude': lambda f: f is None }})
    r"""Number of authorisations received."""  
    number_required: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberRequired'), 'exclude': lambda f: f is None }})
    r"""Number of authorisations required for payment order (total required at the start of the multi authorisation journey)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticResponse5DataRefundAccount:
    r"""Provides the details to identify an account."""
    
    identification: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Identification') }})
    r"""Identification assigned by an institution to identify an account. This identification is known by the account owner."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""Name of the account, as assigned by the account servicing institution.
    Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
    OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
    """  
    scheme_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName') }})
    r"""Name of the identification scheme, in a coded form as published in an external list."""  
    secondary_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryIdentification'), 'exclude': lambda f: f is None }})
    r"""This is secondary identification of the account, as assigned by the account servicing institution.
    This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticResponse5DataRefund:
    r"""Unambiguous identification of the refund account to which a refund will be made as a result of the transaction."""
    
    account: OBWriteDomesticResponse5DataRefundAccount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Account') }})
    r"""Provides the details to identify an account."""  
    
class OBWriteDomesticResponse5DataStatusEnum(str, Enum):
    r"""Specifies the status of the payment information group."""
    ACCEPTED_CREDIT_SETTLEMENT_COMPLETED = 'AcceptedCreditSettlementCompleted'
    ACCEPTED_SETTLEMENT_COMPLETED = 'AcceptedSettlementCompleted'
    ACCEPTED_SETTLEMENT_IN_PROCESS = 'AcceptedSettlementInProcess'
    ACCEPTED_WITHOUT_POSTING = 'AcceptedWithoutPosting'
    PENDING = 'Pending'
    REJECTED = 'Rejected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticResponse5Data:
    
    consent_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsentId') }})
    r"""OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource."""  
    creation_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    domestic_payment_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomesticPaymentId') }})
    r"""OB: Unique identification as assigned by the ASPSP to uniquely identify the domestic payment resource."""  
    initiation: OBWriteDomesticResponse5DataInitiation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Initiation') }})
    r"""The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment."""  
    status: OBWriteDomesticResponse5DataStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status') }})
    r"""Specifies the status of the payment information group."""  
    status_update_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatusUpdateDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    charges: Optional[list[OBWriteDomesticResponse5DataCharges]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Charges'), 'exclude': lambda f: f is None }})  
    debtor: Optional[shared_obcashaccountdebtor4.OBCashAccountDebtor4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Debtor'), 'exclude': lambda f: f is None }})
    r"""^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent."""  
    expected_execution_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpectedExecutionDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    expected_settlement_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpectedSettlementDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.
    All date-time fields in responses must include the timezone. An example is below:
    2017-04-05T10:43:07+00:00
    """  
    multi_authorisation: Optional[OBWriteDomesticResponse5DataMultiAuthorisation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MultiAuthorisation'), 'exclude': lambda f: f is None }})
    r"""The multiple authorisation flow response from the ASPSP."""  
    refund: Optional[OBWriteDomesticResponse5DataRefund] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Refund'), 'exclude': lambda f: f is None }})
    r"""Unambiguous identification of the refund account to which a refund will be made as a result of the transaction."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBWriteDomesticResponse5:
    r"""Domestic Payments Created"""
    
    data: OBWriteDomesticResponse5Data = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Data') }})  
    links: Optional[shared_links.Links] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Links'), 'exclude': lambda f: f is None }})
    r"""Links relevant to the payload"""  
    meta: Optional[shared_meta.Meta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Meta'), 'exclude': lambda f: f is None }})
    r"""Meta Data relevant to the payload"""  
    