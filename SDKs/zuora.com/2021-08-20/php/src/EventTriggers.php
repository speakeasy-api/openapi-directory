<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class EventTriggers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an event trigger
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETEEventTriggerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETEEventTriggerResponse
     */
	public function deleteEventTrigger(
        \OpenAPI\OpenAPI\Models\Operations\DELETEEventTriggerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETEEventTriggerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/event-triggers/{id}', \OpenAPI\OpenAPI\Models\Operations\DELETEEventTriggerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETEEventTriggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve an event trigger
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETEventTriggerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETEventTriggerResponse
     */
	public function getEventTrigger(
        \OpenAPI\OpenAPI\Models\Operations\GETEventTriggerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETEventTriggerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/event-triggers/{id}', \OpenAPI\OpenAPI\Models\Operations\GETEventTriggerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETEventTriggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventTrigger', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List event triggers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETEventTriggersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETEventTriggersResponse
     */
	public function getEventTriggers(
        \OpenAPI\OpenAPI\Models\Operations\GETEventTriggersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETEventTriggersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/event-triggers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETEventTriggersRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETEventTriggersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventTriggers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETEventTriggers200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an event trigger
     * 
     * When you create an event trigger, you must specify the base object and define the trigger condition.
     * 
     * ### Specify the base object
     * Use `baseObject` field to specify which object to define a trigger on. You can define an event trigger on any of the following objects:
     * 
     *   * Account
     *   * AccountingCode
     *   * AccountingPeriod
     *   * Amendment
     *   * BillingRun
     *   * Contact
     *   * CreditBalanceAdjustment
     *   * CreditMemo
     *   * CreditMemoApplication
     *   * CreditMemoApplicationItem
     *   * CreditMemoItem
     *   * DebitMemo
     *   * DebitMemoItem
     *   * Feature
     *   * Invoice
     *   * InvoiceAdjustment
     *   * InvoiceItem
     *   * InvoiceItemAdjustment
     *   * JournalEntry
     *   * JournalEntryItem
     *   * Order
     *   * OrderAction
     *   * Payment
     *   * PaymentApplication
     *   * PaymentMethod
     *   * PaymentPart
     *   * Product
     *   * ProductFeature
     *   * ProductRatePlan
     *   * ProductRatePlanCharge
     *   * RatePlan
     *   * RatePlanCharge
     *   * Refund
     *   * RefundApplication
     *   * RevenueEvent
     *   * RevenueEventItem
     *   * RevenueSchedule
     *   * RevenueScheduleItem
     *   * Subscription
     *   * SubscriptionProductFeature
     *   * TaxationItem
     *   * Usage
     * 
     * #### Tenant level base objects and tenant level event triggers
     * Zuora identifies the following base objects as the tenant level base objects:
     * 
     *   * AccountingCode
     *   * AccountingPeriod
     *   * BillingRun
     *   * Feature
     *   * JournalEntry
     *   * JournalEntryItem
     *   * Product
     *   * ProductFeature
     *   * ProductRatePlan
     *   * ProductRatePlanCharge
     * 
     * Event triggers defined on tenant level base objects are tenant level event triggers. Notifications associated with tenant level events are system notifications. 
     * 
     * **Note:** Tenant level event triggers and system notifications are only available in the default profile.        
     * 
     * ### Define the trigger condition
     * The `condition` field is a [JEXL](http://commons.apache.org/proper/commons-jexl/) expression that specifies when to trigger events. The expression can contain fields from the object that the trigger is defined on.
     * 
     * **Note:** The condition cannot contain fields from [data source](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL) objects that are joined to the object that the trigger is defined on.
     * 
     * For example, the following condition causes an event to be triggered whenever an invoice is posted with an amount greater than 1000:
     * 
     * ```changeType == 'UPDATE' && Invoice.Status == 'Posted' && Invoice.Status_old != 'Posted' && Invoice.Amount > 1000```
     * 
     * Where:
     * 
     *   * `changeType` is a keyword that specifies the type of change that occurred to the Invoice object. For all objects, the supported values of `changeType` are `INSERT`, `UPDATE`,  and `DELETE`.
     *   * `Invoice.Status` is the value of the Invoice object's `Status` field after the change occurred.
     *   * `Invoice.Status_old` is the value of the Invoice object's `Status` field before the change occurred.
     * 
     * In the above example, the value of `baseObject` is `Invoice`.
     * 
     * ### Limitations 
     * 
     * This event trigger has the following limitations:
     * 
     * * The maximum number of event triggers is 20. If you want to increase the limit, submit a request at [Zuora Global Support](https://support.zuora.com).
     * 
     * * The INSERT change type is not supported on RatePlan base objects.
     * 
     * * The INSERT change type is not supported on SubscriptionProductFeature base objects.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTEventTriggerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTEventTriggerResponse
     */
	public function postEventTrigger(
        \OpenAPI\OpenAPI\Models\Operations\POSTEventTriggerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTEventTriggerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/event-triggers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postEventTriggerRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTEventTriggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventTrigger', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an event trigger
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTEventTriggerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTEventTriggerResponse
     */
	public function putEventTrigger(
        \OpenAPI\OpenAPI\Models\Operations\PUTEventTriggerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTEventTriggerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/event-triggers/{id}', \OpenAPI\OpenAPI\Models\Operations\PUTEventTriggerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "putEventTriggerRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTEventTriggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventTrigger', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}