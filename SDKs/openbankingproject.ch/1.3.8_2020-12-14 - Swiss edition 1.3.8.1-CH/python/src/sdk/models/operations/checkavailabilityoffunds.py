"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import confirmationoffunds as shared_confirmationoffunds
from ..shared import error400_ais as shared_error400_ais
from ..shared import error400_ng_ais as shared_error400_ng_ais
from ..shared import error401_ng_piis as shared_error401_ng_piis
from ..shared import error401_piis as shared_error401_piis
from ..shared import error403_ng_piis as shared_error403_ng_piis
from ..shared import error403_piis as shared_error403_piis
from ..shared import error404_ng_piis as shared_error404_ng_piis
from ..shared import error404_piis as shared_error404_piis
from ..shared import error405_ng_piis as shared_error405_ng_piis
from ..shared import error405_piis as shared_error405_piis
from ..shared import error409_ng_piis as shared_error409_ng_piis
from ..shared import error409_piis as shared_error409_piis
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class CheckAvailabilityOfFundsSecurity:
    
    bearer_auth_o_auth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class CheckAvailabilityOfFundsRequest:
    
    confirmation_of_funds: shared_confirmationoffunds.ConfirmationOfFunds = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Request body for a confirmation of funds request."""  
    x_request_id: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Request-ID', 'style': 'simple', 'explode': False }})
    r"""ID of the request, unique to the call, as determined by the initiating party."""  
    authorization: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Authorization', 'style': 'simple', 'explode': False }})
    r"""This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol,
    facilitated by the TPP.
    """  
    digest: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Digest', 'style': 'simple', 'explode': False }})
    r"""Is contained if and only if the \\"Signature\\" element is contained in the header of the request."""  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Signature', 'style': 'simple', 'explode': False }})
    r"""A signature of the request by the TPP on application level. This might be mandated by ASPSP."""  
    tpp_signature_certificate: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'TPP-Signature-Certificate', 'style': 'simple', 'explode': False }})
    r"""The certificate used for signing the request, in base64 encoding.
    Must be contained if a signature is contained.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckAvailabilityOfFunds200ApplicationJSON:
    r"""Equals \\"true\\" if sufficient funds are available at the time of the request,
    \"false\" otherwise.
    """
    
    funds_available: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fundsAvailable') }})
    r"""Equals true if sufficient funds are available at the time of the request, false otherwise.
    
    This datalemenet is allways contained in a confirmation of funds response.
    
    This data element is contained in a payment status response, 
    if supported by the ASPSP, if a funds check has been performed and 
    if the transactionStatus is \"ACTC\", \"ACWC\" or \"ACCP\".
    """  
    

@dataclasses.dataclass
class CheckAvailabilityOfFundsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    check_availability_of_funds_200_application_json_object: Optional[CheckAvailabilityOfFunds200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    error400_ais: Optional[shared_error400_ais.Error400AIS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error400_ng_ais: Optional[shared_error400_ng_ais.Error400NGAIS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error401_ng_piis: Optional[shared_error401_ng_piis.Error401NGPIIS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error401_piis: Optional[shared_error401_piis.Error401PIIS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error403_ng_piis: Optional[shared_error403_ng_piis.Error403NGPIIS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error403_piis: Optional[shared_error403_piis.Error403PIIS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error404_ng_piis: Optional[shared_error404_ng_piis.Error404NGPIIS] = dataclasses.field(default=None)
    r"""Not found"""  
    error404_piis: Optional[shared_error404_piis.Error404PIIS] = dataclasses.field(default=None)
    r"""Not found"""  
    error405_ng_piis: Optional[shared_error405_ng_piis.Error405NGPIIS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error405_piis: Optional[shared_error405_piis.Error405PIIS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error409_ng_piis: Optional[shared_error409_ng_piis.Error409NGPIIS] = dataclasses.field(default=None)
    r"""Conflict"""  
    error409_piis: Optional[shared_error409_piis.Error409PIIS] = dataclasses.field(default=None)
    r"""Conflict"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    