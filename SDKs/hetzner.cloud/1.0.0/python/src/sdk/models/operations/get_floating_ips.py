"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetFloatingIpsSortEnum(str, Enum):
    r"""Can be used multiple times. Choices id id:asc id:desc created created:asc created:desc"""
    ID = 'id'
    ID_ASC = 'id:asc'
    ID_DESC = 'id:desc'
    CREATED = 'created'
    CREATED_ASC = 'created:asc'
    CREATED_DESC = 'created:desc'


@dataclasses.dataclass
class GetFloatingIpsRequest:
    
    label_selector: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'label_selector', 'style': 'form', 'explode': True }})
    r"""Can be used to filter Floating IPs by labels. The response will only contain Floating IPs matching the label selector."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Can be used to filter Floating IPs by their name. The response will only contain the Floating IP matching the specified name."""  
    sort: Optional[GetFloatingIpsSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times. Choices id id:asc id:desc created created:asc created:desc"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFloatingIps200ApplicationJSONFloatingIpsDNSPtr:
    
    dns_ptr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_ptr') }})
    r"""DNS pointer for the specific IP address"""  
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""Single IPv4 or IPv6 address"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFloatingIps200ApplicationJSONFloatingIpsHomeLocation:
    r"""Location the Floating IP was created in. Routing is optimized for this Location."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City the Location is closest to"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""ISO 3166-1 alpha-2 code of the country the Location resides in"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Location"""  
    id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Location"""  
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""Latitude of the city closest to the Location"""  
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""Longitude of the city closest to the Location"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Location"""  
    network_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_zone') }})
    r"""Name of network zone this Location resides in"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFloatingIps200ApplicationJSONFloatingIpsProtection:
    r"""Protection configuration for the Resource"""
    
    delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete') }})
    r"""If true, prevents the Resource from being deleted"""  
    
class GetFloatingIps200ApplicationJSONFloatingIpsTypeEnum(str, Enum):
    r"""Type of the Floating IP"""
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFloatingIps200ApplicationJSONFloatingIps:
    
    blocked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocked') }})
    r"""Whether the IP is blocked"""  
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Resource"""  
    dns_ptr: list[GetFloatingIps200ApplicationJSONFloatingIpsDNSPtr] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_ptr') }})
    r"""Array of reverse DNS entries"""  
    home_location: GetFloatingIps200ApplicationJSONFloatingIpsHomeLocation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_location') }})
    r"""Location the Floating IP was created in. Routing is optimized for this Location."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""IP address"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    protection: GetFloatingIps200ApplicationJSONFloatingIpsProtection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection') }})
    r"""Protection configuration for the Resource"""  
    server: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server') }})
    r"""ID of the Server the Floating IP is assigned to, null if it is not assigned at all"""  
    type: GetFloatingIps200ApplicationJSONFloatingIpsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the Floating IP"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFloatingIps200ApplicationJSONMetaPagination:
    
    last_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_page') }})
    r"""ID of the last page available. Can be null if the current page is the last one."""  
    next_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page') }})
    r"""ID of the next page. Can be null if the current page is the last one."""  
    page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page') }})
    r"""Current page number"""  
    per_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_page') }})
    r"""Maximum number of items shown per page in the response"""  
    previous_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page') }})
    r"""ID of the previous page. Can be null if the current page is the first one."""  
    total_entries: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_entries') }})
    r"""The total number of entries that exist in the database for this query. Nullable if unknown."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFloatingIps200ApplicationJSONMeta:
    
    pagination: GetFloatingIps200ApplicationJSONMetaPagination = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pagination') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFloatingIps200ApplicationJSON:
    r"""The `floating_ips` key in the reply contains an array of Floating IP objects with this structure"""
    
    floating_ips: list[GetFloatingIps200ApplicationJSONFloatingIps] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floating_ips') }})  
    meta: Optional[GetFloatingIps200ApplicationJSONMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetFloatingIpsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_floating_ips_200_application_json_object: Optional[GetFloatingIps200ApplicationJSON] = dataclasses.field(default=None)
    r"""The `floating_ips` key in the reply contains an array of Floating IP objects with this structure"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    