/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ClientInfo } from "./clientinfo";
import { EnvironmentMatrix } from "./environmentmatrix";
import { ResultStorage } from "./resultstorage";
import { TestExecution } from "./testexecution";
import { TestSpecification } from "./testspecification";
import { Expose, Type } from "class-transformer";

/**
 * Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
 */
export enum TestMatrixInvalidMatrixDetailsEnum {
  InvalidMatrixDetailsUnspecified = "INVALID_MATRIX_DETAILS_UNSPECIFIED",
  DetailsUnavailable = "DETAILS_UNAVAILABLE",
  MalformedApk = "MALFORMED_APK",
  MalformedTestApk = "MALFORMED_TEST_APK",
  NoManifest = "NO_MANIFEST",
  NoPackageName = "NO_PACKAGE_NAME",
  InvalidPackageName = "INVALID_PACKAGE_NAME",
  TestSameAsApp = "TEST_SAME_AS_APP",
  NoInstrumentation = "NO_INSTRUMENTATION",
  NoSignature = "NO_SIGNATURE",
  InstrumentationOrchestratorIncompatible = "INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE",
  NoTestRunnerClass = "NO_TEST_RUNNER_CLASS",
  NoLauncherActivity = "NO_LAUNCHER_ACTIVITY",
  ForbiddenPermissions = "FORBIDDEN_PERMISSIONS",
  InvalidRoboDirectives = "INVALID_ROBO_DIRECTIVES",
  InvalidResourceName = "INVALID_RESOURCE_NAME",
  InvalidDirectiveAction = "INVALID_DIRECTIVE_ACTION",
  TestLoopIntentFilterNotFound = "TEST_LOOP_INTENT_FILTER_NOT_FOUND",
  ScenarioLabelNotDeclared = "SCENARIO_LABEL_NOT_DECLARED",
  ScenarioLabelMalformed = "SCENARIO_LABEL_MALFORMED",
  ScenarioNotDeclared = "SCENARIO_NOT_DECLARED",
  DeviceAdminReceiver = "DEVICE_ADMIN_RECEIVER",
  MalformedXcTestZip = "MALFORMED_XC_TEST_ZIP",
  BuiltForIosSimulator = "BUILT_FOR_IOS_SIMULATOR",
  NoTestsInXcTestZip = "NO_TESTS_IN_XC_TEST_ZIP",
  UseDestinationArtifacts = "USE_DESTINATION_ARTIFACTS",
  TestNotAppHosted = "TEST_NOT_APP_HOSTED",
  PlistCannotBeParsed = "PLIST_CANNOT_BE_PARSED",
  TestOnlyApk = "TEST_ONLY_APK",
  MalformedIpa = "MALFORMED_IPA",
  MissingUrlScheme = "MISSING_URL_SCHEME",
  MalformedAppBundle = "MALFORMED_APP_BUNDLE",
  NoCodeApk = "NO_CODE_APK",
  InvalidInputApk = "INVALID_INPUT_APK",
  InvalidApkPreviewSDK = "INVALID_APK_PREVIEW_SDK",
  MatrixTooLarge = "MATRIX_TOO_LARGE",
  TestQuotaExceeded = "TEST_QUOTA_EXCEEDED",
  ServiceNotActivated = "SERVICE_NOT_ACTIVATED",
  UnknownPermissionError = "UNKNOWN_PERMISSION_ERROR",
}

/**
 * Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
 */
export enum TestMatrixOutcomeSummaryEnum {
  OutcomeSummaryUnspecified = "OUTCOME_SUMMARY_UNSPECIFIED",
  Success = "SUCCESS",
  Failure = "FAILURE",
  Inconclusive = "INCONCLUSIVE",
  Skipped = "SKIPPED",
}

/**
 * Output only. Indicates the current progress of the test matrix.
 */
export enum TestMatrixStateEnum {
  TestStateUnspecified = "TEST_STATE_UNSPECIFIED",
  Validating = "VALIDATING",
  Pending = "PENDING",
  Running = "RUNNING",
  Finished = "FINISHED",
  Error = "ERROR",
  UnsupportedEnvironment = "UNSUPPORTED_ENVIRONMENT",
  IncompatibleEnvironment = "INCOMPATIBLE_ENVIRONMENT",
  IncompatibleArchitecture = "INCOMPATIBLE_ARCHITECTURE",
  Cancelled = "CANCELLED",
  Invalid = "INVALID",
}

/**
 * TestMatrix captures all details about a test. It contains the environment configuration, test specification, test executions and overall state and outcome.
 */
export class TestMatrix extends SpeakeasyBase {
  /**
   * Information about the client which invoked the test.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientInfo" })
  @Type(() => ClientInfo)
  clientInfo?: ClientInfo;

  /**
   * The matrix of environments in which the test is to be executed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "environmentMatrix" })
  @Type(() => EnvironmentMatrix)
  environmentMatrix?: EnvironmentMatrix;

  /**
   * If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failFast" })
  failFast?: boolean;

  /**
   * The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flakyTestAttempts" })
  flakyTestAttempts?: number;

  /**
   * Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invalidMatrixDetails" })
  invalidMatrixDetails?: TestMatrixInvalidMatrixDetailsEnum;

  /**
   * Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outcomeSummary" })
  outcomeSummary?: TestMatrixOutcomeSummaryEnum;

  /**
   * The cloud project that owns the test matrix.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "projectId" })
  projectId?: string;

  /**
   * Locations where the results of running the test are stored.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resultStorage" })
  @Type(() => ResultStorage)
  resultStorage?: ResultStorage;

  /**
   * Output only. Indicates the current progress of the test matrix.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: TestMatrixStateEnum;

  /**
   * Output only. The list of test executions that the service creates for this matrix.
   */
  @SpeakeasyMetadata({ elemType: TestExecution })
  @Expose({ name: "testExecutions" })
  @Type(() => TestExecution)
  testExecutions?: TestExecution[];

  /**
   * Output only. Unique id set by the service.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "testMatrixId" })
  testMatrixId?: string;

  /**
   * A description of how to run the test.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "testSpecification" })
  @Type(() => TestSpecification)
  testSpecification?: TestSpecification;

  /**
   * Output only. The time this test matrix was initially created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  timestamp?: string;
}
