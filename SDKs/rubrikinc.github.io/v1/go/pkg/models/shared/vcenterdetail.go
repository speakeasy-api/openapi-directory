// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// VcenterDetailConflictResolutionAuthzEnum - Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.
type VcenterDetailConflictResolutionAuthzEnum string

const (
	VcenterDetailConflictResolutionAuthzEnumAllowAutoConflictResolution VcenterDetailConflictResolutionAuthzEnum = "AllowAutoConflictResolution"
	VcenterDetailConflictResolutionAuthzEnumNoConflictResolution        VcenterDetailConflictResolutionAuthzEnum = "NoConflictResolution"
)

func (e VcenterDetailConflictResolutionAuthzEnum) ToPointer() *VcenterDetailConflictResolutionAuthzEnum {
	return &e
}

func (e *VcenterDetailConflictResolutionAuthzEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AllowAutoConflictResolution":
		fallthrough
	case "NoConflictResolution":
		*e = VcenterDetailConflictResolutionAuthzEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VcenterDetailConflictResolutionAuthzEnum: %v", v)
	}
}

// VcenterDetail - Details for a vCenter Server object.
type VcenterDetail struct {
	// Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----. Use an empty string to remove the existing certificates for the vCenter.
	CaCerts *string `json:"caCerts,omitempty"`
	// Compute clusters that are visible to this Rubrik Cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If a 'hostGroupFilter' is specified for a compute cluster, only vms that currently reside on these hosts are visible.
	ComputeVisibilityFilter []ClusterVisibilityInfo `json:"computeVisibilityFilter"`
	// The ID of the SLA Domain configured directly on the Rubrik object.
	ConfiguredSLADomainID string `json:"configuredSlaDomainId"`
	// The name of the SLA Domain configured directly on the Rubrik object.
	ConfiguredSLADomainName string `json:"configuredSlaDomainName"`
	// Optional field containing Polaris managed id of the configured SLA domain if it is Polaris managed.
	ConfiguredSLADomainPolarisManagedID *string `json:"configuredSlaDomainPolarisManagedId,omitempty"`
	// Specifies whether the SLA Domain is used for protection or retention.
	ConfiguredSLADomainType *ConfiguredSLATypeEnum `json:"configuredSlaDomainType,omitempty"`
	// Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.
	ConflictResolutionAuthz *VcenterDetailConflictResolutionAuthzEnum `json:"conflictResolutionAuthz,omitempty"`
	ConnectionStatus        RefreshableObjectConnectionStatus         `json:"connectionStatus"`
	Hostname                string                                    `json:"hostname"`
	// The ID of the Rubrik object.
	ID string `json:"id"`
	// Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
	IsConfiguredSLADomainRetentionLocked *bool `json:"isConfiguredSlaDomainRetentionLocked,omitempty"`
	// A Boolean value that specifies whether Rubrik IO filters are installed on any compute clusters in the vCenter. When this value is 'true,' Rubrik IO filters are present on at least one compute cluster in the vCenter. When this value is 'false,' no Rubrik IO filters are present on any compute clusters in the vCenter.
	IsIoFilterInstalled *bool `json:"isIoFilterInstalled,omitempty"`
	// Indicates if the vCenter is a VMC instance.
	IsVmc *bool `json:"isVmc,omitempty"`
	// Optional field containing the last time that a vcenter was refreshed (either lite or full).
	LastRefreshTime *time.Time `json:"lastRefreshTime,omitempty"`
	// The name of the Rubrik object.
	Name string `json:"name"`
	// The ID of the cluster that manages the Rubrik object.
	PrimaryClusterID string `json:"primaryClusterId"`
	// The UTC time when the SLA Domain was last updated.
	SLALastUpdateTime *time.Time `json:"slaLastUpdateTime,omitempty"`
	// Status of a vCenter. DEPRECATED. Please use connectionStatus.
	Status   string `json:"status"`
	Username string `json:"username"`
	// Version of vCenter.
	Version string `json:"version"`
}
