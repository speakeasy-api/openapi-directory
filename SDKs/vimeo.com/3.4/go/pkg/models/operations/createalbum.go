// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateAlbumSecurity struct {
	Oauth2 string `security:"scheme,type=oauth2,name=Authorization"`
}

// CreateAlbumRequestBodyLayoutEnum - The type of layout for presenting the album.
type CreateAlbumRequestBodyLayoutEnum string

const (
	CreateAlbumRequestBodyLayoutEnumGrid   CreateAlbumRequestBodyLayoutEnum = "grid"
	CreateAlbumRequestBodyLayoutEnumPlayer CreateAlbumRequestBodyLayoutEnum = "player"
)

func (e *CreateAlbumRequestBodyLayoutEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "grid":
		fallthrough
	case "player":
		*e = CreateAlbumRequestBodyLayoutEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAlbumRequestBodyLayoutEnum: %s", s)
	}
}

// CreateAlbumRequestBodyPrivacyEnum - The privacy level of the album.
type CreateAlbumRequestBodyPrivacyEnum string

const (
	CreateAlbumRequestBodyPrivacyEnumAnybody   CreateAlbumRequestBodyPrivacyEnum = "anybody"
	CreateAlbumRequestBodyPrivacyEnumEmbedOnly CreateAlbumRequestBodyPrivacyEnum = "embed_only"
	CreateAlbumRequestBodyPrivacyEnumPassword  CreateAlbumRequestBodyPrivacyEnum = "password"
)

func (e *CreateAlbumRequestBodyPrivacyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "embed_only":
		fallthrough
	case "password":
		*e = CreateAlbumRequestBodyPrivacyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAlbumRequestBodyPrivacyEnum: %s", s)
	}
}

// CreateAlbumRequestBodySortEnum - The default sort order of the album's videos.
type CreateAlbumRequestBodySortEnum string

const (
	CreateAlbumRequestBodySortEnumAddedFirst   CreateAlbumRequestBodySortEnum = "added_first"
	CreateAlbumRequestBodySortEnumAddedLast    CreateAlbumRequestBodySortEnum = "added_last"
	CreateAlbumRequestBodySortEnumAlphabetical CreateAlbumRequestBodySortEnum = "alphabetical"
	CreateAlbumRequestBodySortEnumArranged     CreateAlbumRequestBodySortEnum = "arranged"
	CreateAlbumRequestBodySortEnumComments     CreateAlbumRequestBodySortEnum = "comments"
	CreateAlbumRequestBodySortEnumLikes        CreateAlbumRequestBodySortEnum = "likes"
	CreateAlbumRequestBodySortEnumNewest       CreateAlbumRequestBodySortEnum = "newest"
	CreateAlbumRequestBodySortEnumOldest       CreateAlbumRequestBodySortEnum = "oldest"
	CreateAlbumRequestBodySortEnumPlays        CreateAlbumRequestBodySortEnum = "plays"
)

func (e *CreateAlbumRequestBodySortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "added_first":
		fallthrough
	case "added_last":
		fallthrough
	case "alphabetical":
		fallthrough
	case "arranged":
		fallthrough
	case "comments":
		fallthrough
	case "likes":
		fallthrough
	case "newest":
		fallthrough
	case "oldest":
		fallthrough
	case "plays":
		*e = CreateAlbumRequestBodySortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAlbumRequestBodySortEnum: %s", s)
	}
}

// CreateAlbumRequestBodyThemeEnum - The color theme of the album.
type CreateAlbumRequestBodyThemeEnum string

const (
	CreateAlbumRequestBodyThemeEnumDark     CreateAlbumRequestBodyThemeEnum = "dark"
	CreateAlbumRequestBodyThemeEnumStandard CreateAlbumRequestBodyThemeEnum = "standard"
)

func (e *CreateAlbumRequestBodyThemeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dark":
		fallthrough
	case "standard":
		*e = CreateAlbumRequestBodyThemeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAlbumRequestBodyThemeEnum: %s", s)
	}
}

type CreateAlbumRequestBody struct {
	// The hexadecimal code for the color of the player buttons.
	BrandColor *string `json:"brand_color,omitempty"`
	// The description of the album.
	Description *string `json:"description,omitempty"`
	// Whether to hide Vimeo navigation when displaying the album.
	HideNav *bool `json:"hide_nav,omitempty"`
	// The type of layout for presenting the album.
	Layout *CreateAlbumRequestBodyLayoutEnum `json:"layout,omitempty"`
	// The name of the album.
	Name string `json:"name"`
	// The album's password. Required only if **privacy** is `password`.
	Password *string `json:"password,omitempty"`
	// The privacy level of the album.
	Privacy *CreateAlbumRequestBodyPrivacyEnum `json:"privacy,omitempty"`
	// Whether album videos should use the review mode URL.
	ReviewMode *bool `json:"review_mode,omitempty"`
	// The default sort order of the album's videos.
	Sort *CreateAlbumRequestBodySortEnum `json:"sort,omitempty"`
	// The color theme of the album.
	Theme *CreateAlbumRequestBodyThemeEnum `json:"theme,omitempty"`
}

type CreateAlbumRequest struct {
	RequestBody CreateAlbumRequestBody `request:"mediaType=application/vnd.vimeo.album+json"`
	// The ID of the user.
	UserID float64 `pathParam:"style=simple,explode=false,name=user_id"`
}

type CreateAlbumResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The album was created.
	Album *shared.Album
	// A parameter is invalid.
	LegacyError *shared.LegacyError
}
