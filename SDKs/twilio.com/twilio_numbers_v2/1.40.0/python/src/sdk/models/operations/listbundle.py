"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import bundle_enum_sort_by_enum as shared_bundle_enum_sort_by_enum
from ..shared import bundle_enum_sort_direction_enum as shared_bundle_enum_sort_direction_enum
from ..shared import bundle_enum_status_enum as shared_bundle_enum_status_enum
from ..shared import numbers_v2_regulatory_compliance_bundle as shared_numbers_v2_regulatory_compliance_bundle
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from sdk import utils
from typing import Optional

LIST_BUNDLE_SERVERS = [
	"https://numbers.twilio.com",
]


@dataclasses.dataclass
class ListBundleSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class ListBundleRequest:
    
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FriendlyName', 'style': 'form', 'explode': True }})
    r"""The string that you assigned to describe the resource. The column can contain 255 variable characters."""  
    has_valid_until_date: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'HasValidUntilDate', 'style': 'form', 'explode': True }})
    r"""Indicates that the Bundle is a valid Bundle until a specified expiration date."""  
    iso_country: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'IsoCountry', 'style': 'form', 'explode': True }})
    r"""The 2-digit [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Bundle's phone number country ownership request."""  
    number_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NumberType', 'style': 'form', 'explode': True }})
    r"""The type of phone number of the Bundle's ownership request. Can be `local`, `mobile`, `national`, or `tollfree`."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Page', 'style': 'form', 'explode': True }})
    r"""The page index. This value is simply for client state."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageSize', 'style': 'form', 'explode': True }})
    r"""How many resources to return in each list page. The default is 50, and the maximum is 1000."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageToken', 'style': 'form', 'explode': True }})
    r"""The page token. This is provided by the API."""  
    regulation_sid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RegulationSid', 'style': 'form', 'explode': True }})
    r"""The unique string of a [Regulation resource](https://www.twilio.com/docs/phone-numbers/regulatory/api/regulations) that is associated to the Bundle resource."""  
    sort_by: Optional[shared_bundle_enum_sort_by_enum.BundleEnumSortByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SortBy', 'style': 'form', 'explode': True }})
    r"""Can be `valid-until` or `date-updated`. Defaults to `date-created`."""  
    sort_direction: Optional[shared_bundle_enum_sort_direction_enum.BundleEnumSortDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SortDirection', 'style': 'form', 'explode': True }})
    r"""Default is `DESC`. Can be `ASC` or `DESC`."""  
    status: Optional[shared_bundle_enum_status_enum.BundleEnumStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Status', 'style': 'form', 'explode': True }})
    r"""The verification status of the Bundle resource. Please refer to [Bundle Statuses](https://www.twilio.com/docs/phone-numbers/regulatory/api/bundles#bundle-statuses) for more details."""  
    valid_until_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ValidUntilDate', 'style': 'form', 'explode': True }})
    r"""Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format."""  
    valid_until_date_less_than: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ValidUntilDate<', 'style': 'form', 'explode': True }})
    r"""Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format."""  
    valid_until_date_greater_than: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ValidUntilDate>', 'style': 'form', 'explode': True }})
    r"""Date to filter Bundles having their `valid_until_date` before or after the specified date. Can be `ValidUntilDate>=` or `ValidUntilDate<=`. Both can be used in conjunction as well. [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) is the acceptable date format."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListBundleListBundleResponseMeta:
    
    first_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_page_url'), 'exclude': lambda f: f is None }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})  
    next_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_url'), 'exclude': lambda f: f is None }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})  
    previous_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page_url'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListBundleListBundleResponse:
    r"""OK"""
    
    meta: Optional[ListBundleListBundleResponseMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    results: Optional[list[shared_numbers_v2_regulatory_compliance_bundle.NumbersV2RegulatoryComplianceBundle]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ListBundleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_bundle_response: Optional[ListBundleListBundleResponse] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    