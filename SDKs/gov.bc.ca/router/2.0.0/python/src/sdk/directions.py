"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Directions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_directions_output_format_(self, request: operations.GetDirectionsOutputFormatRequest) -> operations.GetDirectionsOutputFormatResponse:
        r"""Get the directions, path, distance and travel time between a series of geographic points
        Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDirectionsOutputFormatRequest, base_url, '/directions.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.GetDirectionsOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDirectionsOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_optimal_directions_output_format_(self, request: operations.GetOptimalDirectionsOutputFormatRequest) -> operations.GetOptimalDirectionsOutputFormatResponse:
        r"""Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
        Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOptimalDirectionsOutputFormatRequest, base_url, '/optimalDirections.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.GetOptimalDirectionsOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOptimalDirectionsOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_truck_directions_output_format_(self, request: operations.GetTruckDirectionsOutputFormatRequest) -> operations.GetTruckDirectionsOutputFormatResponse:
        r"""Get the directions, path, distance and travel time between a series of geographic points for a commercial vehicle
        Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points for a commercial vehicle
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTruckDirectionsOutputFormatRequest, base_url, '/truck/directions.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.GetTruckDirectionsOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTruckDirectionsOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_truck_optimal_directions_output_format_(self, request: operations.GetTruckOptimalDirectionsOutputFormatRequest) -> operations.GetTruckOptimalDirectionsOutputFormatResponse:
        r"""Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle
        Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time for a commercial vehicle.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTruckOptimalDirectionsOutputFormatRequest, base_url, '/truck/optimalDirections.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.GetTruckOptimalDirectionsOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTruckOptimalDirectionsOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_directions_output_format_(self, request: operations.PostDirectionsOutputFormatRequest) -> operations.PostDirectionsOutputFormatResponse:
        r"""Get the directions, path, distance and travel time between a series of geographic points
        Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostDirectionsOutputFormatRequest, base_url, '/directions.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.PostDirectionsOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostDirectionsOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_optimal_directions_output_format_(self, request: operations.PostOptimalDirectionsOutputFormatRequest) -> operations.PostOptimalDirectionsOutputFormatResponse:
        r"""Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
        Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOptimalDirectionsOutputFormatRequest, base_url, '/optimalDirections.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.PostOptimalDirectionsOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOptimalDirectionsOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_truck_directions_output_format_(self, request: operations.PostTruckDirectionsOutputFormatRequest) -> operations.PostTruckDirectionsOutputFormatResponse:
        r"""Get the directions, path, distance and travel time between a series of geographic points
        Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostTruckDirectionsOutputFormatRequest, base_url, '/truck/directions.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.PostTruckDirectionsOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTruckDirectionsOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_truck_optimal_directions_output_format_(self, request: operations.PostTruckOptimalDirectionsOutputFormatRequest) -> operations.PostTruckOptimalDirectionsOutputFormatResponse:
        r"""Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
        Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostTruckOptimalDirectionsOutputFormatRequest, base_url, '/truck/optimalDirections.{outputFormat}', request)
        
        query_params = utils.get_query_params(operations.PostTruckOptimalDirectionsOutputFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTruckOptimalDirectionsOutputFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    