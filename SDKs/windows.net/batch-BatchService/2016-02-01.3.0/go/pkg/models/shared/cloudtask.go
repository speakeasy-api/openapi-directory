// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CloudTaskPreviousStateEnum - The previous state of the task. This property is not set if the task is in its initial Active state.
type CloudTaskPreviousStateEnum string

const (
	CloudTaskPreviousStateEnumActive    CloudTaskPreviousStateEnum = "active"
	CloudTaskPreviousStateEnumPreparing CloudTaskPreviousStateEnum = "preparing"
	CloudTaskPreviousStateEnumRunning   CloudTaskPreviousStateEnum = "running"
	CloudTaskPreviousStateEnumCompleted CloudTaskPreviousStateEnum = "completed"
)

func (e *CloudTaskPreviousStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "preparing":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CloudTaskPreviousStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CloudTaskPreviousStateEnum: %s", s)
	}
}

// CloudTaskStateEnum - The current state of the task.
type CloudTaskStateEnum string

const (
	CloudTaskStateEnumActive    CloudTaskStateEnum = "active"
	CloudTaskStateEnumPreparing CloudTaskStateEnum = "preparing"
	CloudTaskStateEnumRunning   CloudTaskStateEnum = "running"
	CloudTaskStateEnumCompleted CloudTaskStateEnum = "completed"
)

func (e *CloudTaskStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "preparing":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CloudTaskStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CloudTaskStateEnum: %s", s)
	}
}

// CloudTask - An Azure Batch task.
type CloudTask struct {
	// A locality hint that can be used by the Batch service to select a compute node on which to start a task.
	AffinityInfo *AffinityInformation `json:"affinityInfo,omitempty"`
	// The command line of the task. For multi-instance tasks, the command line is executed on the primary subtask after all the subtasks have finished executing the coordination command line.
	CommandLine *string `json:"commandLine,omitempty"`
	// Constraints to apply to the Job Manager task.
	Constraints *TaskConstraints `json:"constraints,omitempty"`
	// The creation time of the task.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Specifies any dependencies of a task. Any task that is explicitly specified or within a dependency range must complete before the dependant task will be scheduled.
	DependsOn *TaskDependencies `json:"dependsOn,omitempty"`
	// A display name for the task.
	DisplayName *string `json:"displayName,omitempty"`
	// The ETag of the task.
	ETag *string `json:"eTag,omitempty"`
	// A list of environment variable settings for the task.
	EnvironmentSettings []EnvironmentSetting `json:"environmentSettings,omitempty"`
	// Information about the execution of a task.
	ExecutionInfo *TaskExecutionInformation `json:"executionInfo,omitempty"`
	// A string that uniquely identifies the task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
	ID *string `json:"id,omitempty"`
	// The last modified time of the task.
	LastModified *time.Time `json:"lastModified,omitempty"`
	// Settings which specify how to run a multi-instance task. Multi-instance tasks are commonly used to support MPI tasks.
	MultiInstanceSettings *MultiInstanceSettings `json:"multiInstanceSettings,omitempty"`
	// Information about the compute node on which a task ran.
	NodeInfo *ComputeNodeInformation `json:"nodeInfo,omitempty"`
	// The previous state of the task. This property is not set if the task is in its initial Active state.
	PreviousState *CloudTaskPreviousStateEnum `json:"previousState,omitempty"`
	// The time at which the task entered its previous state. This property is not set if the task is in its initial Active state.
	PreviousStateTransitionTime *time.Time `json:"previousStateTransitionTime,omitempty"`
	// A list of files that the Batch service will download to the compute node before running the command line. For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary subtask is executed.
	ResourceFiles []ResourceFile `json:"resourceFiles,omitempty"`
	// Whether to run the task in elevated mode.
	RunElevated *bool `json:"runElevated,omitempty"`
	// The current state of the task.
	State *CloudTaskStateEnum `json:"state,omitempty"`
	// The time at which the task entered its current state.
	StateTransitionTime *time.Time `json:"stateTransitionTime,omitempty"`
	// Resource usage statistics for a task.
	Stats *TaskStatistics `json:"stats,omitempty"`
	// The URL of the task.
	URL *string `json:"url,omitempty"`
}
