/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Document object represents your invoice.
 */
export class Document {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Cancel a document
   *
   * @remarks
   * Cancel a document. Returns a cancellation document object if the cancellation is succeded.
   */
  cancelDocument(
    req: operations.CancelDocumentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CancelDocumentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CancelDocumentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{id}/cancel",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CancelDocumentResponse =
        new operations.CancelDocumentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.document = utils.objectToClass(httpRes?.data, shared.Document);
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a document
   *
   * @remarks
   * Create a new document. Returns a document object if the create is succeded.
   */
  createDocument(
    req: shared.DocumentInsert,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDocumentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.DocumentInsert(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/documents";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDocumentResponse =
        new operations.CreateDocumentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.document = utils.objectToClass(httpRes?.data, shared.Document);
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a document from proforma.
   *
   * @remarks
   * Create a new document from proforma. Returns a document object if the create is succeded.
   */
  createDocumentFromProforma(
    req: operations.CreateDocumentFromProformaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDocumentFromProformaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateDocumentFromProformaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{id}/create-from-proforma",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDocumentFromProformaResponse =
        new operations.CreateDocumentFromProformaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.document = utils.objectToClass(httpRes?.data, shared.Document);
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete all payment history on document
   *
   * @remarks
   * Delete all exist payment history on document.
   */
  deletePayment(
    req: operations.DeletePaymentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletePaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeletePaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{id}/payments",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeletePaymentResponse =
        new operations.DeletePaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentHistories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.paymentHistories = utils.objectToClass(
              httpRes?.data,
              shared.PaymentHistory,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Download a document in PDF format.
   *
   * @remarks
   * Download a document. Returns a document in PDF format.
   */
  downloadDocument(
    req: operations.DownloadDocumentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DownloadDocumentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DownloadDocumentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{id}/download",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DownloadDocumentResponse =
        new operations.DownloadDocumentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.downloadDocument200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientError = utils.objectToClass(
              httpRes?.data,
              shared.ClientError
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a document
   *
   * @remarks
   * Retrieves the details of an existing document.
   */
  getDocument(
    req: operations.GetDocumentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDocumentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDocumentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/documents/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDocumentResponse =
        new operations.GetDocumentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.document = utils.objectToClass(httpRes?.data, shared.Document);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a document Online Számla status
   *
   * @remarks
   * Retrieves the details of an existing document status.
   */
  getOnlineSzamlaStatus(
    req: operations.GetOnlineSzamlaStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOnlineSzamlaStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOnlineSzamlaStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{id}/online-szamla",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOnlineSzamlaStatusResponse =
        new operations.GetOnlineSzamlaStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.onlineSzamlaStatus = utils.objectToClass(
              httpRes?.data,
              shared.OnlineSzamlaStatus
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a payment histroy
   *
   * @remarks
   * Retrieves the details of payment history an existing document.
   */
  getPayment(
    req: operations.GetPaymentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{id}/payments",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPaymentResponse =
        new operations.GetPaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentHistories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.paymentHistories = utils.objectToClass(
              httpRes?.data,
              shared.PaymentHistory,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a document download public url.
   *
   * @remarks
   * Retrieves public url to download an existing document.
   */
  getPublicUrl(
    req: operations.GetPublicUrlRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPublicUrlResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPublicUrlRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{id}/public-url",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPublicUrlResponse =
        new operations.GetPublicUrlResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.documentPublicUrl = utils.objectToClass(
              httpRes?.data,
              shared.DocumentPublicUrl
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all documents
   *
   * @remarks
   * Returns a list of your documents. The documents are returned sorted by creation date, with the most recent documents appearing first.
   */
  listDocument(
    req: operations.ListDocumentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListDocumentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListDocumentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/documents";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListDocumentResponse =
        new operations.ListDocumentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.documentList = utils.objectToClass(
              httpRes?.data,
              shared.DocumentList
            );
          }
          break;
        case [400, 401].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Send invoice to given email adresses.
   *
   * @remarks
   * Returns a list of emails, where the invoice is sent.
   */
  sendDocument(
    req: operations.SendDocumentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SendDocumentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SendDocumentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/documents/{id}/send", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sendDocument",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SendDocumentResponse =
        new operations.SendDocumentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendDocument = utils.objectToClass(
              httpRes?.data,
              shared.SendDocument
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update payment history
   *
   * @remarks
   * Update payment history an existing document. Returns a payment history object if the update is succeded.
   */
  updatePayment(
    req: operations.UpdatePaymentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdatePaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdatePaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/documents/{id}/payments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdatePaymentResponse =
        new operations.UpdatePaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paymentHistories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.paymentHistories = utils.objectToClass(
              httpRes?.data,
              shared.PaymentHistory,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClientErrorResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorResponse
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serverErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ServerErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
