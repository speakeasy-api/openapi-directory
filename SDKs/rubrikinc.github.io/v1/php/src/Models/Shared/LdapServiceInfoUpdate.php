<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * LdapServiceInfoUpdate - Information for updating an authentication domain.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class LdapServiceInfoUpdate
{
	#[\JMS\Serializer\Annotation\SerializedName('advancedOptions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AdvancedLdapConfiguration')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AdvancedLdapConfiguration $advancedOptions = null;
    
    /**
     * An ordered list of authentication servers. Servers on this list have priority over servers discovered using dynamic DNS.
     * 
     * @var ?array<string> $authServers
     */
	#[\JMS\Serializer\Annotation\SerializedName('authServers')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $authServers = null;
    
    /**
     * The path to the directory where searches for users begin.
     * 
     * @var ?string $baseDn
     */
	#[\JMS\Serializer\Annotation\SerializedName('baseDn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $baseDn = null;
    
    /**
     * The name of the user that searches the authentication server for other users.
     * 
     * @var ?string $bindUserName
     */
	#[\JMS\Serializer\Annotation\SerializedName('bindUserName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bindUserName = null;
    
    /**
     * Password for the bind user.
     * 
     * @var ?string $bindUserPassword
     */
	#[\JMS\Serializer\Annotation\SerializedName('bindUserPassword')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bindUserPassword = null;
    
    /**
     * ID of the imported certificate to use for connections to this server.
     * 
     * @var ?string $certificateId
     */
	#[\JMS\Serializer\Annotation\SerializedName('certificateId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $certificateId = null;
    
    /**
     * Dynamic DNS name for locating authentication servers.
     * 
     * @var ?string $dynamicDnsName
     */
	#[\JMS\Serializer\Annotation\SerializedName('dynamicDnsName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dynamicDnsName = null;
    
    /**
     * Indicates whether the time-based one time password (TOTP) authentication method is being enforced. Returns true when TOTP is enforced and false when TOTP is not enforced.
     * 
     * 
     * 
     * @var ?bool $isTotpEnforced
     */
	#[\JMS\Serializer\Annotation\SerializedName('isTotpEnforced')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isTotpEnforced = null;
    
    /**
     * MFA server associated with LDAP service.
     * 
     * @var ?string $mfaServerId
     */
	#[\JMS\Serializer\Annotation\SerializedName('mfaServerId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $mfaServerId = null;
    
    /**
     * Human friendly name.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
	public function __construct()
	{
		$this->advancedOptions = null;
		$this->authServers = null;
		$this->baseDn = null;
		$this->bindUserName = null;
		$this->bindUserPassword = null;
		$this->certificateId = null;
		$this->dynamicDnsName = null;
		$this->isTotpEnforced = null;
		$this->mfaServerId = null;
		$this->name = null;
	}
}
