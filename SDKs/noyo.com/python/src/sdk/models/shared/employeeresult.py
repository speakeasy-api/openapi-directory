"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResultEmploymentEmploymentDates:
    r"""Employee employment dates"""
    
    full_time_start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_time_start'), 'exclude': lambda f: f is None }})
    r"""ISO-8601 date string for start date as a full time employee with the group (if applicable)"""  
    hire_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hire_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""ISO-8601 date string for the hire date of the employee"""  
    rehire: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rehire'), 'exclude': lambda f: f is None }})
    r"""ISO-8601 date string for the rehire date of the employee (if applicable)"""  
    retirement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retirement'), 'exclude': lambda f: f is None }})
    r"""ISO-8601 date string for the retirement date of the employee (if applicable)"""  
    terminated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('terminated'), 'exclude': lambda f: f is None }})
    r"""ISO-8601 date string for the termination date of the employee (if applicable)"""  
    
class EmployeeResultEmploymentEmploymentStatusEnum(str, Enum):
    r"""Employee employment status at the company"""
    CONTRACT = 'contract'
    DISABLED = 'disabled'
    FULL_TIME = 'full-time'
    PART_TIME = 'part-time'
    RETIRED = 'retired'
    TERMINATED = 'terminated'

class EmployeeResultEmploymentSalaryTypeEnum(str, Enum):
    r"""Type of salary earned by the employee"""
    HOURLY = 'hourly'
    SALARY = 'salary'

class EmployeeResultEmploymentSalaryUnitEnum(str, Enum):
    r"""Unit of salary earned by the employee"""
    ANNUAL = 'annual'
    HOUR = 'hour'
    MONTH = 'month'
    SEMI_MONTHLY = 'semi-monthly'
    WEEK = 'week'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResultEmploymentSalary:
    r"""Employee salary information"""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Amount of salary earned by the employee in US dollars"""  
    type: Optional[EmployeeResultEmploymentSalaryTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of salary earned by the employee"""  
    unit: Optional[EmployeeResultEmploymentSalaryUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    r"""Unit of salary earned by the employee"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResultEmployment:
    r"""Employment information for the employee"""
    
    employment_dates: Optional[EmployeeResultEmploymentEmploymentDates] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employment_dates'), 'exclude': lambda f: f is None }})
    r"""Employee employment dates"""  
    employment_status: Optional[EmployeeResultEmploymentEmploymentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employment_status'), 'exclude': lambda f: f is None }})
    r"""Employee employment status at the company"""  
    hours_worked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hours_worked'), 'exclude': lambda f: f is None }})
    r"""Number of hours worked per week by the employee"""  
    occupation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occupation'), 'exclude': lambda f: f is None }})
    r"""Employee occupation or job title"""  
    salary: Optional[EmployeeResultEmploymentSalary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salary'), 'exclude': lambda f: f is None }})
    r"""Employee salary information"""  
    
class EmployeeResultPersonContactEmailAddressTypeEnum(str, Enum):
    r"""Type of email address"""
    HOME = 'home'
    WORK = 'work'

class EmployeeResultPersonContactPreferredMethodEnum(str, Enum):
    r"""Preferred method of contact for the person"""
    EMAIL = 'email'
    HOME_PHONE = 'home-phone'
    MAIL = 'mail'
    OTHER = 'other'
    WORK_PHONE = 'work-phone'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResultPersonContact:
    r"""Contact information for the person"""
    
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_address'), 'exclude': lambda f: f is None }})
    r"""Email address of the person"""  
    email_address_type: Optional[EmployeeResultPersonContactEmailAddressTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_address_type'), 'exclude': lambda f: f is None }})
    r"""Type of email address"""  
    home_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_phone'), 'exclude': lambda f: f is None }})
    r"""Home phone number in E.164 format"""  
    preferred_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferred_language'), 'exclude': lambda f: f is None }})
    r"""Preferred written or spoken language of the person"""  
    preferred_method: Optional[EmployeeResultPersonContactPreferredMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferred_method'), 'exclude': lambda f: f is None }})
    r"""Preferred method of contact for the person"""  
    speaks_english: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speaks_english'), 'exclude': lambda f: f is None }})
    r"""True if the person can speak or communicate in English"""  
    work_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('work_phone'), 'exclude': lambda f: f is None }})
    r"""Work phone number in E.164 format"""  
    
class EmployeeResultPersonDetailsAmericanIndianStateEnum(str, Enum):
    r"""Primary state of the federally-recognized American Indian or Alaska Native tribe, if applicable"""
    AK = 'AK'
    AL = 'AL'
    AR = 'AR'
    AS = 'AS'
    AZ = 'AZ'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DC = 'DC'
    DE = 'DE'
    FL = 'FL'
    FM = 'FM'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    IA = 'IA'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    MA = 'MA'
    MD = 'MD'
    ME = 'ME'
    MH = 'MH'
    MI = 'MI'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MS = 'MS'
    MT = 'MT'
    NC = 'NC'
    ND = 'ND'
    NE = 'NE'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NV = 'NV'
    NY = 'NY'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    PW = 'PW'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UM = 'UM'
    UT = 'UT'
    VA = 'VA'
    VI = 'VI'
    VT = 'VT'
    WA = 'WA'
    WI = 'WI'
    WV = 'WV'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResultPersonDetailsAmericanIndian:
    r"""American Indian status details (if applicable)"""
    
    state: Optional[EmployeeResultPersonDetailsAmericanIndianStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Primary state of the federally-recognized American Indian or Alaska Native tribe, if applicable"""  
    tribe: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tribe'), 'exclude': lambda f: f is None }})
    r"""Name of the federally-recognized American Indian or Alaska Native tribe, if applicable"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResultPersonDetailsDisability:
    r"""Disability details (if applicable)"""
    
    communication: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('communication'), 'exclude': lambda f: f is None }})
    r"""True if the disability impacts the ability to communicate or read"""  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled'), 'exclude': lambda f: f is None }})
    r"""True if the member has a disability"""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""Description of the disability"""  
    
class EmployeeResultPersonDetailsTobaccoTypesEnum(str, Enum):
    r"""Type of tobacco use"""
    CHEWING_TOBACCO = 'chewing-tobacco'
    CIGARETTES = 'cigarettes'
    PIPE = 'pipe'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResultPersonDetailsTobacco:
    r"""Tobacco usage details (if applicable)"""
    
    duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Duration of tobacco use"""  
    frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency'), 'exclude': lambda f: f is None }})
    r"""Frequency of tobacco use"""  
    types: Optional[list[EmployeeResultPersonDetailsTobaccoTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('types'), 'exclude': lambda f: f is None }})
    r"""List of types of tobacco use"""  
    user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""True if the person uses tobacco of any kind"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResultPersonDetails:
    r"""Additional personal details of the person"""
    
    american_indian: Optional[EmployeeResultPersonDetailsAmericanIndian] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('american_indian'), 'exclude': lambda f: f is None }})
    r"""American Indian status details (if applicable)"""  
    disability: Optional[EmployeeResultPersonDetailsDisability] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disability'), 'exclude': lambda f: f is None }})
    r"""Disability details (if applicable)"""  
    is_military: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_military'), 'exclude': lambda f: f is None }})
    r"""True if the person is in the military"""  
    is_student: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_student'), 'exclude': lambda f: f is None }})
    r"""True if the person is a student"""  
    tobacco: Optional[EmployeeResultPersonDetailsTobacco] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tobacco'), 'exclude': lambda f: f is None }})
    r"""Tobacco usage details (if applicable)"""  
    
class EmployeeResultPersonHomeAddressStateEnum(str, Enum):
    r"""State postal code of the address"""
    AK = 'AK'
    AL = 'AL'
    AR = 'AR'
    AS = 'AS'
    AZ = 'AZ'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DC = 'DC'
    DE = 'DE'
    FL = 'FL'
    FM = 'FM'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    IA = 'IA'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    MA = 'MA'
    MD = 'MD'
    ME = 'ME'
    MH = 'MH'
    MI = 'MI'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MS = 'MS'
    MT = 'MT'
    NC = 'NC'
    ND = 'ND'
    NE = 'NE'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NV = 'NV'
    NY = 'NY'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    PW = 'PW'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UM = 'UM'
    UT = 'UT'
    VA = 'VA'
    VI = 'VI'
    VT = 'VT'
    WA = 'WA'
    WI = 'WI'
    WV = 'WV'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResultPersonHomeAddress:
    r"""Home address of the person"""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City of the address"""  
    state: EmployeeResultPersonHomeAddressStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""State postal code of the address"""  
    street_one: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_one') }})
    r"""Line one of the address"""  
    zip_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip_code') }})
    r"""Zip code of the address"""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county'), 'exclude': lambda f: f is None }})
    r"""County of the address"""  
    street_two: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_two'), 'exclude': lambda f: f is None }})
    r"""Line two of the address"""  
    
class EmployeeResultPersonMailingAddressStateEnum(str, Enum):
    r"""State postal code of the address"""
    AK = 'AK'
    AL = 'AL'
    AR = 'AR'
    AS = 'AS'
    AZ = 'AZ'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DC = 'DC'
    DE = 'DE'
    FL = 'FL'
    FM = 'FM'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    IA = 'IA'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    MA = 'MA'
    MD = 'MD'
    ME = 'ME'
    MH = 'MH'
    MI = 'MI'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MS = 'MS'
    MT = 'MT'
    NC = 'NC'
    ND = 'ND'
    NE = 'NE'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NV = 'NV'
    NY = 'NY'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    PW = 'PW'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UM = 'UM'
    UT = 'UT'
    VA = 'VA'
    VI = 'VI'
    VT = 'VT'
    WA = 'WA'
    WI = 'WI'
    WV = 'WV'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResultPersonMailingAddress:
    r"""Mailing address of the person"""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City of the address"""  
    state: EmployeeResultPersonMailingAddressStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""State postal code of the address"""  
    street_one: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_one') }})
    r"""Line one of the address"""  
    zip_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip_code') }})
    r"""Zip code of the address"""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county'), 'exclude': lambda f: f is None }})
    r"""County of the address"""  
    street_two: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_two'), 'exclude': lambda f: f is None }})
    r"""Line two of the address"""  
    
class EmployeeResultPersonMaritalStatusEnum(str, Enum):
    r"""Marital status of the person"""
    DIVORCED = 'divorced'
    DOMESTIC_PARTNER = 'domestic-partner'
    LEGALLY_SEPARATED = 'legally-separated'
    MARRIED = 'married'
    SINGLE = 'single'
    WIDOWED = 'widowed'

class EmployeeResultPersonSexEnum(str, Enum):
    r"""Sex of the person"""
    F = 'F'
    M = 'M'
    U = 'U'
    X = 'X'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResultPerson:
    r"""Personal information for the employee"""
    
    date_of_birth: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""ISO-8601 date string for the date of birth of the person"""  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name') }})
    r"""First name of the person"""  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name') }})
    r"""Last name of the person"""  
    sex: EmployeeResultPersonSexEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sex') }})
    r"""Sex of the person"""  
    contact: Optional[EmployeeResultPersonContact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact'), 'exclude': lambda f: f is None }})
    r"""Contact information for the person"""  
    details: Optional[EmployeeResultPersonDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Additional personal details of the person"""  
    home_address: Optional[EmployeeResultPersonHomeAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_address'), 'exclude': lambda f: f is None }})
    r"""Home address of the person"""  
    mailing_address: Optional[EmployeeResultPersonMailingAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mailing_address'), 'exclude': lambda f: f is None }})
    r"""Mailing address of the person"""  
    marital_status: Optional[EmployeeResultPersonMaritalStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marital_status'), 'exclude': lambda f: f is None }})
    r"""Marital status of the person"""  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('middle_name'), 'exclude': lambda f: f is None }})
    r"""Middle name of the person"""  
    ssn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssn'), 'exclude': lambda f: f is None }})
    r"""Social Security Number of the person"""  
    suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suffix'), 'exclude': lambda f: f is None }})
    r"""Suffix of the person"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeResult:
    r"""Successful Response - Returns a single Employee"""
    
    created: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""The date the record was created"""  
    employment: EmployeeResultEmployment = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employment') }})
    r"""Employment information for the employee"""  
    group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id') }})
    r"""Unique identifier of the group in Noyo"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier of the record in Noyo"""  
    modified: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified') }})
    r"""The date the record was last updated"""  
    person: EmployeeResultPerson = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('person') }})
    r"""Personal information for the employee"""  
    version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})
    r"""Current version of the record"""  
    