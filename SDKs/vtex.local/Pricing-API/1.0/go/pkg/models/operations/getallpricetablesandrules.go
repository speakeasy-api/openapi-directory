// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

var GetallpricetablesandrulesServerList = []string{
	"https://api.vtex.com/{account}/pricing",
}

type GetallpricetablesandrulesHeaders struct {
	// HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
	Accept string `header:"style=simple,explode=false,name=Accept"`
	// Describes the type of the content being sent.
	ContentType string `header:"style=simple,explode=false,name=Content-Type"`
}

type GetallpricetablesandrulesRequest struct {
	Headers   GetallpricetablesandrulesHeaders
	ServerURL *string
}

// Getallpricetablesandrules200ApplicationJSONRulesContextDateRange - The rule will be active during this time range.
type Getallpricetablesandrules200ApplicationJSONRulesContextDateRange struct {
	// Date when rule will be activated. Date format: `RFC3339`.
	From *string `json:"from,omitempty"`
	// Date when the rule will be deactivated. Date format: `RFC3339`.
	To *string `json:"to,omitempty"`
}

// Getallpricetablesandrules200ApplicationJSONRulesContextMarkupRange - For an item to be eligible to the rule, it's markup should be in this Markup Range.
type Getallpricetablesandrules200ApplicationJSONRulesContextMarkupRange struct {
	// Item markup should be greater than or equal to this value.
	From *int64 `json:"from,omitempty"`
	// Item markup should be less than or equal to this value.
	To *int64 `json:"to,omitempty"`
}

// Getallpricetablesandrules200ApplicationJSONRulesContext - Rule Context is a group of filters to be checked at an item level when applying the rule. If all those filters check out, the rule will be applied for that item, unless there is a fixed price for that item.
type Getallpricetablesandrules200ApplicationJSONRulesContext struct {
	// Brands that an item should have to be eligible for the rule. Format: key: `brandId`, value: `brandName`.
	Brands map[string]string `json:"brands,omitempty"`
	// Categories that an item should have to be eligible for the rule. Format: key: `categoryId`, value: `categoryName`.
	Categories map[string]string `json:"categories,omitempty"`
	// The rule will be active during this time range.
	DateRange *Getallpricetablesandrules200ApplicationJSONRulesContextDateRange `json:"dateRange,omitempty"`
	// Internal Categories.
	InternalCategories map[string]interface{} `json:"internalCategories,omitempty"`
	// For an item to be eligible to the rule, it's markup should be in this Markup Range.
	MarkupRange *Getallpricetablesandrules200ApplicationJSONRulesContextMarkupRange `json:"markupRange,omitempty"`
	// Stock statuses.
	StockStatuses map[string]interface{} `json:"stockStatuses,omitempty"`
}

// Getallpricetablesandrules200ApplicationJSONRules - Object containing a price table rule.
type Getallpricetablesandrules200ApplicationJSONRules struct {
	// Rule Context is a group of filters to be checked at an item level when applying the rule. If all those filters check out, the rule will be applied for that item, unless there is a fixed price for that item.
	Context *Getallpricetablesandrules200ApplicationJSONRulesContext `json:"context,omitempty"`
	// Rule ID.
	ID *float64 `json:"id,omitempty"`
}

type Getallpricetablesandrules200ApplicationJSON struct {
	// Percentual modifier.
	PercentualModifier *int64 `json:"percentualModifier,omitempty"`
	// Array of rules for the price table.
	Rules []Getallpricetablesandrules200ApplicationJSONRules `json:"rules,omitempty"`
	// Trade Policy ID (Price Table ID).
	TradePolicyID *string `json:"tradePolicyId,omitempty"`
}

type GetallpricetablesandrulesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Getallpricetablesandrules200ApplicationJSONObjects []Getallpricetablesandrules200ApplicationJSON
}
