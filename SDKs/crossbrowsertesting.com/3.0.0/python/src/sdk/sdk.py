"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://crossbrowsertesting.com/api/v3",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""What's in this version:
     1. Compare two screenshots for layout differences 
     2. Compare a full screenshot test of browsers to a single baseline browser for layout differences. 
     3. Compare a screenshot test version to another test version - good for regression tests. 
     4. Get links to the Comparison UI for visual representation of layout differences
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get_screenshots_target_screenshot_test_id_target_version_id_comparison_parallel_base_version_id_(self, request: operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonParallelBaseVersionIDRequest, security: operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonParallelBaseVersionIDSecurity) -> operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonParallelBaseVersionIDResponse:
        r"""Compare Screenshot Test Versions
        Get comparison results for all browsers in target screenshot test against the same browser in the base screenshot test. This is a good method for regression testing. For example, you've run a screenshot test against a set of browsers that is \"good\". Then, after some changes, you run a new screenshot test against the same set of browsers. This method will compare each of the same browsers against each other. For example, IE9 will be compared to IE9 from an earlier test. This is a many-to-many comparison where the OS/Browser/Resolution must match between the two test versions in order for the comparison to return results. The two versions can be from the same screenshot_test_id or not.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonParallelBaseVersionIDRequest, base_url, '/screenshots/{target_screenshot_test_id}/{target_version_id}/comparison/parallel/{base_version_id}', request)
        
        query_params = utils.get_query_params(operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonParallelBaseVersionIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonParallelBaseVersionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SingleComparisonTest]])
                res.single_comparison_tests = out

        return res

    def get_screenshots_target_screenshot_test_id_target_version_id_comparison_base_result_id_(self, request: operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonBaseResultIDRequest, security: operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonBaseResultIDSecurity) -> operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonBaseResultIDResponse:
        r"""Compare Full Screenshot Test
        Get comparison results for all browsers in target screenshot test against a base screenshot result. The base result can be from the same test or from another test run at an earlier time. This is a one-to-many comparison.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonBaseResultIDRequest, base_url, '/screenshots/{target_screenshot_test_id}/{target_version_id}/comparison/{base_result_id}', request)
        
        query_params = utils.get_query_params(operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonBaseResultIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDComparisonBaseResultIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FullComparisonTest])
                res.full_comparison_test = out

        return res

    def get_screenshots_target_screenshot_test_id_target_version_id_target_result_id_comparison_base_result_id_(self, request: operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDTargetResultIDComparisonBaseResultIDRequest, security: operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDTargetResultIDComparisonBaseResultIDSecurity) -> operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDTargetResultIDComparisonBaseResultIDResponse:
        r"""Compare Single Screenshot
        Get comparison results for a single target screenshot result against a base screenshot result. This is a one-to-one comparison.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDTargetResultIDComparisonBaseResultIDRequest, base_url, '/screenshots/{target_screenshot_test_id}/{target_version_id}/{target_result_id}/comparison/{base_result_id}', request)
        
        query_params = utils.get_query_params(operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDTargetResultIDComparisonBaseResultIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetScreenshotsTargetScreenshotTestIDTargetVersionIDTargetResultIDComparisonBaseResultIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SingleComparisonTest])
                res.single_comparison_test = out

        return res

    