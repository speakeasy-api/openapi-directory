"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://azure-api.sportsdata.io/v3/nba/scores",
    "https://azure-api.sportsdata.io/v3/nba/scores",
]
"""Contains the list of servers available to the SDK"""

class SDK:

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def are_games_in_progress(self, request: operations.AreGamesInProgressRequest) -> operations.AreGamesInProgressResponse:
        r"""Are Games In Progress
        Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AreGamesInProgressRequest, base_url, '/{format}/AreAnyGamesInProgress', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AreGamesInProgressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.are_games_in_progress_200_application_json_boolean = out

        return res

    def current_season(self, request: operations.CurrentSeasonRequest) -> operations.CurrentSeasonResponse:
        r"""Current Season"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CurrentSeasonRequest, base_url, '/{format}/CurrentSeason', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CurrentSeasonResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Season])
                res.season = out

        return res

    def depth_charts(self, request: operations.DepthChartsRequest) -> operations.DepthChartsResponse:
        r"""Depth Charts
        Returns the full list of NBA Referees.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DepthChartsRequest, base_url, '/{format}/DepthCharts', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DepthChartsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamDepthChart]])
                res.team_depth_charts = out

        return res

    def games_by_date(self, request: operations.GamesByDateRequest) -> operations.GamesByDateResponse:
        r"""Games by Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesByDateRequest, base_url, '/{format}/GamesByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def news(self, request: operations.NewsRequest) -> operations.NewsResponse:
        r"""News"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NewsRequest, base_url, '/{format}/News', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NewsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.News]])
                res.news = out

        return res

    def news_by_date(self, request: operations.NewsByDateRequest) -> operations.NewsByDateResponse:
        r"""News by Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NewsByDateRequest, base_url, '/{format}/NewsByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NewsByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.News]])
                res.news = out

        return res

    def news_by_player(self, request: operations.NewsByPlayerRequest) -> operations.NewsByPlayerResponse:
        r"""News by Player"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NewsByPlayerRequest, base_url, '/{format}/NewsByPlayerID/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NewsByPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.News]])
                res.news = out

        return res

    def player_details_by_active(self, request: operations.PlayerDetailsByActiveRequest) -> operations.PlayerDetailsByActiveResponse:
        r"""Player Details by Active"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerDetailsByActiveRequest, base_url, '/{format}/Players', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerDetailsByActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def player_details_by_free_agent(self, request: operations.PlayerDetailsByFreeAgentRequest) -> operations.PlayerDetailsByFreeAgentResponse:
        r"""Player Details by Free Agent"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerDetailsByFreeAgentRequest, base_url, '/{format}/FreeAgents', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerDetailsByFreeAgentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def player_details_by_player(self, request: operations.PlayerDetailsByPlayerRequest) -> operations.PlayerDetailsByPlayerResponse:
        r"""Player Details by Player"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerDetailsByPlayerRequest, base_url, '/{format}/Player/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerDetailsByPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Player])
                res.player = out

        return res

    def players_by_team(self, request: operations.PlayersByTeamRequest) -> operations.PlayersByTeamResponse:
        r"""Players by Team
        This endpoint provides active player details by team.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayersByTeamRequest, base_url, '/{format}/Players/{team}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayersByTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def referees(self, request: operations.RefereesRequest) -> operations.RefereesResponse:
        r"""Referees
        Returns the full list of NBA Referees.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RefereesRequest, base_url, '/{format}/Referees', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RefereesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Referee]])
                res.referees = out

        return res

    def schedules(self, request: operations.SchedulesRequest) -> operations.SchedulesResponse:
        r"""Schedules"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SchedulesRequest, base_url, '/{format}/Games/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SchedulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def stadiums(self, request: operations.StadiumsRequest) -> operations.StadiumsResponse:
        r"""Stadiums"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StadiumsRequest, base_url, '/{format}/Stadiums', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StadiumsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Stadium]])
                res.stadiums = out

        return res

    def standings(self, request: operations.StandingsRequest) -> operations.StandingsResponse:
        r"""Standings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StandingsRequest, base_url, '/{format}/Standings/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StandingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Standing]])
                res.standings = out

        return res

    def team_game_logs_by_season(self, request: operations.TeamGameLogsBySeasonRequest) -> operations.TeamGameLogsBySeasonResponse:
        r"""Team Game Logs By Season
        Game by game log of total team statistics.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamGameLogsBySeasonRequest, base_url, '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamGameLogsBySeasonResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamGame]])
                res.team_games = out

        return res

    def team_game_stats_by_date(self, request: operations.TeamGameStatsByDateRequest) -> operations.TeamGameStatsByDateResponse:
        r"""Team Game Stats by Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamGameStatsByDateRequest, base_url, '/{format}/TeamGameStatsByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamGameStatsByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamGame]])
                res.team_games = out

        return res

    def team_season_stats(self, request: operations.TeamSeasonStatsRequest) -> operations.TeamSeasonStatsResponse:
        r"""Team Season Stats"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamSeasonStatsRequest, base_url, '/{format}/TeamSeasonStats/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamSeasonStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamSeason]])
                res.team_seasons = out

        return res

    def teams_active(self, request: operations.TeamsActiveRequest) -> operations.TeamsActiveResponse:
        r"""Teams (Active)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamsActiveRequest, base_url, '/{format}/teams', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamsActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out

        return res

    def teams_all(self, request: operations.TeamsAllRequest) -> operations.TeamsAllResponse:
        r"""Teams (All)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamsAllRequest, base_url, '/{format}/AllTeams', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamsAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out

        return res

    