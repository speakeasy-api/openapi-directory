"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkSmUsersRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    emails: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'emails', 'style': 'form', 'explode': False }})
    r"""Filter users by email(s)."""  
    ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': False }})
    r"""Filter users by id(s)."""  
    scope: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scope', 'style': 'form', 'explode': False }})
    r"""Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags."""  
    usernames: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'usernames', 'style': 'form', 'explode': False }})
    r"""Filter users by username(s)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSmUsers200ApplicationJSON:
    
    ad_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adGroups'), 'exclude': lambda f: f is None }})
    r"""Active Directory Groups the user belongs to."""  
    asm_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asmGroups'), 'exclude': lambda f: f is None }})
    r"""Apple School Manager Groups the user belongs to."""  
    azure_ad_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('azureAdGroups'), 'exclude': lambda f: f is None }})
    r"""Azure Active Directory Groups the user belongs to."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The user display name."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""User email."""  
    full_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullName'), 'exclude': lambda f: f is None }})
    r"""User full name."""  
    has_identity_certificate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasIdentityCertificate'), 'exclude': lambda f: f is None }})
    r"""A boolean indicating if the user has an associated identity certificate.."""  
    has_password: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasPassword'), 'exclude': lambda f: f is None }})
    r"""A boolean denoting if the user has a password associated with the record."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The Meraki managed Id of the user record."""  
    is_external: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isExternal'), 'exclude': lambda f: f is None }})
    r"""Whether the user was created using an external integration, or via the Meraki Dashboard."""  
    saml_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('samlGroups'), 'exclude': lambda f: f is None }})
    r"""SAML Groups the user belongs to."""  
    tags: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The set of tags the user is scoped to."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""The users username."""  
    user_thumbnail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userThumbnail'), 'exclude': lambda f: f is None }})
    r"""The url where the users thumbnail is hosted."""  
    

@dataclasses.dataclass
class GetNetworkSmUsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_sm_users_200_application_json_objects: Optional[list[GetNetworkSmUsers200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    