<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class OpenAI 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Immediately cancel a fine-tune job.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelFineTuneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelFineTuneResponse
     */
	public function cancelFineTune(
        \OpenAPI\OpenAPI\Models\Operations\CancelFineTuneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelFineTuneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/fine-tunes/{fine_tune_id}/cancel', \OpenAPI\OpenAPI\Models\Operations\CancelFineTuneRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelFineTuneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fineTune = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FineTune', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Answers the specified question using the provided documents and examples.
     * 
     * The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateAnswerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAnswerResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function createAnswer(
        \OpenAPI\OpenAPI\Models\Shared\CreateAnswerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAnswerResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/answers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAnswerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createAnswerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateAnswerResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a completion for the chat message
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateChatCompletionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateChatCompletionResponse
     */
	public function createChatCompletion(
        \OpenAPI\OpenAPI\Models\Shared\CreateChatCompletionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateChatCompletionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/chat/completions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateChatCompletionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createChatCompletionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateChatCompletionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Classifies the specified `query` using provided examples.
     * 
     * The endpoint first [searches](/docs/api-reference/searches) over the labeled examples
     * to select the ones most relevant for the particular query. Then, the relevant examples
     * are combined with the query to construct a prompt to produce the final label via the
     * [completions](/docs/api-reference/completions) endpoint.
     * 
     * Labeled examples can be provided via an uploaded `file`, or explicitly listed in the
     * request using the `examples` parameter for quick tests and small scale use cases.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateClassificationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateClassificationResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function createClassification(
        \OpenAPI\OpenAPI\Models\Shared\CreateClassificationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateClassificationResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classifications');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateClassificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createClassificationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateClassificationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a completion for the provided prompt and parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateCompletionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCompletionResponse
     */
	public function createCompletion(
        \OpenAPI\OpenAPI\Models\Shared\CreateCompletionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCompletionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/completions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCompletionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCompletionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateCompletionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new edit for the provided input, instruction, and parameters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateEditRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEditResponse
     */
	public function createEdit(
        \OpenAPI\OpenAPI\Models\Shared\CreateEditRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/edits');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createEditResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateEditResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an embedding vector representing the input text.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateEmbeddingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEmbeddingResponse
     */
	public function createEmbedding(
        \OpenAPI\OpenAPI\Models\Shared\CreateEmbeddingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEmbeddingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/embeddings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEmbeddingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createEmbeddingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateEmbeddingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateFileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFileResponse
     */
	public function createFile(
        \OpenAPI\OpenAPI\Models\Shared\CreateFileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAIFile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAIFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
     * 
     * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateFineTuneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFineTuneResponse
     */
	public function createFineTune(
        \OpenAPI\OpenAPI\Models\Shared\CreateFineTuneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFineTuneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/fine-tunes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFineTuneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fineTune = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FineTune', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an image given a prompt.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateImageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateImageResponse
     */
	public function createImage(
        \OpenAPI\OpenAPI\Models\Shared\CreateImageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/images/generations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an edited or extended image given an original image and a prompt.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateImageEditRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateImageEditResponse
     */
	public function createImageEdit(
        \OpenAPI\OpenAPI\Models\Shared\CreateImageEditRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateImageEditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/images/edits');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateImageEditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a variation of a given image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateImageVariationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateImageVariationResponse
     */
	public function createImageVariation(
        \OpenAPI\OpenAPI\Models\Shared\CreateImageVariationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateImageVariationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/images/variations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateImageVariationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Classifies if text violates OpenAI's Content Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateModerationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateModerationResponse
     */
	public function createModeration(
        \OpenAPI\OpenAPI\Models\Shared\CreateModerationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateModerationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/moderations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateModerationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createModerationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateModerationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.
     * 
     * To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.
     * 
     * The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSearchResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function createSearch(
        \OpenAPI\OpenAPI\Models\Operations\CreateSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSearchResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/engines/{engine_id}/search', \OpenAPI\OpenAPI\Models\Operations\CreateSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createSearchRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createSearchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateSearchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Transcribes audio into the input language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateTranscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTranscriptionResponse
     */
	public function createTranscription(
        \OpenAPI\OpenAPI\Models\Shared\CreateTranscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTranscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/audio/transcriptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTranscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTranscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateTranscriptionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Translates audio into into English.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateTranslationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTranslationResponse
     */
	public function createTranslation(
        \OpenAPI\OpenAPI\Models\Shared\CreateTranslationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTranslationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/audio/translations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTranslationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTranslationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateTranslationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFileResponse
     */
	public function deleteFile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files/{file_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteFileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteFileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteModelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteModelResponse
     */
	public function deleteModel(
        \OpenAPI\OpenAPI\Models\Operations\DeleteModelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteModelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/models/{model}', \OpenAPI\OpenAPI\Models\Operations\DeleteModelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteModelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteModelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteModelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the contents of the specified file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DownloadFileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DownloadFileResponse
     */
	public function downloadFile(
        \OpenAPI\OpenAPI\Models\Operations\DownloadFileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DownloadFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files/{file_id}/content', \OpenAPI\OpenAPI\Models\Operations\DownloadFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DownloadFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->downloadFile200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEnginesResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function listEngines(
    ): \OpenAPI\OpenAPI\Models\Operations\ListEnginesResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/engines');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEnginesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEnginesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEnginesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of files that belong to the user's organization.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFilesResponse
     */
	public function listFiles(
    ): \OpenAPI\OpenAPI\Models\Operations\ListFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get fine-grained status updates for a fine-tune job.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFineTuneEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFineTuneEventsResponse
     */
	public function listFineTuneEvents(
        \OpenAPI\OpenAPI\Models\Operations\ListFineTuneEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFineTuneEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/fine-tunes/{fine_tune_id}/events', \OpenAPI\OpenAPI\Models\Operations\ListFineTuneEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFineTuneEventsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFineTuneEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFineTuneEventsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFineTuneEventsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List your organization's fine-tuning jobs
     * 
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFineTunesResponse
     */
	public function listFineTunes(
    ): \OpenAPI\OpenAPI\Models\Operations\ListFineTunesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/fine-tunes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFineTunesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFineTunesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFineTunesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the currently available models, and provides basic information about each one such as the owner and availability.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListModelsResponse
     */
	public function listModels(
    ): \OpenAPI\OpenAPI\Models\Operations\ListModelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/models');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListModelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a model instance, providing basic information about it such as the owner and availability.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveEngineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveEngineResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function retrieveEngine(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveEngineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveEngineResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/engines/{engine_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveEngineRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveEngineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->engine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Engine', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about a specific file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveFileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveFileResponse
     */
	public function retrieveFile(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveFileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files/{file_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveFileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->openAIFile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OpenAIFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets info about the fine-tune job.
     * 
     * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveFineTuneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveFineTuneResponse
     */
	public function retrieveFineTune(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveFineTuneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveFineTuneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/fine-tunes/{fine_tune_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveFineTuneRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveFineTuneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fineTune = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FineTune', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveModelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveModelResponse
     */
	public function retrieveModel(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveModelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveModelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/models/{model}', \OpenAPI\OpenAPI\Models\Operations\RetrieveModelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveModelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->model = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Model', 'json');
            }
        }

        return $response;
    }
}