"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VideosThumbnails:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_video_thumbnail(self, request: operations.CreateVideoThumbnailRequest, security: operations.CreateVideoThumbnailSecurity) -> operations.CreateVideoThumbnailResponse:
        r"""Add a video thumbnail"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateVideoThumbnailRequest, base_url, '/videos/{video_id}/pictures', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateVideoThumbnailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out

        return res

    def create_video_thumbnail_alt1(self, request: operations.CreateVideoThumbnailAlt1Request, security: operations.CreateVideoThumbnailAlt1Security) -> operations.CreateVideoThumbnailAlt1Response:
        r"""Add a video thumbnail"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateVideoThumbnailAlt1Request, base_url, '/channels/{channel_id}/videos/{video_id}/pictures', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateVideoThumbnailAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out

        return res

    def delete_video_thumbnail(self, request: operations.DeleteVideoThumbnailRequest, security: operations.DeleteVideoThumbnailSecurity) -> operations.DeleteVideoThumbnailResponse:
        r"""Delete a video thumbnail"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVideoThumbnailRequest, base_url, '/videos/{video_id}/pictures/{picture_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVideoThumbnailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def edit_video_thumbnail(self, request: operations.EditVideoThumbnailRequest, security: operations.EditVideoThumbnailSecurity) -> operations.EditVideoThumbnailResponse:
        r"""Edit a video thumbnail"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditVideoThumbnailRequest, base_url, '/videos/{video_id}/pictures/{picture_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditVideoThumbnailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out

        return res

    def get_video_thumbnail(self, request: operations.GetVideoThumbnailRequest) -> operations.GetVideoThumbnailResponse:
        r"""Get a video thumbnail"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVideoThumbnailRequest, base_url, '/videos/{video_id}/pictures/{picture_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVideoThumbnailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Picture])
                res.picture = out

        return res

    def get_video_thumbnails(self, request: operations.GetVideoThumbnailsRequest) -> operations.GetVideoThumbnailsResponse:
        r"""Get all the thumbnails of a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVideoThumbnailsRequest, base_url, '/videos/{video_id}/pictures', request)
        
        query_params = utils.get_query_params(operations.GetVideoThumbnailsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVideoThumbnailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Picture]])
                res.pictures = out

        return res

    def get_video_thumbnails_alt1(self, request: operations.GetVideoThumbnailsAlt1Request) -> operations.GetVideoThumbnailsAlt1Response:
        r"""Get all the thumbnails of a video"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVideoThumbnailsAlt1Request, base_url, '/channels/{channel_id}/videos/{video_id}/pictures', request)
        
        query_params = utils.get_query_params(operations.GetVideoThumbnailsAlt1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVideoThumbnailsAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.picture+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Picture]])
                res.pictures = out

        return res

    