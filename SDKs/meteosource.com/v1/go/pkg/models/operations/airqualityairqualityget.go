// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type AirQualityAirQualityGetSecurity struct {
	APIKeyHeader shared.SchemeAPIKeyHeader `security:"scheme,type=apiKey,subtype=header"`
}

type AirQualityAirQualityGetQueryParams struct {
	// Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
	Lat *string `queryParam:"style=form,explode=true,name=lat"`
	// Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
	Lon *string `queryParam:"style=form,explode=true,name=lon"`
	// Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
	PlaceID *string `queryParam:"style=form,explode=true,name=place_id"`
	// Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used.
	// The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used.
	// Alternatively you may use the value ``auto`` in which case the local timezone of the location is used.
	// The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
	//
	Timezone *string `queryParam:"style=form,explode=true,name=timezone"`
}

type AirQualityAirQualityGetRequest struct {
	QueryParams AirQualityAirQualityGetQueryParams
	Security    AirQualityAirQualityGetSecurity
}

type AirQualityAirQualityGetResponse struct {
	// Successful Response
	AirQualityPointData *shared.AirQualityPointData
	ContentType         string
	// Error in passed parameter.
	GeneralRequestError *shared.GeneralRequestError
	// Validation Error
	HTTPValidationError *shared.HTTPValidationError
	StatusCode          int
	RawResponse         *http.Response
}
