<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PriceTables 
{
	
	public const GETRULESFORAPRICETABLE_SERVERS = [
		'https://api.vtex.com/{account}/pricing',
	];
	
	public const LISTPRICETABLES_SERVERS = [
		'https://api.vtex.com/{account}/pricing',
	];
	
	public const GETALLPRICETABLESANDRULES_SERVERS = [
		'https://api.vtex.com/{account}/pricing',
	];

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get rules for a price table
     * 
     * This method will retrieve the rules from a specific Price Table.
     * 
     * ## Response body example
     * 
     * ```json
     * {
     *     "tradePolicyId": "b2c",
     *     "rules": [{
     *         "id": 0,
     *         "context": {
     *             "categories": {},
     *             "brands": {
     *                 "2000009": "Whiskas"
     *             },
     *             "stockStatuses": null,
     *             "internalCategories": null,
     *             "markupRange": null,
     *             "dateRange": null
     *         },
     *         "percentualModifier": 15
     *     }]
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetrulesforapricetableRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\GetrulesforapricetableResponse
     */
	public function getrulesforapricetable(
        \OpenAPI\OpenAPI\Models\Operations\GetrulesforapricetableRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\GetrulesforapricetableResponse
    {
        $baseUrl = PriceTables::GETRULESFORAPRICETABLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/pipeline/catalog/{priceTableId}', \OpenAPI\OpenAPI\Models\Operations\GetrulesforapricetableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetrulesforapricetableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getrulesforapricetable200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getrulesforapricetable200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List price tables
     * 
     * This method will list all price tables.
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     "1",
     *     "2",
     *     "3",
     *     "b2c",
     *     "b2b",
     *     "gold"
     * ]
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListpricetablesRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListpricetablesResponse
     */
	public function listpricetables(
        \OpenAPI\OpenAPI\Models\Operations\ListpricetablesRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListpricetablesResponse
    {
        $baseUrl = PriceTables::LISTPRICETABLES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/tables');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListpricetablesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listpricetables200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all price tables and their rules
     * 
     * This method will retrieve all price tables and their rules.
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     {
     *         "tradePolicyId": "2",
     *         "rules": [
     *             {
     *                 "id": 0,
     *                 "context": {
     *                     "categories": {},
     *                     "brands": {},
     *                     "stockStatuses": null,
     *                     "internalCategories": null,
     *                     "markupRange": null,
     *                     "dateRange": null
     *                 },
     *                 "percentualModifier": 20
     *             }
     *         ]
     *     },
     *     {
     *         "tradePolicyId": "b2c",
     *         "rules": [
     *             {
     *                 "id": 0,
     *                 "context": {
     *                     "categories": {},
     *                     "brands": {
     *                         "2000009": "Whiskas"
     *                     },
     *                     "stockStatuses": null,
     *                     "internalCategories": null,
     *                     "markupRange": null,
     *                     "dateRange": null
     *                 },
     *                 "percentualModifier": 15
     *             }
     *         ]
     *     }
     * ]
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetallpricetablesandrulesRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\GetallpricetablesandrulesResponse
     */
	public function getallpricetablesandrules(
        \OpenAPI\OpenAPI\Models\Operations\GetallpricetablesandrulesRequest $request,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\GetallpricetablesandrulesResponse
    {
        $baseUrl = PriceTables::GETALLPRICETABLESANDRULES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/pipeline/catalog');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetallpricetablesandrulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getallpricetablesandrules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\Getallpricetablesandrules200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update rules for a price table
     * 
     * This method will update the rules from a specific Price Table. It will delete all the rules from the requested Price Table and create new rules based on the content of the request.
     * 
     * ## Request body example
     * 
     * ```json
     * {
     *     "rules": [
     *           {
     *                "id": 1,
     *                "context": {
     *                     "categories": {
     *                          "Category ID": "1",
     *                          "Category Name": "Alimentação"
     *                     },
     *                     "brands": {
     *                          "Brand ID": "2000002",
     *                          "Brand Name": "Whiskas"
     *                     },
     *                     "markupRange": {
     *                          "from": 0,
     *                          "to": 200
     *                     },
     *                     "dateRange": {
     *                          "from": "2022-01-23T19:00:00.000Z",
     *                          "to": "2023-10-26T00:00:00.000Z"
     *                     }
     *                },
     *                "percentualModifier": 0
     *           }
     *     ]
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutPricingPipelineCatalogPriceTableIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutPricingPipelineCatalogPriceTableIdResponse
     */
	public function putPricingPipelineCatalogPriceTableId(
        \OpenAPI\OpenAPI\Models\Operations\PutPricingPipelineCatalogPriceTableIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutPricingPipelineCatalogPriceTableIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/pipeline/catalog/{priceTableId}', \OpenAPI\OpenAPI\Models\Operations\PutPricingPipelineCatalogPriceTableIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutPricingPipelineCatalogPriceTableIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }

        return $response;
    }
}