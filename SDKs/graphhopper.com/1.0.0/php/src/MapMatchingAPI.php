<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MapMatchingAPI 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Map-match a GPX file
     * 
     * ### Example
     * You get an example response for a GPX via:
     * 
     * ```
     * curl -XPOST -H "Content-Type: application/gpx+xml" "https://graphhopper.com/api/1/match?vehicle=car&key=[YOUR_KEY]" --data @/path/to/some.gpx
     * ```
     * 
     * A minimal working GPX file looks like
     * ```gpx
     * <gpx>
     *  <trk>
     *   <trkseg>
     *    <trkpt lat="51.343657" lon="12.360708"></trkpt>
     *    <trkpt lat="51.343796" lon="12.361337"></trkpt>
     *    <trkpt lat="51.342784" lon="12.361882"></trkpt>
     *   </trkseg>
     *  </trk>
     * </gpx>
     * ```
     * 
     * ### Introduction
     * ![Map Matching screenshot](./img/map-matching-example.gif)
     * 
     * The Map Matching API is part of the GraphHopper Directions API and with this API you can snap measured GPS points typically as GPX files to a digital
     * road network to e.g. clean data or attach certain data like elevation or turn instructions to it. Read more at Wikipedia.
     * 
     * In the example screenshot above and demo you see the Map Matching API in action where the black line is the GPS track and the green one is matched result.
     * 
     * Most of the times, you can simply POST a GPX file, but some of the request parameters of the [Routing API](#tag/Routing-API) apply here, too.
     * 
     * ### API Clients and Examples
     * See the [clients](#section/API-Clients) section in the main documentation, and [live examples](https://graphhopper.com/api/1/examples/#map-matching).
     * 
     * ### Limits and Counts
     * The cost for one request depends on the number of GPS location and is documented [here](https://graphhopper.com/api/1/docs/FAQ/).
     * 
     * One request should not exceed the Map Matching API location limit depending on the package, see the pricing in our dashboard.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostGPXRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGPXResponse
     */
	public function postGPX(
        \OpenAPI\OpenAPI\Models\Operations\PostGPXRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGPXResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/match');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostGPXRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGPXResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->routeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RouteResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ghError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GHError', 'json');
            }
        }

        return $response;
    }
}