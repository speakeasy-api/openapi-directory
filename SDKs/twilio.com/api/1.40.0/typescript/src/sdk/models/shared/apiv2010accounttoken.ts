/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class ApiV2010AccountTokenIceServers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "credential" })
  credential?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "urls" })
  urls?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;
}

/**
 * Created
 */
export class ApiV2010AccountToken extends SpeakeasyBase {
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Token resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_sid" })
  accountSid?: string;

  /**
   * The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_created" })
  dateCreated?: string;

  /**
   * The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_updated" })
  dateUpdated?: string;

  /**
   * An array representing the ephemeral credentials and the STUN and TURN server URIs.
   */
  @SpeakeasyMetadata({ elemType: ApiV2010AccountTokenIceServers })
  @Expose({ name: "ice_servers" })
  @Type(() => ApiV2010AccountTokenIceServers)
  iceServers?: ApiV2010AccountTokenIceServers[];

  /**
   * The temporary password that the username will use when authenticating with Twilio.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  /**
   * The duration in seconds for which the username and password are valid.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ttl" })
  ttl?: string;

  /**
   * The temporary username that uniquely identifies a Token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;
}
