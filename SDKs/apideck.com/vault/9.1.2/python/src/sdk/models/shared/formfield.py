"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class FormFieldTypeEnum(str, Enum):
    TEXT = 'text'
    CHECKBOX = 'checkbox'
    TEL = 'tel'
    EMAIL = 'email'
    URL = 'url'
    TEXTAREA = 'textarea'
    SELECT = 'select'
    FILTERED_SELECT = 'filtered-select'
    MULTI_SELECT = 'multi-select'
    DATETIME = 'datetime'
    DATE = 'date'
    TIME = 'time'
    NUMBER = 'number'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FormField:
    
    allow_custom_values: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_custom_values'), 'exclude': lambda f: f is None }})
    r"""Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list."""  
    custom_field: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_field'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the form field"""  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled'), 'exclude': lambda f: f is None }})
    r"""Indicates if the form field is displayed in a “read-only” mode."""  
    hidden: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hidden'), 'exclude': lambda f: f is None }})
    r"""Indicates if the form field is not displayed but the value that is being stored on the connection."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the form field."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""The label of the field"""  
    options: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})  
    placeholder: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placeholder'), 'exclude': lambda f: f is None }})
    r"""The placeholder for the form field"""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Indicates if the form field is required, which means it must be filled in before the form can be submitted"""  
    sensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sensitive'), 'exclude': lambda f: f is None }})
    r"""Indicates if the form field contains sensitive data, which will display the value as a masked input."""  
    type: Optional[FormFieldTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    