"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import deviceselectionconfiguration as shared_deviceselectionconfiguration
from ..shared import executionconfiguration as shared_executionconfiguration
from ..shared import schedulerunconfiguration as shared_schedulerunconfiguration
from ..shared import scheduleruntest as shared_scheduleruntest
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleRunRequest:
    r"""Represents a request to the schedule run operation."""
    
    project_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectArn') }})  
    test: shared_scheduleruntest.ScheduleRunTest = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test') }})  
    app_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appArn'), 'exclude': lambda f: f is None }})  
    configuration: Optional[shared_schedulerunconfiguration.ScheduleRunConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configuration'), 'exclude': lambda f: f is None }})  
    device_pool_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePoolArn'), 'exclude': lambda f: f is None }})  
    device_selection_configuration: Optional[shared_deviceselectionconfiguration.DeviceSelectionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceSelectionConfiguration'), 'exclude': lambda f: f is None }})  
    execution_configuration: Optional[shared_executionconfiguration.ExecutionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionConfiguration'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    