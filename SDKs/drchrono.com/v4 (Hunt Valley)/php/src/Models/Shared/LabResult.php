<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * LabResult - Created
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class LabResult
{
    /**
     * 
     * Value | Notes
     * ----- | -----
     * `'L'` | `'low'`
     * `'LL'` | `'alert low'`
     * `'H'` | `'high'`
     * `'HH'` | `'alert high'`
     * `'<'` | `'panic low'`
     * `'>'` | `'panic high'`
     * `'A'` | `'abnormal'`
     * `'AA'` | `'very abnormal'`
     * `'S'` | `'susceptible'`
     * `'R'` | `'resistant'`
     * `'I'` | `'intermediate'`
     * `'NEG'` | `'negative'`
     * `'POS'` | `'positive'`
     * `'N'` | `'normal'`
     * `''` | `'no comment'`
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\LabResultAbnormalStatusEnum $abnormalStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('abnormal_status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\LabResultAbnormalStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?LabResultAbnormalStatusEnum $abnormalStatus = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('comments')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $comments = null;
    
    /**
     * ID of `/lab_documents` object for the result
     * 
     * @var int $document
     */
	#[\JMS\Serializer\Annotation\SerializedName('document')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $document;
    
    /**
     * This is the code used for grouping result data.
     * 
     * @var ?string $groupCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('group_code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $groupCode = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $id = null;
    
    /**
     * If true, the result will be flagged for the doctor's attention
     * 
     * @var ?string $isAbnormal
     */
	#[\JMS\Serializer\Annotation\SerializedName('is_abnormal')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $isAbnormal = null;
    
    /**
     * ID of `/lab_orders` object the result belongs to
     * 
     * @var ?string $labOrder
     */
	#[\JMS\Serializer\Annotation\SerializedName('lab_order')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $labOrder = null;
    
    /**
     * ID of `/lab_tests` object for the result
     * 
     * @var int $labTest
     */
	#[\JMS\Serializer\Annotation\SerializedName('lab_test')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $labTest;
    
    /**
     * When ``value_is_numeric`` is True, this parameter must be a string of the form ``"<lower> <upper>", where both lower and upper are numerical``
     * 
     * @var ?string $normalRange
     */
	#[\JMS\Serializer\Annotation\SerializedName('normal_range')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $normalRange = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('observation_code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $observationCode = null;
    
    /**
     * For example, ``"Blood Urea Nitrogen (BUN)"``
     * 
     * @var ?string $observationDescription
     */
	#[\JMS\Serializer\Annotation\SerializedName('observation_description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $observationDescription = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('specimen_received')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $specimenReceived = null;
    
    /**
     * 
     * Value | Notes
     * ----- | -----
     * `'P'` | `'preliminary'`
     * `'I'` | `'pending'`
     * `'C'` | `'correction'`
     * `'F'` | `'final'`
     * `'X'` | `'canceled'`
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\LabResultStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\LabResultStatusEnum>')]
    public LabResultStatusEnum $status;
    
	#[\JMS\Serializer\Annotation\SerializedName('test_performed')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $testPerformed;
    
    /**
     * Unit used for the value
     * 
     * @var ?string $unit
     */
	#[\JMS\Serializer\Annotation\SerializedName('unit')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $unit = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('value')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $value;
    
    /**
     * Default to `False`
     * 
     * @var ?bool $valueIsNumeric
     */
	#[\JMS\Serializer\Annotation\SerializedName('value_is_numeric')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $valueIsNumeric = null;
    
	public function __construct()
	{
		$this->abnormalStatus = null;
		$this->comments = null;
		$this->document = 0;
		$this->groupCode = null;
		$this->id = null;
		$this->isAbnormal = null;
		$this->labOrder = null;
		$this->labTest = 0;
		$this->normalRange = null;
		$this->observationCode = null;
		$this->observationDescription = null;
		$this->specimenReceived = null;
		$this->status = \OpenAPI\OpenAPI\Models\Shared\LabResultStatusEnum::P;
		$this->testPerformed = "";
		$this->unit = null;
		$this->value = "";
		$this->valueIsNumeric = null;
	}
}
