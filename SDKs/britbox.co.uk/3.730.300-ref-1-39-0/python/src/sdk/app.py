"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class App:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_app_config(self, request: operations.GetAppConfigRequest) -> operations.GetAppConfigResponse:
        r"""Get the global configuration for an application. Should be called during app statup.
        
        This includes things like device and playback rules, classifications,
        sitemap and subscriptions.
        
        You have the option to select specific configuration objects using the 'include'
        parameter, or if unspecified, getting all configuration.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/config'
        
        query_params = utils.get_query_params(operations.GetAppConfigRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAppConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AppConfig])
                res.app_config = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_itv_page(self, request: operations.GetItvPageRequest) -> operations.GetItvPageResponse:
        r"""Returns a page with the specified id.
        
        This is a cut down version for low memory devices.123
        
        If targeting the search page you must url encode the search term as a parameter
        using the `q` key. For example if your browser path looks like `/search?q=the`
        then what you pass to this endpoint would look like `/itv/page?path=/search%3Fq%3Dthe`.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/page'
        
        query_params = utils.get_query_params(operations.GetItvPageRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItvPageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out
        elif http_res.status_code == 301:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_page(self, request: operations.GetPageRequest) -> operations.GetPageResponse:
        r"""Returns a page with the specified id.
        
        If targeting the search page you must url encode the search term as a parameter
        using the `q` key. For example if your browser path looks like `/search?q=the`
        then what you pass to this endpoint would look like `/page?path=/search%3Fq%3Dthe`.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/page'
        
        query_params = utils.get_query_params(operations.GetPageRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Page])
                res.page = out
        elif http_res.status_code == 301:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    