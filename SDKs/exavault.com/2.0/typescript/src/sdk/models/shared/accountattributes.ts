/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BrandingSettings } from "./brandingsettings";
import { PlanDetails } from "./plandetails";
import { Quota } from "./quota";
import { Expose, Transform, Type } from "class-transformer";

export class AccountAttributesAllowedIp extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ipEnd" })
  ipEnd?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ipStart" })
  ipStart?: string;
}

/**
 * Branding flag. Set to `true` if the account has branding functionality enabled.
 */
export enum AccountAttributesBrandingEnum {
  True = "true",
  False = "false",
}

/**
 * Custom domain flag. Set to `true` if account type allows custom domain functionality.
 */
export enum AccountAttributesCustomDomainEnum {
  True = "true",
  False = "false",
}

/**
 * Account status flag. A one (1) means the account is active; zero (0) means it is suspended.
 */
export enum AccountAttributesStatusEnum {
  One = "1",
  Zero = "0",
}

export class AccountAttributes extends SpeakeasyBase {
  /**
   * Name of the account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountName" })
  accountName?: string;

  /**
   * Whether the web application onboarding help is enabled for new users in the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountOnboarding" })
  accountOnboarding?: boolean;

  /**
   * Range of IP addresses allowed to access this account.
   */
  @SpeakeasyMetadata({ elemType: AccountAttributesAllowedIp })
  @Expose({ name: "allowedIp" })
  @Type(() => AccountAttributesAllowedIp)
  allowedIp?: AccountAttributesAllowedIp[];

  /**
   * Branding flag. Set to `true` if the account has branding functionality enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "branding" })
  branding?: AccountAttributesBrandingEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "brandingSettings" })
  @Type(() => BrandingSettings)
  brandingSettings?: BrandingSettings;

  /**
   * (ExaVault Use Only) Internal ID of the account in CMS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: number;

  /**
   * Flag to indicate whether the account requires complex passwords. Set to `true` to require complex passwords on all users and shares.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "complexPasswords" })
  complexPasswords?: boolean;

  /**
   * Timestamp of account creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  /**
   * Custom domain flag. Set to `true` if account type allows custom domain functionality.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customDomain" })
  customDomain?: AccountAttributesCustomDomainEnum;

  /**
   * Custom signature for all account emails users or recipients will receive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customSignature" })
  customSignature?: string;

  /**
   * Custom domain used to brand this account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externalDomains" })
  externalDomains?: string[];

  /**
   * Maximum number of users the account can have. This can be increased by contacting ExaVault Support.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxUsers" })
  maxUsers?: number;

  /**
   * Timestamp of account modification.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  modified?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "planDetails" })
  @Type(() => PlanDetails)
  planDetails?: PlanDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "quota" })
  @Type(() => Quota)
  quota?: Quota;

  /**
   * Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to `true` to disable all traffic over port 21.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secureOnly" })
  secureOnly?: boolean;

  /**
   * Flag to indicate showing of referrals links in the account. Set to `true` to include marketing messages in share invitations.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "showReferralLinks" })
  showReferralLinks?: boolean;

  /**
   * Account status flag. A one (1) means the account is active; zero (0) means it is suspended.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: AccountAttributesStatusEnum;

  /**
   * Current number of users on the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userCount" })
  userCount?: number;

  /**
   * Content of welcome email each new user will receive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "welcomeEmailContent" })
  welcomeEmailContent?: string;

  /**
   * Subject of welcome email each new user will receive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "welcomeEmailSubject" })
  welcomeEmailSubject?: string;
}
