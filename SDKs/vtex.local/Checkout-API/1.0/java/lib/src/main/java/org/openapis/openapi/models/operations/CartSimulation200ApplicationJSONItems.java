/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CartSimulation200ApplicationJSONItems {
    /**
     * Availability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availability")
    public String availability;

    public CartSimulation200ApplicationJSONItems withAvailability(String availability) {
        this.availability = availability;
        return this;
    }
    
    /**
     * ID of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public CartSimulation200ApplicationJSONItems withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * List price in cents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listPrice")
    public Long listPrice;

    public CartSimulation200ApplicationJSONItems withListPrice(Long listPrice) {
        this.listPrice = listPrice;
        return this;
    }
    
    /**
     * Measurement unit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("measurementUnit")
    public String measurementUnit;

    public CartSimulation200ApplicationJSONItems withMeasurementUnit(String measurementUnit) {
        this.measurementUnit = measurementUnit;
        return this;
    }
    
    /**
     * Array containing offering information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offerings")
    public Object[] offerings;

    public CartSimulation200ApplicationJSONItems withOfferings(Object[] offerings) {
        this.offerings = offerings;
        return this;
    }
    
    /**
     * Parent assembly binding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentAssemblyBinding")
    public String parentAssemblyBinding;

    public CartSimulation200ApplicationJSONItems withParentAssemblyBinding(String parentAssemblyBinding) {
        this.parentAssemblyBinding = parentAssemblyBinding;
        return this;
    }
    
    /**
     * Parent item index.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentItemIndex")
    public Long parentItemIndex;

    public CartSimulation200ApplicationJSONItems withParentItemIndex(Long parentItemIndex) {
        this.parentItemIndex = parentItemIndex;
        return this;
    }
    
    /**
     * Price in cents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public Long price;

    public CartSimulation200ApplicationJSONItems withPrice(Long price) {
        this.price = price;
        return this;
    }
    
    /**
     * Price information for all units of a specific item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceDefinition")
    public CartSimulation200ApplicationJSONItemsPriceDefinition priceDefinition;

    public CartSimulation200ApplicationJSONItems withPriceDefinition(CartSimulation200ApplicationJSONItemsPriceDefinition priceDefinition) {
        this.priceDefinition = priceDefinition;
        return this;
    }
    
    /**
     * Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceTags")
    public CartSimulation200ApplicationJSONItemsPriceTags[] priceTags;

    public CartSimulation200ApplicationJSONItems withPriceTags(CartSimulation200ApplicationJSONItemsPriceTags[] priceTags) {
        this.priceTags = priceTags;
        return this;
    }
    
    /**
     * Price expiration date and time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceValidUntil")
    public String priceValidUntil;

    public CartSimulation200ApplicationJSONItems withPriceValidUntil(String priceValidUntil) {
        this.priceValidUntil = priceValidUntil;
        return this;
    }
    
    /**
     * The quantity of the item the cart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    public Long quantity;

    public CartSimulation200ApplicationJSONItems withQuantity(Long quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * Request index information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestIndex")
    public Long requestIndex;

    public CartSimulation200ApplicationJSONItems withRequestIndex(Long requestIndex) {
        this.requestIndex = requestIndex;
        return this;
    }
    
    /**
     * Reward value in cents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rewardValue")
    public Long rewardValue;

    public CartSimulation200ApplicationJSONItems withRewardValue(Long rewardValue) {
        this.rewardValue = rewardValue;
        return this;
    }
    
    /**
     * The seller responsible for the SKU.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seller")
    public String seller;

    public CartSimulation200ApplicationJSONItems withSeller(String seller) {
        this.seller = seller;
        return this;
    }
    
    /**
     * Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellerChain")
    public String[] sellerChain;

    public CartSimulation200ApplicationJSONItems withSellerChain(String[] sellerChain) {
        this.sellerChain = sellerChain;
        return this;
    }
    
    /**
     * Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellingPrice")
    public Long sellingPrice;

    public CartSimulation200ApplicationJSONItems withSellingPrice(Long sellingPrice) {
        this.sellingPrice = sellingPrice;
        return this;
    }
    
    /**
     * Tax value in cents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax")
    public Long tax;

    public CartSimulation200ApplicationJSONItems withTax(Long tax) {
        this.tax = tax;
        return this;
    }
    
    /**
     * Unit multiplier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitMultiplier")
    public Long unitMultiplier;

    public CartSimulation200ApplicationJSONItems withUnitMultiplier(Long unitMultiplier) {
        this.unitMultiplier = unitMultiplier;
        return this;
    }
    
    public CartSimulation200ApplicationJSONItems(){}
}
