/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RRSetRoutingPolicyPrimaryBackupPolicy - Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
 */
public class RRSetRoutingPolicyPrimaryBackupPolicy {
    /**
     * Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backupGeoTargets")
    public RRSetRoutingPolicyGeoPolicy backupGeoTargets;

    public RRSetRoutingPolicyPrimaryBackupPolicy withBackupGeoTargets(RRSetRoutingPolicyGeoPolicy backupGeoTargets) {
        this.backupGeoTargets = backupGeoTargets;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public RRSetRoutingPolicyPrimaryBackupPolicy withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryTargets")
    public RRSetRoutingPolicyHealthCheckTargets primaryTargets;

    public RRSetRoutingPolicyPrimaryBackupPolicy withPrimaryTargets(RRSetRoutingPolicyHealthCheckTargets primaryTargets) {
        this.primaryTargets = primaryTargets;
        return this;
    }
    
    /**
     * When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trickleTraffic")
    public Double trickleTraffic;

    public RRSetRoutingPolicyPrimaryBackupPolicy withTrickleTraffic(Double trickleTraffic) {
        this.trickleTraffic = trickleTraffic;
        return this;
    }
    
    public RRSetRoutingPolicyPrimaryBackupPolicy(){}
}
