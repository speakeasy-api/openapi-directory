"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import formresponse as shared_formresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFormByIDUpdateFormByIDRequestBodyElementsSettings:
    
    is_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isRequired'), 'exclude': lambda f: f is None }})
    r"""True is the form element is required for submission."""  
    sender_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senderEmail'), 'exclude': lambda f: f is None }})  
    use_as_folder_name: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useAsFolderName'), 'exclude': lambda f: f is None }})
    r"""True if the submitted response should be used as the name for the new folder."""  
    
class UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum(str, Enum):
    r"""Type of form field to use."""
    NAME = 'name'
    EMAIL = 'email'
    TEXT = 'text'
    TEXTAREA = 'textarea'
    UPLOAD_AREA = 'upload_area'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFormByIDUpdateFormByIDRequestBodyElements:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the form element. If you're adding a new element to the form, do not include this field."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the form element."""  
    order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order'), 'exclude': lambda f: f is None }})
    r"""The order the fields will be displayed to the recipient. Starts at 0."""  
    settings: Optional[UpdateFormByIDUpdateFormByIDRequestBodyElementsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})  
    type: Optional[UpdateFormByIDUpdateFormByIDRequestBodyElementsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of form field to use."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFormByIDUpdateFormByIDRequestBody:
    r"""CSS Styles of the form."""
    
    css_styles: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cssStyles'), 'exclude': lambda f: f is None }})  
    elements: Optional[list[UpdateFormByIDUpdateFormByIDRequestBodyElements]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elements'), 'exclude': lambda f: f is None }})  
    form_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formDescription'), 'exclude': lambda f: f is None }})
    r"""Set a description for the form that will be visible to recipients."""  
    submit_button_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submitButtonText'), 'exclude': lambda f: f is None }})
    r"""Text to be displayed on the submission button."""  
    success_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('successMessage'), 'exclude': lambda f: f is None }})
    r"""Text to be displayed when a recipient has submitted the form."""  
    

@dataclasses.dataclass
class UpdateFormByIDRequest:
    
    ev_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-access-token', 'style': 'simple', 'explode': False }})
    r"""Access token required to make the API call."""  
    ev_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-api-key', 'style': 'simple', 'explode': False }})
    r"""API Key required to make the API call."""  
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Form unique ID number."""  
    request_body: Optional[UpdateFormByIDUpdateFormByIDRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateFormByIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    form_response: Optional[shared_formresponse.FormResponse] = dataclasses.field(default=None)
    r"""Successful Operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    