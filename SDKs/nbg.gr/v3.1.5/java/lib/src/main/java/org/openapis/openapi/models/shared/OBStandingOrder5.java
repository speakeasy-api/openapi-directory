/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class OBStandingOrder5 {
    /**
     * A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
     */
    @JsonProperty("AccountId")
    public String accountId;

    public OBStandingOrder5 withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditorAccount")
    public OBCashAccount5 creditorAccount;

    public OBStandingOrder5 withCreditorAccount(OBCashAccount5 creditorAccount) {
        this.creditorAccount = creditorAccount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FinalPaymentAmount")
    public OBActiveOrHistoricCurrencyAndAmount finalPaymentAmount;

    public OBStandingOrder5 withFinalPaymentAmount(OBActiveOrHistoricCurrencyAndAmount finalPaymentAmount) {
        this.finalPaymentAmount = finalPaymentAmount;
        return this;
    }
    
    /**
     * The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone.An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("FinalPaymentDateTime")
    public OffsetDateTime finalPaymentDateTime;

    public OBStandingOrder5 withFinalPaymentDateTime(OffsetDateTime finalPaymentDateTime) {
        this.finalPaymentDateTime = finalPaymentDateTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FirstPaymentAmount")
    public OBActiveOrHistoricCurrencyAndAmount firstPaymentAmount;

    public OBStandingOrder5 withFirstPaymentAmount(OBActiveOrHistoricCurrencyAndAmount firstPaymentAmount) {
        this.firstPaymentAmount = firstPaymentAmount;
        return this;
    }
    
    /**
     * The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone.An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("FirstPaymentDateTime")
    public OffsetDateTime firstPaymentDateTime;

    public OBStandingOrder5 withFirstPaymentDateTime(OffsetDateTime firstPaymentDateTime) {
        this.firstPaymentDateTime = firstPaymentDateTime;
        return this;
    }
    
    /**
     * Individual Definitions:
     * IntrvlMnthDay - An interval specified in months(between 01, 02, 03, 04, 06, 12, 24), specifying the day within the month(01 to 31)
     * Full Regular Expression:
     * ^(IntrvlMnthDay:(0[1,2,3,4,6]|12|24):(0[1-9]|[12] [0-9]|3[01]))$
     */
    @JsonProperty("Frequency")
    public String frequency;

    public OBStandingOrder5 withFrequency(String frequency) {
        this.frequency = frequency;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LastPaymentAmount")
    public OBActiveOrHistoricCurrencyAndAmount lastPaymentAmount;

    public OBStandingOrder5 withLastPaymentAmount(OBActiveOrHistoricCurrencyAndAmount lastPaymentAmount) {
        this.lastPaymentAmount = lastPaymentAmount;
        return this;
    }
    
    /**
     * The date on which the last (most recent) payment for a Standing Order schedule was made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone.An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LastPaymentDateTime")
    public OffsetDateTime lastPaymentDateTime;

    public OBStandingOrder5 withLastPaymentDateTime(OffsetDateTime lastPaymentDateTime) {
        this.lastPaymentDateTime = lastPaymentDateTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NextPaymentAmount")
    public OBActiveOrHistoricCurrencyAndAmount nextPaymentAmount;

    public OBStandingOrder5 withNextPaymentAmount(OBActiveOrHistoricCurrencyAndAmount nextPaymentAmount) {
        this.nextPaymentAmount = nextPaymentAmount;
        return this;
    }
    
    /**
     * The date on which the next payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
     * All date-time fields in responses must include the timezone.An example is below:
     * 2017-04-05T10:43:07+00:00
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("NextPaymentDateTime")
    public OffsetDateTime nextPaymentDateTime;

    public OBStandingOrder5 withNextPaymentDateTime(OffsetDateTime nextPaymentDateTime) {
        this.nextPaymentDateTime = nextPaymentDateTime;
        return this;
    }
    
    /**
     * Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
     * Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
     * If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Reference")
    public String reference;

    public OBStandingOrder5 withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * A unique and immutable identifier used to identify the standing order resource. This identifier has no meaning to the account owner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StandingOrderId")
    public String standingOrderId;

    public OBStandingOrder5 withStandingOrderId(String standingOrderId) {
        this.standingOrderId = standingOrderId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StandingOrderStatusCode")
    public OBExternalStandingOrderStatus1CodeEnum standingOrderStatusCode;

    public OBStandingOrder5 withStandingOrderStatusCode(OBExternalStandingOrderStatus1CodeEnum standingOrderStatusCode) {
        this.standingOrderStatusCode = standingOrderStatusCode;
        return this;
    }
    
    public OBStandingOrder5(@JsonProperty("AccountId") String accountId, @JsonProperty("Frequency") String frequency) {
        this.accountId = accountId;
        this.frequency = frequency;
  }
}
