// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type KkidChorelistPutSecurity struct {
	AuthKey string `security:"scheme,type=apiKey,subtype=header,name=X-Auth"`
}

// KkidChorelistPutWhereDayEnum - Where day equals...
type KkidChorelistPutWhereDayEnum string

const (
	KkidChorelistPutWhereDayEnumSunday    KkidChorelistPutWhereDayEnum = "Sunday"
	KkidChorelistPutWhereDayEnumMonday    KkidChorelistPutWhereDayEnum = "Monday"
	KkidChorelistPutWhereDayEnumTuesday   KkidChorelistPutWhereDayEnum = "Tuesday"
	KkidChorelistPutWhereDayEnumWednesday KkidChorelistPutWhereDayEnum = "Wednesday"
	KkidChorelistPutWhereDayEnumThursday  KkidChorelistPutWhereDayEnum = "Thursday"
	KkidChorelistPutWhereDayEnumFriday    KkidChorelistPutWhereDayEnum = "Friday"
	KkidChorelistPutWhereDayEnumSaturday  KkidChorelistPutWhereDayEnum = "Saturday"
	KkidChorelistPutWhereDayEnumWeekly    KkidChorelistPutWhereDayEnum = "Weekly"
	KkidChorelistPutWhereDayEnumToday     KkidChorelistPutWhereDayEnum = "Today"
)

func (e *KkidChorelistPutWhereDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Sunday":
		fallthrough
	case "Monday":
		fallthrough
	case "Tuesday":
		fallthrough
	case "Wednesday":
		fallthrough
	case "Thursday":
		fallthrough
	case "Friday":
		fallthrough
	case "Saturday":
		fallthrough
	case "Weekly":
		fallthrough
	case "Today":
		*e = KkidChorelistPutWhereDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for KkidChorelistPutWhereDayEnum: %s", s)
	}
}

type KkidChorelistPutRequest struct {
	// GPS altitude of where the chore was marked
	Altitude *int64 `queryParam:"style=form,explode=true,name=altitude"`
	// id number of chore you wish to update
	IDChoreList int64 `queryParam:"style=form,explode=true,name=idChoreList"`
	// GPS latitude of where the chore was marked
	Latitude *int64 `queryParam:"style=form,explode=true,name=latitude"`
	// GPS longitude of where the chore was marked
	Longitude *int64 `queryParam:"style=form,explode=true,name=longitude"`
	// text field of NFC tag that is required to be scanned to check off this chore (normally null)
	NfcTag *string `queryParam:"style=form,explode=true,name=nfcTag"`
	// notes field for chore
	Notes *string `queryParam:"style=form,explode=true,name=notes"`
	// new status of chore
	Status *string `queryParam:"style=form,explode=true,name=status"`
	// mark chore as stolen by sibling
	Stolen *bool `queryParam:"style=form,explode=true,name=stolen"`
	// username of sibling that stole the chore (required if stolen is true)
	StolenBy *string `queryParam:"style=form,explode=true,name=stolenBy"`
	// true if updated via API by automation system
	UpdatedByAutomation *bool `queryParam:"style=form,explode=true,name=updatedByAutomation"`
	// Where day equals...
	WhereDay *KkidChorelistPutWhereDayEnum `queryParam:"style=form,explode=true,name=whereDay"`
	// Where chore name equals...
	WhereName *string `queryParam:"style=form,explode=true,name=whereName"`
	// Where status equals...
	WhereStatus *string `queryParam:"style=form,explode=true,name=whereStatus"`
}

type KkidChorelistPutResponse struct {
	// Method Not Allowed- API user does not have access to use this method
	FourHundredAndFive *shared.FourHundredAndFive
	// API Access Denied! Your API key is invalid, expired, or not supplied!
	FourHundredAndTwelve *shared.FourHundredAndTwelve
	ContentType          string
	StatusCode           int
	RawResponse          *http.Response
	// No Data Found.
	Nodata *shared.Nodata
	// search results matching criteria
	Success *shared.Success
}
