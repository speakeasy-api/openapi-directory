"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleMapsPlayablelocationsV3ImpressionImpressionTypeEnum(str, Enum):
    r"""Required. The type of impression event."""
    IMPRESSION_TYPE_UNSPECIFIED = 'IMPRESSION_TYPE_UNSPECIFIED'
    PRESENTED = 'PRESENTED'
    INTERACTED = 'INTERACTED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleMapsPlayablelocationsV3Impression:
    r"""Encapsulates impression event details."""
    
    game_object_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gameObjectType'), 'exclude': lambda f: f is None }})
    r"""An arbitrary, developer-defined type identifier for each type of game object used in your game. Since players interact with differ types of game objects in different ways, this field allows you to segregate impression data by type for analysis. You should assign a unique `game_object_type` ID to represent a distinct type of game object in your game. For example, 1=monster location, 2=powerup location."""  
    impression_type: Optional[GoogleMapsPlayablelocationsV3ImpressionImpressionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('impressionType'), 'exclude': lambda f: f is None }})
    r"""Required. The type of impression event."""  
    location_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationName'), 'exclude': lambda f: f is None }})
    r"""Required. The name of the playable location."""  
    