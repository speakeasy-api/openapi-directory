/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Describes a DNS entry.
 */
export class DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsDnsEntries extends SpeakeasyBase {
  @SpeakeasyMetadata()
  dnsName?: string;

  @SpeakeasyMetadata()
  hostedZoneId?: string;
}

/**
 * The IP address type for the endpoint.
 */
export enum DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIpAddressTypeEnum {
  Ipv4 = "ipv4",
  Dualstack = "dualstack",
  Ipv6 = "ipv6",
}

/**
 * Describes a tag.
 */
export class DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The state of the VPC endpoint.
 */
export enum DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum {
  PendingAcceptance = "PendingAcceptance",
  Pending = "Pending",
  Available = "Available",
  Deleting = "Deleting",
  Deleted = "Deleted",
  Rejected = "Rejected",
  Failed = "Failed",
  Expired = "Expired",
}

/**
 * Describes a VPC endpoint connection to a service.
 */
export class DescribeVpcEndpointConnectionsResultVpcEndpointConnections extends SpeakeasyBase {
  @SpeakeasyMetadata()
  creationTimestamp?: Date;

  @SpeakeasyMetadata({
    elemType:
      DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsDnsEntries,
  })
  dnsEntries?: DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsDnsEntries[];

  @SpeakeasyMetadata()
  gatewayLoadBalancerArns?: string[];

  @SpeakeasyMetadata()
  ipAddressType?: DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIpAddressTypeEnum;

  @SpeakeasyMetadata()
  networkLoadBalancerArns?: string[];

  @SpeakeasyMetadata()
  serviceId?: string;

  @SpeakeasyMetadata({
    elemType: DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsTags,
  })
  tags?: DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsTags[];

  @SpeakeasyMetadata()
  vpcEndpointConnectionId?: string;

  @SpeakeasyMetadata()
  vpcEndpointId?: string;

  @SpeakeasyMetadata()
  vpcEndpointOwner?: string;

  @SpeakeasyMetadata()
  vpcEndpointState?: DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum;
}

/**
 * Success
 */
export class DescribeVpcEndpointConnectionsResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  nextToken?: string;

  @SpeakeasyMetadata({
    elemType: DescribeVpcEndpointConnectionsResultVpcEndpointConnections,
  })
  vpcEndpointConnections?: DescribeVpcEndpointConnectionsResultVpcEndpointConnections[];
}
