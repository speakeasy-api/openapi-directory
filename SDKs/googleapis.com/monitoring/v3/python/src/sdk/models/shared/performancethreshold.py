"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import basicsli as shared_basicsli
from ..shared import requestbasedsli as shared_requestbasedsli
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PerformanceThreshold:
    r"""A PerformanceThreshold is used when each window is good when that window has a sufficiently high performance."""
    
    basic_sli_performance: Optional[shared_basicsli.BasicSli] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicSliPerformance'), 'exclude': lambda f: f is None }})
    r"""An SLI measuring performance on a well-known service type. Performance will be computed on the basis of pre-defined metrics. The type of the service_resource determines the metrics to use and the service_resource.labels and metric_labels are used to construct a monitoring filter to filter that metric down to just the data relevant to this service."""  
    performance: Optional[shared_requestbasedsli.RequestBasedSli] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performance'), 'exclude': lambda f: f is None }})
    r"""Service Level Indicators for which atomic units of service are counted directly."""  
    threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threshold'), 'exclude': lambda f: f is None }})
    r"""If window performance >= threshold, the window is counted as good."""  
    