"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Kvpairs:
    r"""The `kvpairs` resource provides a service for storing generic JSON key/value pairs on the Brain.
    Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.
    
    See also the `blobs` resource.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_kv_pairs(self, request: shared.KeyValuePairInput) -> operations.AddKvPairsResponse:
        r"""Create key-value pair"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kvpairs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddKvPairsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def delete_kv_pair(self, request: operations.DeleteKvPairRequest) -> operations.DeleteKvPairResponse:
        r"""Delete key-value pair"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteKvPairRequest, base_url, '/kvpairs/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteKvPairResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    def get_kv_pairs(self, request: operations.GetKvPairsRequest) -> operations.GetKvPairsResponse:
        r"""Get all key-value pairs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kvpairs'
        
        query_params = utils.get_query_params(operations.GetKvPairsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetKvPairsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetKvPairs200ApplicationJSON])
                res.get_kv_pairs_200_application_json_object = out

        return res

    def get_kv_pairs_by_id(self, request: operations.GetKvPairsByIDRequest) -> operations.GetKvPairsByIDResponse:
        r"""Get key-value pair"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetKvPairsByIDRequest, base_url, '/kvpairs/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetKvPairsByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.KeyValuePair])
                res.key_value_pair = out

        return res

    def update_kv_pair(self, request: operations.UpdateKvPairRequest) -> operations.UpdateKvPairResponse:
        r"""Update existing Key-value pair"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateKvPairRequest, base_url, '/kvpairs/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "key_value_pair_update", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateKvPairResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseDefaultResource])
                res.response_default_resource = out

        return res

    