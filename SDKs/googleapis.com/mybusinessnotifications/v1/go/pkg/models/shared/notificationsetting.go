// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NotificationSettingNotificationTypesEnum string

const (
	NotificationSettingNotificationTypesEnumNotificationTypeUnspecified NotificationSettingNotificationTypesEnum = "NOTIFICATION_TYPE_UNSPECIFIED"
	NotificationSettingNotificationTypesEnumGoogleUpdate                NotificationSettingNotificationTypesEnum = "GOOGLE_UPDATE"
	NotificationSettingNotificationTypesEnumNewReview                   NotificationSettingNotificationTypesEnum = "NEW_REVIEW"
	NotificationSettingNotificationTypesEnumUpdatedReview               NotificationSettingNotificationTypesEnum = "UPDATED_REVIEW"
	NotificationSettingNotificationTypesEnumNewCustomerMedia            NotificationSettingNotificationTypesEnum = "NEW_CUSTOMER_MEDIA"
	NotificationSettingNotificationTypesEnumNewQuestion                 NotificationSettingNotificationTypesEnum = "NEW_QUESTION"
	NotificationSettingNotificationTypesEnumUpdatedQuestion             NotificationSettingNotificationTypesEnum = "UPDATED_QUESTION"
	NotificationSettingNotificationTypesEnumNewAnswer                   NotificationSettingNotificationTypesEnum = "NEW_ANSWER"
	NotificationSettingNotificationTypesEnumUpdatedAnswer               NotificationSettingNotificationTypesEnum = "UPDATED_ANSWER"
	NotificationSettingNotificationTypesEnumDuplicateLocation           NotificationSettingNotificationTypesEnum = "DUPLICATE_LOCATION"
	NotificationSettingNotificationTypesEnumLossOfVoiceOfMerchant       NotificationSettingNotificationTypesEnum = "LOSS_OF_VOICE_OF_MERCHANT"
	NotificationSettingNotificationTypesEnumVoiceOfMerchantUpdated      NotificationSettingNotificationTypesEnum = "VOICE_OF_MERCHANT_UPDATED"
)

func (e *NotificationSettingNotificationTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NOTIFICATION_TYPE_UNSPECIFIED":
		fallthrough
	case "GOOGLE_UPDATE":
		fallthrough
	case "NEW_REVIEW":
		fallthrough
	case "UPDATED_REVIEW":
		fallthrough
	case "NEW_CUSTOMER_MEDIA":
		fallthrough
	case "NEW_QUESTION":
		fallthrough
	case "UPDATED_QUESTION":
		fallthrough
	case "NEW_ANSWER":
		fallthrough
	case "UPDATED_ANSWER":
		fallthrough
	case "DUPLICATE_LOCATION":
		fallthrough
	case "LOSS_OF_VOICE_OF_MERCHANT":
		fallthrough
	case "VOICE_OF_MERCHANT_UPDATED":
		*e = NotificationSettingNotificationTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationSettingNotificationTypesEnum: %s", s)
	}
}

// NotificationSetting - A Google Pub/Sub topic where notifications can be published when a location is updated or has a new review. There will be only one notification setting resource per-account.
type NotificationSetting struct {
	// Required. The resource name this setting is for. This is of the form `accounts/{account_id}/notificationSetting`.
	Name *string `json:"name,omitempty"`
	// The types of notifications that will be sent to the Pub/Sub topic. To stop receiving notifications entirely, use NotificationSettings.UpdateNotificationSetting with an empty notification_types or set the pubsub_topic to an empty string.
	NotificationTypes []NotificationSettingNotificationTypesEnum `json:"notificationTypes,omitempty"`
	// Optional. The Google Pub/Sub topic that will receive notifications when locations managed by this account are updated. If unset, no notifications will be posted. The account mybusiness-api-pubsub@system.gserviceaccount.com must have at least Publish permissions on the Pub/Sub topic.
	PubsubTopic *string `json:"pubsubTopic,omitempty"`
}
