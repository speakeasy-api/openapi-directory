"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicDelegatedPrefix = exports.PublicDelegatedPrefixStatusEnum = void 0;
var utils_1 = require("../../../internal/utils");
var publicdelegatedprefixpublicdelegatedsubprefix_1 = require("./publicdelegatedprefixpublicdelegatedsubprefix");
var class_transformer_1 = require("class-transformer");
/**
 * [Output Only] The status of the public delegated prefix, which can be one of following values: - `INITIALIZING` The public delegated prefix is being initialized and addresses cannot be created yet. - `READY_TO_ANNOUNCE` The public delegated prefix is a live migration prefix and is active. - `ANNOUNCED` The public delegated prefix is active. - `DELETING` The public delegated prefix is being deprovsioned.
 */
var PublicDelegatedPrefixStatusEnum;
(function (PublicDelegatedPrefixStatusEnum) {
    PublicDelegatedPrefixStatusEnum["Announced"] = "ANNOUNCED";
    PublicDelegatedPrefixStatusEnum["AnnouncedToGoogle"] = "ANNOUNCED_TO_GOOGLE";
    PublicDelegatedPrefixStatusEnum["AnnouncedToInternet"] = "ANNOUNCED_TO_INTERNET";
    PublicDelegatedPrefixStatusEnum["Deleting"] = "DELETING";
    PublicDelegatedPrefixStatusEnum["Initializing"] = "INITIALIZING";
    PublicDelegatedPrefixStatusEnum["ReadyToAnnounce"] = "READY_TO_ANNOUNCE";
})(PublicDelegatedPrefixStatusEnum = exports.PublicDelegatedPrefixStatusEnum || (exports.PublicDelegatedPrefixStatusEnum = {}));
/**
 * A PublicDelegatedPrefix resource represents an IP block within a PublicAdvertisedPrefix that is configured within a single cloud scope (global or region). IPs in the block can be allocated to resources within that scope. Public delegated prefixes may be further broken up into smaller IP blocks in the same scope as the parent block.
 */
var PublicDelegatedPrefix = /** @class */ (function (_super) {
    __extends(PublicDelegatedPrefix, _super);
    function PublicDelegatedPrefix() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fingerprint" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "fingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipCidrRange" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "ipCidrRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "isLiveMigration" }),
        __metadata("design:type", Boolean)
    ], PublicDelegatedPrefix.prototype, "isLiveMigration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "parentPrefix" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "parentPrefix", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: publicdelegatedprefixpublicdelegatedsubprefix_1.PublicDelegatedPrefixPublicDelegatedSubPrefix,
        }),
        (0, class_transformer_1.Expose)({ name: "publicDelegatedSubPrefixs" }),
        (0, class_transformer_1.Type)(function () { return publicdelegatedprefixpublicdelegatedsubprefix_1.PublicDelegatedPrefixPublicDelegatedSubPrefix; }),
        __metadata("design:type", Array)
    ], PublicDelegatedPrefix.prototype, "publicDelegatedSubPrefixs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLinkWithId" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "selfLinkWithId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], PublicDelegatedPrefix.prototype, "status", void 0);
    return PublicDelegatedPrefix;
}(utils_1.SpeakeasyBase));
exports.PublicDelegatedPrefix = PublicDelegatedPrefix;
