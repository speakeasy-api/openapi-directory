/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BookedRoom } from "./bookedroom";
import { CancellationFee } from "./cancellationfee";
import { HotelStub } from "./hotelstub";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Returned in case the booking (or parts of it) has been cancelled. Contains information on the cancellation.
 */
export class BookingCancellation extends SpeakeasyBase {
  /**
   * Describes the costs associated with a cancellation and how it is calculated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fee" })
  @Type(() => CancellationFee)
  fee: CancellationFee;
}

/**
 * Information on a person and their contact details.
 */
export class BookingPerson extends SpeakeasyBase {
  /**
   * Unique identifier of this guest within the Impala platform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contactId" })
  contactId: string;

  /**
   * Email address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  /**
   * First name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firstName" })
  firstName: string;

  /**
   * Family name or surname.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastName" })
  lastName: string;
}

/**
 * The notes that were transmitted to the hotel as part of this booking.
 *
 * @remarks
 *
 * These fields allow for **Markdown formatting** that's displayed to hotels in its rendered format in most circumstances but might fall back to text-only in scenarios where that's not possible.
 */
export class BookingNotes extends SpeakeasyBase {
  /**
   * Notes your guest has entered as part of the booking. These allow them to communicate anything to the hotel (e.g. that they're travelling for a special occassion or have a particular room assignment preference).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromGuest" })
  fromGuest: string;

  /**
   * Notes you as a seller want to communicated to the hotel. These might be around operational processes to watch out for. Impala communicates these as coming from you.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromSeller" })
  fromSeller: string;
}

/**
 * Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`.
 */
export enum BookingStatusEnum {
  Cancelled = "CANCELLED",
  Pending = "PENDING",
  Accepted = "ACCEPTED",
  PaymentRequired = "PAYMENT_REQUIRED",
  PaymentAbandoned = "PAYMENT_ABANDONED",
}

/**
 * Details of an existing booking.
 */
export class Booking extends SpeakeasyBase {
  /**
   * List of rooms booked
   */
  @SpeakeasyMetadata({ elemType: BookedRoom })
  @Expose({ name: "bookedRooms" })
  @Type(() => BookedRoom)
  bookedRooms: BookedRoom[];

  /**
   * Unique identifier for this booking within the Impala platform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingId" })
  bookingId: string;

  /**
   * Returned in case the booking (or parts of it) has been cancelled. Contains information on the cancellation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancellation" })
  @Type(() => BookingCancellation)
  cancellation?: BookingCancellation;

  /**
   * Guest details for this booking.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contact" })
  @Type(() => BookingPerson)
  contact: BookingPerson;

  /**
   * Date and time (in UTC and ISO 8601 format) when the booking was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The departure date of the booking.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  end: Date;

  /**
   * Essential information on a hotel returned as part of other resources, linking to the full resource within its `href` field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hotel" })
  @Type(() => HotelStub)
  hotel: HotelStub;

  /**
   * The hotel's confirmation identifier for this booking.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hotelConfirmationCode" })
  hotelConfirmationCode?: string;

  /**
   * The notes that were transmitted to the hotel as part of this booking.
   *
   * @remarks
   *
   * These fields allow for **Markdown formatting** that's displayed to hotels in its rendered format in most circumstances but might fall back to text-only in scenarios where that's not possible.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  @Type(() => BookingNotes)
  notes: BookingNotes;

  /**
   * If status is PAYMENT_REQUIRED, then this should be used as the Authorisation header for the POST to the /payments endpoint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentBearerToken" })
  paymentBearerToken?: string;

  /**
   * If status is PAYMENT_REQUIRED, then this should be used as the client secret when rendering Impala Payment Elements in the UI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentClientSecret" })
  paymentClientSecret?: string;

  /**
   * The arrival date of the booking.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  start: Date;

  /**
   * Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: BookingStatusEnum;

  /**
   * Date and time (in UTC and ISO 8601 format) when the booking was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;
}
