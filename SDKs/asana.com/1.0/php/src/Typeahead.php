<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Typeahead 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get objects via typeahead
     * 
     * Retrieves objects in the workspace based via an auto-completion/typeahead
     * search algorithm. This feature is meant to provide results quickly, so do
     * not rely on this API to provide extremely accurate search results. The
     * result set is limited to a single page of results with a maximum size, so
     * you wonâ€™t be able to fetch large numbers of results.
     * 
     * The typeahead search API provides search for objects from a single
     * workspace. This endpoint should be used to query for objects when
     * creating an auto-completion/typeahead search feature. This API is meant
     * to provide results quickly and should not be relied upon for accurate or
     * exhaustive search results. The results sets are limited in size and
     * cannot be paginated.
     * 
     * Queries return a compact representation of each object which is typically
     * the gid and name fields. Interested in a specific set of fields or all of
     * the fields?! Of course you are. Use field selectors to manipulate what
     * data is included in a response.
     * 
     * Resources with type `user` are returned in order of most contacted to
     * least contacted. This is determined by task assignments, adding the user
     * to projects, and adding the user as a follower to tasks, messages,
     * etc.
     * 
     * Resources with type `project` are returned in order of recency. This is
     * determined when the user visits the project, is added to the project, and
     * completes tasks in the project.
     * 
     * Resources with type `task` are returned with priority placed on tasks
     * the user is following, but no guarantee on the order of those tasks.
     * 
     * Resources with type `project_template` are returned with priority
     * placed on favorited project templates.
     * 
     * Leaving the `query` string empty or omitted will give you results, still
     * following the resource ordering above. This could be used to list users or
     * projects that are relevant for the requesting user's api token.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TypeaheadForWorkspaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TypeaheadForWorkspaceResponse
     */
	public function typeaheadForWorkspace(
        \OpenAPI\OpenAPI\Models\Operations\TypeaheadForWorkspaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TypeaheadForWorkspaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace_gid}/typeahead', \OpenAPI\OpenAPI\Models\Operations\TypeaheadForWorkspaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TypeaheadForWorkspaceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TypeaheadForWorkspaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->typeaheadForWorkspace200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TypeaheadForWorkspace200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}