<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Creatives 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Gets one creative by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesGetResponse
     */
	public function dfareportingCreativesGet(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/creatives/{id}', \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new creative.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesInsertResponse
     */
	public function dfareportingCreativesInsert(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/creatives', \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creative", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of creatives, possibly filtered. This method supports paging.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesListResponse
     */
	public function dfareportingCreativesList(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/creatives', \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creativesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreativesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing creative. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesPatchResponse
     */
	public function dfareportingCreativesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/creatives', \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creative", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing creative.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesUpdateResponse
     */
	public function dfareportingCreativesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/creatives', \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "creative", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingCreativesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->creative = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Creative', 'json');
            }
        }

        return $response;
    }
}