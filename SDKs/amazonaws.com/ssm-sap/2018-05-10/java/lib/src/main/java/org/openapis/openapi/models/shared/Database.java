/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Database - The SAP HANA database of the application registered with AWS Systems Manager for SAP.
 */
public class Database {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ApplicationId")
    public String applicationId;
    public Database withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Arn")
    public String arn;
    public Database withArn(String arn) {
        this.arn = arn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ComponentId")
    public String componentId;
    public Database withComponentId(String componentId) {
        this.componentId = componentId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Credentials")
    public ApplicationCredential[] credentials;
    public Database withCredentials(ApplicationCredential[] credentials) {
        this.credentials = credentials;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DatabaseId")
    public String databaseId;
    public Database withDatabaseId(String databaseId) {
        this.databaseId = databaseId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DatabaseName")
    public String databaseName;
    public Database withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DatabaseType")
    public DatabaseTypeEnum databaseType;
    public Database withDatabaseType(DatabaseTypeEnum databaseType) {
        this.databaseType = databaseType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LastUpdated")
    public OffsetDateTime lastUpdated;
    public Database withLastUpdated(OffsetDateTime lastUpdated) {
        this.lastUpdated = lastUpdated;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PrimaryHost")
    public String primaryHost;
    public Database withPrimaryHost(String primaryHost) {
        this.primaryHost = primaryHost;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SQLPort")
    public Long sqlPort;
    public Database withSQLPort(Long sqlPort) {
        this.sqlPort = sqlPort;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public DatabaseStatusEnum status;
    public Database withStatus(DatabaseStatusEnum status) {
        this.status = status;
        return this;
    }
    
}
