// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDMessagesSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDMessagesRequestBodyLevelEnum string

const (
	PostSpacesSpaceIDFoldersIDMessagesRequestBodyLevelEnumConfidential PostSpacesSpaceIDFoldersIDMessagesRequestBodyLevelEnum = "confidential"
	PostSpacesSpaceIDFoldersIDMessagesRequestBodyLevelEnumRegular      PostSpacesSpaceIDFoldersIDMessagesRequestBodyLevelEnum = "regular"
)

func (e PostSpacesSpaceIDFoldersIDMessagesRequestBodyLevelEnum) ToPointer() *PostSpacesSpaceIDFoldersIDMessagesRequestBodyLevelEnum {
	return &e
}

func (e *PostSpacesSpaceIDFoldersIDMessagesRequestBodyLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "confidential":
		fallthrough
	case "regular":
		*e = PostSpacesSpaceIDFoldersIDMessagesRequestBodyLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDMessagesRequestBodyLevelEnum: %v", v)
	}
}

type PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnum string

const (
	PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnumStd  PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnum = "std"
	PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnumMail PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnum = "mail"
	PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnumSms  PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnum = "sms"
)

func (e PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnum) ToPointer() *PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnum {
	return &e
}

func (e *PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "std":
		fallthrough
	case "mail":
		fallthrough
	case "sms":
		*e = PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnum: %v", v)
	}
}

type PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotify struct {
	How       *PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotifyHowEnum `json:"How,omitempty"`
	MemberIds []string                                                    `json:"MemberIds,omitempty"`
}

// PostSpacesSpaceIDFoldersIDMessagesRequestBody - Message to write (except Author and ModificationAuthor). Text must be Html, tags  'audio','button','input','script','select','textarea','video' are deleted
type PostSpacesSpaceIDFoldersIDMessagesRequestBody struct {
	Level       *PostSpacesSpaceIDFoldersIDMessagesRequestBodyLevelEnum `json:"Level,omitempty"`
	MessageDate *string                                                 `json:"MessageDate,omitempty"`
	Notify      *PostSpacesSpaceIDFoldersIDMessagesRequestBodyNotify    `json:"Notify,omitempty"`
	Text        string                                                  `json:"Text"`
}

type PostSpacesSpaceIDFoldersIDMessagesRequest struct {
	// Message to write (except Author and ModificationAuthor). Text must be Html, tags  'audio','button','input','script','select','textarea','video' are deleted
	RequestBody PostSpacesSpaceIDFoldersIDMessagesRequestBody `request:"mediaType=application/json"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PostSpacesSpaceIDFoldersIDMessagesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
