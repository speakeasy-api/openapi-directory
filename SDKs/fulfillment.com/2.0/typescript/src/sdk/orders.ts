/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Creating, viewing, and canceling orders.
 */
export class Orders {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Cancel an Order
   *
   * @remarks
   * Request an order is canceled to prevent shipment.
   */
  deleteOrdersId(
    req: operations.DeleteOrdersIdRequest,
    security: operations.DeleteOrdersIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOrdersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteOrdersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/orders/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteOrdersIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteOrdersIdResponse =
        new operations.DeleteOrdersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oneordersPostResponses201ContentApplication1jsonSchema =
              utils.objectToClass(
                httpRes?.data,
                shared.OneordersPostResponses201ContentApplication1jsonSchema
              );
          }
          break;
        case httpRes?.status == 404:
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oneordersGetResponses404ContentApplication1jsonSchema =
              utils.objectToClass(
                httpRes?.data,
                shared.OneordersGetResponses404ContentApplication1jsonSchema
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List of Orders
   *
   * @remarks
   * Retrieve many orders at once
   */
  getOrders(
    req: operations.GetOrdersRequest,
    security: operations.GetOrdersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrdersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrdersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/orders";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetOrdersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrdersResponse =
        new operations.GetOrdersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderResponseOneOfV2 = httpRes?.data;
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorStandardV2 = utils.objectToClass(
              httpRes?.data,
              operations.GetOrdersErrorStandardV2
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Order Details
   *
   * @remarks
   * For the fastest results use the FDC provided `id` however you can use your `merchantOrderId` as the `id`.
   */
  getOrder(
    req: operations.GetOrderRequest,
    security: operations.GetOrderSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrderResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrderRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/orders/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetOrderSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrderResponse = new operations.GetOrderResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oneordersGetResponses200ContentApplication1jsonSchema =
              httpRes?.data;
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * New Order
   *
   * @remarks
   * Error Notes&#58;
   * * When `409 Conflict` is a 'Duplicate Order' the `context` will include the FDC `id`, see samples.
   *
   */
  postOrders(
    req: operations.PostOrdersOrderRequestV2,
    security: operations.PostOrdersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostOrdersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostOrdersOrderRequestV2(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/orders";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostOrdersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostOrdersResponse =
        new operations.PostOrdersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.orderResponseV2 = utils.objectToClass(
              httpRes?.data,
              operations.PostOrdersOrderResponseV2
            );
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oneordersGetResponses404ContentApplication1jsonSchema =
              utils.objectToClass(
                httpRes?.data,
                shared.OneordersGetResponses404ContentApplication1jsonSchema
              );
          }
          break;
        case httpRes?.status == 401:
          break;
        case [409, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorStandardWithContextV2 = utils.objectToClass(
              httpRes?.data,
              operations.PostOrdersErrorStandardWithContextV2
            );
          }
          break;
      }

      return res;
    });
  }
}
