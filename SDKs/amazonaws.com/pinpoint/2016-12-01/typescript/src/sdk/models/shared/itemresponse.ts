/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { EndpointItemResponse } from "./endpointitemresponse";
import { EventItemResponse } from "./eventitemresponse";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Provides information about the results of a request to create or update an endpoint that's associated with an event.
 */
export class ItemResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "EndpointItemResponse" })
  @Type(() => EndpointItemResponse)
  endpointItemResponse?: EndpointItemResponse;

  @SpeakeasyMetadata({ elemType: EventItemResponse })
  @Expose({ name: "EventsItemResponse" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, EventItemResponse> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], EventItemResponse);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  eventsItemResponse?: Record<string, EventItemResponse>;
}
