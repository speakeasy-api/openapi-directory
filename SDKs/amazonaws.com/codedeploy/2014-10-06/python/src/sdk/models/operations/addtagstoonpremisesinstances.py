"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import addtagstoonpremisesinstancesinput as shared_addtagstoonpremisesinstancesinput
from enum import Enum
from typing import Any, Optional

class AddTagsToOnPremisesInstancesXAmzTargetEnum(str, Enum):
    CODE_DEPLOY_20141006_ADD_TAGS_TO_ON_PREMISES_INSTANCES = 'CodeDeploy_20141006.AddTagsToOnPremisesInstances'


@dataclasses.dataclass
class AddTagsToOnPremisesInstancesRequest:
    
    add_tags_to_on_premises_instances_input: shared_addtagstoonpremisesinstancesinput.AddTagsToOnPremisesInstancesInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: AddTagsToOnPremisesInstancesXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class AddTagsToOnPremisesInstancesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    instance_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InstanceLimitExceededException"""  
    instance_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InstanceNameRequiredException"""  
    instance_not_registered_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InstanceNotRegisteredException"""  
    invalid_instance_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInstanceNameException"""  
    invalid_tag_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTagException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    tag_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TagLimitExceededException"""  
    tag_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TagRequiredException"""  
    