// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MessageEnumStatusEnum string

const (
	MessageEnumStatusEnumQueued             MessageEnumStatusEnum = "queued"
	MessageEnumStatusEnumSending            MessageEnumStatusEnum = "sending"
	MessageEnumStatusEnumSent               MessageEnumStatusEnum = "sent"
	MessageEnumStatusEnumFailed             MessageEnumStatusEnum = "failed"
	MessageEnumStatusEnumDelivered          MessageEnumStatusEnum = "delivered"
	MessageEnumStatusEnumUndelivered        MessageEnumStatusEnum = "undelivered"
	MessageEnumStatusEnumReceiving          MessageEnumStatusEnum = "receiving"
	MessageEnumStatusEnumReceived           MessageEnumStatusEnum = "received"
	MessageEnumStatusEnumAccepted           MessageEnumStatusEnum = "accepted"
	MessageEnumStatusEnumScheduled          MessageEnumStatusEnum = "scheduled"
	MessageEnumStatusEnumRead               MessageEnumStatusEnum = "read"
	MessageEnumStatusEnumPartiallyDelivered MessageEnumStatusEnum = "partially_delivered"
	MessageEnumStatusEnumCanceled           MessageEnumStatusEnum = "canceled"
)

func (e *MessageEnumStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "queued":
		fallthrough
	case "sending":
		fallthrough
	case "sent":
		fallthrough
	case "failed":
		fallthrough
	case "delivered":
		fallthrough
	case "undelivered":
		fallthrough
	case "receiving":
		fallthrough
	case "received":
		fallthrough
	case "accepted":
		fallthrough
	case "scheduled":
		fallthrough
	case "read":
		fallthrough
	case "partially_delivered":
		fallthrough
	case "canceled":
		*e = MessageEnumStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageEnumStatusEnum: %s", s)
	}
}
