// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// LookupEventsXAmzTargetEnum
type LookupEventsXAmzTargetEnum string

const (
	LookupEventsXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101LookupEvents LookupEventsXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.LookupEvents"
)

func (e LookupEventsXAmzTargetEnum) ToPointer() *LookupEventsXAmzTargetEnum {
	return &e
}

func (e *LookupEventsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.LookupEvents":
		*e = LookupEventsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LookupEventsXAmzTargetEnum: %v", v)
	}
}

type LookupEventsRequest struct {
	LookupEventsRequest shared.LookupEventsRequest `request:"mediaType=application/json"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken         *string                    `queryParam:"style=form,explode=true,name=NextToken"`
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        LookupEventsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type LookupEventsResponse struct {
	ContentType string
	// InvalidEventCategoryException
	InvalidEventCategoryException interface{}
	// InvalidLookupAttributesException
	InvalidLookupAttributesException interface{}
	// InvalidMaxResultsException
	InvalidMaxResultsException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// InvalidTimeRangeException
	InvalidTimeRangeException interface{}
	// Success
	LookupEventsResponse *shared.LookupEventsResponse
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
