/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * RequiredWorkflow - Response
 */
public class RequiredWorkflow {
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public RequiredWorkflow withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Unique identifier for a required workflow
     */
    @JsonProperty("id")
    public Double id;
    public RequiredWorkflow withId(Double id) {
        this.id = id;
        return this;
    }
    
    /**
     * Name present in the workflow file
     */
    @JsonProperty("name")
    public String name;
    public RequiredWorkflow withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Path of the workflow file
     */
    @JsonProperty("path")
    public String path;
    public RequiredWorkflow withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Ref at which the workflow file will be selected
     */
    @JsonProperty("ref")
    public String ref;
    public RequiredWorkflow withRef(String ref) {
        this.ref = ref;
        return this;
    }
    
    /**
     * Minimal Repository
     */
    @JsonProperty("repository")
    public MinimalRepository repository;
    public RequiredWorkflow withRepository(MinimalRepository repository) {
        this.repository = repository;
        return this;
    }
    
    /**
     * Scope of the required workflow
     */
    @JsonProperty("scope")
    public RequiredWorkflowScopeEnum scope;
    public RequiredWorkflow withScope(RequiredWorkflowScopeEnum scope) {
        this.scope = scope;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selected_repositories_url")
    public String selectedRepositoriesUrl;
    public RequiredWorkflow withSelectedRepositoriesUrl(String selectedRepositoriesUrl) {
        this.selectedRepositoriesUrl = selectedRepositoriesUrl;
        return this;
    }
    
    /**
     * State of the required workflow
     */
    @JsonProperty("state")
    public RequiredWorkflowStateEnum state;
    public RequiredWorkflow withState(RequiredWorkflowStateEnum state) {
        this.state = state;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public RequiredWorkflow withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
