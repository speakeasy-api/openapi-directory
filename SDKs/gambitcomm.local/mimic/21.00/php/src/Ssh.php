<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Ssh 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Show the agent's SSH argument structure
     * 
     * Agent's SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetArgsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetArgsResponse
     */
	public function protocolSshGetArgs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetArgsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetArgsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/ssh/get/args', \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetArgsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetArgsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSshGetArgs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's SSH configuration
     * 
     * Agent's SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetConfigResponse
     */
	public function protocolSshGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/ssh/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configSSH = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigSSH', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's SSH statistics
     * 
     * Statistics of fields indicated in the headers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetStatisticsResponse
     */
	public function protocolSshGetStatistics(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/ssh/get/statistics', \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSshGetStatistics200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the SSH statistics headers
     * 
     * The headers of statistics fields
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetStatsHdrResponse
     */
	public function protocolSshGetStatsHdr(
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetStatsHdrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/protocol/msg/ssh/get/stats_hdr');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetStatsHdrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSshGetStatsHdr200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's SSH traffic tracing
     * 
     * Trace 1 means enabled, 0 means not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetTraceResponse
     */
	public function protocolSshGetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/ssh/get/trace', \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSshGetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configSSH = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigSSH', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Disable individual IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasDisableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasDisableResponse
     */
	public function protocolSshIpaliasDisable(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasDisableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasDisableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/disable/{ipaddress}/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasDisableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasDisableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSshIpaliasDisable200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Enable individual IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasEnableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasEnableResponse
     */
	public function protocolSshIpaliasEnable(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasEnableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/enable/{ipaddress}/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasEnableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSshIpaliasEnable200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Check individual IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasIsenabledRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasIsenabledResponse
     */
	public function protocolSshIpaliasIsenabled(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasIsenabledRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasIsenabledResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/isenabled/{ipaddress}/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasIsenabledRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasIsenabledResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSshIpaliasIsenabled200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List all IP aliases on the agent and the simulator host
     * 
     * By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasListResponse
     */
	public function protocolSshIpaliasList(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/list', \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSshIpaliasListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ipAliases = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IPAlias>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's SSH configuration
     * 
     * Agent's SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetConfigResponse
     */
	public function protocolSshSetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/ssh/set/config/{argument}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSshSetConfig200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's SSH traffic tracing
     * 
     * 1 to enable, 0 to disable
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetTraceResponse
     */
	public function protocolSshSetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/ssh/set/trace/{enableOrNot}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSshSetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSshSetTrace200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}