/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";
export const RecordConversationServerList = [
  /**
   * Override base path for the PUT /conversations/{conversation_id}/record operation
   */
  "https://api.nexmo.com/v1",
] as const;

/**
 * Record Conversation Request Payload Object
 */
export class RecordConversationRequestBody extends SpeakeasyBase {
  /**
   * Recording Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action: shared.ActionEnum;

  /**
   * The HTTP method used to send event information to event_url.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event_method" })
  eventMethod?: string;

  /**
   * The webhook endpoint where recording progress events are sent to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event_url" })
  eventUrl?: string[];

  /**
   * Record the Conversation in a specific format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format?: shared.FormatEnum;

  /**
   * Record the sent and received audio in separate channels of a stereo recording
   */
  @SpeakeasyMetadata()
  @Expose({ name: "split" })
  split?: string;
}

export class RecordConversationRequest extends SpeakeasyBase {
  /**
   * Record Conversation Request Payload Object
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: RecordConversationRequestBody;

  /**
   * Conversation ID
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=conversation_id",
  })
  conversationId: string;
}

export class RecordConversationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
