"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ProjectsVideos:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_video_to_project(self, request: operations.AddVideoToProjectRequest, security: operations.AddVideoToProjectSecurity) -> operations.AddVideoToProjectResponse:
        r"""Add a specific video to a project
        This method adds a single video to the specified project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoToProjectRequest, base_url, '/users/{user_id}/projects/{project_id}/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoToProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def add_video_to_project_alt1(self, request: operations.AddVideoToProjectAlt1Request, security: operations.AddVideoToProjectAlt1Security) -> operations.AddVideoToProjectAlt1Response:
        r"""Add a specific video to a project
        This method adds a single video to the specified project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoToProjectAlt1Request, base_url, '/me/projects/{project_id}/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoToProjectAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def add_videos_to_project(self, request: operations.AddVideosToProjectRequest, security: operations.AddVideosToProjectSecurity) -> operations.AddVideosToProjectResponse:
        r"""Add a list of videos to a project
        This method adds multiple videos to the specified project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideosToProjectRequest, base_url, '/users/{user_id}/projects/{project_id}/videos', request)
        
        query_params = utils.get_query_params(operations.AddVideosToProjectRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideosToProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def add_videos_to_project_alt1(self, request: operations.AddVideosToProjectAlt1Request, security: operations.AddVideosToProjectAlt1Security) -> operations.AddVideosToProjectAlt1Response:
        r"""Add a list of videos to a project
        This method adds multiple videos to the specified project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideosToProjectAlt1Request, base_url, '/me/projects/{project_id}/videos', request)
        
        query_params = utils.get_query_params(operations.AddVideosToProjectAlt1Request, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideosToProjectAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_project_videos(self, request: operations.GetProjectVideosRequest, security: operations.GetProjectVideosSecurity) -> operations.GetProjectVideosResponse:
        r"""Get all the videos in a project
        This method gets all the videos that belong to the specified project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectVideosRequest, base_url, '/users/{user_id}/projects/{project_id}/videos', request)
        
        query_params = utils.get_query_params(operations.GetProjectVideosRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectVideosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_project_videos_alt1(self, request: operations.GetProjectVideosAlt1Request, security: operations.GetProjectVideosAlt1Security) -> operations.GetProjectVideosAlt1Response:
        r"""Get all the videos in a project
        This method gets all the videos that belong to the specified project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectVideosAlt1Request, base_url, '/me/projects/{project_id}/videos', request)
        
        query_params = utils.get_query_params(operations.GetProjectVideosAlt1Request, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectVideosAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def remove_video_from_project(self, request: operations.RemoveVideoFromProjectRequest, security: operations.RemoveVideoFromProjectSecurity) -> operations.RemoveVideoFromProjectResponse:
        r"""Remove a specific video from a project
        This method removes a single video from the specified project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveVideoFromProjectRequest, base_url, '/users/{user_id}/projects/{project_id}/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveVideoFromProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def remove_video_from_project_alt1(self, request: operations.RemoveVideoFromProjectAlt1Request, security: operations.RemoveVideoFromProjectAlt1Security) -> operations.RemoveVideoFromProjectAlt1Response:
        r"""Remove a specific video from a project
        This method removes a single video from the specified project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveVideoFromProjectAlt1Request, base_url, '/me/projects/{project_id}/videos/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveVideoFromProjectAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def remove_videos_from_project(self, request: operations.RemoveVideosFromProjectRequest, security: operations.RemoveVideosFromProjectSecurity) -> operations.RemoveVideosFromProjectResponse:
        r"""Remove a list of videos from a project
        This method removed multiple videos from the specified project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveVideosFromProjectRequest, base_url, '/users/{user_id}/projects/{project_id}/videos', request)
        
        query_params = utils.get_query_params(operations.RemoveVideosFromProjectRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveVideosFromProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def remove_videos_from_project_alt1(self, request: operations.RemoveVideosFromProjectAlt1Request, security: operations.RemoveVideosFromProjectAlt1Security) -> operations.RemoveVideosFromProjectAlt1Response:
        r"""Remove a list of videos from a project
        This method removed multiple videos from the specified project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveVideosFromProjectAlt1Request, base_url, '/me/projects/{project_id}/videos', request)
        
        query_params = utils.get_query_params(operations.RemoveVideosFromProjectAlt1Request, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveVideosFromProjectAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    