<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - # Overview
 * 
 * 
 * The ContentGroove Developer API enables you to add the power of ContentGroove's video AI to your own applications and workflows.
 * 
 * Webhooks are a way for ContentGroove to send video information
 * to your application, to update your system and/or trigger other business processes.
 * 
 * You can use Webhooks and the Developer API separately or together.
 * 
 * # Getting Started with Webhooks
 * 
 * - Sign up for an account at [app.contentgroove.com](https://app.contentgroove.com)
 * - Read "Using Webhooks" on the [API Reference page](https://developers.contentgroove.com/api_reference)
 * - Visit the [Webhooks page](https://app.contentgroove.com/webhook_subscriptions) and create a new webhook
 * 
 * # Using Webhooks
 * 
 * Webhooks, also known as callbacks, are a way for ContentGroove to notify your application as soon as possible after an event has occurred in ContentGroove.
 * For example after a media completes processing, ContentGroove can use a webhook to notify your application with information about the video: Suggested clips, transcription, and so on.
 * You can use the information sent to update your system and/or use the
 * webhook to trigger other business processes.
 * 
 * The webhook request is sent as an HTTP POST containing a payload of JSON-formatted data.
 * For the details of the payload format see the "CALLBACKS" sections below.
 * 
 * When your application receives the webhook request, it must respond with
 * a 200 HTTP status code (success).
 * If a 200 HTTP status code is not returned,
 * ContentGroove will assume that the webhook was not delivered and
 * will retry a limited number of times, using an exponential backoff algorithm.
 * 
 * ContentGroove makes a best effort to attempt to send the webhook at
 * least once.
 * Applications receiving webhooks must tolerate the
 * possibility of a single webhook payload being sent more than once
 * (idempotent behavior).
 * Applications receiving webhooks should tolerate the possibility that
 * a webhook could not be delivered
 * (for example your application was down when delivery was attempted).
 * 
 * # Getting Started with the Developer API
 * 
 * - Sign up for an account at [app.contentgroove.com](https://app.contentgroove.com)
 * - Visit the [API Keys page](https://app.contentgroove.com/api_keys)
 *   - Create a new API Key then copy and save the value.
 *     > ⚠️ **IMPORTANT**: This API Key is intended only for use on the server side. Be sure never to use a server-side API Key in client-side (web, mobile, or otherwise) code. ⚠️
 * - View all available endpoints, and try the API, on our [API Reference page](https://developers.contentgroove.com/api_reference)
 * 
 * # Using the Developer API
 * 
 * - Create a new media (video or audio) in ContentGroove
 *   - If the video or audio is available from a URL, you can create a media by providing the `source_url` parameter. ContentGroove will fetch the video or audio from the URL if possible.
 *   - Or, you can create a media from a video or audio file which you upload directly to ContentGroove (see File Uploading section below).
 * - After the new media is created, at first it will be in a "processing" state.
 *   Depending on the size and duration of the video or audio file, it will take some time for processing to complete.
 *   - You can use ContentGroove Webhooks to be notified immediately when processing has completed. (Details coming soon.)
 *   - You can also use the API to read the state of the media, to determine if the media has completed processing yet.
 * - After the media has completed processing, you can access all of these details about the media:
 *   - The media name and description
 *   - The transcription of spoken words
 *   - Topics and keywords which were discussed in the transcription
 *   - Suggested video clips are automatically created
 * - In addition to the automatically created video clips, you can create more video clips from the media
 * 
 * # Response Codes
 * 
 * The following is a comprehensive list of the status codes you may receive while using the ContentGroove API:
 * 
 * - 200 "Ok"
 *   - The request was valid
 * - 400 "Bad Request
 *   - This is returned when there was a problem parsing the JSON body of your request if you supplied the 'Content-Type': 'application/json' header, or if your request is missing the 'Content-Type' header altogether
 * - 401 "Unauthorized"
 *   - This is returned when you are attempting to perform an action on a resource that you are not authorized to do
 * - 402 "Payment Required"
 *   - This is returned when you are attempting to perform an action that would push your account above a usage limit. You can view your usage at: https://app.contentgroove.com/quota_usage
 * - 404 "Not Found"
 *   - This is returned when the resource you are trying to view does not exist
 * - 429 "Too Many Requests"
 *   - This is returned when you have performed too many requests within a given period of time
 * - 500 "Internal Server Error"
 *   - This is returned when your request was valid but there was a problem on our end
 * 
 * # File Uploading
 * 
 * - Step 1: Make a GET request to the direct uploads URL endpoint (/api/v1/direct_uploads) to receive an upload URL to upload the file to and an upload id.
 * - Step 2: Make a PUT request with the file as the body to the upload URL received in step 1. The response will have a 200 status with no body if the upload is successful.
 *   ```
 *   curl -T /path/to/file upload_url
 *   ```
 * - Step 3: After uploading the file to the upload URL, make a POST request to the create medias endpoint (/api/v1/medias), with the upload id and optionally a name and description for the new media.
 *   > At this time, file uploads are limited to 5gb per file.
 * 
 * # Allowed media types
 * 
 * Video:
 * 
 * - Supported: Most common video formats and codecs are supported.
 * - Recommended: mp4
 * 
 * Audio:
 * 
 * - Supported: aac, mp3, flac, ogg, wav, and wma
 * - Recommended: aac
 * 
 * # Authentication
 * 
 * You can use the API Key to authenticate your API requests using any of these methods. (Replace abc123 with your actual API Key.)
 * 
 * - Request header `Authorization: Bearer abc123`
 * - Request header `X-API-KEY: abc123`
 * - Query parameter `api_key=abc123`
 *   > ⚠️ **IMPORTANT**: This API Key is intended only for use on the server side. Be sure never to use a server-side API Key in client-side (web, mobile, or otherwise) code. ⚠️
 * 
 * # Link to openapi.json spec
 * 
 * - https://api.contentgroove.com/api-docs/v1/openapi.json
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
        /** API server */
		'https://api.contentgroove.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * delete clip
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ClipsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ClipsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ClipsIdResponse
     */
	public function deleteApiV1ClipsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ClipsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ClipsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ClipsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/clips/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ClipsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ClipsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * delete media
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1MediasIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1MediasIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1MediasIdResponse
     */
	public function deleteApiV1MediasId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1MediasIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1MediasIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1MediasIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/medias/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1MediasIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1MediasIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * delete webhook subscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1WebhookSubscriptionsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1WebhookSubscriptionsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1WebhookSubscriptionsIdResponse
     */
	public function deleteApiV1WebhookSubscriptionsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1WebhookSubscriptionsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1WebhookSubscriptionsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1WebhookSubscriptionsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/webhook_subscriptions/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1WebhookSubscriptionsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1WebhookSubscriptionsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * list clips
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsResponse
     */
	public function getApiV1Clips(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/clips');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * show clip
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsIdResponse
     */
	public function getApiV1ClipsId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/clips/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1ClipsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * prepare presigned upload url
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1DirectUploadsResponse
     */
	public function getApiV1DirectUploads(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1DirectUploadsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/direct_uploads');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1DirectUploadsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * list medias
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasResponse
     */
	public function getApiV1Medias(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/medias');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * show media
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasIdResponse
     */
	public function getApiV1MediasId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/medias/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediasIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * list webhook subscriptions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsResponse
     */
	public function getApiV1WebhookSubscriptions(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/webhook_subscriptions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * show webhook subscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsIdResponse
     */
	public function getApiV1WebhookSubscriptionsId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/webhook_subscriptions/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1WebhookSubscriptionsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * create clip
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1ClipsRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1ClipsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1ClipsResponse
     */
	public function postApiV1Clips(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1ClipsRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1ClipsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1ClipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/clips');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1ClipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * create media
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediasRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediasSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediasResponse
     */
	public function postApiV1Medias(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediasRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediasSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/medias');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * create webhook subscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1WebhookSubscriptionsRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1WebhookSubscriptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1WebhookSubscriptionsResponse
     */
	public function postApiV1WebhookSubscriptions(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1WebhookSubscriptionsRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1WebhookSubscriptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1WebhookSubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/webhook_subscriptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1WebhookSubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * update clip
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1ClipsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1ClipsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutApiV1ClipsIdResponse
     */
	public function putApiV1ClipsId(
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1ClipsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1ClipsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutApiV1ClipsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/clips/{id}', \OpenAPI\OpenAPI\Models\Operations\PutApiV1ClipsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutApiV1ClipsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * update media
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1MediasIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1MediasIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutApiV1MediasIdResponse
     */
	public function putApiV1MediasId(
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1MediasIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1MediasIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutApiV1MediasIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/medias/{id}', \OpenAPI\OpenAPI\Models\Operations\PutApiV1MediasIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutApiV1MediasIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
}