"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Environments:
    r"""Everything about Otoroshi Environments"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def all_lines(self) -> operations.AllLinesResponse:
        r"""Get all environments
        Get all environments provided by the current Otoroshi instance
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/lines'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllLinesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.environment = http_res.content
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def services_for_a_line(self, request: operations.ServicesForALineRequest, security: operations.ServicesForALineSecurity) -> operations.ServicesForALineResponse:
        r"""Get all services for an environment
        Get all services for an environment provided by the current Otoroshi instance
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicesForALineRequest, base_url, '/lines/{line}/services', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicesForALineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Service]])
                res.services = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    