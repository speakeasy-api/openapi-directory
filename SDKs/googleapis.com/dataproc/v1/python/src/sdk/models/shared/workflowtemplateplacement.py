"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import clusterselector as shared_clusterselector
from ..shared import managedcluster as shared_managedcluster
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkflowTemplatePlacementInput:
    r"""Specifies workflow execution target.Either managed_cluster or cluster_selector is required."""
    
    cluster_selector: Optional[shared_clusterselector.ClusterSelector] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterSelector'), 'exclude': lambda f: f is None }})
    r"""A selector that chooses target cluster for jobs based on metadata."""  
    managed_cluster: Optional[shared_managedcluster.ManagedClusterInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedCluster'), 'exclude': lambda f: f is None }})
    r"""Cluster that is managed by the workflow."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkflowTemplatePlacement:
    r"""Specifies workflow execution target.Either managed_cluster or cluster_selector is required."""
    
    cluster_selector: Optional[shared_clusterselector.ClusterSelector] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterSelector'), 'exclude': lambda f: f is None }})
    r"""A selector that chooses target cluster for jobs based on metadata."""  
    managed_cluster: Optional[shared_managedcluster.ManagedCluster] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedCluster'), 'exclude': lambda f: f is None }})
    r"""Cluster that is managed by the workflow."""  
    