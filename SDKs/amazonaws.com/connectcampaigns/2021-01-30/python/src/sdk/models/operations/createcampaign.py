"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import answermachinedetectionconfig as shared_answermachinedetectionconfig
from ..shared import createcampaignresponse as shared_createcampaignresponse
from ..shared import predictivedialerconfig as shared_predictivedialerconfig
from ..shared import progressivedialerconfig as shared_progressivedialerconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCampaignRequestBodyDialerConfig:
    r"""The possible types of dialer config parameters"""
    
    predictive_dialer_config: Optional[shared_predictivedialerconfig.PredictiveDialerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('predictiveDialerConfig'), 'exclude': lambda f: f is None }})
    r"""Predictive Dialer config"""  
    progressive_dialer_config: Optional[shared_progressivedialerconfig.ProgressiveDialerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progressiveDialerConfig'), 'exclude': lambda f: f is None }})
    r"""Progressive Dialer config"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCampaignRequestBodyOutboundCallConfig:
    r"""The configuration used for outbound calls."""
    
    answer_machine_detection_config: Optional[shared_answermachinedetectionconfig.AnswerMachineDetectionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answerMachineDetectionConfig'), 'exclude': lambda f: f is None }})
    r"""Answering Machine Detection config"""  
    connect_contact_flow_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectContactFlowId'), 'exclude': lambda f: f is None }})
    r"""The identifier of the contact flow for the outbound call."""  
    connect_queue_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectQueueId'), 'exclude': lambda f: f is None }})
    r"""The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number."""  
    connect_source_phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectSourcePhoneNumber'), 'exclude': lambda f: f is None }})
    r"""The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCampaignRequestBody:
    
    connect_instance_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectInstanceId') }})
    r"""Amazon Connect Instance Id"""  
    dialer_config: CreateCampaignRequestBodyDialerConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dialerConfig') }})
    r"""The possible types of dialer config parameters"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of an Amazon Connect Campaign name."""  
    outbound_call_config: CreateCampaignRequestBodyOutboundCallConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outboundCallConfig') }})
    r"""The configuration used for outbound calls."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Tag map with key and value."""  
    

@dataclasses.dataclass
class CreateCampaignRequest:
    
    request_body: CreateCampaignRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateCampaignResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_campaign_response: Optional[shared_createcampaignresponse.CreateCampaignResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    