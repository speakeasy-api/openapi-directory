// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAcceptTransitGatewayMulticastDomainAssociationsActionEnum
type GETAcceptTransitGatewayMulticastDomainAssociationsActionEnum string

const (
	GETAcceptTransitGatewayMulticastDomainAssociationsActionEnumAcceptTransitGatewayMulticastDomainAssociations GETAcceptTransitGatewayMulticastDomainAssociationsActionEnum = "AcceptTransitGatewayMulticastDomainAssociations"
)

func (e GETAcceptTransitGatewayMulticastDomainAssociationsActionEnum) ToPointer() *GETAcceptTransitGatewayMulticastDomainAssociationsActionEnum {
	return &e
}

func (e *GETAcceptTransitGatewayMulticastDomainAssociationsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AcceptTransitGatewayMulticastDomainAssociations":
		*e = GETAcceptTransitGatewayMulticastDomainAssociationsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAcceptTransitGatewayMulticastDomainAssociationsActionEnum: %v", v)
	}
}

// GETAcceptTransitGatewayMulticastDomainAssociationsVersionEnum
type GETAcceptTransitGatewayMulticastDomainAssociationsVersionEnum string

const (
	GETAcceptTransitGatewayMulticastDomainAssociationsVersionEnumTwoThousandAndSixteen1115 GETAcceptTransitGatewayMulticastDomainAssociationsVersionEnum = "2016-11-15"
)

func (e GETAcceptTransitGatewayMulticastDomainAssociationsVersionEnum) ToPointer() *GETAcceptTransitGatewayMulticastDomainAssociationsVersionEnum {
	return &e
}

func (e *GETAcceptTransitGatewayMulticastDomainAssociationsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETAcceptTransitGatewayMulticastDomainAssociationsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAcceptTransitGatewayMulticastDomainAssociationsVersionEnum: %v", v)
	}
}

type GETAcceptTransitGatewayMulticastDomainAssociationsRequest struct {
	Action GETAcceptTransitGatewayMulticastDomainAssociationsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The IDs of the subnets to associate with the transit gateway multicast domain.
	SubnetIds []string `queryParam:"style=form,explode=true,name=SubnetIds"`
	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentID *string `queryParam:"style=form,explode=true,name=TransitGatewayAttachmentId"`
	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainID *string                                                       `queryParam:"style=form,explode=true,name=TransitGatewayMulticastDomainId"`
	Version                         GETAcceptTransitGatewayMulticastDomainAssociationsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm                   *string                                                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256               *string                                                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                  *string                                                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                        *string                                                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken               *string                                                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                   *string                                                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders               *string                                                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAcceptTransitGatewayMulticastDomainAssociationsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
