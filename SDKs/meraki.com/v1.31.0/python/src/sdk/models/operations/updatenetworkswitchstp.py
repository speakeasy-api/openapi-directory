"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchStpRequestBodyStpBridgePriority:
    
    stp_priority: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stpPriority') }})
    r"""STP priority for switch, stacks, or switch profiles"""  
    stacks: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stacks'), 'exclude': lambda f: f is None }})
    r"""List of stack IDs"""  
    switches: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switches'), 'exclude': lambda f: f is None }})
    r"""List of switch serial numbers"""  
    switch_profiles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switchProfiles'), 'exclude': lambda f: f is None }})
    r"""List of switch profile IDs"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchStpRequestBody:
    
    rstp_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rstpEnabled'), 'exclude': lambda f: f is None }})
    r"""The spanning tree protocol status in network"""  
    stp_bridge_priority: Optional[list[UpdateNetworkSwitchStpRequestBodyStpBridgePriority]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stpBridgePriority'), 'exclude': lambda f: f is None }})
    r"""STP bridge priority for switches/stacks or switch profiles. An empty array will clear the STP bridge priority settings."""  
    

@dataclasses.dataclass
class UpdateNetworkSwitchStpRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkSwitchStpRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkSwitchStpResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_switch_stp_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    