/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * **note**: all items are optional, but at least one needs to be included
 */
export class BookingStatusRequestBody extends SpeakeasyBase {
  /**
   * **earliest date** for *this* booking (must be in the future)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingDateFrom" })
  bookingDateFrom?: string;

  /**
   * **latest date** for *this* booking (must be in the future)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingDateTo" })
  bookingDateTo?: string;

  /**
   * **array** of partner-defined distributor item reference identifiers e.g. `['refItem1','refItem2','refItem3']`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distributorItemRefs" })
  distributorItemRefs?: string[];

  /**
   * **array** of partner-defined distributor reference identifiers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distributorRefs" })
  distributorRefs?: string[];

  /**
   * **array** of item identifiers to check
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemIds" })
  itemIds?: number[];

  /**
   * **first name** of the lead traveler
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leadFirstName" })
  leadFirstName?: string;

  /**
   * **surname** of the lead traveler
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leadSurname" })
  leadSurname?: string;

  /**
   * **specifier**:
   *
   * @remarks
   * - `true`: bypass the poll limit in the prelive environment only (recommended for testing)
   * - `false`: (default)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "test" })
  test?: boolean;
}

export class BookingStatusRequest extends SpeakeasyBase {
  /**
   * Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Accept-Language",
  })
  acceptLanguage: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: BookingStatusRequestBody;
}

export class BookingStatus200ApplicationJSONDataItemSummaries extends SpeakeasyBase {
  /**
   * **object** containing item booking status information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingStatus" })
  @Type(() => shared.BookingStatusItem)
  bookingStatus?: shared.BookingStatusItem;

  /**
   * **partner-defined distributor item reference identifier**
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distributorItemRef" })
  distributorItemRef?: string;

  /**
   * Booking-reference number generated by Viator
   *
   * @remarks
   * - **Note**: For more information, see: [Booking references](#section/Key-concepts/Booking-references)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itemId" })
  itemId?: number;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itineraryId" })
  itineraryId?: number;

  /**
   * **sort order** for *this* item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: number;

  /**
   * **date** of the booking
   */
  @SpeakeasyMetadata()
  @Expose({ name: "travelDate" })
  travelDate?: string;
}

/**
 * **object** containing booking status and details
 */
export class BookingStatus200ApplicationJSONData extends SpeakeasyBase {
  /**
   * **date**: of *this* booking
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingDate" })
  bookingDate?: string;

  /**
   * **object** containing itinerary booking status information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingStatus" })
  @Type(() => shared.BookingStatusItinerary)
  bookingStatus?: shared.BookingStatusItinerary;

  /**
   * **alphanumeric identifer** of the distributor for *this* booking
   */
  @SpeakeasyMetadata()
  @Expose({ name: "distributorRef" })
  distributorRef?: string;

  /**
   * **array** of item summary objects
   */
  @SpeakeasyMetadata({
    elemType: BookingStatus200ApplicationJSONDataItemSummaries,
  })
  @Expose({ name: "itemSummaries" })
  @Type(() => BookingStatus200ApplicationJSONDataItemSummaries)
  itemSummaries?: BookingStatus200ApplicationJSONDataItemSummaries[];

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "itineraryId" })
  itineraryId?: number;

  /**
   * **sort order** for *this* response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: number;
}

/**
 * Success
 */
export class BookingStatus200ApplicationJSON extends SpeakeasyBase {
  /**
   * **object** containing booking status and details
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => BookingStatus200ApplicationJSONData)
  data?: BookingStatus200ApplicationJSONData;

  /**
   * **timestamp** of *this* response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateStamp" })
  dateStamp?: string;

  /**
   * **array** of error codes pertaining to *this* error
   *
   * @remarks
   * - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorCodes" })
  errorCodes?: string[];

  /**
   * **array** of error message strings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: any[];

  /**
   * **array** of error message strings in plain text
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessageText" })
  errorMessageText?: string;

  /**
   * **name** of *this* type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorName" })
  errorName?: string;

  /**
   * **reference number** of *this* error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorReference" })
  errorReference?: string;

  /**
   * **code** specifying the type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorType" })
  errorType?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraInfo" })
  extraInfo?: Record<string, any>;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraObject" })
  extraObject?: Record<string, any>;

  /**
   * **boolean indicator** of *this* request's outcome
   *
   * @remarks
   * - `true`: the request was successful with no errors
   * - `false`: an error was encountered
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  /**
   * **number** of results available for *this* service
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalCount" })
  totalCount?: number;

  /**
   * **unique numeric id** of the server that processed *this* request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vmid" })
  vmid?: string;
}

export class BookingStatusResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  bookingStatus200ApplicationJSONObject?: BookingStatus200ApplicationJSON;
}
