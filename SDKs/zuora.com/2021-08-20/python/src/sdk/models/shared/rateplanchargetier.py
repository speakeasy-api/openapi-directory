"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class RatePlanChargeTierPriceFormatEnum(str, Enum):
    r"""Indicates if the price is a flat fee or is per unit.
    
    
    **Character limit**: 8
    
    
    **Values**: `FlatFee`, `PerUnit`
    """
    FLAT_FEE = 'FlatFee'
    PER_UNIT = 'PerUnit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RatePlanChargeTier:
    
    rate_plan_charge_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RatePlanChargeId') }})
    r"""The ID of the subscription or amendment rate plan charge associated with this tier. You can't create an unassociated tier.
    
    
    **Character limit**: 32
    
    
    **Values**: inherited from `RatePlanCharge`.`Id`
    """  
    created_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who created the RatePlanChargeTier object.
    
    **Character limit**: 32
    
    
    **Values**: automatically generated
    """  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the RatePlanChargeTier object was created.
    
    
    **Character limit**: 29
    
    
    **Values**: automatically generated
    """  
    ending_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndingUnit'), 'exclude': lambda f: f is None }})
    r"""The end number of a range of units for the tier. This field is only required if the charge mode is `Tiered Pricing` or `Tierred with Overage Pricing`.
    
    
    **Character limit**: 16
    
    
    **Values**: any positive decimal value
    """  
    is_overage_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsOveragePrice'), 'exclude': lambda f: f is None }})
    r"""Indicates if the price is an overage price. An overage occurs when usage surpasses the last defined tier. This field is applicable only to tier pricing and volume pricing models.
    
    
    
    **Values**: true, false
    """  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Price'), 'exclude': lambda f: f is None }})
    r"""The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the change model is tiered pricing.
    
    
    **Character limit**: 16
    
    
    **Values**: any positive decimal value
    """  
    price_format: Optional[RatePlanChargeTierPriceFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PriceFormat'), 'exclude': lambda f: f is None }})
    r"""Indicates if the price is a flat fee or is per unit.
    
    
    **Character limit**: 8
    
    
    **Values**: `FlatFee`, `PerUnit`
    """  
    starting_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartingUnit'), 'exclude': lambda f: f is None }})
    r"""The start number of a range of units for the tier. This field is only required if the charge mode is `Tiered Pricing` or `Tierred with Overage Pricing`.
    
    
    **Character limit**: 16
    
    
    **Values**: any positive decimal value
    """  
    tier: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tier'), 'exclude': lambda f: f is None }})
    r"""A unique number that identifies the tier that the price applies to.
    
    
    **Character limit**: 20
    
    
    **Values**: automatically generated
    """  
    updated_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the last user to update the object.
    
    **Character limit**: 32
    
    
    **Values**: automatically generated
    """  
    updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the object was last updated.
    
    
    **Character limit**: 29
    
    
    **Values**: automatically generated
    """  
    