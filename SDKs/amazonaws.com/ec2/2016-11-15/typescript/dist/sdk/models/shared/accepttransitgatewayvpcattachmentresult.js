"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AcceptTransitGatewayVpcAttachmentResult = exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment = exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentTags = exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum = exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptions = exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsIpv6SupportEnum = exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsDnsSupportEnum = exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsApplianceModeSupportEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * Indicates whether appliance mode support is enabled.
 */
var AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsApplianceModeSupportEnum;
(function (AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsApplianceModeSupportEnum) {
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsApplianceModeSupportEnum["Enable"] = "enable";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsApplianceModeSupportEnum["Disable"] = "disable";
})(AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsApplianceModeSupportEnum = exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsApplianceModeSupportEnum || (exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsApplianceModeSupportEnum = {}));
/**
 * Indicates whether DNS support is enabled.
 */
var AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsDnsSupportEnum;
(function (AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsDnsSupportEnum) {
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsDnsSupportEnum["Enable"] = "enable";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsDnsSupportEnum["Disable"] = "disable";
})(AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsDnsSupportEnum = exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsDnsSupportEnum || (exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsDnsSupportEnum = {}));
/**
 * Indicates whether IPv6 support is disabled.
 */
var AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsIpv6SupportEnum;
(function (AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsIpv6SupportEnum) {
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsIpv6SupportEnum["Enable"] = "enable";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsIpv6SupportEnum["Disable"] = "disable";
})(AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsIpv6SupportEnum = exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsIpv6SupportEnum || (exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptionsIpv6SupportEnum = {}));
/**
 * The VPC attachment options.
 */
var AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptions = /** @class */ (function (_super) {
    __extends(AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptions, _super);
    function AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptions.prototype, "applianceModeSupport", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptions.prototype, "dnsSupport", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptions.prototype, "ipv6Support", void 0);
    return AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptions;
}(utils_1.SpeakeasyBase));
exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptions = AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptions;
/**
 * The state of the VPC attachment. Note that the <code>initiating</code> state has been deprecated.
 */
var AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum;
(function (AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum) {
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["Initiating"] = "initiating";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["InitiatingRequest"] = "initiatingRequest";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["PendingAcceptance"] = "pendingAcceptance";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["RollingBack"] = "rollingBack";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["Pending"] = "pending";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["Available"] = "available";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["Modifying"] = "modifying";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["Deleting"] = "deleting";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["Deleted"] = "deleted";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["Failed"] = "failed";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["Rejected"] = "rejected";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["Rejecting"] = "rejecting";
    AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum["Failing"] = "failing";
})(AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum = exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum || (exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentStateEnum = {}));
/**
 * Describes a tag.
 */
var AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentTags = /** @class */ (function (_super) {
    __extends(AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentTags, _super);
    function AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentTags.prototype, "value", void 0);
    return AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentTags;
}(utils_1.SpeakeasyBase));
exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentTags = AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentTags;
/**
 * The VPC attachment.
 */
var AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment = /** @class */ (function (_super) {
    __extends(AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment, _super);
    function AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment.prototype, "creationTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentOptions)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment.prototype, "options", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Array)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment.prototype, "subnetIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachmentTags,
        }),
        __metadata("design:type", Array)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment.prototype, "transitGatewayAttachmentId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment.prototype, "transitGatewayId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment.prototype, "vpcId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment.prototype, "vpcOwnerId", void 0);
    return AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment;
}(utils_1.SpeakeasyBase));
exports.AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment = AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment;
/**
 * Success
 */
var AcceptTransitGatewayVpcAttachmentResult = /** @class */ (function (_super) {
    __extends(AcceptTransitGatewayVpcAttachmentResult, _super);
    function AcceptTransitGatewayVpcAttachmentResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", AcceptTransitGatewayVpcAttachmentResultTransitGatewayVpcAttachment)
    ], AcceptTransitGatewayVpcAttachmentResult.prototype, "transitGatewayVpcAttachment", void 0);
    return AcceptTransitGatewayVpcAttachmentResult;
}(utils_1.SpeakeasyBase));
exports.AcceptTransitGatewayVpcAttachmentResult = AcceptTransitGatewayVpcAttachmentResult;
