// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type ResolvePlaceResponseCodeEnum string

const (
	ResolvePlaceResponseCodeEnumTwoThousand ResolvePlaceResponseCodeEnum = "2000"
)

func (e *ResolvePlaceResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = ResolvePlaceResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ResolvePlaceResponseCodeEnum: %s", s)
	}
}

type ResolvePlaceResponseMessageEnum string

const (
	ResolvePlaceResponseMessageEnumSuccess ResolvePlaceResponseMessageEnum = "Success"
)

func (e *ResolvePlaceResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = ResolvePlaceResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ResolvePlaceResponseMessageEnum: %s", s)
	}
}

type ResolvePlaceResponseResultType string

const (
	ResolvePlaceResponseResultTypePlace ResolvePlaceResponseResultType = "Place"
)

type ResolvePlaceResponseResult struct {
	Place *Place

	Type ResolvePlaceResponseResultType
}

func CreateResolvePlaceResponseResultPlace(place Place) ResolvePlaceResponseResult {
	typ := ResolvePlaceResponseResultTypePlace

	return ResolvePlaceResponseResult{
		Place: &place,
		Type:  typ,
	}
}

func (u *ResolvePlaceResponseResult) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	place := new(Place)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&place); err == nil {
		u.Place = place
		u.Type = ResolvePlaceResponseResultTypePlace
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ResolvePlaceResponseResult) MarshalJSON() ([]byte, error) {
	if u.Place != nil {
		return json.Marshal(u.Place)
	}

	return nil, nil
}

// ResolvePlaceResponse - Success
type ResolvePlaceResponse struct {
	Code    ResolvePlaceResponseCodeEnum    `json:"code"`
	Message ResolvePlaceResponseMessageEnum `json:"message"`
	Result  ResolvePlaceResponseResult      `json:"result"`
}
