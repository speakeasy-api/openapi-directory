// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ApplicationReportApplicationSourceEnum - The source of the package.
type ApplicationReportApplicationSourceEnum string

const (
	ApplicationReportApplicationSourceEnumApplicationSourceUnspecified ApplicationReportApplicationSourceEnum = "APPLICATION_SOURCE_UNSPECIFIED"
	ApplicationReportApplicationSourceEnumSystemAppFactoryVersion      ApplicationReportApplicationSourceEnum = "SYSTEM_APP_FACTORY_VERSION"
	ApplicationReportApplicationSourceEnumSystemAppUpdatedVersion      ApplicationReportApplicationSourceEnum = "SYSTEM_APP_UPDATED_VERSION"
	ApplicationReportApplicationSourceEnumInstalledFromPlayStore       ApplicationReportApplicationSourceEnum = "INSTALLED_FROM_PLAY_STORE"
)

func (e *ApplicationReportApplicationSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "APPLICATION_SOURCE_UNSPECIFIED":
		fallthrough
	case "SYSTEM_APP_FACTORY_VERSION":
		fallthrough
	case "SYSTEM_APP_UPDATED_VERSION":
		fallthrough
	case "INSTALLED_FROM_PLAY_STORE":
		*e = ApplicationReportApplicationSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationReportApplicationSourceEnum: %s", s)
	}
}

// ApplicationReportStateEnum - Application state.
type ApplicationReportStateEnum string

const (
	ApplicationReportStateEnumApplicationStateUnspecified ApplicationReportStateEnum = "APPLICATION_STATE_UNSPECIFIED"
	ApplicationReportStateEnumRemoved                     ApplicationReportStateEnum = "REMOVED"
	ApplicationReportStateEnumInstalled                   ApplicationReportStateEnum = "INSTALLED"
)

func (e *ApplicationReportStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "APPLICATION_STATE_UNSPECIFIED":
		fallthrough
	case "REMOVED":
		fallthrough
	case "INSTALLED":
		*e = ApplicationReportStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationReportStateEnum: %s", s)
	}
}

// ApplicationReport - Information reported about an installed app.
type ApplicationReport struct {
	// The source of the package.
	ApplicationSource *ApplicationReportApplicationSourceEnum `json:"applicationSource,omitempty"`
	// The display name of the app.
	DisplayName *string `json:"displayName,omitempty"`
	// The list of app events which have occurred in the last 30 hours.
	Events []ApplicationEvent `json:"events,omitempty"`
	// The package name of the app that installed this app.
	InstallerPackageName *string `json:"installerPackageName,omitempty"`
	// List of keyed app states reported by the app.
	KeyedAppStates []KeyedAppState `json:"keyedAppStates,omitempty"`
	// Package name of the app.
	PackageName *string `json:"packageName,omitempty"`
	// The SHA-256 hash of the app's APK file, which can be used to verify the app hasn't been modified. Each byte of the hash value is represented as a two-digit hexadecimal number.
	PackageSha256Hash *string `json:"packageSha256Hash,omitempty"`
	// The SHA-1 hash of each android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the app package. Each byte of each hash value is represented as a two-digit hexadecimal number.
	SigningKeyCertFingerprints []string `json:"signingKeyCertFingerprints,omitempty"`
	// Application state.
	State *ApplicationReportStateEnum `json:"state,omitempty"`
	// The app version code, which can be used to determine whether one version is more recent than another.
	VersionCode *int `json:"versionCode,omitempty"`
	// The app version as displayed to the user.
	VersionName *string `json:"versionName,omitempty"`
}
