/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class ConnectionImportDataCredentials extends SpeakeasyBase {
  /**
   * Access token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "access_token" })
  accessToken?: string;

  /**
   * The number of seconds until the token expires. If omitted the token will be queued for refresh.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expires_in" })
  expiresIn?: number;

  /**
   * The datetime at which the token was issued. If omitted the token will be queued for refresh.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issued_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  issuedAt?: Date;

  /**
   * The refresh token can be used to obtain a new access token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refresh_token" })
  refreshToken: string;
}

/**
 * Fields that need to be persisted on the resource
 */
export class ConnectionImportData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "credentials" })
  @Type(() => ConnectionImportDataCredentials)
  credentials?: ConnectionImportDataCredentials;

  /**
   * Attach your own consumer specific metadata
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, any>;

  /**
   * Connection settings. Values will persist to `form_fields` with corresponding id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settings" })
  settings?: Record<string, any>;
}
