// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ScanConfigExportToSecurityCommandCenterEnum - Controls export of scan configurations and results to Security Command Center.
type ScanConfigExportToSecurityCommandCenterEnum string

const (
	ScanConfigExportToSecurityCommandCenterEnumExportToSecurityCommandCenterUnspecified ScanConfigExportToSecurityCommandCenterEnum = "EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED"
	ScanConfigExportToSecurityCommandCenterEnumEnabled                                  ScanConfigExportToSecurityCommandCenterEnum = "ENABLED"
	ScanConfigExportToSecurityCommandCenterEnumDisabled                                 ScanConfigExportToSecurityCommandCenterEnum = "DISABLED"
)

func (e ScanConfigExportToSecurityCommandCenterEnum) ToPointer() *ScanConfigExportToSecurityCommandCenterEnum {
	return &e
}

func (e *ScanConfigExportToSecurityCommandCenterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED":
		fallthrough
	case "ENABLED":
		fallthrough
	case "DISABLED":
		*e = ScanConfigExportToSecurityCommandCenterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScanConfigExportToSecurityCommandCenterEnum: %v", v)
	}
}

// ScanConfigRiskLevelEnum - The risk level selected for the scan
type ScanConfigRiskLevelEnum string

const (
	ScanConfigRiskLevelEnumRiskLevelUnspecified ScanConfigRiskLevelEnum = "RISK_LEVEL_UNSPECIFIED"
	ScanConfigRiskLevelEnumNormal               ScanConfigRiskLevelEnum = "NORMAL"
	ScanConfigRiskLevelEnumLow                  ScanConfigRiskLevelEnum = "LOW"
)

func (e ScanConfigRiskLevelEnum) ToPointer() *ScanConfigRiskLevelEnum {
	return &e
}

func (e *ScanConfigRiskLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RISK_LEVEL_UNSPECIFIED":
		fallthrough
	case "NORMAL":
		fallthrough
	case "LOW":
		*e = ScanConfigRiskLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScanConfigRiskLevelEnum: %v", v)
	}
}

// ScanConfigUserAgentEnum - The user agent used during scanning.
type ScanConfigUserAgentEnum string

const (
	ScanConfigUserAgentEnumUserAgentUnspecified ScanConfigUserAgentEnum = "USER_AGENT_UNSPECIFIED"
	ScanConfigUserAgentEnumChromeLinux          ScanConfigUserAgentEnum = "CHROME_LINUX"
	ScanConfigUserAgentEnumChromeAndroid        ScanConfigUserAgentEnum = "CHROME_ANDROID"
	ScanConfigUserAgentEnumSafariIphone         ScanConfigUserAgentEnum = "SAFARI_IPHONE"
)

func (e ScanConfigUserAgentEnum) ToPointer() *ScanConfigUserAgentEnum {
	return &e
}

func (e *ScanConfigUserAgentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USER_AGENT_UNSPECIFIED":
		fallthrough
	case "CHROME_LINUX":
		fallthrough
	case "CHROME_ANDROID":
		fallthrough
	case "SAFARI_IPHONE":
		*e = ScanConfigUserAgentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScanConfigUserAgentEnum: %v", v)
	}
}

// ScanConfig - A ScanConfig resource contains the configurations to launch a scan.
type ScanConfig struct {
	// Scan authentication configuration.
	Authentication *Authentication `json:"authentication,omitempty"`
	// The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
	BlacklistPatterns []string `json:"blacklistPatterns,omitempty"`
	// Required. The user provided display name of the ScanConfig.
	DisplayName *string `json:"displayName,omitempty"`
	// Controls export of scan configurations and results to Security Command Center.
	ExportToSecurityCommandCenter *ScanConfigExportToSecurityCommandCenterEnum `json:"exportToSecurityCommandCenter,omitempty"`
	// Whether to keep scanning even if most requests return HTTP error codes.
	IgnoreHTTPStatusErrors *bool `json:"ignoreHttpStatusErrors,omitempty"`
	// Whether the scan config is managed by Web Security Scanner, output only.
	ManagedScan *bool `json:"managedScan,omitempty"`
	// The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.
	MaxQPS *int `json:"maxQps,omitempty"`
	// The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.
	Name *string `json:"name,omitempty"`
	// The risk level selected for the scan
	RiskLevel *ScanConfigRiskLevelEnum `json:"riskLevel,omitempty"`
	// Scan schedule configuration.
	Schedule *Schedule `json:"schedule,omitempty"`
	// Required. The starting URLs from which the scanner finds site pages.
	StartingUrls []string `json:"startingUrls,omitempty"`
	// Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses.
	StaticIPScan *bool `json:"staticIpScan,omitempty"`
	// The user agent used during scanning.
	UserAgent *ScanConfigUserAgentEnum `json:"userAgent,omitempty"`
}
