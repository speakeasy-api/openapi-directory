"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LogicalNetworkInterfaceNetworkTypeEnum(str, Enum):
    r"""Type of network."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CLIENT = 'CLIENT'
    PRIVATE = 'PRIVATE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LogicalNetworkInterface:
    r"""Each logical network interface is effectively a network and IP pair."""
    
    default_gateway: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultGateway'), 'exclude': lambda f: f is None }})
    r"""Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""An identifier for the `Network`, generated by the backend."""  
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipAddress'), 'exclude': lambda f: f is None }})
    r"""IP address in the network"""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Name of the network"""  
    network_type: Optional[LogicalNetworkInterfaceNetworkTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkType'), 'exclude': lambda f: f is None }})
    r"""Type of network."""  
    