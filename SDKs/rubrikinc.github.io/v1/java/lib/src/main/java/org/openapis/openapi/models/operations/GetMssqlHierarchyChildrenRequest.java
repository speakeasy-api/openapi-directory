/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetMssqlHierarchyChildrenRequest {
    /**
     * Filter by the ID of the effective SLA Domain.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=effective_sla_domain_id")
    public String effectiveSlaDomainId;

    public GetMssqlHierarchyChildrenRequest withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * Boolean that filters top-level nodes with the Host or WindowsCluster object type by whether or not the nodes have children MssqlInstance nodes. When this value is 'true,' the filter shows only nodes with children MssqlInstance nodes. When this value is 'false,' the filter shows only nodes without children MssqlInstance nodes.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=has_instances")
    public Boolean hasInstances;

    public GetMssqlHierarchyChildrenRequest withHasInstances(Boolean hasInstances) {
        this.hasInstances = hasInstances;
        return this;
    }
    
    /**
     * ID of the parent SQL Server hierarchy object. To get top-level nodes, use **root** as the ID.
     * 
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    public String id;

    public GetMssqlHierarchyChildrenRequest withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Filter by the value of the `isClustered` field for nodes with object type MssqlDatabase or MssqlInstance.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_clustered")
    public Boolean isClustered;

    public GetMssqlHierarchyChildrenRequest withIsClustered(Boolean isClustered) {
        this.isClustered = isClustered;
        return this;
    }
    
    /**
     * Filter database by the value of the `isLiveMount` field for nodes with object type MssqlDatabase.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_live_mount")
    public Boolean isLiveMount;

    public GetMssqlHierarchyChildrenRequest withIsLiveMount(Boolean isLiveMount) {
        this.isLiveMount = isLiveMount;
        return this;
    }
    
    /**
     * Filter by the value of the `isLogShippingSecondary` field for nodes with object type MssqlDatabase.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_log_shipping_secondary")
    public Boolean isLogShippingSecondary;

    public GetMssqlHierarchyChildrenRequest withIsLogShippingSecondary(Boolean isLogShippingSecondary) {
        this.isLogShippingSecondary = isLogShippingSecondary;
        return this;
    }
    
    /**
     * Filter by the value of the `isRelic` field for nodes with object type MssqlDatabase.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_relic")
    public Boolean isRelic;

    public GetMssqlHierarchyChildrenRequest withIsRelic(Boolean isRelic) {
        this.isRelic = isRelic;
        return this;
    }
    
    /**
     * Limit the number of matches returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Integer limit;

    public GetMssqlHierarchyChildrenRequest withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Filter children by provided name.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    public String name;

    public GetMssqlHierarchyChildrenRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Filter by a comma-separated list of node object types.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=object_type")
    public GetMssqlHierarchyChildrenObjectTypeEnum[] objectType;

    public GetMssqlHierarchyChildrenRequest withObjectType(GetMssqlHierarchyChildrenObjectTypeEnum[] objectType) {
        this.objectType = objectType;
        return this;
    }
    
    /**
     * An integer that specifies the number of initial matches to ignore.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    public Integer offset;

    public GetMssqlHierarchyChildrenRequest withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Filter by primary cluster ID, or **local**.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=primary_cluster_id")
    public String primaryClusterId;

    public GetMssqlHierarchyChildrenRequest withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    /**
     * Filter by SLA assignment type.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sla_assignment")
    public GetMssqlHierarchyChildrenSLAAssignmentEnum slaAssignment;

    public GetMssqlHierarchyChildrenRequest withSlaAssignment(GetMssqlHierarchyChildrenSLAAssignmentEnum slaAssignment) {
        this.slaAssignment = slaAssignment;
        return this;
    }
    
    /**
     * Determines whether SQL Server instances are fetched with additional privilege checks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=snappable_status")
    public GetMssqlHierarchyChildrenSnappableStatusEnum snappableStatus;

    public GetMssqlHierarchyChildrenRequest withSnappableStatus(GetMssqlHierarchyChildrenSnappableStatusEnum snappableStatus) {
        this.snappableStatus = snappableStatus;
        return this;
    }
    
    /**
     * Attribute to sort the results on.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_by")
    public GetMssqlHierarchyChildrenSortByEnum sortBy;

    public GetMssqlHierarchyChildrenRequest withSortBy(GetMssqlHierarchyChildrenSortByEnum sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * Sort order, either ascending or descending.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_order")
    public GetMssqlHierarchyChildrenSortOrderEnum sortOrder;

    public GetMssqlHierarchyChildrenRequest withSortOrder(GetMssqlHierarchyChildrenSortOrderEnum sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    public GetMssqlHierarchyChildrenRequest(@JsonProperty("id") String id) {
        this.id = id;
  }
}
