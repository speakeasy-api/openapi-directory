// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FourHundredAndOneUNAUTHORIZEDCodeEnum string

const (
	FourHundredAndOneUNAUTHORIZEDCodeEnumUnauthorized FourHundredAndOneUNAUTHORIZEDCodeEnum = "UNAUTHORIZED"
)

func (e *FourHundredAndOneUNAUTHORIZEDCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNAUTHORIZED":
		*e = FourHundredAndOneUNAUTHORIZEDCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FourHundredAndOneUNAUTHORIZEDCodeEnum: %s", s)
	}
}

type FourHundredAndOneUNAUTHORIZEDMessageEnum string

const (
	FourHundredAndOneUNAUTHORIZEDMessageEnumInvalidAPIKey FourHundredAndOneUNAUTHORIZEDMessageEnum = "Invalid API key"
)

func (e *FourHundredAndOneUNAUTHORIZEDMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Invalid API key":
		*e = FourHundredAndOneUNAUTHORIZEDMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FourHundredAndOneUNAUTHORIZEDMessageEnum: %s", s)
	}
}

// FourHundredAndOneUNAUTHORIZED - Unauthorized
type FourHundredAndOneUNAUTHORIZED struct {
	Code    *FourHundredAndOneUNAUTHORIZEDCodeEnum    `json:"code,omitempty"`
	Message *FourHundredAndOneUNAUTHORIZEDMessageEnum `json:"message,omitempty"`
	// Timestamp of the request
	//
	//   * e.g.: `2019-09-17T03:20:45.737043Z`
	//
	Timestamp *string `json:"timestamp,omitempty"`
	// Tracking identifier for this error response
	TrackingID *string `json:"trackingId,omitempty"`
}
