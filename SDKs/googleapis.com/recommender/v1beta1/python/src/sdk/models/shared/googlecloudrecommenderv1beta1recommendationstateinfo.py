"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudRecommenderV1beta1RecommendationStateInfoStateEnum(str, Enum):
    r"""The state of the recommendation, Eg ACTIVE, SUCCEEDED, FAILED."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    CLAIMED = 'CLAIMED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    DISMISSED = 'DISMISSED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecommenderV1beta1RecommendationStateInfo:
    r"""Information for state. Contains state and metadata."""
    
    state: Optional[GoogleCloudRecommenderV1beta1RecommendationStateInfoStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of the recommendation, Eg ACTIVE, SUCCEEDED, FAILED."""  
    state_metadata: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateMetadata'), 'exclude': lambda f: f is None }})
    r"""A map of metadata for the state, provided by user or automations systems."""  
    