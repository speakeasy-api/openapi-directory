"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdjustmentConditions = exports.AdjustmentConditionsTypeEnum = exports.AdjustmentConditionsRules = exports.AdjustmentConditionsRulesNightsRange = exports.AdjustmentConditionsRulesBookableDateRange = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The date range the adjustment applies to, inclusive.
 */
var AdjustmentConditionsRulesBookableDateRange = /** @class */ (function (_super) {
    __extends(AdjustmentConditionsRulesBookableDateRange, _super);
    function AdjustmentConditionsRulesBookableDateRange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "end" }),
        __metadata("design:type", String)
    ], AdjustmentConditionsRulesBookableDateRange.prototype, "end", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start" }),
        __metadata("design:type", String)
    ], AdjustmentConditionsRulesBookableDateRange.prototype, "start", void 0);
    return AdjustmentConditionsRulesBookableDateRange;
}(utils_1.SpeakeasyBase));
exports.AdjustmentConditionsRulesBookableDateRange = AdjustmentConditionsRulesBookableDateRange;
/**
 * The number of nights the adjustment applies to, inclusive.
 */
var AdjustmentConditionsRulesNightsRange = /** @class */ (function (_super) {
    __extends(AdjustmentConditionsRulesNightsRange, _super);
    function AdjustmentConditionsRulesNightsRange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "max" }),
        __metadata("design:type", Number)
    ], AdjustmentConditionsRulesNightsRange.prototype, "max", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "min" }),
        __metadata("design:type", Number)
    ], AdjustmentConditionsRulesNightsRange.prototype, "min", void 0);
    return AdjustmentConditionsRulesNightsRange;
}(utils_1.SpeakeasyBase));
exports.AdjustmentConditionsRulesNightsRange = AdjustmentConditionsRulesNightsRange;
var AdjustmentConditionsRules = /** @class */ (function (_super) {
    __extends(AdjustmentConditionsRules, _super);
    function AdjustmentConditionsRules() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bookableDateRange" }),
        (0, class_transformer_1.Type)(function () { return AdjustmentConditionsRulesBookableDateRange; }),
        __metadata("design:type", AdjustmentConditionsRulesBookableDateRange)
    ], AdjustmentConditionsRules.prototype, "bookableDateRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nightsRange" }),
        (0, class_transformer_1.Type)(function () { return AdjustmentConditionsRulesNightsRange; }),
        __metadata("design:type", AdjustmentConditionsRulesNightsRange)
    ], AdjustmentConditionsRules.prototype, "nightsRange", void 0);
    return AdjustmentConditionsRules;
}(utils_1.SpeakeasyBase));
exports.AdjustmentConditionsRules = AdjustmentConditionsRules;
/**
 * The type of the condition. Currently we only support conditions based on length of stay.
 */
var AdjustmentConditionsTypeEnum;
(function (AdjustmentConditionsTypeEnum) {
    AdjustmentConditionsTypeEnum["LengthOfStay"] = "LENGTH_OF_STAY";
})(AdjustmentConditionsTypeEnum = exports.AdjustmentConditionsTypeEnum || (exports.AdjustmentConditionsTypeEnum = {}));
var AdjustmentConditions = /** @class */ (function (_super) {
    __extends(AdjustmentConditions, _super);
    function AdjustmentConditions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rules" }),
        (0, class_transformer_1.Type)(function () { return AdjustmentConditionsRules; }),
        __metadata("design:type", AdjustmentConditionsRules)
    ], AdjustmentConditions.prototype, "rules", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], AdjustmentConditions.prototype, "type", void 0);
    return AdjustmentConditions;
}(utils_1.SpeakeasyBase));
exports.AdjustmentConditions = AdjustmentConditions;
