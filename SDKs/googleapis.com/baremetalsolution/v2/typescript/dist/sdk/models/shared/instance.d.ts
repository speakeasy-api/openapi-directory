import { SpeakeasyBase } from "../../../internal/utils";
import { GoogleCloudBaremetalsolutionV2LogicalInterface } from "./googlecloudbaremetalsolutionv2logicalinterface";
import { Lun, LunInput } from "./lun";
import { Network } from "./network";
import { Volume, VolumeInput } from "./volume";
/**
 * Output only. The state of the server.
 */
export declare enum InstanceStateEnum {
    StateUnspecified = "STATE_UNSPECIFIED",
    Provisioning = "PROVISIONING",
    Running = "RUNNING",
    Deleted = "DELETED",
    Updating = "UPDATING",
    Starting = "STARTING",
    Stopping = "STOPPING",
    Shutdown = "SHUTDOWN"
}
/**
 * The workload profile for the instance.
 */
export declare enum InstanceWorkloadProfileEnum {
    WorkloadProfileUnspecified = "WORKLOAD_PROFILE_UNSPECIFIED",
    WorkloadProfileGeneric = "WORKLOAD_PROFILE_GENERIC",
    WorkloadProfileHana = "WORKLOAD_PROFILE_HANA"
}
/**
 * A server.
 */
export declare class Instance extends SpeakeasyBase {
    /**
     * Output only. Create a time stamp.
     */
    createTime?: string;
    /**
     * Output only. The firmware version for the instance.
     */
    firmwareVersion?: string;
    /**
     * True if you enable hyperthreading for the server, otherwise false. The default value is false.
     */
    hyperthreadingEnabled?: boolean;
    /**
     * Output only. An identifier for the `Instance`, generated by the backend.
     */
    id?: string;
    /**
     * Output only. True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.
     */
    interactiveSerialConsoleEnabled?: boolean;
    /**
     * Labels as key value pairs.
     */
    labels?: Record<string, string>;
    /**
     * List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
     */
    logicalInterfaces?: GoogleCloudBaremetalsolutionV2LogicalInterface[];
    /**
     * Output only. Text field about info for logging in.
     */
    loginInfo?: string;
    /**
     * Immutable. List of LUNs associated with this server.
     */
    luns?: Lun[];
    /**
     * Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
     */
    machineType?: string;
    /**
     * Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
     */
    name?: string;
    /**
     * Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
     */
    networkTemplate?: string;
    /**
     * Output only. List of networks associated with this server.
     */
    networks?: Network[];
    /**
     * The OS image currently installed on the server.
     */
    osImage?: string;
    /**
     * Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.
     */
    pod?: string;
    /**
     * Output only. The state of the server.
     */
    state?: InstanceStateEnum;
    /**
     * Output only. Update a time stamp.
     */
    updateTime?: string;
    /**
     * Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
     */
    volumes?: Volume[];
    /**
     * The workload profile for the instance.
     */
    workloadProfile?: InstanceWorkloadProfileEnum;
}
/**
 * A server.
 */
export declare class InstanceInput extends SpeakeasyBase {
    /**
     * True if you enable hyperthreading for the server, otherwise false. The default value is false.
     */
    hyperthreadingEnabled?: boolean;
    /**
     * Labels as key value pairs.
     */
    labels?: Record<string, string>;
    /**
     * List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
     */
    logicalInterfaces?: GoogleCloudBaremetalsolutionV2LogicalInterface[];
    /**
     * Immutable. List of LUNs associated with this server.
     */
    luns?: LunInput[];
    /**
     * Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
     */
    machineType?: string;
    /**
     * Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
     */
    name?: string;
    /**
     * Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
     */
    networkTemplate?: string;
    /**
     * The OS image currently installed on the server.
     */
    osImage?: string;
    /**
     * Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.
     */
    pod?: string;
    /**
     * Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
     */
    volumes?: VolumeInput[];
    /**
     * The workload profile for the instance.
     */
    workloadProfile?: InstanceWorkloadProfileEnum;
}
