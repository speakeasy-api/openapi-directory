// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetAllPaymentsSecurity struct {
	APISecretKey string `security:"scheme,type=apiKey,subtype=header,name=x-api-key"`
}

// GetAllPaymentsSortEnum - Sorting order; results are sorted by creation time.
type GetAllPaymentsSortEnum string

const (
	GetAllPaymentsSortEnumAsc  GetAllPaymentsSortEnum = "asc"
	GetAllPaymentsSortEnumDesc GetAllPaymentsSortEnum = "desc"
)

func (e *GetAllPaymentsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = GetAllPaymentsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllPaymentsSortEnum: %s", s)
	}
}

type GetAllPaymentsRequest struct {
	// Page number for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
	PageNumber *string `queryParam:"style=form,explode=true,name=page_number"`
	// Page size for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time.
	PageSize *string `queryParam:"style=form,explode=true,name=page_size"`
	// Payment type of the payment to be retrieved from the API (electronic_fund_transfer, card)
	PaymentType *string `queryParam:"style=form,explode=true,name=payment_type"`
	// Purpose of the payment to be retrieved from the API (cash, invest)
	Purpose *string `queryParam:"style=form,explode=true,name=purpose"`
	// Service provider of the payment to be retrieved from the API (truelayer, stripe, none)
	ServiceProvider *string `queryParam:"style=form,explode=true,name=service_provider"`
	// Sorting order; results are sorted by creation time.
	Sort *GetAllPaymentsSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// GetAllPayments500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type GetAllPayments500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetAllPayments429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type GetAllPayments429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetAllPayments404ApplicationJSON - The specified resource was not found
type GetAllPayments404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetAllPayments403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type GetAllPayments403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetAllPayments401ApplicationJSON - You do not have permissions to access this resource.
type GetAllPayments401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetAllPayments400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type GetAllPayments400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

type GetAllPayments200ApplicationJSONRootTypeForPaymentsInvestmentInstructions struct {
	InvestmentProductID string `json:"investment_product_id"`
	// Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed.
	Quantity *string `json:"quantity,omitempty"`
	// Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25).
	Value *string `json:"value,omitempty"`
}

type GetAllPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnum string

const (
	GetAllPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnumCard                   GetAllPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnum = "card"
	GetAllPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnumElectronicFundTransfer GetAllPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnum = "electronic_fund_transfer"
)

func (e *GetAllPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "card":
		fallthrough
	case "electronic_fund_transfer":
		*e = GetAllPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnum: %s", s)
	}
}

type GetAllPayments200ApplicationJSONRootTypeForPaymentsPurposeEnum string

const (
	GetAllPayments200ApplicationJSONRootTypeForPaymentsPurposeEnumCash   GetAllPayments200ApplicationJSONRootTypeForPaymentsPurposeEnum = "cash"
	GetAllPayments200ApplicationJSONRootTypeForPaymentsPurposeEnumInvest GetAllPayments200ApplicationJSONRootTypeForPaymentsPurposeEnum = "invest"
)

func (e *GetAllPayments200ApplicationJSONRootTypeForPaymentsPurposeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cash":
		fallthrough
	case "invest":
		*e = GetAllPayments200ApplicationJSONRootTypeForPaymentsPurposeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllPayments200ApplicationJSONRootTypeForPaymentsPurposeEnum: %s", s)
	}
}

type GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum string

const (
	GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnumStripe    GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum = "stripe"
	GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnumTruelayer GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum = "truelayer"
	GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnumNone      GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum = "none"
)

func (e *GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "stripe":
		fallthrough
	case "truelayer":
		fallthrough
	case "none":
		*e = GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum: %s", s)
	}
}

// GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderParams - Custom parameters based on prerequisites of the selected provider
type GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderParams struct {
	// Bank account ID of Investor (include if service_provider="truelayer")
	BankAccountID *string `json:"bank_account_id,omitempty"`
	// URL for Hosted Payment Page (include if service_provider="truelayer")
	HppURL *string `json:"hpp_url,omitempty"`
	// Payment intent ID (include if service_provider="truelayer")
	PaymentIntentID *string `json:"payment_intent_id,omitempty"`
}

// GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnum - Status of the payment
//
// - `pending_confirmation`: Payment is pending approvals and confirmation
// - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque)
// - `succeeded`: Payment is successful. Cash is cleaned in account.
// - `cancelled`: Payment cancelled, and any held funds have been returned.
// - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
type GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnum string

const (
	GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnumPendingConfirmation GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnum = "pending_confirmation"
	GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnumProcessing          GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnum = "processing"
	GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnumSucceeded           GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnum = "succeeded"
	GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnumCancelled           GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnum = "cancelled"
	GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnumFailed              GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnum = "failed"
)

func (e *GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending_confirmation":
		fallthrough
	case "processing":
		fallthrough
	case "succeeded":
		fallthrough
	case "cancelled":
		fallthrough
	case "failed":
		*e = GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnum: %s", s)
	}
}

type GetAllPayments200ApplicationJSONRootTypeForPayments struct {
	Amount   string `json:"amount"`
	Currency string `json:"currency"`
	// mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager)
	InvestmentInstructions []GetAllPayments200ApplicationJSONRootTypeForPaymentsInvestmentInstructions `json:"investment_instructions,omitempty"`
	PaymentType            GetAllPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnum          `json:"payment_type"`
	PotID                  string                                                                      `json:"pot_id"`
	Purpose                GetAllPayments200ApplicationJSONRootTypeForPaymentsPurposeEnum              `json:"purpose"`
	ServiceProvider        GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum      `json:"service_provider"`
	// Custom parameters based on prerequisites of the selected provider
	ServiceProviderParams *GetAllPayments200ApplicationJSONRootTypeForPaymentsServiceProviderParams `json:"service_provider_params,omitempty"`
	// Status of the payment
	//
	// - `pending_confirmation`: Payment is pending approvals and confirmation
	// - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque)
	// - `succeeded`: Payment is successful. Cash is cleaned in account.
	// - `cancelled`: Payment cancelled, and any held funds have been returned.
	// - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
	Status        GetAllPayments200ApplicationJSONRootTypeForPaymentsStatusEnum `json:"status"`
	TransactionID string                                                        `json:"transaction_id"`
}

// GetAllPayments200ApplicationJSON - A paged array of Payments
type GetAllPayments200ApplicationJSON struct {
	// This indicates the availability of the next page
	NextPageAvailable bool                                                  `json:"next_page_available"`
	Payments          []GetAllPayments200ApplicationJSONRootTypeForPayments `json:"payments"`
}

type GetAllPaymentsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A paged array of Payments
	GetAllPayments200ApplicationJSONObject *GetAllPayments200ApplicationJSON
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	GetAllPayments400ApplicationJSONObject *GetAllPayments400ApplicationJSON
	// You do not have permissions to access this resource.
	GetAllPayments401ApplicationJSONObject *GetAllPayments401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	GetAllPayments403ApplicationJSONObject *GetAllPayments403ApplicationJSON
	// The specified resource was not found
	GetAllPayments404ApplicationJSONObject *GetAllPayments404ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	GetAllPayments429ApplicationJSONObject *GetAllPayments429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	GetAllPayments500ApplicationJSONObject *GetAllPayments500ApplicationJSON
}
