// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DfareportingOrdersListSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

// DfareportingOrdersListSortFieldEnum - Field by which to sort the list.
type DfareportingOrdersListSortFieldEnum string

const (
	DfareportingOrdersListSortFieldEnumID   DfareportingOrdersListSortFieldEnum = "ID"
	DfareportingOrdersListSortFieldEnumName DfareportingOrdersListSortFieldEnum = "NAME"
)

func (e *DfareportingOrdersListSortFieldEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ID":
		fallthrough
	case "NAME":
		*e = DfareportingOrdersListSortFieldEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DfareportingOrdersListSortFieldEnum: %s", s)
	}
}

// DfareportingOrdersListSortOrderEnum - Order of sorted results.
type DfareportingOrdersListSortOrderEnum string

const (
	DfareportingOrdersListSortOrderEnumAscending  DfareportingOrdersListSortOrderEnum = "ASCENDING"
	DfareportingOrdersListSortOrderEnumDescending DfareportingOrdersListSortOrderEnum = "DESCENDING"
)

func (e *DfareportingOrdersListSortOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ASCENDING":
		fallthrough
	case "DESCENDING":
		*e = DfareportingOrdersListSortOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DfareportingOrdersListSortOrderEnum: %s", s)
	}
}

type DfareportingOrdersListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Select only orders with these IDs.
	Ids []string `queryParam:"style=form,explode=true,name=ids"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Maximum number of results to return.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Value of the nextPageToken from the previous result page.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// User profile ID associated with this request.
	ProfileID string `pathParam:"style=simple,explode=false,name=profileId"`
	// Project ID for orders.
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Allows searching for orders by name or ID. Wildcards (*) are allowed. For example, "order*2015" will return orders with names like "order June 2015", "order April 2015", or simply "order 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "order" will match orders with name "my order", "order 2015", or simply "order".
	SearchString *string `queryParam:"style=form,explode=true,name=searchString"`
	// Select only orders that are associated with these site IDs.
	SiteID []string `queryParam:"style=form,explode=true,name=siteId"`
	// Field by which to sort the list.
	SortField *DfareportingOrdersListSortFieldEnum `queryParam:"style=form,explode=true,name=sortField"`
	// Order of sorted results.
	SortOrder *DfareportingOrdersListSortOrderEnum `queryParam:"style=form,explode=true,name=sortOrder"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type DfareportingOrdersListResponse struct {
	ContentType string
	// Successful response
	OrdersListResponse *shared.OrdersListResponse
	StatusCode         int
	RawResponse        *http.Response
}
