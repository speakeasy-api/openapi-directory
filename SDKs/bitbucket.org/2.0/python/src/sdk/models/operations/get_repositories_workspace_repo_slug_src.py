"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import paginated_treeentries as shared_paginated_treeentries
from ..shared import security as shared_security
from enum import Enum
from typing import Any, Optional


@dataclasses.dataclass
class GetRepositoriesWorkspaceRepoSlugSrcSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    oauth2: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetRepositoriesWorkspaceRepoSlugSrcFormatEnum(str, Enum):
    r"""Instead of returning the file's contents, return the (json) meta data for it."""
    META = 'meta'


@dataclasses.dataclass
class GetRepositoriesWorkspaceRepoSlugSrcRequest:
    
    repo_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo_slug', 'style': 'simple', 'explode': False }})
    r"""This can either be the repository slug or the UUID of the repository,
    surrounded by curly-braces, for example: `{repository UUID}`.
    """  
    workspace: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspace', 'style': 'simple', 'explode': False }})
    r"""This can either be the workspace ID (slug) or the workspace UUID
    surrounded by curly-braces, for example: `{workspace UUID}`.
    """  
    format: Optional[GetRepositoriesWorkspaceRepoSlugSrcFormatEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""Instead of returning the file's contents, return the (json) meta data for it."""  
    

@dataclasses.dataclass
class GetRepositoriesWorkspaceRepoSlugSrcResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""If the path or commit in the URL does not exist."""  
    paginated_treeentries: Optional[shared_paginated_treeentries.PaginatedTreeentries] = dataclasses.field(default=None)
    r"""If the path matches a file, then the raw contents of the file are
    returned (unless the `format=meta` query parameter was provided,
    in which case a json document containing the file's meta data is
    returned). If the path matches a directory, then a paginated
    list of file and directory entries is returned (if the
    `format=meta` query parameter was provided, then the json document
    containing the directory's meta data is returned).
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    