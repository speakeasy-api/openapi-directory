/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Config } from "./config";
import { Expose, Transform } from "class-transformer";

/**
 * The state of enablement for the service at its level of the resource hierarchy. A DISABLED state will override all module enablement_states to DISABLED.
 */
export enum WebSecurityScannerSettingsServiceEnablementStateEnum {
  EnablementStateUnspecified = "ENABLEMENT_STATE_UNSPECIFIED",
  Inherited = "INHERITED",
  Enabled = "ENABLED",
  Disabled = "DISABLED",
}

/**
 * Resource capturing the settings for the Web Security Scanner service.
 */
export class WebSecurityScannerSettings extends SpeakeasyBase {
  /**
   * The configurations including the state of enablement for the service's different modules. The absence of a module in the map implies its configuration is inherited from its parent's.
   */
  @SpeakeasyMetadata({ elemType: Config })
  @Expose({ name: "modules" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Config> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Config);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  modules?: Record<string, Config>;

  /**
   * The resource name of the WebSecurityScannerSettings. Formats: * organizations/{organization}/webSecurityScannerSettings * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The state of enablement for the service at its level of the resource hierarchy. A DISABLED state will override all module enablement_states to DISABLED.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceEnablementState" })
  serviceEnablementState?: WebSecurityScannerSettingsServiceEnablementStateEnum;

  /**
   * Output only. The time the settings were last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}
