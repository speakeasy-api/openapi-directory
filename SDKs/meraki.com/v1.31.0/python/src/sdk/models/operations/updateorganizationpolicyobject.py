"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationPolicyObjectRequestBody:
    
    cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cidr'), 'exclude': lambda f: f is None }})
    r"""CIDR Value of a policy object (e.g. 10.11.12.1/24\\")"""  
    fqdn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fqdn'), 'exclude': lambda f: f is None }})
    r"""Fully qualified domain name of policy object (e.g. \\"example.com\\")"""  
    group_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of policy object groups the policy object belongs to"""  
    ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip'), 'exclude': lambda f: f is None }})
    r"""IP Address of a policy object (e.g. \\"1.2.3.4\\")"""  
    mask: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mask'), 'exclude': lambda f: f is None }})
    r"""Mask of a policy object (e.g. \\"255.255.0.0\\")"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of a policy object, unique within the organization (alphanumeric, space, dash, or underscore characters only)"""  
    

@dataclasses.dataclass
class UpdateOrganizationPolicyObjectRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    policy_object_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'policyObjectId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateOrganizationPolicyObjectRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateOrganizationPolicyObjectResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_organization_policy_object_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    