// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateConfigInputCountryEnum - Country where this set of rules applies. Use "all" if the check type searches by name by relying on international databases
type CreateConfigInputCountryEnum string

const (
	CreateConfigInputCountryEnumAll CreateConfigInputCountryEnum = "ALL"
	CreateConfigInputCountryEnumBr  CreateConfigInputCountryEnum = "BR"
	CreateConfigInputCountryEnumCl  CreateConfigInputCountryEnum = "CL"
	CreateConfigInputCountryEnumCo  CreateConfigInputCountryEnum = "CO"
	CreateConfigInputCountryEnumCr  CreateConfigInputCountryEnum = "CR"
	CreateConfigInputCountryEnumEc  CreateConfigInputCountryEnum = "EC"
	CreateConfigInputCountryEnumMx  CreateConfigInputCountryEnum = "MX"
	CreateConfigInputCountryEnumPe  CreateConfigInputCountryEnum = "PE"
	CreateConfigInputCountryEnumAr  CreateConfigInputCountryEnum = "AR"
)

func (e *CreateConfigInputCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ALL":
		fallthrough
	case "BR":
		fallthrough
	case "CL":
		fallthrough
	case "CO":
		fallthrough
	case "CR":
		fallthrough
	case "EC":
		fallthrough
	case "MX":
		fallthrough
	case "PE":
		fallthrough
	case "AR":
		*e = CreateConfigInputCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigInputCountryEnum: %s", s)
	}
}

// CreateConfigInput - Represents paramaters required to create a score configuration
type CreateConfigInput struct {
	// Country where this set of rules applies. Use "all" if the check type searches by name by relying on international databases
	Country CreateConfigInputCountryEnum `form:"name=country"`
	// Affiliation and insurance weight for score calculation. From 0 to 1
	DatasetAffiliationsAndInsurances *float32 `form:"name=dataset_affiliations_and_insurances"`
	// Alert in media weight for score calculation. From 0 to 1
	DatasetAlertInMedia *float32 `form:"name=dataset_alert_in_media"`
	// Business background weight for score calculation. From 0 to 1
	DatasetBusinessBackground *float32 `form:"name=dataset_business_background"`
	// Criminal record weight for score calculation. From 0 to 1
	DatasetCriminalRecord *float32 `form:"name=dataset_criminal_record"`
	// Driving license weight for score calculation. From 0 to 1
	DatasetDrivingLicenses *float32 `form:"name=dataset_driving_licenses"`
	// International background weight for score calculation. From 0 to 1
	DatasetInternationalBackground *float32 `form:"name=dataset_international_background"`
	// Legal background weight for score calculation. From 0 to 1
	DatasetLegalBackground *float32 `form:"name=dataset_legal_background"`
	// Personal identity weight for score calculation. From 0 to 1
	DatasetPersonalIdentity *float32 `form:"name=dataset_personal_identity"`
	// Professional background weight for score calculation. From 0 to 1
	DatasetProfessionalBackground *float32 `form:"name=dataset_professional_background"`
	// Taxes and financial background weight for score calculation. From 0 to 1
	DatasetTaxesAndFinances *float32 `form:"name=dataset_taxes_and_finances"`
	// Traffic fines weight for score calculation. From 0 to 1
	DatasetTrafficFines *float32 `form:"name=dataset_traffic_fines"`
	// Vehicle information weight for score calculation. From 0 to 1
	DatasetVehicleInformation *float32 `form:"name=dataset_vehicle_information"`
	// Vehicle certificate background weight for score calculation. From 0 to 1
	DatasetVehiclePermits *float32 `form:"name=dataset_vehicle_permits"`
	// Score configuration name. It cannot be person, vehicle, or company
	Type string `form:"name=type"`
}
