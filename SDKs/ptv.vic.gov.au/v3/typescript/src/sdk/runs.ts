/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Runs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * View all trip/service runs for a specific route ID
   */
  runsForRoute(
    req: operations.RunsForRouteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RunsForRouteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunsForRouteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/runs/route/{route_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunsForRouteResponse =
        new operations.RunsForRouteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3RunsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3RunsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3RunsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3RunsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View all trip/service runs for a specific route ID and route type
   */
  runsForRouteAndRouteType(
    req: operations.RunsForRouteAndRouteTypeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RunsForRouteAndRouteTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunsForRouteAndRouteTypeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/runs/route/{route_id}/route_type/{route_type}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunsForRouteAndRouteTypeResponse =
        new operations.RunsForRouteAndRouteTypeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3RunsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3RunsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3RunsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3RunsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View all trip/service runs for a specific run_ref
   */
  runsForRun(
    req: operations.RunsForRunRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RunsForRunResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunsForRunRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/runs/{run_ref}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunsForRunResponse =
        new operations.RunsForRunResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3RunsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3RunsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3RunsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3RunsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View the trip/service run for a specific run_ref and route type
   */
  runsForRunAndRouteType(
    req: operations.RunsForRunAndRouteTypeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RunsForRunAndRouteTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RunsForRunAndRouteTypeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/runs/{run_ref}/route_type/{route_type}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RunsForRunAndRouteTypeResponse =
        new operations.RunsForRunAndRouteTypeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3RunResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3RunResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3RunResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3RunResponse
            );
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
