"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Calendars:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_setup_v1_calendars_block_id_(self, request: operations.DeleteSetupV1CalendarsBlockIDRequest) -> operations.DeleteSetupV1CalendarsBlockIDResponse:
        r"""Delete Calendar Block
        <p>Use this endpoint to permanently <b>Delete</b> a calendar block. A valid <b>calendarBlock id</b> is required.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSetupV1CalendarsBlockIDRequest, base_url, '/setup/v1/calendars/block/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSetupV1CalendarsBlockIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalendarBlockViewModel])
                res.calendar_block_view_model = out

        return res

    def delete_setup_v1_calendars_id_(self, request: operations.DeleteSetupV1CalendarsIDRequest) -> operations.DeleteSetupV1CalendarsIDResponse:
        r"""Delete Calendar
        <p>Use this endpoint to <b>Delete</b> a calendar object. A valid <b>calendar id</b> is required. The calendar is not permanently deleted and can be recovered by using the <i>PUT \u200B/setup\u200B/v1\u200B/calendars\u200B/{id}\u200B/recover </i>endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSetupV1CalendarsIDRequest, base_url, '/setup/v1/calendars/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSetupV1CalendarsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScheduleViewModel])
                res.schedule_view_model = out

        return res

    def get_setup_v1_calendars(self, request: operations.GetSetupV1CalendarsRequest) -> operations.GetSetupV1CalendarsResponse:
        r"""List Calendars
        <p>Use this endpoint to return a <b>List of Calendars</b> from the requested location. If not specified, the business location defaults to the primary business location. </p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/calendars'
        
        query_params = utils.get_query_params(operations.GetSetupV1CalendarsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CalendarsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScheduleListViewModel])
                res.schedule_list_view_model = out

        return res

    def get_setup_v1_calendars_blocks_id_(self, request: operations.GetSetupV1CalendarsBlocksIDRequest) -> operations.GetSetupV1CalendarsBlocksIDResponse:
        r"""Get Calendar Block
        <p>Use this endpoint to return a <b>Calendar Block</b>. A valid <b>calendarBlock id</b> is required. </p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1CalendarsBlocksIDRequest, base_url, '/setup/v1/calendars/blocks/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CalendarsBlocksIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalendarBlockViewModel])
                res.calendar_block_view_model = out

        return res

    def get_setup_v1_calendars_id_(self, request: operations.GetSetupV1CalendarsIDRequest) -> operations.GetSetupV1CalendarsIDResponse:
        r"""Get Calendar
        <p>Use this endpoint to return a <b>Calendar</b> object. A valid <b>calendar id</b> is required.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1CalendarsIDRequest, base_url, '/setup/v1/calendars/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CalendarsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScheduleViewModel])
                res.schedule_view_model = out

        return res

    def get_setup_v1_calendars_id_blocks(self, request: operations.GetSetupV1CalendarsIDBlocksRequest) -> operations.GetSetupV1CalendarsIDBlocksResponse:
        r"""List Calendar Blocks
        <p>Use this endpoint to return a <b>List of Calendar Blocks</b> for the requested calendar. A valid <b>calendar id</b> is required. </p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1CalendarsIDBlocksRequest, base_url, '/setup/v1/calendars/{id}/blocks', request)
        
        query_params = utils.get_query_params(operations.GetSetupV1CalendarsIDBlocksRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CalendarsIDBlocksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalendarBlockListViewModel])
                res.calendar_block_list_view_model = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def get_setup_v1_calendars_id_services(self, request: operations.GetSetupV1CalendarsIDServicesRequest) -> operations.GetSetupV1CalendarsIDServicesResponse:
        r"""List Calendar Services
        <p>Use this endpoint to return a <b>List of Linked Services</b> of a calendar object. A valid <b>calendar id</b> is required. Find calendar id's by using the <i>GET /setup/v1/calendars</i> endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1CalendarsIDServicesRequest, base_url, '/setup/v1/calendars/{id}/services', request)
        
        query_params = utils.get_query_params(operations.GetSetupV1CalendarsIDServicesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CalendarsIDServicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceListViewModel])
                res.service_list_view_model = out

        return res

    def post_setup_v1_calendars(self, request: shared.ScheduleInputModel) -> operations.PostSetupV1CalendarsResponse:
        r"""DEPRECATING: Create
        <p>
          <b>DEPRECATING:</b> Create Calendar</p>
        <p>We are no longer supporting Multiple Calendar Functionality as it is part of our Legacy Application and has no relevance in the API.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/calendars'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSetupV1CalendarsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScheduleViewModel])
                res.schedule_view_model = out

        return res

    def post_setup_v1_calendars_id_block(self, request: operations.PostSetupV1CalendarsIDBlockRequest) -> operations.PostSetupV1CalendarsIDBlockResponse:
        r"""Create Calendar Block
        <p>Use this endpoint to <b>Create</b> a Calendar Block. A valid <b>calendar id</b> is required.</p>
        <p>Required fields: <b>startDate, endDate, startTime, endTime</b> and <b>reason</b>.</p>
        <p>Calendar blocks can be set to specific time ranges or for the whole day. Th block a whole day set the startTime to 0 and endTime to 2400.</p>
        <p>Calendar blocks can be for a specific date range instance or set to repeat at a specified frequency.</p>
        <p>
          <b>Repeat object: (repeats = true)</b>
        </p>
        <p>The <b>frequency</b> can be set to a value of <b>D, W or M</b> for <b>Day, Week</b> or <b>Month</b> respectively.</p>
        <p>Use the <b>interval</b> property to specify the interval that the block repeats. For example, an interval of 2 for a weekly block means that the block will repeat every 2nd week beginning at the day specified. A daily block with an interval of 10 means the block will repeat every 10 days. The interval property applies to all repeat frequencies. <b>If using the repeat functionality an interval value is required</b>.</p>
        <p>
          <b>DAILY BLOCKS</b>: Will repeat for each day of the week for the date range specified for the interval specified.  An interval value of “1” repeats every day, and an interval value of “3” is every 3rd day.</p>
        <p>
          <b>WEEKLY BLOCKS</b>: Will repeat only on the specified days of the week for the date range specified. For weekly the <b>frequency</b>  is required and should be set to <b>“W”</b>.  You must specify the <b>weekdays</b> parameter. Weekdays are expressed as a string of digits with each single digit in the string representing a day of the week. The possible values are <b>0,1,2,3,4,5,6</b> where <b>0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday</b>. For example, a weekly frequency with an interval of “1”, and an entry of weekdays = “24”, will repeat each week on Tuesday and Thursday for the duration of the block date range.</p>
        <p>
          <b>MONTHLY BLOCKS</b>: Will repeat either on the day of the month specified in the <b>monthDay</b> property or on the day of the week and week of the month specified by the <b>monthType</b> property.  In both cases <b>frequency</b> is required and should be set to <b>“M”</b>, monthly, <b>monthDay</b> is the day of the month you want blocked.  If monthDay=’15’ this means to block the 15th of every month in the date range requested. Using monthDay in conjunction with monthType addresses “day of the week and week of the month” scenario.  There are two possible values for monthType: <b>D for Day of Month</b> or <b>W for Week of Month.</b> For <b>monthType D</b>, monthDay value must be between 1 and 31. It is the day of the month to repeat on. For <b>monthType M</b>, monthDay value contains 2 digits: day of week (0-6), (0,1,2,3,4,5,6 where 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) and week of month (1-5). 1 being the first week, 2 being the second. The third Thursday of the month is depicted as a monthType=”M” and monthDay=”43”.</p>
        <p>
          <b>Repeats will end on the date specified by the end date.</b>
        </p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSetupV1CalendarsIDBlockRequest, base_url, '/setup/v1/calendars/{id}/block', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "calendar_block_input_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSetupV1CalendarsIDBlockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceBlockViewModel])
                res.resource_block_view_model = out

        return res

    def put_setup_v1_calendars_block_id_(self, request: operations.PutSetupV1CalendarsBlockIDRequest) -> operations.PutSetupV1CalendarsBlockIDResponse:
        r"""Update Calendar Block
        <p>Use this endpoint to <b>Create</b> a Calendar Block. A valid <b>calendarBlock id</b> is required. Refer to the <i>POST \u200B/setup\u200B/v1\u200B/calendars\u200B/{id}\u200B/block</i> endpoint for fieldnames and details.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSetupV1CalendarsBlockIDRequest, base_url, '/setup/v1/calendars/block/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "calendar_block_update_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSetupV1CalendarsBlockIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CalendarBlockViewModel])
                res.calendar_block_view_model = out

        return res

    def put_setup_v1_calendars_id_(self, request: operations.PutSetupV1CalendarsIDRequest) -> operations.PutSetupV1CalendarsIDResponse:
        r"""Update Calendar
        <p>Use this endpoint to <b>Update</b> a calendar object. A valid <b>calendar id</b> is required. When your company was created a calendar object was automatically created with 24-hour weekly availability. Its <b>name = Main</b>, the <b>type = resource</b> and by default the <b>interval = 30 mins</b>. We are currently supporting resource calendar type. Other types were part of our Legacy Application and has no relevance in the API product.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSetupV1CalendarsIDRequest, base_url, '/setup/v1/calendars/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "schedule_update_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSetupV1CalendarsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScheduleViewModel])
                res.schedule_view_model = out

        return res

    def put_setup_v1_calendars_id_recover(self, request: operations.PutSetupV1CalendarsIDRecoverRequest) -> operations.PutSetupV1CalendarsIDRecoverResponse:
        r"""Recover Calendar
        <p>Use this endpoint to <b>Recover</b> a previously deleted calendar object. A valid <b>calendar id</b> is required.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSetupV1CalendarsIDRecoverRequest, base_url, '/setup/v1/calendars/{id}/recover', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSetupV1CalendarsIDRecoverResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScheduleViewModel])
                res.schedule_view_model = out

        return res

    