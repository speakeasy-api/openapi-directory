"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def datacatalog_projects_locations_entry_groups_create(self, request: operations.DatacatalogProjectsLocationsEntryGroupsCreateRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsCreateSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsCreateResponse:
        r"""Creates an entry group. An entry group contains logically related entries together with [Cloud Identity and Access Management](/data-catalog/docs/concepts/iam) policies. These policies specify users who can create, edit, and view entries within entry groups. Data Catalog automatically creates entry groups with names that start with the `@` symbol for the following resources: * BigQuery entries (`@bigquery`) * Pub/Sub topics (`@pubsub`) * Dataproc Metastore services (`@dataproc_metastore_{SERVICE_NAME_HASH}`) You can create your own entry groups for Cloud Storage fileset entries and custom entries together with the corresponding IAM policies. User-created entry groups can't contain the `@` symbol, it is reserved for automatically created groups. Entry groups, like entries, can be searched. A maximum of 10,000 entry groups may be created per organization across all locations. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsCreateRequest, base_url, '/v1/{parent}/entryGroups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_entry_group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1EntryGroup])
                res.google_cloud_datacatalog_v1_entry_group = out

        return res

    def datacatalog_projects_locations_entry_groups_entries_create(self, request: operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateResponse:
        r"""Creates an entry. You can create entries only with 'FILESET', 'CLUSTER', 'DATA_STREAM', or custom types. Data Catalog automatically creates entries with other types during metadata ingestion from integrated systems. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). An entry group can have a maximum of 100,000 entries."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest, base_url, '/v1/{parent}/entries', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_entry_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsEntriesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1Entry])
                res.google_cloud_datacatalog_v1_entry = out

        return res

    def datacatalog_projects_locations_entry_groups_entries_import(self, request: operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportResponse:
        r"""Imports entries from a source, such as data previously dumped into a Cloud Storage bucket, into Data Catalog. Import of entries is a sync operation that reconciles the state of the third-party system with the Data Catalog. `ImportEntries` accepts source data snapshots of a third-party system. Snapshot should be delivered as a .wire or base65-encoded .txt file containing a sequence of Protocol Buffer messages of DumpItem type. `ImportEntries` returns a long-running operation resource that can be queried with Operations.GetOperation to return ImportEntriesMetadata and an ImportEntriesResponse message."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportRequest, base_url, '/v1/{parent}/entries:import', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_import_entries_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsEntriesImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datacatalog_projects_locations_entry_groups_entries_list(self, request: operations.DatacatalogProjectsLocationsEntryGroupsEntriesListRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesListSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsEntriesListResponse:
        r"""Lists entries. Note: Currently, this method can list only custom entries. To get a list of both custom and automatically created entries, use SearchCatalog."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsEntriesListRequest, base_url, '/v1/{parent}/entries', request)
        
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsEntriesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsEntriesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1ListEntriesResponse])
                res.google_cloud_datacatalog_v1_list_entries_response = out

        return res

    def datacatalog_projects_locations_entry_groups_entries_modify_entry_contacts(self, request: operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsResponse:
        r"""Modifies contacts, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateContacts` IAM permission on the corresponding project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsRequest, base_url, '/v1/{name}:modifyEntryContacts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_modify_entry_contacts_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryContactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1Contacts])
                res.google_cloud_datacatalog_v1_contacts = out

        return res

    def datacatalog_projects_locations_entry_groups_entries_modify_entry_overview(self, request: operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewResponse:
        r"""Modifies entry overview, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateOverview` IAM permission on the corresponding project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewRequest, base_url, '/v1/{name}:modifyEntryOverview', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_modify_entry_overview_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsEntriesModifyEntryOverviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1EntryOverview])
                res.google_cloud_datacatalog_v1_entry_overview = out

        return res

    def datacatalog_projects_locations_entry_groups_entries_star(self, request: operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarResponse:
        r"""Marks an Entry as starred by the current user. Starring information is private to each user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarRequest, base_url, '/v1/{name}:star', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsEntriesStarResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_cloud_datacatalog_v1_star_entry_response = out

        return res

    def datacatalog_projects_locations_entry_groups_entries_tags_reconcile(self, request: operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileResponse:
        r"""`ReconcileTags` creates or updates a list of tags on the entry. If the ReconcileTagsRequest.force_delete_missing parameter is set, the operation deletes tags not included in the input tag list. `ReconcileTags` returns a long-running operation resource that can be queried with Operations.GetOperation to return ReconcileTagsMetadata and a ReconcileTagsResponse message."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileRequest, base_url, '/v1/{parent}/tags:reconcile', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_reconcile_tags_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsEntriesTagsReconcileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datacatalog_projects_locations_entry_groups_entries_unstar(self, request: operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarResponse:
        r"""Marks an Entry as NOT starred by the current user. Starring information is private to each user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarRequest, base_url, '/v1/{name}:unstar', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsEntriesUnstarResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_cloud_datacatalog_v1_unstar_entry_response = out

        return res

    def datacatalog_projects_locations_entry_groups_list(self, request: operations.DatacatalogProjectsLocationsEntryGroupsListRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsListSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsListResponse:
        r"""Lists entry groups."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsListRequest, base_url, '/v1/{parent}/entryGroups', request)
        
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1ListEntryGroupsResponse])
                res.google_cloud_datacatalog_v1_list_entry_groups_response = out

        return res

    def datacatalog_projects_locations_entry_groups_tags_create(self, request: operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateResponse:
        r"""Creates a tag and assigns it to: * An Entry if the method name is `projects.locations.entryGroups.entries.tags.create`. * Or EntryGroupif the method name is `projects.locations.entryGroups.tags.create`. Note: The project identified by the `parent` parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest, base_url, '/v1/{parent}/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_tag_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsTagsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1Tag])
                res.google_cloud_datacatalog_v1_tag = out

        return res

    def datacatalog_projects_locations_entry_groups_tags_list(self, request: operations.DatacatalogProjectsLocationsEntryGroupsTagsListRequest, security: operations.DatacatalogProjectsLocationsEntryGroupsTagsListSecurity) -> operations.DatacatalogProjectsLocationsEntryGroupsTagsListResponse:
        r"""Lists tags assigned to an Entry. The columns in the response are lowercased."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsEntryGroupsTagsListRequest, base_url, '/v1/{parent}/tags', request)
        
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsEntryGroupsTagsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsEntryGroupsTagsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1ListTagsResponse])
                res.google_cloud_datacatalog_v1_list_tags_response = out

        return res

    def datacatalog_projects_locations_operations_cancel(self, request: operations.DatacatalogProjectsLocationsOperationsCancelRequest, security: operations.DatacatalogProjectsLocationsOperationsCancelSecurity) -> operations.DatacatalogProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsOperationsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def datacatalog_projects_locations_operations_list(self, request: operations.DatacatalogProjectsLocationsOperationsListRequest, security: operations.DatacatalogProjectsLocationsOperationsListSecurity) -> operations.DatacatalogProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def datacatalog_projects_locations_tag_templates_create(self, request: operations.DatacatalogProjectsLocationsTagTemplatesCreateRequest, security: operations.DatacatalogProjectsLocationsTagTemplatesCreateSecurity) -> operations.DatacatalogProjectsLocationsTagTemplatesCreateResponse:
        r"""Creates a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTagTemplatesCreateRequest, base_url, '/v1/{parent}/tagTemplates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_tag_template_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTagTemplatesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTagTemplatesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1TagTemplate])
                res.google_cloud_datacatalog_v1_tag_template = out

        return res

    def datacatalog_projects_locations_tag_templates_fields_create(self, request: operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest, security: operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateSecurity) -> operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateResponse:
        r"""Creates a field in a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest, base_url, '/v1/{parent}/fields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_tag_template_field_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTagTemplatesFieldsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1TagTemplateField])
                res.google_cloud_datacatalog_v1_tag_template_field = out

        return res

    def datacatalog_projects_locations_tag_templates_fields_enum_values_rename(self, request: operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest, security: operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameSecurity) -> operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameResponse:
        r"""Renames an enum value in a tag template. Within a single enum field, enum values must be unique."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest, base_url, '/v1/{name}:rename', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_rename_tag_template_field_enum_value_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTagTemplatesFieldsEnumValuesRenameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1TagTemplateField])
                res.google_cloud_datacatalog_v1_tag_template_field = out

        return res

    def datacatalog_projects_locations_taxonomies_create(self, request: operations.DatacatalogProjectsLocationsTaxonomiesCreateRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesCreateSecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesCreateResponse:
        r"""Creates a taxonomy in a specified project. The taxonomy is initially empty, that is, it doesn't contain policy tags."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesCreateRequest, base_url, '/v1/{parent}/taxonomies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_taxonomy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1Taxonomy])
                res.google_cloud_datacatalog_v1_taxonomy = out

        return res

    def datacatalog_projects_locations_taxonomies_export(self, request: operations.DatacatalogProjectsLocationsTaxonomiesExportRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesExportSecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesExportResponse:
        r"""Exports taxonomies in the requested type and returns them, including their policy tags. The requested taxonomies must belong to the same project. This method generates `SerializedTaxonomy` protocol buffers with nested policy tags that can be used as input for `ImportTaxonomies` calls."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesExportRequest, base_url, '/v1/{parent}/taxonomies:export', request)
        
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesExportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesExportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1ExportTaxonomiesResponse])
                res.google_cloud_datacatalog_v1_export_taxonomies_response = out

        return res

    def datacatalog_projects_locations_taxonomies_import(self, request: operations.DatacatalogProjectsLocationsTaxonomiesImportRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesImportSecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesImportResponse:
        r"""Creates new taxonomies (including their policy tags) in a given project by importing from inlined or cross-regional sources. For a cross-regional source, new taxonomies are created by copying from a source in another region. For an inlined source, taxonomies and policy tags are created in bulk using nested protocol buffer structures."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesImportRequest, base_url, '/v1/{parent}/taxonomies:import', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_import_taxonomies_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesImportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesImportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1ImportTaxonomiesResponse])
                res.google_cloud_datacatalog_v1_import_taxonomies_response = out

        return res

    def datacatalog_projects_locations_taxonomies_list(self, request: operations.DatacatalogProjectsLocationsTaxonomiesListRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesListSecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesListResponse:
        r"""Lists all taxonomies in a project in a particular location that you have a permission to view."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesListRequest, base_url, '/v1/{parent}/taxonomies', request)
        
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1ListTaxonomiesResponse])
                res.google_cloud_datacatalog_v1_list_taxonomies_response = out

        return res

    def datacatalog_projects_locations_taxonomies_policy_tags_create(self, request: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateSecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateResponse:
        r"""Creates a policy tag in a taxonomy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest, base_url, '/v1/{parent}/policyTags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_policy_tag_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1PolicyTag])
                res.google_cloud_datacatalog_v1_policy_tag = out

        return res

    def datacatalog_projects_locations_taxonomies_policy_tags_delete(self, request: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteSecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteResponse:
        r"""Deletes a policy tag together with the following: * All of its descendant policy tags, if any * Policies associated with the policy tag and its descendants * References from BigQuery table schema of the policy tag and its descendants"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def datacatalog_projects_locations_taxonomies_policy_tags_get(self, request: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetSecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetResponse:
        r"""Gets a policy tag."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1PolicyTag])
                res.google_cloud_datacatalog_v1_policy_tag = out

        return res

    def datacatalog_projects_locations_taxonomies_policy_tags_get_iam_policy(self, request: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicySecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyResponse:
        r"""Gets the IAM policy for a policy tag or a taxonomy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest, base_url, '/v1/{resource}:getIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def datacatalog_projects_locations_taxonomies_policy_tags_list(self, request: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListSecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListResponse:
        r"""Lists all policy tags in a taxonomy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest, base_url, '/v1/{parent}/policyTags', request)
        
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1ListPolicyTagsResponse])
                res.google_cloud_datacatalog_v1_list_policy_tags_response = out

        return res

    def datacatalog_projects_locations_taxonomies_policy_tags_patch(self, request: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchSecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchResponse:
        r"""Updates a policy tag, including its display name, description, and parent policy tag."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_policy_tag_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1PolicyTag])
                res.google_cloud_datacatalog_v1_policy_tag = out

        return res

    def datacatalog_projects_locations_taxonomies_policy_tags_set_iam_policy(self, request: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicySecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyResponse:
        r"""Sets the IAM policy for a policy tag or a taxonomy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest, base_url, '/v1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def datacatalog_projects_locations_taxonomies_policy_tags_test_iam_permissions(self, request: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsSecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsResponse:
        r"""Returns your permissions on a specified policy tag or taxonomy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest, base_url, '/v1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesPolicyTagsTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    def datacatalog_projects_locations_taxonomies_replace(self, request: operations.DatacatalogProjectsLocationsTaxonomiesReplaceRequest, security: operations.DatacatalogProjectsLocationsTaxonomiesReplaceSecurity) -> operations.DatacatalogProjectsLocationsTaxonomiesReplaceResponse:
        r"""Replaces (updates) a taxonomy and all its policy tags. The taxonomy and its entire hierarchy of policy tags must be represented literally by `SerializedTaxonomy` and the nested `SerializedPolicyTag` messages. This operation automatically does the following: - Deletes the existing policy tags that are missing from the `SerializedPolicyTag`. - Creates policy tags that don't have resource names. They are considered new. - Updates policy tags with valid resources names accordingly."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatacatalogProjectsLocationsTaxonomiesReplaceRequest, base_url, '/v1/{name}:replace', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_datacatalog_v1_replace_taxonomy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatacatalogProjectsLocationsTaxonomiesReplaceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatacatalogProjectsLocationsTaxonomiesReplaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDatacatalogV1Taxonomy])
                res.google_cloud_datacatalog_v1_taxonomy = out

        return res

    