"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import filesystemconfig as shared_filesystemconfig
from ..shared import functionconfiguration as shared_functionconfiguration
from ..shared import snapstartapplyon_enum as shared_snapstartapplyon_enum
from ..shared import tracingmode_enum as shared_tracingmode_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFunctionConfigurationRequestBodyDeadLetterConfig:
    r"""The <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\\">dead-letter queue</a> for failed asynchronous invocations."""
    
    target_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetArn'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFunctionConfigurationRequestBodyEnvironment:
    r"""A function's environment variable settings. You can use environment variables to adjust your function's behavior without updating code. An environment variable is a pair of strings that are stored in a function's version-specific configuration."""
    
    variables: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Variables'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFunctionConfigurationRequestBodyEphemeralStorage:
    r"""The size of the function's <code>/tmp</code> directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB."""
    
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Size'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFunctionConfigurationRequestBodyImageConfig:
    r"""Configuration values that override the container image Dockerfile settings. For more information, see <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms\\">Container image settings</a>."""
    
    command: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Command'), 'exclude': lambda f: f is None }})  
    entry_point: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EntryPoint'), 'exclude': lambda f: f is None }})  
    working_directory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkingDirectory'), 'exclude': lambda f: f is None }})  
    
class UpdateFunctionConfigurationRequestBodyRuntimeEnum(str, Enum):
    r"""<p>The identifier of the function's <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\\">runtime</a>. Runtime is required if the deployment package is a .zip file archive.</p> <p>The following list includes deprecated runtimes. For more information, see <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-support-policy\\">Runtime deprecation policy</a>.</p>"""
    NODEJS = 'nodejs'
    NODEJS4_3 = 'nodejs4.3'
    NODEJS6_10 = 'nodejs6.10'
    NODEJS8_10 = 'nodejs8.10'
    NODEJS10_X = 'nodejs10.x'
    NODEJS12_X = 'nodejs12.x'
    NODEJS14_X = 'nodejs14.x'
    NODEJS16_X = 'nodejs16.x'
    JAVA8 = 'java8'
    JAVA8_AL2 = 'java8.al2'
    JAVA11 = 'java11'
    PYTHON2_7 = 'python2.7'
    PYTHON3_6 = 'python3.6'
    PYTHON3_7 = 'python3.7'
    PYTHON3_8 = 'python3.8'
    PYTHON3_9 = 'python3.9'
    DOTNETCORE1_0 = 'dotnetcore1.0'
    DOTNETCORE2_0 = 'dotnetcore2.0'
    DOTNETCORE2_1 = 'dotnetcore2.1'
    DOTNETCORE3_1 = 'dotnetcore3.1'
    DOTNET6 = 'dotnet6'
    NODEJS4_3_EDGE = 'nodejs4.3-edge'
    GO1_X = 'go1.x'
    RUBY2_5 = 'ruby2.5'
    RUBY2_7 = 'ruby2.7'
    PROVIDED = 'provided'
    PROVIDED_AL2 = 'provided.al2'
    NODEJS18_X = 'nodejs18.x'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFunctionConfigurationRequestBodySnapStart:
    r"""<p>The function's Lambda SnapStart setting. Set <code>ApplyOn</code> to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version.</p> <p>SnapStart is supported with the <code>java11</code> runtime. For more information, see <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html\\">Improving startup performance with Lambda SnapStart</a>.</p>"""
    
    apply_on: Optional[shared_snapstartapplyon_enum.SnapStartApplyOnEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplyOn'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFunctionConfigurationRequestBodyTracingConfig:
    r"""The function's <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html\\">X-Ray</a> tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>."""
    
    mode: Optional[shared_tracingmode_enum.TracingModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mode'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFunctionConfigurationRequestBodyVpcConfig:
    r"""The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\\">Configuring a Lambda function to access resources in a VPC</a>."""
    
    security_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroupIds'), 'exclude': lambda f: f is None }})  
    subnet_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetIds'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFunctionConfigurationRequestBody:
    
    dead_letter_config: Optional[UpdateFunctionConfigurationRequestBodyDeadLetterConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeadLetterConfig'), 'exclude': lambda f: f is None }})
    r"""The <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\\">dead-letter queue</a> for failed asynchronous invocations."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""A description of the function."""  
    environment: Optional[UpdateFunctionConfigurationRequestBodyEnvironment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})
    r"""A function's environment variable settings. You can use environment variables to adjust your function's behavior without updating code. An environment variable is a pair of strings that are stored in a function's version-specific configuration."""  
    ephemeral_storage: Optional[UpdateFunctionConfigurationRequestBodyEphemeralStorage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EphemeralStorage'), 'exclude': lambda f: f is None }})
    r"""The size of the function's <code>/tmp</code> directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB."""  
    file_system_configs: Optional[list[shared_filesystemconfig.FileSystemConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemConfigs'), 'exclude': lambda f: f is None }})
    r"""Connection settings for an Amazon EFS file system."""  
    handler: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Handler'), 'exclude': lambda f: f is None }})
    r"""The name of the method within your code that Lambda calls to run your function. Handler is required if the deployment package is a .zip file archive. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html\\">Lambda programming model</a>."""  
    image_config: Optional[UpdateFunctionConfigurationRequestBodyImageConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration values that override the container image Dockerfile settings. For more information, see <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms\\">Container image settings</a>."""  
    kms_key_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KMSKeyArn'), 'exclude': lambda f: f is None }})
    r"""The ARN of the Key Management Service (KMS) customer managed key that's used to encrypt your function's <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption\\">environment variables</a>. When <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html\\">Lambda SnapStart</a> is activated, this key is also used to encrypt your function's snapshot. If you don't provide a customer managed key, Lambda uses a default service key."""  
    layers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Layers'), 'exclude': lambda f: f is None }})
    r"""A list of <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\\">function layers</a> to add to the function's execution environment. Specify each layer by its ARN, including the version."""  
    memory_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MemorySize'), 'exclude': lambda f: f is None }})
    r"""The amount of <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console\\">memory available to the function</a> at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB."""  
    revision_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RevisionId'), 'exclude': lambda f: f is None }})
    r"""Update the function only if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it."""  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Role'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) of the function's execution role."""  
    runtime: Optional[UpdateFunctionConfigurationRequestBodyRuntimeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Runtime'), 'exclude': lambda f: f is None }})
    r"""<p>The identifier of the function's <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\\">runtime</a>. Runtime is required if the deployment package is a .zip file archive.</p> <p>The following list includes deprecated runtimes. For more information, see <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-support-policy\\">Runtime deprecation policy</a>.</p>"""  
    snap_start: Optional[UpdateFunctionConfigurationRequestBodySnapStart] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SnapStart'), 'exclude': lambda f: f is None }})
    r"""<p>The function's Lambda SnapStart setting. Set <code>ApplyOn</code> to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version.</p> <p>SnapStart is supported with the <code>java11</code> runtime. For more information, see <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html\\">Improving startup performance with Lambda SnapStart</a>.</p>"""  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Timeout'), 'exclude': lambda f: f is None }})
    r"""The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html\\">Lambda execution environment</a>."""  
    tracing_config: Optional[UpdateFunctionConfigurationRequestBodyTracingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TracingConfig'), 'exclude': lambda f: f is None }})
    r"""The function's <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html\\">X-Ray</a> tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>."""  
    vpc_config: Optional[UpdateFunctionConfigurationRequestBodyVpcConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfig'), 'exclude': lambda f: f is None }})
    r"""The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href=\\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\\">Configuring a Lambda function to access resources in a VPC</a>."""  
    

@dataclasses.dataclass
class UpdateFunctionConfigurationRequest:
    
    function_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'FunctionName', 'style': 'simple', 'explode': False }})
    r"""<p>The name of the Lambda function.</p> <p class=\\"title\\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> – <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>"""  
    request_body: UpdateFunctionConfigurationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateFunctionConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    code_signing_config_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CodeSigningConfigNotFoundException"""  
    code_verification_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CodeVerificationFailedException"""  
    function_configuration: Optional[shared_functionconfiguration.FunctionConfiguration] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_code_signature_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidCodeSignatureException"""  
    invalid_parameter_value_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterValueException"""  
    precondition_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PreconditionFailedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceConflictException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceException"""  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    