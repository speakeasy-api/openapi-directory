/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class BookingAvailabilityTourgradesRequestBodyAgeBands extends SpeakeasyBase {
  /**
   * **unique numeric identifier** for the age band
   *
   * @remarks
   * - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bandId" })
  bandId?: number;

  /**
   * **numeric count** of number of travelers in *this* age band
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;
}

export class BookingAvailabilityTourgradesRequestBody extends SpeakeasyBase {
  /**
   * **array** of ageBand objects
   */
  @SpeakeasyMetadata({
    elemType: BookingAvailabilityTourgradesRequestBodyAgeBands,
  })
  @Expose({ name: "ageBands" })
  @Type(() => BookingAvailabilityTourgradesRequestBodyAgeBands)
  ageBands?: BookingAvailabilityTourgradesRequestBodyAgeBands[];

  /**
   * **date** to enquire about available tour grades for *this* product (must be in the future)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingDate" })
  bookingDate?: string;

  /**
   * **currency code** for the currency in which to display pricing information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "productCode" })
  productCode?: string;
}

export class BookingAvailabilityTourgradesRequest extends SpeakeasyBase {
  /**
   * Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Accept-Language",
  })
  acceptLanguage: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: BookingAvailabilityTourgradesRequestBody;
}

export class BookingAvailabilityTourgrades200ApplicationJSONDataAgeBandsRequired extends SpeakeasyBase {
  /**
   * **unique numeric identifier** for the age band
   *
   * @remarks
   * - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bandId" })
  bandId?: number;

  /**
   * **maximum number** of passengers from *this* age band allowable for *this* tour grade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maximumCountRequired" })
  maximumCountRequired?: number;

  /**
   * **minimum number** of passengers from *this* age band required for *this* tour grade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minimumCountRequired" })
  minimumCountRequired?: number;
}

export class BookingAvailabilityTourgrades200ApplicationJSONData extends SpeakeasyBase {
  /**
   * **array** of age band objects describing the age bands and respective passenger counts allowed to book *this* tour grade; `null` if `ageBandsRequired` is filled and `available` is `false`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ageBands" })
  ageBands?: any[];

  /**
   * **array of arrays** of age band objects describing the traveler mixes eligible to book *this* tour grade; `null` if `ageBands` is filled and `available` is `true`
   *
   * @remarks
   * - **note**: multiple objects; structure will depend on available tour grades â€“ see response sample for an example, but the exact result you receive will differ
   *
   */
  @SpeakeasyMetadata({
    elemType:
      BookingAvailabilityTourgrades200ApplicationJSONDataAgeBandsRequired,
    elemDepth: 2,
  })
  @Expose({ name: "ageBandsRequired" })
  @Type(
    () => BookingAvailabilityTourgrades200ApplicationJSONDataAgeBandsRequired
  )
  ageBandsRequired?: BookingAvailabilityTourgrades200ApplicationJSONDataAgeBandsRequired[][];

  /**
   * **indicator** - `true` if this tour grade is available to be booked according to the traveler mix specified
   */
  @SpeakeasyMetadata()
  @Expose({ name: "available" })
  available?: boolean;

  /**
   * **date** on which *this* tour grade operates
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookingDate" })
  bookingDate?: string;

  /**
   * **currency code for the specified currency** (will be `'ERROR'` if `available` is `false`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currencyCode" })
  currencyCode?: string;

  /**
   * **language code for standard langauge** for *this* product
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultLanguageCode" })
  defaultLanguageCode?: string;

  /**
   * **alphanumeric identifier** of *this* tour grade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gradeCode" })
  gradeCode?: string;

  /**
   * **time** of *this* product
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gradeDepartureTime" })
  gradeDepartureTime?: string;

  /**
   * **natural-language description** of the tour grade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gradeDescription" })
  gradeDescription?: string;

  /**
   * **natural-language title** of the tour grade
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gradeTitle" })
  gradeTitle?: string;

  /**
   * **object** detailing language services available for *this* product** (will be `null` if `available` is `false`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "langServices" })
  langServices?: Record<string, any>;

  /**
   * **numeric merchant net rate** for *this* tour grade
   *
   * @remarks
   * **Note**: will be `0` if `available` is `false`
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantNetPrice" })
  merchantNetPrice?: number;

  /**
   * **currency-formatted merchant net rate** for *this* tour grade
   *
   * @remarks
   * **Note**: will be empty if `available` is `false`
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchantNetPriceFormatted" })
  merchantNetPriceFormatted?: string;

  /**
   * **numeric suggested retail price** for *this* tour grade
   *
   * @remarks
   * **Note**: will be `0` if `available` is `false`
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retailPrice" })
  retailPrice?: number;

  /**
   * **currency-formatted suggested retail price** for *this* tour grade
   *
   * @remarks
   * **Note**: (will be '' if `available` is `false`)
   * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retailPriceFormatted" })
  retailPriceFormatted?: string;

  /**
   * **sort order** for *this* tour grade availability object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: number;

  /**
   * **enum specifier of reason for product unavailability** (will be `null` if `available` is `true`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unavailableReason" })
  unavailableReason?: string;
}

/**
 * Success
 */
export class BookingAvailabilityTourgrades200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: BookingAvailabilityTourgrades200ApplicationJSONData,
  })
  @Expose({ name: "data" })
  @Type(() => BookingAvailabilityTourgrades200ApplicationJSONData)
  data?: BookingAvailabilityTourgrades200ApplicationJSONData[];

  /**
   * **timestamp** of *this* response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateStamp" })
  dateStamp?: string;

  /**
   * **array** of error codes pertaining to *this* error
   *
   * @remarks
   * - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorCodes" })
  errorCodes?: string[];

  /**
   * **array** of error message strings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: any[];

  /**
   * **array** of error message strings in plain text
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessageText" })
  errorMessageText?: string;

  /**
   * **name** of *this* type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorName" })
  errorName?: string;

  /**
   * **reference number** of *this* error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorReference" })
  errorReference?: string;

  /**
   * **code** specifying the type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorType" })
  errorType?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraInfo" })
  extraInfo?: Record<string, any>;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraObject" })
  extraObject?: Record<string, any>;

  /**
   * **boolean indicator** of *this* request's outcome
   *
   * @remarks
   * - `true`: the request was successful with no errors
   * - `false`: an error was encountered
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  /**
   * **number** of results available for *this* service
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalCount" })
  totalCount?: number;

  /**
   * **unique numeric id** of the server that processed *this* request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vmid" })
  vmid?: string;
}

export class BookingAvailabilityTourgradesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  bookingAvailabilityTourgrades200ApplicationJSONObject?: BookingAvailabilityTourgrades200ApplicationJSON;
}
