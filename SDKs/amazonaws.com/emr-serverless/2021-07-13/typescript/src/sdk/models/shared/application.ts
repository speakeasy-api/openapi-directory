/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ApplicationStateEnum } from "./applicationstateenum";
import { ArchitectureEnum } from "./architectureenum";
import { AutoStartConfig } from "./autostartconfig";
import { AutoStopConfig } from "./autostopconfig";
import { ImageConfiguration } from "./imageconfiguration";
import { InitialCapacityConfig } from "./initialcapacityconfig";
import { MaximumAllowedResources } from "./maximumallowedresources";
import { NetworkConfiguration } from "./networkconfiguration";
import { WorkerTypeSpecification } from "./workertypespecification";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information about an application. EMR Serverless uses applications to run jobs.
 */
export class Application extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "applicationId" })
  applicationId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "architecture" })
  architecture?: ArchitectureEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "autoStartConfiguration" })
  @Type(() => AutoStartConfig)
  autoStartConfiguration?: AutoStartConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "autoStopConfiguration" })
  @Type(() => AutoStopConfig)
  autoStopConfiguration?: AutoStopConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "imageConfiguration" })
  @Type(() => ImageConfiguration)
  imageConfiguration?: ImageConfiguration;

  @SpeakeasyMetadata({ elemType: InitialCapacityConfig })
  @Expose({ name: "initialCapacity" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, InitialCapacityConfig> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], InitialCapacityConfig);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  initialCapacity?: Record<string, InitialCapacityConfig>;

  @SpeakeasyMetadata()
  @Expose({ name: "maximumCapacity" })
  @Type(() => MaximumAllowedResources)
  maximumCapacity?: MaximumAllowedResources;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "networkConfiguration" })
  @Type(() => NetworkConfiguration)
  networkConfiguration?: NetworkConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "releaseLabel" })
  releaseLabel: string;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state: ApplicationStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "stateDetails" })
  stateDetails?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata({ elemType: WorkerTypeSpecification })
  @Expose({ name: "workerTypeSpecifications" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, WorkerTypeSpecification> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], WorkerTypeSpecification);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  workerTypeSpecifications?: Record<string, WorkerTypeSpecification>;
}
