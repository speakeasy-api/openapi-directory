/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ActionParameters - Represents the event action configuration for an element of a &lt;code&gt;Component&lt;/code&gt; or &lt;code&gt;ComponentChild&lt;/code&gt;. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components. &lt;code&gt;ActionParameters&lt;/code&gt; defines the action that is performed when an event occurs on the component.
 */
public class ActionParameters {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anchor")
    public ComponentProperty anchor;
    public ActionParameters withAnchor(ComponentProperty anchor) {
        this.anchor = anchor;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    public java.util.Map<String, ComponentProperty> fields;
    public ActionParameters withFields(java.util.Map<String, ComponentProperty> fields) {
        this.fields = fields;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("global")
    public ComponentProperty global;
    public ActionParameters withGlobal(ComponentProperty global) {
        this.global = global;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public ComponentProperty id;
    public ActionParameters withId(ComponentProperty id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    public String model;
    public ActionParameters withModel(String model) {
        this.model = model;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public MutationActionSetStateParameter state;
    public ActionParameters withState(MutationActionSetStateParameter state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target")
    public ComponentProperty target;
    public ActionParameters withTarget(ComponentProperty target) {
        this.target = target;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public ComponentProperty type;
    public ActionParameters withType(ComponentProperty type) {
        this.type = type;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public ComponentProperty url;
    public ActionParameters withUrl(ComponentProperty url) {
        this.url = url;
        return this;
    }
    
}
