"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import encryptionalgorithmspec_enum as shared_encryptionalgorithmspec_enum
from ..shared import keyspec_enum as shared_keyspec_enum
from ..shared import keyusagetype_enum as shared_keyusagetype_enum
from ..shared import signingalgorithmspec_enum as shared_signingalgorithmspec_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetPublicKeyResponseCustomerMasterKeySpecEnum(str, Enum):
    r"""<p>Instead, use the <code>KeySpec</code> field in the <code>GetPublicKey</code> response.</p> <p>The <code>KeySpec</code> and <code>CustomerMasterKeySpec</code> fields have the same value. We recommend that you use the <code>KeySpec</code> field in your code. However, to avoid breaking changes, KMS supports both fields.</p>This field has been deprecated. Instead, use the KeySpec field."""
    RSA_2048 = 'RSA_2048'
    RSA_3072 = 'RSA_3072'
    RSA_4096 = 'RSA_4096'
    ECC_NIST_P256 = 'ECC_NIST_P256'
    ECC_NIST_P384 = 'ECC_NIST_P384'
    ECC_NIST_P521 = 'ECC_NIST_P521'
    ECC_SECG_P256_K1 = 'ECC_SECG_P256K1'
    SYMMETRIC_DEFAULT = 'SYMMETRIC_DEFAULT'
    HMAC_224 = 'HMAC_224'
    HMAC_256 = 'HMAC_256'
    HMAC_384 = 'HMAC_384'
    HMAC_512 = 'HMAC_512'
    SM2 = 'SM2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPublicKeyResponse:
    r"""Success"""
    
    customer_master_key_spec: Optional[GetPublicKeyResponseCustomerMasterKeySpecEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerMasterKeySpec'), 'exclude': lambda f: f is None }})  
    encryption_algorithms: Optional[list[shared_encryptionalgorithmspec_enum.EncryptionAlgorithmSpecEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionAlgorithms'), 'exclude': lambda f: f is None }})  
    key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyId'), 'exclude': lambda f: f is None }})  
    key_spec: Optional[shared_keyspec_enum.KeySpecEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeySpec'), 'exclude': lambda f: f is None }})  
    key_usage: Optional[shared_keyusagetype_enum.KeyUsageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyUsage'), 'exclude': lambda f: f is None }})  
    public_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PublicKey'), 'exclude': lambda f: f is None }})  
    signing_algorithms: Optional[list[shared_signingalgorithmspec_enum.SigningAlgorithmSpecEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SigningAlgorithms'), 'exclude': lambda f: f is None }})  
    