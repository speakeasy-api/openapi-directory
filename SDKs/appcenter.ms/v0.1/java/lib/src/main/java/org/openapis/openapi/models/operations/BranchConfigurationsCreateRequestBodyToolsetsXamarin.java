/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BranchConfigurationsCreateRequestBodyToolsetsXamarin - Build configuration for Xamarin projects
 */
public class BranchConfigurationsCreateRequestBodyToolsetsXamarin {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("args")
    public String args;
    public BranchConfigurationsCreateRequestBodyToolsetsXamarin withArgs(String args) {
        this.args = args;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuration")
    public String configuration;
    public BranchConfigurationsCreateRequestBodyToolsetsXamarin withConfiguration(String configuration) {
        this.configuration = configuration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSimBuild")
    public Boolean isSimBuild;
    public BranchConfigurationsCreateRequestBodyToolsetsXamarin withIsSimBuild(Boolean isSimBuild) {
        this.isSimBuild = isSimBuild;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monoVersion")
    public String monoVersion;
    public BranchConfigurationsCreateRequestBodyToolsetsXamarin withMonoVersion(String monoVersion) {
        this.monoVersion = monoVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("p12File")
    public String p12File;
    public BranchConfigurationsCreateRequestBodyToolsetsXamarin withP12File(String p12File) {
        this.p12File = p12File;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("p12Pwd")
    public String p12Pwd;
    public BranchConfigurationsCreateRequestBodyToolsetsXamarin withP12Pwd(String p12Pwd) {
        this.p12Pwd = p12Pwd;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provProfile")
    public String provProfile;
    public BranchConfigurationsCreateRequestBodyToolsetsXamarin withProvProfile(String provProfile) {
        this.provProfile = provProfile;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sdkBundle")
    public String sdkBundle;
    public BranchConfigurationsCreateRequestBodyToolsetsXamarin withSDKBundle(String sdkBundle) {
        this.sdkBundle = sdkBundle;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slnPath")
    public String slnPath;
    public BranchConfigurationsCreateRequestBodyToolsetsXamarin withSlnPath(String slnPath) {
        this.slnPath = slnPath;
        return this;
    }
    
    /**
     * Symlink of the SDK Bundle and Mono installation.
     * The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("symlink")
    public String symlink;
    public BranchConfigurationsCreateRequestBodyToolsetsXamarin withSymlink(String symlink) {
        this.symlink = symlink;
        return this;
    }
    
}
