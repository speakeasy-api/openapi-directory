<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * RunAggregationQueryResponse - The response for Firestore.RunAggregationQuery.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class RunAggregationQueryResponse
{
    /**
     * The time at which the aggregate result was computed. This is always monotonically increasing; in this case, the previous AggregationResult in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `result` will be sent, and this represents the time at which the query was run.
     * 
     * @var ?string $readTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('readTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $readTime = null;
    
    /**
     * The result of a single bucket from a Firestore aggregation query. The keys of `aggregate_fields` are the same for all results in an aggregation query, unlike document queries which can have different fields present for each result.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AggregationResult $result
     */
	#[\JMS\Serializer\Annotation\SerializedName('result')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AggregationResult')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AggregationResult $result = null;
    
    /**
     * The transaction that was started as part of this request. Only present on the first response when the request requested to start a new transaction.
     * 
     * @var ?string $transaction
     */
	#[\JMS\Serializer\Annotation\SerializedName('transaction')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transaction = null;
    
	public function __construct()
	{
		$this->readTime = null;
		$this->result = null;
		$this->transaction = null;
	}
}
