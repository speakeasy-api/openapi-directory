/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Audio {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add audio tracks to collections
   *
   * @remarks
   * This endpoint adds one or more tracks to a collection by track IDs.
   */
  addTrackCollectionItems(
    req: operations.AddTrackCollectionItemsRequest,
    security: operations.AddTrackCollectionItemsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddTrackCollectionItemsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddTrackCollectionItemsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/audio/collections/{id}/items",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "collectionItemRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddTrackCollectionItemsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddTrackCollectionItemsResponse =
        new operations.AddTrackCollectionItemsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create audio collections
   *
   * @remarks
   * This endpoint creates one or more collections (soundboxes). To add tracks, use `POST /v2/audio/collections/{id}/items`.
   */
  createTrackCollection(
    req: shared.CollectionCreateRequest,
    security: operations.CreateTrackCollectionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateTrackCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CollectionCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/audio/collections";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateTrackCollectionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateTrackCollectionResponse =
        new operations.CreateTrackCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collectionCreateResponse = utils.objectToClass(
              httpRes?.data,
              shared.CollectionCreateResponse
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete audio collections
   *
   * @remarks
   * This endpoint deletes a collection.
   */
  deleteTrackCollection(
    req: operations.DeleteTrackCollectionRequest,
    security: operations.DeleteTrackCollectionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteTrackCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteTrackCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/audio/collections/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteTrackCollectionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteTrackCollectionResponse =
        new operations.DeleteTrackCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove audio tracks from collections
   *
   * @remarks
   * This endpoint removes one or more tracks from a collection.
   */
  deleteTrackCollectionItems(
    req: operations.DeleteTrackCollectionItemsRequest,
    security: operations.DeleteTrackCollectionItemsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteTrackCollectionItemsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteTrackCollectionItemsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/audio/collections/{id}/items",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteTrackCollectionItemsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteTrackCollectionItemsResponse =
        new operations.DeleteTrackCollectionItemsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Download audio tracks
   *
   * @remarks
   * This endpoint redownloads tracks that you have already received a license for. The download links in the response are valid for 8 hours.
   */
  downloadTracks(
    req: operations.DownloadTracksRequest,
    security: operations.DownloadTracksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DownloadTracksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DownloadTracksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/audio/licenses/{id}/downloads",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DownloadTracksSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DownloadTracksResponse =
        new operations.DownloadTracksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.audioUrl = utils.objectToClass(httpRes?.data, shared.AudioUrl);
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get details about audio tracks
   *
   * @remarks
   * This endpoint shows information about a track, including its genres, instruments, and other attributes.
   */
  getTrack(
    req: operations.GetTrackRequest,
    security: operations.GetTrackSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTrackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTrackRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/audio/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTrackSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTrackResponse = new operations.GetTrackResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.audio = utils.objectToClass(httpRes?.data, shared.Audio);
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get the details of audio collections
   *
   * @remarks
   * This endpoint gets more detailed information about a collection, including the number of items in it and when it was last updated. To get the tracks in collections, use `GET /v2/audio/collections/{id}/items`.
   */
  getTrackCollection(
    req: operations.GetTrackCollectionRequest,
    security: operations.GetTrackCollectionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTrackCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTrackCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/audio/collections/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTrackCollectionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTrackCollectionResponse =
        new operations.GetTrackCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collection = utils.objectToClass(
              httpRes?.data,
              shared.Collection
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get the contents of audio collections
   *
   * @remarks
   * This endpoint lists the IDs of tracks in a collection and the date that each was added.
   */
  getTrackCollectionItems(
    req: operations.GetTrackCollectionItemsRequest,
    security: operations.GetTrackCollectionItemsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTrackCollectionItemsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTrackCollectionItemsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/audio/collections/{id}/items",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTrackCollectionItemsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTrackCollectionItemsResponse =
        new operations.GetTrackCollectionItemsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collectionItemDataList = utils.objectToClass(
              httpRes?.data,
              shared.CollectionItemDataList
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List audio collections
   *
   * @remarks
   * This endpoint lists your collections of audio tracks and their basic attributes.
   */
  getTrackCollectionList(
    req: operations.GetTrackCollectionListRequest,
    security: operations.GetTrackCollectionListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTrackCollectionListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTrackCollectionListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/audio/collections";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTrackCollectionListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTrackCollectionListResponse =
        new operations.GetTrackCollectionListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collectionDataList = utils.objectToClass(
              httpRes?.data,
              shared.CollectionDataList
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List audio licenses
   *
   * @remarks
   * This endpoint lists existing licenses. You can filter the results according to the track ID to see if you have an existing license for a specific track.
   */
  getTrackLicenseList(
    req: operations.GetTrackLicenseListRequest,
    security: operations.GetTrackLicenseListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTrackLicenseListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTrackLicenseListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/audio/licenses";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTrackLicenseListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTrackLicenseListResponse =
        new operations.GetTrackLicenseListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.downloadHistoryDataList = utils.objectToClass(
              httpRes?.data,
              shared.DownloadHistoryDataList
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List audio tracks
   *
   * @remarks
   * This endpoint lists information about one or more audio tracks, including the description and publication date.
   */
  getTrackList(
    req: operations.GetTrackListRequest,
    security: operations.GetTrackListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTrackListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTrackListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/audio";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTrackListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTrackListResponse =
        new operations.GetTrackListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.audioDataList = utils.objectToClass(
              httpRes?.data,
              shared.AudioDataList
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * License audio tracks
   *
   * @remarks
   * This endpoint gets licenses for one or more tracks. The download links in the response are valid for 8 hours.
   */
  licenseTrack(
    req: operations.LicenseTrackRequest,
    security: operations.LicenseTrackSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LicenseTrackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LicenseTrackRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/audio/licenses";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "licenseAudioRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LicenseTrackSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LicenseTrackResponse =
        new operations.LicenseTrackResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.licenseAudioResultDataList = utils.objectToClass(
              httpRes?.data,
              shared.LicenseAudioResultDataList
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List audio genres
   *
   * @remarks
   * This endpoint returns a list of all audio genres.
   */
  listGenres(
    req: operations.ListGenresRequest,
    security: operations.ListGenresSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListGenresResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListGenresRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/audio/genres";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListGenresSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListGenresResponse =
        new operations.ListGenresResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.genreList = utils.objectToClass(
              httpRes?.data,
              shared.GenreList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List audio instruments
   *
   * @remarks
   * This endpoint returns a list of all audio instruments.
   */
  listInstruments(
    req: operations.ListInstrumentsRequest,
    security: operations.ListInstrumentsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListInstrumentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListInstrumentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/audio/instruments";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListInstrumentsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListInstrumentsResponse =
        new operations.ListInstrumentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.instrumentList = utils.objectToClass(
              httpRes?.data,
              shared.InstrumentList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List audio moods
   *
   * @remarks
   * This endpoint returns a list of all audio moods.
   */
  listMoods(
    req: operations.ListMoodsRequest,
    security: operations.ListMoodsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListMoodsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListMoodsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/audio/moods";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListMoodsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListMoodsResponse =
        new operations.ListMoodsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.moodList = utils.objectToClass(httpRes?.data, shared.MoodList);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Rename audio collections
   *
   * @remarks
   * This endpoint sets a new name for a collection.
   */
  renameTrackCollection(
    req: operations.RenameTrackCollectionRequest,
    security: operations.RenameTrackCollectionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RenameTrackCollectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RenameTrackCollectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/audio/collections/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "collectionUpdateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RenameTrackCollectionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RenameTrackCollectionResponse =
        new operations.RenameTrackCollectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Search for tracks
   *
   * @remarks
   * This endpoint searches for tracks. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter.
   */
  searchTracks(
    req: operations.SearchTracksRequest,
    security: operations.SearchTracksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchTracksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SearchTracksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/audio/search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SearchTracksSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchTracksResponse =
        new operations.SearchTracksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.audioSearchResults = utils.objectToClass(
              httpRes?.data,
              shared.AudioSearchResults
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
