// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StatusMessageRefersToEnum - Reference to which the message applies.
type StatusMessageRefersToEnum string

const (
	StatusMessageRefersToEnumUnspecified              StatusMessageRefersToEnum = "UNSPECIFIED"
	StatusMessageRefersToEnumBreakpointSourceLocation StatusMessageRefersToEnum = "BREAKPOINT_SOURCE_LOCATION"
	StatusMessageRefersToEnumBreakpointCondition      StatusMessageRefersToEnum = "BREAKPOINT_CONDITION"
	StatusMessageRefersToEnumBreakpointExpression     StatusMessageRefersToEnum = "BREAKPOINT_EXPRESSION"
	StatusMessageRefersToEnumBreakpointAge            StatusMessageRefersToEnum = "BREAKPOINT_AGE"
	StatusMessageRefersToEnumBreakpointCanaryFailed   StatusMessageRefersToEnum = "BREAKPOINT_CANARY_FAILED"
	StatusMessageRefersToEnumVariableName             StatusMessageRefersToEnum = "VARIABLE_NAME"
	StatusMessageRefersToEnumVariableValue            StatusMessageRefersToEnum = "VARIABLE_VALUE"
)

func (e *StatusMessageRefersToEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNSPECIFIED":
		fallthrough
	case "BREAKPOINT_SOURCE_LOCATION":
		fallthrough
	case "BREAKPOINT_CONDITION":
		fallthrough
	case "BREAKPOINT_EXPRESSION":
		fallthrough
	case "BREAKPOINT_AGE":
		fallthrough
	case "BREAKPOINT_CANARY_FAILED":
		fallthrough
	case "VARIABLE_NAME":
		fallthrough
	case "VARIABLE_VALUE":
		*e = StatusMessageRefersToEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusMessageRefersToEnum: %s", s)
	}
}

// StatusMessage - Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
type StatusMessage struct {
	// Represents a message with parameters.
	Description *FormatMessage `json:"description,omitempty"`
	// Distinguishes errors from informational messages.
	IsError *bool `json:"isError,omitempty"`
	// Reference to which the message applies.
	RefersTo *StatusMessageRefersToEnum `json:"refersTo,omitempty"`
}
