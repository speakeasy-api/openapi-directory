// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// ReloadUserConf200ApplicationJSONActionEnum - The id of the action
type ReloadUserConf200ApplicationJSONActionEnum string

const (
	ReloadUserConf200ApplicationJSONActionEnumReloadUserConf ReloadUserConf200ApplicationJSONActionEnum = "reloadUserConf"
)

func (e *ReloadUserConf200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "reloadUserConf":
		*e = ReloadUserConf200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadUserConf200ApplicationJSONActionEnum: %s", s)
	}
}

type ReloadUserConf200ApplicationJSONDataReload struct {
	Status string `json:"status"`
}

type ReloadUserConf200ApplicationJSONData struct {
	Reload ReloadUserConf200ApplicationJSONDataReload `json:"reload"`
}

// ReloadUserConf200ApplicationJSONResultEnum - Result of the request
type ReloadUserConf200ApplicationJSONResultEnum string

const (
	ReloadUserConf200ApplicationJSONResultEnumSuccess ReloadUserConf200ApplicationJSONResultEnum = "success"
	ReloadUserConf200ApplicationJSONResultEnumError   ReloadUserConf200ApplicationJSONResultEnum = "error"
)

func (e *ReloadUserConf200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ReloadUserConf200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadUserConf200ApplicationJSONResultEnum: %s", s)
	}
}

// ReloadUserConf200ApplicationJSON - Reload information
type ReloadUserConf200ApplicationJSON struct {
	// The id of the action
	Action ReloadUserConf200ApplicationJSONActionEnum `json:"action"`
	Data   ReloadUserConf200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result ReloadUserConf200ApplicationJSONResultEnum `json:"result"`
}

type ReloadUserConfResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Reload information
	ReloadUserConf200ApplicationJSONObject *ReloadUserConf200ApplicationJSON
}
