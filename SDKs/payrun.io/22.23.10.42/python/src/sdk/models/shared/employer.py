"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployerEmployerAddress:
    r"""The employers' address"""
    
    address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address1'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 1"""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address2'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 2"""  
    address3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address3'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 3"""  
    address4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address4'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 4"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})
    r"""The addresss' country"""  
    postcode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Postcode'), 'exclude': lambda f: f is None }})
    r"""The addresss' postcode"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployerEmployerAutoEnrolmentPension:
    r"""The employer auto enrolments' pension"""
    
    at_href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@href'), 'exclude': lambda f: f is None }})
    r"""The links' href"""  
    at_rel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@rel'), 'exclude': lambda f: f is None }})
    r"""The links' target type"""  
    at_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@title'), 'exclude': lambda f: f is None }})
    r"""The links' title"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployerEmployerAutoEnrolmentPrimaryAddress:
    r"""The employer auto enrolments' primary address"""
    
    address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address1'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 1"""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address2'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 2"""  
    address3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address3'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 3"""  
    address4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address4'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 4"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})
    r"""The addresss' country"""  
    postcode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Postcode'), 'exclude': lambda f: f is None }})
    r"""The addresss' postcode"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployerEmployerAutoEnrolmentSecondaryAddress:
    r"""The employer auto enrolments' secondary address"""
    
    address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address1'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 1"""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address2'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 2"""  
    address3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address3'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 3"""  
    address4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address4'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 4"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})
    r"""The addresss' country"""  
    postcode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Postcode'), 'exclude': lambda f: f is None }})
    r"""The addresss' postcode"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployerEmployerAutoEnrolment:
    r"""The employers' auto enrolment"""
    
    pension: Optional[EmployerEmployerAutoEnrolmentPension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pension'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' pension"""  
    postponement_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostponementDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' postponement date"""  
    primary_address: Optional[EmployerEmployerAutoEnrolmentPrimaryAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrimaryAddress'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' primary address"""  
    primary_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrimaryEmail'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' primary email"""  
    primary_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrimaryFirstName'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' primary first name"""  
    primary_job_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrimaryJobTitle'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' primary job title"""  
    primary_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrimaryLastName'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' primary last name"""  
    primary_telephone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrimaryTelephone'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' primary telephone"""  
    recent_opt_out_re_enrolment_excluded: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecentOptOutReEnrolmentExcluded'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' recent opt out re enrolment excluded"""  
    re_enrolment_day_offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReEnrolmentDayOffset'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' re enrolment day offset"""  
    re_enrolment_month_offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReEnrolmentMonthOffset'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' re enrolment month offset"""  
    secondary_address: Optional[EmployerEmployerAutoEnrolmentSecondaryAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryAddress'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' secondary address"""  
    secondary_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryEmail'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' secondary email"""  
    secondary_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryFirstName'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' secondary first name"""  
    secondary_job_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryJobTitle'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' secondary job title"""  
    secondary_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryLastName'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' secondary last name"""  
    secondary_telephone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryTelephone'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' secondary telephone"""  
    staging_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StagingDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employer auto enrolments' staging date"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployerEmployerBankAccount:
    r"""The employers' bank account"""
    
    account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountName'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' account name"""  
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountNumber'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' account number"""  
    branch_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchName'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' branch name"""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reference'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' reference"""  
    sort_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SortCode'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' sort code"""  
    
class EmployerEmployerHmrcSettingsSenderEnum(str, Enum):
    r"""The hmrc settingss' sender"""
    EMPLOYER = 'Employer'
    INDIVIDUAL = 'Individual'
    COMPANY = 'Company'
    AGENT = 'Agent'
    BUREAU = 'Bureau'
    PARTNERSHIP = 'Partnership'
    TRUST = 'Trust'
    GOVERNMENT = 'Government'
    ACTING_IN_CAPACITY = 'ActingInCapacity'
    OTHER = 'Other'

class EmployerEmployerHmrcSettingsStateAidSectorEnum(str, Enum):
    r"""The hmrc settingss' state aid sector"""
    AGRICULTURE = 'Agriculture'
    FISHERIES_AQUACULTURE = 'FisheriesAquaculture'
    ROAD_TRANSPORT = 'RoadTransport'
    INDUSTRIAL = 'Industrial'
    NOT_APPLICABLE = 'NotApplicable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployerEmployerHmrcSettings:
    r"""The employers' hmrc settings"""
    
    accounting_office_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountingOfficeRef'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' accounting office ref"""  
    contact_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactEmail'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' contact email"""  
    contact_fax: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactFax'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' contact fax"""  
    contact_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactFirstName'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' contact first name"""  
    contact_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactLastName'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' contact last name"""  
    contact_telephone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactTelephone'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' contact telephone"""  
    cotax_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('COTAXRef'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' c o t a x ref"""  
    employment_allowance_override: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmploymentAllowanceOverride'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' employment allowance override"""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Password'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' password"""  
    sautr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SAUTR'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' s a u t r"""  
    sender: Optional[EmployerEmployerHmrcSettingsSenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sender'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' sender"""  
    sender_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SenderId'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' sender id"""  
    state_aid_sector: Optional[EmployerEmployerHmrcSettingsStateAidSectorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StateAidSector'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' state aid sector"""  
    tax_office_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxOfficeNumber'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' tax office number"""  
    tax_office_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxOfficeReference'), 'exclude': lambda f: f is None }})
    r"""The hmrc settingss' tax office reference"""  
    
class EmployerEmployerRegionEnum(str, Enum):
    r"""The employers' region"""
    NOT_SET = 'NotSet'
    ENGLAND = 'England'
    SCOTLAND = 'Scotland'
    WALES = 'Wales'

class EmployerEmployerRuleExclusionsEnum(str, Enum):
    r"""The employers' rule exclusions"""
    NONE = 'None'
    NI_MISSING_PAY_INSTRUCTION_RULE = 'NiMissingPayInstructionRule'
    TAX_MISSING_PAY_INSTRUCTION_RULE = 'TaxMissingPayInstructionRule'
    TAX_CODE_UPLIFT_RULE = 'TaxCodeUpliftRule'
    NI_SET_EXPECTED_LETTER_RULE = 'NiSetExpectedLetterRule'
    NI_DATE_OF_BIRTH_CHANGE_RETROSPECTIVE_C_RULE = 'NiDateOfBirthChangeRetrospectiveCRule'
    NI_DEFERMENT_STATUS_CHANGE_RULE = 'NiDefermentStatusChangeRule'
    NI_END_CONTRACTED_OUT_TRANSFER_RULE = 'NiEndContractedOutTransferRule'
    PAYMENT_AFTER_LEAVING_TAX_CODE_RULE = 'PaymentAfterLeavingTaxCodeRule'
    LEAVER_END_INSTRUCTIONS_RULE = 'LeaverEndInstructionsRule'
    P45_STUDENT_LOAN_INSTRUCTION_RULE = 'P45StudentLoanInstructionRule'
    P45_TAX_INSTRUCTION_RULE = 'P45TaxInstructionRule'
    P45_YTD_TAX_RULE = 'P45YtdTaxRule'
    YTD_INSTRUCTION_RULE = 'YtdInstructionRule'
    TAX_CODE_REGION_CHANGE_RULE = 'TaxCodeRegionChangeRule'
    AUTO_ENROLMENT_STATUS_CHANGE_RULE = 'AutoEnrolmentStatusChangeRule'
    EMPLOYEE_DECEASED_RULE = 'EmployeeDeceasedRule'
    BENEFIT_INSTRUCTION_AUTO_END_RULE = 'BenefitInstructionAutoEndRule'

class EmployerEmployerTerritoryEnum(str, Enum):
    r"""The employers' territory"""
    UNITED_KINGDOM = 'UnitedKingdom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployerEmployer:
    
    address: Optional[EmployerEmployerAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address'), 'exclude': lambda f: f is None }})
    r"""The employers' address"""  
    apprenticeship_levy_allowance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApprenticeshipLevyAllowance'), 'exclude': lambda f: f is None }})
    r"""The employers' apprenticeship levy allowance"""  
    auto_enrolment: Optional[EmployerEmployerAutoEnrolment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoEnrolment'), 'exclude': lambda f: f is None }})
    r"""The employers' auto enrolment"""  
    bacs_service_user_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BacsServiceUserNumber'), 'exclude': lambda f: f is None }})
    r"""The employers' bacs service user number"""  
    bank_account: Optional[EmployerEmployerBankAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankAccount'), 'exclude': lambda f: f is None }})
    r"""The employers' bank account"""  
    calculate_apprenticeship_levy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CalculateApprenticeshipLevy'), 'exclude': lambda f: f is None }})
    r"""The employers' calculate apprenticeship levy"""  
    claim_employment_allowance: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClaimEmploymentAllowance'), 'exclude': lambda f: f is None }})
    r"""The employers' claim employment allowance"""  
    claim_small_employer_relief: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClaimSmallEmployerRelief'), 'exclude': lambda f: f is None }})
    r"""The employers' claim small employer relief"""  
    effective_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EffectiveDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employers' effective date"""  
    hmrc_settings: Optional[EmployerEmployerHmrcSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HmrcSettings'), 'exclude': lambda f: f is None }})
    r"""The employers' hmrc settings"""  
    meta_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetaData'), 'exclude': lambda f: f is None }})
    r"""The employers' meta data"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The employers' name"""  
    next_revision_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextRevisionDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The employers' next revision date"""  
    region: Optional[EmployerEmployerRegionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Region'), 'exclude': lambda f: f is None }})
    r"""The employers' region"""  
    revision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Revision'), 'exclude': lambda f: f is None }})
    r"""The employers' revision"""  
    rule_exclusions: Optional[EmployerEmployerRuleExclusionsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleExclusions'), 'exclude': lambda f: f is None }})
    r"""The employers' rule exclusions"""  
    territory: Optional[EmployerEmployerTerritoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Territory'), 'exclude': lambda f: f is None }})
    r"""The employers' territory"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Employer:
    r"""The employer object."""
    
    employer: Optional[EmployerEmployer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Employer'), 'exclude': lambda f: f is None }})  
    