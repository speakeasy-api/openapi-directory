<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Coupons 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Archive coupon by coupon code
     * 
     * Archives a specifc coupon by its coupon code.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchivebycouponcodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ArchivebycouponcodeResponse
     */
	public function archivebycouponcode(
        \OpenAPI\OpenAPI\Models\Operations\ArchivebycouponcodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ArchivebycouponcodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/archive/coupon/{couponCode}', \OpenAPI\OpenAPI\Models\Operations\ArchivebycouponcodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArchivebycouponcodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->couponCode = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get all coupons
     * 
     * 
     * > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.
     * 
     *  Retrieves all coupons from an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetallRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetallResponse
     */
	public function getall(
        \OpenAPI\OpenAPI\Models\Operations\GetallRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/coupon');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getall200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\Getall200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get archived coupon by coupon code
     * 
     * Retrieves a specific archived coupon by its coupon code.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetarchivedbycouponcodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetarchivedbycouponcodeResponse
     */
	public function getarchivedbycouponcode(
        \OpenAPI\OpenAPI\Models\Operations\GetarchivedbycouponcodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetarchivedbycouponcodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/archive/coupon/{couponCode}', \OpenAPI\OpenAPI\Models\Operations\GetarchivedbycouponcodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetarchivedbycouponcodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getarchivedbycouponcode200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getarchivedbycouponcode200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get coupon by coupon code
     * 
     * Retrieves a specific coupon by its coupon code.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetbycouponcodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetbycouponcodeResponse
     */
	public function getbycouponcode(
        \OpenAPI\OpenAPI\Models\Operations\GetbycouponcodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetbycouponcodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/coupon/{couponCode}', \OpenAPI\OpenAPI\Models\Operations\GetbycouponcodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetbycouponcodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getbycouponcode200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getbycouponcode200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get coupon usage
     * 
     * Retrieves information about the coupon usage.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetusageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetusageResponse
     */
	public function getusage(
        \OpenAPI\OpenAPI\Models\Operations\GetusageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetusageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/coupon/usage/{couponCode}', \OpenAPI\OpenAPI\Models\Operations\GetusageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetusageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getusage200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getusage200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Coupon Massive Generation
     * 
     * Generates a massive amount of coupons
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MassiveGenerationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MassiveGenerationResponse
     */
	public function massiveGeneration(
        \OpenAPI\OpenAPI\Models\Operations\MassiveGenerationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MassiveGenerationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/coupons');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MassiveGenerationRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MassiveGenerationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->couponCodes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unarchive coupon by coupon code
     * 
     * Unarchives a specifc coupon by its coupon code.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnarchivebycouponcodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnarchivebycouponcodeResponse
     */
	public function unarchivebycouponcode(
        \OpenAPI\OpenAPI\Models\Operations\UnarchivebycouponcodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnarchivebycouponcodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/unarchive/coupon/{couponCode}', \OpenAPI\OpenAPI\Models\Operations\UnarchivebycouponcodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnarchivebycouponcodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->couponCode = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update coupon
     * 
     * Updates information of a specific coupon.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateResponse
     */
	public function update(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/coupon');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->update200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Update200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create coupon
     * 
     * Creates a single new coupon.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtCouponRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtCouponResponse
     */
	public function postApiRnbPvtCoupon(
        \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtCouponRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtCouponResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/coupon/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtCouponResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postApiRnbPvtCoupon201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtCoupon201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create multiple coupons
     * 
     * Creates multiple coupons with different coupon codes. This endpoint has a throttling of 60 requests per minute.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtMultipleCouponsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtMultipleCouponsResponse
     */
	public function postApiRnbPvtMultipleCoupons(
        \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtMultipleCouponsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtMultipleCouponsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/rnb/pvt/multiple-coupons');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiRnbPvtMultipleCouponsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->items = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
}