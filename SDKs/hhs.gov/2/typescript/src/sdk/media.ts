/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Information about media
 */
export class Media {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get MediaItems
   *
   * @remarks
   * Media Items Listings
   */
  getResourcesMediaJson(
    req: operations.GetResourcesMediaJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/resources/media.json";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaJsonResponse =
        new operations.GetResourcesMediaJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaItemWrappeds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.mediaItemWrappeds = utils.objectToClass(
              httpRes?.data,
              shared.MediaItemWrapped,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get the list of featured content in the syndication system
   *
   * @remarks
   * Get the list of featured content in the syndication system
   */
  getResourcesMediaFeaturedJson(
    req: operations.GetResourcesMediaFeaturedJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaFeaturedJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaFeaturedJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/resources/media/featured.json";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaFeaturedJsonResponse =
        new operations.GetResourcesMediaFeaturedJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaItems = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.mediaItems = utils.objectToClass(
              httpRes?.data,
              shared.MediaItem,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get MediaItems by popularity
   *
   * @remarks
   * Get the media with the highest ratings.
   */
  getResourcesMediaMostPopularMediaFormat(
    req: operations.GetResourcesMediaMostPopularMediaFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaMostPopularMediaFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaMostPopularMediaFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/media/mostPopularMedia.{format}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaMostPopularMediaFormatResponse =
        new operations.GetResourcesMediaMostPopularMediaFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaItemWrappeds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.mediaItemWrappeds = utils.objectToClass(
              httpRes?.data,
              shared.MediaItemWrapped,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get MediaItems by search query
   *
   * @remarks
   * Full search
   */
  getResourcesMediaSearchResultsJson(
    req: operations.GetResourcesMediaSearchResultsJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaSearchResultsJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaSearchResultsJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/resources/media/searchResults.json";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaSearchResultsJsonResponse =
        new operations.GetResourcesMediaSearchResultsJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaItemWrappeds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.mediaItemWrappeds = utils.objectToClass(
              httpRes?.data,
              shared.MediaItemWrapped,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get MediaItem by ID
   *
   * @remarks
   * Information about a specific media item
   */
  getResourcesMediaIdJson(
    req: operations.GetResourcesMediaIdJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaIdJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaIdJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/media/{id}.json",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaIdJsonResponse =
        new operations.GetResourcesMediaIdJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaItemWrappeds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.mediaItemWrappeds = utils.objectToClass(
              httpRes?.data,
              shared.MediaItemWrapped,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get content for MediaItem
   *
   * @remarks
   * The actual media content (html, image, etc...)
   */
  getResourcesMediaIdContent(
    req: operations.GetResourcesMediaIdContentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaIdContentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaIdContentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/media/{id}/content",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaIdContentResponse =
        new operations.GetResourcesMediaIdContentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getResourcesMediaIdContent200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get embed code for MediaItem
   *
   * @remarks
   * Get the javascript or iframe embed code for this item (to embed it on a web page).
   */
  getResourcesMediaIdEmbedJson(
    req: operations.GetResourcesMediaIdEmbedJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaIdEmbedJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaIdEmbedJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/media/{id}/embed.json",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaIdEmbedJsonResponse =
        new operations.GetResourcesMediaIdEmbedJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getResourcesMediaIdEmbedJSON200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get Tag by ID
   *
   * @remarks
   * Get the jpg preview of the content item where applicable.
   */
  getResourcesMediaIdPreviewJpg(
    req: operations.GetResourcesMediaIdPreviewJpgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaIdPreviewJpgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaIdPreviewJpgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/media/{id}/preview.jpg",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaIdPreviewJpgResponse =
        new operations.GetResourcesMediaIdPreviewJpgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getResourcesMediaIdPreviewJpg200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get related MediaItems by ID
   *
   * @remarks
   * Get the media related to the current media item.
   */
  getResourcesMediaIdRelatedMediaFormat(
    req: operations.GetResourcesMediaIdRelatedMediaFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaIdRelatedMediaFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaIdRelatedMediaFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/media/{id}/relatedMedia.{format}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaIdRelatedMediaFormatResponse =
        new operations.GetResourcesMediaIdRelatedMediaFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaItemWrappeds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.mediaItemWrappeds = utils.objectToClass(
              httpRes?.data,
              shared.MediaItemWrapped,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get syndicated content for MediaItem
   *
   * @remarks
   * Get syndicated content.
   */
  getResourcesMediaIdSyndicateFormat(
    req: operations.GetResourcesMediaIdSyndicateFormatRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaIdSyndicateFormatResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaIdSyndicateFormatRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/media/{id}/syndicate.{format}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaIdSyndicateFormatResponse =
        new operations.GetResourcesMediaIdSyndicateFormatResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.syndicateMarshallerWrapped = utils.objectToClass(
              httpRes?.data,
              shared.SyndicateMarshallerWrapped
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get JPG thumbnail for MediaItem
   *
   * @remarks
   * Get the jpg thumbnail of the content item where applicable.
   */
  getResourcesMediaIdThumbnailJpg(
    req: operations.GetResourcesMediaIdThumbnailJpgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaIdThumbnailJpgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaIdThumbnailJpgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/media/{id}/thumbnail.jpg",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaIdThumbnailJpgResponse =
        new operations.GetResourcesMediaIdThumbnailJpgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getResourcesMediaIdThumbnailJpg200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get Youtube metadata for MediaItem
   *
   * @remarks
   * Youtube meta-data for a video item.
   */
  getResourcesMediaIdYoutubeMetaDataJson(
    req: operations.GetResourcesMediaIdYoutubeMetaDataJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetResourcesMediaIdYoutubeMetaDataJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetResourcesMediaIdYoutubeMetaDataJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/resources/media/{id}/youtubeMetaData.json",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetResourcesMediaIdYoutubeMetaDataJsonResponse =
        new operations.GetResourcesMediaIdYoutubeMetaDataJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getResourcesMediaIdYoutubeMetaDataJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetResourcesMediaIdYoutubeMetaDataJson200ApplicationJSON
              );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
