"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dynamiclistenerstate as shared_dynamiclistenerstate
from ..shared import updatefailurestate as shared_updatefailurestate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DynamicListener:
    r"""Describes a dynamically loaded listener via the LDS API. [#next-free-field: 6]"""
    
    active_state: Optional[shared_dynamiclistenerstate.DynamicListenerState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeState'), 'exclude': lambda f: f is None }})  
    draining_state: Optional[shared_dynamiclistenerstate.DynamicListenerState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('drainingState'), 'exclude': lambda f: f is None }})  
    error_state: Optional[shared_updatefailurestate.UpdateFailureState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorState'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name or unique id of this listener, pulled from the DynamicListenerState config."""  
    warming_state: Optional[shared_dynamiclistenerstate.DynamicListenerState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warmingState'), 'exclude': lambda f: f is None }})  
    