"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Tenancy:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def tenancy_tenant_groups_create(self, request: shared.WritableTenantGroupInput) -> operations.TenancyTenantGroupsCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenancy/tenant-groups/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantGroupsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TenantGroup])
                res.tenant_group = out

        return res

    def tenancy_tenant_groups_delete(self, request: operations.TenancyTenantGroupsDeleteRequest) -> operations.TenancyTenantGroupsDeleteResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.TenancyTenantGroupsDeleteRequest, base_url, '/tenancy/tenant-groups/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantGroupsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tenancy_tenant_groups_list(self, request: operations.TenancyTenantGroupsListRequest) -> operations.TenancyTenantGroupsListResponse:
        r"""Call to super to allow for caching"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenancy/tenant-groups/'
        
        query_params = utils.get_query_params(operations.TenancyTenantGroupsListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TenancyTenantGroupsList200ApplicationJSON])
                res.tenancy_tenant_groups_list_200_application_json_object = out

        return res

    def tenancy_tenant_groups_partial_update(self, request: operations.TenancyTenantGroupsPartialUpdateRequest) -> operations.TenancyTenantGroupsPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.TenancyTenantGroupsPartialUpdateRequest, base_url, '/tenancy/tenant-groups/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "writable_tenant_group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantGroupsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TenantGroup])
                res.tenant_group = out

        return res

    def tenancy_tenant_groups_read(self, request: operations.TenancyTenantGroupsReadRequest) -> operations.TenancyTenantGroupsReadResponse:
        r"""Call to super to allow for caching"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TenancyTenantGroupsReadRequest, base_url, '/tenancy/tenant-groups/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantGroupsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TenantGroup])
                res.tenant_group = out

        return res

    def tenancy_tenant_groups_update(self, request: operations.TenancyTenantGroupsUpdateRequest) -> operations.TenancyTenantGroupsUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.TenancyTenantGroupsUpdateRequest, base_url, '/tenancy/tenant-groups/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "writable_tenant_group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantGroupsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TenantGroup])
                res.tenant_group = out

        return res

    def tenancy_tenants_create(self, request: shared.WritableTenantInput) -> operations.TenancyTenantsCreateResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenancy/tenants/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tenant])
                res.tenant = out

        return res

    def tenancy_tenants_delete(self, request: operations.TenancyTenantsDeleteRequest) -> operations.TenancyTenantsDeleteResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.TenancyTenantsDeleteRequest, base_url, '/tenancy/tenants/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tenancy_tenants_list(self, request: operations.TenancyTenantsListRequest) -> operations.TenancyTenantsListResponse:
        r"""Call to super to allow for caching"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenancy/tenants/'
        
        query_params = utils.get_query_params(operations.TenancyTenantsListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TenancyTenantsList200ApplicationJSON])
                res.tenancy_tenants_list_200_application_json_object = out

        return res

    def tenancy_tenants_partial_update(self, request: operations.TenancyTenantsPartialUpdateRequest) -> operations.TenancyTenantsPartialUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.TenancyTenantsPartialUpdateRequest, base_url, '/tenancy/tenants/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "writable_tenant_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tenant])
                res.tenant = out

        return res

    def tenancy_tenants_read(self, request: operations.TenancyTenantsReadRequest) -> operations.TenancyTenantsReadResponse:
        r"""Call to super to allow for caching"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TenancyTenantsReadRequest, base_url, '/tenancy/tenants/{id}/', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantsReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tenant])
                res.tenant = out

        return res

    def tenancy_tenants_update(self, request: operations.TenancyTenantsUpdateRequest) -> operations.TenancyTenantsUpdateResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.TenancyTenantsUpdateRequest, base_url, '/tenancy/tenants/{id}/', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "writable_tenant_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TenancyTenantsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tenant])
                res.tenant = out

        return res

    