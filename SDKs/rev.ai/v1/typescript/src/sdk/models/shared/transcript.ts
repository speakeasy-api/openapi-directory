/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Type of transcript element. If Rev.ai was unable to determine the spoken word, the `type` will be `unknown`.
 */
export enum TranscriptMonologuesElementsTypeEnum {
  Text = "text",
  Punct = "punct",
  Unknown = "unknown",
}

export class TranscriptMonologuesElements extends SpeakeasyBase {
  /**
   * Confidence score of the provided value. If the element `type` is `punct` or `unknown`, confidence will be `null`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confidence" })
  confidence?: number;

  /**
   * The timestamp of the beginning of the element relative to the beginning of the audio in seconds (centisecond precision)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ts" })
  ts?: number;

  /**
   * The timestamp of the end of the element relative to the beginning of the audio in seconds (centisecond precision)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ts_end" })
  tsEnd?: number;

  /**
   * Type of transcript element. If Rev.ai was unable to determine the spoken word, the `type` will be `unknown`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: TranscriptMonologuesElementsTypeEnum;

  /**
   * Value of the transcript element.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class TranscriptMonologues extends SpeakeasyBase {
  /**
   * Array of transcript elements
   */
  @SpeakeasyMetadata({ elemType: TranscriptMonologuesElements })
  @Expose({ name: "elements" })
  @Type(() => TranscriptMonologuesElements)
  elements?: TranscriptMonologuesElements[];

  /**
   * Id of the speaker of the monologue
   */
  @SpeakeasyMetadata()
  @Expose({ name: "speaker" })
  speaker?: number;
}

/**
 * Rev.ai Transcript Model
 *
 * @remarks
 * ***
 * Note: properties are not displayed in the returned object if they are null
 *
 * Jobs with skip_diarization set to true will only show a single speaker for the entire duration of the transcript.
 *
 */
export class Transcript extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: TranscriptMonologues })
  @Expose({ name: "monologues" })
  @Type(() => TranscriptMonologues)
  monologues?: TranscriptMonologues[];
}
