"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import date_ as shared_date_
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PropertyPerformanceResultAdvanceBookingWindowEnum(str, Enum):
    r"""Difference in days between query date and check-in date in property's local timezone. Only present if `advanceBookingWindow` is specified in `aggregateBy` in the request."""
    ADVANCE_BOOKING_WINDOW_UNSPECIFIED = 'ADVANCE_BOOKING_WINDOW_UNSPECIFIED'
    ADVANCE_BOOKING_WINDOW_SAME_DAY = 'ADVANCE_BOOKING_WINDOW_SAME_DAY'
    ADVANCE_BOOKING_WINDOW_NEXT_DAY = 'ADVANCE_BOOKING_WINDOW_NEXT_DAY'
    ADVANCE_BOOKING_WINDOW_DAYS_2_TO_7 = 'ADVANCE_BOOKING_WINDOW_DAYS_2_TO_7'
    ADVANCE_BOOKING_WINDOW_DAYS_8_TO_14 = 'ADVANCE_BOOKING_WINDOW_DAYS_8_TO_14'
    ADVANCE_BOOKING_WINDOW_DAYS_15_TO_30 = 'ADVANCE_BOOKING_WINDOW_DAYS_15_TO_30'
    ADVANCE_BOOKING_WINDOW_DAYS_31_TO_60 = 'ADVANCE_BOOKING_WINDOW_DAYS_31_TO_60'
    ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90 = 'ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90'
    ADVANCE_BOOKING_WINDOW_DAYS_91_TO_120 = 'ADVANCE_BOOKING_WINDOW_DAYS_91_TO_120'
    ADVANCE_BOOKING_WINDOW_DAYS_121_TO_150 = 'ADVANCE_BOOKING_WINDOW_DAYS_121_TO_150'
    ADVANCE_BOOKING_WINDOW_DAYS_151_TO_180 = 'ADVANCE_BOOKING_WINDOW_DAYS_151_TO_180'
    ADVANCE_BOOKING_WINDOW_DAYS_OVER_180 = 'ADVANCE_BOOKING_WINDOW_DAYS_OVER_180'

class PropertyPerformanceResultDeviceTypeEnum(str, Enum):
    r"""The user’s device type. Only present if `deviceType` is specified in `aggregateBy` in the request."""
    DEVICE_UNSPECIFIED = 'DEVICE_UNSPECIFIED'
    DEVICE_UNKNOWN = 'DEVICE_UNKNOWN'
    DESKTOP = 'DESKTOP'
    MOBILE = 'MOBILE'
    TABLET = 'TABLET'

class PropertyPerformanceResultLengthOfStayEnum(str, Enum):
    r"""Number of nights between check-in and check-out dates specified by user. Only present if `lengthOfStay` is specified in `aggregateBy` in the request."""
    LENGTH_OF_STAY_UNSPECIFIED = 'LENGTH_OF_STAY_UNSPECIFIED'
    LENGTH_OF_STAY_NIGHTS_1 = 'LENGTH_OF_STAY_NIGHTS_1'
    LENGTH_OF_STAY_NIGHTS_2 = 'LENGTH_OF_STAY_NIGHTS_2'
    LENGTH_OF_STAY_NIGHTS_3 = 'LENGTH_OF_STAY_NIGHTS_3'
    LENGTH_OF_STAY_NIGHTS_4_TO_7 = 'LENGTH_OF_STAY_NIGHTS_4_TO_7'
    LENGTH_OF_STAY_NIGHTS_8_TO_14 = 'LENGTH_OF_STAY_NIGHTS_8_TO_14'
    LENGTH_OF_STAY_NIGHTS_15_TO_21 = 'LENGTH_OF_STAY_NIGHTS_15_TO_21'
    LENGTH_OF_STAY_NIGHTS_22_TO_30 = 'LENGTH_OF_STAY_NIGHTS_22_TO_30'
    LENGTH_OF_STAY_NIGHTS_OVER_30 = 'LENGTH_OF_STAY_NIGHTS_OVER_30'

class PropertyPerformanceResultOccupancyEnum(str, Enum):
    r"""Requested number of people staying at the property. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request."""
    OCCUPANCY_UNSPECIFIED = 'OCCUPANCY_UNSPECIFIED'
    OCCUPANCY_1 = 'OCCUPANCY_1'
    OCCUPANCY_2 = 'OCCUPANCY_2'
    OCCUPANCY_3 = 'OCCUPANCY_3'
    OCCUPANCY_4 = 'OCCUPANCY_4'
    OCCUPANCY_OVER_4 = 'OCCUPANCY_OVER_4'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PropertyPerformanceResult:
    r"""Represents a result from querying for the property performance report for an account."""
    
    ads_click_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adsClickCount'), 'exclude': lambda f: f is None }})
    r"""The total number of ad clicks that were recorded for this result."""  
    ads_clickthrough_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adsClickthroughRate'), 'exclude': lambda f: f is None }})
    r"""Equal to `ads_click_count` divided by `ads_impression_count`."""  
    ads_impression_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adsImpressionCount'), 'exclude': lambda f: f is None }})
    r"""The total number of ad impressions that were recorded for this result."""  
    advance_booking_window: Optional[PropertyPerformanceResultAdvanceBookingWindowEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advanceBookingWindow'), 'exclude': lambda f: f is None }})
    r"""Difference in days between query date and check-in date in property's local timezone. Only present if `advanceBookingWindow` is specified in `aggregateBy` in the request."""  
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""Partner-specified brand for the property. Only present if `brand` is specified in `aggregateBy` in the request."""  
    click_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickCount'), 'exclude': lambda f: f is None }})
    r"""The total number of free booking link clicks that were recorded for this result."""  
    clickthrough_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickthroughRate'), 'exclude': lambda f: f is None }})
    r"""Equal to `click_count` divided by `impression_count`."""  
    date_: Optional[shared_date_.Date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp"""  
    device_type: Optional[PropertyPerformanceResultDeviceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceType'), 'exclude': lambda f: f is None }})
    r"""The user’s device type. Only present if `deviceType` is specified in `aggregateBy` in the request."""  
    high_intent_users: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highIntentUsers'), 'exclude': lambda f: f is None }})
    r"""Whether the user’s query indicated a strong interest in booking. Only present if `highIntentUsers` is specified in `aggregateBy` in the request."""  
    impression_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('impressionCount'), 'exclude': lambda f: f is None }})
    r"""The total number of free booking link impressions that were recorded for this result. This value is rounded to preserve user privacy."""  
    length_of_stay: Optional[PropertyPerformanceResultLengthOfStayEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lengthOfStay'), 'exclude': lambda f: f is None }})
    r"""Number of nights between check-in and check-out dates specified by user. Only present if `lengthOfStay` is specified in `aggregateBy` in the request."""  
    occupancy: Optional[PropertyPerformanceResultOccupancyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occupancy'), 'exclude': lambda f: f is None }})
    r"""Requested number of people staying at the property. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request."""  
    partner_property_display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerPropertyDisplayName'), 'exclude': lambda f: f is None }})
    r"""Partner's property name. Only present if `partnerPropertyDisplayName` is specified in `aggregateBy` in the request."""  
    partner_property_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerPropertyId'), 'exclude': lambda f: f is None }})
    r"""Partner's property ID. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request."""  
    property_region_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propertyRegionCode'), 'exclude': lambda f: f is None }})
    r"""ISO 3116 region code of the country/region of the property. Only present if `propertyRegionCode` is specified in `aggregateBy` in the request"""  
    user_region_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userRegionCode'), 'exclude': lambda f: f is None }})
    r"""ISO 3116 region code of the country/region of the user. Only present if `userRegionCode` is specified in `aggregateBy` in the request"""  
    