/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Address, AddressInput } from "./address";
import { AgeRangeType } from "./agerangetype";
import { Biography, BiographyInput } from "./biography";
import { Birthday, BirthdayInput } from "./birthday";
import { BraggingRights, BraggingRightsInput } from "./braggingrights";
import { CalendarUrl, CalendarUrlInput } from "./calendarurl";
import { ClientData, ClientDataInput } from "./clientdata";
import { CoverPhoto } from "./coverphoto";
import { EmailAddress, EmailAddressInput } from "./emailaddress";
import { Event, EventInput } from "./event";
import { ExternalId, ExternalIdInput } from "./externalid";
import { FileAs, FileAsInput } from "./fileas";
import { Gender, GenderInput } from "./gender";
import { ImClient, ImClientInput } from "./imclient";
import { Interest, InterestInput } from "./interest";
import { Locale, LocaleInput } from "./locale";
import { Location, LocationInput } from "./location";
import { Membership, MembershipInput } from "./membership";
import { MiscKeyword, MiscKeywordInput } from "./misckeyword";
import { Name, NameInput } from "./name";
import { Nickname, NicknameInput } from "./nickname";
import { Occupation, OccupationInput } from "./occupation";
import { Organization, OrganizationInput } from "./organization";
import { PersonMetadata, PersonMetadataInput } from "./personmetadata";
import { PhoneNumber, PhoneNumberInput } from "./phonenumber";
import { Photo } from "./photo";
import { Relation, RelationInput } from "./relation";
import { RelationshipInterest } from "./relationshipinterest";
import { RelationshipStatus } from "./relationshipstatus";
import { Residence, ResidenceInput } from "./residence";
import { SipAddress, SipAddressInput } from "./sipaddress";
import { Skill, SkillInput } from "./skill";
import { Tagline } from "./tagline";
import { Url, UrlInput } from "./url";
import { UserDefined, UserDefinedInput } from "./userdefined";
import { Expose, Type } from "class-transformer";

/**
 * Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.
 */
export enum PersonAgeRangeEnum {
  AgeRangeUnspecified = "AGE_RANGE_UNSPECIFIED",
  LessThanEighteen = "LESS_THAN_EIGHTEEN",
  EighteenToTwenty = "EIGHTEEN_TO_TWENTY",
  TwentyOneOrOlder = "TWENTY_ONE_OR_OLDER",
}

/**
 * Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.
 */
export class Person extends SpeakeasyBase {
  /**
   * The person's street addresses.
   */
  @SpeakeasyMetadata({ elemType: Address })
  @Expose({ name: "addresses" })
  @Type(() => Address)
  addresses?: Address[];

  /**
   * Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ageRange" })
  ageRange?: PersonAgeRangeEnum;

  /**
   * Output only. The person's age ranges.
   */
  @SpeakeasyMetadata({ elemType: AgeRangeType })
  @Expose({ name: "ageRanges" })
  @Type(() => AgeRangeType)
  ageRanges?: AgeRangeType[];

  /**
   * The person's biographies. This field is a singleton for contact sources.
   */
  @SpeakeasyMetadata({ elemType: Biography })
  @Expose({ name: "biographies" })
  @Type(() => Biography)
  biographies?: Biography[];

  /**
   * The person's birthdays. This field is a singleton for contact sources.
   */
  @SpeakeasyMetadata({ elemType: Birthday })
  @Expose({ name: "birthdays" })
  @Type(() => Birthday)
  birthdays?: Birthday[];

  /**
   * **DEPRECATED**: No data will be returned The person's bragging rights.
   */
  @SpeakeasyMetadata({ elemType: BraggingRights })
  @Expose({ name: "braggingRights" })
  @Type(() => BraggingRights)
  braggingRights?: BraggingRights[];

  /**
   * The person's calendar URLs.
   */
  @SpeakeasyMetadata({ elemType: CalendarUrl })
  @Expose({ name: "calendarUrls" })
  @Type(() => CalendarUrl)
  calendarUrls?: CalendarUrl[];

  /**
   * The person's client data.
   */
  @SpeakeasyMetadata({ elemType: ClientData })
  @Expose({ name: "clientData" })
  @Type(() => ClientData)
  clientData?: ClientData[];

  /**
   * Output only. The person's cover photos.
   */
  @SpeakeasyMetadata({ elemType: CoverPhoto })
  @Expose({ name: "coverPhotos" })
  @Type(() => CoverPhoto)
  coverPhotos?: CoverPhoto[];

  /**
   * The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.
   */
  @SpeakeasyMetadata({ elemType: EmailAddress })
  @Expose({ name: "emailAddresses" })
  @Type(() => EmailAddress)
  emailAddresses?: EmailAddress[];

  /**
   * The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etag" })
  etag?: string;

  /**
   * The person's events.
   */
  @SpeakeasyMetadata({ elemType: Event })
  @Expose({ name: "events" })
  @Type(() => Event)
  events?: Event[];

  /**
   * The person's external IDs.
   */
  @SpeakeasyMetadata({ elemType: ExternalId })
  @Expose({ name: "externalIds" })
  @Type(() => ExternalId)
  externalIds?: ExternalId[];

  /**
   * The person's file-ases.
   */
  @SpeakeasyMetadata({ elemType: FileAs })
  @Expose({ name: "fileAses" })
  @Type(() => FileAs)
  fileAses?: FileAs[];

  /**
   * The person's genders. This field is a singleton for contact sources.
   */
  @SpeakeasyMetadata({ elemType: Gender })
  @Expose({ name: "genders" })
  @Type(() => Gender)
  genders?: Gender[];

  /**
   * The person's instant messaging clients.
   */
  @SpeakeasyMetadata({ elemType: ImClient })
  @Expose({ name: "imClients" })
  @Type(() => ImClient)
  imClients?: ImClient[];

  /**
   * The person's interests.
   */
  @SpeakeasyMetadata({ elemType: Interest })
  @Expose({ name: "interests" })
  @Type(() => Interest)
  interests?: Interest[];

  /**
   * The person's locale preferences.
   */
  @SpeakeasyMetadata({ elemType: Locale })
  @Expose({ name: "locales" })
  @Type(() => Locale)
  locales?: Locale[];

  /**
   * The person's locations.
   */
  @SpeakeasyMetadata({ elemType: Location })
  @Expose({ name: "locations" })
  @Type(() => Location)
  locations?: Location[];

  /**
   * The person's group memberships.
   */
  @SpeakeasyMetadata({ elemType: Membership })
  @Expose({ name: "memberships" })
  @Type(() => Membership)
  memberships?: Membership[];

  /**
   * The metadata about a person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => PersonMetadata)
  metadata?: PersonMetadata;

  /**
   * The person's miscellaneous keywords.
   */
  @SpeakeasyMetadata({ elemType: MiscKeyword })
  @Expose({ name: "miscKeywords" })
  @Type(() => MiscKeyword)
  miscKeywords?: MiscKeyword[];

  /**
   * The person's names. This field is a singleton for contact sources.
   */
  @SpeakeasyMetadata({ elemType: Name })
  @Expose({ name: "names" })
  @Type(() => Name)
  names?: Name[];

  /**
   * The person's nicknames.
   */
  @SpeakeasyMetadata({ elemType: Nickname })
  @Expose({ name: "nicknames" })
  @Type(() => Nickname)
  nicknames?: Nickname[];

  /**
   * The person's occupations.
   */
  @SpeakeasyMetadata({ elemType: Occupation })
  @Expose({ name: "occupations" })
  @Type(() => Occupation)
  occupations?: Occupation[];

  /**
   * The person's past or current organizations.
   */
  @SpeakeasyMetadata({ elemType: Organization })
  @Expose({ name: "organizations" })
  @Type(() => Organization)
  organizations?: Organization[];

  /**
   * The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.
   */
  @SpeakeasyMetadata({ elemType: PhoneNumber })
  @Expose({ name: "phoneNumbers" })
  @Type(() => PhoneNumber)
  phoneNumbers?: PhoneNumber[];

  /**
   * Output only. The person's photos.
   */
  @SpeakeasyMetadata({ elemType: Photo })
  @Expose({ name: "photos" })
  @Type(() => Photo)
  photos?: Photo[];

  /**
   * The person's relations.
   */
  @SpeakeasyMetadata({ elemType: Relation })
  @Expose({ name: "relations" })
  @Type(() => Relation)
  relations?: Relation[];

  /**
   * Output only. **DEPRECATED**: No data will be returned The person's relationship interests.
   */
  @SpeakeasyMetadata({ elemType: RelationshipInterest })
  @Expose({ name: "relationshipInterests" })
  @Type(() => RelationshipInterest)
  relationshipInterests?: RelationshipInterest[];

  /**
   * Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.
   */
  @SpeakeasyMetadata({ elemType: RelationshipStatus })
  @Expose({ name: "relationshipStatuses" })
  @Type(() => RelationshipStatus)
  relationshipStatuses?: RelationshipStatus[];

  /**
   * **DEPRECATED**: (Please use `person.locations` instead) The person's residences.
   */
  @SpeakeasyMetadata({ elemType: Residence })
  @Expose({ name: "residences" })
  @Type(() => Residence)
  residences?: Residence[];

  /**
   * The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceName" })
  resourceName?: string;

  /**
   * The person's SIP addresses.
   */
  @SpeakeasyMetadata({ elemType: SipAddress })
  @Expose({ name: "sipAddresses" })
  @Type(() => SipAddress)
  sipAddresses?: SipAddress[];

  /**
   * The person's skills.
   */
  @SpeakeasyMetadata({ elemType: Skill })
  @Expose({ name: "skills" })
  @Type(() => Skill)
  skills?: Skill[];

  /**
   * Output only. **DEPRECATED**: No data will be returned The person's taglines.
   */
  @SpeakeasyMetadata({ elemType: Tagline })
  @Expose({ name: "taglines" })
  @Type(() => Tagline)
  taglines?: Tagline[];

  /**
   * The person's associated URLs.
   */
  @SpeakeasyMetadata({ elemType: Url })
  @Expose({ name: "urls" })
  @Type(() => Url)
  urls?: Url[];

  /**
   * The person's user defined data.
   */
  @SpeakeasyMetadata({ elemType: UserDefined })
  @Expose({ name: "userDefined" })
  @Type(() => UserDefined)
  userDefined?: UserDefined[];
}

/**
 * Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.
 */
export class PersonInput extends SpeakeasyBase {
  /**
   * The person's street addresses.
   */
  @SpeakeasyMetadata({ elemType: AddressInput })
  @Expose({ name: "addresses" })
  @Type(() => AddressInput)
  addresses?: AddressInput[];

  /**
   * The person's biographies. This field is a singleton for contact sources.
   */
  @SpeakeasyMetadata({ elemType: BiographyInput })
  @Expose({ name: "biographies" })
  @Type(() => BiographyInput)
  biographies?: BiographyInput[];

  /**
   * The person's birthdays. This field is a singleton for contact sources.
   */
  @SpeakeasyMetadata({ elemType: BirthdayInput })
  @Expose({ name: "birthdays" })
  @Type(() => BirthdayInput)
  birthdays?: BirthdayInput[];

  /**
   * **DEPRECATED**: No data will be returned The person's bragging rights.
   */
  @SpeakeasyMetadata({ elemType: BraggingRightsInput })
  @Expose({ name: "braggingRights" })
  @Type(() => BraggingRightsInput)
  braggingRights?: BraggingRightsInput[];

  /**
   * The person's calendar URLs.
   */
  @SpeakeasyMetadata({ elemType: CalendarUrlInput })
  @Expose({ name: "calendarUrls" })
  @Type(() => CalendarUrlInput)
  calendarUrls?: CalendarUrlInput[];

  /**
   * The person's client data.
   */
  @SpeakeasyMetadata({ elemType: ClientDataInput })
  @Expose({ name: "clientData" })
  @Type(() => ClientDataInput)
  clientData?: ClientDataInput[];

  /**
   * The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.
   */
  @SpeakeasyMetadata({ elemType: EmailAddressInput })
  @Expose({ name: "emailAddresses" })
  @Type(() => EmailAddressInput)
  emailAddresses?: EmailAddressInput[];

  /**
   * The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etag" })
  etag?: string;

  /**
   * The person's events.
   */
  @SpeakeasyMetadata({ elemType: EventInput })
  @Expose({ name: "events" })
  @Type(() => EventInput)
  events?: EventInput[];

  /**
   * The person's external IDs.
   */
  @SpeakeasyMetadata({ elemType: ExternalIdInput })
  @Expose({ name: "externalIds" })
  @Type(() => ExternalIdInput)
  externalIds?: ExternalIdInput[];

  /**
   * The person's file-ases.
   */
  @SpeakeasyMetadata({ elemType: FileAsInput })
  @Expose({ name: "fileAses" })
  @Type(() => FileAsInput)
  fileAses?: FileAsInput[];

  /**
   * The person's genders. This field is a singleton for contact sources.
   */
  @SpeakeasyMetadata({ elemType: GenderInput })
  @Expose({ name: "genders" })
  @Type(() => GenderInput)
  genders?: GenderInput[];

  /**
   * The person's instant messaging clients.
   */
  @SpeakeasyMetadata({ elemType: ImClientInput })
  @Expose({ name: "imClients" })
  @Type(() => ImClientInput)
  imClients?: ImClientInput[];

  /**
   * The person's interests.
   */
  @SpeakeasyMetadata({ elemType: InterestInput })
  @Expose({ name: "interests" })
  @Type(() => InterestInput)
  interests?: InterestInput[];

  /**
   * The person's locale preferences.
   */
  @SpeakeasyMetadata({ elemType: LocaleInput })
  @Expose({ name: "locales" })
  @Type(() => LocaleInput)
  locales?: LocaleInput[];

  /**
   * The person's locations.
   */
  @SpeakeasyMetadata({ elemType: LocationInput })
  @Expose({ name: "locations" })
  @Type(() => LocationInput)
  locations?: LocationInput[];

  /**
   * The person's group memberships.
   */
  @SpeakeasyMetadata({ elemType: MembershipInput })
  @Expose({ name: "memberships" })
  @Type(() => MembershipInput)
  memberships?: MembershipInput[];

  /**
   * The metadata about a person.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => PersonMetadataInput)
  metadata?: PersonMetadataInput;

  /**
   * The person's miscellaneous keywords.
   */
  @SpeakeasyMetadata({ elemType: MiscKeywordInput })
  @Expose({ name: "miscKeywords" })
  @Type(() => MiscKeywordInput)
  miscKeywords?: MiscKeywordInput[];

  /**
   * The person's names. This field is a singleton for contact sources.
   */
  @SpeakeasyMetadata({ elemType: NameInput })
  @Expose({ name: "names" })
  @Type(() => NameInput)
  names?: NameInput[];

  /**
   * The person's nicknames.
   */
  @SpeakeasyMetadata({ elemType: NicknameInput })
  @Expose({ name: "nicknames" })
  @Type(() => NicknameInput)
  nicknames?: NicknameInput[];

  /**
   * The person's occupations.
   */
  @SpeakeasyMetadata({ elemType: OccupationInput })
  @Expose({ name: "occupations" })
  @Type(() => OccupationInput)
  occupations?: OccupationInput[];

  /**
   * The person's past or current organizations.
   */
  @SpeakeasyMetadata({ elemType: OrganizationInput })
  @Expose({ name: "organizations" })
  @Type(() => OrganizationInput)
  organizations?: OrganizationInput[];

  /**
   * The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.
   */
  @SpeakeasyMetadata({ elemType: PhoneNumberInput })
  @Expose({ name: "phoneNumbers" })
  @Type(() => PhoneNumberInput)
  phoneNumbers?: PhoneNumberInput[];

  /**
   * The person's relations.
   */
  @SpeakeasyMetadata({ elemType: RelationInput })
  @Expose({ name: "relations" })
  @Type(() => RelationInput)
  relations?: RelationInput[];

  /**
   * **DEPRECATED**: (Please use `person.locations` instead) The person's residences.
   */
  @SpeakeasyMetadata({ elemType: ResidenceInput })
  @Expose({ name: "residences" })
  @Type(() => ResidenceInput)
  residences?: ResidenceInput[];

  /**
   * The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceName" })
  resourceName?: string;

  /**
   * The person's SIP addresses.
   */
  @SpeakeasyMetadata({ elemType: SipAddressInput })
  @Expose({ name: "sipAddresses" })
  @Type(() => SipAddressInput)
  sipAddresses?: SipAddressInput[];

  /**
   * The person's skills.
   */
  @SpeakeasyMetadata({ elemType: SkillInput })
  @Expose({ name: "skills" })
  @Type(() => SkillInput)
  skills?: SkillInput[];

  /**
   * The person's associated URLs.
   */
  @SpeakeasyMetadata({ elemType: UrlInput })
  @Expose({ name: "urls" })
  @Type(() => UrlInput)
  urls?: UrlInput[];

  /**
   * The person's user defined data.
   */
  @SpeakeasyMetadata({ elemType: UserDefinedInput })
  @Expose({ name: "userDefined" })
  @Type(() => UserDefinedInput)
  userDefined?: UserDefinedInput[];
}
