// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteRegistryPolicyXAmzTargetEnum
type DeleteRegistryPolicyXAmzTargetEnum string

const (
	DeleteRegistryPolicyXAmzTargetEnumAmazonEc2ContainerRegistryV20150921DeleteRegistryPolicy DeleteRegistryPolicyXAmzTargetEnum = "AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy"
)

func (e *DeleteRegistryPolicyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy":
		*e = DeleteRegistryPolicyXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteRegistryPolicyXAmzTargetEnum: %s", s)
	}
}

type DeleteRegistryPolicyRequest struct {
	RequestBody       map[string]interface{}             `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeleteRegistryPolicyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteRegistryPolicyResponse struct {
	ContentType string
	// Success
	DeleteRegistryPolicyResponse *shared.DeleteRegistryPolicyResponse
	// InvalidParameterException
	InvalidParameterException interface{}
	// RegistryPolicyNotFoundException
	RegistryPolicyNotFoundException interface{}
	// ServerException
	ServerException interface{}
	StatusCode      int
	RawResponse     *http.Response
	// ValidationException
	ValidationException interface{}
}
