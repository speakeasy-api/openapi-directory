<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Contacts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add contacts to a contact list
     * 
     * Adds contacts to a contact list. Available contact sources are: list of the contact entities, list of ids of existing contacts in user's account, list of phone numbers in E.164 format (11-digits)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddContactListItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddContactListItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddContactListItemsResponse
     */
	public function addContactListItems(
        \OpenAPI\OpenAPI\Models\Operations\AddContactListItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddContactListItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddContactListItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/lists/{id}/items', \OpenAPI\OpenAPI\Models\Operations\AddContactListItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addContactListContactsRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddContactListItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add do not contact (dnc) numbers
     * 
     * Add or update a list of Do Not Contact (DNC) contact entries. Can toggle whether the DNCs are enabled for calls/texts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AddDoNotContactRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddDoNotContactsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddDoNotContactsResponse
     */
	public function addDoNotContacts(
        \OpenAPI\OpenAPI\Models\Shared\AddDoNotContactRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddDoNotContactsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddDoNotContactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/dncs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddDoNotContactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create contact lists
     * 
     * Creates a contact list for use with campaigns using 1 of 3 inputs. A List of Contact objects, a list of String E.164 numbers, or a list of CallFire contactIds can be used as the data source for the created contact list. After contact list is added into the CallFire system, contact lists goes through seven system safeguards that check the accuracy and consistency of the data. For example, our system checks that contact number is formatted correctly, is valid, is not duplicated in another contact list, or is not added on a specific DNC list. You can configure to keep/merge or remove contacts which do not complies these rules. If contacts were not added to a contact list after the validation, this means the data needs to be properly formatted and corrected before calling this API
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateContactListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateContactListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateContactListResponse
     */
	public function createContactList(
        \OpenAPI\OpenAPI\Models\Operations\CreateContactListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateContactListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateContactListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/lists');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createContactListRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateContactListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateContactListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create contact list from file
     * 
     * Creates a contact list to be used with campaigns through uploading a .csv file. Returns the id of created list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateContactListFromFileRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateContactListFromFileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateContactListFromFileResponse
     */
	public function createContactListFromFile(
        \OpenAPI\OpenAPI\Models\Operations\CreateContactListFromFileRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateContactListFromFileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateContactListFromFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/lists/upload');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateContactListFromFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceId = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceId', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create contacts
     * 
     * Creates contacts in CallFire system. Only values from the next list can be used as external system parameter in contact creation: **NATION_BUILDER, SALES_FORCE_CONTACTS, SALES_FORCE_LEADS, SALES_FORCE_REPORTS, ZOHO, MAIL_CHIMP**. See [contacts validation rules](https://www.callfire.com/help/docs/getting-started/managing-contacts/validating-contacts#section1)
     * 
     * @param array<\OpenAPI\OpenAPI\Models\Shared\Contact> $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateContactsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateContactsResponse
     */
	public function createContacts(
        array $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateContactsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateContactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateContactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceIdList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceIdList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a contact
     * 
     * Deletes a contact instance from account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteContactRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteContactSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteContactResponse
     */
	public function deleteContact(
        \OpenAPI\OpenAPI\Models\Operations\DeleteContactRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteContactSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a contact list
     * 
     * Deletes a contact list, included contacts will not be deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteContactListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteContactListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteContactListResponse
     */
	public function deleteContactList(
        \OpenAPI\OpenAPI\Models\Operations\DeleteContactListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteContactListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteContactListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/lists/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteContactListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteContactListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete do not contact (dnc) number. If number contains commas treat as list of numbers
     * 
     * Delete a Do Not Contact (DNC) contact entry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactResponse
     */
	public function deleteDoNotContact(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/dncs/{number}', \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete do not contact (dnc) numbers contained in source.
     * 
     * Delete Do Not Contact (DNC) contact entries contained in source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactsBySourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactsBySourceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactsBySourceResponse
     */
	public function deleteDoNotContactsBySource(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactsBySourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactsBySourceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactsBySourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/dncs/sources/{source}', \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactsBySourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDoNotContactsBySourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find contact lists
     * 
     * Searches for all contact lists which are available for the current user. Returns a paged list of contact lists
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindContactListsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindContactListsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindContactListsResponse
     */
	public function findContactLists(
        \OpenAPI\OpenAPI\Models\Operations\FindContactListsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindContactListsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindContactListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/lists');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindContactListsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindContactListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactListPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactListPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find contacts
     * 
     * Find user's contacts by id, contact list, or on any property name. Returns a paged list of contacts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindContactsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindContactsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindContactsResponse
     */
	public function findContacts(
        \OpenAPI\OpenAPI\Models\Operations\FindContactsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindContactsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindContactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindContactsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindContactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find do not contact (dnc) items
     * 
     * Searches for all Do Not Contact (DNC) objects created by user. These DoNotContact entries only affect calls/texts/campaigns on this account. Returns a paged list of DoNotContact objects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindDoNotContactsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindDoNotContactsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindDoNotContactsResponse
     */
	public function findDoNotContacts(
        \OpenAPI\OpenAPI\Models\Operations\FindDoNotContactsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindDoNotContactsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindDoNotContactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/dncs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindDoNotContactsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindDoNotContactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->doNotContactPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DoNotContactPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific contact
     * 
     * Returns a Contact instance for a given contact id. Deleted contacts can be still retrieved but will be marked as deleted. Deleted contacts will not be shown in search request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContactResponse
     */
	public function getContact(
        \OpenAPI\OpenAPI\Models\Operations\GetContactRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetContactSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/{id}', \OpenAPI\OpenAPI\Models\Operations\GetContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContactRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contact = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Contact', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a contact's history
     * 
     * Searches for all texts and calls attributed to a contact. Returns a list of calls and texts a contact has been involved with
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactHistoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactHistorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContactHistoryResponse
     */
	public function getContactHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetContactHistoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetContactHistorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContactHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/{id}/history', \OpenAPI\OpenAPI\Models\Operations\GetContactHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContactHistoryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContactHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactHistory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactHistory', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific contact list
     * 
     * Returns a single ContactList instance for a given contact list id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContactListResponse
     */
	public function getContactList(
        \OpenAPI\OpenAPI\Models\Operations\GetContactListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetContactListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContactListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/lists/{id}', \OpenAPI\OpenAPI\Models\Operations\GetContactListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContactListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContactListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find contacts in a contact list
     * 
     * Searches for all entries in a contact list with specified id. Returns a paged list of contact entries
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactListItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactListItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContactListItemsResponse
     */
	public function getContactListItems(
        \OpenAPI\OpenAPI\Models\Operations\GetContactListItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetContactListItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContactListItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/lists/{id}/items', \OpenAPI\OpenAPI\Models\Operations\GetContactListItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContactListItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContactListItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get do not contact (dnc)
     * 
     * Get Do Not Contact (DNC) object create by user. This DoNotContact entry only affects calls/texts/campaigns on this account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDoNotContactRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDoNotContactSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDoNotContactResponse
     */
	public function getDoNotContact(
        \OpenAPI\OpenAPI\Models\Operations\GetDoNotContactRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDoNotContactSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDoNotContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/dncs/{number}', \OpenAPI\OpenAPI\Models\Operations\GetDoNotContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDoNotContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->doNotContact = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DoNotContact', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find universal do not contacts (udnc) associated with toNumber
     * 
     * Searches for a UniversalDoNotContact object for a given phone number. Shows whether inbound/outbound actions are allowed for a given number
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUniversalDoNotContactsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUniversalDoNotContactsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUniversalDoNotContactsResponse
     */
	public function getUniversalDoNotContacts(
        \OpenAPI\OpenAPI\Models\Operations\GetUniversalDoNotContactsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUniversalDoNotContactsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUniversalDoNotContactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/dncs/universals/{toNumber}', \OpenAPI\OpenAPI\Models\Operations\GetUniversalDoNotContactsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUniversalDoNotContactsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUniversalDoNotContactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->itemListUniversalDoNotContact = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ItemListUniversalDoNotContact', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a contact from a contact list
     * 
     * Deletes a single contact from a contact list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemResponse
     */
	public function removeContactListItem(
        \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/lists/{id}/items/{contactId}', \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete contacts from a contact list
     * 
     * Deletes contacts from a contact list. List the contact ids in request to delete multiple contacts with one request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemsResponse
     */
	public function removeContactListItems(
        \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/lists/{id}/items', \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveContactListItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a contact
     * 
     * Updates a single contact instance with id specified. See [contact validation rules](https://www.callfire.com/help/docs/getting-started/managing-contacts/validating-contacts#section1)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContactRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContactSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateContactResponse
     */
	public function updateContact(
        \OpenAPI\OpenAPI\Models\Operations\UpdateContactRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateContactSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contact", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a contact list
     * 
     * Updates contact list instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContactListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContactListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateContactListResponse
     */
	public function updateContactList(
        \OpenAPI\OpenAPI\Models\Operations\UpdateContactListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateContactListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateContactListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/lists/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateContactListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateContactListRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateContactListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an individual do not contact (dnc) number
     * 
     * Update a Do Not Contact (DNC) contact entry. Can toggle whether the DNC is enabled for calls/texts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDoNotContactRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDoNotContactSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDoNotContactResponse
     */
	public function updateDoNotContact(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDoNotContactRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDoNotContactSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDoNotContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/contacts/dncs/{number}', \OpenAPI\OpenAPI\Models\Operations\UpdateDoNotContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "doNotContactInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDoNotContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}