"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import obactiveorhistoriccurrencyandamount as shared_obactiveorhistoriccurrencyandamount
from ..shared import obbalancetype1code_enum as shared_obbalancetype1code_enum
from ..shared import obcreditdebitcode_enum as shared_obcreditdebitcode_enum
from ..shared import obcreditline1 as shared_obcreditline1
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBCashBalance1:
    r"""Set of elements used to define the balance details."""
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId') }})
    r"""A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner."""  
    amount: shared_obactiveorhistoriccurrencyandamount.OBActiveOrHistoricCurrencyAndAmount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amount') }})  
    credit_debit_indicator: shared_obcreditdebitcode_enum.OBCreditDebitCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditDebitIndicator') }})  
    date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Indicates the date (and time) of the balance.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00"""  
    type: shared_obbalancetype1code_enum.OBBalanceType1CodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    credit_line: Optional[list[shared_obcreditline1.OBCreditLine1]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreditLine'), 'exclude': lambda f: f is None }})
    r"""Set of elements used to provide details on the credit line."""  
    