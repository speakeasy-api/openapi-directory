"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PlaceholderTypeEnum(str, Enum):
    r"""The type of the placeholder."""
    NONE = 'NONE'
    BODY = 'BODY'
    CHART = 'CHART'
    CLIP_ART = 'CLIP_ART'
    CENTERED_TITLE = 'CENTERED_TITLE'
    DIAGRAM = 'DIAGRAM'
    DATE_AND_TIME = 'DATE_AND_TIME'
    FOOTER = 'FOOTER'
    HEADER = 'HEADER'
    MEDIA = 'MEDIA'
    OBJECT = 'OBJECT'
    PICTURE = 'PICTURE'
    SLIDE_NUMBER = 'SLIDE_NUMBER'
    SUBTITLE = 'SUBTITLE'
    TABLE = 'TABLE'
    TITLE = 'TITLE'
    SLIDE_IMAGE = 'SLIDE_IMAGE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Placeholder:
    r"""The placeholder information that uniquely identifies a placeholder shape."""
    
    index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('index'), 'exclude': lambda f: f is None }})
    r"""The index of the placeholder. If the same placeholder types are present in the same page, they would have different index values."""  
    parent_object_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentObjectId'), 'exclude': lambda f: f is None }})
    r"""The object ID of this shape's parent placeholder. If unset, the parent placeholder shape does not exist, so the shape does not inherit properties from any other shape."""  
    type: Optional[PlaceholderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the placeholder."""  
    