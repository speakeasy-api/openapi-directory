// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetCelebrityRecognitionQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// GetCelebrityRecognitionXAmzTargetEnum
type GetCelebrityRecognitionXAmzTargetEnum string

const (
	GetCelebrityRecognitionXAmzTargetEnumRekognitionServiceGetCelebrityRecognition GetCelebrityRecognitionXAmzTargetEnum = "RekognitionService.GetCelebrityRecognition"
)

func (e *GetCelebrityRecognitionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RekognitionService.GetCelebrityRecognition":
		*e = GetCelebrityRecognitionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCelebrityRecognitionXAmzTargetEnum: %s", s)
	}
}

type GetCelebrityRecognitionHeaders struct {
	XAmzAlgorithm     *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetCelebrityRecognitionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetCelebrityRecognitionRequest struct {
	QueryParams GetCelebrityRecognitionQueryParams
	Headers     GetCelebrityRecognitionHeaders
	Request     shared.GetCelebrityRecognitionRequest `request:"mediaType=application/json"`
}

type GetCelebrityRecognitionResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	GetCelebrityRecognitionResponse *shared.GetCelebrityRecognitionResponse
	// InternalServerError
	InternalServerError interface{}
	// InvalidPaginationTokenException
	InvalidPaginationTokenException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// ProvisionedThroughputExceededException
	ProvisionedThroughputExceededException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
