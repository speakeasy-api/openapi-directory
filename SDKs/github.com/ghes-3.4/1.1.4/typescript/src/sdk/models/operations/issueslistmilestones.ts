/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The direction of the sort. Either `asc` or `desc`.
 */
export enum IssuesListMilestonesDirectionEnum {
  Asc = "asc",
  Desc = "desc",
}

/**
 * What to sort results by. Either `due_on` or `completeness`.
 */
export enum IssuesListMilestonesSortEnum {
  DueOn = "due_on",
  Completeness = "completeness",
}

/**
 * The state of the milestone. Either `open`, `closed`, or `all`.
 */
export enum IssuesListMilestonesStateEnum {
  Open = "open",
  Closed = "closed",
  All = "all",
}

export class IssuesListMilestonesRequest extends SpeakeasyBase {
  /**
   * The direction of the sort. Either `asc` or `desc`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: IssuesListMilestonesDirectionEnum;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * Page number of the results to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results per page (max 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;

  /**
   * What to sort results by. Either `due_on` or `completeness`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: IssuesListMilestonesSortEnum;

  /**
   * The state of the milestone. Either `open`, `closed`, or `all`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: IssuesListMilestonesStateEnum;
}

export class IssuesListMilestonesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.Milestone })
  milestones?: shared.Milestone[];
}
