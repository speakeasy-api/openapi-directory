// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BpcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type BpcerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Registration Number
	RegNum string `json:"RegNum"`
	// Aadhaar number
	UID string `json:"UID"`
}

// BpcerRequestBodyFormatEnum - The format of the certificate in response.
type BpcerRequestBodyFormatEnum string

const (
	BpcerRequestBodyFormatEnumPdf BpcerRequestBodyFormatEnum = "pdf"
)

func (e BpcerRequestBodyFormatEnum) ToPointer() *BpcerRequestBodyFormatEnum {
	return &e
}

func (e *BpcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = BpcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BpcerRequestBodyFormatEnum: %v", v)
	}
}

// BpcerRequestBody - Request format
type BpcerRequestBody struct {
	CertificateParameters *BpcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format BpcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Bpcer504ApplicationJSONErrorEnum string

const (
	Bpcer504ApplicationJSONErrorEnumGatewayTimeout Bpcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Bpcer504ApplicationJSONErrorEnum) ToPointer() *Bpcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Bpcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcer504ApplicationJSONErrorDescriptionEnum string

const (
	Bpcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Bpcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Bpcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Bpcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcer504ApplicationJSON - Gateway timeout
type Bpcer504ApplicationJSON struct {
	Error            *Bpcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcer503ApplicationJSONErrorEnum string

const (
	Bpcer503ApplicationJSONErrorEnumServiceUnavailable Bpcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Bpcer503ApplicationJSONErrorEnum) ToPointer() *Bpcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Bpcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcer503ApplicationJSONErrorDescriptionEnum string

const (
	Bpcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Bpcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Bpcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Bpcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcer503ApplicationJSON - Service unavailable
type Bpcer503ApplicationJSON struct {
	Error            *Bpcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcer502ApplicationJSONErrorEnum string

const (
	Bpcer502ApplicationJSONErrorEnumBadGatewy Bpcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Bpcer502ApplicationJSONErrorEnum) ToPointer() *Bpcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Bpcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcer502ApplicationJSONErrorDescriptionEnum string

const (
	Bpcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Bpcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Bpcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Bpcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcer502ApplicationJSON - Bad gateway
type Bpcer502ApplicationJSON struct {
	Error            *Bpcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcer500ApplicationJSONErrorEnum string

const (
	Bpcer500ApplicationJSONErrorEnumInternalServerError Bpcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Bpcer500ApplicationJSONErrorEnum) ToPointer() *Bpcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Bpcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcer500ApplicationJSONErrorDescriptionEnum string

const (
	Bpcer500ApplicationJSONErrorDescriptionEnumInternalServerError Bpcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Bpcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Bpcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcer500ApplicationJSON - Internal server error
type Bpcer500ApplicationJSON struct {
	Error            *Bpcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcer404ApplicationJSONErrorEnum string

const (
	Bpcer404ApplicationJSONErrorEnumRecordNotFound Bpcer404ApplicationJSONErrorEnum = "record_not_found"
	Bpcer404ApplicationJSONErrorEnumURLNotFound    Bpcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Bpcer404ApplicationJSONErrorEnum) ToPointer() *Bpcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Bpcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcer404ApplicationJSONErrorDescriptionEnum string

const (
	Bpcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Bpcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Bpcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Bpcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Bpcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Bpcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcer404ApplicationJSON - No record found
type Bpcer404ApplicationJSON struct {
	Error            *Bpcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcer401ApplicationJSONErrorEnum string

const (
	Bpcer401ApplicationJSONErrorEnumInvalidAuthentication Bpcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Bpcer401ApplicationJSONErrorEnumInvalidAuthorization  Bpcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Bpcer401ApplicationJSONErrorEnum) ToPointer() *Bpcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Bpcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcer401ApplicationJSONErrorDescriptionEnum string

const (
	Bpcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Bpcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Bpcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Bpcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Bpcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Bpcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcer401ApplicationJSON - Unauthorized access
type Bpcer401ApplicationJSON struct {
	Error            *Bpcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcer400ApplicationJSONErrorEnum string

const (
	Bpcer400ApplicationJSONErrorEnumMissingParameter Bpcer400ApplicationJSONErrorEnum = "missing_parameter"
	Bpcer400ApplicationJSONErrorEnumInvalidParameter Bpcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Bpcer400ApplicationJSONErrorEnumInvalidFormat    Bpcer400ApplicationJSONErrorEnum = "invalid_format"
	Bpcer400ApplicationJSONErrorEnumInvalidTxnid     Bpcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Bpcer400ApplicationJSONErrorEnumInvalidConsentid Bpcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Bpcer400ApplicationJSONErrorEnum) ToPointer() *Bpcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Bpcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcer400ApplicationJSONErrorDescriptionEnum string

const (
	Bpcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Bpcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Bpcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Bpcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Bpcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Bpcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Bpcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Bpcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Bpcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Bpcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Bpcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Bpcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcer400ApplicationJSON - Bad request
type Bpcer400ApplicationJSON struct {
	Error            *Bpcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type BpcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Bpcer400ApplicationJSONObject *Bpcer400ApplicationJSON
	// Unauthorized access
	Bpcer401ApplicationJSONObject *Bpcer401ApplicationJSON
	// No record found
	Bpcer404ApplicationJSONObject *Bpcer404ApplicationJSON
	// Internal server error
	Bpcer500ApplicationJSONObject *Bpcer500ApplicationJSON
	// Bad gateway
	Bpcer502ApplicationJSONObject *Bpcer502ApplicationJSON
	// Service unavailable
	Bpcer503ApplicationJSONObject *Bpcer503ApplicationJSON
	// Gateway timeout
	Bpcer504ApplicationJSONObject *Bpcer504ApplicationJSON
}
