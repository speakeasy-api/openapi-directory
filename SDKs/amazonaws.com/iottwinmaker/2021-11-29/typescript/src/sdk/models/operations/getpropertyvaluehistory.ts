/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * An object that specifies how to interpolate data in a list.
 */
export class GetPropertyValueHistoryRequestBodyInterpolation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "interpolationType" })
  interpolationType?: shared.InterpolationTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "intervalInSeconds" })
  intervalInSeconds?: number;
}

/**
 * The time direction to use in the result order.
 */
export enum GetPropertyValueHistoryRequestBodyOrderByTimeEnum {
  Ascending = "ASCENDING",
  Descending = "DESCENDING",
}

export class GetPropertyValueHistoryRequestBody extends SpeakeasyBase {
  /**
   * The name of the component.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "componentName" })
  componentName?: string;

  /**
   * The ID of the component type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "componentTypeId" })
  componentTypeId?: string;

  /**
   * supports epoch seconds value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDateTime?: Date;

  /**
   * Timestamp represented in ISO 8601 format
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  endTime?: string;

  /**
   * The ID of the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entityId" })
  entityId?: string;

  /**
   * An object that specifies how to interpolate data in a list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interpolation" })
  @Type(() => GetPropertyValueHistoryRequestBodyInterpolation)
  interpolation?: GetPropertyValueHistoryRequestBodyInterpolation;

  /**
   * <p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * The string that specifies the next page of results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   * The time direction to use in the result order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orderByTime" })
  orderByTime?: GetPropertyValueHistoryRequestBodyOrderByTimeEnum;

  /**
   * A list of objects that filter the property value history request.
   */
  @SpeakeasyMetadata({ elemType: shared.PropertyFilter })
  @Expose({ name: "propertyFilters" })
  @Type(() => shared.PropertyFilter)
  propertyFilters?: shared.PropertyFilter[];

  /**
   * A list of properties whose value histories the request retrieves.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectedProperties" })
  selectedProperties: string[];

  /**
   * supports epoch seconds value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDateTime?: Date;

  /**
   * Timestamp represented in ISO 8601 format
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  startTime?: string;
}

export class GetPropertyValueHistoryRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: GetPropertyValueHistoryRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;

  /**
   * The ID of the workspace.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspaceId",
  })
  workspaceId: string;
}

export class GetPropertyValueHistoryResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConnectorFailureException
   */
  @SpeakeasyMetadata()
  connectorFailureException?: any;

  /**
   * ConnectorTimeoutException
   */
  @SpeakeasyMetadata()
  connectorTimeoutException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getPropertyValueHistoryResponse?: shared.GetPropertyValueHistoryResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
