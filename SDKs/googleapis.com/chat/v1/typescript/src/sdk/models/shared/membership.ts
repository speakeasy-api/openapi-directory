/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { User } from "./user";
import { Expose, Type } from "class-transformer";

/**
 * Output only. User's role within a Chat space, which determines their permitted actions in the space.
 */
export enum MembershipRoleEnum {
  MembershipRoleUnspecified = "MEMBERSHIP_ROLE_UNSPECIFIED",
  RoleMember = "ROLE_MEMBER",
  RoleManager = "ROLE_MANAGER",
}

/**
 * Output only. State of the membership.
 */
export enum MembershipStateEnum {
  MembershipStateUnspecified = "MEMBERSHIP_STATE_UNSPECIFIED",
  Joined = "JOINED",
  Invited = "INVITED",
  NotAMember = "NOT_A_MEMBER",
}

/**
 * Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space.
 */
export class Membership extends SpeakeasyBase {
  /**
   * Output only. The creation time of the membership, such as when a member joined or was invited to join a space.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * A user in Google Chat.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "member" })
  @Type(() => User)
  member?: User;

  /**
   * Resource name of the membership, assigned by the server. Format: spaces/{space}/members/{member}
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. User's role within a Chat space, which determines their permitted actions in the space.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "role" })
  role?: MembershipRoleEnum;

  /**
   * Output only. State of the membership.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: MembershipStateEnum;
}
