"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import recommendationset as shared_recommendationset
from ..shared import strategyrecommendation_enum as shared_strategyrecommendation_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServerStrategy:
    r"""Contains information about a strategy recommendation for a server."""
    
    is_preferred: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPreferred'), 'exclude': lambda f: f is None }})  
    number_of_application_components: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfApplicationComponents'), 'exclude': lambda f: f is None }})  
    recommendation: Optional[shared_recommendationset.RecommendationSet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommendation'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_strategyrecommendation_enum.StrategyRecommendationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    