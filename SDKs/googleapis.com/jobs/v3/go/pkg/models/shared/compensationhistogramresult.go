// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CompensationHistogramResultTypeEnum - Type of the request, corresponding to CompensationHistogramRequest.type.
type CompensationHistogramResultTypeEnum string

const (
	CompensationHistogramResultTypeEnumCompensationHistogramRequestTypeUnspecified CompensationHistogramResultTypeEnum = "COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED"
	CompensationHistogramResultTypeEnumBase                                        CompensationHistogramResultTypeEnum = "BASE"
	CompensationHistogramResultTypeEnumAnnualizedBase                              CompensationHistogramResultTypeEnum = "ANNUALIZED_BASE"
	CompensationHistogramResultTypeEnumAnnualizedTotal                             CompensationHistogramResultTypeEnum = "ANNUALIZED_TOTAL"
)

func (e CompensationHistogramResultTypeEnum) ToPointer() *CompensationHistogramResultTypeEnum {
	return &e
}

func (e *CompensationHistogramResultTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED":
		fallthrough
	case "BASE":
		fallthrough
	case "ANNUALIZED_BASE":
		fallthrough
	case "ANNUALIZED_TOTAL":
		*e = CompensationHistogramResultTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompensationHistogramResultTypeEnum: %v", v)
	}
}

// CompensationHistogramResult - Output only. Compensation based histogram result.
type CompensationHistogramResult struct {
	// Output only. Custom numeric bucketing result.
	Result *NumericBucketingResult `json:"result,omitempty"`
	// Type of the request, corresponding to CompensationHistogramRequest.type.
	Type *CompensationHistogramResultTypeEnum `json:"type,omitempty"`
}
