// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteRouteActionEnum
type GETDeleteRouteActionEnum string

const (
	GETDeleteRouteActionEnumDeleteRoute GETDeleteRouteActionEnum = "DeleteRoute"
)

func (e *GETDeleteRouteActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeleteRoute":
		*e = GETDeleteRouteActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteRouteActionEnum: %s", s)
	}
}

// GETDeleteRouteVersionEnum
type GETDeleteRouteVersionEnum string

const (
	GETDeleteRouteVersionEnumTwoThousandAndSixteen1115 GETDeleteRouteVersionEnum = "2016-11-15"
)

func (e *GETDeleteRouteVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDeleteRouteVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteRouteVersionEnum: %s", s)
	}
}

type GETDeleteRouteQueryParams struct {
	Action GETDeleteRouteActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
	DestinationCidrBlock *string `queryParam:"style=form,explode=true,name=DestinationCidrBlock"`
	// The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
	DestinationIpv6CidrBlock *string `queryParam:"style=form,explode=true,name=DestinationIpv6CidrBlock"`
	// The ID of the prefix list for the route.
	DestinationPrefixListID *string `queryParam:"style=form,explode=true,name=DestinationPrefixListId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the route table.
	RouteTableID string                    `queryParam:"style=form,explode=true,name=RouteTableId"`
	Version      GETDeleteRouteVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDeleteRouteHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeleteRouteRequest struct {
	QueryParams GETDeleteRouteQueryParams
	Headers     GETDeleteRouteHeaders
}

type GETDeleteRouteResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
