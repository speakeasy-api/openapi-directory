// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MemoryEventEventTypeEnum - Event type.
type MemoryEventEventTypeEnum string

const (
	MemoryEventEventTypeEnumMemoryEventTypeUnspecified MemoryEventEventTypeEnum = "MEMORY_EVENT_TYPE_UNSPECIFIED"
	MemoryEventEventTypeEnumRAMMeasured                MemoryEventEventTypeEnum = "RAM_MEASURED"
	MemoryEventEventTypeEnumInternalStorageMeasured    MemoryEventEventTypeEnum = "INTERNAL_STORAGE_MEASURED"
	MemoryEventEventTypeEnumExternalStorageDetected    MemoryEventEventTypeEnum = "EXTERNAL_STORAGE_DETECTED"
	MemoryEventEventTypeEnumExternalStorageRemoved     MemoryEventEventTypeEnum = "EXTERNAL_STORAGE_REMOVED"
	MemoryEventEventTypeEnumExternalStorageMeasured    MemoryEventEventTypeEnum = "EXTERNAL_STORAGE_MEASURED"
)

func (e MemoryEventEventTypeEnum) ToPointer() *MemoryEventEventTypeEnum {
	return &e
}

func (e *MemoryEventEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MEMORY_EVENT_TYPE_UNSPECIFIED":
		fallthrough
	case "RAM_MEASURED":
		fallthrough
	case "INTERNAL_STORAGE_MEASURED":
		fallthrough
	case "EXTERNAL_STORAGE_DETECTED":
		fallthrough
	case "EXTERNAL_STORAGE_REMOVED":
		fallthrough
	case "EXTERNAL_STORAGE_MEASURED":
		*e = MemoryEventEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MemoryEventEventTypeEnum: %v", v)
	}
}

// MemoryEvent - An event related to memory and storage measurements.
type MemoryEvent struct {
	// The number of free bytes in the medium, or for EXTERNAL_STORAGE_DETECTED, the total capacity in bytes of the storage medium.
	ByteCount *string `json:"byteCount,omitempty"`
	// The creation time of the event.
	CreateTime *string `json:"createTime,omitempty"`
	// Event type.
	EventType *MemoryEventEventTypeEnum `json:"eventType,omitempty"`
}
