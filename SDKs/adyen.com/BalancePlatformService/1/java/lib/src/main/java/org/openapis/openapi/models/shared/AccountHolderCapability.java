/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class AccountHolderCapability {
    /**
     * Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed")
    public Boolean allowed;

    public AccountHolderCapability withAllowed(Boolean allowed) {
        this.allowed = allowed;
        return this;
    }
    
    /**
     * The capability level that is allowed for the account holder.
     * 
     * Possible values: **notApplicable**, **low**, **medium**, **high**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedLevel")
    public AccountHolderCapabilityAllowedLevelEnum allowedLevel;

    public AccountHolderCapability withAllowedLevel(AccountHolderCapabilityAllowedLevelEnum allowedLevel) {
        this.allowedLevel = allowedLevel;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedSettings")
    public JSONObject allowedSettings;

    public AccountHolderCapability withAllowedSettings(JSONObject allowedSettings) {
        this.allowedSettings = allowedSettings;
        return this;
    }
    
    /**
     * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;

    public AccountHolderCapability withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * Contains verification errors and the actions that you can take to resolve them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("problems")
    public java.util.Map<String, Object>[] problems;

    public AccountHolderCapability withProblems(java.util.Map<String, Object>[] problems) {
        this.problems = problems;
        return this;
    }
    
    /**
     * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requested")
    public Boolean requested;

    public AccountHolderCapability withRequested(Boolean requested) {
        this.requested = requested;
        return this;
    }
    
    /**
     * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
     * 
     * Possible values: **notApplicable**, **low**, **medium**, **high**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedLevel")
    public AccountHolderCapabilityRequestedLevelEnum requestedLevel;

    public AccountHolderCapability withRequestedLevel(AccountHolderCapabilityRequestedLevelEnum requestedLevel) {
        this.requestedLevel = requestedLevel;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedSettings")
    public JSONObject requestedSettings;

    public AccountHolderCapability withRequestedSettings(JSONObject requestedSettings) {
        this.requestedSettings = requestedSettings;
        return this;
    }
    
    /**
     * Contains the status of the transfer instruments associated with this capability. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferInstruments")
    public AccountSupportingEntityCapability[] transferInstruments;

    public AccountHolderCapability withTransferInstruments(AccountSupportingEntityCapability[] transferInstruments) {
        this.transferInstruments = transferInstruments;
        return this;
    }
    
    /**
     * The status of the verification checks for the capability.
     * 
     * Possible values:
     * 
     * * **pending**: Adyen is running the verification.
     * 
     * * **invalid**: The verification failed. Check if the `errors` array contains more information.
     * 
     * * **valid**: The verification has been successfully completed.
     * 
     * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verificationStatus")
    public AccountHolderCapabilityVerificationStatusEnum verificationStatus;

    public AccountHolderCapability withVerificationStatus(AccountHolderCapabilityVerificationStatusEnum verificationStatus) {
        this.verificationStatus = verificationStatus;
        return this;
    }
    
    public AccountHolderCapability(){}
}
