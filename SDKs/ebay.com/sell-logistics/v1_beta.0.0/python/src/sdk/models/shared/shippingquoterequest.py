"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contact as shared_contact
from ..shared import order as shared_order
from ..shared import packagespecification as shared_packagespecification
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShippingQuoteRequest:
    r"""This complex type defines the request body for <b>createShippingQuote</b>. Sellers <i>request a quote</i> for a shipment by defining the \\"To\\" and \\"From\\" addresses for the package, plus the package's size.  <br><br>Carriers respond by offering up a \\"rate\\" for the service of theirs that best fits seller's needs."""
    
    orders: Optional[list[shared_order.Order]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orders'), 'exclude': lambda f: f is None }})
    r"""A seller-defined list that contains information about the orders in the package. This allows sellers to include information about the line items in the package with the shipment information.  <br><br>A package can contain any number of line items from one or more orders, providing they all ship in the same package.  <br><br><b>Maximum list size:</b> 10"""  
    package_specification: Optional[shared_packagespecification.PackageSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageSpecification'), 'exclude': lambda f: f is None }})
    r"""This complex type specifies the dimensions and weight of a package."""  
    ship_from: Optional[shared_contact.Contact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipFrom'), 'exclude': lambda f: f is None }})
    r"""This complex type contains contact information for an individual buyer or seller."""  
    ship_to: Optional[shared_contact.Contact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipTo'), 'exclude': lambda f: f is None }})
    r"""This complex type contains contact information for an individual buyer or seller."""  
    