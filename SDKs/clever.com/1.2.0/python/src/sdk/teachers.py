"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Teachers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_district_for_teacher(self, request: operations.GetDistrictForTeacherRequest) -> operations.GetDistrictForTeacherResponse:
        r"""Returns the district for a teacher"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDistrictForTeacherRequest, base_url, '/teachers/{id}/district', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistrictForTeacherResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DistrictResponse])
                res.district_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_grade_levels_for_teacher(self, request: operations.GetGradeLevelsForTeacherRequest) -> operations.GetGradeLevelsForTeacherResponse:
        r"""Returns the grade levels for sections a teacher teaches"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGradeLevelsForTeacherRequest, base_url, '/teachers/{id}/grade_levels', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGradeLevelsForTeacherResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GradeLevelsResponse])
                res.grade_levels_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_school_for_teacher(self, request: operations.GetSchoolForTeacherRequest) -> operations.GetSchoolForTeacherResponse:
        r"""Retrieves school info for a teacher."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSchoolForTeacherRequest, base_url, '/teachers/{id}/school', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSchoolForTeacherResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SchoolResponse])
                res.school_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_sections_for_teacher(self, request: operations.GetSectionsForTeacherRequest) -> operations.GetSectionsForTeacherResponse:
        r"""Returns the sections for a teacher"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSectionsForTeacherRequest, base_url, '/teachers/{id}/sections', request)
        
        query_params = utils.get_query_params(operations.GetSectionsForTeacherRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSectionsForTeacherResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SectionsResponse])
                res.sections_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_students_for_teacher(self, request: operations.GetStudentsForTeacherRequest) -> operations.GetStudentsForTeacherResponse:
        r"""Returns the students for a teacher"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStudentsForTeacherRequest, base_url, '/teachers/{id}/students', request)
        
        query_params = utils.get_query_params(operations.GetStudentsForTeacherRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStudentsForTeacherResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StudentsResponse])
                res.students_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_teacher(self, request: operations.GetTeacherRequest) -> operations.GetTeacherResponse:
        r"""Returns a specific teacher"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeacherRequest, base_url, '/teachers/{id}', request)
        
        query_params = utils.get_query_params(operations.GetTeacherRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeacherResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TeacherResponse])
                res.teacher_response = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_teachers(self, request: operations.GetTeachersRequest) -> operations.GetTeachersResponse:
        r"""Returns a list of teachers"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/teachers'
        
        query_params = utils.get_query_params(operations.GetTeachersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeachersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TeachersResponse])
                res.teachers_response = out

        return res

    