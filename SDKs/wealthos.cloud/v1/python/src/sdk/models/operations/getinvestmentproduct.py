"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetInvestmentProductSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    
class GetInvestmentProductCategoryIDEnum(str, Enum):
    r"""Investment Product Category Id"""
    FUNDS = 'funds'


@dataclasses.dataclass
class GetInvestmentProductRequest:
    
    category_id: GetInvestmentProductCategoryIDEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'category_id', 'style': 'simple', 'explode': False }})
    r"""Investment Product Category Id"""  
    investment_product_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'investment_product_id', 'style': 'simple', 'explode': False }})
    r"""Investment Product Id"""  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestmentProduct500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestmentProduct429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestmentProduct404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestmentProduct403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestmentProduct401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class GetInvestmentProduct200ApplicationJSONApplicableFinancialProductsEnum(str, Enum):
    GIA = 'gia'
    ISA = 'isa'

class GetInvestmentProduct200ApplicationJSONAssetTypeEnum(str, Enum):
    r"""Category of the investment product"""
    FUNDS = 'funds'

class GetInvestmentProduct200ApplicationJSONIDTypeEnum(str, Enum):
    r"""The type of id that is populated as investment_product_id"""
    ISIN = 'ISIN'
    CUSIP = 'CUSIP'
    FUND_SERV_ID = 'FundServID'

class GetInvestmentProduct200ApplicationJSONStatusEnum(str, Enum):
    r"""Status of the investment product"""
    ACTIVE = 'active'
    INACTIVE = 'inactive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetInvestmentProduct200ApplicationJSON:
    r"""success"""
    
    additional_provider_details: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_provider_details') }})
    r"""Supplies additional custom information of an investment product"""  
    asset_type: GetInvestmentProduct200ApplicationJSONAssetTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asset_type') }})
    r"""Category of the investment product"""  
    id_type: GetInvestmentProduct200ApplicationJSONIDTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_type') }})
    r"""The type of id that is populated as investment_product_id"""  
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})
    r"""Unique identifier of an investment product"""  
    pricing_method: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricing_method') }})
    r"""Method used to calculate the investment product price"""  
    applicable_financial_products: Optional[list[GetInvestmentProduct200ApplicationJSONApplicableFinancialProductsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicable_financial_products'), 'exclude': lambda f: f is None }})
    r"""Financial products this investment product is applicable for"""  
    asset_sub_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asset_sub_type'), 'exclude': lambda f: f is None }})
    r"""Sub-category of the investment product"""  
    close_price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('close_price'), 'exclude': lambda f: f is None }})
    r"""The final price for the day of the investment product"""  
    close_price_on_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('close_price_on_date'), 'exclude': lambda f: f is None }})
    r"""Exact day the close_price was recorded for the investment product"""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""currency of the investment product in ISO 4217 format"""  
    fund_asset_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fund_asset_type'), 'exclude': lambda f: f is None }})
    r"""Sub-type of investment product. Relevant for investment products of type fund only"""  
    fund_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fund_code'), 'exclude': lambda f: f is None }})
    r"""Fund code identifier. Relevant for investment products of type fund"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Investment product name"""  
    settlement_date_offset: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settlement_date_offset'), 'exclude': lambda f: f is None }})
    r"""settlement date offset of investment product"""  
    status: Optional[GetInvestmentProduct200ApplicationJSONStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the investment product"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetInvestmentProductResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_investment_product_200_application_json_object: Optional[GetInvestmentProduct200ApplicationJSON] = dataclasses.field(default=None)
    r"""success"""  
    get_investment_product_401_application_json_object: Optional[GetInvestmentProduct401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    get_investment_product_403_application_json_object: Optional[GetInvestmentProduct403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    get_investment_product_404_application_json_object: Optional[GetInvestmentProduct404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    get_investment_product_429_application_json_object: Optional[GetInvestmentProduct429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    get_investment_product_500_application_json_object: Optional[GetInvestmentProduct500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    