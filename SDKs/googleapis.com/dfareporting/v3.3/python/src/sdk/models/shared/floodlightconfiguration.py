"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customviewabilitymetric as shared_customviewabilitymetric
from ..shared import dimensionvalue as shared_dimensionvalue
from ..shared import lookbackconfiguration as shared_lookbackconfiguration
from ..shared import omnituresettings as shared_omnituresettings
from ..shared import tagsettings as shared_tagsettings
from ..shared import thirdpartyauthenticationtoken as shared_thirdpartyauthenticationtoken
from ..shared import userdefinedvariableconfiguration as shared_userdefinedvariableconfiguration
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FloodlightConfigurationFirstDayOfWeekEnum(str, Enum):
    r"""Day that will be counted as the first day of the week in reports. This is a required field."""
    MONDAY = 'MONDAY'
    SUNDAY = 'SUNDAY'

class FloodlightConfigurationNaturalSearchConversionAttributionOptionEnum(str, Enum):
    r"""Types of attribution options for natural search conversions."""
    EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION = 'EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION'
    INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION = 'INCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION'
    INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION = 'INCLUDE_NATURAL_SEARCH_TIERED_CONVERSION_ATTRIBUTION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FloodlightConfiguration:
    r"""Contains properties of a Floodlight configuration."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID of this floodlight configuration. This is a read-only field that can be left blank."""  
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Advertiser ID of the parent advertiser of this floodlight configuration."""  
    advertiser_id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserIdDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    analytics_data_sharing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analyticsDataSharingEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether advertiser data is shared with Google Analytics."""  
    custom_viewability_metric: Optional[shared_customviewabilitymetric.CustomViewabilityMetric] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customViewabilityMetric'), 'exclude': lambda f: f is None }})
    r"""Custom Viewability Metric"""  
    exposure_to_conversion_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exposureToConversionEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether the exposure-to-conversion report is enabled. This report shows detailed pathway information on up to 10 of the most recent ad exposures seen by a user before converting."""  
    first_day_of_week: Optional[FloodlightConfigurationFirstDayOfWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstDayOfWeek'), 'exclude': lambda f: f is None }})
    r"""Day that will be counted as the first day of the week in reports. This is a required field."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of this floodlight configuration. This is a read-only, auto-generated field."""  
    id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    in_app_attribution_tracking_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inAppAttributionTrackingEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether in-app attribution tracking is enabled."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#floodlightConfiguration\\"."""  
    lookback_configuration: Optional[shared_lookbackconfiguration.LookbackConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lookbackConfiguration'), 'exclude': lambda f: f is None }})
    r"""Lookback configuration settings."""  
    natural_search_conversion_attribution_option: Optional[FloodlightConfigurationNaturalSearchConversionAttributionOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('naturalSearchConversionAttributionOption'), 'exclude': lambda f: f is None }})
    r"""Types of attribution options for natural search conversions."""  
    omniture_settings: Optional[shared_omnituresettings.OmnitureSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('omnitureSettings'), 'exclude': lambda f: f is None }})
    r"""Omniture Integration Settings."""  
    subaccount_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subaccountId'), 'exclude': lambda f: f is None }})
    r"""Subaccount ID of this floodlight configuration. This is a read-only field that can be left blank."""  
    tag_settings: Optional[shared_tagsettings.TagSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagSettings'), 'exclude': lambda f: f is None }})
    r"""Dynamic and Image Tag Settings."""  
    third_party_authentication_tokens: Optional[list[shared_thirdpartyauthenticationtoken.ThirdPartyAuthenticationToken]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thirdPartyAuthenticationTokens'), 'exclude': lambda f: f is None }})
    r"""List of third-party authentication tokens enabled for this configuration."""  
    user_defined_variable_configurations: Optional[list[shared_userdefinedvariableconfiguration.UserDefinedVariableConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userDefinedVariableConfigurations'), 'exclude': lambda f: f is None }})
    r"""List of user defined variables enabled for this configuration."""  
    