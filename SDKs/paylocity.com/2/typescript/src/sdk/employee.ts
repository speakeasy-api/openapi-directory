/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Employee {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add new employee
   *
   * @remarks
   * New Employee API sends new employee data directly to Web Pay. Companies who use the New Hire Template in Web Pay may require additional fields when hiring employees. New Employee API Requests will honor these required fields.
   */
  addEmployee(
    req: operations.AddEmployeeRequest,
    security: operations.AddEmployeeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddEmployeeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddEmployeeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/companies/{companyId}/employees",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "employee",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddEmployeeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddEmployeeResponse =
        new operations.AddEmployeeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.employeeIdResponse = utils.objectToClass(
              httpRes?.data,
              shared.EmployeeIdResponse
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.errors = utils.objectToClass(
              httpRes?.data,
              shared.ErrorT,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get all employees
   *
   * @remarks
   * Get All Employees API will return employee data currently available in Web Pay.
   */
  getAllEmployees(
    req: operations.GetAllEmployeesRequest,
    security: operations.GetAllEmployeesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllEmployeesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAllEmployeesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/companies/{companyId}/employees/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAllEmployeesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllEmployeesResponse =
        new operations.GetAllEmployeesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.employeeInfos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.employeeInfos = utils.objectToClass(
              httpRes?.data,
              shared.EmployeeInfo,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 429].includes(httpRes?.status):
          break;
        case [404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.errors = utils.objectToClass(
              httpRes?.data,
              shared.ErrorT,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get employee
   *
   * @remarks
   * Get Employee API will return employee data currently available in Web Pay.
   */
  getEmployee(
    req: operations.GetEmployeeRequest,
    security: operations.GetEmployeeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEmployeeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEmployeeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/companies/{companyId}/employees/{employeeId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEmployeeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEmployeeResponse =
        new operations.GetEmployeeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.employee = utils.objectToClass(httpRes?.data, shared.Employee);
          }
          break;
        case [401, 403, 429].includes(httpRes?.status):
          break;
        case [404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.errors = utils.objectToClass(
              httpRes?.data,
              shared.ErrorT,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update employee
   *
   * @remarks
   * Update Employee API will update existing employee data in WebPay.
   */
  updateEmployee(
    req: operations.UpdateEmployeeRequest,
    security: operations.UpdateEmployeeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateEmployeeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateEmployeeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/companies/{companyId}/employees/{employeeId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "employee",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateEmployeeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateEmployeeResponse =
        new operations.UpdateEmployeeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 403, 429].includes(httpRes?.status):
          break;
        case [400, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.errors = utils.objectToClass(
              httpRes?.data,
              shared.ErrorT,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
