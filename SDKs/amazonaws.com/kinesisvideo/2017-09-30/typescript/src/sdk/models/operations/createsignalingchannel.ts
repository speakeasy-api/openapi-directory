/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A type of the signaling channel that you are creating. Currently, <code>SINGLE_MASTER</code> is the only supported channel type.
 */
export enum CreateSignalingChannelRequestBodyChannelTypeEnum {
  SingleMaster = "SINGLE_MASTER",
  FullMesh = "FULL_MESH",
}

/**
 * A structure that contains the configuration for the <code>SINGLE_MASTER</code> channel type.
 */
export class CreateSignalingChannelRequestBodySingleMasterConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "MessageTtlSeconds" })
  messageTtlSeconds?: number;
}

export class CreateSignalingChannelRequestBody extends SpeakeasyBase {
  /**
   * A name for the signaling channel that you are creating. It must be unique for each Amazon Web Services account and Amazon Web Services Region.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ChannelName" })
  channelName: string;

  /**
   * A type of the signaling channel that you are creating. Currently, <code>SINGLE_MASTER</code> is the only supported channel type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ChannelType" })
  channelType?: CreateSignalingChannelRequestBodyChannelTypeEnum;

  /**
   * A structure that contains the configuration for the <code>SINGLE_MASTER</code> channel type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SingleMasterConfiguration" })
  @Type(() => CreateSignalingChannelRequestBodySingleMasterConfiguration)
  singleMasterConfiguration?: CreateSignalingChannelRequestBodySingleMasterConfiguration;

  /**
   * A set of tags (key-value pairs) that you want to associate with this channel.
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "Tags" })
  @Type(() => shared.Tag)
  tags?: shared.Tag[];
}

export class CreateSignalingChannelRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateSignalingChannelRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateSignalingChannelResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * AccountChannelLimitExceededException
   */
  @SpeakeasyMetadata()
  accountChannelLimitExceededException?: any;

  /**
   * ClientLimitExceededException
   */
  @SpeakeasyMetadata()
  clientLimitExceededException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createSignalingChannelOutput?: shared.CreateSignalingChannelOutput;

  /**
   * InvalidArgumentException
   */
  @SpeakeasyMetadata()
  invalidArgumentException?: any;

  /**
   * ResourceInUseException
   */
  @SpeakeasyMetadata()
  resourceInUseException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TagsPerResourceExceededLimitException
   */
  @SpeakeasyMetadata()
  tagsPerResourceExceededLimitException?: any;
}
