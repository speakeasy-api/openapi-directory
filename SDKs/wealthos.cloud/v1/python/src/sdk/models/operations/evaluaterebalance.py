"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class EvaluateRebalanceSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    
class EvaluateRebalanceSwitchInstructionRequestTypeEnum(str, Enum):
    r"""Rebalance request triggering type. This describe the types of elements included in the values field"""
    POT = 'pot'
    INVESTOR = 'investor'
    PORTFOLIO = 'portfolio'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluateRebalanceSwitchInstructionRequest:
    r"""Definition of Switch instruction"""
    
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id') }})
    r"""Unique request id to ensure idempotency. (eg: UUID)"""  
    type: EvaluateRebalanceSwitchInstructionRequestTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Rebalance request triggering type. This describe the types of elements included in the values field"""  
    values: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values') }})
    r"""List of unique Ids from the mentioned type to trigger the rebalance process"""  
    

@dataclasses.dataclass
class EvaluateRebalanceRequest:
    
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    request_body: Optional[EvaluateRebalanceSwitchInstructionRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluateRebalance500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluateRebalance429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class EvaluateRebalance409ApplicationJSONStatusEnum(str, Enum):
    r"""Current status of the original request"""
    PROCESSING = 'PROCESSING'
    COMPLETE = 'COMPLETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluateRebalance409ApplicationJSON:
    r"""Duplicate request"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    status: EvaluateRebalance409ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the original request"""  
    response: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})
    r"""Stringified original response body if status is `COMPLETE`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluateRebalance404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluateRebalance403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluateRebalance401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluateRebalance400ApplicationJSON:
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class EvaluateRebalanceThisIsTheReturnObjectWithEvaluationPerPotEachIndividualPotDetailsOnTheRebalanceRequestRebalanceEligibilityStatusEnum(str, Enum):
    r"""Status of whether a pot is capable of rebalance or not"""
    ELIGIBLE = 'eligible'
    INELIGIBLE = 'ineligible'
    NO_PORTFOLIO_ATTACHED = 'no_portfolio_attached'
    NEGATIVE_HOLDINGS = 'negative_holdings'
    NO_HOLDINGS = 'no_holdings'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluateRebalanceThisIsTheReturnObjectWithEvaluationPerPotEachIndividualPotDetailsOnTheRebalanceRequest:
    r"""Each individual pot details on the rebalance request"""
    
    investor_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investor_id') }})
    r"""Unique ID of the Investors attached to the pot"""  
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})
    r"""Identifier of pot evaluated for rebalance"""  
    rebalance_eligibility_status: EvaluateRebalanceThisIsTheReturnObjectWithEvaluationPerPotEachIndividualPotDetailsOnTheRebalanceRequestRebalanceEligibilityStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rebalance_eligibility_status') }})
    r"""Status of whether a pot is capable of rebalance or not"""  
    portfolio_deviation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolio_deviation'), 'exclude': lambda f: f is None }})
    r"""Portfolio deviation for the pot"""  
    portfolio_template_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolio_template_id'), 'exclude': lambda f: f is None }})
    r"""Unique ID of the portfolio attached to the pot"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluateRebalanceThisIsTheReturnObjectWithEvaluationPerPot:
    r"""contains array for pot details"""
    
    evaluation_response: list[EvaluateRebalanceThisIsTheReturnObjectWithEvaluationPerPotEachIndividualPotDetailsOnTheRebalanceRequest] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evaluation_response') }})  
    

@dataclasses.dataclass
class EvaluateRebalanceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    evaluate_rebalance_400_application_json_object: Optional[EvaluateRebalance400ApplicationJSON] = dataclasses.field(default=None)
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""  
    evaluate_rebalance_401_application_json_object: Optional[EvaluateRebalance401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    evaluate_rebalance_403_application_json_object: Optional[EvaluateRebalance403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    evaluate_rebalance_404_application_json_object: Optional[EvaluateRebalance404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    evaluate_rebalance_409_application_json_object: Optional[EvaluateRebalance409ApplicationJSON] = dataclasses.field(default=None)
    r"""Duplicate request"""  
    evaluate_rebalance_429_application_json_object: Optional[EvaluateRebalance429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    evaluate_rebalance_500_application_json_object: Optional[EvaluateRebalance500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    this_is_the_return_object_with_evaluation_per_pot: Optional[EvaluateRebalanceThisIsTheReturnObjectWithEvaluationPerPot] = dataclasses.field(default=None)
    r"""success"""  
    