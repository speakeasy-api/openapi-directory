/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MinimalRepository } from "./minimalrepository";
import { NullableIntegration } from "./nullableintegration";
import { PullRequestMinimal } from "./pullrequestminimal";
import { SimpleCommit } from "./simplecommit";
import { Expose, Transform, Type } from "class-transformer";

export enum CheckSuiteConclusionEnum {
  Success = "success",
  Failure = "failure",
  Neutral = "neutral",
  Cancelled = "cancelled",
  Skipped = "skipped",
  TimedOut = "timed_out",
  ActionRequired = "action_required",
  StartupFailure = "startup_failure",
  Stale = "stale",
  Null = "null",
}

export enum CheckSuiteStatusEnum {
  Queued = "queued",
  InProgress = "in_progress",
  Completed = "completed",
}

/**
 * A suite of checks performed on the code of a given code change
 */
export class CheckSuite extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "after" })
  after: string;

  /**
   * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app" })
  @Type(() => NullableIntegration)
  app: NullableIntegration;

  @SpeakeasyMetadata()
  @Expose({ name: "before" })
  before: string;

  @SpeakeasyMetadata()
  @Expose({ name: "check_runs_url" })
  checkRunsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "conclusion" })
  conclusion: CheckSuiteConclusionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "head_branch" })
  headBranch: string;

  /**
   * A commit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "head_commit" })
  @Type(() => SimpleCommit)
  headCommit: SimpleCommit;

  /**
   * The SHA of the head commit that is being checked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "head_sha" })
  headSha: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "latest_check_runs_count" })
  latestCheckRunsCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata({ elemType: PullRequestMinimal })
  @Expose({ name: "pull_requests" })
  @Type(() => PullRequestMinimal)
  pullRequests: PullRequestMinimal[];

  /**
   * Minimal Repository
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository" })
  @Type(() => MinimalRepository)
  repository: MinimalRepository;

  @SpeakeasyMetadata()
  @Expose({ name: "rerequestable" })
  rerequestable?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "runs_rerequestable" })
  runsRerequestable?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: CheckSuiteStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}
