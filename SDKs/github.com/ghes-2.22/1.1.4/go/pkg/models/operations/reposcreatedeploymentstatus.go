// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReposCreateDeploymentStatusRequestBodyEnvironmentEnum - Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
type ReposCreateDeploymentStatusRequestBodyEnvironmentEnum string

const (
	ReposCreateDeploymentStatusRequestBodyEnvironmentEnumProduction ReposCreateDeploymentStatusRequestBodyEnvironmentEnum = "production"
	ReposCreateDeploymentStatusRequestBodyEnvironmentEnumStaging    ReposCreateDeploymentStatusRequestBodyEnvironmentEnum = "staging"
	ReposCreateDeploymentStatusRequestBodyEnvironmentEnumQa         ReposCreateDeploymentStatusRequestBodyEnvironmentEnum = "qa"
)

func (e *ReposCreateDeploymentStatusRequestBodyEnvironmentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "production":
		fallthrough
	case "staging":
		fallthrough
	case "qa":
		*e = ReposCreateDeploymentStatusRequestBodyEnvironmentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateDeploymentStatusRequestBodyEnvironmentEnum: %s", s)
	}
}

// ReposCreateDeploymentStatusRequestBodyStateEnum - The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@2.22/rest/overview/api-previews#enhanced-deployments) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
type ReposCreateDeploymentStatusRequestBodyStateEnum string

const (
	ReposCreateDeploymentStatusRequestBodyStateEnumError      ReposCreateDeploymentStatusRequestBodyStateEnum = "error"
	ReposCreateDeploymentStatusRequestBodyStateEnumFailure    ReposCreateDeploymentStatusRequestBodyStateEnum = "failure"
	ReposCreateDeploymentStatusRequestBodyStateEnumInactive   ReposCreateDeploymentStatusRequestBodyStateEnum = "inactive"
	ReposCreateDeploymentStatusRequestBodyStateEnumInProgress ReposCreateDeploymentStatusRequestBodyStateEnum = "in_progress"
	ReposCreateDeploymentStatusRequestBodyStateEnumQueued     ReposCreateDeploymentStatusRequestBodyStateEnum = "queued"
	ReposCreateDeploymentStatusRequestBodyStateEnumPending    ReposCreateDeploymentStatusRequestBodyStateEnum = "pending"
	ReposCreateDeploymentStatusRequestBodyStateEnumSuccess    ReposCreateDeploymentStatusRequestBodyStateEnum = "success"
)

func (e *ReposCreateDeploymentStatusRequestBodyStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "error":
		fallthrough
	case "failure":
		fallthrough
	case "inactive":
		fallthrough
	case "in_progress":
		fallthrough
	case "queued":
		fallthrough
	case "pending":
		fallthrough
	case "success":
		*e = ReposCreateDeploymentStatusRequestBodyStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateDeploymentStatusRequestBodyStateEnum: %s", s)
	}
}

type ReposCreateDeploymentStatusRequestBody struct {
	// Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
	// **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@2.22/rest/overview/api-previews#enhanced-deployments) custom media type.
	AutoInactive *bool `json:"auto_inactive,omitempty"`
	// A short description of the status. The maximum description length is 140 characters.
	Description *string `json:"description,omitempty"`
	// Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
	Environment *ReposCreateDeploymentStatusRequestBodyEnvironmentEnum `json:"environment,omitempty"`
	// Sets the URL for accessing your environment. Default: `""`
	// **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@2.22/rest/overview/api-previews#enhanced-deployments) custom media type.
	EnvironmentURL *string `json:"environment_url,omitempty"`
	// The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
	// **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@2.22/rest/overview/api-previews#enhanced-deployments) custom media type.
	LogURL *string `json:"log_url,omitempty"`
	// The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@2.22/rest/overview/api-previews#enhanced-deployments) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
	State ReposCreateDeploymentStatusRequestBodyStateEnum `json:"state"`
	// The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
	TargetURL *string `json:"target_url,omitempty"`
}

type ReposCreateDeploymentStatusRequest struct {
	RequestBody ReposCreateDeploymentStatusRequestBody `request:"mediaType=application/json"`
	// deployment_id parameter
	DeploymentID int64  `pathParam:"style=simple,explode=false,name=deployment_id"`
	Owner        string `pathParam:"style=simple,explode=false,name=owner"`
	Repo         string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposCreateDeploymentStatusResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Response
	DeploymentStatus *shared.DeploymentStatus
	// Validation failed
	ValidationError *shared.ValidationError
}
