"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import article as shared_article
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetSectionFormatFormatEnum(str, Enum):
    r"""if this is JSONP or JSON"""
    JSON = 'json'
    JSONP = 'jsonp'

class GetSectionFormatSectionEnum(str, Enum):
    r"""The section the story appears in."""
    HOME = 'home'
    OPINION = 'opinion'
    WORLD = 'world'
    NATIONAL = 'national'
    POLITICS = 'politics'
    UPSHOT = 'upshot'
    NYREGION = 'nyregion'
    BUSINESS = 'business'
    TECHNOLOGY = 'technology'
    SCIENCE = 'science'
    HEALTH = 'health'
    SPORTS = 'sports'
    ARTS = 'arts'
    BOOKS = 'books'
    MOVIES = 'movies'
    THEATER = 'theater'
    SUNDAYREVIEW = 'sundayreview'
    FASHION = 'fashion'
    TMAGAZINE = 'tmagazine'
    FOOD = 'food'
    TRAVEL = 'travel'
    MAGAZINE = 'magazine'
    REALESTATE = 'realestate'
    AUTOMOBILES = 'automobiles'
    OBITUARIES = 'obituaries'
    INSIDER = 'insider'


@dataclasses.dataclass
class GetSectionFormatRequest:
    
    format: GetSectionFormatFormatEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'format', 'style': 'simple', 'explode': False }})
    r"""if this is JSONP or JSON"""  
    section: GetSectionFormatSectionEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'section', 'style': 'simple', 'explode': False }})
    r"""The section the story appears in."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""The name of the function the API call results will be passed to. Required when using JSONP. This parameter has only one valid value per section. The format is {section_name}TopStoriesCallback."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSectionFormat200ApplicationJSON:
    r"""An array of articles"""
    
    results: Optional[list[shared_article.Article]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetSectionFormatResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_section_format_200_application_json_object: Optional[GetSectionFormat200ApplicationJSON] = dataclasses.field(default=None)
    r"""An array of articles"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    