// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DataKeyPairSpecEnum string

const (
	DataKeyPairSpecEnumRsa2048       DataKeyPairSpecEnum = "RSA_2048"
	DataKeyPairSpecEnumRsa3072       DataKeyPairSpecEnum = "RSA_3072"
	DataKeyPairSpecEnumRsa4096       DataKeyPairSpecEnum = "RSA_4096"
	DataKeyPairSpecEnumEccNistP256   DataKeyPairSpecEnum = "ECC_NIST_P256"
	DataKeyPairSpecEnumEccNistP384   DataKeyPairSpecEnum = "ECC_NIST_P384"
	DataKeyPairSpecEnumEccNistP521   DataKeyPairSpecEnum = "ECC_NIST_P521"
	DataKeyPairSpecEnumEccSecgP256K1 DataKeyPairSpecEnum = "ECC_SECG_P256K1"
	DataKeyPairSpecEnumSm2           DataKeyPairSpecEnum = "SM2"
)

func (e DataKeyPairSpecEnum) ToPointer() *DataKeyPairSpecEnum {
	return &e
}

func (e *DataKeyPairSpecEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RSA_2048":
		fallthrough
	case "RSA_3072":
		fallthrough
	case "RSA_4096":
		fallthrough
	case "ECC_NIST_P256":
		fallthrough
	case "ECC_NIST_P384":
		fallthrough
	case "ECC_NIST_P521":
		fallthrough
	case "ECC_SECG_P256K1":
		fallthrough
	case "SM2":
		*e = DataKeyPairSpecEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataKeyPairSpecEnum: %v", v)
	}
}
