"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BackupRetentionSettingsRetentionUnitEnum(str, Enum):
    r"""The unit that 'retained_backups' represents."""
    RETENTION_UNIT_UNSPECIFIED = 'RETENTION_UNIT_UNSPECIFIED'
    COUNT = 'COUNT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BackupRetentionSettings:
    r"""We currently only support backup retention by specifying the number of backups we will retain."""
    
    retained_backups: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retainedBackups'), 'exclude': lambda f: f is None }})
    r"""Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups."""  
    retention_unit: Optional[BackupRetentionSettingsRetentionUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retentionUnit'), 'exclude': lambda f: f is None }})
    r"""The unit that 'retained_backups' represents."""  
    