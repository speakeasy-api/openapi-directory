// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VerificationMethodEnum - The method of the verification.
type VerificationMethodEnum string

const (
	VerificationMethodEnumVerificationMethodUnspecified VerificationMethodEnum = "VERIFICATION_METHOD_UNSPECIFIED"
	VerificationMethodEnumAddress                       VerificationMethodEnum = "ADDRESS"
	VerificationMethodEnumEmail                         VerificationMethodEnum = "EMAIL"
	VerificationMethodEnumPhoneCall                     VerificationMethodEnum = "PHONE_CALL"
	VerificationMethodEnumSms                           VerificationMethodEnum = "SMS"
	VerificationMethodEnumAuto                          VerificationMethodEnum = "AUTO"
	VerificationMethodEnumVettedPartner                 VerificationMethodEnum = "VETTED_PARTNER"
)

func (e VerificationMethodEnum) ToPointer() *VerificationMethodEnum {
	return &e
}

func (e *VerificationMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VERIFICATION_METHOD_UNSPECIFIED":
		fallthrough
	case "ADDRESS":
		fallthrough
	case "EMAIL":
		fallthrough
	case "PHONE_CALL":
		fallthrough
	case "SMS":
		fallthrough
	case "AUTO":
		fallthrough
	case "VETTED_PARTNER":
		*e = VerificationMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VerificationMethodEnum: %v", v)
	}
}

// VerificationStateEnum - The state of the verification.
type VerificationStateEnum string

const (
	VerificationStateEnumStateUnspecified VerificationStateEnum = "STATE_UNSPECIFIED"
	VerificationStateEnumPending          VerificationStateEnum = "PENDING"
	VerificationStateEnumCompleted        VerificationStateEnum = "COMPLETED"
	VerificationStateEnumFailed           VerificationStateEnum = "FAILED"
)

func (e VerificationStateEnum) ToPointer() *VerificationStateEnum {
	return &e
}

func (e *VerificationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "FAILED":
		*e = VerificationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VerificationStateEnum: %v", v)
	}
}

// Verification - A verification represents a verification attempt on a location.
type Verification struct {
	// Optional. Response announcement set only if the method is VETTED_PARTNER.
	Announcement *string `json:"announcement,omitempty"`
	// The timestamp when the verification is requested.
	CreateTime *string `json:"createTime,omitempty"`
	// The method of the verification.
	Method *VerificationMethodEnum `json:"method,omitempty"`
	// Resource name of the verification.
	Name *string `json:"name,omitempty"`
	// The state of the verification.
	State *VerificationStateEnum `json:"state,omitempty"`
}
