// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateOutpostRequestBodySupportedHardwareTypeEnum -  The type of hardware for this Outpost.
type CreateOutpostRequestBodySupportedHardwareTypeEnum string

const (
	CreateOutpostRequestBodySupportedHardwareTypeEnumRack   CreateOutpostRequestBodySupportedHardwareTypeEnum = "RACK"
	CreateOutpostRequestBodySupportedHardwareTypeEnumServer CreateOutpostRequestBodySupportedHardwareTypeEnum = "SERVER"
)

func (e *CreateOutpostRequestBodySupportedHardwareTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RACK":
		fallthrough
	case "SERVER":
		*e = CreateOutpostRequestBodySupportedHardwareTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOutpostRequestBodySupportedHardwareTypeEnum: %s", s)
	}
}

type CreateOutpostRequestBody struct {
	// The Availability Zone.
	AvailabilityZone *string `json:"AvailabilityZone,omitempty"`
	// The ID of the Availability Zone.
	AvailabilityZoneID *string `json:"AvailabilityZoneId,omitempty"`
	// The description of the Outpost.
	Description *string `json:"Description,omitempty"`
	// The name of the Outpost.
	Name string `json:"Name"`
	// The ID of the site.
	SiteID string `json:"SiteId"`
	//  The type of hardware for this Outpost.
	SupportedHardwareType *CreateOutpostRequestBodySupportedHardwareTypeEnum `json:"SupportedHardwareType,omitempty"`
	// The tags to apply to the Outpost.
	Tags map[string]string `json:"Tags,omitempty"`
}

type CreateOutpostRequest struct {
	RequestBody       CreateOutpostRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateOutpostResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateOutpostOutput *shared.CreateOutpostOutput
	// InternalServerException
	InternalServerException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ValidationException
	ValidationException interface{}
}
