// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// IssuesListCommentsForRepoDirectionEnum - Either `asc` or `desc`. Ignored without the `sort` parameter.
type IssuesListCommentsForRepoDirectionEnum string

const (
	IssuesListCommentsForRepoDirectionEnumAsc  IssuesListCommentsForRepoDirectionEnum = "asc"
	IssuesListCommentsForRepoDirectionEnumDesc IssuesListCommentsForRepoDirectionEnum = "desc"
)

func (e *IssuesListCommentsForRepoDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = IssuesListCommentsForRepoDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesListCommentsForRepoDirectionEnum: %s", s)
	}
}

type IssuesListCommentsForRepoRequest struct {
	// Either `asc` or `desc`. Ignored without the `sort` parameter.
	Direction *IssuesListCommentsForRepoDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	Owner     string                                  `pathParam:"style=simple,explode=false,name=owner"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Results per page (max 100)
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	Repo    string `pathParam:"style=simple,explode=false,name=repo"`
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *time.Time `queryParam:"style=form,explode=true,name=since"`
	// One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
	Sort *shared.SortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type IssuesListCommentsForRepoResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	IssueComments []shared.IssueComment
	// Validation failed
	ValidationError *shared.ValidationError
}
