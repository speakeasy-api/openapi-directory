// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type MeetingUpdateJSONSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum string

const (
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnumMinus1 MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum = "-1"
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnumOne    MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum = "1"
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnumTwo    MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum = "2"
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnumThree  MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum = "3"
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnumFour   MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum = "4"
)

func (e *MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum: %s", s)
	}
}

// MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
//
// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum string

const (
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumOne   MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "1"
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumTwo   MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "2"
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumThree MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "3"
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumFour  MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "4"
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumFive  MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "5"
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumSix   MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "6"
	MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnumSeven MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum = "7"
)

func (e *MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum: %s", s)
	}
}

// MeetingUpdateApplicationJSONRecurrenceTypeEnum - Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type MeetingUpdateApplicationJSONRecurrenceTypeEnum string

const (
	MeetingUpdateApplicationJSONRecurrenceTypeEnumOne   MeetingUpdateApplicationJSONRecurrenceTypeEnum = "1"
	MeetingUpdateApplicationJSONRecurrenceTypeEnumTwo   MeetingUpdateApplicationJSONRecurrenceTypeEnum = "2"
	MeetingUpdateApplicationJSONRecurrenceTypeEnumThree MeetingUpdateApplicationJSONRecurrenceTypeEnum = "3"
)

func (e *MeetingUpdateApplicationJSONRecurrenceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = MeetingUpdateApplicationJSONRecurrenceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONRecurrenceTypeEnum: %s", s)
	}
}

// MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum - This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
//
//	<br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum string

const (
	MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnumOne   MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "1"
	MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnumTwo   MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "2"
	MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnumThree MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "3"
	MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnumFour  MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "4"
	MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnumFive  MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "5"
	MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnumSix   MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "6"
	MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnumSeven MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum = "7"
)

func (e *MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum: %s", s)
	}
}

// MeetingUpdateApplicationJSONRecurrence - Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
type MeetingUpdateApplicationJSONRecurrence struct {
	// Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time `json:"end_date_time,omitempty"`
	// Select how many times the meeting should recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64 `json:"end_times,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64 `json:"monthly_day,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum `json:"monthly_week,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
	//
	// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum `json:"monthly_week_day,omitempty"`
	// Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
	//
	//
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type MeetingUpdateApplicationJSONRecurrenceTypeEnum `json:"type"`
	// This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	//  <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	WeeklyDays *MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum `json:"weekly_days,omitempty"`
}

// MeetingUpdateApplicationJSONSettingsApprovalTypeEnum - Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
//
// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type MeetingUpdateApplicationJSONSettingsApprovalTypeEnum string

const (
	MeetingUpdateApplicationJSONSettingsApprovalTypeEnumZero MeetingUpdateApplicationJSONSettingsApprovalTypeEnum = "0"
	MeetingUpdateApplicationJSONSettingsApprovalTypeEnumOne  MeetingUpdateApplicationJSONSettingsApprovalTypeEnum = "1"
	MeetingUpdateApplicationJSONSettingsApprovalTypeEnumTwo  MeetingUpdateApplicationJSONSettingsApprovalTypeEnum = "2"
)

func (e *MeetingUpdateApplicationJSONSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = MeetingUpdateApplicationJSONSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONSettingsApprovalTypeEnum: %s", s)
	}
}

// MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum - Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
type MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum string

const (
	MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumApprove MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "approve"
	MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumDeny    MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "deny"
)

func (e *MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approve":
		fallthrough
	case "deny":
		*e = MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum: %s", s)
	}
}

// MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions - Approve or block users from specific regions/countries from joining this meeting.
type MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions struct {
	// List of countries/regions from where participants can join this meeting.
	ApprovedList []string `json:"approved_list,omitempty"`
	// List of countries/regions from where participants can not join this meeting.
	DeniedList []string `json:"denied_list,omitempty"`
	// `true`: Setting enabled to either allow users or block users from specific regions to join your meetings. <br>
	//
	// `false`: Setting disabled.
	Enable *bool `json:"enable,omitempty"`
	// Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
	// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
	// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
	Method *MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum `json:"method,omitempty"`
}

// MeetingUpdateApplicationJSONSettingsAudioEnum - Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
type MeetingUpdateApplicationJSONSettingsAudioEnum string

const (
	MeetingUpdateApplicationJSONSettingsAudioEnumBoth      MeetingUpdateApplicationJSONSettingsAudioEnum = "both"
	MeetingUpdateApplicationJSONSettingsAudioEnumTelephony MeetingUpdateApplicationJSONSettingsAudioEnum = "telephony"
	MeetingUpdateApplicationJSONSettingsAudioEnumVoip      MeetingUpdateApplicationJSONSettingsAudioEnum = "voip"
)

func (e *MeetingUpdateApplicationJSONSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = MeetingUpdateApplicationJSONSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONSettingsAudioEnum: %s", s)
	}
}

type MeetingUpdateApplicationJSONSettingsAuthenticationException struct {
	// Email address of the participant.
	Email *string `json:"email,omitempty"`
	// Name of the participant.
	Name *string `json:"name,omitempty"`
}

// MeetingUpdateApplicationJSONSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type MeetingUpdateApplicationJSONSettingsAutoRecordingEnum string

const (
	MeetingUpdateApplicationJSONSettingsAutoRecordingEnumLocal MeetingUpdateApplicationJSONSettingsAutoRecordingEnum = "local"
	MeetingUpdateApplicationJSONSettingsAutoRecordingEnumCloud MeetingUpdateApplicationJSONSettingsAutoRecordingEnum = "cloud"
	MeetingUpdateApplicationJSONSettingsAutoRecordingEnumNone  MeetingUpdateApplicationJSONSettingsAutoRecordingEnum = "none"
)

func (e *MeetingUpdateApplicationJSONSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = MeetingUpdateApplicationJSONSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONSettingsAutoRecordingEnum: %s", s)
	}
}

type MeetingUpdateApplicationJSONSettingsBreakoutRoomRooms struct {
	// Name of the breakout room.
	Name *string `json:"name,omitempty"`
	// Email addresses of the participants who are to be assigned to the breakout room.
	Participants []string `json:"participants,omitempty"`
}

// MeetingUpdateApplicationJSONSettingsBreakoutRoom - Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
type MeetingUpdateApplicationJSONSettingsBreakoutRoom struct {
	// Set the value of this field to `true` if you would like to enable the [breakout room pre-assign](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4) option.
	Enable *bool `json:"enable,omitempty"`
	// Create room(s).
	Rooms []MeetingUpdateApplicationJSONSettingsBreakoutRoomRooms `json:"rooms,omitempty"`
}

type MeetingUpdateApplicationJSONSettingsCustomKeys struct {
	// Custom key associated with the user.
	Key *string `json:"key,omitempty"`
	// Value of the custom key associated with the user.
	Value *string `json:"value,omitempty"`
}

// MeetingUpdateApplicationJSONSettingsEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type MeetingUpdateApplicationJSONSettingsEncryptionTypeEnum string

const (
	MeetingUpdateApplicationJSONSettingsEncryptionTypeEnumEnhancedEncryption MeetingUpdateApplicationJSONSettingsEncryptionTypeEnum = "enhanced_encryption"
	MeetingUpdateApplicationJSONSettingsEncryptionTypeEnumE2ee               MeetingUpdateApplicationJSONSettingsEncryptionTypeEnum = "e2ee"
)

func (e *MeetingUpdateApplicationJSONSettingsEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = MeetingUpdateApplicationJSONSettingsEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONSettingsEncryptionTypeEnum: %s", s)
	}
}

// MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnum - Type of number.
type MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnum string

const (
	MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnumToll     MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnum = "toll"
	MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnumTollfree MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnum = "tollfree"
)

func (e *MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "toll":
		fallthrough
	case "tollfree":
		*e = MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnum: %s", s)
	}
}

type MeetingUpdateApplicationJSONSettingsGlobalDialInNumbers struct {
	// City of the number, if any. For example, Chicago.
	City *string `json:"city,omitempty"`
	// Country code. For example, BR.
	Country *string `json:"country,omitempty"`
	// Full name of country. For example, Brazil.
	CountryName *string `json:"country_name,omitempty"`
	// Phone number. For example, +1 2332357613.
	Number *string `json:"number,omitempty"`
	// Type of number.
	Type *MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnum `json:"type,omitempty"`
}

// MeetingUpdateApplicationJSONSettingsJbhTimeEnum - If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
//
// *  `0`: Allow participant to join anytime.
// *  `5`: Allow participant to join 5 minutes before meeting start time.
//   - `10`: Allow participant to join 10 minutes before meeting start time.
type MeetingUpdateApplicationJSONSettingsJbhTimeEnum string

const (
	MeetingUpdateApplicationJSONSettingsJbhTimeEnumZero MeetingUpdateApplicationJSONSettingsJbhTimeEnum = "0"
	MeetingUpdateApplicationJSONSettingsJbhTimeEnumFive MeetingUpdateApplicationJSONSettingsJbhTimeEnum = "5"
	MeetingUpdateApplicationJSONSettingsJbhTimeEnumTen  MeetingUpdateApplicationJSONSettingsJbhTimeEnum = "10"
)

func (e *MeetingUpdateApplicationJSONSettingsJbhTimeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "5":
		fallthrough
	case "10":
		*e = MeetingUpdateApplicationJSONSettingsJbhTimeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONSettingsJbhTimeEnum: %s", s)
	}
}

type MeetingUpdateApplicationJSONSettingsLanguageInterpretationInterpreters struct {
	// Email address of the interpreter.
	Email *string `json:"email,omitempty"`
	// Languages for interpretation. The string must contain two [country Ids](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) separated by a comma.
	//
	// For example, if the language is to be interpreted from English to Chinese, the value of this field should be "US,CN".
	Languages *string `json:"languages,omitempty"`
}

type MeetingUpdateApplicationJSONSettingsLanguageInterpretation struct {
	Enable *bool `json:"enable,omitempty"`
	// Information associated with the interpreter.
	Interpreters []MeetingUpdateApplicationJSONSettingsLanguageInterpretationInterpreters `json:"interpreters,omitempty"`
}

// MeetingUpdateApplicationJSONSettingsRegistrationTypeEnum - Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
type MeetingUpdateApplicationJSONSettingsRegistrationTypeEnum string

const (
	MeetingUpdateApplicationJSONSettingsRegistrationTypeEnumOne   MeetingUpdateApplicationJSONSettingsRegistrationTypeEnum = "1"
	MeetingUpdateApplicationJSONSettingsRegistrationTypeEnumTwo   MeetingUpdateApplicationJSONSettingsRegistrationTypeEnum = "2"
	MeetingUpdateApplicationJSONSettingsRegistrationTypeEnumThree MeetingUpdateApplicationJSONSettingsRegistrationTypeEnum = "3"
)

func (e *MeetingUpdateApplicationJSONSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = MeetingUpdateApplicationJSONSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONSettingsRegistrationTypeEnum: %s", s)
	}
}

// MeetingUpdateApplicationJSONSettings - Meeting settings.
type MeetingUpdateApplicationJSONSettings struct {
	// Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
	AllowMultipleDevices *bool `json:"allow_multiple_devices,omitempty"`
	// Alternative host's emails or IDs: multiple values are separated by a semicolon.
	AlternativeHosts *string `json:"alternative_hosts,omitempty"`
	// Flag to determine whether to send email notifications to alternative hosts, default value is true.
	AlternativeHostsEmailNotification *bool `json:"alternative_hosts_email_notification,omitempty"`
	// Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
	//
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *MeetingUpdateApplicationJSONSettingsApprovalTypeEnum `json:"approval_type,omitempty"`
	// Approve or block users from specific regions/countries from joining this meeting.
	//
	ApprovedOrDeniedCountriesOrRegions *MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions `json:"approved_or_denied_countries_or_regions,omitempty"`
	// Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
	Audio *MeetingUpdateApplicationJSONSettingsAudioEnum `json:"audio,omitempty"`
	// If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
	AuthenticationDomains *string `json:"authentication_domains,omitempty"`
	// The participants added here will receive unique meeting invite links and bypass authentication.
	AuthenticationException []MeetingUpdateApplicationJSONSettingsAuthenticationException `json:"authentication_exception,omitempty"`
	// Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
	AuthenticationName *string `json:"authentication_name,omitempty"`
	// Meeting authentication option id.
	AuthenticationOption *string `json:"authentication_option,omitempty"`
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *MeetingUpdateApplicationJSONSettingsAutoRecordingEnum `json:"auto_recording,omitempty"`
	// Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
	BreakoutRoom *MeetingUpdateApplicationJSONSettingsBreakoutRoom `json:"breakout_room,omitempty"`
	// Close registration after event date
	CloseRegistration *bool `json:"close_registration,omitempty"`
	// Host meeting in China.
	CnMeeting *bool `json:"cn_meeting,omitempty"`
	// Contact email for registration
	ContactEmail *string `json:"contact_email,omitempty"`
	// Contact name for registration
	ContactName *string `json:"contact_name,omitempty"`
	// Custom keys and values assigned to the meeting.
	CustomKeys []MeetingUpdateApplicationJSONSettingsCustomKeys `json:"custom_keys,omitempty"`
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *MeetingUpdateApplicationJSONSettingsEncryptionTypeEnum `json:"encryption_type,omitempty"`
	// Only signed in users can join this meeting.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
	EnforceLogin *bool `json:"enforce_login,omitempty"`
	// Only signed in users with specified domains can join meetings.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
	EnforceLoginDomains *string `json:"enforce_login_domains,omitempty"`
	// List of global dial-in countries
	GlobalDialInCountries []string `json:"global_dial_in_countries,omitempty"`
	// Global Dial-in Countries/Regions
	GlobalDialInNumbers []MeetingUpdateApplicationJSONSettingsGlobalDialInNumbers `json:"global_dial_in_numbers,omitempty"`
	// Start video when the host joins the meeting.
	HostVideo *bool `json:"host_video,omitempty"`
	// Host meeting in India.
	InMeeting *bool `json:"in_meeting,omitempty"`
	// If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
	//
	// *  `0`: Allow participant to join anytime.
	// *  `5`: Allow participant to join 5 minutes before meeting start time.
	//  * `10`: Allow participant to join 10 minutes before meeting start time.
	JbhTime *MeetingUpdateApplicationJSONSettingsJbhTimeEnum `json:"jbh_time,omitempty"`
	// Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
	JoinBeforeHost         *bool                                                       `json:"join_before_host,omitempty"`
	LanguageInterpretation *MeetingUpdateApplicationJSONSettingsLanguageInterpretation `json:"language_interpretation,omitempty"`
	// `true`- Only authenticated users can join meetings.
	MeetingAuthentication *bool `json:"meeting_authentication,omitempty"`
	// Mute participants upon entry.
	MuteUponEntry *bool `json:"mute_upon_entry,omitempty"`
	// Start video when participants join the meeting.
	ParticipantVideo *bool `json:"participant_video,omitempty"`
	// Send confirmation Email to Registrants
	RegistrantsConfirmationEmail *bool `json:"registrants_confirmation_email,omitempty"`
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool `json:"registrants_email_notification,omitempty"`
	// Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
	RegistrationType *MeetingUpdateApplicationJSONSettingsRegistrationTypeEnum `json:"registration_type,omitempty"`
	// Show social share buttons on the meeting registration page.
	// This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
	ShowShareButton *bool `json:"show_share_button,omitempty"`
	// Use a personal meeting ID. Only used for scheduled meetings and recurring meetings with no fixed time.
	UsePmi *bool `json:"use_pmi,omitempty"`
	// Enable waiting room
	WaitingRoom *bool `json:"waiting_room,omitempty"`
	// Add watermark when viewing a shared screen.
	Watermark *bool `json:"watermark,omitempty"`
}

type MeetingUpdateApplicationJSONTrackingFields struct {
	// Tracking fields type
	Field *string `json:"field,omitempty"`
	// Tracking fields value
	Value *string `json:"value,omitempty"`
}

// MeetingUpdateApplicationJSONTypeEnum - Meeting Types:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`8` - Recurring meeting with a fixed time.
type MeetingUpdateApplicationJSONTypeEnum string

const (
	MeetingUpdateApplicationJSONTypeEnumOne   MeetingUpdateApplicationJSONTypeEnum = "1"
	MeetingUpdateApplicationJSONTypeEnumTwo   MeetingUpdateApplicationJSONTypeEnum = "2"
	MeetingUpdateApplicationJSONTypeEnumThree MeetingUpdateApplicationJSONTypeEnum = "3"
	MeetingUpdateApplicationJSONTypeEnumEight MeetingUpdateApplicationJSONTypeEnum = "8"
)

func (e *MeetingUpdateApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "8":
		*e = MeetingUpdateApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingUpdateApplicationJSONTypeEnum: %s", s)
	}
}

// MeetingUpdateApplicationJSON - Base object for sessions.
type MeetingUpdateApplicationJSON struct {
	// Meeting description.
	Agenda *string `json:"agenda,omitempty"`
	// Meeting duration (minutes). Used for scheduled meetings only.
	Duration *int64 `json:"duration,omitempty"`
	// Meeting passcode. Passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ *] and can have a maximum of 10 characters.
	//
	// **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
	Password *string `json:"password,omitempty"`
	// Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
	Recurrence *MeetingUpdateApplicationJSONRecurrence `json:"recurrence,omitempty"`
	// Email or userId if you want to schedule meeting for another user.
	ScheduleFor *string                               `json:"schedule_for,omitempty"`
	Settings    *MeetingUpdateApplicationJSONSettings `json:"settings,omitempty"`
	// Meeting start time. When using a format like "yyyy-MM-dd'T'HH:mm:ss'Z'", always use GMT time. When using a format like "yyyy-MM-dd'T'HH:mm:ss", you should use local time and  specify the time zone. Only used for scheduled meetings and recurring meetings with a fixed time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Unique identifier of the meeting template.
	//
	// Use this field if you would like to [schedule the meeting from a meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates#h_86f06cff-0852-4998-81c5-c83663c176fb). You can retrieve the value of this field by calling the [List meeting templates]() API.
	TemplateID *string `json:"template_id,omitempty"`
	// Time zone to format start_time. For example, "America/Los_Angeles". For scheduled meetings only. Please reference our [time zone](#timezones) list for supported time zones and their formats.
	Timezone *string `json:"timezone,omitempty"`
	// Meeting topic.
	Topic *string `json:"topic,omitempty"`
	// Tracking fields
	TrackingFields []MeetingUpdateApplicationJSONTrackingFields `json:"tracking_fields,omitempty"`
	// Meeting Types:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`8` - Recurring meeting with a fixed time.
	Type *MeetingUpdateApplicationJSONTypeEnum `json:"type,omitempty"`
}

type MeetingUpdateJSONRequest struct {
	// Meeting
	RequestBody MeetingUpdateApplicationJSON `request:"mediaType=application/json"`
	// The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
	//
	// While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
	MeetingID int64 `pathParam:"style=simple,explode=false,name=meetingId"`
	// Meeting occurrence id. Support change of agenda, start_time, duration, settings: {host_video, participant_video, join_before_host, mute_upon_entry, waiting_room, watermark, auto_recording}
	OccurrenceID *string `queryParam:"style=form,explode=true,name=occurrence_id"`
}

type MeetingUpdateJSONResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
