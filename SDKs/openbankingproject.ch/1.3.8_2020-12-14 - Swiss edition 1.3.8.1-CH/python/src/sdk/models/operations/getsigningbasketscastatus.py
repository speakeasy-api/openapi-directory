"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error400_ng_sbs as shared_error400_ng_sbs
from ..shared import error400_sbs as shared_error400_sbs
from ..shared import error401_ng_sbs as shared_error401_ng_sbs
from ..shared import error401_sbs as shared_error401_sbs
from ..shared import error403_ng_sbs as shared_error403_ng_sbs
from ..shared import error403_sbs as shared_error403_sbs
from ..shared import error404_ng_sbs as shared_error404_ng_sbs
from ..shared import error404_sbs as shared_error404_sbs
from ..shared import error405_ng_sbs as shared_error405_ng_sbs
from ..shared import error405_sbs as shared_error405_sbs
from ..shared import error409_ng_sbs as shared_error409_ng_sbs
from ..shared import error409_sbs as shared_error409_sbs
from ..shared import psu_http_method_enum as shared_psu_http_method_enum
from ..shared import scastatusresponse as shared_scastatusresponse
from typing import Optional


@dataclasses.dataclass
class GetSigningBasketScaStatusSecurity:
    
    bearer_auth_o_auth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetSigningBasketScaStatusRequest:
    
    authorisation_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'authorisationId', 'style': 'simple', 'explode': False }})
    r"""Resource identification of the related SCA."""  
    basket_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'basketId', 'style': 'simple', 'explode': False }})
    r"""This identification of the corresponding signing basket object."""  
    x_request_id: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Request-ID', 'style': 'simple', 'explode': False }})
    r"""ID of the request, unique to the call, as determined by the initiating party."""  
    digest: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Digest', 'style': 'simple', 'explode': False }})
    r"""Is contained if and only if the \\"Signature\\" element is contained in the header of the request."""  
    psu_accept: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_charset: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Charset', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_encoding: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Encoding', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_language: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Language', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_device_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Device-ID', 'style': 'simple', 'explode': False }})
    r"""UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
    UUID identifies either a device or a device dependant application installation.
    In case of an installation identification this ID needs to be unaltered until removal from device.
    """  
    psu_geo_location: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Geo-Location', 'style': 'simple', 'explode': False }})
    r"""The forwarded Geo Location of the corresponding http request between PSU and TPP if available."""  
    psu_http_method: Optional[shared_psu_http_method_enum.PSUHTTPMethodEnum] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Http-Method', 'style': 'simple', 'explode': False }})
    r"""HTTP method used at the PSU ? TPP interface, if available.
    Valid values are:
    * GET
    * POST
    * PUT
    * PATCH
    * DELETE
    """  
    psu_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-IP-Address', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP."""  
    psu_ip_port: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-IP-Port', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available."""  
    psu_user_agent: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-User-Agent', 'style': 'simple', 'explode': False }})
    r"""The forwarded Agent header field of the HTTP request between PSU and TPP, if available."""  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Signature', 'style': 'simple', 'explode': False }})
    r"""A signature of the request by the TPP on application level. This might be mandated by ASPSP."""  
    tpp_signature_certificate: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'TPP-Signature-Certificate', 'style': 'simple', 'explode': False }})
    r"""The certificate used for signing the request, in base64 encoding.
    Must be contained if a signature is contained.
    """  
    

@dataclasses.dataclass
class GetSigningBasketScaStatusResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error400_ng_sbs: Optional[shared_error400_ng_sbs.Error400NGSBS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error400_sbs: Optional[shared_error400_sbs.Error400SBS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error401_ng_sbs: Optional[shared_error401_ng_sbs.Error401NGSBS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error401_sbs: Optional[shared_error401_sbs.Error401SBS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error403_ng_sbs: Optional[shared_error403_ng_sbs.Error403NGSBS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error403_sbs: Optional[shared_error403_sbs.Error403SBS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error404_ng_sbs: Optional[shared_error404_ng_sbs.Error404NGSBS] = dataclasses.field(default=None)
    r"""Not found"""  
    error404_sbs: Optional[shared_error404_sbs.Error404SBS] = dataclasses.field(default=None)
    r"""Not found"""  
    error405_ng_sbs: Optional[shared_error405_ng_sbs.Error405NGSBS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error405_sbs: Optional[shared_error405_sbs.Error405SBS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error409_ng_sbs: Optional[shared_error409_ng_sbs.Error409NGSBS] = dataclasses.field(default=None)
    r"""Conflict"""  
    error409_sbs: Optional[shared_error409_sbs.Error409SBS] = dataclasses.field(default=None)
    r"""Conflict"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    sca_status_response: Optional[shared_scastatusresponse.ScaStatusResponse] = dataclasses.field(default=None)
    r"""OK"""  
    