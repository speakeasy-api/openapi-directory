/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ProductViewAggregationValue } from "./productviewaggregationvalue";
import { ProductViewSummary } from "./productviewsummary";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class SearchProductsOutput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "NextPageToken" })
  nextPageToken?: string;

  @SpeakeasyMetadata({ elemType: ProductViewAggregationValue, elemDepth: 2 })
  @Expose({ name: "ProductViewAggregations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ProductViewAggregationValue[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ProductViewAggregationValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  productViewAggregations?: Record<string, ProductViewAggregationValue[]>;

  @SpeakeasyMetadata({ elemType: ProductViewSummary })
  @Expose({ name: "ProductViewSummaries" })
  @Type(() => ProductViewSummary)
  productViewSummaries?: ProductViewSummary[];
}
