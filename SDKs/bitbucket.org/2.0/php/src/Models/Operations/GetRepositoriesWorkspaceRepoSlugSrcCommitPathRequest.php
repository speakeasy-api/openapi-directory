<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetRepositoriesWorkspaceRepoSlugSrcCommitPathRequest
{
    /**
     * The commit's SHA1.
     * 
     * @var string $commit
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=commit')]
    public string $commit;
    
    /**
     * If 'meta' is provided, returns the (json) meta data for the contents of the file.  If 'rendered' is provided, returns the contents of a non-binary file in HTML-formatted rendered markup. Since Git does not generally track what text encoding scheme is used, this endpoint attempts to detect the most appropriate character encoding. While usually correct, determining the character encoding can be ambiguous which in exceptional cases can lead to misinterpretation of the characters. As such, the raw element in the response object should not be treated as equivalent to the file's actual contents.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugSrcCommitPathFormatEnum $format
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=format')]
    public ?GetRepositoriesWorkspaceRepoSlugSrcCommitPathFormatEnum $format = null;
    
    /**
     * If provided, returns the contents of the repository and its subdirectories recursively until the specified max_depth of nested directories. When omitted, this defaults to 1.
     * 
     * @var ?int $maxDepth
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=max_depth')]
    public ?int $maxDepth = null;
    
    /**
     * Path to the file.
     * 
     * @var string $path
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=path')]
    public string $path;
    
    /**
     * Optional filter expression as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
     * 
     * @var ?string $q
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=q')]
    public ?string $q = null;
    
    /**
     * This can either be the repository slug or the UUID of the repository,
     * 
     * surrounded by curly-braces, for example: `{repository UUID}`.
     * 
     * 
     * @var string $repoSlug
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=repo_slug')]
    public string $repoSlug;
    
    /**
     * Optional sorting parameter as per [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results).
     * 
     * @var ?string $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?string $sort = null;
    
    /**
     * This can either be the workspace ID (slug) or the workspace UUID
     * 
     * surrounded by curly-braces, for example: `{workspace UUID}`.
     * 
     * 
     * @var string $workspace
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=workspace')]
    public string $workspace;
    
	public function __construct()
	{
		$this->commit = "";
		$this->format = null;
		$this->maxDepth = null;
		$this->path = "";
		$this->q = null;
		$this->repoSlug = "";
		$this->sort = null;
		$this->workspace = "";
	}
}
