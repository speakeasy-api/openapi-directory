"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuditLoggingSettings:
    r"""Represents the settings for Cloud audit logging"""
    
    log_admin_read_actions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logAdminReadActions'), 'exclude': lambda f: f is None }})
    r"""Indicates whether audit logging is on/off for admin activity read APIs i.e. Get/List DataSources, Get/List SearchApplications etc."""  
    log_data_read_actions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logDataReadActions'), 'exclude': lambda f: f is None }})
    r"""Indicates whether audit logging is on/off for data access read APIs i.e. ListItems, GetItem etc."""  
    log_data_write_actions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logDataWriteActions'), 'exclude': lambda f: f is None }})
    r"""Indicates whether audit logging is on/off for data access write APIs i.e. IndexItem etc."""  
    project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project'), 'exclude': lambda f: f is None }})
    r"""The resource name of the GCP Project to store audit logs. Cloud audit logging will be enabled after project_name has been updated through CustomerService. Format: projects/{project_id}"""  
    