// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleChromeManagementV1TelemetryEventEventTypeEnum - The event type of the current event.
type GoogleChromeManagementV1TelemetryEventEventTypeEnum string

const (
	GoogleChromeManagementV1TelemetryEventEventTypeEnumEventTypeUnspecified      GoogleChromeManagementV1TelemetryEventEventTypeEnum = "EVENT_TYPE_UNSPECIFIED"
	GoogleChromeManagementV1TelemetryEventEventTypeEnumAudioSevereUnderrun       GoogleChromeManagementV1TelemetryEventEventTypeEnum = "AUDIO_SEVERE_UNDERRUN"
	GoogleChromeManagementV1TelemetryEventEventTypeEnumUsbAdded                  GoogleChromeManagementV1TelemetryEventEventTypeEnum = "USB_ADDED"
	GoogleChromeManagementV1TelemetryEventEventTypeEnumUsbRemoved                GoogleChromeManagementV1TelemetryEventEventTypeEnum = "USB_REMOVED"
	GoogleChromeManagementV1TelemetryEventEventTypeEnumNetworkHTTPSLatencyChange GoogleChromeManagementV1TelemetryEventEventTypeEnum = "NETWORK_HTTPS_LATENCY_CHANGE"
)

func (e GoogleChromeManagementV1TelemetryEventEventTypeEnum) ToPointer() *GoogleChromeManagementV1TelemetryEventEventTypeEnum {
	return &e
}

func (e *GoogleChromeManagementV1TelemetryEventEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EVENT_TYPE_UNSPECIFIED":
		fallthrough
	case "AUDIO_SEVERE_UNDERRUN":
		fallthrough
	case "USB_ADDED":
		fallthrough
	case "USB_REMOVED":
		fallthrough
	case "NETWORK_HTTPS_LATENCY_CHANGE":
		*e = GoogleChromeManagementV1TelemetryEventEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleChromeManagementV1TelemetryEventEventTypeEnum: %v", v)
	}
}

// GoogleChromeManagementV1TelemetryEvent - Telemetry data reported by a managed device.
type GoogleChromeManagementV1TelemetryEvent struct {
	// `TelemetryAudioSevereUnderrunEvent` is triggered when a audio devices run out of buffer data for more than 5 seconds. * Granular permission needed: TELEMETRY_API_AUDIO_REPORT
	AudioSevereUnderrunEvent map[string]interface{} `json:"audioSevereUnderrunEvent,omitempty"`
	// Information about a device associated with telemetry data. * Granular Permission needed: TELEMETRY_API_DEVICE
	Device *GoogleChromeManagementV1TelemetryDeviceInfo `json:"device,omitempty"`
	// The event type of the current event.
	EventType *GoogleChromeManagementV1TelemetryEventEventTypeEnum `json:"eventType,omitempty"`
	// Https latency routine is run periodically and `TelemetryHttpsLatencyChangeEvent` is triggered if a latency problem was detected or if the device has recovered from a latency problem. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
	HTTPSLatencyChangeEvent *GoogleChromeManagementV1TelemetryHTTPSLatencyChangeEvent `json:"httpsLatencyChangeEvent,omitempty"`
	// Output only. Resource name of the event.
	Name *string `json:"name,omitempty"`
	// Timestamp that represents when the event was reported.
	ReportTime *string `json:"reportTime,omitempty"`
	// `TelemetryUsbPeripheralsEvent` is triggered USB devices are either added or removed. * Granular permission needed: TELEMETRY_API_PERIPHERALS_REPORT
	UsbPeripheralsEvent *GoogleChromeManagementV1TelemetryUsbPeripheralsEvent `json:"usbPeripheralsEvent,omitempty"`
	// Information about a user associated with telemetry data. * Granular permission needed: TELEMETRY_API_USER
	User *GoogleChromeManagementV1TelemetryUserInfo `json:"user,omitempty"`
}
