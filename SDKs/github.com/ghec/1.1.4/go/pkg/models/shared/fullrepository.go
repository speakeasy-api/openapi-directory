// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// FullRepositoryMergeCommitMessageEnum - The default value for a merge commit message.
//
// - `PR_TITLE` - default to the pull request's title.
// - `PR_BODY` - default to the pull request's body.
// - `BLANK` - default to a blank commit message.
type FullRepositoryMergeCommitMessageEnum string

const (
	FullRepositoryMergeCommitMessageEnumPrBody  FullRepositoryMergeCommitMessageEnum = "PR_BODY"
	FullRepositoryMergeCommitMessageEnumPrTitle FullRepositoryMergeCommitMessageEnum = "PR_TITLE"
	FullRepositoryMergeCommitMessageEnumBlank   FullRepositoryMergeCommitMessageEnum = "BLANK"
)

func (e *FullRepositoryMergeCommitMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PR_BODY":
		fallthrough
	case "PR_TITLE":
		fallthrough
	case "BLANK":
		*e = FullRepositoryMergeCommitMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FullRepositoryMergeCommitMessageEnum: %s", s)
	}
}

// FullRepositoryMergeCommitTitleEnum - The default value for a merge commit title.
//
//   - `PR_TITLE` - default to the pull request's title.
//   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type FullRepositoryMergeCommitTitleEnum string

const (
	FullRepositoryMergeCommitTitleEnumPrTitle      FullRepositoryMergeCommitTitleEnum = "PR_TITLE"
	FullRepositoryMergeCommitTitleEnumMergeMessage FullRepositoryMergeCommitTitleEnum = "MERGE_MESSAGE"
)

func (e *FullRepositoryMergeCommitTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PR_TITLE":
		fallthrough
	case "MERGE_MESSAGE":
		*e = FullRepositoryMergeCommitTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FullRepositoryMergeCommitTitleEnum: %s", s)
	}
}

type FullRepositoryPermissions struct {
	Admin    bool  `json:"admin"`
	Maintain *bool `json:"maintain,omitempty"`
	Pull     bool  `json:"pull"`
	Push     bool  `json:"push"`
	Triage   *bool `json:"triage,omitempty"`
}

// FullRepositorySquashMergeCommitMessageEnum - The default value for a squash merge commit message:
//
// - `PR_BODY` - default to the pull request's body.
// - `COMMIT_MESSAGES` - default to the branch's commit messages.
// - `BLANK` - default to a blank commit message.
type FullRepositorySquashMergeCommitMessageEnum string

const (
	FullRepositorySquashMergeCommitMessageEnumPrBody         FullRepositorySquashMergeCommitMessageEnum = "PR_BODY"
	FullRepositorySquashMergeCommitMessageEnumCommitMessages FullRepositorySquashMergeCommitMessageEnum = "COMMIT_MESSAGES"
	FullRepositorySquashMergeCommitMessageEnumBlank          FullRepositorySquashMergeCommitMessageEnum = "BLANK"
)

func (e *FullRepositorySquashMergeCommitMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PR_BODY":
		fallthrough
	case "COMMIT_MESSAGES":
		fallthrough
	case "BLANK":
		*e = FullRepositorySquashMergeCommitMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FullRepositorySquashMergeCommitMessageEnum: %s", s)
	}
}

// FullRepositorySquashMergeCommitTitleEnum - The default value for a squash merge commit title:
//
// - `PR_TITLE` - default to the pull request's title.
// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
type FullRepositorySquashMergeCommitTitleEnum string

const (
	FullRepositorySquashMergeCommitTitleEnumPrTitle         FullRepositorySquashMergeCommitTitleEnum = "PR_TITLE"
	FullRepositorySquashMergeCommitTitleEnumCommitOrPrTitle FullRepositorySquashMergeCommitTitleEnum = "COMMIT_OR_PR_TITLE"
)

func (e *FullRepositorySquashMergeCommitTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PR_TITLE":
		fallthrough
	case "COMMIT_OR_PR_TITLE":
		*e = FullRepositorySquashMergeCommitTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FullRepositorySquashMergeCommitTitleEnum: %s", s)
	}
}

// FullRepository - Full Repository
type FullRepository struct {
	AllowAutoMerge    *bool `json:"allow_auto_merge,omitempty"`
	AllowForking      *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit  *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge  *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge  *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	// Whether anonymous git access is allowed.
	AnonymousAccessEnabled *bool  `json:"anonymous_access_enabled,omitempty"`
	ArchiveURL             string `json:"archive_url"`
	Archived               bool   `json:"archived"`
	AssigneesURL           string `json:"assignees_url"`
	BlobsURL               string `json:"blobs_url"`
	BranchesURL            string `json:"branches_url"`
	CloneURL               string `json:"clone_url"`
	// Code of Conduct Simple
	CodeOfConduct       *CodeOfConductSimple `json:"code_of_conduct,omitempty"`
	CollaboratorsURL    string               `json:"collaborators_url"`
	CommentsURL         string               `json:"comments_url"`
	CommitsURL          string               `json:"commits_url"`
	CompareURL          string               `json:"compare_url"`
	ContentsURL         string               `json:"contents_url"`
	ContributorsURL     string               `json:"contributors_url"`
	CreatedAt           time.Time            `json:"created_at"`
	DefaultBranch       string               `json:"default_branch"`
	DeleteBranchOnMerge *bool                `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL      string               `json:"deployments_url"`
	Description         string               `json:"description"`
	// Returns whether or not this repository disabled.
	Disabled        bool   `json:"disabled"`
	DownloadsURL    string `json:"downloads_url"`
	EventsURL       string `json:"events_url"`
	Fork            bool   `json:"fork"`
	Forks           int64  `json:"forks"`
	ForksCount      int64  `json:"forks_count"`
	ForksURL        string `json:"forks_url"`
	FullName        string `json:"full_name"`
	GitCommitsURL   string `json:"git_commits_url"`
	GitRefsURL      string `json:"git_refs_url"`
	GitTagsURL      string `json:"git_tags_url"`
	GitURL          string `json:"git_url"`
	HasDiscussions  bool   `json:"has_discussions"`
	HasDownloads    bool   `json:"has_downloads"`
	HasIssues       bool   `json:"has_issues"`
	HasPages        bool   `json:"has_pages"`
	HasProjects     bool   `json:"has_projects"`
	HasWiki         bool   `json:"has_wiki"`
	Homepage        string `json:"homepage"`
	HooksURL        string `json:"hooks_url"`
	HTMLURL         string `json:"html_url"`
	ID              int64  `json:"id"`
	IsTemplate      *bool  `json:"is_template,omitempty"`
	IssueCommentURL string `json:"issue_comment_url"`
	IssueEventsURL  string `json:"issue_events_url"`
	IssuesURL       string `json:"issues_url"`
	KeysURL         string `json:"keys_url"`
	LabelsURL       string `json:"labels_url"`
	Language        string `json:"language"`
	LanguagesURL    string `json:"languages_url"`
	// License Simple
	License      NullableLicenseSimple `json:"license"`
	MasterBranch *string               `json:"master_branch,omitempty"`
	// The default value for a merge commit message.
	//
	// - `PR_TITLE` - default to the pull request's title.
	// - `PR_BODY` - default to the pull request's body.
	// - `BLANK` - default to a blank commit message.
	MergeCommitMessage *FullRepositoryMergeCommitMessageEnum `json:"merge_commit_message,omitempty"`
	// The default value for a merge commit title.
	//
	//   - `PR_TITLE` - default to the pull request's title.
	//   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *FullRepositoryMergeCommitTitleEnum `json:"merge_commit_title,omitempty"`
	MergesURL        string                              `json:"merges_url"`
	MilestonesURL    string                              `json:"milestones_url"`
	MirrorURL        string                              `json:"mirror_url"`
	Name             string                              `json:"name"`
	NetworkCount     int64                               `json:"network_count"`
	NodeID           string                              `json:"node_id"`
	NotificationsURL string                              `json:"notifications_url"`
	OpenIssues       int64                               `json:"open_issues"`
	OpenIssuesCount  int64                               `json:"open_issues_count"`
	// A GitHub user.
	Organization *NullableSimpleUser `json:"organization,omitempty"`
	// A GitHub user.
	Owner SimpleUser `json:"owner"`
	// A repository on GitHub.
	Parent              *Repository                `json:"parent,omitempty"`
	Permissions         *FullRepositoryPermissions `json:"permissions,omitempty"`
	Private             bool                       `json:"private"`
	PullsURL            string                     `json:"pulls_url"`
	PushedAt            time.Time                  `json:"pushed_at"`
	ReleasesURL         string                     `json:"releases_url"`
	SecurityAndAnalysis *SecurityAndAnalysis       `json:"security_and_analysis,omitempty"`
	// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
	Size int64 `json:"size"`
	// A repository on GitHub.
	Source *Repository `json:"source,omitempty"`
	// The default value for a squash merge commit message:
	//
	// - `PR_BODY` - default to the pull request's body.
	// - `COMMIT_MESSAGES` - default to the branch's commit messages.
	// - `BLANK` - default to a blank commit message.
	SquashMergeCommitMessage *FullRepositorySquashMergeCommitMessageEnum `json:"squash_merge_commit_message,omitempty"`
	// The default value for a squash merge commit title:
	//
	// - `PR_TITLE` - default to the pull request's title.
	// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
	SquashMergeCommitTitle *FullRepositorySquashMergeCommitTitleEnum `json:"squash_merge_commit_title,omitempty"`
	SSHURL                 string                                    `json:"ssh_url"`
	StargazersCount        int64                                     `json:"stargazers_count"`
	StargazersURL          string                                    `json:"stargazers_url"`
	StatusesURL            string                                    `json:"statuses_url"`
	SubscribersCount       int64                                     `json:"subscribers_count"`
	SubscribersURL         string                                    `json:"subscribers_url"`
	SubscriptionURL        string                                    `json:"subscription_url"`
	SvnURL                 string                                    `json:"svn_url"`
	TagsURL                string                                    `json:"tags_url"`
	TeamsURL               string                                    `json:"teams_url"`
	TempCloneToken         *string                                   `json:"temp_clone_token,omitempty"`
	// A repository on GitHub.
	TemplateRepository        *NullableRepository `json:"template_repository,omitempty"`
	Topics                    []string            `json:"topics,omitempty"`
	TreesURL                  string              `json:"trees_url"`
	UpdatedAt                 time.Time           `json:"updated_at"`
	URL                       string              `json:"url"`
	UseSquashPrTitleAsDefault *bool               `json:"use_squash_pr_title_as_default,omitempty"`
	// The repository visibility: public, private, or internal.
	Visibility               *string `json:"visibility,omitempty"`
	Watchers                 int64   `json:"watchers"`
	WatchersCount            int64   `json:"watchers_count"`
	WebCommitSignoffRequired *bool   `json:"web_commit_signoff_required,omitempty"`
}
