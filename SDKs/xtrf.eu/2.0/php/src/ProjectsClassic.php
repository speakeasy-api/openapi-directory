<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ProjectsClassic 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new language combination for a given project without creating a task.
     * 
     * Creates a new language combination for a given project without creating a task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombinationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombinationResponse
     */
	public function createLanguageCombination(
        \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombinationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombinationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/languageCombinations', \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombinationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "commonLanguageCombinationDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateLanguageCombinationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonLanguageCombinationDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonLanguageCombinationDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a payable to a project.
     * 
     * Adds a payable to a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePayableResponse
     */
	public function createPayable(
        \OpenAPI\OpenAPI\Models\Operations\CreatePayableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePayableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/finance/payables', \OpenAPI\OpenAPI\Models\Operations\CreatePayableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payableCreateDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePayableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a receivable to a project.
     * 
     * Adds a receivable to a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateReceivableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateReceivableResponse
     */
	public function createReceivable(
        \OpenAPI\OpenAPI\Models\Operations\CreateReceivableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateReceivableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/finance/receivables', \OpenAPI\OpenAPI\Models\Operations\CreateReceivableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "receivableCreateDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateReceivableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receivableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReceivableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new task for a given project.
     * 
     * Creates a new task for a given project.<p>
     *   Required fields:
     *   <ul>
     *     <li>languageCombination</li>
     *     <li>specializationId</li>
     *     <li>workflowId</li>
     *   </ul>
     * </p>
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTaskRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTaskResponse
     */
	public function createTask(
        \OpenAPI\OpenAPI\Models\Operations\CreateTaskRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/tasks', \OpenAPI\OpenAPI\Models\Operations\CreateTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "taskCreateDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taskDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TaskDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Classic Project.
     * 
     * Creates a new Classic Project. If the specified service ID refers to Smart Project, 400 Bad Request is returned instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ClassicProjectCreateDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Create5Response
     */
	public function create5(
        \OpenAPI\OpenAPI\Models\Shared\ClassicProjectCreateDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Create5Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Create5Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectDTOv1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectDTOv1', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a payable.
     * 
     * Deletes a payable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePayableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePayableResponse
     */
	public function deletePayable(
        \OpenAPI\OpenAPI\Models\Operations\DeletePayableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePayableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/finance/payables/{payableId}', \OpenAPI\OpenAPI\Models\Operations\DeletePayableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePayableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a receivable.
     * 
     * Deletes a receivable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteReceivableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteReceivableResponse
     */
	public function deleteReceivable(
        \OpenAPI\OpenAPI\Models\Operations\DeleteReceivableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteReceivableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/finance/receivables/{receivableId}', \OpenAPI\OpenAPI\Models\Operations\DeleteReceivableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteReceivableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes a project.
     * 
     * Removes a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete12Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete12Response
     */
	public function delete12(
        \OpenAPI\OpenAPI\Models\Operations\Delete12Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete12Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}', \OpenAPI\OpenAPI\Models\Operations\Delete12Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete12Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns projects' internal identifiers.
     * 
     * Returns projects' internal identifiers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllIds6Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllIds6Response
     */
	public function getAllIds6(
        \OpenAPI\OpenAPI\Models\Operations\GetAllIds6Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllIds6Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/ids');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllIds6Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllIds6Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAllIds6DefaultApplicationVndXtrfV1PlusJsonInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns project details.
     * 
     * Returns project details. If the specified project ID refers to Smart Project, 400 Bad Request is returned instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetById7Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetById7Response
     */
	public function getById7(
        \OpenAPI\OpenAPI\Models\Operations\GetById7Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetById7Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}', \OpenAPI\OpenAPI\Models\Operations\GetById7Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetById7Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetById7Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectDTOv1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectDTOv1', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns contacts of a given project.
     * 
     * Returns contacts of a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContactsResponse
     */
	public function getContacts(
        \OpenAPI\OpenAPI\Models\Operations\GetContactsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/contacts', \OpenAPI\OpenAPI\Models\Operations\GetContactsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns custom fields of a given project.
     * 
     * Returns custom fields of a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomFields5Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomFields5Response
     */
	public function getCustomFields5(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomFields5Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomFields5Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/customFields', \OpenAPI\OpenAPI\Models\Operations\GetCustomFields5Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomFields5Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns dates of a given project.
     * 
     * Returns dates of a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDates1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDates1Response
     */
	public function getDates1(
        \OpenAPI\OpenAPI\Models\Operations\GetDates1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDates1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/dates', \OpenAPI\OpenAPI\Models\Operations\GetDates1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDates1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectDatesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectDatesDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Downloads a file.
     * 
     * Downloads a file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFileByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFileByIdResponse
     */
	public function getFileById(
        \OpenAPI\OpenAPI\Models\Operations\GetFileByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFileByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/files/{fileId}/download', \OpenAPI\OpenAPI\Models\Operations\GetFileByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFileByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
        }

        return $response;
    }
	
    /**
     * Returns finance of a given project.
     * 
     * Returns finance of a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFinanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFinanceResponse
     */
	public function getFinance(
        \OpenAPI\OpenAPI\Models\Operations\GetFinanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFinanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/finance', \OpenAPI\OpenAPI\Models\Operations\GetFinanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFinanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->financeDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FinanceDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns instructions of a given project.
     * 
     * Returns instructions of a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInstructionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInstructionsResponse
     */
	public function getInstructions(
        \OpenAPI\OpenAPI\Models\Operations\GetInstructionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInstructionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/instructions', \OpenAPI\OpenAPI\Models\Operations\GetInstructionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInstructionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instructionsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstructionsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates contacts of a given project.
     * 
     * Updates contacts of a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContactsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateContactsResponse
     */
	public function updateContacts(
        \OpenAPI\OpenAPI\Models\Operations\UpdateContactsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateContactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/contacts', \OpenAPI\OpenAPI\Models\Operations\UpdateContactsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contactsDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateContactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates custom fields of a given project.
     * 
     * Updates custom fields of a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields3Response
     */
	public function updateCustomFields3(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/customFields', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates dates of a given project.
     * 
     * Updates dates of a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDates1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDates1Response
     */
	public function updateDates1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDates1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDates1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/dates', \OpenAPI\OpenAPI\Models\Operations\UpdateDates1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "projectDatesDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDates1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectDatesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectDatesDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates instructions of a given project.
     * 
     * Updates instructions of a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions1Response
     */
	public function updateInstructions1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/instructions', \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instructionsDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInstructions1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instructionsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstructionsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a payable.
     * 
     * Updates a payable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePayableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePayableResponse
     */
	public function updatePayable(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePayableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePayableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/finance/payables/{payableId}', \OpenAPI\OpenAPI\Models\Operations\UpdatePayableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payableDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePayableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayableDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a receivable.
     * 
     * Updates a receivable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateReceivableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateReceivableResponse
     */
	public function updateReceivable(
        \OpenAPI\OpenAPI\Models\Operations\UpdateReceivableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateReceivableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/finance/receivables/{receivableId}', \OpenAPI\OpenAPI\Models\Operations\UpdateReceivableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "receivableDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateReceivableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receivableDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReceivableDTO', 'json');
            }
        }

        return $response;
    }
}