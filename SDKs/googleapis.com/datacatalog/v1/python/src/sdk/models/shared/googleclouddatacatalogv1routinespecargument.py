"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudDatacatalogV1RoutineSpecArgumentModeEnum(str, Enum):
    r"""Specifies whether the argument is input or output."""
    MODE_UNSPECIFIED = 'MODE_UNSPECIFIED'
    IN = 'IN'
    OUT = 'OUT'
    INOUT = 'INOUT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDatacatalogV1RoutineSpecArgument:
    r"""Input or output argument of a function or stored procedure."""
    
    mode: Optional[GoogleCloudDatacatalogV1RoutineSpecArgumentModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""Specifies whether the argument is input or output."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the argument. A return argument of a function might not have a name."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the argument. The exact value depends on the source system and the language."""  
    