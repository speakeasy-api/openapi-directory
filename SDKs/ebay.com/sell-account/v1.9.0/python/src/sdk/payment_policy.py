"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PaymentPolicy:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_payment_policy(self, request: shared.PaymentPolicyRequest, security: operations.CreatePaymentPolicySecurity) -> operations.CreatePaymentPolicyResponse:
        r"""This method creates a new payment policy where the policy encapsulates seller's terms for order payments.  <br/><br/>Each policy targets a specific eBay marketplace and category group, and you can create multiple policies for each combination.  <br/><br/>A successful request returns the <b>getPaymentPolicy</b> URI to the new policy in the <b>Location</b> response header and the ID for the new policy is returned in the response payload.  <p class=\"tablenote\"><b>Tip:</b> For details on creating and using the business policies supported by the Account API, see <a href=\"/api-docs/sell/static/seller-accounts/business-policies.html\">eBay business policies</a>.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/payment_policy'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePaymentPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SetPaymentPolicyResponse])
                res.set_payment_policy_response = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def delete_payment_policy(self, request: operations.DeletePaymentPolicyRequest, security: operations.DeletePaymentPolicySecurity) -> operations.DeletePaymentPolicyResponse:
        r"""This method deletes a payment policy. Supply the ID of the policy you want to delete in the <b>paymentPolicyId</b> path parameter."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePaymentPolicyRequest, base_url, '/payment_policy/{payment_policy_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePaymentPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_payment_policies(self, request: operations.GetPaymentPoliciesRequest, security: operations.GetPaymentPoliciesSecurity) -> operations.GetPaymentPoliciesResponse:
        r"""This method retrieves all the payment policies configured for the marketplace you specify using the <code>marketplace_id</code> query parameter.  <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policies for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get the policies for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\"/api-docs/static/rest-request-components.html#HTTP\" target=\"_blank\">HTTP request headers</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/payment_policy'
        
        query_params = utils.get_query_params(operations.GetPaymentPoliciesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentPoliciesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentPolicyResponse])
                res.payment_policy_response = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_payment_policy(self, request: operations.GetPaymentPolicyRequest, security: operations.GetPaymentPolicySecurity) -> operations.GetPaymentPolicyResponse:
        r"""This method retrieves the complete details of a payment policy. Supply the ID of the policy you want to retrieve using the <b>paymentPolicyId</b> path parameter."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentPolicyRequest, base_url, '/payment_policy/{payment_policy_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentPolicy])
                res.payment_policy = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    def get_payment_policy_by_name(self, request: operations.GetPaymentPolicyByNameRequest, security: operations.GetPaymentPolicyByNameSecurity) -> operations.GetPaymentPolicyByNameResponse:
        r"""This method retrieves the details of a specific payment policy. Supply both the policy <code>name</code> and its associated <code>marketplace_id</code> in the request query parameters.   <br/><br/><b>Marketplaces and locales</b>  <br/><br/>Get the correct policy for a marketplace that supports multiple locales using the <code>Content-Language</code> request header. For example, get a policy for the French locale of the Canadian marketplace by specifying <code>fr-CA</code> for the <code>Content-Language</code> header. Likewise, target the Dutch locale of the Belgium marketplace by setting <code>Content-Language: nl-BE</code>. For details on header values, see <a href=\"/api-docs/static/rest-request-components.html#HTTP\">HTTP request headers</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/payment_policy/get_by_policy_name'
        
        query_params = utils.get_query_params(operations.GetPaymentPolicyByNameRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentPolicyByNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentPolicy])
                res.payment_policy = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def update_payment_policy(self, request: operations.UpdatePaymentPolicyRequest, security: operations.UpdatePaymentPolicySecurity) -> operations.UpdatePaymentPolicyResponse:
        r"""This method updates an existing payment policy. Specify the policy you want to update using the <b>payment_policy_id</b> path parameter. Supply a complete policy payload with the updates you want to make; this call overwrites the existing policy with the new details specified in the payload."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePaymentPolicyRequest, base_url, '/payment_policy/{payment_policy_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payment_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePaymentPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SetPaymentPolicyResponse])
                res.set_payment_policy_response = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    