// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetPlacementGroupsSortEnum - Can be used multiple times.
type GetPlacementGroupsSortEnum string

const (
	GetPlacementGroupsSortEnumID          GetPlacementGroupsSortEnum = "id"
	GetPlacementGroupsSortEnumIDAsc       GetPlacementGroupsSortEnum = "id:asc"
	GetPlacementGroupsSortEnumIDDesc      GetPlacementGroupsSortEnum = "id:desc"
	GetPlacementGroupsSortEnumName        GetPlacementGroupsSortEnum = "name"
	GetPlacementGroupsSortEnumNameAsc     GetPlacementGroupsSortEnum = "name:asc"
	GetPlacementGroupsSortEnumNameDesc    GetPlacementGroupsSortEnum = "name:desc"
	GetPlacementGroupsSortEnumCreated     GetPlacementGroupsSortEnum = "created"
	GetPlacementGroupsSortEnumCreatedAsc  GetPlacementGroupsSortEnum = "created:asc"
	GetPlacementGroupsSortEnumCreatedDesc GetPlacementGroupsSortEnum = "created:desc"
)

func (e *GetPlacementGroupsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "name":
		fallthrough
	case "name:asc":
		fallthrough
	case "name:desc":
		fallthrough
	case "created":
		fallthrough
	case "created:asc":
		fallthrough
	case "created:desc":
		*e = GetPlacementGroupsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPlacementGroupsSortEnum: %s", s)
	}
}

// GetPlacementGroupsTypeParameterTypeEnum - Can be used multiple times. The response will only contain PlacementGroups matching the type.
type GetPlacementGroupsTypeParameterTypeEnum string

const (
	GetPlacementGroupsTypeParameterTypeEnumSpread GetPlacementGroupsTypeParameterTypeEnum = "spread"
)

func (e *GetPlacementGroupsTypeParameterTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "spread":
		*e = GetPlacementGroupsTypeParameterTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPlacementGroupsTypeParameterTypeEnum: %s", s)
	}
}

type GetPlacementGroupsQueryParams struct {
	// Can be used to filter resources by labels. The response will only contain resources matching the label selector.
	LabelSelector *string `queryParam:"style=form,explode=true,name=label_selector"`
	// Can be used to filter resources by their name. The response will only contain the resources matching the specified name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Can be used multiple times.
	Sort *GetPlacementGroupsSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Can be used multiple times. The response will only contain PlacementGroups matching the type.
	Type *GetPlacementGroupsTypeParameterTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type GetPlacementGroupsRequest struct {
	QueryParams GetPlacementGroupsQueryParams
}

type GetPlacementGroupsPlacementGroupsResponseMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetPlacementGroupsPlacementGroupsResponseMeta struct {
	Pagination GetPlacementGroupsPlacementGroupsResponseMetaPagination `json:"pagination"`
}

// GetPlacementGroupsPlacementGroupsResponsePlacementGroupTypeEnum - Type of the Placement Group
type GetPlacementGroupsPlacementGroupsResponsePlacementGroupTypeEnum string

const (
	GetPlacementGroupsPlacementGroupsResponsePlacementGroupTypeEnumSpread GetPlacementGroupsPlacementGroupsResponsePlacementGroupTypeEnum = "spread"
)

func (e *GetPlacementGroupsPlacementGroupsResponsePlacementGroupTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "spread":
		*e = GetPlacementGroupsPlacementGroupsResponsePlacementGroupTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPlacementGroupsPlacementGroupsResponsePlacementGroupTypeEnum: %s", s)
	}
}

type GetPlacementGroupsPlacementGroupsResponsePlacementGroup struct {
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Array of IDs of Servers that are part of this Placement Group
	Servers []int64 `json:"servers"`
	// Type of the Placement Group
	Type GetPlacementGroupsPlacementGroupsResponsePlacementGroupTypeEnum `json:"type"`
}

// GetPlacementGroupsPlacementGroupsResponse - The `placement_groups` key contains an array of PlacementGroup objects
type GetPlacementGroupsPlacementGroupsResponse struct {
	Meta            *GetPlacementGroupsPlacementGroupsResponseMeta            `json:"meta,omitempty"`
	PlacementGroups []GetPlacementGroupsPlacementGroupsResponsePlacementGroup `json:"placement_groups"`
}

type GetPlacementGroupsResponse struct {
	ContentType string
	// The `placement_groups` key contains an array of PlacementGroup objects
	PlacementGroupsResponse *GetPlacementGroupsPlacementGroupsResponse
	StatusCode              int
	RawResponse             *http.Response
}
