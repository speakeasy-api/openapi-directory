<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a snapshot.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsDeleteSnapshotsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsDeleteSnapshotsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsDeleteSnapshotsResponse
     */
	public function dataflowProjectsDeleteSnapshots(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsDeleteSnapshotsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsDeleteSnapshotsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsDeleteSnapshotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/snapshots', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsDeleteSnapshotsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsDeleteSnapshotsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsDeleteSnapshotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteSnapshotResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the jobs of a project across all regions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsAggregatedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsAggregatedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsAggregatedResponse
     */
	public function dataflowProjectsJobsAggregated(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsAggregatedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsAggregatedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsAggregatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs:aggregated', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsAggregatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsAggregatedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsAggregatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`. Do not enter confidential information when you supply string values using the API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsCreateResponse
     */
	public function dataflowProjectsJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get encoded debug configuration for component. Not cacheable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugGetConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugGetConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugGetConfigResponse
     */
	public function dataflowProjectsJobsDebugGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugGetConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugGetConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getDebugConfigRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugGetConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDebugConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetDebugConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send encoded debug capture data for component.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugSendCaptureRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugSendCaptureSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugSendCaptureResponse
     */
	public function dataflowProjectsJobsDebugSendCapture(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugSendCaptureRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugSendCaptureSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugSendCaptureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugSendCaptureRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sendDebugCaptureRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugSendCaptureRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsDebugSendCaptureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendDebugCaptureResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetResponse
     */
	public function dataflowProjectsJobsGet(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetMetricsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetMetricsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetMetricsResponse
     */
	public function dataflowProjectsJobsGetMetrics(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetMetricsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetMetricsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs/{jobId}/metrics', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetMetricsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsGetMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobMetrics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobMetrics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, as you can only get the list of jobs that are running in `us-central1`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsListResponse
     */
	public function dataflowProjectsJobsList(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsMessagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsMessagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsMessagesListResponse
     */
	public function dataflowProjectsJobsMessagesList(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsMessagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsMessagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsMessagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs/{jobId}/messages', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsMessagesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsMessagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsMessagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobMessagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobMessagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Snapshot the state of a streaming job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsSnapshotRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsSnapshotSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsSnapshotResponse
     */
	public function dataflowProjectsJobsSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsSnapshotRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsSnapshotSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs/{jobId}:snapshot', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snapshotJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsSnapshotRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshot = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Snapshot', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsUpdateResponse
     */
	public function dataflowProjectsJobsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Leases a dataflow WorkItem to run.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsLeaseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsLeaseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsLeaseResponse
     */
	public function dataflowProjectsJobsWorkItemsLease(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsLeaseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsLeaseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsLeaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsLeaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "leaseWorkItemRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsLeaseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsLeaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->leaseWorkItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LeaseWorkItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reports the status of dataflow WorkItems leased by a worker.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsReportStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsReportStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsReportStatusResponse
     */
	public function dataflowProjectsJobsWorkItemsReportStatus(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsReportStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsReportStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsReportStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsReportStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reportWorkItemStatusRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsReportStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsJobsWorkItemsReportStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportWorkItemStatusResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReportWorkItemStatusResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Launch a job with a FlexTemplate.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsFlexTemplatesLaunchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsFlexTemplatesLaunchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsFlexTemplatesLaunchResponse
     */
	public function dataflowProjectsLocationsFlexTemplatesLaunch(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsFlexTemplatesLaunchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsFlexTemplatesLaunchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsFlexTemplatesLaunchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/flexTemplates:launch', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsFlexTemplatesLaunchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "launchFlexTemplateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsFlexTemplatesLaunchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsFlexTemplatesLaunchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->launchFlexTemplateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LaunchFlexTemplateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`. Do not enter confidential information when you supply string values using the API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsCreateResponse
     */
	public function dataflowProjectsLocationsJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get encoded debug configuration for component. Not cacheable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugGetConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugGetConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugGetConfigResponse
     */
	public function dataflowProjectsLocationsJobsDebugGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugGetConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugGetConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getDebugConfigRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugGetConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDebugConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetDebugConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send encoded debug capture data for component.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugSendCaptureRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugSendCaptureSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugSendCaptureResponse
     */
	public function dataflowProjectsLocationsJobsDebugSendCapture(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugSendCaptureRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugSendCaptureSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugSendCaptureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugSendCaptureRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sendDebugCaptureRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugSendCaptureRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsDebugSendCaptureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendDebugCaptureResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetResponse
     */
	public function dataflowProjectsLocationsJobsGet(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request detailed information about the execution status of the job. EXPERIMENTAL. This API is subject to change or removal without notice.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetExecutionDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetExecutionDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetExecutionDetailsResponse
     */
	public function dataflowProjectsLocationsJobsGetExecutionDetails(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetExecutionDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetExecutionDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetExecutionDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/executionDetails', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetExecutionDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetExecutionDetailsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetExecutionDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobExecutionDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobExecutionDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetMetricsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetMetricsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetMetricsResponse
     */
	public function dataflowProjectsLocationsJobsGetMetrics(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetMetricsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetMetricsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetMetricsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsGetMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobMetrics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobMetrics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, as you can only get the list of jobs that are running in `us-central1`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsListResponse
     */
	public function dataflowProjectsLocationsJobsList(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsMessagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsMessagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsMessagesListResponse
     */
	public function dataflowProjectsLocationsJobsMessagesList(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsMessagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsMessagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsMessagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsMessagesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsMessagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsMessagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listJobMessagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListJobMessagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Snapshot the state of a streaming job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotResponse
     */
	public function dataflowProjectsLocationsJobsSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}:snapshot', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snapshotJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshot = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Snapshot', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists snapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotsListResponse
     */
	public function dataflowProjectsLocationsJobsSnapshotsList(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/snapshots', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsSnapshotsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSnapshotsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSnapshotsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request detailed information about the execution status of a stage of the job. EXPERIMENTAL. This API is subject to change or removal without notice.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsStagesGetExecutionDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsStagesGetExecutionDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsStagesGetExecutionDetailsResponse
     */
	public function dataflowProjectsLocationsJobsStagesGetExecutionDetails(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsStagesGetExecutionDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsStagesGetExecutionDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsStagesGetExecutionDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/stages/{stageId}/executionDetails', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsStagesGetExecutionDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsStagesGetExecutionDetailsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsStagesGetExecutionDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stageExecutionDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StageExecutionDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsUpdateResponse
     */
	public function dataflowProjectsLocationsJobsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "jobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Leases a dataflow WorkItem to run.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsLeaseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsLeaseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsLeaseResponse
     */
	public function dataflowProjectsLocationsJobsWorkItemsLease(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsLeaseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsLeaseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsLeaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsLeaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "leaseWorkItemRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsLeaseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsLeaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->leaseWorkItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LeaseWorkItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reports the status of dataflow WorkItems leased by a worker.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsReportStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsReportStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsReportStatusResponse
     */
	public function dataflowProjectsLocationsJobsWorkItemsReportStatus(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsReportStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsReportStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsReportStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsReportStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reportWorkItemStatusRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsReportStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsJobsWorkItemsReportStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportWorkItemStatusResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReportWorkItemStatusResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a snapshot.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsDeleteResponse
     */
	public function dataflowProjectsLocationsSnapshotsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteSnapshotResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a snapshot.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsGetResponse
     */
	public function dataflowProjectsLocationsSnapshotsGet(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshot = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Snapshot', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists snapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsListResponse
     */
	public function dataflowProjectsLocationsSnapshotsList(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/snapshots', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsSnapshotsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSnapshotsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSnapshotsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesCreateResponse
     */
	public function dataflowProjectsLocationsTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/templates', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createJobFromTemplateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the template associated with a template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesGetResponse
     */
	public function dataflowProjectsLocationsTemplatesGet(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/templates:get', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTemplateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTemplateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Launch a template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesLaunchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesLaunchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesLaunchResponse
     */
	public function dataflowProjectsLocationsTemplatesLaunch(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesLaunchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesLaunchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesLaunchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/templates:launch', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesLaunchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "launchTemplateParameters", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesLaunchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsTemplatesLaunchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->launchTemplateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LaunchTemplateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send a worker_message to the service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsWorkerMessagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsWorkerMessagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsWorkerMessagesResponse
     */
	public function dataflowProjectsLocationsWorkerMessages(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsWorkerMessagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsWorkerMessagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsWorkerMessagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/locations/{location}/WorkerMessages', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsWorkerMessagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sendWorkerMessagesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsWorkerMessagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsLocationsWorkerMessagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendWorkerMessagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SendWorkerMessagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a snapshot.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsGetResponse
     */
	public function dataflowProjectsSnapshotsGet(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/snapshots/{snapshotId}', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snapshot = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Snapshot', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists snapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsListResponse
     */
	public function dataflowProjectsSnapshotsList(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/snapshots', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsSnapshotsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSnapshotsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSnapshotsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesCreateResponse
     */
	public function dataflowProjectsTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/templates', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createJobFromTemplateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the template associated with a template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesGetResponse
     */
	public function dataflowProjectsTemplatesGet(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/templates:get', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTemplateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTemplateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Launch a template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesLaunchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesLaunchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesLaunchResponse
     */
	public function dataflowProjectsTemplatesLaunch(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesLaunchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesLaunchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesLaunchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/templates:launch', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesLaunchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "launchTemplateParameters", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesLaunchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsTemplatesLaunchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->launchTemplateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LaunchTemplateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send a worker_message to the service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsWorkerMessagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsWorkerMessagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsWorkerMessagesResponse
     */
	public function dataflowProjectsWorkerMessages(
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsWorkerMessagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsWorkerMessagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsWorkerMessagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1b3/projects/{projectId}/WorkerMessages', \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsWorkerMessagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sendWorkerMessagesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataflowProjectsWorkerMessagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataflowProjectsWorkerMessagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendWorkerMessagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SendWorkerMessagesResponse', 'json');
            }
        }

        return $response;
    }
}