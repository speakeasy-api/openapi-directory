// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// ReleaseEventAPIGetListCategoryEnum - Filter by event category.
type ReleaseEventAPIGetListCategoryEnum string

const (
	ReleaseEventAPIGetListCategoryEnumUnspecified  ReleaseEventAPIGetListCategoryEnum = "Unspecified"
	ReleaseEventAPIGetListCategoryEnumAlbumRelease ReleaseEventAPIGetListCategoryEnum = "AlbumRelease"
	ReleaseEventAPIGetListCategoryEnumAnniversary  ReleaseEventAPIGetListCategoryEnum = "Anniversary"
	ReleaseEventAPIGetListCategoryEnumClub         ReleaseEventAPIGetListCategoryEnum = "Club"
	ReleaseEventAPIGetListCategoryEnumConcert      ReleaseEventAPIGetListCategoryEnum = "Concert"
	ReleaseEventAPIGetListCategoryEnumContest      ReleaseEventAPIGetListCategoryEnum = "Contest"
	ReleaseEventAPIGetListCategoryEnumConvention   ReleaseEventAPIGetListCategoryEnum = "Convention"
	ReleaseEventAPIGetListCategoryEnumOther        ReleaseEventAPIGetListCategoryEnum = "Other"
)

func (e *ReleaseEventAPIGetListCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unspecified":
		fallthrough
	case "AlbumRelease":
		fallthrough
	case "Anniversary":
		fallthrough
	case "Club":
		fallthrough
	case "Concert":
		fallthrough
	case "Contest":
		fallthrough
	case "Convention":
		fallthrough
	case "Other":
		*e = ReleaseEventAPIGetListCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventAPIGetListCategoryEnum: %s", s)
	}
}

// ReleaseEventAPIGetListFieldsEnum - Optional fields (optional). Possible values are Description, Series.
type ReleaseEventAPIGetListFieldsEnum string

const (
	ReleaseEventAPIGetListFieldsEnumNone            ReleaseEventAPIGetListFieldsEnum = "None"
	ReleaseEventAPIGetListFieldsEnumAdditionalNames ReleaseEventAPIGetListFieldsEnum = "AdditionalNames"
	ReleaseEventAPIGetListFieldsEnumArtists         ReleaseEventAPIGetListFieldsEnum = "Artists"
	ReleaseEventAPIGetListFieldsEnumDescription     ReleaseEventAPIGetListFieldsEnum = "Description"
	ReleaseEventAPIGetListFieldsEnumMainPicture     ReleaseEventAPIGetListFieldsEnum = "MainPicture"
	ReleaseEventAPIGetListFieldsEnumNames           ReleaseEventAPIGetListFieldsEnum = "Names"
	ReleaseEventAPIGetListFieldsEnumSeries          ReleaseEventAPIGetListFieldsEnum = "Series"
	ReleaseEventAPIGetListFieldsEnumSongList        ReleaseEventAPIGetListFieldsEnum = "SongList"
	ReleaseEventAPIGetListFieldsEnumTags            ReleaseEventAPIGetListFieldsEnum = "Tags"
	ReleaseEventAPIGetListFieldsEnumVenue           ReleaseEventAPIGetListFieldsEnum = "Venue"
	ReleaseEventAPIGetListFieldsEnumWebLinks        ReleaseEventAPIGetListFieldsEnum = "WebLinks"
)

func (e *ReleaseEventAPIGetListFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "AdditionalNames":
		fallthrough
	case "Artists":
		fallthrough
	case "Description":
		fallthrough
	case "MainPicture":
		fallthrough
	case "Names":
		fallthrough
	case "Series":
		fallthrough
	case "SongList":
		fallthrough
	case "Tags":
		fallthrough
	case "Venue":
		fallthrough
	case "WebLinks":
		*e = ReleaseEventAPIGetListFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventAPIGetListFieldsEnum: %s", s)
	}
}

// ReleaseEventAPIGetListLangEnum - Content language preference.
type ReleaseEventAPIGetListLangEnum string

const (
	ReleaseEventAPIGetListLangEnumDefault  ReleaseEventAPIGetListLangEnum = "Default"
	ReleaseEventAPIGetListLangEnumJapanese ReleaseEventAPIGetListLangEnum = "Japanese"
	ReleaseEventAPIGetListLangEnumRomaji   ReleaseEventAPIGetListLangEnum = "Romaji"
	ReleaseEventAPIGetListLangEnumEnglish  ReleaseEventAPIGetListLangEnum = "English"
)

func (e *ReleaseEventAPIGetListLangEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Default":
		fallthrough
	case "Japanese":
		fallthrough
	case "Romaji":
		fallthrough
	case "English":
		*e = ReleaseEventAPIGetListLangEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventAPIGetListLangEnum: %s", s)
	}
}

// ReleaseEventAPIGetListNameMatchModeEnum - Match mode for event name (optional, defaults to Auto).
type ReleaseEventAPIGetListNameMatchModeEnum string

const (
	ReleaseEventAPIGetListNameMatchModeEnumAuto       ReleaseEventAPIGetListNameMatchModeEnum = "Auto"
	ReleaseEventAPIGetListNameMatchModeEnumPartial    ReleaseEventAPIGetListNameMatchModeEnum = "Partial"
	ReleaseEventAPIGetListNameMatchModeEnumStartsWith ReleaseEventAPIGetListNameMatchModeEnum = "StartsWith"
	ReleaseEventAPIGetListNameMatchModeEnumExact      ReleaseEventAPIGetListNameMatchModeEnum = "Exact"
	ReleaseEventAPIGetListNameMatchModeEnumWords      ReleaseEventAPIGetListNameMatchModeEnum = "Words"
)

func (e *ReleaseEventAPIGetListNameMatchModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Auto":
		fallthrough
	case "Partial":
		fallthrough
	case "StartsWith":
		fallthrough
	case "Exact":
		fallthrough
	case "Words":
		*e = ReleaseEventAPIGetListNameMatchModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventAPIGetListNameMatchModeEnum: %s", s)
	}
}

// ReleaseEventAPIGetListSortEnum - Sort rule (optional, defaults to Name).
//
//	Possible values are None, Name, Date, SeriesName.
type ReleaseEventAPIGetListSortEnum string

const (
	ReleaseEventAPIGetListSortEnumNone         ReleaseEventAPIGetListSortEnum = "None"
	ReleaseEventAPIGetListSortEnumName         ReleaseEventAPIGetListSortEnum = "Name"
	ReleaseEventAPIGetListSortEnumDate         ReleaseEventAPIGetListSortEnum = "Date"
	ReleaseEventAPIGetListSortEnumAdditionDate ReleaseEventAPIGetListSortEnum = "AdditionDate"
	ReleaseEventAPIGetListSortEnumSeriesName   ReleaseEventAPIGetListSortEnum = "SeriesName"
	ReleaseEventAPIGetListSortEnumVenueName    ReleaseEventAPIGetListSortEnum = "VenueName"
)

func (e *ReleaseEventAPIGetListSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "Name":
		fallthrough
	case "Date":
		fallthrough
	case "AdditionDate":
		fallthrough
	case "SeriesName":
		fallthrough
	case "VenueName":
		*e = ReleaseEventAPIGetListSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventAPIGetListSortEnum: %s", s)
	}
}

// ReleaseEventAPIGetListStatusEnum - Filter by entry status.
type ReleaseEventAPIGetListStatusEnum string

const (
	ReleaseEventAPIGetListStatusEnumDraft    ReleaseEventAPIGetListStatusEnum = "Draft"
	ReleaseEventAPIGetListStatusEnumFinished ReleaseEventAPIGetListStatusEnum = "Finished"
	ReleaseEventAPIGetListStatusEnumApproved ReleaseEventAPIGetListStatusEnum = "Approved"
	ReleaseEventAPIGetListStatusEnumLocked   ReleaseEventAPIGetListStatusEnum = "Locked"
)

func (e *ReleaseEventAPIGetListStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Draft":
		fallthrough
	case "Finished":
		fallthrough
	case "Approved":
		fallthrough
	case "Locked":
		*e = ReleaseEventAPIGetListStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventAPIGetListStatusEnum: %s", s)
	}
}

type ReleaseEventAPIGetListQueryParams struct {
	// Filter by events after this date (inclusive).
	AfterDate *time.Time `queryParam:"style=form,explode=true,name=afterDate"`
	// Filter by artist Id.
	ArtistID []int `queryParam:"style=form,explode=true,name=artistId"`
	// Filter by events before this date (exclusive).
	BeforeDate *time.Time `queryParam:"style=form,explode=true,name=beforeDate"`
	// Filter by event category.
	Category *ReleaseEventAPIGetListCategoryEnum `queryParam:"style=form,explode=true,name=category"`
	// Include child tags, if the tags being filtered by have any.
	ChildTags *bool `queryParam:"style=form,explode=true,name=childTags"`
	// Include child voicebanks, if the artist being filtered by has any.
	ChildVoicebanks *bool `queryParam:"style=form,explode=true,name=childVoicebanks"`
	// Optional fields (optional). Possible values are Description, Series.
	Fields *ReleaseEventAPIGetListFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
	// Whether to load total number of items (optional, default to false).
	GetTotalCount *bool `queryParam:"style=form,explode=true,name=getTotalCount"`
	// Include members of groups. This applies if {artistId} is a group.
	IncludeMembers *bool `queryParam:"style=form,explode=true,name=includeMembers"`
	// Content language preference.
	Lang *ReleaseEventAPIGetListLangEnum `queryParam:"style=form,explode=true,name=lang"`
	// Maximum number of results to be loaded (optional, defaults to 10).
	MaxResults *int `queryParam:"style=form,explode=true,name=maxResults"`
	// Match mode for event name (optional, defaults to Auto).
	NameMatchMode *ReleaseEventAPIGetListNameMatchModeEnum `queryParam:"style=form,explode=true,name=nameMatchMode"`
	// Event name query (optional).
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Filter by series Id.
	SeriesID *int `queryParam:"style=form,explode=true,name=seriesId"`
	// Sort rule (optional, defaults to Name).
	//             Possible values are None, Name, Date, SeriesName.
	Sort *ReleaseEventAPIGetListSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// First item to be retrieved (optional, defaults to 0).
	Start *int `queryParam:"style=form,explode=true,name=start"`
	// Filter by entry status.
	Status *ReleaseEventAPIGetListStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// Filter by one or more tag Ids (optional).
	TagID []int `queryParam:"style=form,explode=true,name=tagId"`
	// Filter to include only events in user's events (interested or attending).
	UserCollectionID *int `queryParam:"style=form,explode=true,name=userCollectionId"`
}

type ReleaseEventAPIGetListRequest struct {
	QueryParams ReleaseEventAPIGetListQueryParams
}

type ReleaseEventAPIGetListResponse struct {
	Body        []byte
	ContentType string
	// OK
	PartialFindResultReleaseEventForAPIContract *shared.PartialFindResultReleaseEventForAPIContract
	StatusCode                                  int
	RawResponse                                 *http.Response
}
