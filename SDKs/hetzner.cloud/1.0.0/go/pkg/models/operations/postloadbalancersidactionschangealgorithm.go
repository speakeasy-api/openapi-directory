// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnum - Algorithm of the Load Balancer
type PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnum string

const (
	PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnumRoundRobin       PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnum = "round_robin"
	PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnumLeastConnections PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnum = "least_connections"
)

func (e PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnum) ToPointer() *PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnum {
	return &e
}

func (e *PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "round_robin":
		fallthrough
	case "least_connections":
		*e = PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnum: %v", v)
	}
}

type PostLoadBalancersIDActionsChangeAlgorithmRequestBody struct {
	// Algorithm of the Load Balancer
	Type PostLoadBalancersIDActionsChangeAlgorithmRequestBodyTypeEnum `json:"type"`
}

type PostLoadBalancersIDActionsChangeAlgorithmRequest struct {
	RequestBody *PostLoadBalancersIDActionsChangeAlgorithmRequestBody `request:"mediaType=application/json"`
	// ID of the Load Balancer
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionError - Error message for the Action if error occurred, otherwise null
type PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnum - Status of the Action
type PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnum string

const (
	PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnumSuccess PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnum = "success"
	PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnumRunning PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnum = "running"
	PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnumError   PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnum = "error"
)

func (e PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnum) ToPointer() *PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnum {
	return &e
}

func (e *PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnum: %v", v)
	}
}

type PostLoadBalancersIDActionsChangeAlgorithmActionResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostLoadBalancersIDActionsChangeAlgorithmActionResponseActionStatusEnum `json:"status"`
}

// PostLoadBalancersIDActionsChangeAlgorithmActionResponse - The `action` key contains the `change_algorithm` Action
type PostLoadBalancersIDActionsChangeAlgorithmActionResponse struct {
	Action PostLoadBalancersIDActionsChangeAlgorithmActionResponseAction `json:"action"`
}

type PostLoadBalancersIDActionsChangeAlgorithmResponse struct {
	// The `action` key contains the `change_algorithm` Action
	ActionResponse *PostLoadBalancersIDActionsChangeAlgorithmActionResponse
	ContentType    string
	StatusCode     int
	RawResponse    *http.Response
}
