"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class HealthInformationNotificationNotificationNotifierTypeEnum(str, Enum):
    HIU = 'HIU'
    HIP = 'HIP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HealthInformationNotificationNotificationNotifier:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: HealthInformationNotificationNotificationNotifierTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class HealthInformationNotificationNotificationStatusNotificationSessionStatusEnum(str, Enum):
    TRANSFERRED = 'TRANSFERRED'
    FAILED = 'FAILED'

class HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum(str, Enum):
    DELIVERED = 'DELIVERED'
    OK = 'OK'
    ERRORED = 'ERRORED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HealthInformationNotificationNotificationStatusNotificationStatusResponses:
    
    care_context_reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('careContextReference') }})  
    hi_status: HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiStatus') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HealthInformationNotificationNotificationStatusNotification:
    
    hip_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hipId') }})  
    session_status: HealthInformationNotificationNotificationStatusNotificationSessionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionStatus') }})  
    status_responses: Optional[list[HealthInformationNotificationNotificationStatusNotificationStatusResponses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusResponses'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HealthInformationNotificationNotification:
    
    consent_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consentId') }})  
    done_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doneAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    notifier: HealthInformationNotificationNotificationNotifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifier') }})  
    status_notification: HealthInformationNotificationNotificationStatusNotification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusNotification') }})  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionId') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HealthInformationNotification:
    
    notification: HealthInformationNotificationNotification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification') }})  
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId') }})
    r"""a nonce, unique for each HTTP request."""  
    timestamp: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ"""  
    