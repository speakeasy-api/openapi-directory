<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class ScimUser
{
	#[\JMS\Serializer\Annotation\SerializedName('active')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $active = null;
    
    /**
     * The username in Docker. Also known as the "Docker ID".
     * 
     * @var ?string $displayName
     */
	#[\JMS\Serializer\Annotation\SerializedName('displayName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $displayName = null;
    
    /**
     * $emails
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ScimEmail> $emails
     */
	#[\JMS\Serializer\Annotation\SerializedName('emails')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ScimEmail>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $emails = null;
    
    /**
     * $groups
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ScimGroup> $groups
     */
	#[\JMS\Serializer\Annotation\SerializedName('groups')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ScimGroup>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $groups = null;
    
    /**
     * The unique identifier for the user. A v4 UUID.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('meta')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ScimUserMeta')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ScimUserMeta $meta = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ScimUserName')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ScimUserName $name = null;
    
    /**
     * $schemas
     * 
     * @var ?array<string> $schemas
     */
	#[\JMS\Serializer\Annotation\SerializedName('schemas')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $schemas = null;
    
    /**
     * The user's email address. This must be reachable via email.
     * 
     * @var ?string $userName
     */
	#[\JMS\Serializer\Annotation\SerializedName('userName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userName = null;
    
	public function __construct()
	{
		$this->active = null;
		$this->displayName = null;
		$this->emails = null;
		$this->groups = null;
		$this->id = null;
		$this->meta = null;
		$this->name = null;
		$this->schemas = null;
		$this->userName = null;
	}
}
