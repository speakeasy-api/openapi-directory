<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class EmailListsAndAddresses 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Query Hard Bounced Emails
     * 
     * This endpoint allows you to pull a list of email addresses that have “hard bounced” your email messages within a certain time frame.
     * 
     * > You must provide an `end_date`, as well as either an `email` or a `start_date`.<br><br>If your date range has more than `limit` number of hard bounces, you will need to make multiple API calls, each time increasing the `offset` until a call returns either fewer than `limit` or zero results.
     * 
     * ## Response
     * 
     * Entries are listed in descending order.
     * 
     * ```json
     * Content-Type: application/json
     * Authorization: Bearer YOUR-REST-API-KEY
     * {
     *   "emails": [
     *     {
     *       "email": "example1@braze.com",
     *       "hard_bounced_at": "2016-08-25 15:24:32 +0000"
     *     },
     *     {
     *       "email": "example2@braze.com",
     *       "hard_bounced_at": "2016-08-24 17:41:58 +0000"
     *     },
     *     {
     *       "email": "example3@braze.com",
     *       "hard_bounced_at": "2016-08-24 12:01:13 +0000"
     *     }
     *   ],
     *   "message": "success"
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryHardBouncedEmailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryHardBouncedEmailsResponse
     */
	public function queryHardBouncedEmails(
        \OpenAPI\OpenAPI\Models\Operations\QueryHardBouncedEmailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryHardBouncedEmailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/email/hard_bounces');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryHardBouncedEmailsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryHardBouncedEmailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Query List of Unsubscribed Email Addresses
     * 
     * Use the /email/unsubscribes endpoint to return emails that have unsubscribed during the time period from `start_date` to `end_date`. You can use this endpoint to set up a bi-directional sync between Braze and other email systems or your own database.
     * 
     * > You must provide either an email or a start_date and an end_date. <br><br>If your date range has more than `limit` number of unsubscribes, you will need to make multiple API calls, each time increasing the `offset` until a call returns either fewer than `limit` or zero results.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryListOfUnsubscribedEmailAddressesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryListOfUnsubscribedEmailAddressesResponse
     */
	public function queryListOfUnsubscribedEmailAddresses(
        \OpenAPI\OpenAPI\Models\Operations\QueryListOfUnsubscribedEmailAddressesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryListOfUnsubscribedEmailAddressesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/email/unsubscribes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryListOfUnsubscribedEmailAddressesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryListOfUnsubscribedEmailAddressesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}