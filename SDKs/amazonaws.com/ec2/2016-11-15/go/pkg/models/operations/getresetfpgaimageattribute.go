// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETResetFpgaImageAttributeActionEnum
type GETResetFpgaImageAttributeActionEnum string

const (
	GETResetFpgaImageAttributeActionEnumResetFpgaImageAttribute GETResetFpgaImageAttributeActionEnum = "ResetFpgaImageAttribute"
)

func (e *GETResetFpgaImageAttributeActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ResetFpgaImageAttribute":
		*e = GETResetFpgaImageAttributeActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETResetFpgaImageAttributeActionEnum: %s", s)
	}
}

// GETResetFpgaImageAttributeAttributeEnum - The attribute.
type GETResetFpgaImageAttributeAttributeEnum string

const (
	GETResetFpgaImageAttributeAttributeEnumLoadPermission GETResetFpgaImageAttributeAttributeEnum = "loadPermission"
)

func (e *GETResetFpgaImageAttributeAttributeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "loadPermission":
		*e = GETResetFpgaImageAttributeAttributeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETResetFpgaImageAttributeAttributeEnum: %s", s)
	}
}

// GETResetFpgaImageAttributeVersionEnum
type GETResetFpgaImageAttributeVersionEnum string

const (
	GETResetFpgaImageAttributeVersionEnumTwoThousandAndSixteen1115 GETResetFpgaImageAttributeVersionEnum = "2016-11-15"
)

func (e *GETResetFpgaImageAttributeVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETResetFpgaImageAttributeVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETResetFpgaImageAttributeVersionEnum: %s", s)
	}
}

type GETResetFpgaImageAttributeQueryParams struct {
	Action GETResetFpgaImageAttributeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The attribute.
	Attribute *GETResetFpgaImageAttributeAttributeEnum `queryParam:"style=form,explode=true,name=Attribute"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the AFI.
	FpgaImageID string                                `queryParam:"style=form,explode=true,name=FpgaImageId"`
	Version     GETResetFpgaImageAttributeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETResetFpgaImageAttributeHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETResetFpgaImageAttributeRequest struct {
	QueryParams GETResetFpgaImageAttributeQueryParams
	Headers     GETResetFpgaImageAttributeHeaders
}

type GETResetFpgaImageAttributeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
