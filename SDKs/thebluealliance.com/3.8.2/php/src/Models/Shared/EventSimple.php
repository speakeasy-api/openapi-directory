<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * EventSimple - Successful response
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class EventSimple
{
    /**
     * City, town, village, etc. the event is located in.
     * 
     * @var ?string $city
     */
	#[\JMS\Serializer\Annotation\SerializedName('city')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $city = null;
    
    /**
     * Country the event is located in.
     * 
     * @var ?string $country
     */
	#[\JMS\Serializer\Annotation\SerializedName('country')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $country = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('district')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DistrictList')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DistrictList $district = null;
    
    /**
     * Event end date in `yyyy-mm-dd` format.
     * 
     * @var \DateTime $endDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('end_date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    public \DateTime $endDate;
    
    /**
     * Event short code, as provided by FIRST.
     * 
     * @var string $eventCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('event_code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $eventCode;
    
    /**
     * Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
     * 
     * @var int $eventType
     */
	#[\JMS\Serializer\Annotation\SerializedName('event_type')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $eventType;
    
    /**
     * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
     * 
     * @var string $key
     */
	#[\JMS\Serializer\Annotation\SerializedName('key')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $key;
    
    /**
     * Official name of event on record either provided by FIRST or organizers of offseason event.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * Event start date in `yyyy-mm-dd` format.
     * 
     * @var \DateTime $startDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('start_date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    public \DateTime $startDate;
    
    /**
     * State or Province the event is located in.
     * 
     * @var ?string $stateProv
     */
	#[\JMS\Serializer\Annotation\SerializedName('state_prov')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $stateProv = null;
    
    /**
     * Year the event data is for.
     * 
     * @var int $year
     */
	#[\JMS\Serializer\Annotation\SerializedName('year')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $year;
    
	public function __construct()
	{
		$this->city = null;
		$this->country = null;
		$this->district = null;
		$this->endDate = new \DateTime();
		$this->eventCode = "";
		$this->eventType = 0;
		$this->key = "";
		$this->name = "";
		$this->startDate = new \DateTime();
		$this->stateProv = null;
		$this->year = 0;
	}
}
