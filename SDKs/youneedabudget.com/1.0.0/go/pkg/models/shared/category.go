// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// CategoryGoalTypeEnum - The type of goal, if the category has a goal (TB='Target Category Balance', TBD='Target Category Balance by Date', MF='Monthly Funding', NEED='Plan Your Spending')
type CategoryGoalTypeEnum string

const (
	CategoryGoalTypeEnumTb   CategoryGoalTypeEnum = "TB"
	CategoryGoalTypeEnumTbd  CategoryGoalTypeEnum = "TBD"
	CategoryGoalTypeEnumMf   CategoryGoalTypeEnum = "MF"
	CategoryGoalTypeEnumNeed CategoryGoalTypeEnum = "NEED"
	CategoryGoalTypeEnumDebt CategoryGoalTypeEnum = "DEBT"
	CategoryGoalTypeEnumNull CategoryGoalTypeEnum = "null"
)

func (e *CategoryGoalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TB":
		fallthrough
	case "TBD":
		fallthrough
	case "MF":
		fallthrough
	case "NEED":
		fallthrough
	case "DEBT":
		fallthrough
	case "null":
		*e = CategoryGoalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CategoryGoalTypeEnum: %s", s)
	}
}

type Category struct {
	// Activity amount in milliunits format
	Activity int64 `json:"activity"`
	// Balance in milliunits format
	Balance int64 `json:"balance"`
	// Budgeted amount in milliunits format
	Budgeted        int64  `json:"budgeted"`
	CategoryGroupID string `json:"category_group_id"`
	// Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
	Deleted bool `json:"deleted"`
	// The goal cadence
	GoalCadence *int `json:"goal_cadence,omitempty"`
	// The goal cadence frequency
	GoalCadenceFrequency *int `json:"goal_cadence_frequency,omitempty"`
	// The month a goal was created
	GoalCreationMonth *types.Date `json:"goal_creation_month,omitempty"`
	// The day of the goal
	GoalDay *int `json:"goal_day,omitempty"`
	// The number of months, including the current month, left in the current goal period.
	GoalMonthsToBudget *int `json:"goal_months_to_budget,omitempty"`
	// The total amount funded towards the goal within the current goal period.
	GoalOverallFunded *int64 `json:"goal_overall_funded,omitempty"`
	// The amount of funding still needed to complete the goal within the current goal period.
	GoalOverallLeft *int64 `json:"goal_overall_left,omitempty"`
	// The percentage completion of the goal
	GoalPercentageComplete *int `json:"goal_percentage_complete,omitempty"`
	// The goal target amount in milliunits
	GoalTarget *int64 `json:"goal_target,omitempty"`
	// The original target month for the goal to be completed.  Only some goal types specify this date.
	GoalTargetMonth *types.Date `json:"goal_target_month,omitempty"`
	// The type of goal, if the category has a goal (TB='Target Category Balance', TBD='Target Category Balance by Date', MF='Monthly Funding', NEED='Plan Your Spending')
	GoalType *CategoryGoalTypeEnum `json:"goal_type,omitempty"`
	// The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period.  This amount will generally correspond to the 'Underfunded' amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.
	GoalUnderFunded *int64 `json:"goal_under_funded,omitempty"`
	// Whether or not the category is hidden
	Hidden bool    `json:"hidden"`
	ID     string  `json:"id"`
	Name   string  `json:"name"`
	Note   *string `json:"note,omitempty"`
	// If category is hidden this is the id of the category group it originally belonged to before it was hidden.
	OriginalCategoryGroupID *string `json:"original_category_group_id,omitempty"`
}
