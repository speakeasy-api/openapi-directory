"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import errorlimit as shared_errorlimit
from ..shared import shopper as shared_shopper
from enum import Enum
from typing import Optional

class GetIncludesEnum(str, Enum):
    CUSTOMER_ID = 'customerId'


@dataclasses.dataclass
class GetRequest:
    
    shopper_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'shopperId', 'style': 'simple', 'explode': False }})
    r"""Shopper whose details are to be retrieved"""  
    includes: Optional[list[GetIncludesEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includes', 'style': 'form', 'explode': False }})
    r"""Additional properties to be included in the response shopper object"""  
    

@dataclasses.dataclass
class GetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Request was malformed"""  
    error_limit: Optional[shared_errorlimit.ErrorLimit] = dataclasses.field(default=None)
    r"""Too many requests received within interval"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    shopper: Optional[shared_shopper.Shopper] = dataclasses.field(default=None)
    r"""Request was successful"""  
    