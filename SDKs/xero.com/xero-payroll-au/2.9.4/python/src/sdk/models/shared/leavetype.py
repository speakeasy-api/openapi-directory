"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LeaveType:
    
    current_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentRecord'), 'exclude': lambda f: f is None }})
    r"""Is the current record"""  
    is_paid_leave: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsPaidLeave'), 'exclude': lambda f: f is None }})
    r"""Set this to indicate that an employee will be paid when taking this type of leave"""  
    leave_loading_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LeaveLoadingRate'), 'exclude': lambda f: f is None }})
    r"""Enter an amount here if your organisation pays an additional percentage on top of ordinary earnings when your employees take leave (typically 17.5%)"""  
    leave_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LeaveTypeID'), 'exclude': lambda f: f is None }})
    r"""Xero identifier"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""Name of the earnings rate (max length = 100)"""  
    normal_entitlement: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NormalEntitlement'), 'exclude': lambda f: f is None }})
    r"""The number of units the employee is entitled to each year"""  
    show_on_payslip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShowOnPayslip'), 'exclude': lambda f: f is None }})
    r"""Set this if you want a balance for this leave type to be shown on your employee’s payslips"""  
    type_of_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TypeOfUnits'), 'exclude': lambda f: f is None }})
    r"""The type of units by which leave entitlements are normally tracked. These are typically the same as the type of units used for the employee’s ordinary earnings rate"""  
    updated_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDateUTC'), 'exclude': lambda f: f is None }})
    r"""Last modified timestamp"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LeaveTypeInput:
    
    current_record: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentRecord'), 'exclude': lambda f: f is None }})
    r"""Is the current record"""  
    is_paid_leave: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsPaidLeave'), 'exclude': lambda f: f is None }})
    r"""Set this to indicate that an employee will be paid when taking this type of leave"""  
    leave_loading_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LeaveLoadingRate'), 'exclude': lambda f: f is None }})
    r"""Enter an amount here if your organisation pays an additional percentage on top of ordinary earnings when your employees take leave (typically 17.5%)"""  
    leave_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LeaveTypeID'), 'exclude': lambda f: f is None }})
    r"""Xero identifier"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""Name of the earnings rate (max length = 100)"""  
    normal_entitlement: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NormalEntitlement'), 'exclude': lambda f: f is None }})
    r"""The number of units the employee is entitled to each year"""  
    show_on_payslip: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShowOnPayslip'), 'exclude': lambda f: f is None }})
    r"""Set this if you want a balance for this leave type to be shown on your employee’s payslips"""  
    type_of_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TypeOfUnits'), 'exclude': lambda f: f is None }})
    r"""The type of units by which leave entitlements are normally tracked. These are typically the same as the type of units used for the employee’s ordinary earnings rate"""  
    