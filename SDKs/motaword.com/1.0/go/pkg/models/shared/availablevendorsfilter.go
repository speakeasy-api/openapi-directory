// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AvailableVendorsFilterTypesEnum string

const (
	AvailableVendorsFilterTypesEnumTranslator  AvailableVendorsFilterTypesEnum = "translator"
	AvailableVendorsFilterTypesEnumProofreader AvailableVendorsFilterTypesEnum = "proofreader"
	AvailableVendorsFilterTypesEnumBoth        AvailableVendorsFilterTypesEnum = "both"
)

func (e AvailableVendorsFilterTypesEnum) ToPointer() *AvailableVendorsFilterTypesEnum {
	return &e
}

func (e *AvailableVendorsFilterTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "translator":
		fallthrough
	case "proofreader":
		fallthrough
	case "both":
		*e = AvailableVendorsFilterTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailableVendorsFilterTypesEnum: %v", v)
	}
}

type AvailableVendorsFilter struct {
	// Corporate account ID to filter for vendor authorization
	CorporateID *float64 `json:"corporateId,omitempty"`
	// Filter vendors for manual work permission
	ManualWorkPermission *bool `json:"manualWorkPermission,omitempty"`
	// Source language code
	SourceLanguage *string `json:"sourceLanguage,omitempty"`
	// List of target language codes.
	TargetLanguages []string `json:"targetLanguages,omitempty"`
	// List of vendor types
	Types []AvailableVendorsFilterTypesEnum `json:"types,omitempty"`
}
