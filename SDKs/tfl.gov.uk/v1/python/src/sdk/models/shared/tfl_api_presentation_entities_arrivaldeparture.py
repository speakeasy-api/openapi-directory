"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import tfl_api_presentation_entities_predictiontiming as shared_tfl_api_presentation_entities_predictiontiming
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum(str, Enum):
    r"""Status of departure"""
    ON_TIME = 'OnTime'
    DELAYED = 'Delayed'
    CANCELLED = 'Cancelled'
    NOT_STOPPING_AT_STATION = 'NotStoppingAtStation'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesArrivalDeparture:
    r"""DTO to capture the prediction details"""
    
    cause: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cause'), 'exclude': lambda f: f is None }})
    r"""Reason for cancellation or delay"""  
    departure_status: Optional[TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departureStatus'), 'exclude': lambda f: f is None }})
    r"""Status of departure"""  
    destination_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationName'), 'exclude': lambda f: f is None }})
    r"""Name of the destination"""  
    destination_naptan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationNaptanId'), 'exclude': lambda f: f is None }})
    r"""Naptan Identifier for the prediction's destination"""  
    estimated_time_of_arrival: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedTimeOfArrival'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Estimated time of arrival"""  
    estimated_time_of_departure: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedTimeOfDeparture'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Estimated time of arrival"""  
    minutes_and_seconds_to_arrival: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minutesAndSecondsToArrival'), 'exclude': lambda f: f is None }})
    r"""Estimated time of arrival"""  
    minutes_and_seconds_to_departure: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minutesAndSecondsToDeparture'), 'exclude': lambda f: f is None }})
    r"""Estimated time of arrival"""  
    naptan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('naptanId'), 'exclude': lambda f: f is None }})
    r"""Identifier for the prediction"""  
    platform_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platformName'), 'exclude': lambda f: f is None }})
    r"""Platform name (for bus, this is the stop letter)"""  
    scheduled_time_of_arrival: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledTimeOfArrival'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Estimated time of arrival"""  
    scheduled_time_of_departure: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledTimeOfDeparture'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Estimated time of arrival"""  
    station_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stationName'), 'exclude': lambda f: f is None }})
    r"""Station name"""  
    timing: Optional[shared_tfl_api_presentation_entities_predictiontiming.TflAPIPresentationEntitiesPredictionTiming] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timing'), 'exclude': lambda f: f is None }})  
    