// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReturnASandboxCheckTransferRequest struct {
	CheckTransferID                       string                                       `pathParam:"style=simple,explode=false,name=check_transfer_id"`
	ReturnASandboxCheckTransferParameters shared.ReturnASandboxCheckTransferParameters `request:"mediaType=application/json"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON13StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON13StatusEnumFourHundredAndTwentyNine ReturnASandboxCheckTransferDefaultApplicationJSON13StatusEnum = 429
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON13StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON13StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON13StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 429:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON13StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON13StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON13TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON13TypeEnumRateLimitedError ReturnASandboxCheckTransferDefaultApplicationJSON13TypeEnum = "rate_limited_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON13TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON13TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON13TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rate_limited_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON13TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON13TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON13 struct {
	Detail     string                                                        `json:"detail"`
	RetryAfter *int64                                                        `json:"retry_after,omitempty"`
	Status     ReturnASandboxCheckTransferDefaultApplicationJSON13StatusEnum `json:"status"`
	Title      string                                                        `json:"title"`
	Type       ReturnASandboxCheckTransferDefaultApplicationJSON13TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON12StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON12StatusEnumFourHundredAndThree ReturnASandboxCheckTransferDefaultApplicationJSON12StatusEnum = 403
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON12StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON12StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON12StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON12StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON12StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON12TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON12TypeEnumPrivateFeatureError ReturnASandboxCheckTransferDefaultApplicationJSON12TypeEnum = "private_feature_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON12TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON12TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON12TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private_feature_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON12TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON12TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON12 struct {
	Detail string                                                        `json:"detail"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON12StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON12TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON11StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON11StatusEnumFourHundredAndFour ReturnASandboxCheckTransferDefaultApplicationJSON11StatusEnum = 404
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON11StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON11StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON11StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON11StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON11StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON11TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON11TypeEnumObjectNotFoundError ReturnASandboxCheckTransferDefaultApplicationJSON11TypeEnum = "object_not_found_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON11TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON11TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON11TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "object_not_found_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON11TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON11TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON11 struct {
	Detail string                                                        `json:"detail"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON11StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON11TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON10StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON10StatusEnumFourHundred ReturnASandboxCheckTransferDefaultApplicationJSON10StatusEnum = 400
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON10StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON10StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON10StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON10StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON10StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON10TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON10TypeEnumMalformedRequestError ReturnASandboxCheckTransferDefaultApplicationJSON10TypeEnum = "malformed_request_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON10TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON10TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON10TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "malformed_request_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON10TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON10TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON10 struct {
	Detail string                                                        `json:"detail"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON10StatusEnum `json:"status"`
	Title  string                                                        `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON10TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON9StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON9StatusEnumFourHundred ReturnASandboxCheckTransferDefaultApplicationJSON9StatusEnum = 400
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON9StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON9StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON9StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON9StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON9StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON9TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON9TypeEnumInvalidParametersError ReturnASandboxCheckTransferDefaultApplicationJSON9TypeEnum = "invalid_parameters_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON9TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON9TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON9TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_parameters_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON9TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON9TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON9 struct {
	Detail string `json:"detail"`
	// All errors related to parsing the request parameters.
	Errors []map[string]interface{}                                     `json:"errors"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON9StatusEnum `json:"status"`
	Title  string                                                       `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON9TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON8StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON8StatusEnumFourHundredAndNine ReturnASandboxCheckTransferDefaultApplicationJSON8StatusEnum = 409
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON8StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON8StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON8StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON8StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON8StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON8TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON8TypeEnumInvalidOperationError ReturnASandboxCheckTransferDefaultApplicationJSON8TypeEnum = "invalid_operation_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON8TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON8TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON8TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_operation_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON8TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON8TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON8 struct {
	Detail string                                                       `json:"detail"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON8StatusEnum `json:"status"`
	Title  string                                                       `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON8TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON7StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON7StatusEnumFourHundredAndOne ReturnASandboxCheckTransferDefaultApplicationJSON7StatusEnum = 401
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON7StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON7StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON7StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 401:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON7StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON7StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON7TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON7TypeEnumInvalidAPIKeyError ReturnASandboxCheckTransferDefaultApplicationJSON7TypeEnum = "invalid_api_key_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON7TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON7TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON7TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_api_key_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON7TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON7TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON7 struct {
	Detail string                                                       `json:"detail"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON7StatusEnum `json:"status"`
	Title  string                                                       `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON7TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON6StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON6StatusEnumFiveHundred ReturnASandboxCheckTransferDefaultApplicationJSON6StatusEnum = 500
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON6StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON6StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON6StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 500:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON6StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON6StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON6TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON6TypeEnumInternalServerError ReturnASandboxCheckTransferDefaultApplicationJSON6TypeEnum = "internal_server_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON6TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON6TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON6TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON6TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON6TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON6 struct {
	Detail string                                                       `json:"detail"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON6StatusEnum `json:"status"`
	Title  string                                                       `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON6TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON5StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON5StatusEnumFourHundredAndThree ReturnASandboxCheckTransferDefaultApplicationJSON5StatusEnum = 403
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON5StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON5StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON5StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON5StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON5StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON5TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON5TypeEnumInsufficientPermissionsError ReturnASandboxCheckTransferDefaultApplicationJSON5TypeEnum = "insufficient_permissions_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON5TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON5TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON5TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "insufficient_permissions_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON5TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON5TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON5 struct {
	Detail string                                                       `json:"detail"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON5StatusEnum `json:"status"`
	Title  string                                                       `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON5TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON4StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON4StatusEnumFourHundredAndTwentyTwo ReturnASandboxCheckTransferDefaultApplicationJSON4StatusEnum = 422
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON4StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON4StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON4StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 422:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON4StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON4StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON4TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON4TypeEnumIdempotencyUnprocessableError ReturnASandboxCheckTransferDefaultApplicationJSON4TypeEnum = "idempotency_unprocessable_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON4TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON4TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON4TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_unprocessable_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON4TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON4TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON4 struct {
	Detail string                                                       `json:"detail"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON4StatusEnum `json:"status"`
	Title  string                                                       `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON4TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON3StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON3StatusEnumFourHundredAndNine ReturnASandboxCheckTransferDefaultApplicationJSON3StatusEnum = 409
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON3StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON3StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON3StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON3StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON3StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON3TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON3TypeEnumIdempotencyConflictError ReturnASandboxCheckTransferDefaultApplicationJSON3TypeEnum = "idempotency_conflict_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON3TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON3TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON3TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_conflict_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON3TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON3TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON3 struct {
	Detail string                                                       `json:"detail"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON3StatusEnum `json:"status"`
	Title  string                                                       `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON3TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON2StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON2StatusEnumFourHundredAndThree ReturnASandboxCheckTransferDefaultApplicationJSON2StatusEnum = 403
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON2StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON2StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON2StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON2StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON2StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON2TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON2TypeEnumEnvironmentMismatchError ReturnASandboxCheckTransferDefaultApplicationJSON2TypeEnum = "environment_mismatch_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON2TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON2TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON2TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "environment_mismatch_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON2TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON2TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON2 struct {
	Detail string                                                       `json:"detail"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON2StatusEnum `json:"status"`
	Title  string                                                       `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON2TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferDefaultApplicationJSON1StatusEnum int64

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON1StatusEnumFourHundredAndFour ReturnASandboxCheckTransferDefaultApplicationJSON1StatusEnum = 404
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON1StatusEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON1StatusEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON1StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON1StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON1StatusEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON1TypeEnum string

const (
	ReturnASandboxCheckTransferDefaultApplicationJSON1TypeEnumAPIMethodNotFoundError ReturnASandboxCheckTransferDefaultApplicationJSON1TypeEnum = "api_method_not_found_error"
)

func (e ReturnASandboxCheckTransferDefaultApplicationJSON1TypeEnum) ToPointer() *ReturnASandboxCheckTransferDefaultApplicationJSON1TypeEnum {
	return &e
}

func (e *ReturnASandboxCheckTransferDefaultApplicationJSON1TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_method_not_found_error":
		*e = ReturnASandboxCheckTransferDefaultApplicationJSON1TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnASandboxCheckTransferDefaultApplicationJSON1TypeEnum: %v", v)
	}
}

type ReturnASandboxCheckTransferDefaultApplicationJSON1 struct {
	Detail string                                                       `json:"detail"`
	Status ReturnASandboxCheckTransferDefaultApplicationJSON1StatusEnum `json:"status"`
	Title  string                                                       `json:"title"`
	Type   ReturnASandboxCheckTransferDefaultApplicationJSON1TypeEnum   `json:"type"`
}

type ReturnASandboxCheckTransferResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Check Transfer
	CheckTransfer *shared.CheckTransfer
	// Error
	Error interface{}
}
