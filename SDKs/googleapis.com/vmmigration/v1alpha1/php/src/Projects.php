<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds a MigratingVm to a Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsAddGroupMigrationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsAddGroupMigrationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsAddGroupMigrationResponse
     */
	public function vmmigrationProjectsLocationsGroupsAddGroupMigration(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsAddGroupMigrationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsAddGroupMigrationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsAddGroupMigrationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{group}:addGroupMigration', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsAddGroupMigrationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addGroupMigrationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsAddGroupMigrationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsAddGroupMigrationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Group in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsCreateResponse
     */
	public function vmmigrationProjectsLocationsGroupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/groups', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "groupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Groups in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsListResponse
     */
	public function vmmigrationProjectsLocationsGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/groups', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a MigratingVm from a Group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsRemoveGroupMigrationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsRemoveGroupMigrationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsRemoveGroupMigrationResponse
     */
	public function vmmigrationProjectsLocationsGroupsRemoveGroupMigration(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsRemoveGroupMigrationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsRemoveGroupMigrationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsRemoveGroupMigrationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{group}:removeGroupMigration', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsRemoveGroupMigrationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "removeGroupMigrationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsRemoveGroupMigrationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsGroupsRemoveGroupMigrationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsListResponse
     */
	public function vmmigrationProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsOperationsListResponse
     */
	public function vmmigrationProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Source in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesCreateResponse
     */
	public function vmmigrationProjectsLocationsSourcesCreate(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/sources', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sourceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new DatacenterConnector in a given Source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateResponse
     */
	public function vmmigrationProjectsLocationsSourcesDatacenterConnectorsCreate(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/datacenterConnectors', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "datacenterConnectorInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DatacenterConnectors in a given Source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsListResponse
     */
	public function vmmigrationProjectsLocationsSourcesDatacenterConnectorsList(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/datacenterConnectors', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDatacenterConnectorsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDatacenterConnectorsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upgrades the appliance relate to this DatacenterConnector to the in-place updateable version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceResponse
     */
	public function vmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeAppliance(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{datacenterConnector}:upgradeAppliance', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "upgradeApplianceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List remote source's inventory of VMs. The remote source is the onprem vCenter (remote in the sense it's not in Compute Engine). The inventory describes the list of existing VMs in that source. Note that this operation lists the VMs on the remote source, as opposed to listing the MigratingVms resources in the vmmigration service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesFetchInventoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesFetchInventorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesFetchInventoryResponse
     */
	public function vmmigrationProjectsLocationsSourcesFetchInventory(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesFetchInventoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesFetchInventorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesFetchInventoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{source}:fetchInventory', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesFetchInventoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesFetchInventoryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesFetchInventoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchInventoryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchInventoryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Sources in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesListResponse
     */
	public function vmmigrationProjectsLocationsSourcesList(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/sources', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSourcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSourcesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiates a Clone of a specific migrating VM.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/cloneJobs', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cloneJobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CloneJobs of a given migrating VM.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsList(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/cloneJobs', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCloneJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCloneJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new MigratingVm in a given Source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCreateResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsCreate(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/migratingVms', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "migratingVmInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiates the cancellation of a running cutover job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancel(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiates a Cutover of a specific migrating VM. The returned LRO is completed when the cutover job resource is created and the job is initiated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/cutoverJobs', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cutoverJobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CutoverJobs of a given migrating VM.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsList(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/cutoverJobs', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCutoverJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCutoverJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks a migration as completed, deleting migration resources that are no longer being used. Only applicable after cutover is done.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigration(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{migratingVm}:finalizeMigration', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists MigratingVms in a given Source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsListResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsList(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/migratingVms', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMigratingVmsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMigratingVmsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Pauses a migration for a VM. If cycle tasks are running they will be cancelled, preserving source task data. Further replication cycles will not be triggered while the VM is paused.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsPauseMigration(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{migratingVm}:pauseMigration', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists ReplicationCycles in a given MigratingVM.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesList(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/replicationCycles', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listReplicationCyclesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListReplicationCyclesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resumes a migration for a VM. When called on a paused migration, will start the process of uploading data and creating snapshots; when called on a completed cut-over migration, will update the migration to active state and start the process of uploading data and creating snapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsResumeMigration(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{migratingVm}:resumeMigration', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts migration for a VM. Starts the process of uploading data and creating snapshots, in replication cycles scheduled by the policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationResponse
     */
	public function vmmigrationProjectsLocationsSourcesMigratingVmsStartMigration(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{migratingVm}:startMigration', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new UtilizationReport.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsCreateResponse
     */
	public function vmmigrationProjectsLocationsSourcesUtilizationReportsCreate(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/utilizationReports', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "utilizationReportInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Utilization Reports of the given Source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsListResponse
     */
	public function vmmigrationProjectsLocationsSourcesUtilizationReportsList(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/utilizationReports', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsSourcesUtilizationReportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUtilizationReportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUtilizationReportsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new TargetProject in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsCreateResponse
     */
	public function vmmigrationProjectsLocationsTargetProjectsCreate(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/targetProjects', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetProjectInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsDeleteResponse
     */
	public function vmmigrationProjectsLocationsTargetProjectsDelete(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsGetResponse
     */
	public function vmmigrationProjectsLocationsTargetProjectsGet(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetProject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetProject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists TargetProjects in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsListResponse
     */
	public function vmmigrationProjectsLocationsTargetProjectsList(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/targetProjects', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTargetProjectsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTargetProjectsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsPatchResponse
     */
	public function vmmigrationProjectsLocationsTargetProjectsPatch(
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetProjectInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VmmigrationProjectsLocationsTargetProjectsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}