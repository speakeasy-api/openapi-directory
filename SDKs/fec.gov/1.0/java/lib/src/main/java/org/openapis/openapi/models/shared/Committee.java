/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class Committee {
    /**
     * Affiliated committee or connected organization
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("affiliated_committee_name")
    public String affiliatedCommitteeName;

    public Committee withAffiliatedCommitteeName(String affiliatedCommitteeName) {
        this.affiliatedCommitteeName = affiliatedCommitteeName;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * First character indicates office - [P]residential, [H]ouse, [S]enate].
     * Second character is the last digit of the two-year period the ID was created.
     * Third and fourth is the candidate state. Presidential IDs don't have state.
     * Fifth and sixth is the district when the candidate first ran. This does not change if the
     * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
     * The rest is sequence.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_ids")
    public String[] candidateIds;

    public Committee withCandidateIds(String[] candidateIds) {
        this.candidateIds = candidateIds;
        return this;
    }
    
    /**
     * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
     * 
     */
    @JsonProperty("committee_id")
    public String committeeId;

    public Committee withCommitteeId(String committeeId) {
        this.committeeId = committeeId;
        return this;
    }
    
    /**
     * The one-letter type code of the organization:
     *         - C communication cost
     *         - D delegate
     *         - E electioneering communication
     *         - H House
     *         - I independent expenditure filer (not a committee)
     *         - N PAC - nonqualified
     *         - O independent expenditure-only (super PACs)
     *         - P presidential
     *         - Q PAC - qualified
     *         - S Senate
     *         - U single candidate independent expenditure
     *         - V PAC with non-contribution account, nonqualified
     *         - W PAC with non-contribution account, qualified
     *         - X party, nonqualified
     *         - Y party, qualified
     *         - Z national party non-federal account
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_type")
    public String committeeType;

    public Committee withCommitteeType(String committeeType) {
        this.committeeType = committeeType;
        return this;
    }
    
    /**
     * The one-letter type code of the organization:
     *         - C communication cost
     *         - D delegate
     *         - E electioneering communication
     *         - H House
     *         - I independent expenditure filer (not a committee)
     *         - N PAC - nonqualified
     *         - O independent expenditure-only (super PACs)
     *         - P presidential
     *         - Q PAC - qualified
     *         - S Senate
     *         - U single candidate independent expenditure
     *         - V PAC with non-contribution account, nonqualified
     *         - W PAC with non-contribution account, qualified
     *         - X party, nonqualified
     *         - Y party, qualified
     *         - Z national party non-federal account
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_type_full")
    public String committeeTypeFull;

    public Committee withCommitteeTypeFull(String committeeTypeFull) {
        this.committeeTypeFull = committeeTypeFull;
        return this;
    }
    
    /**
     * A two year election cycle that the committee was active- (after original registration
     * date but before expiration date in Form 1s) The cycle begins with
     * an odd year and is named for its ending, even year.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cycles")
    public Integer[] cycles;

    public Committee withCycles(Integer[] cycles) {
        this.cycles = cycles;
        return this;
    }
    
    /**
     * The one-letter designation code of the organization:
     *          - A authorized by a candidate
     *          - J joint fundraising committee
     *          - P principal campaign committee of a candidate
     *          - U unauthorized
     *          - B lobbyist/registrant PAC
     *          - D leadership PAC
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("designation")
    public String designation;

    public Committee withDesignation(String designation) {
        this.designation = designation;
        return this;
    }
    
    /**
     * The one-letter designation code of the organization:
     *          - A authorized by a candidate
     *          - J joint fundraising committee
     *          - P principal campaign committee of a candidate
     *          - U unauthorized
     *          - B lobbyist/registrant PAC
     *          - D leadership PAC
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("designation_full")
    public String designationFull;

    public Committee withDesignationFull(String designationFull) {
        this.designationFull = designationFull;
        return this;
    }
    
    /**
     * The one-letter 
     *     code of the filing frequency:
     *          - A Administratively terminated
     *          - D Debt
     *          - M Monthly filer
     *          - Q Quarterly filer
     *          - T Terminated
     *          - W Waived
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filing_frequency")
    public String filingFrequency;

    public Committee withFilingFrequency(String filingFrequency) {
        this.filingFrequency = filingFrequency;
        return this;
    }
    
    /**
     * The day the FEC received the committee's first Form 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("first_f1_date")
    public LocalDate firstF1Date;

    public Committee withFirstF1Date(LocalDate firstF1Date) {
        this.firstF1Date = firstF1Date;
        return this;
    }
    
    /**
     * The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("first_file_date")
    public LocalDate firstFileDate;

    public Committee withFirstFileDate(LocalDate firstFileDate) {
        this.firstFileDate = firstFileDate;
        return this;
    }
    
    /**
     * The day the FEC received the committee's most recent Form 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("last_f1_date")
    public LocalDate lastF1Date;

    public Committee withLastF1Date(LocalDate lastF1Date) {
        this.lastF1Date = lastF1Date;
        return this;
    }
    
    /**
     * The day the FEC received the committee's most recent filing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("last_file_date")
    public LocalDate lastFileDate;

    public Committee withLastFileDate(LocalDate lastFileDate) {
        this.lastFileDate = lastFileDate;
        return this;
    }
    
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Committee withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The one-letter code for the kind for organization:
     *         - C corporation
     *         - L labor organization
     *         - M membership organization
     *         - T trade association
     *         - V cooperative
     *         - W corporation without capital stock
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_type")
    public String organizationType;

    public Committee withOrganizationType(String organizationType) {
        this.organizationType = organizationType;
        return this;
    }
    
    /**
     * The one-letter code for the kind for organization:
     *         - C corporation
     *         - L labor organization
     *         - M membership organization
     *         - T trade association
     *         - V cooperative
     *         - W corporation without capital stock
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_type_full")
    public String organizationTypeFull;

    public Committee withOrganizationTypeFull(String organizationTypeFull) {
        this.organizationTypeFull = organizationTypeFull;
        return this;
    }
    
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("party")
    public String party;

    public Committee withParty(String party) {
        this.party = party;
        return this;
    }
    
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("party_full")
    public String partyFull;

    public Committee withPartyFull(String partyFull) {
        this.partyFull = partyFull;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sponsor_candidate_ids")
    public String[] sponsorCandidateIds;

    public Committee withSponsorCandidateIds(String[] sponsorCandidateIds) {
        this.sponsorCandidateIds = sponsorCandidateIds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sponsor_candidate_list")
    public CommitteeSponsorCandidateList[] sponsorCandidateList;

    public Committee withSponsorCandidateList(CommitteeSponsorCandidateList[] sponsorCandidateList) {
        this.sponsorCandidateList = sponsorCandidateList;
        return this;
    }
    
    /**
     * State of the committee's address as filed on the Form 1
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public Committee withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("treasurer_name")
    public String treasurerName;

    public Committee withTreasurerName(String treasurerName) {
        this.treasurerName = treasurerName;
        return this;
    }
    
    public Committee(@JsonProperty("committee_id") String committeeId) {
        this.committeeId = committeeId;
  }
}
