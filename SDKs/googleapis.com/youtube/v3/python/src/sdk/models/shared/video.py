"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import videoagegating as shared_videoagegating
from ..shared import videocontentdetails as shared_videocontentdetails
from ..shared import videofiledetails as shared_videofiledetails
from ..shared import videolivestreamingdetails as shared_videolivestreamingdetails
from ..shared import videolocalization as shared_videolocalization
from ..shared import videomonetizationdetails as shared_videomonetizationdetails
from ..shared import videoplayer as shared_videoplayer
from ..shared import videoprocessingdetails as shared_videoprocessingdetails
from ..shared import videorecordingdetails as shared_videorecordingdetails
from ..shared import videosnippet as shared_videosnippet
from ..shared import videostatistics as shared_videostatistics
from ..shared import videostatus as shared_videostatus
from ..shared import videosuggestions as shared_videosuggestions
from ..shared import videotopicdetails as shared_videotopicdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Video:
    r"""A *video* resource represents a YouTube video."""
    
    age_gating: Optional[shared_videoagegating.VideoAgeGating] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageGating'), 'exclude': lambda f: f is None }})  
    content_details: Optional[shared_videocontentdetails.VideoContentDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentDetails'), 'exclude': lambda f: f is None }})
    r"""Details about the content of a YouTube Video."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""Etag of this resource."""  
    file_details: Optional[shared_videofiledetails.VideoFileDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileDetails'), 'exclude': lambda f: f is None }})
    r"""Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID that YouTube uses to uniquely identify the video."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"youtube#video\\"."""  
    live_streaming_details: Optional[shared_videolivestreamingdetails.VideoLiveStreamingDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liveStreamingDetails'), 'exclude': lambda f: f is None }})
    r"""Details about the live streaming metadata."""  
    localizations: Optional[dict[str, shared_videolocalization.VideoLocalization]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localizations'), 'exclude': lambda f: f is None }})
    r"""The localizations object contains localized versions of the basic details about the video, such as its title and description."""  
    monetization_details: Optional[shared_videomonetizationdetails.VideoMonetizationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monetizationDetails'), 'exclude': lambda f: f is None }})
    r"""Details about monetization of a YouTube Video."""  
    player: Optional[shared_videoplayer.VideoPlayer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('player'), 'exclude': lambda f: f is None }})
    r"""Player to be used for a video playback."""  
    processing_details: Optional[shared_videoprocessingdetails.VideoProcessingDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processingDetails'), 'exclude': lambda f: f is None }})
    r"""Describes processing status and progress and availability of some other Video resource parts."""  
    project_details: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectDetails'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED. b/157517979: This part was never populated after it was added. However, it sees non-zero traffic because there is generated client code in the wild that refers to it [1]. We keep this field and do NOT remove it because otherwise V3 would return an error when this part gets requested [2]. [1] https://developers.google.com/resources/api-libraries/documentation/youtube/v3/csharp/latest/classGoogle_1_1Apis_1_1YouTube_1_1v3_1_1Data_1_1VideoProjectDetails.html [2] http://google3/video/youtube/src/python/servers/data_api/common.py?l=1565-1569&rcl=344141677"""  
    recording_details: Optional[shared_videorecordingdetails.VideoRecordingDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordingDetails'), 'exclude': lambda f: f is None }})
    r"""Recording information associated with the video."""  
    snippet: Optional[shared_videosnippet.VideoSnippet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snippet'), 'exclude': lambda f: f is None }})
    r"""Basic details about a video, including title, description, uploader, thumbnails and category."""  
    statistics: Optional[shared_videostatistics.VideoStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statistics'), 'exclude': lambda f: f is None }})
    r"""Statistics about the video, such as the number of times the video was viewed or liked."""  
    status: Optional[shared_videostatus.VideoStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Basic details about a video category, such as its localized title. Next Id: 18"""  
    suggestions: Optional[shared_videosuggestions.VideoSuggestions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestions'), 'exclude': lambda f: f is None }})
    r"""Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions."""  
    topic_details: Optional[shared_videotopicdetails.VideoTopicDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topicDetails'), 'exclude': lambda f: f is None }})
    r"""Freebase topic information related to the video."""  
    