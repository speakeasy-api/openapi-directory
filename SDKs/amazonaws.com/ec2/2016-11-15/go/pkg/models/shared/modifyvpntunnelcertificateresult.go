// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum - The current state of the gateway association.
type ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum string

const (
	ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnumAssociated     ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum = "associated"
	ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnumNotAssociated  ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum = "not-associated"
	ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnumAssociating    ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum = "associating"
	ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnumDisassociating ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum = "disassociating"
)

func (e ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum) ToPointer() *ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum {
	return &e
}

func (e *ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "associated":
		fallthrough
	case "not-associated":
		fallthrough
	case "associating":
		fallthrough
	case "disassociating":
		*e = ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum: %v", v)
	}
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnum - Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
type ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnum string

const (
	ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnumIpv4 ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnum = "ipv4"
	ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnumIpv6 ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnum = "ipv6"
)

func (e ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnum) ToPointer() *ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnum {
	return &e
}

func (e *ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnum: %v", v)
	}
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions - The internet key exchange (IKE) version permitted for the VPN tunnel.
type ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions struct {
	Value *string
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions - Options for sending VPN tunnel logs to CloudWatch.
type ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions struct {
	LogEnabled      *bool
	LogGroupArn     *string
	LogOutputFormat *string
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions - Options for logging VPN tunnel activity.
type ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions struct {
	CloudWatchLogOptions *ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers - The Diffie-Hellmann group number for phase 1 IKE negotiations.
type ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers struct {
	Value *int64
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms - The encryption algorithm for phase 1 IKE negotiations.
type ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms struct {
	Value *string
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms - The integrity algorithm for phase 1 IKE negotiations.
type ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms struct {
	Value *string
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers - The Diffie-Hellmann group number for phase 2 IKE negotiations.
type ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers struct {
	Value *int64
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms - The encryption algorithm for phase 2 IKE negotiations.
type ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms struct {
	Value *string
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms - The integrity algorithm for phase 2 IKE negotiations.
type ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms struct {
	Value *string
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions - The VPN tunnel options.
type ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions struct {
	DpdTimeoutAction             *string
	DpdTimeoutSeconds            *int64
	EnableTunnelLifecycleControl *bool
	IkeVersions                  []ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsIkeVersions
	LogOptions                   *ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsLogOptions
	OutsideIPAddress             *string
	Phase1DHGroupNumbers         []ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers
	Phase1EncryptionAlgorithms   []ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms
	Phase1IntegrityAlgorithms    []ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms
	Phase1LifetimeSeconds        *int64
	Phase2DHGroupNumbers         []ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers
	Phase2EncryptionAlgorithms   []ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms
	Phase2IntegrityAlgorithms    []ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms
	Phase2LifetimeSeconds        *int64
	PreSharedKey                 *string
	RekeyFuzzPercentage          *int64
	RekeyMarginTimeSeconds       *int64
	ReplayWindowSize             *int64
	StartupAction                *string
	TunnelInsideCidr             *string
	TunnelInsideIpv6Cidr         *string
}

// ModifyVpnTunnelCertificateResultVpnConnectionOptions - The VPN connection options.
type ModifyVpnTunnelCertificateResultVpnConnectionOptions struct {
	EnableAcceleration                  *bool
	LocalIpv4NetworkCidr                *string
	LocalIpv6NetworkCidr                *string
	OutsideIPAddressType                *string
	RemoteIpv4NetworkCidr               *string
	RemoteIpv6NetworkCidr               *string
	StaticRoutesOnly                    *bool
	TransportTransitGatewayAttachmentID *string
	TunnelInsideIPVersion               *ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelInsideIPVersionEnum
	TunnelOptions                       []ModifyVpnTunnelCertificateResultVpnConnectionOptionsTunnelOptions
}

// ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum - Indicates how the routes were provided.
type ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum string

const (
	ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnumStatic ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum = "Static"
)

func (e ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum) ToPointer() *ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum {
	return &e
}

func (e *ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Static":
		*e = ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum: %v", v)
	}
}

// ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum - The current state of the static route.
type ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum string

const (
	ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnumPending   ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum = "pending"
	ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnumAvailable ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum = "available"
	ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnumDeleting  ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum = "deleting"
	ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnumDeleted   ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum = "deleted"
)

func (e ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum) ToPointer() *ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum {
	return &e
}

func (e *ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "available":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		*e = ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum: %v", v)
	}
}

// ModifyVpnTunnelCertificateResultVpnConnectionRoutes - Describes a static route for a VPN connection.
type ModifyVpnTunnelCertificateResultVpnConnectionRoutes struct {
	DestinationCidrBlock *string
	Source               *ModifyVpnTunnelCertificateResultVpnConnectionRoutesSourceEnum
	State                *ModifyVpnTunnelCertificateResultVpnConnectionRoutesStateEnum
}

// ModifyVpnTunnelCertificateResultVpnConnectionStateEnum - The current state of the VPN connection.
type ModifyVpnTunnelCertificateResultVpnConnectionStateEnum string

const (
	ModifyVpnTunnelCertificateResultVpnConnectionStateEnumPending   ModifyVpnTunnelCertificateResultVpnConnectionStateEnum = "pending"
	ModifyVpnTunnelCertificateResultVpnConnectionStateEnumAvailable ModifyVpnTunnelCertificateResultVpnConnectionStateEnum = "available"
	ModifyVpnTunnelCertificateResultVpnConnectionStateEnumDeleting  ModifyVpnTunnelCertificateResultVpnConnectionStateEnum = "deleting"
	ModifyVpnTunnelCertificateResultVpnConnectionStateEnumDeleted   ModifyVpnTunnelCertificateResultVpnConnectionStateEnum = "deleted"
)

func (e ModifyVpnTunnelCertificateResultVpnConnectionStateEnum) ToPointer() *ModifyVpnTunnelCertificateResultVpnConnectionStateEnum {
	return &e
}

func (e *ModifyVpnTunnelCertificateResultVpnConnectionStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "available":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		*e = ModifyVpnTunnelCertificateResultVpnConnectionStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyVpnTunnelCertificateResultVpnConnectionStateEnum: %v", v)
	}
}

// ModifyVpnTunnelCertificateResultVpnConnectionTags - Describes a tag.
type ModifyVpnTunnelCertificateResultVpnConnectionTags struct {
	Key   *string
	Value *string
}

// ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum - The type of VPN connection.
type ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum string

const (
	ModifyVpnTunnelCertificateResultVpnConnectionTypeEnumIpsec1 ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum = "ipsec.1"
)

func (e ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum) ToPointer() *ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum {
	return &e
}

func (e *ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipsec.1":
		*e = ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum: %v", v)
	}
}

// ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum - The status of the VPN tunnel.
type ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum string

const (
	ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnumUp   ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum = "UP"
	ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnumDown ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum = "DOWN"
)

func (e ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum) ToPointer() *ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum {
	return &e
}

func (e *ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UP":
		fallthrough
	case "DOWN":
		*e = ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum: %v", v)
	}
}

// ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry - Describes telemetry for a VPN tunnel.
type ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry struct {
	AcceptedRouteCount *int64
	CertificateArn     *string
	LastStatusChange   *time.Time
	OutsideIPAddress   *string
	Status             *ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetryStatusEnum
	StatusMessage      *string
}

// ModifyVpnTunnelCertificateResultVpnConnection - Information about the VPN connection.
type ModifyVpnTunnelCertificateResultVpnConnection struct {
	Category                     *string
	CoreNetworkArn               *string
	CoreNetworkAttachmentArn     *string
	CustomerGatewayConfiguration *string
	CustomerGatewayID            *string
	GatewayAssociationState      *ModifyVpnTunnelCertificateResultVpnConnectionGatewayAssociationStateEnum
	Options                      *ModifyVpnTunnelCertificateResultVpnConnectionOptions
	Routes                       []ModifyVpnTunnelCertificateResultVpnConnectionRoutes
	State                        *ModifyVpnTunnelCertificateResultVpnConnectionStateEnum
	Tags                         []ModifyVpnTunnelCertificateResultVpnConnectionTags
	TransitGatewayID             *string
	Type                         *ModifyVpnTunnelCertificateResultVpnConnectionTypeEnum
	VgwTelemetry                 []ModifyVpnTunnelCertificateResultVpnConnectionVgwTelemetry
	VpnConnectionID              *string
	VpnGatewayID                 *string
}

// ModifyVpnTunnelCertificateResult - Success
type ModifyVpnTunnelCertificateResult struct {
	VpnConnection *ModifyVpnTunnelCertificateResultVpnConnection
}
