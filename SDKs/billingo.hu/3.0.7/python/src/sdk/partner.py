"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Partner:
    r"""Partner object represents your client."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_partner(self, request: shared.PartnerUpsert) -> operations.CreatePartnerResponse:
        r"""Create a partner
        Create a new partner. Returns a partner object if the create is succeded.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/partners'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePartnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Partner])
                res.partner = out
        elif http_res.status_code in [400, 401, 403]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientErrorResponse])
                res.client_error_response = out
        elif http_res.status_code == 422:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorResponse])
                res.validation_error_response = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServerErrorResponse])
                res.server_error_response = out

        return res

    def delete_partner(self, request: operations.DeletePartnerRequest) -> operations.DeletePartnerResponse:
        r"""Delete a partner
        Delete an existing partner.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePartnerRequest, base_url, '/partners/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePartnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            res.headers = http_res.headers
            
        elif http_res.status_code in [400, 401, 403, 404]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientErrorResponse])
                res.client_error_response = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServerErrorResponse])
                res.server_error_response = out

        return res

    def get_partner(self, request: operations.GetPartnerRequest) -> operations.GetPartnerResponse:
        r"""Retrieve a partner
        Retrieves the details of an existing partner.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPartnerRequest, base_url, '/partners/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPartnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Partner])
                res.partner = out
        elif http_res.status_code in [400, 401, 404]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientErrorResponse])
                res.client_error_response = out
        elif http_res.status_code == 422:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorResponse])
                res.validation_error_response = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServerErrorResponse])
                res.server_error_response = out

        return res

    def list_partner(self, request: operations.ListPartnerRequest) -> operations.ListPartnerResponse:
        r"""List all partners
        Returns a list of your partners. The partners are returned sorted by creation date, with the most recent partners appearing first.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/partners'
        
        query_params = utils.get_query_params(operations.ListPartnerRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPartnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PartnerList])
                res.partner_list = out
        elif http_res.status_code in [400, 401]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientErrorResponse])
                res.client_error_response = out
        elif http_res.status_code == 422:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorResponse])
                res.validation_error_response = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServerErrorResponse])
                res.server_error_response = out

        return res

    def update_partner(self, request: operations.UpdatePartnerRequest) -> operations.UpdatePartnerResponse:
        r"""Update a partner
        Update an existing partner. Returns a partner object if the update is succeded.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePartnerRequest, base_url, '/partners/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "partner_upsert", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePartnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Partner])
                res.partner = out
        elif http_res.status_code in [400, 401, 403, 404]:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientErrorResponse])
                res.client_error_response = out
        elif http_res.status_code == 422:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorResponse])
                res.validation_error_response = out
        elif http_res.status_code == 500:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServerErrorResponse])
                res.server_error_response = out

        return res

    