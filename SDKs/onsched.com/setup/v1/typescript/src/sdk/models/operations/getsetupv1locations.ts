/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetSetupV1LocationsRequest extends SpeakeasyBase {
  /**
   * Filter locations on deleted status
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=deleted",
  })
  deleted?: boolean;

  /**
   * friendlyId of location
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=friendlyId",
  })
  friendlyId?: string;

  /**
   * Page limit default 20, max 100
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Location name(full or partial) to filter on
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string;

  /**
   * Starting row of page, default 0
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * Find locations that offer this service
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=serviceId",
  })
  serviceId?: string;
}

export class GetSetupV1LocationsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  locationListViewModel?: shared.LocationListViewModel;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
