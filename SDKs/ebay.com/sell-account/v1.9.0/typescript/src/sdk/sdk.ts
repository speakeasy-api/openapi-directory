/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AdvertisingEligibility } from "./advertisingeligibility";
import { CustomPolicy } from "./custompolicy";
import { FulfillmentPolicy } from "./fulfillmentpolicy";
import { Kyc } from "./kyc";
import { Onboarding } from "./onboarding";
import { PaymentPolicy } from "./paymentpolicy";
import { PaymentsProgram } from "./paymentsprogram";
import { Privilege } from "./privilege";
import { Program } from "./program";
import { RateTable } from "./ratetable";
import { ReturnPolicy } from "./returnpolicy";
import { SalesTax } from "./salestax";
import { Subscription } from "./subscription";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * Production
   */
  "https://api.ebay.com{basePath}",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href="/api-docs/sell/account/overview.html#requirements">Account API requirements and restrictions</a>.
 */
export class SDK {
  public advertisingEligibility: AdvertisingEligibility;
  public customPolicy: CustomPolicy;
  public fulfillmentPolicy: FulfillmentPolicy;
  public kyc: Kyc;
  public onboarding: Onboarding;
  public paymentPolicy: PaymentPolicy;
  public paymentsProgram: PaymentsProgram;
  public privilege: Privilege;
  public program: Program;
  public rateTable: RateTable;
  public returnPolicy: ReturnPolicy;
  public salesTax: SalesTax;
  public subscription: Subscription;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.advertisingEligibility = new AdvertisingEligibility(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customPolicy = new CustomPolicy(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.fulfillmentPolicy = new FulfillmentPolicy(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.kyc = new Kyc(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.onboarding = new Onboarding(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.paymentPolicy = new PaymentPolicy(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.paymentsProgram = new PaymentsProgram(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.privilege = new Privilege(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.program = new Program(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.rateTable = new RateTable(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.returnPolicy = new ReturnPolicy(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.salesTax = new SalesTax(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.subscription = new Subscription(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
