"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CertificateSummaryV2SlotSizeEnum(str, Enum):
    r"""Number of subject alternative names (SAN) to be included in certificate (if UCC):
      * `FIVE` - Five slot UCC request
      * `TEN` - Ten slot UCC request
      * `FIFTEEN` - Fifteen slot UCC request
      * `TWENTY` - Twenty slot UCC request
      * `THIRTY` - Thirty slot UCC request
      * `FOURTY` - Fourty slot UCC request
      * `FIFTY` - Fifty slot UCC request
      * `ONE_HUNDRED` - One hundred slot UCC request
    """
    FIVE = 'FIVE'
    TEN = 'TEN'
    FIFTEEN = 'FIFTEEN'
    TWENTY = 'TWENTY'
    THIRTY = 'THIRTY'
    FOURTY = 'FOURTY'
    FIFTY = 'FIFTY'
    ONE_HUNDRED = 'ONE_HUNDRED'

class CertificateSummaryV2StatusEnum(str, Enum):
    r"""Certificate status (if issued or revoked):
      * `CANCELED` - Certificate request was canceled by customer
      * `DENIED` - Certificate request was denied by customer
      * `EXPIRED` - Issued certificate has exceeded the valid end date
      * `ISSUED` - Certificate has been issued and is within validity period
      * `PENDING_ISSUANCE` - Certificate request has completed domain verification and is in the process of being issued
      * `PENDING_REKEY` - Previously issued certificate was rekeyed by customer and is in the process of being reissued
      * `PENDING_REVOCATION` - Previously issued certificate is in the process of being revoked
      * `REVOKED` - Issued certificate has been revoked
      * `UNUSED` - Certificate in an error state
    """
    ISSUED = 'ISSUED'
    CANCELED = 'CANCELED'
    DENIED = 'DENIED'
    EXPIRED = 'EXPIRED'
    PENDING_ISSUANCE = 'PENDING_ISSUANCE'
    PENDING_REKEY = 'PENDING_REKEY'
    PENDING_REVOCATION = 'PENDING_REVOCATION'
    REVOKED = 'REVOKED'
    UNUSED = 'UNUSED'

class CertificateSummaryV2TypeEnum(str, Enum):
    r"""Certificate type:
      * `DV_SSL` - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only
      * `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using domain name only
      * `EV_SSL` - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors
      * `OV_CODE_SIGNING` - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information
      * `OV_DRIVER_SIGNING` - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information
      * `OV_SSL` - SSL certificate validated using organization information and domain name
      * `OV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using organization information and domain name
      * `UCC_DV_SSL` - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only
      * `UCC_EV_SSL` - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors
      * `UCC_OV_SSL` - Multi domain SSL certificate validated using organization information and domain name
    """
    DV_SSL = 'DV_SSL'
    DV_WILDCARD_SSL = 'DV_WILDCARD_SSL'
    EV_SSL = 'EV_SSL'
    OV_CODE_SIGNING = 'OV_CODE_SIGNING'
    OV_DRIVER_SIGNING = 'OV_DRIVER_SIGNING'
    OV_SSL = 'OV_SSL'
    OV_WILDCARD_SSL = 'OV_WILDCARD_SSL'
    UCC_DV_SSL = 'UCC_DV_SSL'
    UCC_EV_SSL = 'UCC_EV_SSL'
    UCC_OV_SSL = 'UCC_OV_SSL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CertificateSummaryV2:
    
    certificate_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificateId') }})
    r"""The unique identifier of the certificate request."""  
    common_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commonName') }})
    r"""Common name for the certificate request."""  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt') }})
    r"""Date that the certificate request was received."""  
    period: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period') }})
    r"""Validity period of order. Specified in years."""  
    status: CertificateSummaryV2StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Certificate status (if issued or revoked):
      * `CANCELED` - Certificate request was canceled by customer
      * `DENIED` - Certificate request was denied by customer
      * `EXPIRED` - Issued certificate has exceeded the valid end date
      * `ISSUED` - Certificate has been issued and is within validity period
      * `PENDING_ISSUANCE` - Certificate request has completed domain verification and is in the process of being issued
      * `PENDING_REKEY` - Previously issued certificate was rekeyed by customer and is in the process of being reissued
      * `PENDING_REVOCATION` - Previously issued certificate is in the process of being revoked
      * `REVOKED` - Issued certificate has been revoked
      * `UNUSED` - Certificate in an error state
    """  
    type: CertificateSummaryV2TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Certificate type:
      * `DV_SSL` - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only
      * `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using domain name only
      * `EV_SSL` - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors
      * `OV_CODE_SIGNING` - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information
      * `OV_DRIVER_SIGNING` - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information
      * `OV_SSL` - SSL certificate validated using organization information and domain name
      * `OV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using organization information and domain name
      * `UCC_DV_SSL` - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only
      * `UCC_EV_SSL` - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors
      * `UCC_OV_SSL` - Multi domain SSL certificate validated using organization information and domain name
    """  
    completed_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completedAt'), 'exclude': lambda f: f is None }})
    r"""The date the certificate request completed processing (if issued or revoked)."""  
    renewal_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewalAvailable'), 'exclude': lambda f: f is None }})
    r"""Only returned when a renewal is available."""  
    revoked_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revokedAt'), 'exclude': lambda f: f is None }})
    r"""The revocation date of certificate (if revoked)."""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serialNumber'), 'exclude': lambda f: f is None }})
    r"""Serial number of certificate (if issued or revoked)."""  
    slot_size: Optional[CertificateSummaryV2SlotSizeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotSize'), 'exclude': lambda f: f is None }})
    r"""Number of subject alternative names (SAN) to be included in certificate (if UCC):
      * `FIVE` - Five slot UCC request
      * `TEN` - Ten slot UCC request
      * `FIFTEEN` - Fifteen slot UCC request
      * `TWENTY` - Twenty slot UCC request
      * `THIRTY` - Thirty slot UCC request
      * `FOURTY` - Fourty slot UCC request
      * `FIFTY` - Fifty slot UCC request
      * `ONE_HUNDRED` - One hundred slot UCC request
    """  
    subject_alternative_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subjectAlternativeNames'), 'exclude': lambda f: f is None }})
    r"""Subject Alternative names (if UCC). Collection of subjectAlternativeNames to be included in certificate."""  
    valid_end_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validEndAt'), 'exclude': lambda f: f is None }})
    r"""The end date of the certificate's validity (if issued or revoked)."""  
    valid_start_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validStartAt'), 'exclude': lambda f: f is None }})
    r"""The start date of the certificate's validity (if issued or revoked)."""  
    