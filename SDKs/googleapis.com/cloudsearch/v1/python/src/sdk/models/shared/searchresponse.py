"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import errorinfo as shared_errorinfo
from ..shared import facetresult as shared_facetresult
from ..shared import queryinterpretation as shared_queryinterpretation
from ..shared import responsedebuginfo as shared_responsedebuginfo
from ..shared import resultcounts as shared_resultcounts
from ..shared import searchresult as shared_searchresult
from ..shared import spellresult as shared_spellresult
from ..shared import structuredresult as shared_structuredresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchResponse:
    r"""The search API response."""
    
    debug_info: Optional[shared_responsedebuginfo.ResponseDebugInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debugInfo'), 'exclude': lambda f: f is None }})
    r"""Debugging information about the response."""  
    error_info: Optional[shared_errorinfo.ErrorInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorInfo'), 'exclude': lambda f: f is None }})
    r"""Error information about the response."""  
    facet_results: Optional[list[shared_facetresult.FacetResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('facetResults'), 'exclude': lambda f: f is None }})
    r"""Repeated facet results."""  
    has_more_results: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasMoreResults'), 'exclude': lambda f: f is None }})
    r"""Whether there are more search results matching the query."""  
    query_interpretation: Optional[shared_queryinterpretation.QueryInterpretation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryInterpretation'), 'exclude': lambda f: f is None }})  
    result_count_estimate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultCountEstimate'), 'exclude': lambda f: f is None }})
    r"""The estimated result count for this query."""  
    result_count_exact: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultCountExact'), 'exclude': lambda f: f is None }})
    r"""The exact result count for this query."""  
    result_counts: Optional[shared_resultcounts.ResultCounts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultCounts'), 'exclude': lambda f: f is None }})
    r"""Result count information"""  
    results: Optional[list[shared_searchresult.SearchResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})
    r"""Results from a search query."""  
    spell_results: Optional[list[shared_spellresult.SpellResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spellResults'), 'exclude': lambda f: f is None }})
    r"""Suggested spelling for the query."""  
    structured_results: Optional[list[shared_structuredresult.StructuredResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('structuredResults'), 'exclude': lambda f: f is None }})
    r"""Structured results for the user query. These results are not counted against the page_size."""  
    