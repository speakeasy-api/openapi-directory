// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetPaymentsForPayoutV4PathParams struct {
	// The id (UUID) of the payout.
	PayoutID string `pathParam:"style=simple,explode=false,name=payoutId"`
}

// GetPaymentsForPayoutV4StatusEnum - Payment Status
type GetPaymentsForPayoutV4StatusEnum string

const (
	GetPaymentsForPayoutV4StatusEnumAccepted             GetPaymentsForPayoutV4StatusEnum = "ACCEPTED"
	GetPaymentsForPayoutV4StatusEnumAwaitingFunds        GetPaymentsForPayoutV4StatusEnum = "AWAITING_FUNDS"
	GetPaymentsForPayoutV4StatusEnumFunded               GetPaymentsForPayoutV4StatusEnum = "FUNDED"
	GetPaymentsForPayoutV4StatusEnumUnfunded             GetPaymentsForPayoutV4StatusEnum = "UNFUNDED"
	GetPaymentsForPayoutV4StatusEnumBankPaymentRequested GetPaymentsForPayoutV4StatusEnum = "BANK_PAYMENT_REQUESTED"
	GetPaymentsForPayoutV4StatusEnumRejected             GetPaymentsForPayoutV4StatusEnum = "REJECTED"
	GetPaymentsForPayoutV4StatusEnumAcceptedByRails      GetPaymentsForPayoutV4StatusEnum = "ACCEPTED_BY_RAILS"
	GetPaymentsForPayoutV4StatusEnumConfirmed            GetPaymentsForPayoutV4StatusEnum = "CONFIRMED"
	GetPaymentsForPayoutV4StatusEnumFailed               GetPaymentsForPayoutV4StatusEnum = "FAILED"
	GetPaymentsForPayoutV4StatusEnumReturned             GetPaymentsForPayoutV4StatusEnum = "RETURNED"
	GetPaymentsForPayoutV4StatusEnumWithdrawn            GetPaymentsForPayoutV4StatusEnum = "WITHDRAWN"
)

func (e *GetPaymentsForPayoutV4StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACCEPTED":
		fallthrough
	case "AWAITING_FUNDS":
		fallthrough
	case "FUNDED":
		fallthrough
	case "UNFUNDED":
		fallthrough
	case "BANK_PAYMENT_REQUESTED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "ACCEPTED_BY_RAILS":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "FAILED":
		fallthrough
	case "RETURNED":
		fallthrough
	case "WITHDRAWN":
		*e = GetPaymentsForPayoutV4StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentsForPayoutV4StatusEnum: %s", s)
	}
}

// GetPaymentsForPayoutV4TransmissionTypeEnum - Transmission Type
// * ACH
// * SAME_DAY_ACH
// * WIRE
// * GACHO
type GetPaymentsForPayoutV4TransmissionTypeEnum string

const (
	GetPaymentsForPayoutV4TransmissionTypeEnumAch        GetPaymentsForPayoutV4TransmissionTypeEnum = "ACH"
	GetPaymentsForPayoutV4TransmissionTypeEnumSameDayAch GetPaymentsForPayoutV4TransmissionTypeEnum = "SAME_DAY_ACH"
	GetPaymentsForPayoutV4TransmissionTypeEnumWire       GetPaymentsForPayoutV4TransmissionTypeEnum = "WIRE"
	GetPaymentsForPayoutV4TransmissionTypeEnumLocal      GetPaymentsForPayoutV4TransmissionTypeEnum = "LOCAL"
	GetPaymentsForPayoutV4TransmissionTypeEnumGacho      GetPaymentsForPayoutV4TransmissionTypeEnum = "GACHO"
)

func (e *GetPaymentsForPayoutV4TransmissionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACH":
		fallthrough
	case "SAME_DAY_ACH":
		fallthrough
	case "WIRE":
		fallthrough
	case "LOCAL":
		fallthrough
	case "GACHO":
		*e = GetPaymentsForPayoutV4TransmissionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPaymentsForPayoutV4TransmissionTypeEnum: %s", s)
	}
}

type GetPaymentsForPayoutV4QueryParams struct {
	// Page number. Default is 1.
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results to return in a page
	PageSize *int `queryParam:"style=form,explode=true,name=pageSize"`
	// The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom
	PaymentAmountFrom *int `queryParam:"style=form,explode=true,name=paymentAmountFrom"`
	// The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo
	PaymentAmountTo *int `queryParam:"style=form,explode=true,name=paymentAmountTo"`
	// The remote id of the payees.
	RemoteID *string `queryParam:"style=form,explode=true,name=remoteId"`
	// The id of the remote system that is orchestrating payments
	RemoteSystemID *string `queryParam:"style=form,explode=true,name=remoteSystemId"`
	// Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked.
	// If set to true, and you have permission, the PII values will be returned as their original unmasked values.
	//
	Sensitive *bool `queryParam:"style=form,explode=true,name=sensitive"`
	// List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by remoteId
	// The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency,
	// routingNumber, accountNumber, remoteId, submittedDateTime and status
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom
	SourceAmountFrom *int `queryParam:"style=form,explode=true,name=sourceAmountFrom"`
	// The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo
	SourceAmountTo *int `queryParam:"style=form,explode=true,name=sourceAmountTo"`
	// Payment Status
	Status *GetPaymentsForPayoutV4StatusEnum `queryParam:"style=form,explode=true,name=status"`
	// The submitted date from range filter. Format is yyyy-MM-dd.
	SubmittedDateFrom *types.Date `queryParam:"style=form,explode=true,name=submittedDateFrom"`
	// The submitted date to range filter. Format is yyyy-MM-dd.
	SubmittedDateTo *types.Date `queryParam:"style=form,explode=true,name=submittedDateTo"`
	// Transmission Type
	// * ACH
	// * SAME_DAY_ACH
	// * WIRE
	// * GACHO
	//
	TransmissionType *GetPaymentsForPayoutV4TransmissionTypeEnum `queryParam:"style=form,explode=true,name=transmissionType"`
}

type GetPaymentsForPayoutV4Request struct {
	PathParams  GetPaymentsForPayoutV4PathParams
	QueryParams GetPaymentsForPayoutV4QueryParams
}

type GetPaymentsForPayoutV4Response struct {
	ContentType string
	// 200 response, data found okay
	GetPaymentsForPayoutResponseV4 *shared.GetPaymentsForPayoutResponseV4
	StatusCode                     int
	RawResponse                    *http.Response
	// Invalid request. See Error message payload for details of failure
	InlineResponse400 *shared.InlineResponse400
	// Invalid access token. May be expired or invalid
	InlineResponse401 *shared.InlineResponse401
	// The authentication does not have permissions to access the resource
	// This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions
	//
	InlineResponse403 *shared.InlineResponse403
	// The resource was not found or is no longer available
	//
	InlineResponse404 *shared.InlineResponse404
}
