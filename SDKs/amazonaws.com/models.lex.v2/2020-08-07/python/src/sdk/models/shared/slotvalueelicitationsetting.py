"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import promptspecification as shared_promptspecification
from ..shared import sampleutterance as shared_sampleutterance
from ..shared import slotcapturesetting as shared_slotcapturesetting
from ..shared import slotconstraint_enum as shared_slotconstraint_enum
from ..shared import slotdefaultvaluespecification as shared_slotdefaultvaluespecification
from ..shared import waitandcontinuespecification as shared_waitandcontinuespecification
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SlotValueElicitationSetting:
    r"""Specifies the elicitation setting details for constituent sub slots of a composite slot."""
    
    slot_constraint: shared_slotconstraint_enum.SlotConstraintEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotConstraint') }})  
    default_value_specification: Optional[shared_slotdefaultvaluespecification.SlotDefaultValueSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultValueSpecification'), 'exclude': lambda f: f is None }})  
    prompt_specification: Optional[shared_promptspecification.PromptSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promptSpecification'), 'exclude': lambda f: f is None }})  
    sample_utterances: Optional[list[shared_sampleutterance.SampleUtterance]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleUtterances'), 'exclude': lambda f: f is None }})  
    slot_capture_setting: Optional[shared_slotcapturesetting.SlotCaptureSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotCaptureSetting'), 'exclude': lambda f: f is None }})  
    wait_and_continue_specification: Optional[shared_waitandcontinuespecification.WaitAndContinueSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waitAndContinueSpecification'), 'exclude': lambda f: f is None }})
    r"""Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input."""  
    