// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AddUserAddUserRequestBodyPermissions - An object containing name/value pairs for each permission. Any permission that is not passed will be set to `false` by default. Note that users will be unable to see any files in the account unless you include `list` permission.
// When creating a user with the `role` **admin**, you should set all of the permissions to `true`
type AddUserAddUserRequestBodyPermissions struct {
	ChangePassword *bool `json:"changePassword,omitempty"`
	Delete         *bool `json:"delete,omitempty"`
	DeleteFormData *bool `json:"deleteFormData,omitempty"`
	Download       *bool `json:"download,omitempty"`
	List           *bool `json:"list,omitempty"`
	Modify         *bool `json:"modify,omitempty"`
	Notification   *bool `json:"notification,omitempty"`
	Share          *bool `json:"share,omitempty"`
	Upload         *bool `json:"upload,omitempty"`
	ViewFormData   *bool `json:"viewFormData,omitempty"`
}

// AddUserAddUserRequestBodyRoleEnum - The type of user to create, either **user** or **admin**.
type AddUserAddUserRequestBodyRoleEnum string

const (
	AddUserAddUserRequestBodyRoleEnumUser  AddUserAddUserRequestBodyRoleEnum = "user"
	AddUserAddUserRequestBodyRoleEnumAdmin AddUserAddUserRequestBodyRoleEnum = "admin"
)

func (e AddUserAddUserRequestBodyRoleEnum) ToPointer() *AddUserAddUserRequestBodyRoleEnum {
	return &e
}

func (e *AddUserAddUserRequestBodyRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "admin":
		*e = AddUserAddUserRequestBodyRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddUserAddUserRequestBodyRoleEnum: %v", v)
	}
}

type AddUserAddUserRequestBody struct {
	// Email address for the user
	Email string `json:"email"`
	// Optional timestamp when the user should expire, formatted in date-time.
	Expiration *string `json:"expiration,omitempty"`
	// Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.
	//
	// The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user is created.
	//
	// Users with the `role` **admin** should have their homeResource set to '/'
	HomeResource string `json:"homeResource"`
	// If true, the user will not be able to log in
	Locked *bool `json:"locked,omitempty"`
	// An optional nickname (e.g. 'David from Sales').
	Nickname *string `json:"nickname,omitempty"`
	// Set this to **true** to enable extra help popups in the web file manager for this user.
	Onboarding *bool `json:"onboarding,omitempty"`
	// Password for the user
	Password string `json:"password"`
	// An object containing name/value pairs for each permission. Any permission that is not passed will be set to `false` by default. Note that users will be unable to see any files in the account unless you include `list` permission.
	// When creating a user with the `role` **admin**, you should set all of the permissions to `true`
	Permissions AddUserAddUserRequestBodyPermissions `json:"permissions"`
	// The type of user to create, either **user** or **admin**.
	Role AddUserAddUserRequestBodyRoleEnum `json:"role"`
	// Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values.
	//
	TimeZone string `json:"timeZone"`
	// Username of the user to create. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.
	//
	// **Note** Usernames must be unique across all ExaVault accounts.
	Username string `json:"username"`
	// If **true**, send this new user a welcome email upon creation. The content of the welcome email can be configured with the [PATCH /accounts](#operation/updateAccount) method.
	WelcomeEmail *bool `json:"welcomeEmail,omitempty"`
}

type AddUserRequest struct {
	RequestBody *AddUserAddUserRequestBody `request:"mediaType=application/json"`
	// Access token required to make the API call.
	EvAccessToken string `header:"style=simple,explode=false,name=ev-access-token"`
	// API key required to make the API call
	EvAPIKey string `header:"style=simple,explode=false,name=ev-api-key"`
}

type AddUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	UserResponse *shared.UserResponse
}
