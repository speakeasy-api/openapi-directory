// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type RulePostType string

const (
	RulePostTypeAmqp                    RulePostType = "amqp"
	RulePostTypeAmqpExternal            RulePostType = "amqp/external"
	RulePostTypeAwsKinesis              RulePostType = "aws/kinesis"
	RulePostTypeAwsLambda               RulePostType = "aws/lambda"
	RulePostTypeAwsSqs                  RulePostType = "aws/sqs"
	RulePostTypeHTTP                    RulePostType = "http"
	RulePostTypeHTTPAzureFunction       RulePostType = "http/azure-function"
	RulePostTypeHTTPCloudflareWorker    RulePostType = "http/cloudflare-worker"
	RulePostTypeHTTPGoogleCloudFunction RulePostType = "http/google-cloud-function"
	RulePostTypeHTTPIfttt               RulePostType = "http/ifttt"
	RulePostTypeHTTPZapier              RulePostType = "http/zapier"
	RulePostTypeKafka                   RulePostType = "kafka"
	RulePostTypePulsar                  RulePostType = "pulsar"
)

type RulePost struct {
	HTTPRulePost                *HTTPRulePost
	IftttRulePost               *IftttRulePost
	ZapierRulePost              *ZapierRulePost
	CloudflareWorkerRulePost    *CloudflareWorkerRulePost
	AzureFunctionRulePost       *AzureFunctionRulePost
	GoogleCloudFunctionRulePost *GoogleCloudFunctionRulePost
	AwsLambdaRulePost           *AwsLambdaRulePost
	AwsKinesisRulePost          *AwsKinesisRulePost
	AwsSqsRulePost              *AwsSqsRulePost
	AmqpRulePost                *AmqpRulePost
	AmqpExternalRulePost        *AmqpExternalRulePost
	KafkaRulePost               *KafkaRulePost
	PulsarRulePost              *PulsarRulePost

	Type RulePostType
}

func CreateRulePostAmqp(amqp AmqpRulePost) RulePost {
	typ := RulePostTypeAmqp
	typStr := AmqpRulePostRuleTypeEnum(typ)
	amqp.RuleType = typStr

	return RulePost{
		AmqpRulePost: &amqp,
		Type:         typ,
	}
}

func CreateRulePostAmqpExternal(amqpExternal AmqpExternalRulePost) RulePost {
	typ := RulePostTypeAmqpExternal
	typStr := AmqpExternalRulePostRuleTypeEnum(typ)
	amqpExternal.RuleType = typStr

	return RulePost{
		AmqpExternalRulePost: &amqpExternal,
		Type:                 typ,
	}
}

func CreateRulePostAwsKinesis(awsKinesis AwsKinesisRulePost) RulePost {
	typ := RulePostTypeAwsKinesis
	typStr := AwsKinesisRulePostRuleTypeEnum(typ)
	awsKinesis.RuleType = typStr

	return RulePost{
		AwsKinesisRulePost: &awsKinesis,
		Type:               typ,
	}
}

func CreateRulePostAwsLambda(awsLambda AwsLambdaRulePost) RulePost {
	typ := RulePostTypeAwsLambda
	typStr := AwsLambdaRulePostRuleTypeEnum(typ)
	awsLambda.RuleType = typStr

	return RulePost{
		AwsLambdaRulePost: &awsLambda,
		Type:              typ,
	}
}

func CreateRulePostAwsSqs(awsSqs AwsSqsRulePost) RulePost {
	typ := RulePostTypeAwsSqs
	typStr := AwsSqsRulePostRuleTypeEnum(typ)
	awsSqs.RuleType = typStr

	return RulePost{
		AwsSqsRulePost: &awsSqs,
		Type:           typ,
	}
}

func CreateRulePostHTTP(http HTTPRulePost) RulePost {
	typ := RulePostTypeHTTP
	typStr := HTTPRulePostRuleTypeEnum(typ)
	http.RuleType = typStr

	return RulePost{
		HTTPRulePost: &http,
		Type:         typ,
	}
}

func CreateRulePostHTTPAzureFunction(httpAzureFunction AzureFunctionRulePost) RulePost {
	typ := RulePostTypeHTTPAzureFunction
	typStr := AzureFunctionRulePostRuleTypeEnum(typ)
	httpAzureFunction.RuleType = typStr

	return RulePost{
		AzureFunctionRulePost: &httpAzureFunction,
		Type:                  typ,
	}
}

func CreateRulePostHTTPCloudflareWorker(httpCloudflareWorker CloudflareWorkerRulePost) RulePost {
	typ := RulePostTypeHTTPCloudflareWorker
	typStr := CloudflareWorkerRulePostRuleTypeEnum(typ)
	httpCloudflareWorker.RuleType = typStr

	return RulePost{
		CloudflareWorkerRulePost: &httpCloudflareWorker,
		Type:                     typ,
	}
}

func CreateRulePostHTTPGoogleCloudFunction(httpGoogleCloudFunction GoogleCloudFunctionRulePost) RulePost {
	typ := RulePostTypeHTTPGoogleCloudFunction
	typStr := GoogleCloudFunctionRulePostRuleTypeEnum(typ)
	httpGoogleCloudFunction.RuleType = typStr

	return RulePost{
		GoogleCloudFunctionRulePost: &httpGoogleCloudFunction,
		Type:                        typ,
	}
}

func CreateRulePostHTTPIfttt(httpIfttt IftttRulePost) RulePost {
	typ := RulePostTypeHTTPIfttt
	typStr := IftttRulePostRuleTypeEnum(typ)
	httpIfttt.RuleType = typStr

	return RulePost{
		IftttRulePost: &httpIfttt,
		Type:          typ,
	}
}

func CreateRulePostHTTPZapier(httpZapier ZapierRulePost) RulePost {
	typ := RulePostTypeHTTPZapier
	typStr := ZapierRulePostRuleTypeEnum(typ)
	httpZapier.RuleType = typStr

	return RulePost{
		ZapierRulePost: &httpZapier,
		Type:           typ,
	}
}

func CreateRulePostKafka(kafka KafkaRulePost) RulePost {
	typ := RulePostTypeKafka
	typStr := KafkaRulePostRuleTypeEnum(typ)
	kafka.RuleType = typStr

	return RulePost{
		KafkaRulePost: &kafka,
		Type:          typ,
	}
}

func CreateRulePostPulsar(pulsar PulsarRulePost) RulePost {
	typ := RulePostTypePulsar
	typStr := PulsarRulePostRuleTypeEnum(typ)
	pulsar.RuleType = typStr

	return RulePost{
		PulsarRulePost: &pulsar,
		Type:           typ,
	}
}

func (u *RulePost) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		RuleType string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.RuleType {
	case "amqp":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		amqpRulePost := new(AmqpRulePost)
		if err := d.Decode(&amqpRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AmqpRulePost = amqpRulePost
		u.Type = RulePostTypeAmqp
		return nil
	case "amqp/external":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		amqpExternalRulePost := new(AmqpExternalRulePost)
		if err := d.Decode(&amqpExternalRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AmqpExternalRulePost = amqpExternalRulePost
		u.Type = RulePostTypeAmqpExternal
		return nil
	case "aws/kinesis":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsKinesisRulePost := new(AwsKinesisRulePost)
		if err := d.Decode(&awsKinesisRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsKinesisRulePost = awsKinesisRulePost
		u.Type = RulePostTypeAwsKinesis
		return nil
	case "aws/lambda":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsLambdaRulePost := new(AwsLambdaRulePost)
		if err := d.Decode(&awsLambdaRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsLambdaRulePost = awsLambdaRulePost
		u.Type = RulePostTypeAwsLambda
		return nil
	case "aws/sqs":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsSqsRulePost := new(AwsSqsRulePost)
		if err := d.Decode(&awsSqsRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsSqsRulePost = awsSqsRulePost
		u.Type = RulePostTypeAwsSqs
		return nil
	case "http":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		httpRulePost := new(HTTPRulePost)
		if err := d.Decode(&httpRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.HTTPRulePost = httpRulePost
		u.Type = RulePostTypeHTTP
		return nil
	case "http/azure-function":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		azureFunctionRulePost := new(AzureFunctionRulePost)
		if err := d.Decode(&azureFunctionRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AzureFunctionRulePost = azureFunctionRulePost
		u.Type = RulePostTypeHTTPAzureFunction
		return nil
	case "http/cloudflare-worker":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		cloudflareWorkerRulePost := new(CloudflareWorkerRulePost)
		if err := d.Decode(&cloudflareWorkerRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.CloudflareWorkerRulePost = cloudflareWorkerRulePost
		u.Type = RulePostTypeHTTPCloudflareWorker
		return nil
	case "http/google-cloud-function":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		googleCloudFunctionRulePost := new(GoogleCloudFunctionRulePost)
		if err := d.Decode(&googleCloudFunctionRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GoogleCloudFunctionRulePost = googleCloudFunctionRulePost
		u.Type = RulePostTypeHTTPGoogleCloudFunction
		return nil
	case "http/ifttt":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		iftttRulePost := new(IftttRulePost)
		if err := d.Decode(&iftttRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.IftttRulePost = iftttRulePost
		u.Type = RulePostTypeHTTPIfttt
		return nil
	case "http/zapier":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		zapierRulePost := new(ZapierRulePost)
		if err := d.Decode(&zapierRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ZapierRulePost = zapierRulePost
		u.Type = RulePostTypeHTTPZapier
		return nil
	case "kafka":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		kafkaRulePost := new(KafkaRulePost)
		if err := d.Decode(&kafkaRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.KafkaRulePost = kafkaRulePost
		u.Type = RulePostTypeKafka
		return nil
	case "pulsar":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		pulsarRulePost := new(PulsarRulePost)
		if err := d.Decode(&pulsarRulePost); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.PulsarRulePost = pulsarRulePost
		u.Type = RulePostTypePulsar
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RulePost) MarshalJSON() ([]byte, error) {
	if u.HTTPRulePost != nil {
		return json.Marshal(u.HTTPRulePost)
	}

	if u.IftttRulePost != nil {
		return json.Marshal(u.IftttRulePost)
	}

	if u.ZapierRulePost != nil {
		return json.Marshal(u.ZapierRulePost)
	}

	if u.CloudflareWorkerRulePost != nil {
		return json.Marshal(u.CloudflareWorkerRulePost)
	}

	if u.AzureFunctionRulePost != nil {
		return json.Marshal(u.AzureFunctionRulePost)
	}

	if u.GoogleCloudFunctionRulePost != nil {
		return json.Marshal(u.GoogleCloudFunctionRulePost)
	}

	if u.AwsLambdaRulePost != nil {
		return json.Marshal(u.AwsLambdaRulePost)
	}

	if u.AwsKinesisRulePost != nil {
		return json.Marshal(u.AwsKinesisRulePost)
	}

	if u.AwsSqsRulePost != nil {
		return json.Marshal(u.AwsSqsRulePost)
	}

	if u.AmqpRulePost != nil {
		return json.Marshal(u.AmqpRulePost)
	}

	if u.AmqpExternalRulePost != nil {
		return json.Marshal(u.AmqpExternalRulePost)
	}

	if u.KafkaRulePost != nil {
		return json.Marshal(u.KafkaRulePost)
	}

	if u.PulsarRulePost != nil {
		return json.Marshal(u.PulsarRulePost)
	}

	return nil, nil
}
