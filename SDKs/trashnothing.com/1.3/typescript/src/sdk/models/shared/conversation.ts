/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Message } from "./message";
import { User } from "./user";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A conversation between the current user and another user.
 */
export class Conversation extends SpeakeasyBase {
  /**
   * Whether or not this conversation is archived.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "archived" })
  archived?: boolean;

  /**
   * Whether or not this conversation is blocked.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "conversation_id" })
  conversationId?: string;

  /**
   * The UTC date and time of the last message in this conversation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_message_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastMessageDate?: Date;

  /**
   * The latest messages in this conversation.
   */
  @SpeakeasyMetadata({ elemType: Message })
  @Expose({ name: "messages" })
  @Type(() => Message)
  messages?: Message[];

  /**
   * The count of how many unread messages this conversation has.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "num_unread_messages" })
  numUnreadMessages?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => User)
  user?: User;
}
