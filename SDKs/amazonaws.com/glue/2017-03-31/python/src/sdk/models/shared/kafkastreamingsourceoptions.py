"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class KafkaStreamingSourceOptions:
    r"""Additional options for streaming."""
    
    add_record_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddRecordTimestamp'), 'exclude': lambda f: f is None }})  
    assign: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Assign'), 'exclude': lambda f: f is None }})  
    bootstrap_servers: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BootstrapServers'), 'exclude': lambda f: f is None }})  
    classification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Classification'), 'exclude': lambda f: f is None }})  
    connection_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectionName'), 'exclude': lambda f: f is None }})  
    delimiter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Delimiter'), 'exclude': lambda f: f is None }})  
    emit_consumer_lag_metrics: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmitConsumerLagMetrics'), 'exclude': lambda f: f is None }})  
    ending_offsets: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndingOffsets'), 'exclude': lambda f: f is None }})  
    include_headers: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludeHeaders'), 'exclude': lambda f: f is None }})  
    max_offsets_per_trigger: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxOffsetsPerTrigger'), 'exclude': lambda f: f is None }})  
    min_partitions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinPartitions'), 'exclude': lambda f: f is None }})  
    num_retries: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumRetries'), 'exclude': lambda f: f is None }})  
    poll_timeout_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PollTimeoutMs'), 'exclude': lambda f: f is None }})  
    retry_interval_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryIntervalMs'), 'exclude': lambda f: f is None }})  
    security_protocol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityProtocol'), 'exclude': lambda f: f is None }})  
    starting_offsets: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartingOffsets'), 'exclude': lambda f: f is None }})  
    subscribe_pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubscribePattern'), 'exclude': lambda f: f is None }})  
    topic_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TopicName'), 'exclude': lambda f: f is None }})  
    