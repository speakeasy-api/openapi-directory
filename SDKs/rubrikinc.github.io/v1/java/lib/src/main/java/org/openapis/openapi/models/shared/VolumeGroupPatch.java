/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VolumeGroupPatch - Properties to update for this Volume Group.
 */
public class VolumeGroupPatch {
    /**
     * The ID of the SLA Domain policy to assign to the Volume Group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public VolumeGroupPatch withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * Determines whether the next snapshot of the Volume Group is a full. After the snapshot has completed, this parameter will be reset to the default false value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forceFull")
    public Boolean forceFull;

    public VolumeGroupPatch withForceFull(Boolean forceFull) {
        this.forceFull = forceFull;
        return this;
    }
    
    /**
     * Indicates whether backup, archival, and replicated is paused for this Volume Group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPaused")
    public Boolean isPaused;

    public VolumeGroupPatch withIsPaused(Boolean isPaused) {
        this.isPaused = isPaused;
        return this;
    }
    
    /**
     * The unique ID of each volume included in the Volume Group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeIdsIncludedInSnapshots")
    public String[] volumeIdsIncludedInSnapshots;

    public VolumeGroupPatch withVolumeIdsIncludedInSnapshots(String[] volumeIdsIncludedInSnapshots) {
        this.volumeIdsIncludedInSnapshots = volumeIdsIncludedInSnapshots;
        return this;
    }
    
    public VolumeGroupPatch(){}
}
