/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ProjectAppConfigResource } from "./projectappconfigresource";
import { ProjectDataDelivery } from "./projectdatadelivery";
import { ProjectStatusEnum } from "./projectstatusenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * This structure defines a project, which is the logical object in Evidently that can contain features, launches, and experiments. Use projects to group similar features together.
 */
export class Project extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "activeExperimentCount" })
  activeExperimentCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "activeLaunchCount" })
  activeLaunchCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "appConfigResource" })
  @Type(() => ProjectAppConfigResource)
  appConfigResource?: ProjectAppConfigResource;

  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "createdTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "dataDelivery" })
  @Type(() => ProjectDataDelivery)
  dataDelivery?: ProjectDataDelivery;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "experimentCount" })
  experimentCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "featureCount" })
  featureCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdatedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdatedTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "launchCount" })
  launchCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: ProjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}
