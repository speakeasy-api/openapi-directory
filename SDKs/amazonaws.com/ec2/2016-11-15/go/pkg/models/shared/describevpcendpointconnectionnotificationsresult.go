// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnum - The state of the notification.
type DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnum string

const (
	DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnumEnabled  DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnum = "Enabled"
	DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnumDisabled DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnum = "Disabled"
)

func (e DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnum) ToPointer() *DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnum {
	return &e
}

func (e *DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Enabled":
		fallthrough
	case "Disabled":
		*e = DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnum: %v", v)
	}
}

// DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationTypeEnum - The type of notification.
type DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationTypeEnum string

const (
	DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationTypeEnumTopic DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationTypeEnum = "Topic"
)

func (e DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationTypeEnum) ToPointer() *DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationTypeEnum {
	return &e
}

func (e *DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Topic":
		*e = DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationTypeEnum: %v", v)
	}
}

// DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSet - Describes a connection notification for a VPC endpoint or VPC endpoint service.
type DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSet struct {
	ConnectionEvents            []string
	ConnectionNotificationArn   *string
	ConnectionNotificationID    *string
	ConnectionNotificationState *DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationStateEnum
	ConnectionNotificationType  *DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSetConnectionNotificationTypeEnum
	ServiceID                   *string
	VpcEndpointID               *string
}

// DescribeVpcEndpointConnectionNotificationsResult - Success
type DescribeVpcEndpointConnectionNotificationsResult struct {
	ConnectionNotificationSet []DescribeVpcEndpointConnectionNotificationsResultConnectionNotificationSet
	NextToken                 *string
}
