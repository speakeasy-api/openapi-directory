// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// Sakari Production
	"https://api.sakari.io/v1",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - # Introduction
//
// Welcome to the documentation for the Sakari Messaging REST API.
//
// # Sakari provides an advanced platform to drive large scale customized SMS communication
//
// REST is a web-service protocol that lends itself to rapid development by using everyday HTTP and JSON technology.
//
// To find out more about our product offering, please visit [https://sakari.io](https://sakari.io).
//
// # Quickstart
//
// For your convenience we have created a quickstart guide to get you up and running in 5 minutes.
//
// [https://sakari.io/blog/sakari-api-quickstart](https://sakari.io/blog/sakari-api-quickstart)
//
// # PostMan Collection
//
// We've created a simple set of examples using [PostMan](https://www.getpostman.com/) Simply click below to import these. You will need to setup three environment variables in PostMan - AccountId, ClientId and ClientSecret. Check out our PostMan blog post for more information
//
// [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d616e273edc916a7a6eb)
//
// # Finding your client id, client secret and account id
//
// To authenticate against the API's you will need three key pieces of data
//   - client id
//   - client secret
//   - account id
//
// To retrieve these, simply login into [https://hub.sakari.io](https://hub.sakari.io) and click on the "cog" in the top right corner. In the popup dialog at the bottom you should see your API credentials and account id. If these are not visible you will need to click on "Request Credentials"
//
// # Versioning
//
// With any breaking changes we will introduce a new version of the API. The latest version is v1.
//
// The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break.
//
// # Testing
//
// There are numerous tools available for testing the API's. We will include examples using curl and the client SDKs that we have created. If you would like to see an SDK in a language not currently available, please let us know.
//
// # Throttling / Limits
//
// Our API's have been specifically designed to support bulk messaging in a single API call. We therefore impose limits on the frequency of calling the APIs to prevent abuse or runaway processes. If you feel you need a higher limit, please contact us. If you hit the limit you will get a 429 error code returned from our servers
//
// # Errors
//
// The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:
//
// ```
//
//	{
//	  "success": false,
//	  "error": {
//	    "code": "CONT-001",
//	    "message": "Invalid mobile number"
//	  }
//	}
//
// ```
//
// # Pagination
//
// For performance, most GET calls return a subset of data. This data is paginated for easy access. Most APIs which return collections of data will return a pagination object as such:
//
// ```
//
//	{
//	  "pagination": {
//	    "offset": 0,
//	    "limit": 10
//	    "totalCount": 21
//	  }
//	}
//
// ```
//
// When making calls to the API, you can adjust the slice of data returned using query parameters such as:
//
// “ https://api.sakari.io/v1/accounts/123/contacts?offset=20&limit=25 “
//
// This will return 25 contacts with an offset of 20.
//
// https://sakari.io - Find out more about Sakari
type SDK struct {
	// Authentication - Sakari uses OAuth2 for authentication. After you have created an account at [https://hub.sakari.io](https://hub.sakari.io), you can retrieve your client id and secret from the 'Account Details' screen (click on the 'cog' icon in the top right corner and scroll down to API Credentials)
	//
	// Using your client id and secret, you can exchange these for a JWT ([JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token))
	//
	// The JWT should then be used when accessing any of the core API's. It should be passed in the `Authorization` header.
	//
	// For example:
	//
	// ``Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImt....``
	//
	Authentication *authentication
	// Campaigns - Define reusable message campaigns with a predefined contact list/filter, template and schedule
	Campaigns *campaigns
	// Contacts - Create, modify or delete contacts
	Contacts *contacts
	// Conversations - Conversations group your message history with each contact into one thread
	Conversations *conversations
	// Messages - Send or track messages to one contact, a group of contacts or your entire address book
	Messages *messages
	// Templates - Define reusable message or web templates
	Templates *templates
	// Tools - Tools to assist with sending and receiving messages, such as file sharing, translation, etc.
	Tools *tools
	// Webhooks - Webhooks allow your own system to be automatically notified upon certin events, such as a new message received from one of your contacts or a status change notification for your messages
	Webhooks *webhooks

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Authentication = newAuthentication(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Campaigns = newCampaigns(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Contacts = newContacts(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Conversations = newConversations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Messages = newMessages(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Templates = newTemplates(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Tools = newTools(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Webhooks = newWebhooks(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
