/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Information about a template location.
 */
export class UpdateWorldTemplateRequestBodyTemplateLocation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "s3Bucket" })
  s3Bucket?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "s3Key" })
  s3Key?: string;
}

export class UpdateWorldTemplateRequestBody extends SpeakeasyBase {
  /**
   * The name of the template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The Amazon Resource Name (arn) of the world template to update.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "template" })
  template: string;

  /**
   * The world template body.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "templateBody" })
  templateBody?: string;

  /**
   * Information about a template location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "templateLocation" })
  @Type(() => UpdateWorldTemplateRequestBodyTemplateLocation)
  templateLocation?: UpdateWorldTemplateRequestBodyTemplateLocation;
}

export class UpdateWorldTemplateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateWorldTemplateRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateWorldTemplateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateWorldTemplateResponse?: shared.UpdateWorldTemplateResponse;
}
