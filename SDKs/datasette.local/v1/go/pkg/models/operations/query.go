// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// QueryShapeEnum - The shape of the response data. Must be "array"
type QueryShapeEnum string

const (
	QueryShapeEnumArray QueryShapeEnum = "array"
)

func (e QueryShapeEnum) ToPointer() *QueryShapeEnum {
	return &e
}

func (e *QueryShapeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "array":
		*e = QueryShapeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryShapeEnum: %v", v)
	}
}

type QueryRequest struct {
	// The shape of the response data. Must be "array"
	Shape QueryShapeEnum `queryParam:"style=form,explode=true,name=_shape"`
	// The SQL query to be executed
	SQL string `queryParam:"style=form,explode=true,name=sql"`
}

type QueryResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful SQL results
	Query200ApplicationJSONObjects []map[string]interface{}
}
