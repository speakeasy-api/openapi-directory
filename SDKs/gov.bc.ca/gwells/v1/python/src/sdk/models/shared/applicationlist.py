"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import applicationstatuscode as shared_applicationstatuscode
from ..shared import qualification as shared_qualification
from ..shared import subactivity as shared_subactivity
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ApplicationList:
    
    subactivity: shared_subactivity.Subactivity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subactivity') }})  
    cert_authority: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cert_authority'), 'exclude': lambda f: f is None }})  
    certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificate'), 'exclude': lambda f: f is None }})  
    current_status: Optional[shared_applicationstatuscode.ApplicationStatusCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_status'), 'exclude': lambda f: f is None }})  
    display_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_status'), 'exclude': lambda f: f is None }})  
    qualifications: Optional[list[shared_qualification.Qualification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('qualifications'), 'exclude': lambda f: f is None }})  
    removal_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('removal_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    