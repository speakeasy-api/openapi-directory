/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ModeEnum } from "./modeenum";
import { RuntimeEnum } from "./runtimeenum";
import { Expose, Transform } from "class-transformer";

/**
 * A complex type that describes function metadata.
 */
export class FunctionConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CodeSize" })
  codeSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ConfigurationId" })
  configurationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FunctionARN" })
  functionARN?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "FunctionName" })
  functionName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Handler" })
  handler?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModified" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModified?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "MemorySize" })
  memorySize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Mode" })
  mode?: ModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Role" })
  role?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Runtime" })
  runtime?: RuntimeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Timeout" })
  timeout?: number;
}
