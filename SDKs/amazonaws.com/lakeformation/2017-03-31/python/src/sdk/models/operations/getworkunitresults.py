"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getworkunitresultsresponse as shared_getworkunitresultsresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetWorkUnitResultsRequestBody:
    
    query_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QueryId') }})
    r"""The ID of the plan query operation for which to get results."""  
    work_unit_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkUnitId') }})
    r"""The work unit ID for which to get results. Value generated by enumerating <code>WorkUnitIdMin</code> to <code>WorkUnitIdMax</code> (inclusive) from the <code>WorkUnitRange</code> in the output of <code>GetWorkUnits</code>."""  
    work_unit_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkUnitToken') }})
    r"""A work token used to query the execution service. Token output from <code>GetWorkUnits</code>."""  
    

@dataclasses.dataclass
class GetWorkUnitResultsRequest:
    
    request_body: GetWorkUnitResultsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetWorkUnitResultsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    expired_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ExpiredException"""  
    get_work_unit_results_response: Optional[shared_getworkunitresultsresponse.GetWorkUnitResultsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    invalid_input_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidInputException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottledException"""  
    