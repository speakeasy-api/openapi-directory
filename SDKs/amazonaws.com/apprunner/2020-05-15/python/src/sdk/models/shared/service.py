"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import autoscalingconfigurationsummary as shared_autoscalingconfigurationsummary
from ..shared import encryptionconfiguration as shared_encryptionconfiguration
from ..shared import healthcheckconfiguration as shared_healthcheckconfiguration
from ..shared import instanceconfiguration as shared_instanceconfiguration
from ..shared import networkconfiguration as shared_networkconfiguration
from ..shared import serviceobservabilityconfiguration as shared_serviceobservabilityconfiguration
from ..shared import servicestatus_enum as shared_servicestatus_enum
from ..shared import sourceconfiguration as shared_sourceconfiguration
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Service:
    r"""<p>Describes an App Runner service. It can describe a service in any state, including deleted services.</p> <p>This type contains the full information about a service, including configuration details. It's returned by the <a href=\\"https://docs.aws.amazon.com/apprunner/latest/api/API_CreateService.html\\">CreateService</a>, <a href=\\"https://docs.aws.amazon.com/apprunner/latest/api/API_DescribeService.html\\">DescribeService</a>, and <a href=\\"https://docs.aws.amazon.com/apprunner/latest/api/API_DeleteService.html\\">DeleteService</a> actions. A subset of this information is returned by the <a href=\\"https://docs.aws.amazon.com/apprunner/latest/api/API_ListServices.html\\">ListServices</a> action using the <a href=\\"https://docs.aws.amazon.com/apprunner/latest/api/API_ServiceSummary.html\\">ServiceSummary</a> type.</p>"""
    
    auto_scaling_configuration_summary: shared_autoscalingconfigurationsummary.AutoScalingConfigurationSummary = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoScalingConfigurationSummary') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    instance_configuration: shared_instanceconfiguration.InstanceConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceConfiguration') }})  
    network_configuration: shared_networkconfiguration.NetworkConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkConfiguration') }})  
    service_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceArn') }})  
    service_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceId') }})  
    service_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceName') }})  
    source_configuration: shared_sourceconfiguration.SourceConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceConfiguration') }})  
    status: shared_servicestatus_enum.ServiceStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    deleted_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeletedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    encryption_configuration: Optional[shared_encryptionconfiguration.EncryptionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    health_check_configuration: Optional[shared_healthcheckconfiguration.HealthCheckConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HealthCheckConfiguration'), 'exclude': lambda f: f is None }})  
    observability_configuration: Optional[shared_serviceobservabilityconfiguration.ServiceObservabilityConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ObservabilityConfiguration'), 'exclude': lambda f: f is None }})  
    service_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceUrl'), 'exclude': lambda f: f is None }})  
    