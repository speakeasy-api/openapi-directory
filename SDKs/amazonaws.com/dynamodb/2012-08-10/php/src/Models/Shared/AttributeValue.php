<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * AttributeValue - <p>Represents the data for an attribute.</p> <p>Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class AttributeValue
{
	#[\JMS\Serializer\Annotation\SerializedName('B')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $b = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('BOOL')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $bool = null;
    
    /**
     * $bs
     * 
     * @var ?array<string> $bs
     */
	#[\JMS\Serializer\Annotation\SerializedName('BS')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $bs = null;
    
    /**
     * $l
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\AttributeValue> $l
     */
	#[\JMS\Serializer\Annotation\SerializedName('L')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AttributeValue>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $l = null;
    
    /**
     * $m
     * 
     * @var ?array<string, \OpenAPI\OpenAPI\Models\Shared\AttributeValue> $m
     */
	#[\JMS\Serializer\Annotation\SerializedName('M')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\AttributeValue>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $m = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('N')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $n = null;
    
    /**
     * $ns
     * 
     * @var ?array<string> $ns
     */
	#[\JMS\Serializer\Annotation\SerializedName('NS')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $ns = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('NULL')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $null = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('S')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $s = null;
    
    /**
     * $ss
     * 
     * @var ?array<string> $ss
     */
	#[\JMS\Serializer\Annotation\SerializedName('SS')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $ss = null;
    
	public function __construct()
	{
		$this->b = null;
		$this->bool = null;
		$this->bs = null;
		$this->l = null;
		$this->m = null;
		$this->n = null;
		$this->ns = null;
		$this->null = null;
		$this->s = null;
		$this->ss = null;
	}
}
