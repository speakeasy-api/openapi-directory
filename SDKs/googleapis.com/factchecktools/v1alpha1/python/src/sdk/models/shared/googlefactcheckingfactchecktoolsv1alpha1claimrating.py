"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleFactcheckingFactchecktoolsV1alpha1ClaimRating:
    r"""Information about the claim rating."""
    
    best_rating: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bestRating'), 'exclude': lambda f: f is None }})
    r"""For numeric ratings, the best value possible in the scale from worst to best. Corresponds to `ClaimReview.reviewRating.bestRating`."""  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUrl'), 'exclude': lambda f: f is None }})
    r"""Corresponds to `ClaimReview.reviewRating.image`."""  
    rating_explanation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratingExplanation'), 'exclude': lambda f: f is None }})
    r"""Corresponds to `ClaimReview.reviewRating.ratingExplanation`."""  
    rating_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratingValue'), 'exclude': lambda f: f is None }})
    r"""A numeric rating of this claim, in the range worstRating â€” bestRating inclusive. Corresponds to `ClaimReview.reviewRating.ratingValue`."""  
    textual_rating: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textualRating'), 'exclude': lambda f: f is None }})
    r"""The truthfulness rating as a human-readible short word or phrase. Corresponds to `ClaimReview.reviewRating.alternateName`."""  
    worst_rating: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('worstRating'), 'exclude': lambda f: f is None }})
    r"""For numeric ratings, the worst value possible in the scale from worst to best. Corresponds to `ClaimReview.reviewRating.worstRating`."""  
    