// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetRandomWordsSortByEnum - Attribute to sort by
type GetRandomWordsSortByEnum string

const (
	GetRandomWordsSortByEnumAlpha GetRandomWordsSortByEnum = "alpha"
	GetRandomWordsSortByEnumCount GetRandomWordsSortByEnum = "count"
)

func (e *GetRandomWordsSortByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "alpha":
		fallthrough
	case "count":
		*e = GetRandomWordsSortByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRandomWordsSortByEnum: %s", s)
	}
}

// GetRandomWordsSortOrderEnum - Sort direction
type GetRandomWordsSortOrderEnum string

const (
	GetRandomWordsSortOrderEnumAsc  GetRandomWordsSortOrderEnum = "asc"
	GetRandomWordsSortOrderEnumDesc GetRandomWordsSortOrderEnum = "desc"
)

func (e *GetRandomWordsSortOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = GetRandomWordsSortOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRandomWordsSortOrderEnum: %s", s)
	}
}

type GetRandomWordsQueryParams struct {
	// CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
	ExcludePartOfSpeech *string `queryParam:"style=form,explode=true,name=excludePartOfSpeech"`
	// Only return words with dictionary definitions
	HasDictionaryDef *string `queryParam:"style=form,explode=true,name=hasDictionaryDef"`
	// CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
	IncludePartOfSpeech *string `queryParam:"style=form,explode=true,name=includePartOfSpeech"`
	// Maximum number of results to return
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Maximum corpus frequency for terms
	MaxCorpusCount *int `queryParam:"style=form,explode=true,name=maxCorpusCount"`
	// Maximum dictionary count
	MaxDictionaryCount *int `queryParam:"style=form,explode=true,name=maxDictionaryCount"`
	// Maximum word length
	MaxLength *int `queryParam:"style=form,explode=true,name=maxLength"`
	// Minimum corpus frequency for terms
	MinCorpusCount *int `queryParam:"style=form,explode=true,name=minCorpusCount"`
	// Minimum dictionary count
	MinDictionaryCount *int `queryParam:"style=form,explode=true,name=minDictionaryCount"`
	// Minimum word length
	MinLength *int `queryParam:"style=form,explode=true,name=minLength"`
	// Attribute to sort by
	SortBy *GetRandomWordsSortByEnum `queryParam:"style=form,explode=true,name=sortBy"`
	// Sort direction
	SortOrder *GetRandomWordsSortOrderEnum `queryParam:"style=form,explode=true,name=sortOrder"`
}

type GetRandomWordsRequest struct {
	QueryParams GetRandomWordsQueryParams
}

type GetRandomWordsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
