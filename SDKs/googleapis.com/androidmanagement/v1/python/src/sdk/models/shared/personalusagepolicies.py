"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import personalapplicationpolicy as shared_personalapplicationpolicy
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PersonalUsagePoliciesPersonalPlayStoreModeEnum(str, Enum):
    r"""Used together with personalApplications to control how apps in the personal profile are allowed or blocked."""
    PLAY_STORE_MODE_UNSPECIFIED = 'PLAY_STORE_MODE_UNSPECIFIED'
    BLACKLIST = 'BLACKLIST'
    BLOCKLIST = 'BLOCKLIST'
    ALLOWLIST = 'ALLOWLIST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PersonalUsagePolicies:
    r"""Policies controlling personal usage on a company-owned device with a work profile."""
    
    account_types_with_management_disabled: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountTypesWithManagementDisabled'), 'exclude': lambda f: f is None }})
    r"""Account types that can't be managed by the user."""  
    camera_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cameraDisabled'), 'exclude': lambda f: f is None }})
    r"""If true, the camera is disabled on the personal profile."""  
    max_days_with_work_off: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxDaysWithWorkOff'), 'exclude': lambda f: f is None }})
    r"""Controls how long the work profile can stay off. The duration must be at least 3 days."""  
    personal_applications: Optional[list[shared_personalapplicationpolicy.PersonalApplicationPolicy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('personalApplications'), 'exclude': lambda f: f is None }})
    r"""Policy applied to applications in the personal profile."""  
    personal_play_store_mode: Optional[PersonalUsagePoliciesPersonalPlayStoreModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('personalPlayStoreMode'), 'exclude': lambda f: f is None }})
    r"""Used together with personalApplications to control how apps in the personal profile are allowed or blocked."""  
    screen_capture_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screenCaptureDisabled'), 'exclude': lambda f: f is None }})
    r"""If true, screen capture is disabled for all users."""  
    