"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import customvisionerror as shared_customvisionerror
from ..shared import export as shared_export
from enum import Enum
from typing import Optional

class ExportIterationFlavorEnum(str, Enum):
    r"""The flavor of the target platform."""
    LINUX = 'Linux'
    WINDOWS = 'Windows'
    ONNX10 = 'ONNX10'
    ONNX12 = 'ONNX12'
    ARM = 'ARM'
    TENSOR_FLOW_NORMAL = 'TensorFlowNormal'
    TENSOR_FLOW_LITE = 'TensorFlowLite'

class ExportIterationPlatformEnum(str, Enum):
    r"""The target platform."""
    CORE_ML = 'CoreML'
    TENSOR_FLOW = 'TensorFlow'
    DOCKER_FILE = 'DockerFile'
    ONNX = 'ONNX'
    VAIDK = 'VAIDK'


@dataclasses.dataclass
class ExportIterationRequest:
    
    iteration_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'iterationId', 'style': 'simple', 'explode': False }})
    r"""The iteration id."""  
    platform: ExportIterationPlatformEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'platform', 'style': 'form', 'explode': True }})
    r"""The target platform."""  
    project_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'projectId', 'style': 'simple', 'explode': False }})
    r"""The project id."""  
    flavor: Optional[ExportIterationFlavorEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'flavor', 'style': 'form', 'explode': True }})
    r"""The flavor of the target platform."""  
    

@dataclasses.dataclass
class ExportIterationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    custom_vision_error: Optional[shared_customvisionerror.CustomVisionError] = dataclasses.field(default=None)
    r"""Error response"""  
    export: Optional[shared_export.Export] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    