<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class EditorialImages 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * (Deprecated) List editorial categories
     * 
     * Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEditorialCategoriesResponse
     */
	public function getEditorialCategories(
    ): \OpenAPI\OpenAPI\Models\Operations\GetEditorialCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/categories');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEditorialCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialCategoryResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialCategoryResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get editorial content details
     * 
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageResponse
     */
	public function getEditorialImage(
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/images/{id}', \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEditorialImageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialContent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialContent', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List editorial image licenses
     * 
     * This endpoint lists existing editorial image licenses.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLicenseListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLicenseListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLicenseListResponse
     */
	public function getEditorialImageLicenseList(
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLicenseListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLicenseListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLicenseListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/images/licenses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLicenseListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLicenseListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->downloadHistoryDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DownloadHistoryDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Get editorial livefeed
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedResponse
     */
	public function getEditorialImageLivefeed(
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/images/livefeeds/{id}', \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialImageLivefeed = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialImageLivefeed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get editorial livefeed items
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedItemsResponse
     */
	public function getEditorialImageLivefeedItems(
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/images/livefeeds/{id}/items', \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialImageContentDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialImageContentDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get editorial livefeed list
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedListResponse
     */
	public function getEditorialImageLivefeedList(
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/images/livefeeds');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEditorialImageLivefeedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialImageLivefeedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialImageLivefeedList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * (Deprecated) Get editorial livefeed
     * 
     * Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedResponse
     */
	public function getEditorialLivefeed(
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/livefeeds/{id}', \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialLivefeed = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialLivefeed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
	
    /**
     * (Deprecated) Get editorial livefeed items
     * 
     * Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedItemsResponse
     */
	public function getEditorialLivefeedItems(
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/livefeeds/{id}/items', \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedItemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedItemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialContentDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialContentDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
	
    /**
     * (Deprecated) Get editorial livefeed list
     * 
     * Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedListResponse
     */
	public function getEditorialLivefeedList(
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/livefeeds');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEditorialLivefeedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialLivefeedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialLivefeedList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
	
    /**
     * (Deprecated) List updated content
     * 
     * Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImageResponse
     */
	public function getUpdatedEditorialImage(
        \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/updated');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialUpdatedResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialUpdatedResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
	
    /**
     * List updated content
     * 
     * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImagesResponse
     */
	public function getUpdatedEditorialImages(
        \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/images/updated');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUpdatedEditorialImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialUpdatedResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialUpdatedResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
	
    /**
     * (Deprecated) Get editorial content details
     * 
     * Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2EditorialIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2EditorialIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2EditorialIdResponse
     */
	public function getV2EditorialId(
        \OpenAPI\OpenAPI\Models\Operations\GetV2EditorialIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetV2EditorialIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2EditorialIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/{id}', \OpenAPI\OpenAPI\Models\Operations\GetV2EditorialIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV2EditorialIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2EditorialIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialContent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialContent', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * (Deprecated) License editorial content
     * 
     * Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\LicenseEditorialContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialImageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialImageResponse
     */
	public function licenseEditorialImage(
        \OpenAPI\OpenAPI\Models\Shared\LicenseEditorialContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialImageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/licenses');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseEditorialContentResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseEditorialContentResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
	
    /**
     * License editorial content
     * 
     * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\LicenseEditorialContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialImagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialImagesResponse
     */
	public function licenseEditorialImages(
        \OpenAPI\OpenAPI\Models\Shared\LicenseEditorialContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialImagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/images/licenses');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseEditorialContentResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseEditorialContentResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
	
    /**
     * List editorial categories
     * 
     * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEditorialImageCategoriesResponse
     */
	public function listEditorialImageCategories(
    ): \OpenAPI\OpenAPI\Models\Operations\ListEditorialImageCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/images/categories');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEditorialImageCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialImageCategoryResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialImageCategoryResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * (Deprecated) Search editorial content
     * 
     * Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchEditorialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchEditorialSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchEditorialResponse
     */
	public function searchEditorial(
        \OpenAPI\OpenAPI\Models\Operations\SearchEditorialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchEditorialSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchEditorialResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchEditorialRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchEditorialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
	
    /**
     * Search editorial images
     * 
     * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to "Alone,Performing" and also specify a `query` parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchEditorialImagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchEditorialImagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchEditorialImagesResponse
     */
	public function searchEditorialImages(
        \OpenAPI\OpenAPI\Models\Operations\SearchEditorialImagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchEditorialImagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchEditorialImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/images/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchEditorialImagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchEditorialImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
}