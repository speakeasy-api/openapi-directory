"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import batchinferencejobconfig as shared_batchinferencejobconfig
from ..shared import batchinferencejobinput as shared_batchinferencejobinput
from ..shared import batchinferencejoboutput as shared_batchinferencejoboutput
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBatchInferenceJobRequest:
    
    job_input: shared_batchinferencejobinput.BatchInferenceJobInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobInput') }})  
    job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobName') }})  
    job_output: shared_batchinferencejoboutput.BatchInferenceJobOutput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobOutput') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn') }})  
    solution_version_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('solutionVersionArn') }})  
    batch_inference_job_config: Optional[shared_batchinferencejobconfig.BatchInferenceJobConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchInferenceJobConfig'), 'exclude': lambda f: f is None }})  
    filter_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterArn'), 'exclude': lambda f: f is None }})  
    num_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numResults'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    