// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateCustomActionTypeXAmzTargetEnum
type CreateCustomActionTypeXAmzTargetEnum string

const (
	CreateCustomActionTypeXAmzTargetEnumCodePipeline20150709CreateCustomActionType CreateCustomActionTypeXAmzTargetEnum = "CodePipeline_20150709.CreateCustomActionType"
)

func (e CreateCustomActionTypeXAmzTargetEnum) ToPointer() *CreateCustomActionTypeXAmzTargetEnum {
	return &e
}

func (e *CreateCustomActionTypeXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodePipeline_20150709.CreateCustomActionType":
		*e = CreateCustomActionTypeXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomActionTypeXAmzTargetEnum: %v", v)
	}
}

type CreateCustomActionTypeRequest struct {
	CreateCustomActionTypeInput shared.CreateCustomActionTypeInput   `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  CreateCustomActionTypeXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateCustomActionTypeResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// Success
	CreateCustomActionTypeOutput *shared.CreateCustomActionTypeOutput
	// InvalidTagsException
	InvalidTagsException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// TooManyTagsException
	TooManyTagsException interface{}
	// ValidationException
	ValidationException interface{}
}
