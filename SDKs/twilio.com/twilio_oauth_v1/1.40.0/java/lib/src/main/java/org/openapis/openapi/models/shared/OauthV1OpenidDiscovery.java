/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OauthV1OpenidDiscovery - OK
 */
public class OauthV1OpenidDiscovery {
    /**
     * The endpoint that validates all authorization requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorization_endpoint")
    public String authorizationEndpoint;
    public OauthV1OpenidDiscovery withAuthorizationEndpoint(String authorizationEndpoint) {
        this.authorizationEndpoint = authorizationEndpoint;
        return this;
    }
    
    /**
     * A collection of claims supported by authorization server for identity token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claims_supported")
    public String[] claimsSupported;
    public OauthV1OpenidDiscovery withClaimsSupported(String[] claimsSupported) {
        this.claimsSupported = claimsSupported;
        return this;
    }
    
    /**
     * The endpoint that validates all device code related authorization requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_authorization_endpoint")
    public String deviceAuthorizationEndpoint;
    public OauthV1OpenidDiscovery withDeviceAuthorizationEndpoint(String deviceAuthorizationEndpoint) {
        this.deviceAuthorizationEndpoint = deviceAuthorizationEndpoint;
        return this;
    }
    
    /**
     * A collection of JWS signing algorithms supported by authorization server to sign identity token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_token_signing_alg_values_supported")
    public String[] idTokenSigningAlgValuesSupported;
    public OauthV1OpenidDiscovery withIdTokenSigningAlgValuesSupported(String[] idTokenSigningAlgValuesSupported) {
        this.idTokenSigningAlgValuesSupported = idTokenSigningAlgValuesSupported;
        return this;
    }
    
    /**
     * The URL of the party that will create the token and sign it with its private key.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuer")
    public String issuer;
    public OauthV1OpenidDiscovery withIssuer(String issuer) {
        this.issuer = issuer;
        return this;
    }
    
    /**
     * The URL of your JSON Web Key Set. This set is a collection of JSON Web Keys, a standard method for representing cryptographic keys in a JSON structure.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwk_uri")
    public String jwkUri;
    public OauthV1OpenidDiscovery withJwkUri(String jwkUri) {
        this.jwkUri = jwkUri;
        return this;
    }
    
    /**
     * A collection of response type supported by authorization server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_type_supported")
    public String[] responseTypeSupported;
    public OauthV1OpenidDiscovery withResponseTypeSupported(String[] responseTypeSupported) {
        this.responseTypeSupported = responseTypeSupported;
        return this;
    }
    
    /**
     * The endpoint used to revoke access or refresh tokens issued by the authorization server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revocation_endpoint")
    public String revocationEndpoint;
    public OauthV1OpenidDiscovery withRevocationEndpoint(String revocationEndpoint) {
        this.revocationEndpoint = revocationEndpoint;
        return this;
    }
    
    /**
     * A collection of scopes supported by authorization server for identity token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes_supported")
    public String[] scopesSupported;
    public OauthV1OpenidDiscovery withScopesSupported(String[] scopesSupported) {
        this.scopesSupported = scopesSupported;
        return this;
    }
    
    /**
     * A collection of subject by authorization server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject_type_supported")
    public String[] subjectTypeSupported;
    public OauthV1OpenidDiscovery withSubjectTypeSupported(String[] subjectTypeSupported) {
        this.subjectTypeSupported = subjectTypeSupported;
        return this;
    }
    
    /**
     * The URL of the token endpoint. After a client has received an authorization code, that code is presented to the token endpoint and exchanged for an identity token, an access token, and a refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token_endpoint")
    public String tokenEndpoint;
    public OauthV1OpenidDiscovery withTokenEndpoint(String tokenEndpoint) {
        this.tokenEndpoint = tokenEndpoint;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public OauthV1OpenidDiscovery withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The URL of the user info endpoint, which returns user profile information to a client. Keep in mind that the user info endpoint returns only the information that has been requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userinfo_endpoint")
    public String userinfoEndpoint;
    public OauthV1OpenidDiscovery withUserinfoEndpoint(String userinfoEndpoint) {
        this.userinfoEndpoint = userinfoEndpoint;
        return this;
    }
    
}
