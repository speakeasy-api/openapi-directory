/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class SyncRequest {
    /**
     * List of channel CIDs to sync
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel_cids")
    public String[] channelCids;
    public SyncRequest withChannelCids(String[] channelCids) {
        this.channelCids = channelCids;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;
    public SyncRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_id")
    public String connectionId;
    public SyncRequest withConnectionId(String connectionId) {
        this.connectionId = connectionId;
        return this;
    }
    
    /**
     * Date from which synchronization should happen
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_sync_at")
    public OffsetDateTime lastSyncAt;
    public SyncRequest withLastSyncAt(OffsetDateTime lastSyncAt) {
        this.lastSyncAt = lastSyncAt;
        return this;
    }
    
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public java.util.Map<String, Object> user;
    public SyncRequest withUser(java.util.Map<String, Object> user) {
        this.user = user;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public SyncRequest withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * If set to true this will start watching requested and newly added channels that user has access to. If error occurred with this option enabled and it is not an input error - channels will still be watched.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watch")
    public Boolean watch;
    public SyncRequest withWatch(Boolean watch) {
        this.watch = watch;
        return this;
    }
    
    /**
     * If set to true this will add 'inaccessible_cids' to response type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("with_inaccessible_cids")
    public Boolean withInaccessibleCids;
    public SyncRequest withWithInaccessibleCids(Boolean withInaccessibleCids) {
        this.withInaccessibleCids = withInaccessibleCids;
        return this;
    }
    
}
