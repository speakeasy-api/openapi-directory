// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AecmwSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type AecmwRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// AecmwRequestBodyFormatEnum - The format of the certificate in response.
type AecmwRequestBodyFormatEnum string

const (
	AecmwRequestBodyFormatEnumPdf AecmwRequestBodyFormatEnum = "pdf"
)

func (e *AecmwRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = AecmwRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AecmwRequestBodyFormatEnum: %s", s)
	}
}

// AecmwRequestBody - Request format
type AecmwRequestBody struct {
	CertificateParameters *AecmwRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format AecmwRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Aecmw504ApplicationJSONErrorEnum string

const (
	Aecmw504ApplicationJSONErrorEnumGatewayTimeout Aecmw504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Aecmw504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Aecmw504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw504ApplicationJSONErrorEnum: %s", s)
	}
}

type Aecmw504ApplicationJSONErrorDescriptionEnum string

const (
	Aecmw504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Aecmw504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Aecmw504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Aecmw504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aecmw504ApplicationJSON - Gateway timeout
type Aecmw504ApplicationJSON struct {
	Error            *Aecmw504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aecmw504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aecmw503ApplicationJSONErrorEnum string

const (
	Aecmw503ApplicationJSONErrorEnumServiceUnavailable Aecmw503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Aecmw503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Aecmw503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw503ApplicationJSONErrorEnum: %s", s)
	}
}

type Aecmw503ApplicationJSONErrorDescriptionEnum string

const (
	Aecmw503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Aecmw503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Aecmw503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Aecmw503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aecmw503ApplicationJSON - Service unavailable
type Aecmw503ApplicationJSON struct {
	Error            *Aecmw503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aecmw503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aecmw502ApplicationJSONErrorEnum string

const (
	Aecmw502ApplicationJSONErrorEnumBadGatewy Aecmw502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Aecmw502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Aecmw502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw502ApplicationJSONErrorEnum: %s", s)
	}
}

type Aecmw502ApplicationJSONErrorDescriptionEnum string

const (
	Aecmw502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Aecmw502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Aecmw502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Aecmw502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aecmw502ApplicationJSON - Bad gateway
type Aecmw502ApplicationJSON struct {
	Error            *Aecmw502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aecmw502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aecmw500ApplicationJSONErrorEnum string

const (
	Aecmw500ApplicationJSONErrorEnumInternalServerError Aecmw500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Aecmw500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Aecmw500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw500ApplicationJSONErrorEnum: %s", s)
	}
}

type Aecmw500ApplicationJSONErrorDescriptionEnum string

const (
	Aecmw500ApplicationJSONErrorDescriptionEnumInternalServerError Aecmw500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Aecmw500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Aecmw500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aecmw500ApplicationJSON - Internal server error
type Aecmw500ApplicationJSON struct {
	Error            *Aecmw500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aecmw500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aecmw404ApplicationJSONErrorEnum string

const (
	Aecmw404ApplicationJSONErrorEnumRecordNotFound Aecmw404ApplicationJSONErrorEnum = "record_not_found"
	Aecmw404ApplicationJSONErrorEnumURLNotFound    Aecmw404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Aecmw404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Aecmw404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw404ApplicationJSONErrorEnum: %s", s)
	}
}

type Aecmw404ApplicationJSONErrorDescriptionEnum string

const (
	Aecmw404ApplicationJSONErrorDescriptionEnumNoRecordFound               Aecmw404ApplicationJSONErrorDescriptionEnum = "No record found"
	Aecmw404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Aecmw404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Aecmw404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Aecmw404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aecmw404ApplicationJSON - No record found
type Aecmw404ApplicationJSON struct {
	Error            *Aecmw404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aecmw404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aecmw401ApplicationJSONErrorEnum string

const (
	Aecmw401ApplicationJSONErrorEnumInvalidAuthentication Aecmw401ApplicationJSONErrorEnum = "invalid_authentication"
	Aecmw401ApplicationJSONErrorEnumInvalidAuthorization  Aecmw401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Aecmw401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Aecmw401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw401ApplicationJSONErrorEnum: %s", s)
	}
}

type Aecmw401ApplicationJSONErrorDescriptionEnum string

const (
	Aecmw401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Aecmw401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Aecmw401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Aecmw401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Aecmw401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Aecmw401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aecmw401ApplicationJSON - Unauthorized access
type Aecmw401ApplicationJSON struct {
	Error            *Aecmw401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aecmw401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Aecmw400ApplicationJSONErrorEnum string

const (
	Aecmw400ApplicationJSONErrorEnumMissingParameter Aecmw400ApplicationJSONErrorEnum = "missing_parameter"
	Aecmw400ApplicationJSONErrorEnumInvalidParameter Aecmw400ApplicationJSONErrorEnum = "invalid_parameter"
	Aecmw400ApplicationJSONErrorEnumInvalidFormat    Aecmw400ApplicationJSONErrorEnum = "invalid_format"
	Aecmw400ApplicationJSONErrorEnumInvalidTxnid     Aecmw400ApplicationJSONErrorEnum = "invalid_txnid"
	Aecmw400ApplicationJSONErrorEnumInvalidConsentid Aecmw400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Aecmw400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Aecmw400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw400ApplicationJSONErrorEnum: %s", s)
	}
}

type Aecmw400ApplicationJSONErrorDescriptionEnum string

const (
	Aecmw400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Aecmw400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Aecmw400ApplicationJSONErrorDescriptionEnumBadRequest                              Aecmw400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Aecmw400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Aecmw400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Aecmw400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Aecmw400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Aecmw400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Aecmw400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Aecmw400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Aecmw400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Aecmw400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Aecmw400ApplicationJSON - Bad request
type Aecmw400ApplicationJSON struct {
	Error            *Aecmw400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Aecmw400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type AecmwResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Aecmw400ApplicationJSONObject *Aecmw400ApplicationJSON
	// Unauthorized access
	Aecmw401ApplicationJSONObject *Aecmw401ApplicationJSON
	// No record found
	Aecmw404ApplicationJSONObject *Aecmw404ApplicationJSON
	// Internal server error
	Aecmw500ApplicationJSONObject *Aecmw500ApplicationJSON
	// Bad gateway
	Aecmw502ApplicationJSONObject *Aecmw502ApplicationJSON
	// Service unavailable
	Aecmw503ApplicationJSONObject *Aecmw503ApplicationJSON
	// Gateway timeout
	Aecmw504ApplicationJSONObject *Aecmw504ApplicationJSON
}
