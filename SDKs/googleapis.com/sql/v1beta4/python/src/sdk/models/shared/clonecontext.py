"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import binlogcoordinates as shared_binlogcoordinates
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CloneContext:
    r"""Database instance clone context."""
    
    allocated_ip_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocatedIpRange'), 'exclude': lambda f: f is None }})
    r"""The name of the allocated ip range for the private ip Cloud SQL instance. For example: \\"google-managed-services-default\\". If set, the cloned instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?. Reserved for future use."""  
    bin_log_coordinates: Optional[shared_binlogcoordinates.BinLogCoordinates] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('binLogCoordinates'), 'exclude': lambda f: f is None }})
    r"""Binary log coordinates."""  
    database_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('databaseNames'), 'exclude': lambda f: f is None }})
    r"""(SQL Server only) Clone only the specified databases from the source instance. Clone all databases if empty."""  
    destination_instance_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationInstanceName'), 'exclude': lambda f: f is None }})
    r"""Name of the Cloud SQL instance to be created as a clone."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always `sql#cloneContext`."""  
    pitr_timestamp_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pitrTimestampMs'), 'exclude': lambda f: f is None }})
    r"""Reserved for future use."""  
    point_in_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pointInTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp, if specified, identifies the time to which the source instance is cloned."""  
    