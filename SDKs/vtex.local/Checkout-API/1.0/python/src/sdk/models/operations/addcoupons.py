"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCouponsRequestBody:
    
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order."""  
    

@dataclasses.dataclass
class AddCouponsRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    order_form_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'orderFormId', 'style': 'simple', 'explode': False }})
    r"""ID of the orderForm that will receive coupon information."""  
    request_body: AddCouponsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONAvailableAddresses:
    
    address_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressId'), 'exclude': lambda f: f is None }})
    r"""Address ID."""  
    address_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressType'), 'exclude': lambda f: f is None }})
    r"""Address type."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of the address."""  
    complement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complement'), 'exclude': lambda f: f is None }})
    r"""Complement to the address."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Country of the address. ISO three-letter code."""  
    geo_coordinates: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoCoordinates'), 'exclude': lambda f: f is None }})
    r"""Array containing two floats with geocoordinates, first longitude, then latitude."""  
    is_disposable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDisposable'), 'exclude': lambda f: f is None }})
    r"""Indicates whether address is disposable."""  
    neighborhood: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('neighborhood'), 'exclude': lambda f: f is None }})
    r"""Neighborhood of the address."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Number of the address."""  
    receiver_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverName'), 'exclude': lambda f: f is None }})
    r"""Name of the receiver."""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Reference that may help in the location of the address."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the address."""  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street'), 'exclude': lambda f: f is None }})
    r"""Street of the address."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONClientPreferencesData:
    r"""Object containing preferences from the client who placed the order."""
    
    locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})
    r"""Client's locale. Examples: `pt-BR` and `en-US`."""  
    optin_news_letter: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('optinNewsLetter'), 'exclude': lambda f: f is None }})
    r"""`true` if the client opted to receive newsletter from the store."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONClientProfileData:
    r"""Customer's profile information."""
    
    corporate_document: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corporateDocument'), 'exclude': lambda f: f is None }})
    r"""Corporate document, if the customer is a legal entity."""  
    corporate_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corporateName'), 'exclude': lambda f: f is None }})
    r"""Company name, if the customer is a legal entity."""  
    corporate_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corporatePhone'), 'exclude': lambda f: f is None }})
    r"""Corporate phone number, if the customer is a legal entity."""  
    customer_class: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerClass'), 'exclude': lambda f: f is None }})
    r"""Customer class."""  
    document: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document'), 'exclude': lambda f: f is None }})
    r"""Document informed by the customer."""  
    document_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentType'), 'exclude': lambda f: f is None }})
    r"""Type of the document informed by the customer."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address."""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName'), 'exclude': lambda f: f is None }})
    r"""First name."""  
    is_corporate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCorporate'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the customer is a legal entity."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName'), 'exclude': lambda f: f is None }})
    r"""Last name."""  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})
    r"""Phone number."""  
    profile_complete_on_loading: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileCompleteOnLoading'), 'exclude': lambda f: f is None }})
    r"""Indicates whether profile is complete on loading."""  
    profile_error_on_loading: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileErrorOnLoading'), 'exclude': lambda f: f is None }})
    r"""Indicates whether profile presents error on loading."""  
    state_inscription: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateInscription'), 'exclude': lambda f: f is None }})
    r"""State inscription, if the customer is a legal entity."""  
    trade_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tradeName'), 'exclude': lambda f: f is None }})
    r"""Trade name, if the customer is a legal entity."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONItemMetadataItems:
    
    detail_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detailUrl'), 'exclude': lambda f: f is None }})
    r"""Detail URL."""  
    ean: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ean'), 'exclude': lambda f: f is None }})
    r"""European Article Number."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Item ID."""  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUrl'), 'exclude': lambda f: f is None }})
    r"""Image URL."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Product name."""  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId'), 'exclude': lambda f: f is None }})
    r"""Product ID."""  
    ref_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refId'), 'exclude': lambda f: f is None }})
    r"""Ref ID."""  
    seller: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller'), 'exclude': lambda f: f is None }})
    r"""Seller."""  
    sku_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skuName'), 'exclude': lambda f: f is None }})
    r"""SKU name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONItemMetadata:
    r"""Item metadata."""
    
    items: Optional[list[AddCoupons200ApplicationJSONItemMetadataItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""List of objects containing metadata on each item in the order."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONItemsAdditionalInfo:
    r"""Additional information."""
    
    brand_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandId'), 'exclude': lambda f: f is None }})
    r"""Brand ID."""  
    brand_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandName'), 'exclude': lambda f: f is None }})
    r"""Brand name."""  
    dimension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimension'), 'exclude': lambda f: f is None }})
    r"""Dimension."""  
    offering_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offeringInfo'), 'exclude': lambda f: f is None }})
    r"""Offering information."""  
    offering_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offeringType'), 'exclude': lambda f: f is None }})
    r"""Offering type."""  
    offering_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offeringTypeId'), 'exclude': lambda f: f is None }})
    r"""Offering type ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONItemsBundleItems:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Service identifier."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Service name."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Service price in cents."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Service type."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONItemsPriceDefinitionSellingPrices:
    
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Rounding quantity, meaning how many items are rounded to this value."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value in cents for that specific rounding."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONItemsPriceDefinition:
    r"""Price information for all units of a specific item."""
    
    calculated_selling_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calculatedSellingPrice'), 'exclude': lambda f: f is None }})
    r"""Item's calculated unitary selling price in cents."""  
    selling_prices: Optional[list[AddCoupons200ApplicationJSONItemsPriceDefinitionSellingPrices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellingPrices'), 'exclude': lambda f: f is None }})
    r"""Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total."""  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Total value for all units of the item in cents."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONItemsPriceTags:
    
    identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier'), 'exclude': lambda f: f is None }})
    r"""Price tag identifier."""  
    is_percentual: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPercentual'), 'exclude': lambda f: f is None }})
    r"""Indicates whether price tag value is applied through a percentage."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Price tag name."""  
    raw_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rawValue'), 'exclude': lambda f: f is None }})
    r"""Price tag raw value."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Price tag value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONItemsProductCategories:
    r"""Object, where each field is an ID from `productCategoryIds`."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('{ID}'), 'exclude': lambda f: f is None }})
    r"""Product category corresponding to the ID in the field key."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONItems:
    
    additional_info: Optional[AddCoupons200ApplicationJSONItemsAdditionalInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInfo'), 'exclude': lambda f: f is None }})
    r"""Additional information."""  
    attachments: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachments'), 'exclude': lambda f: f is None }})
    r"""Array containing information on attachments."""  
    availability: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability'), 'exclude': lambda f: f is None }})
    r"""Availability"""  
    bundle_items: Optional[list[AddCoupons200ApplicationJSONItemsBundleItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bundleItems'), 'exclude': lambda f: f is None }})
    r"""Information on services sold along with the SKU. Example: a gift package."""  
    detail_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detailUrl'), 'exclude': lambda f: f is None }})
    r"""Detail URL."""  
    ean: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ean'), 'exclude': lambda f: f is None }})
    r"""European Article Number."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the item."""  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUrl'), 'exclude': lambda f: f is None }})
    r"""Image URL."""  
    is_gift: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isGift'), 'exclude': lambda f: f is None }})
    r"""Indicates whether item is a gift."""  
    list_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice'), 'exclude': lambda f: f is None }})
    r"""List price in cents."""  
    manual_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manualPrice'), 'exclude': lambda f: f is None }})
    r"""Manual price in cents."""  
    manual_price_applied_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manualPriceAppliedBy'), 'exclude': lambda f: f is None }})
    r"""User that applied the manual price, if that is the case."""  
    manufacturer_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturerCode'), 'exclude': lambda f: f is None }})
    r"""Manufacturer code."""  
    measurement_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurementUnit'), 'exclude': lambda f: f is None }})
    r"""Measurement unit"""  
    modal_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modalType'), 'exclude': lambda f: f is None }})
    r"""Modal type."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Product name."""  
    parent_assembly_binding: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentAssemblyBinding'), 'exclude': lambda f: f is None }})
    r"""Parent assembly binding."""  
    parent_item_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentItemIndex'), 'exclude': lambda f: f is None }})
    r"""Parent item index."""  
    pre_sale_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preSaleDate'), 'exclude': lambda f: f is None }})
    r"""Presale date."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price in cents."""  
    price_definition: Optional[AddCoupons200ApplicationJSONItemsPriceDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceDefinition'), 'exclude': lambda f: f is None }})
    r"""Price information for all units of a specific item."""  
    price_tags: Optional[list[AddCoupons200ApplicationJSONItemsPriceTags]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceTags'), 'exclude': lambda f: f is None }})
    r"""Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order."""  
    price_valid_until: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceValidUntil'), 'exclude': lambda f: f is None }})
    r"""Price expiration date and time."""  
    product_categories: Optional[AddCoupons200ApplicationJSONItemsProductCategories] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCategories'), 'exclude': lambda f: f is None }})
    r"""Object, where each field is an ID from `productCategoryIds`."""  
    product_category_ids: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCategoryIds'), 'exclude': lambda f: f is None }})
    r"""Product category IDs."""  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId'), 'exclude': lambda f: f is None }})
    r"""Product ID."""  
    product_ref_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productRefId'), 'exclude': lambda f: f is None }})
    r"""Product Ref ID."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity."""  
    ref_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refId'), 'exclude': lambda f: f is None }})
    r"""Ref ID."""  
    reward_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rewardValue'), 'exclude': lambda f: f is None }})
    r"""Reward value in cents."""  
    seller: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller'), 'exclude': lambda f: f is None }})
    r"""Seller."""  
    seller_chain: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerChain'), 'exclude': lambda f: f is None }})
    r"""Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order."""  
    selling_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellingPrice'), 'exclude': lambda f: f is None }})
    r"""Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead."""  
    sku_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skuName'), 'exclude': lambda f: f is None }})
    r"""SKU name."""  
    tax: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""Tax value in cents."""  
    unique_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uniqueId'), 'exclude': lambda f: f is None }})
    r"""Unique ID."""  
    unit_multiplier: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitMultiplier'), 'exclude': lambda f: f is None }})
    r"""Unit multiplier"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONItemsOrdination:
    r"""Object containing information about the ordering of items within the orderForm."""
    
    ascending: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ascending'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the ordering is ascending."""  
    criteria: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('criteria'), 'exclude': lambda f: f is None }})
    r"""Criteria adopted to order the items in the list."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONMarketingData:
    r"""Object containIng promotion data such as coupon tracking information and internal or external UTMs."""
    
    coupon: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coupon'), 'exclude': lambda f: f is None }})
    r"""Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order."""  
    utm_campaign: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmCampaign'), 'exclude': lambda f: f is None }})
    r"""UTM campaign."""  
    utmi_campaign: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmiCampaign'), 'exclude': lambda f: f is None }})
    r"""utmi_campaign (internal utm)."""  
    utmi_page: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmiPage'), 'exclude': lambda f: f is None }})
    r"""utmi_page (internal utm)."""  
    utmi_part: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmiPart'), 'exclude': lambda f: f is None }})
    r"""utmi_part (internal utm)."""  
    utm_medium: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmMedium'), 'exclude': lambda f: f is None }})
    r"""UTM medium."""  
    utm_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmSource'), 'exclude': lambda f: f is None }})
    r"""UTM source."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONPaymentDataGiftCards:
    
    balance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance'), 'exclude': lambda f: f is None }})
    r"""Gift card balance in cents."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Gift card ID."""  
    in_use: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inUse'), 'exclude': lambda f: f is None }})
    r"""Indicates whether gift card is in use."""  
    is_special_card: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSpecialCard'), 'exclude': lambda f: f is None }})
    r"""Indicates whether gift card is special."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Gift card name."""  
    redemption_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redemptionCode'), 'exclude': lambda f: f is None }})
    r"""Gift card redemption code."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Gift card value in cents."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONPaymentDataTransactionsPayments:
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID."""  
    bin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bin'), 'exclude': lambda f: f is None }})
    r"""Bin."""  
    installments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installments'), 'exclude': lambda f: f is None }})
    r"""Number of installments."""  
    payment_system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentSystem'), 'exclude': lambda f: f is None }})
    r"""Payment system."""  
    reference_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceValue'), 'exclude': lambda f: f is None }})
    r"""Reference value for calculating interest rates, in case it applies. Displayed in cents."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value including interest, in case it applies. Displayed in cents."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONPaymentDataTransactions:
    
    is_active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isActive'), 'exclude': lambda f: f is None }})
    r"""Indicates whether transaction is active."""  
    merchant_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantName'), 'exclude': lambda f: f is None }})
    r"""Merchant name."""  
    payments: Optional[list[AddCoupons200ApplicationJSONPaymentDataTransactionsPayments]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payments'), 'exclude': lambda f: f is None }})
    r"""Information on each payment."""  
    shared_transaction: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharedTransaction'), 'exclude': lambda f: f is None }})
    r"""Indicates whather transaction is shared."""  
    transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionId'), 'exclude': lambda f: f is None }})
    r"""Transaction ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONPaymentData:
    r"""Information on the order's payment."""
    
    gift_cards: Optional[list[AddCoupons200ApplicationJSONPaymentDataGiftCards]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giftCards'), 'exclude': lambda f: f is None }})
    r"""Gift card information, if it applies to the order."""  
    transactions: Optional[list[AddCoupons200ApplicationJSONPaymentDataTransactions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactions'), 'exclude': lambda f: f is None }})
    r"""Information on each transaction pertinent to the order."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONRatesAndBenefitsData:
    r"""Information on rates and benefits that apply to the order."""
    
    rate_and_benefits_identifiers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateAndBenefitsIdentifiers'), 'exclude': lambda f: f is None }})
    r"""List with rates and benefits identifiers."""  
    teaser: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teaser'), 'exclude': lambda f: f is None }})
    r"""List with rates and benefits teasers."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONSellers:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Seller ID."""  
    logo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo'), 'exclude': lambda f: f is None }})
    r"""Seller logo."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Seller name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONShippingDataAddress:
    r"""Address information."""
    
    address_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressId'), 'exclude': lambda f: f is None }})
    r"""Address ID."""  
    address_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressType'), 'exclude': lambda f: f is None }})
    r"""Type of address. For example, `Residential` or `Pickup`."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of the shipping address."""  
    complement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complement'), 'exclude': lambda f: f is None }})
    r"""Complement to the shipping address, in case it applies."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Three letter ISO code of the country of the shipping address."""  
    geo_coordinates: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoCoordinates'), 'exclude': lambda f: f is None }})
    r"""Array containing two floats with geocoordinates, first longitude, then latitude."""  
    is_disposable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDisposable'), 'exclude': lambda f: f is None }})
    r"""Indicates whether address is disposable."""  
    neighborhood: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('neighborhood'), 'exclude': lambda f: f is None }})
    r"""Neighborhood of the shipping address."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Number of the building, house or apartment in the shipping address."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal code."""  
    receiver_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverName'), 'exclude': lambda f: f is None }})
    r"""Name of the person who is going to receive the order."""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Complement that might help locate the shipping address more precisely in case of delivery."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the shipping address."""  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street'), 'exclude': lambda f: f is None }})
    r"""Street of the shipping address."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONShippingDataAvailableAddresses:
    
    address_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressId'), 'exclude': lambda f: f is None }})
    r"""Address ID."""  
    address_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressType'), 'exclude': lambda f: f is None }})
    r"""Type of address. For example, `Residential` or `Pickup`."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of the shipping address."""  
    complement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complement'), 'exclude': lambda f: f is None }})
    r"""Complement to the shipping address, in case it applies."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Three letter ISO code of the country of the shipping address."""  
    geo_coordinates: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoCoordinates'), 'exclude': lambda f: f is None }})
    r"""Array containing two floats with geocoordinates, first longitude, then latitude."""  
    is_disposable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDisposable'), 'exclude': lambda f: f is None }})
    r"""Indicates whether address is disposable."""  
    neighborhood: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('neighborhood'), 'exclude': lambda f: f is None }})
    r"""Neighborhood of the shipping address."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Number of the building, house or apartment in the shipping address."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal code."""  
    receiver_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverName'), 'exclude': lambda f: f is None }})
    r"""Name of the person who is going to receive the order."""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Complement that might help locate the shipping address more precisely in case of delivery."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the shipping address."""  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street'), 'exclude': lambda f: f is None }})
    r"""Street of the shipping address."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONShippingDataLogisticsInfoDeliveryChannels:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Delivery channel ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONShippingDataLogisticsInfoSlasDeliveryIds:
    
    courier_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courierId'), 'exclude': lambda f: f is None }})
    r"""Courier ID."""  
    courier_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courierName'), 'exclude': lambda f: f is None }})
    r"""Courier name."""  
    dock_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockId'), 'exclude': lambda f: f is None }})
    r"""Warehouse ID."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity."""  
    warehouse_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warehouseId'), 'exclude': lambda f: f is None }})
    r"""Warehouse ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress:
    r"""Address information."""
    
    address_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressType'), 'exclude': lambda f: f is None }})
    r"""Type of address. For example, `Residential` or `Pickup`."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of the shipping address."""  
    complement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complement'), 'exclude': lambda f: f is None }})
    r"""Complement to the shipping address, in case it applies."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Three letter ISO code of the country of the shipping address."""  
    geo_coordinates: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoCoordinates'), 'exclude': lambda f: f is None }})
    r"""Array containing two floats with geocoordinates, first longitude, then latitude."""  
    neighborhood: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('neighborhood'), 'exclude': lambda f: f is None }})
    r"""Neighborhood of the shipping address."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Number of the building, house or apartment in the shipping address."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal code."""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Complement that might help locate the shipping address more precisely in case of delivery."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the shipping address."""  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street'), 'exclude': lambda f: f is None }})
    r"""Street of the shipping address."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfo:
    r"""Information on the pickup store."""
    
    additional_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInfo'), 'exclude': lambda f: f is None }})
    r"""Additional information."""  
    address: Optional[AddCoupons200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfoAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Address information."""  
    dock_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockId'), 'exclude': lambda f: f is None }})
    r"""Corresponding dock ID."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('friendlyName'), 'exclude': lambda f: f is None }})
    r"""Friendly name."""  
    is_pickup_store: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPickupStore'), 'exclude': lambda f: f is None }})
    r"""Indicates whether it is the pickup store."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONShippingDataLogisticsInfoSlas:
    
    delivery_channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryChannel'), 'exclude': lambda f: f is None }})
    r"""Delivery channel."""  
    delivery_ids: Optional[list[AddCoupons200ApplicationJSONShippingDataLogisticsInfoSlasDeliveryIds]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryIds'), 'exclude': lambda f: f is None }})
    r"""Information on each delivery ID."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""SLA ID."""  
    list_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listPrice'), 'exclude': lambda f: f is None }})
    r"""List price in cents."""  
    lock_ttl: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockTTL'), 'exclude': lambda f: f is None }})
    r"""Estimate date of delivery."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""SLA name."""  
    pickup_distance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupDistance'), 'exclude': lambda f: f is None }})
    r"""Pickup point distance."""  
    pickup_point_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupPointId'), 'exclude': lambda f: f is None }})
    r"""Pickup point ID."""  
    pickup_store_info: Optional[AddCoupons200ApplicationJSONShippingDataLogisticsInfoSlasPickupStoreInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupStoreInfo'), 'exclude': lambda f: f is None }})
    r"""Information on the pickup store."""  
    polygon_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('polygonName'), 'exclude': lambda f: f is None }})
    r"""Polygon name."""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price in cents."""  
    shipping_estimate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingEstimate'), 'exclude': lambda f: f is None }})
    r"""Shipping estimate. For instance, Three business days will be represented `3bd`."""  
    shipping_estimate_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingEstimateDate'), 'exclude': lambda f: f is None }})
    r"""Shipping estimate date."""  
    tax: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""Tax in cents."""  
    transit_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transitTime'), 'exclude': lambda f: f is None }})
    r"""Transit time. For instance, \\"three business days\\" is represented `3bd`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONShippingDataLogisticsInfo:
    
    address_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressId'), 'exclude': lambda f: f is None }})
    r"""Address ID."""  
    delivery_channels: Optional[list[AddCoupons200ApplicationJSONShippingDataLogisticsInfoDeliveryChannels]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryChannels'), 'exclude': lambda f: f is None }})
    r"""List of available delivery channels."""  
    item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemId'), 'exclude': lambda f: f is None }})
    r"""Item ID."""  
    item_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemIndex'), 'exclude': lambda f: f is None }})
    r"""Index corresponding to the position of the object in the `items` array."""  
    selected_delivery_channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedDeliveryChannel'), 'exclude': lambda f: f is None }})
    r"""Delivery channel selected by the customer."""  
    selected_sla: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedSla'), 'exclude': lambda f: f is None }})
    r"""SLA selected by the customer."""  
    ships_to: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipsTo'), 'exclude': lambda f: f is None }})
    r"""List of countries that the item may be shipped to."""  
    slas: Optional[list[AddCoupons200ApplicationJSONShippingDataLogisticsInfoSlas]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slas'), 'exclude': lambda f: f is None }})
    r"""Information on available SLAs."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONShippingDataSelectedAddresses:
    
    address_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressId'), 'exclude': lambda f: f is None }})
    r"""Address ID."""  
    address_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressType'), 'exclude': lambda f: f is None }})
    r"""Type of address. For example, `Residential` or `Pickup`."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of the shipping address."""  
    complement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complement'), 'exclude': lambda f: f is None }})
    r"""Complement to the shipping address, in case it applies."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Three letter ISO code of the country of the shipping address."""  
    geo_coordinates: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoCoordinates'), 'exclude': lambda f: f is None }})
    r"""Array containing two floats with geocoordinates, first longitude, then latitude."""  
    is_disposable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDisposable'), 'exclude': lambda f: f is None }})
    r"""Indicates whether address is disposable."""  
    neighborhood: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('neighborhood'), 'exclude': lambda f: f is None }})
    r"""Neighborhood of the shipping address."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Number of the building, house or apartment in the shipping address."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal code."""  
    receiver_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverName'), 'exclude': lambda f: f is None }})
    r"""Name of the person who is going to receive the order."""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Complement that might help locate the shipping address more precisely in case of delivery."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the shipping address."""  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street'), 'exclude': lambda f: f is None }})
    r"""Street of the shipping address."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSONShippingData:
    r"""Shipping information pertinent to the order."""
    
    address: Optional[AddCoupons200ApplicationJSONShippingDataAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Address information."""  
    available_addresses: Optional[list[AddCoupons200ApplicationJSONShippingDataAvailableAddresses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableAddresses'), 'exclude': lambda f: f is None }})
    r"""Array with information on the available addresses for the order."""  
    logistics_info: Optional[list[AddCoupons200ApplicationJSONShippingDataLogisticsInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logisticsInfo'), 'exclude': lambda f: f is None }})
    r"""Array with logistics information. Each object in this array corresponds to an object in the `items` array, based on the respective `itemIndex`."""  
    selected_addresses: Optional[list[AddCoupons200ApplicationJSONShippingDataSelectedAddresses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedAddresses'), 'exclude': lambda f: f is None }})
    r"""Array with information on the selected addresses for the order."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddCoupons200ApplicationJSON:
    r"""OK"""
    
    allow_manual_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowManualPrice'), 'exclude': lambda f: f is None }})
    r"""Permission to modify item price manually."""  
    available_accounts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableAccounts'), 'exclude': lambda f: f is None }})
    r"""Available accounts."""  
    available_addresses: Optional[list[AddCoupons200ApplicationJSONAvailableAddresses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableAddresses'), 'exclude': lambda f: f is None }})
    r"""Information on each available address."""  
    can_edit_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canEditData'), 'exclude': lambda f: f is None }})
    r"""Data can be edited."""  
    client_preferences_data: Optional[AddCoupons200ApplicationJSONClientPreferencesData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientPreferencesData'), 'exclude': lambda f: f is None }})
    r"""Object containing preferences from the client who placed the order."""  
    client_profile_data: Optional[AddCoupons200ApplicationJSONClientProfileData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientProfileData'), 'exclude': lambda f: f is None }})
    r"""Customer's profile information."""  
    commercial_condition_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commercialConditionData'), 'exclude': lambda f: f is None }})
    r"""Object containing commercial condition information."""  
    custom_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customData'), 'exclude': lambda f: f is None }})
    r"""Customer additional information."""  
    gift_registry_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giftRegistryData'), 'exclude': lambda f: f is None }})
    r"""Gift registry list information."""  
    hooks_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hooksData'), 'exclude': lambda f: f is None }})
    r"""Hooks information."""  
    ignore_profile_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreProfileData'), 'exclude': lambda f: f is None }})
    r"""Ignore customer profile data."""  
    invoice_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceData'), 'exclude': lambda f: f is None }})
    r"""Object containing information pertinent to the order's invoice."""  
    is_checked_in: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCheckedIn'), 'exclude': lambda f: f is None }})
    r"""Indicates whether order is checked in."""  
    item_metadata: Optional[AddCoupons200ApplicationJSONItemMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemMetadata'), 'exclude': lambda f: f is None }})
    r"""Item metadata."""  
    items: Optional[list[AddCoupons200ApplicationJSONItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""Information on each item in the order."""  
    items_ordination: Optional[AddCoupons200ApplicationJSONItemsOrdination] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemsOrdination'), 'exclude': lambda f: f is None }})
    r"""Object containing information about the ordering of items within the orderForm."""  
    logged_in: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loggedIn'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the user is logged into the store."""  
    marketing_data: Optional[AddCoupons200ApplicationJSONMarketingData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingData'), 'exclude': lambda f: f is None }})
    r"""Object containIng promotion data such as coupon tracking information and internal or external UTMs."""  
    messages: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})
    r"""Array containing an object for each message generated by our servers while processing the request."""  
    open_text_field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openTextField'), 'exclude': lambda f: f is None }})
    r"""Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1)"""  
    order_form_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderFormId'), 'exclude': lambda f: f is None }})
    r"""ID of the orderForm corresponding to a specific cart."""  
    payment_data: Optional[AddCoupons200ApplicationJSONPaymentData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentData'), 'exclude': lambda f: f is None }})
    r"""Information on the order's payment."""  
    profile_provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileProvider'), 'exclude': lambda f: f is None }})
    r"""Profile provider."""  
    rates_and_benefits_data: Optional[AddCoupons200ApplicationJSONRatesAndBenefitsData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratesAndBenefitsData'), 'exclude': lambda f: f is None }})
    r"""Information on rates and benefits that apply to the order."""  
    sales_channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesChannel'), 'exclude': lambda f: f is None }})
    r"""Attribute created by the seller, in their VTEX store configuration."""  
    selectable_gifts: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectableGifts'), 'exclude': lambda f: f is None }})
    r"""Array containing the data of the item selected as a gift."""  
    sellers: Optional[list[AddCoupons200ApplicationJSONSellers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellers'), 'exclude': lambda f: f is None }})
    r"""Information on each seller."""  
    shipping_data: Optional[AddCoupons200ApplicationJSONShippingData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingData'), 'exclude': lambda f: f is None }})
    r"""Shipping information pertinent to the order."""  
    store_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeId'), 'exclude': lambda f: f is None }})
    r"""ID of the store."""  
    store_preferences_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storePreferencesData'), 'exclude': lambda f: f is None }})
    r"""Object containing data from the store's configuration (stored in VTEX's License Manager)."""  
    subscription_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionData'), 'exclude': lambda f: f is None }})
    r"""Subscription information."""  
    totalizers: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalizers'), 'exclude': lambda f: f is None }})
    r"""Array containing an object for each totalizer for the purchase. Totalizers contain the sum of values for a specific part of the order (e.g. Total item value, Total shipping value)."""  
    user_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userProfileId'), 'exclude': lambda f: f is None }})
    r"""Unique ID associated with the customer profile."""  
    user_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userType'), 'exclude': lambda f: f is None }})
    r"""User type."""  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Total value of the order without separating cents. For example, $24.99 is represented `2499`."""  
    

@dataclasses.dataclass
class AddCouponsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    add_coupons_200_application_json_object: Optional[AddCoupons200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    