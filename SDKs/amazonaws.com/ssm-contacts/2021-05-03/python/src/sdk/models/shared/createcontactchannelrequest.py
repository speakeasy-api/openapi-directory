"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import channeltype_enum as shared_channeltype_enum
from ..shared import contactchanneladdress as shared_contactchanneladdress
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateContactChannelRequest:
    
    contact_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContactId') }})  
    delivery_address: shared_contactchanneladdress.ContactChannelAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryAddress') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    type: shared_channeltype_enum.ChannelTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    defer_activation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeferActivation'), 'exclude': lambda f: f is None }})  
    idempotency_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdempotencyToken'), 'exclude': lambda f: f is None }})  
    