// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteLocalGatewayRouteActionEnum
type GETDeleteLocalGatewayRouteActionEnum string

const (
	GETDeleteLocalGatewayRouteActionEnumDeleteLocalGatewayRoute GETDeleteLocalGatewayRouteActionEnum = "DeleteLocalGatewayRoute"
)

func (e *GETDeleteLocalGatewayRouteActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeleteLocalGatewayRoute":
		*e = GETDeleteLocalGatewayRouteActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteLocalGatewayRouteActionEnum: %s", s)
	}
}

// GETDeleteLocalGatewayRouteVersionEnum
type GETDeleteLocalGatewayRouteVersionEnum string

const (
	GETDeleteLocalGatewayRouteVersionEnumTwoThousandAndSixteen1115 GETDeleteLocalGatewayRouteVersionEnum = "2016-11-15"
)

func (e *GETDeleteLocalGatewayRouteVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDeleteLocalGatewayRouteVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteLocalGatewayRouteVersionEnum: %s", s)
	}
}

type GETDeleteLocalGatewayRouteQueryParams struct {
	Action GETDeleteLocalGatewayRouteActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The CIDR range for the route. This must match the CIDR for the route exactly.
	DestinationCidrBlock *string `queryParam:"style=form,explode=true,name=DestinationCidrBlock"`
	//  Use a prefix list in place of <code>DestinationCidrBlock</code>. You cannot use <code>DestinationPrefixListId</code> and <code>DestinationCidrBlock</code> in the same request.
	DestinationPrefixListID *string `queryParam:"style=form,explode=true,name=DestinationPrefixListId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the local gateway route table.
	LocalGatewayRouteTableID string                                `queryParam:"style=form,explode=true,name=LocalGatewayRouteTableId"`
	Version                  GETDeleteLocalGatewayRouteVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDeleteLocalGatewayRouteHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeleteLocalGatewayRouteRequest struct {
	QueryParams GETDeleteLocalGatewayRouteQueryParams
	Headers     GETDeleteLocalGatewayRouteHeaders
}

type GETDeleteLocalGatewayRouteResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
