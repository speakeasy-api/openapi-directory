"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class PostRepliesRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostReplies200ApplicationJSONActionsSummary:
    
    can_act: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_act') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostReplies200ApplicationJSONReplyToUser:
    
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostReplies200ApplicationJSON:
    
    actions_summary: list[PostReplies200ApplicationJSONActionsSummary] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions_summary') }})  
    admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin') }})  
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    bookmarked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookmarked') }})  
    can_delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_delete') }})  
    can_edit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit') }})  
    can_recover: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_recover') }})  
    can_view_edit_history: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_view_edit_history') }})  
    can_wiki: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_wiki') }})  
    cooked: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cooked') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})  
    deleted_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted_at') }})  
    display_username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_username') }})  
    edit_reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edit_reason') }})  
    flair_bg_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_bg_color') }})  
    flair_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_color') }})  
    flair_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_name') }})  
    flair_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_url') }})  
    hidden: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hidden') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    incoming_link_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incoming_link_count') }})  
    moderator: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderator') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    post_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_number') }})  
    post_type: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_type') }})  
    primary_group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group_name') }})  
    quote_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quote_count') }})  
    readers_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readers_count') }})  
    reads: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reads') }})  
    reply_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_count') }})  
    reply_to_post_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_to_post_number') }})  
    reply_to_user: PostReplies200ApplicationJSONReplyToUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reply_to_user') }})  
    reviewable_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewable_id') }})  
    reviewable_score_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewable_score_count') }})  
    reviewable_score_pending_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewable_score_pending_count') }})  
    score: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score') }})  
    staff: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staff') }})  
    topic_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_id') }})  
    topic_slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_slug') }})  
    trust_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust_level') }})  
    updated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at') }})  
    user_deleted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_deleted') }})  
    user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})  
    user_title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_title') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    version: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})  
    wiki: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wiki') }})  
    yours: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yours') }})  
    

@dataclasses.dataclass
class PostRepliesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_replies_200_application_json_objects: Optional[list[PostReplies200ApplicationJSON]] = dataclasses.field(default=None)
    r"""post replies"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    