/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ScoutingObservation - Returns the requested scouting observation.
 */
public class ScoutingObservation {
    /**
     * The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;

    public ScoutingObservation withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Array of field ids associated with this observation.
     */
    @JsonProperty("fieldIds")
    public String[] fieldIds;

    public ScoutingObservation withFieldIds(String[] fieldIds) {
        this.fieldIds = fieldIds;
        return this;
    }
    
    /**
     * The id of a scouting observation.
     */
    @JsonProperty("id")
    public String id;

    public ScoutingObservation withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * GeoJSON
     */
    @JsonProperty("location")
    public Geometry location;

    public ScoutingObservation withLocation(Geometry location) {
        this.location = location;
        return this;
    }
    
    /**
     * Color of scouting pin assigned in the Climate FieldView app.
     * Limited in the Ux to a set of RGB values.
     * * #307af7
     * * #38d753
     * * #b037e4
     * * #ef3e3e
     * * #f7ec41
     * * #ff8439
     * * #808080
     * 
     */
    @JsonProperty("locationDisplayColor")
    public ScoutingObservationLocationDisplayColorEnum locationDisplayColor;

    public ScoutingObservation withLocationDisplayColor(ScoutingObservationLocationDisplayColorEnum locationDisplayColor) {
        this.locationDisplayColor = locationDisplayColor;
        return this;
    }
    
    /**
     * The text of the scouting observation. Maximum of 4000 characters.
     */
    @JsonProperty("note")
    public String note;

    public ScoutingObservation withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * The start time of the scouting observation. Time in ISO 8601 format with UTC timezone, 3 fractional seconds (https://tools.ietf.org/html/rfc3339).
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public ScoutingObservation withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * The status of the scouting observation For example : ACTIVE, DELETED
     */
    @JsonProperty("status")
    public ScoutingObservationStatusEnum status;

    public ScoutingObservation withStatus(ScoutingObservationStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * For example, ROCK_STONE, PONDING_WET, HAIL Maximum 20 tags allowed, 40 characters per tag.
     */
    @JsonProperty("tags")
    public ScoutingTag[] tags;

    public ScoutingObservation withTags(ScoutingTag[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * Permanent or seasonal
     */
    @JsonProperty("timespan")
    public ScoutingObservationTimespanEnum timespan;

    public ScoutingObservation withTimespan(ScoutingObservationTimespanEnum timespan) {
        this.timespan = timespan;
        return this;
    }
    
    /**
     * The title or summary of the scouting observation. 40 Characters long, no emojis, and leading and trailing whitespace will be trimmed.
     */
    @JsonProperty("title")
    public String title;

    public ScoutingObservation withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The time the scouting observation or any of its attachments was last updated.Time in ISO 8601 format with UTC timezone, 3 fractional seconds. (https://tools.ietf.org/html/rfc3339).
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;

    public ScoutingObservation withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public ScoutingObservation(@JsonProperty("endTime") OffsetDateTime endTime, @JsonProperty("fieldIds") String[] fieldIds, @JsonProperty("id") String id, @JsonProperty("location") Geometry location, @JsonProperty("locationDisplayColor") ScoutingObservationLocationDisplayColorEnum locationDisplayColor, @JsonProperty("note") String note, @JsonProperty("startTime") OffsetDateTime startTime, @JsonProperty("status") ScoutingObservationStatusEnum status, @JsonProperty("tags") ScoutingTag[] tags, @JsonProperty("timespan") ScoutingObservationTimespanEnum timespan, @JsonProperty("title") String title, @JsonProperty("updatedAt") OffsetDateTime updatedAt) {
        this.endTime = endTime;
        this.fieldIds = fieldIds;
        this.id = id;
        this.location = location;
        this.locationDisplayColor = locationDisplayColor;
        this.note = note;
        this.startTime = startTime;
        this.status = status;
        this.tags = tags;
        this.timespan = timespan;
        this.title = title;
        this.updatedAt = updatedAt;
  }
}
