<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Performs explanation on the data in the request. {% dynamic include "/ai-platform/includes/___explain-request" %} 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsExplainRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsExplainSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsExplainResponse
     */
	public function mlProjectsExplain(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsExplainRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsExplainSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsExplainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:explain', \OpenAPI\OpenAPI\Models\Operations\MlProjectsExplainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudMlV1ExplainRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsExplainRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsExplainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleApiHttpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleApiHttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the service account information associated with your project. You need this information in order to grant the service account permissions for the Google Cloud Storage location where you put your model training code for training the model with Google Cloud Machine Learning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsGetConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsGetConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsGetConfigResponse
     */
	public function mlProjectsGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsGetConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsGetConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:getConfig', \OpenAPI\OpenAPI\Models\Operations\MlProjectsGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsGetConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1GetConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1GetConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a training or a batch prediction job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsCreateResponse
     */
	public function mlProjectsJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudMlV1JobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1Job = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1Job', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the jobs in the project. If there are no jobs that match the request parameters, the list request returns an empty response body: {}.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsListResponse
     */
	public function mlProjectsJobsList(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1ListJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all locations that provides at least one type of CMLE capability.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsListResponse
     */
	public function mlProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/locations', \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1ListLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a study.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesCreateResponse
     */
	public function mlProjectsLocationsStudiesCreate(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/studies', \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudMlV1StudyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1Study = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1Study', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the studies in a region for an associated project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesListResponse
     */
	public function mlProjectsLocationsStudiesList(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/studies', \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1ListStudiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1ListStudiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsAddMeasurementRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsAddMeasurementSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsAddMeasurementResponse
     */
	public function mlProjectsLocationsStudiesTrialsAddMeasurement(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsAddMeasurementRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsAddMeasurementSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsAddMeasurementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:addMeasurement', \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsAddMeasurementRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudMlV1AddTrialMeasurementRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsAddMeasurementRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsAddMeasurementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1Trial = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1Trial', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCheckEarlyStoppingStateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCheckEarlyStoppingStateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCheckEarlyStoppingStateResponse
     */
	public function mlProjectsLocationsStudiesTrialsCheckEarlyStoppingState(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCheckEarlyStoppingStateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCheckEarlyStoppingStateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCheckEarlyStoppingStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:checkEarlyStoppingState', \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCheckEarlyStoppingStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCheckEarlyStoppingStateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCheckEarlyStoppingStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks a trial as complete.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCompleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCompleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCompleteResponse
     */
	public function mlProjectsLocationsStudiesTrialsComplete(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCompleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCompleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:complete', \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCompleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudMlV1CompleteTrialRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCompleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1Trial = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1Trial', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a user provided trial to a study.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCreateResponse
     */
	public function mlProjectsLocationsStudiesTrialsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/trials', \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudMlV1TrialInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1Trial = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1Trial', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the trials associated with a study.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListResponse
     */
	public function mlProjectsLocationsStudiesTrialsList(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/trials', \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1ListTrialsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1ListTrialsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the pareto-optimal trials for multi-objective study or the optimal trials for single-objective study. The definition of pareto-optimal can be checked in wiki page. https://en.wikipedia.org/wiki/Pareto_efficiency
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListOptimalTrialsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListOptimalTrialsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListOptimalTrialsResponse
     */
	public function mlProjectsLocationsStudiesTrialsListOptimalTrials(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListOptimalTrialsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListOptimalTrialsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListOptimalTrialsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/trials:listOptimalTrials', \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListOptimalTrialsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListOptimalTrialsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsListOptimalTrialsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1ListOptimalTrialsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1ListOptimalTrialsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a trial.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsStopResponse
     */
	public function mlProjectsLocationsStudiesTrialsStop(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:stop', \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1Trial = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1Trial', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds one or more trials to a study, with parameter values suggested by AI Platform Vizier. Returns a long-running operation associated with the generation of trial suggestions. When this long-running operation succeeds, it will contain a SuggestTrialsResponse.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsSuggestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsSuggestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsSuggestResponse
     */
	public function mlProjectsLocationsStudiesTrialsSuggest(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsSuggestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsSuggestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsSuggestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/trials:suggest', \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsSuggestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudMlV1SuggestTrialsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsSuggestRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsLocationsStudiesTrialsSuggestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a model which will later contain one or more versions. You must add at least one version before you can request predictions from the model. Add versions by calling projects.models.versions.create.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsCreateResponse
     */
	public function mlProjectsModelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/models', \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudMlV1ModelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1Model = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1Model', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsGetIamPolicyResponse
     */
	public function mlProjectsModelsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the models in a project. Each project can contain multiple models, and each model can have multiple versions. If there are no models that match the request parameters, the list request returns an empty response body: {}.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsListResponse
     */
	public function mlProjectsModelsList(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/models', \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1ListModelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1ListModelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsSetIamPolicyResponse
     */
	public function mlProjectsModelsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1SetIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsTestIamPermissionsResponse
     */
	public function mlProjectsModelsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1TestIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1TestIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version to be the default, you must call projects.models.versions.setDefault.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsCreateResponse
     */
	public function mlProjectsModelsVersionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudMlV1VersionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version that is set as the default version of the model unless it is the only remaining version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsDeleteResponse
     */
	public function mlProjectsModelsVersionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsListResponse
     */
	public function mlProjectsModelsVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1ListVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1ListVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsPatchResponse
     */
	public function mlProjectsModelsVersionsPatch(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudMlV1VersionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsSetDefaultRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsSetDefaultSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsSetDefaultResponse
     */
	public function mlProjectsModelsVersionsSetDefault(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsSetDefaultRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsSetDefaultSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsSetDefaultResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:setDefault', \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsSetDefaultRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsSetDefaultRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsModelsVersionsSetDefaultResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudMlV1Version = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudMlV1Version', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsCancelResponse
     */
	public function mlProjectsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsGetResponse
     */
	public function mlProjectsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsListResponse
     */
	public function mlProjectsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Performs online prediction on the data in the request. {% dynamic include "/ai-platform/includes/___predict-request" %} 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsPredictRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MlProjectsPredictSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MlProjectsPredictResponse
     */
	public function mlProjectsPredict(
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsPredictRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MlProjectsPredictSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MlProjectsPredictResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:predict', \OpenAPI\OpenAPI\Models\Operations\MlProjectsPredictRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudMlV1PredictRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MlProjectsPredictRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MlProjectsPredictResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleApiHttpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleApiHttpBody', 'json');
            }
        }

        return $response;
    }
}