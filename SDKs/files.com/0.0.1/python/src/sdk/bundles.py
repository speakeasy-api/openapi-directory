"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Bundles:
    r"""Operations about bundles"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_bundles_id(self, request: operations.DeleteBundlesIDRequest) -> operations.DeleteBundlesIDResponse:
        r"""Delete Bundle
        Delete Bundle
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteBundlesIDRequest, base_url, '/bundles/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteBundlesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_bundles(self, request: operations.GetBundlesRequest) -> operations.GetBundlesResponse:
        r"""List Bundles
        List Bundles
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bundles'
        
        query_params = utils.get_query_params(operations.GetBundlesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBundlesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BundleEntity]])
                res.bundle_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_bundles_id(self, request: operations.GetBundlesIDRequest) -> operations.GetBundlesIDResponse:
        r"""Show Bundle
        Show Bundle
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBundlesIDRequest, base_url, '/bundles/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBundlesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BundleEntity])
                res.bundle_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def patch_bundles_id(self, request: operations.PatchBundlesIDRequest) -> operations.PatchBundlesIDResponse:
        r"""Update Bundle
        Update Bundle
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchBundlesIDRequest, base_url, '/bundles/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchBundlesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BundleEntity])
                res.bundle_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def post_bundles(self, request: operations.PostBundlesRequestBody) -> operations.PostBundlesResponse:
        r"""Create Bundle
        Create Bundle
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bundles'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBundlesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BundleEntity])
                res.bundle_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def post_bundles_id_share(self, request: operations.PostBundlesIDShareRequest) -> operations.PostBundlesIDShareResponse:
        r"""Send email(s) with a link to bundle
        Send email(s) with a link to bundle
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostBundlesIDShareRequest, base_url, '/bundles/{id}/share', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBundlesIDShareResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    