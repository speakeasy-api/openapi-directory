"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import certificateauthorityconfig as shared_certificateauthorityconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CertificateIssuanceConfigKeyAlgorithmEnum(str, Enum):
    r"""Required. The key algorithm to use when generating the private key."""
    KEY_ALGORITHM_UNSPECIFIED = 'KEY_ALGORITHM_UNSPECIFIED'
    RSA_2048 = 'RSA_2048'
    ECDSA_P256 = 'ECDSA_P256'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CertificateIssuanceConfig:
    r"""CertificateIssuanceConfig specifies how to issue and manage a certificate."""
    
    certificate_authority_config: Optional[shared_certificateauthorityconfig.CertificateAuthorityConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificateAuthorityConfig'), 'exclude': lambda f: f is None }})
    r"""The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The creation timestamp of a CertificateIssuanceConfig."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""One or more paragraphs of text description of a CertificateIssuanceConfig."""  
    key_algorithm: Optional[CertificateIssuanceConfigKeyAlgorithmEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyAlgorithm'), 'exclude': lambda f: f is None }})
    r"""Required. The key algorithm to use when generating the private key."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Set of labels associated with a CertificateIssuanceConfig."""  
    lifetime: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifetime'), 'exclude': lambda f: f is None }})
    r"""Required. Workload certificate lifetime requested."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*/locations/*/certificateIssuanceConfigs/*`."""  
    rotation_window_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rotationWindowPercentage'), 'exclude': lambda f: f is None }})
    r"""Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The last update timestamp of a CertificateIssuanceConfig."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CertificateIssuanceConfigInput:
    r"""CertificateIssuanceConfig specifies how to issue and manage a certificate."""
    
    certificate_authority_config: Optional[shared_certificateauthorityconfig.CertificateAuthorityConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificateAuthorityConfig'), 'exclude': lambda f: f is None }})
    r"""The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""One or more paragraphs of text description of a CertificateIssuanceConfig."""  
    key_algorithm: Optional[CertificateIssuanceConfigKeyAlgorithmEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyAlgorithm'), 'exclude': lambda f: f is None }})
    r"""Required. The key algorithm to use when generating the private key."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Set of labels associated with a CertificateIssuanceConfig."""  
    lifetime: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifetime'), 'exclude': lambda f: f is None }})
    r"""Required. Workload certificate lifetime requested."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*/locations/*/certificateIssuanceConfigs/*`."""  
    rotation_window_percentage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rotationWindowPercentage'), 'exclude': lambda f: f is None }})
    r"""Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive."""  
    