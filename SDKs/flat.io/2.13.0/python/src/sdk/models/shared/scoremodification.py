"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import scorecreationtype_enum as shared_scorecreationtype_enum
from ..shared import scorelicense_enum as shared_scorelicense_enum
from ..shared import scoreprivacy_enum as shared_scoreprivacy_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScoreModification:
    r"""Edit the score metadata"""
    
    arranger: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arranger'), 'exclude': lambda f: f is None }})
    r"""The arranger of the score"""  
    composer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('composer'), 'exclude': lambda f: f is None }})
    r"""The composer of the score"""  
    creation_type: Optional[shared_scorecreationtype_enum.ScoreCreationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationType'), 'exclude': lambda f: f is None }})
    r"""The type of creation (an orginal, an arrangement)"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the creation"""  
    license: Optional[shared_scorelicense_enum.ScoreLicenseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license'), 'exclude': lambda f: f is None }})
    r"""License of the creation. Read more about the Creative Commons licenses on https://creativecommons.org/licenses/"""  
    license_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenseText'), 'exclude': lambda f: f is None }})
    r"""The rights info written on the score"""  
    lyricist: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lyricist'), 'exclude': lambda f: f is None }})
    r"""The lyricist of the score"""  
    privacy: Optional[shared_scoreprivacy_enum.ScorePrivacyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})
    r"""The score main privacy mode.
    
    - `public`: The score is public on the Internet. This one can be accessible at the url `https://flat.io/score/{score}` and can be modified and administred by specified collaborators users.
    - `private`: The score is private and can be only accessed, modified and administred by specified collaborators users.
    - `privateLink`: The score is private but can be accessed using a private link `htmlUrl` or the private key in the property `sharingKey`.
    - `organizationPublic`: _Available only with [Flat for Education](https://flat.io/edu)._ The score is public in the organization: users of the same organization can access to this one. The score can be modified and administred by specified collaborators users.
    
    The score can also be individually shared to a set of users or groups using the different collaborators API methods.
    
    When a file is synchronized from an external source (e.g. Google Drive) and the sharing options are changed on the source, Flat will chose the best privacy mode for the file.
    
    When using a [Flat for Education](https://flat.io/edu) account, some of the modes may not be available if disabled by an administrator of the organization (e.g. by default the `public` mode is not available).
    """  
    sharing_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharingKey'), 'exclude': lambda f: f is None }})
    r"""When using the `privacy` mode `privateLink`, this property can be used to set a custom sharing key, otherwise a new key will be generated."""  
    subtitle: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtitle'), 'exclude': lambda f: f is None }})
    r"""The subtitle of the score"""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Tags describing the score"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the score"""  
    