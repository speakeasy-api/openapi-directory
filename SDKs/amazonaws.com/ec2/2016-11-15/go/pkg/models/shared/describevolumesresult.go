// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeVolumesResultVolumesAttachmentsStateEnum - The attachment state of the volume.
type DescribeVolumesResultVolumesAttachmentsStateEnum string

const (
	DescribeVolumesResultVolumesAttachmentsStateEnumAttaching DescribeVolumesResultVolumesAttachmentsStateEnum = "attaching"
	DescribeVolumesResultVolumesAttachmentsStateEnumAttached  DescribeVolumesResultVolumesAttachmentsStateEnum = "attached"
	DescribeVolumesResultVolumesAttachmentsStateEnumDetaching DescribeVolumesResultVolumesAttachmentsStateEnum = "detaching"
	DescribeVolumesResultVolumesAttachmentsStateEnumDetached  DescribeVolumesResultVolumesAttachmentsStateEnum = "detached"
	DescribeVolumesResultVolumesAttachmentsStateEnumBusy      DescribeVolumesResultVolumesAttachmentsStateEnum = "busy"
)

func (e *DescribeVolumesResultVolumesAttachmentsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "attaching":
		fallthrough
	case "attached":
		fallthrough
	case "detaching":
		fallthrough
	case "detached":
		fallthrough
	case "busy":
		*e = DescribeVolumesResultVolumesAttachmentsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVolumesResultVolumesAttachmentsStateEnum: %s", s)
	}
}

// DescribeVolumesResultVolumesAttachments - Describes volume attachment details.
type DescribeVolumesResultVolumesAttachments struct {
	AttachTime          *time.Time
	DeleteOnTermination *bool
	Device              *string
	InstanceID          *string
	State               *DescribeVolumesResultVolumesAttachmentsStateEnum
	VolumeID            *string
}

// DescribeVolumesResultVolumesStateEnum - The volume state.
type DescribeVolumesResultVolumesStateEnum string

const (
	DescribeVolumesResultVolumesStateEnumCreating  DescribeVolumesResultVolumesStateEnum = "creating"
	DescribeVolumesResultVolumesStateEnumAvailable DescribeVolumesResultVolumesStateEnum = "available"
	DescribeVolumesResultVolumesStateEnumInUse     DescribeVolumesResultVolumesStateEnum = "in-use"
	DescribeVolumesResultVolumesStateEnumDeleting  DescribeVolumesResultVolumesStateEnum = "deleting"
	DescribeVolumesResultVolumesStateEnumDeleted   DescribeVolumesResultVolumesStateEnum = "deleted"
	DescribeVolumesResultVolumesStateEnumError     DescribeVolumesResultVolumesStateEnum = "error"
)

func (e *DescribeVolumesResultVolumesStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "creating":
		fallthrough
	case "available":
		fallthrough
	case "in-use":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		fallthrough
	case "error":
		*e = DescribeVolumesResultVolumesStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVolumesResultVolumesStateEnum: %s", s)
	}
}

// DescribeVolumesResultVolumesTags - Describes a tag.
type DescribeVolumesResultVolumesTags struct {
	Key   *string
	Value *string
}

// DescribeVolumesResultVolumesVolumeTypeEnum - The volume type.
type DescribeVolumesResultVolumesVolumeTypeEnum string

const (
	DescribeVolumesResultVolumesVolumeTypeEnumStandard DescribeVolumesResultVolumesVolumeTypeEnum = "standard"
	DescribeVolumesResultVolumesVolumeTypeEnumIo1      DescribeVolumesResultVolumesVolumeTypeEnum = "io1"
	DescribeVolumesResultVolumesVolumeTypeEnumIo2      DescribeVolumesResultVolumesVolumeTypeEnum = "io2"
	DescribeVolumesResultVolumesVolumeTypeEnumGp2      DescribeVolumesResultVolumesVolumeTypeEnum = "gp2"
	DescribeVolumesResultVolumesVolumeTypeEnumSc1      DescribeVolumesResultVolumesVolumeTypeEnum = "sc1"
	DescribeVolumesResultVolumesVolumeTypeEnumSt1      DescribeVolumesResultVolumesVolumeTypeEnum = "st1"
	DescribeVolumesResultVolumesVolumeTypeEnumGp3      DescribeVolumesResultVolumesVolumeTypeEnum = "gp3"
)

func (e *DescribeVolumesResultVolumesVolumeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "standard":
		fallthrough
	case "io1":
		fallthrough
	case "io2":
		fallthrough
	case "gp2":
		fallthrough
	case "sc1":
		fallthrough
	case "st1":
		fallthrough
	case "gp3":
		*e = DescribeVolumesResultVolumesVolumeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVolumesResultVolumesVolumeTypeEnum: %s", s)
	}
}

// DescribeVolumesResultVolumes - Describes a volume.
type DescribeVolumesResultVolumes struct {
	Attachments        []DescribeVolumesResultVolumesAttachments
	AvailabilityZone   *string
	CreateTime         *time.Time
	Encrypted          *bool
	FastRestored       *bool
	Iops               *int64
	KmsKeyID           *string
	MultiAttachEnabled *bool
	OutpostArn         *string
	Size               *int64
	SnapshotID         *string
	State              *DescribeVolumesResultVolumesStateEnum
	Tags               []DescribeVolumesResultVolumesTags
	Throughput         *int64
	VolumeID           *string
	VolumeType         *DescribeVolumesResultVolumesVolumeTypeEnum
}

// DescribeVolumesResult - Success
type DescribeVolumesResult struct {
	NextToken *string
	Volumes   []DescribeVolumesResultVolumes
}
