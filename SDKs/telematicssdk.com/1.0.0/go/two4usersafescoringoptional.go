// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/utils"
	"strings"
)

type two4UserSafeScoringOptional struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newTwo4UserSafeScoringOptional(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *two4UserSafeScoringOptional {
	return &two4UserSafeScoringOptional{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// UserSafeScoringAccumulatedValueV1ScoringsIndividual - User safe scoring - Accumulated value - v1/Scorings/individual
// Safe driving score API. This API is a part of Telematics API that we provide to our clients.
//
// Rating description presents the universal approach, developed by our company on the basis of many years of experience; most of the input variables presented in this document could be adopted depending on the needs of the company and the focus on the specific characteristics of clients' driving style.
// Since 2019 we have moved to the 3rd Generation of the scoring model which allows distinguishing a context of events and add penalty points in accordance with a level of risk generated by an event
//
// [More details](https://docs.telematicssdk.com)
func (s *two4UserSafeScoringOptional) UserSafeScoringAccumulatedValueV1ScoringsIndividual(ctx context.Context, request operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualRequest) (*operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/statistics/v1/Scorings/individual/"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.UserSafeScoringAccumulatedValueV1ScoringsIndividualResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.UserSafeScoringAccumulatedValueV1ScoringsIndividual200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.UserSafeScoringAccumulatedValueV1ScoringsIndividual200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// UserSafeScoringDailyValueV1ScoringsIndividualDaily - User safe scoring - daily value - /v1/Scorings/individual/daily
// User safe scoring - daily value - /v1/Scorings/individual/daily
func (s *two4UserSafeScoringOptional) UserSafeScoringDailyValueV1ScoringsIndividualDaily(ctx context.Context, request operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyRequest) (*operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/statistics/v1/Scorings/individual/daily"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.UserSafeScoringDailyValueV1ScoringsIndividualDailyResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.UserSafeScoringDailyValueV1ScoringsIndividualDaily200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.UserSafeScoringDailyValueV1ScoringsIndividualDaily200ApplicationJSONObject = out
		}
	}

	return res, nil
}
