"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import playerseason as shared_playerseason
from enum import Enum
from typing import Optional

class TeamHittingVsStartingPitcherFormatEnum(str, Enum):
    r"""Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>."""
    XML = 'XML'
    JSON = 'JSON'


@dataclasses.dataclass
class TeamHittingVsStartingPitcherRequest:
    
    format: TeamHittingVsStartingPitcherFormatEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'format', 'style': 'simple', 'explode': False }})
    r"""Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>."""  
    gameid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'gameid', 'style': 'simple', 'explode': False }})
    r"""The GameID of an MLB game.  GameIDs can be found in the Games API.  Valid entries are <code>14620</code> or <code>16905</code>"""  
    team: str = dataclasses.field(metadata={'path_param': { 'field_name': 'team', 'style': 'simple', 'explode': False }})
    r"""The abbreviation of the requested team.
    <br>Examples: <code>SF</code>, <code>NYY</code>.
    """  
    

@dataclasses.dataclass
class TeamHittingVsStartingPitcherResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    player_seasons: Optional[list[shared_playerseason.PlayerSeason]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    