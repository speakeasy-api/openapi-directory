// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateAlgorithmXAmzTargetEnum
type CreateAlgorithmXAmzTargetEnum string

const (
	CreateAlgorithmXAmzTargetEnumSageMakerCreateAlgorithm CreateAlgorithmXAmzTargetEnum = "SageMaker.CreateAlgorithm"
)

func (e CreateAlgorithmXAmzTargetEnum) ToPointer() *CreateAlgorithmXAmzTargetEnum {
	return &e
}

func (e *CreateAlgorithmXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.CreateAlgorithm":
		*e = CreateAlgorithmXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAlgorithmXAmzTargetEnum: %v", v)
	}
}

type CreateAlgorithmRequest struct {
	CreateAlgorithmInput shared.CreateAlgorithmInput   `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           CreateAlgorithmXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateAlgorithmResponse struct {
	ContentType string
	// Success
	CreateAlgorithmOutput *shared.CreateAlgorithmOutput
	StatusCode            int
	RawResponse           *http.Response
}
