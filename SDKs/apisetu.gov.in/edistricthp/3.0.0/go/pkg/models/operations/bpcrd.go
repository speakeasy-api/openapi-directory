// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BpcrdSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type BpcrdRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// BpcrdRequestBodyFormatEnum - The format of the certificate in response.
type BpcrdRequestBodyFormatEnum string

const (
	BpcrdRequestBodyFormatEnumPdf BpcrdRequestBodyFormatEnum = "pdf"
)

func (e BpcrdRequestBodyFormatEnum) ToPointer() *BpcrdRequestBodyFormatEnum {
	return &e
}

func (e *BpcrdRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = BpcrdRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BpcrdRequestBodyFormatEnum: %v", v)
	}
}

// BpcrdRequestBody - Request format
type BpcrdRequestBody struct {
	CertificateParameters *BpcrdRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format BpcrdRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Bpcrd504ApplicationJSONErrorEnum string

const (
	Bpcrd504ApplicationJSONErrorEnumGatewayTimeout Bpcrd504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Bpcrd504ApplicationJSONErrorEnum) ToPointer() *Bpcrd504ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcrd504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Bpcrd504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd504ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcrd504ApplicationJSONErrorDescriptionEnum string

const (
	Bpcrd504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Bpcrd504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Bpcrd504ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcrd504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcrd504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Bpcrd504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcrd504ApplicationJSON - Gateway timeout
type Bpcrd504ApplicationJSON struct {
	Error            *Bpcrd504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcrd504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcrd503ApplicationJSONErrorEnum string

const (
	Bpcrd503ApplicationJSONErrorEnumServiceUnavailable Bpcrd503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Bpcrd503ApplicationJSONErrorEnum) ToPointer() *Bpcrd503ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcrd503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Bpcrd503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd503ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcrd503ApplicationJSONErrorDescriptionEnum string

const (
	Bpcrd503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Bpcrd503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Bpcrd503ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcrd503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcrd503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Bpcrd503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcrd503ApplicationJSON - Service unavailable
type Bpcrd503ApplicationJSON struct {
	Error            *Bpcrd503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcrd503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcrd502ApplicationJSONErrorEnum string

const (
	Bpcrd502ApplicationJSONErrorEnumBadGatewy Bpcrd502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Bpcrd502ApplicationJSONErrorEnum) ToPointer() *Bpcrd502ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcrd502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Bpcrd502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd502ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcrd502ApplicationJSONErrorDescriptionEnum string

const (
	Bpcrd502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Bpcrd502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Bpcrd502ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcrd502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcrd502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Bpcrd502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcrd502ApplicationJSON - Bad gateway
type Bpcrd502ApplicationJSON struct {
	Error            *Bpcrd502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcrd502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcrd500ApplicationJSONErrorEnum string

const (
	Bpcrd500ApplicationJSONErrorEnumInternalServerError Bpcrd500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Bpcrd500ApplicationJSONErrorEnum) ToPointer() *Bpcrd500ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcrd500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Bpcrd500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd500ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcrd500ApplicationJSONErrorDescriptionEnum string

const (
	Bpcrd500ApplicationJSONErrorDescriptionEnumInternalServerError Bpcrd500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Bpcrd500ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcrd500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcrd500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Bpcrd500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcrd500ApplicationJSON - Internal server error
type Bpcrd500ApplicationJSON struct {
	Error            *Bpcrd500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcrd500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcrd404ApplicationJSONErrorEnum string

const (
	Bpcrd404ApplicationJSONErrorEnumRecordNotFound Bpcrd404ApplicationJSONErrorEnum = "record_not_found"
	Bpcrd404ApplicationJSONErrorEnumURLNotFound    Bpcrd404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Bpcrd404ApplicationJSONErrorEnum) ToPointer() *Bpcrd404ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcrd404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Bpcrd404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd404ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcrd404ApplicationJSONErrorDescriptionEnum string

const (
	Bpcrd404ApplicationJSONErrorDescriptionEnumNoRecordFound               Bpcrd404ApplicationJSONErrorDescriptionEnum = "No record found"
	Bpcrd404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Bpcrd404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Bpcrd404ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcrd404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcrd404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Bpcrd404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcrd404ApplicationJSON - No record found
type Bpcrd404ApplicationJSON struct {
	Error            *Bpcrd404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcrd404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcrd401ApplicationJSONErrorEnum string

const (
	Bpcrd401ApplicationJSONErrorEnumInvalidAuthentication Bpcrd401ApplicationJSONErrorEnum = "invalid_authentication"
	Bpcrd401ApplicationJSONErrorEnumInvalidAuthorization  Bpcrd401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Bpcrd401ApplicationJSONErrorEnum) ToPointer() *Bpcrd401ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcrd401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Bpcrd401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd401ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcrd401ApplicationJSONErrorDescriptionEnum string

const (
	Bpcrd401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Bpcrd401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Bpcrd401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Bpcrd401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Bpcrd401ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcrd401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcrd401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Bpcrd401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcrd401ApplicationJSON - Unauthorized access
type Bpcrd401ApplicationJSON struct {
	Error            *Bpcrd401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcrd401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bpcrd400ApplicationJSONErrorEnum string

const (
	Bpcrd400ApplicationJSONErrorEnumMissingParameter Bpcrd400ApplicationJSONErrorEnum = "missing_parameter"
	Bpcrd400ApplicationJSONErrorEnumInvalidParameter Bpcrd400ApplicationJSONErrorEnum = "invalid_parameter"
	Bpcrd400ApplicationJSONErrorEnumInvalidFormat    Bpcrd400ApplicationJSONErrorEnum = "invalid_format"
	Bpcrd400ApplicationJSONErrorEnumInvalidTxnid     Bpcrd400ApplicationJSONErrorEnum = "invalid_txnid"
	Bpcrd400ApplicationJSONErrorEnumInvalidConsentid Bpcrd400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Bpcrd400ApplicationJSONErrorEnum) ToPointer() *Bpcrd400ApplicationJSONErrorEnum {
	return &e
}

func (e *Bpcrd400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Bpcrd400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd400ApplicationJSONErrorEnum: %v", v)
	}
}

type Bpcrd400ApplicationJSONErrorDescriptionEnum string

const (
	Bpcrd400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Bpcrd400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Bpcrd400ApplicationJSONErrorDescriptionEnumBadRequest                              Bpcrd400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Bpcrd400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Bpcrd400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Bpcrd400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Bpcrd400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Bpcrd400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Bpcrd400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Bpcrd400ApplicationJSONErrorDescriptionEnum) ToPointer() *Bpcrd400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bpcrd400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Bpcrd400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bpcrd400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bpcrd400ApplicationJSON - Bad request
type Bpcrd400ApplicationJSON struct {
	Error            *Bpcrd400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bpcrd400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type BpcrdResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Bpcrd400ApplicationJSONObject *Bpcrd400ApplicationJSON
	// Unauthorized access
	Bpcrd401ApplicationJSONObject *Bpcrd401ApplicationJSON
	// No record found
	Bpcrd404ApplicationJSONObject *Bpcrd404ApplicationJSON
	// Internal server error
	Bpcrd500ApplicationJSONObject *Bpcrd500ApplicationJSON
	// Bad gateway
	Bpcrd502ApplicationJSONObject *Bpcrd502ApplicationJSON
	// Service unavailable
	Bpcrd503ApplicationJSONObject *Bpcrd503ApplicationJSON
	// Gateway timeout
	Bpcrd504ApplicationJSONObject *Bpcrd504ApplicationJSON
}
