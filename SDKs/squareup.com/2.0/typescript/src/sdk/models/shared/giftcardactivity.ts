/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GiftCardActivityActivate } from "./giftcardactivityactivate";
import { GiftCardActivityAdjustDecrement } from "./giftcardactivityadjustdecrement";
import { GiftCardActivityAdjustIncrement } from "./giftcardactivityadjustincrement";
import { GiftCardActivityBlock } from "./giftcardactivityblock";
import { GiftCardActivityClearBalance } from "./giftcardactivityclearbalance";
import { GiftCardActivityDeactivate } from "./giftcardactivitydeactivate";
import { GiftCardActivityImport } from "./giftcardactivityimport";
import { GiftCardActivityImportReversal } from "./giftcardactivityimportreversal";
import { GiftCardActivityLoad } from "./giftcardactivityload";
import { GiftCardActivityRedeem } from "./giftcardactivityredeem";
import { GiftCardActivityRefund } from "./giftcardactivityrefund";
import { GiftCardActivityUnblock } from "./giftcardactivityunblock";
import { GiftCardActivityUnlinkedActivityRefund } from "./giftcardactivityunlinkedactivityrefund";
import { Money } from "./money";
import { Expose, Type } from "class-transformer";

/**
 * Represents an action performed on a gift card that affects its state or balance.
 */
export class GiftCardActivity extends SpeakeasyBase {
  /**
   * Describes a gift card activity of the ACTIVATE type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activate_activity_details" })
  @Type(() => GiftCardActivityActivate)
  activateActivityDetails?: GiftCardActivityActivate;

  /**
   * Describes a gift card activity of the ADJUST_DECREMENT type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adjust_decrement_activity_details" })
  @Type(() => GiftCardActivityAdjustDecrement)
  adjustDecrementActivityDetails?: GiftCardActivityAdjustDecrement;

  /**
   * Describes a gift card activity of the ADJUST_INCREMENT type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adjust_increment_activity_details" })
  @Type(() => GiftCardActivityAdjustIncrement)
  adjustIncrementActivityDetails?: GiftCardActivityAdjustIncrement;

  /**
   * Describes a gift card activity of the BLOCK type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "block_activity_details" })
  @Type(() => GiftCardActivityBlock)
  blockActivityDetails?: GiftCardActivityBlock;

  /**
   * Describes a gift card activity of the CLEAR_BALANCE type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clear_balance_activity_details" })
  @Type(() => GiftCardActivityClearBalance)
  clearBalanceActivityDetails?: GiftCardActivityClearBalance;

  /**
   * The timestamp when the gift card activity was created, in RFC 3339 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  /**
   * Describes a gift card activity of the DEACTIVATE type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deactivate_activity_details" })
  @Type(() => GiftCardActivityDeactivate)
  deactivateActivityDetails?: GiftCardActivityDeactivate;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gift_card_balance_money" })
  @Type(() => Money)
  giftCardBalanceMoney?: Money;

  /**
   * The gift card GAN. The GAN is not required if `gift_card_id` is present.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gift_card_gan" })
  giftCardGan?: string;

  /**
   * The gift card ID. The ID is not required if a GAN is present.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gift_card_id" })
  giftCardId?: string;

  /**
   * The unique ID of the gift card activity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Describes a gift card activity of the IMPORT type and the `GiftCardGANSource` is OTHER
   *
   * @remarks
   * (a third-party gift card).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "import_activity_details" })
  @Type(() => GiftCardActivityImport)
  importActivityDetails?: GiftCardActivityImport;

  /**
   * Present only when GiftCardActivityType is IMPORT_REVERSAL and GiftCardGANSource is OTHER
   */
  @SpeakeasyMetadata()
  @Expose({ name: "import_reversal_activity_details" })
  @Type(() => GiftCardActivityImportReversal)
  importReversalActivityDetails?: GiftCardActivityImportReversal;

  /**
   * Present only when `GiftCardActivityType` is LOAD.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "load_activity_details" })
  @Type(() => GiftCardActivityLoad)
  loadActivityDetails?: GiftCardActivityLoad;

  /**
   * The ID of the location at which the activity occurred.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location_id" })
  locationId: string;

  /**
   * Present only when `GiftCardActivityType` is REDEEM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "redeem_activity_details" })
  @Type(() => GiftCardActivityRedeem)
  redeemActivityDetails?: GiftCardActivityRedeem;

  /**
   * Present only when `GiftCardActivityType` is REFUND.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refund_activity_details" })
  @Type(() => GiftCardActivityRefund)
  refundActivityDetails?: GiftCardActivityRefund;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: any;

  /**
   * Present only when `GiftCardActivityType` is UNBLOCK.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unblock_activity_details" })
  @Type(() => GiftCardActivityUnblock)
  unblockActivityDetails?: GiftCardActivityUnblock;

  /**
   * Present only when `GiftCardActivityType` is UNLINKED_ACTIVITY_REFUND.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unlinked_activity_refund_activity_details" })
  @Type(() => GiftCardActivityUnlinkedActivityRefund)
  unlinkedActivityRefundActivityDetails?: GiftCardActivityUnlinkedActivityRefund;
}
