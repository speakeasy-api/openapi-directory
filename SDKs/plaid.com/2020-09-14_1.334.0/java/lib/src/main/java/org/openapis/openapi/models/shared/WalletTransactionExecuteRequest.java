/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WalletTransactionExecuteRequest - WalletTransactionExecuteRequest defines the request schema for `/wallet/transaction/execute`
 */
public class WalletTransactionExecuteRequest {
    /**
     * The amount and currency of a transaction
     */
    @JsonProperty("amount")
    public java.util.Map<String, Object> amount;
    public WalletTransactionExecuteRequest withAmount(java.util.Map<String, Object> amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;
    public WalletTransactionExecuteRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * An object representing the e-wallet transaction's counterparty
     */
    @JsonProperty("counterparty")
    public java.util.Map<String, Object> counterparty;
    public WalletTransactionExecuteRequest withCounterparty(java.util.Map<String, Object> counterparty) {
        this.counterparty = counterparty;
        return this;
    }
    
    /**
     * A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.
     * 
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     */
    @JsonProperty("idempotency_key")
    public String idempotencyKey;
    public WalletTransactionExecuteRequest withIdempotencyKey(String idempotencyKey) {
        this.idempotencyKey = idempotencyKey;
        return this;
    }
    
    /**
     * A reference for the transaction. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces.
     * Ensure that the `reference` field is unique for each transaction.
     */
    @JsonProperty("reference")
    public String reference;
    public WalletTransactionExecuteRequest withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    public String secret;
    public WalletTransactionExecuteRequest withSecret(String secret) {
        this.secret = secret;
        return this;
    }
    
    /**
     * The ID of the e-wallet to debit from
     */
    @JsonProperty("wallet_id")
    public String walletId;
    public WalletTransactionExecuteRequest withWalletId(String walletId) {
        this.walletId = walletId;
        return this;
    }
    
}
