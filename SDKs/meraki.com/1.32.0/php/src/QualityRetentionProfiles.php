<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class QualityRetentionProfiles 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates new quality retention profile for this network.
     * 
     * Creates new quality retention profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileResponse
     */
	public function createNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkCameraQualityRetentionProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an existing quality retention profile for this network.
     * 
     * Delete an existing quality retention profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileResponse
     */
	public function deleteNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Retrieve a single quality retention profile
     * 
     * Retrieve a single quality retention profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileResponse
     */
	public function getNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraQualityRetentionProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the quality retention profiles for this network
     * 
     * List the quality retention profiles for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesResponse
     */
	public function getNetworkCameraQualityRetentionProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkCameraQualityRetentionProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkCameraQualityRetentionProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing quality retention profile for this network.
     * 
     * Update an existing quality retention profile for this network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileResponse
     */
	public function updateNetworkCameraQualityRetentionProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkCameraQualityRetentionProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkCameraQualityRetentionProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}