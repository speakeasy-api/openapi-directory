// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetCandidatesTotalsOfficeEnum string

const (
	GetCandidatesTotalsOfficeEnumUnknown GetCandidatesTotalsOfficeEnum = ""
	GetCandidatesTotalsOfficeEnumH       GetCandidatesTotalsOfficeEnum = "H"
	GetCandidatesTotalsOfficeEnumS       GetCandidatesTotalsOfficeEnum = "S"
	GetCandidatesTotalsOfficeEnumP       GetCandidatesTotalsOfficeEnum = "P"
)

func (e *GetCandidatesTotalsOfficeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "H":
		fallthrough
	case "S":
		fallthrough
	case "P":
		*e = GetCandidatesTotalsOfficeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidatesTotalsOfficeEnum: %s", s)
	}
}

type GetCandidatesTotalsQueryParams struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateID []string `queryParam:"style=form,explode=true,name=candidate_id"`
	// Filter records to only those that were applicable to a given
	// two-year period.The cycle begins with an odd year and is named
	// for its ending, even year.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// District of candidate
	District []string `queryParam:"style=form,explode=true,name=district"`
	// `True` indicates that full election period of a candidate.
	// `False` indicates that two year election cycle.
	ElectionFull *bool `queryParam:"style=form,explode=true,name=election_full"`
	// Filter records to only those that were applicable to a given
	// two-year period.The cycle begins with an odd year and is named
	// for its ending, even year.
	//
	ElectionYear []int `queryParam:"style=form,explode=true,name=election_year"`
	// A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
	FederalFundsFlag *bool `queryParam:"style=form,explode=true,name=federal_funds_flag"`
	// A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
	HasRaisedFunds *bool `queryParam:"style=form,explode=true,name=has_raised_funds"`
	//  Candidates who are actively seeking office. If no value is specified, all candidates
	// are returned. When True is specified, only active candidates are returned. When False is
	// specified, only inactive candidates are returned.
	//
	IsActiveCandidate *bool `queryParam:"style=form,explode=true,name=is_active_candidate"`
	// Maximum cash on hand
	MaxCashOnHandEndPeriod *string `queryParam:"style=form,explode=true,name=max_cash_on_hand_end_period"`
	// Maximum debt
	MaxDebtsOwedByCommittee *string `queryParam:"style=form,explode=true,name=max_debts_owed_by_committee"`
	// Maximum aggregated disbursements
	MaxDisbursements *string `queryParam:"style=form,explode=true,name=max_disbursements"`
	// Maximum aggregated receipts
	MaxReceipts *string `queryParam:"style=form,explode=true,name=max_receipts"`
	// Minimum cash on hand
	MinCashOnHandEndPeriod *string `queryParam:"style=form,explode=true,name=min_cash_on_hand_end_period"`
	// Minimum debt
	MinDebtsOwedByCommittee *string `queryParam:"style=form,explode=true,name=min_debts_owed_by_committee"`
	// Minimum aggregated disbursements
	MinDisbursements *string `queryParam:"style=form,explode=true,name=min_disbursements"`
	// Minimum aggregated receipts
	MinReceipts *string `queryParam:"style=form,explode=true,name=min_receipts"`
	// Federal office candidate runs for: H, S or P
	Office []GetCandidatesTotalsOfficeEnum `queryParam:"style=form,explode=true,name=office"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// Three-letter party code
	Party []string `queryParam:"style=form,explode=true,name=party"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Name of candidate running for office
	Q []string `queryParam:"style=form,explode=true,name=q"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// State of candidate
	State []string `queryParam:"style=form,explode=true,name=state"`
}

type GetCandidatesTotalsRequest struct {
	QueryParams GetCandidatesTotalsQueryParams
}

type GetCandidatesTotalsResponse struct {
	CandidateHistoryTotalPage *shared.CandidateHistoryTotalPage
	ContentType               string
	StatusCode                int
	RawResponse               *http.Response
}
