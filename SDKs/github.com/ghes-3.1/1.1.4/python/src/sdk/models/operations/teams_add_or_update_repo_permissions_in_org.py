"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum(str, Enum):
    r"""The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository."""
    PULL = 'pull'
    PUSH = 'push'
    ADMIN = 'admin'
    MAINTAIN = 'maintain'
    TRIAGE = 'triage'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamsAddOrUpdateRepoPermissionsInOrgRequestBody:
    
    permission: Optional[TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission'), 'exclude': lambda f: f is None }})
    r"""The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository."""  
    

@dataclasses.dataclass
class TeamsAddOrUpdateRepoPermissionsInOrgRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})
    r"""The organization name. The name is not case sensitive."""  
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    team_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'team_slug', 'style': 'simple', 'explode': False }})
    r"""The slug of the team name."""  
    request_body: Optional[TeamsAddOrUpdateRepoPermissionsInOrgRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class TeamsAddOrUpdateRepoPermissionsInOrgResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    