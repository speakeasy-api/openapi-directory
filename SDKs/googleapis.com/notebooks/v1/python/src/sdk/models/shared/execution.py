"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import executiontemplate as shared_executiontemplate
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ExecutionStateEnum(str, Enum):
    r"""Output only. State of the underlying AI Platform job."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    QUEUED = 'QUEUED'
    PREPARING = 'PREPARING'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'
    EXPIRED = 'EXPIRED'
    INITIALIZING = 'INITIALIZING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Execution:
    r"""The definition of a single executed notebook."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time the Execution was instantiated."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A brief description of this execution."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Output only. Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'."""  
    execution_template: Optional[shared_executiontemplate.ExecutionTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionTemplate'), 'exclude': lambda f: f is None }})
    r"""The description a notebook execution workload."""  
    job_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobUri'), 'exclude': lambda f: f is None }})
    r"""Output only. The URI of the external job used to execute the notebook."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the execute. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`"""  
    output_notebook_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputNotebookFile'), 'exclude': lambda f: f is None }})
    r"""Output notebook file generated by this execution"""  
    state: Optional[ExecutionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. State of the underlying AI Platform job."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time the Execution was last updated."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecutionInput:
    r"""The definition of a single executed notebook."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A brief description of this execution."""  
    execution_template: Optional[shared_executiontemplate.ExecutionTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionTemplate'), 'exclude': lambda f: f is None }})
    r"""The description a notebook execution workload."""  
    output_notebook_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputNotebookFile'), 'exclude': lambda f: f is None }})
    r"""Output notebook file generated by this execution"""  
    