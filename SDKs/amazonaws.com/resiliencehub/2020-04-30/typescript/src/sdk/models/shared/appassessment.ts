/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AssessmentInvokerEnum } from "./assessmentinvokerenum";
import { AssessmentStatusEnum } from "./assessmentstatusenum";
import { ComplianceStatusEnum } from "./compliancestatusenum";
import { Cost } from "./cost";
import { DisruptionCompliance } from "./disruptioncompliance";
import { ResiliencyPolicy } from "./resiliencypolicy";
import { ResiliencyScore } from "./resiliencyscore";
import { ResourceErrorsDetails } from "./resourceerrorsdetails";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Defines an application assessment.
 */
export class AppAssessment extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "appArn" })
  appArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "appVersion" })
  appVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "assessmentArn" })
  assessmentArn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "assessmentName" })
  assessmentName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "assessmentStatus" })
  assessmentStatus: AssessmentStatusEnum;

  @SpeakeasyMetadata({ elemType: DisruptionCompliance })
  @Expose({ name: "compliance" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, DisruptionCompliance> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], DisruptionCompliance);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  compliance?: Record<string, DisruptionCompliance>;

  @SpeakeasyMetadata()
  @Expose({ name: "complianceStatus" })
  complianceStatus?: ComplianceStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "cost" })
  @Type(() => Cost)
  cost?: Cost;

  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "invoker" })
  invoker: AssessmentInvokerEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "policy" })
  @Type(() => ResiliencyPolicy)
  policy?: ResiliencyPolicy;

  @SpeakeasyMetadata()
  @Expose({ name: "resiliencyScore" })
  @Type(() => ResiliencyScore)
  resiliencyScore?: ResiliencyScore;

  @SpeakeasyMetadata()
  @Expose({ name: "resourceErrorsDetails" })
  @Type(() => ResourceErrorsDetails)
  resourceErrorsDetails?: ResourceErrorsDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}
