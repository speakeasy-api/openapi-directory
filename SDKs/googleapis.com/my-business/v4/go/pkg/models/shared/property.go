// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PropertyBuiltYearExceptionEnum - Built year exception.
type PropertyBuiltYearExceptionEnum string

const (
	PropertyBuiltYearExceptionEnumExceptionUnspecified PropertyBuiltYearExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PropertyBuiltYearExceptionEnumUnderConstruction    PropertyBuiltYearExceptionEnum = "UNDER_CONSTRUCTION"
	PropertyBuiltYearExceptionEnumDependentOnSeason    PropertyBuiltYearExceptionEnum = "DEPENDENT_ON_SEASON"
	PropertyBuiltYearExceptionEnumDependentOnDayOfWeek PropertyBuiltYearExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PropertyBuiltYearExceptionEnum) ToPointer() *PropertyBuiltYearExceptionEnum {
	return &e
}

func (e *PropertyBuiltYearExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PropertyBuiltYearExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyBuiltYearExceptionEnum: %v", v)
	}
}

// PropertyFloorsCountExceptionEnum - Floors count exception.
type PropertyFloorsCountExceptionEnum string

const (
	PropertyFloorsCountExceptionEnumExceptionUnspecified PropertyFloorsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PropertyFloorsCountExceptionEnumUnderConstruction    PropertyFloorsCountExceptionEnum = "UNDER_CONSTRUCTION"
	PropertyFloorsCountExceptionEnumDependentOnSeason    PropertyFloorsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	PropertyFloorsCountExceptionEnumDependentOnDayOfWeek PropertyFloorsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PropertyFloorsCountExceptionEnum) ToPointer() *PropertyFloorsCountExceptionEnum {
	return &e
}

func (e *PropertyFloorsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PropertyFloorsCountExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyFloorsCountExceptionEnum: %v", v)
	}
}

// PropertyLastRenovatedYearExceptionEnum - Last renovated year exception.
type PropertyLastRenovatedYearExceptionEnum string

const (
	PropertyLastRenovatedYearExceptionEnumExceptionUnspecified PropertyLastRenovatedYearExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PropertyLastRenovatedYearExceptionEnumUnderConstruction    PropertyLastRenovatedYearExceptionEnum = "UNDER_CONSTRUCTION"
	PropertyLastRenovatedYearExceptionEnumDependentOnSeason    PropertyLastRenovatedYearExceptionEnum = "DEPENDENT_ON_SEASON"
	PropertyLastRenovatedYearExceptionEnumDependentOnDayOfWeek PropertyLastRenovatedYearExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PropertyLastRenovatedYearExceptionEnum) ToPointer() *PropertyLastRenovatedYearExceptionEnum {
	return &e
}

func (e *PropertyLastRenovatedYearExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PropertyLastRenovatedYearExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyLastRenovatedYearExceptionEnum: %v", v)
	}
}

// PropertyRoomsCountExceptionEnum - Rooms count exception.
type PropertyRoomsCountExceptionEnum string

const (
	PropertyRoomsCountExceptionEnumExceptionUnspecified PropertyRoomsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	PropertyRoomsCountExceptionEnumUnderConstruction    PropertyRoomsCountExceptionEnum = "UNDER_CONSTRUCTION"
	PropertyRoomsCountExceptionEnumDependentOnSeason    PropertyRoomsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	PropertyRoomsCountExceptionEnumDependentOnDayOfWeek PropertyRoomsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e PropertyRoomsCountExceptionEnum) ToPointer() *PropertyRoomsCountExceptionEnum {
	return &e
}

func (e *PropertyRoomsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = PropertyRoomsCountExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyRoomsCountExceptionEnum: %v", v)
	}
}

// Property - General factual information about the property's physical structure and important dates.
type Property struct {
	// Built year. The year that construction of the property was completed.
	BuiltYear *int `json:"builtYear,omitempty"`
	// Built year exception.
	BuiltYearException *PropertyBuiltYearExceptionEnum `json:"builtYearException,omitempty"`
	// Floors count. The number of stories the building has from the ground floor to the top floor that are accessible to guests.
	FloorsCount *int `json:"floorsCount,omitempty"`
	// Floors count exception.
	FloorsCountException *PropertyFloorsCountExceptionEnum `json:"floorsCountException,omitempty"`
	// Last renovated year. The year when the most recent renovation of the property was completed. Renovation may include all or any combination of the following: the units, the public spaces, the exterior, or the interior.
	LastRenovatedYear *int `json:"lastRenovatedYear,omitempty"`
	// Last renovated year exception.
	LastRenovatedYearException *PropertyLastRenovatedYearExceptionEnum `json:"lastRenovatedYearException,omitempty"`
	// Rooms count. The total number of rooms and suites bookable by guests for an overnight stay. Does not include event space, public spaces, conference rooms, fitness rooms, business centers, spa, salon, restaurants/bars, or shops.
	RoomsCount *int `json:"roomsCount,omitempty"`
	// Rooms count exception.
	RoomsCountException *PropertyRoomsCountExceptionEnum `json:"roomsCountException,omitempty"`
}
