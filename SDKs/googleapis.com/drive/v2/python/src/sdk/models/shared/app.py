"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppIcons:
    
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""Category of the icon. Allowed values are:
    - application - icon for the application 
    - document - icon for a file associated with the app 
    - documentShared - icon for a shared file associated with the app
    """  
    icon_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iconUrl'), 'exclude': lambda f: f is None }})
    r"""URL for the icon."""  
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Size of the icon. Represented as the maximum of the width and height."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class App:
    r"""The apps resource provides a list of the apps that a user has installed, with information about each app's supported MIME types, file extensions, and other details."""
    
    authorized: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorized'), 'exclude': lambda f: f is None }})
    r"""Whether the app is authorized to access data on the user's Drive."""  
    create_in_folder_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createInFolderTemplate'), 'exclude': lambda f: f is None }})
    r"""The template url to create a new file with this app in a given folder. The template will contain {folderId} to be replaced by the folder to create the new file in."""  
    create_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createUrl'), 'exclude': lambda f: f is None }})
    r"""The url to create a new file with this app."""  
    has_drive_wide_scope: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasDriveWideScope'), 'exclude': lambda f: f is None }})
    r"""Whether the app has drive-wide scope. An app with drive-wide scope can access all files in the user's drive."""  
    icons: Optional[list[AppIcons]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icons'), 'exclude': lambda f: f is None }})
    r"""The various icons for the app."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the app."""  
    installed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installed'), 'exclude': lambda f: f is None }})
    r"""Whether the app is installed."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always drive#app."""  
    long_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longDescription'), 'exclude': lambda f: f is None }})
    r"""A long description of the app."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the app."""  
    object_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectType'), 'exclude': lambda f: f is None }})
    r"""The type of object this app creates (e.g. Chart). If empty, the app name should be used instead."""  
    open_url_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openUrlTemplate'), 'exclude': lambda f: f is None }})
    r"""The template url for opening files with this app. The template will contain {ids} and/or {exportIds} to be replaced by the actual file ids. See  Open Files  for the full documentation."""  
    primary_file_extensions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryFileExtensions'), 'exclude': lambda f: f is None }})
    r"""The list of primary file extensions."""  
    primary_mime_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryMimeTypes'), 'exclude': lambda f: f is None }})
    r"""The list of primary mime types."""  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId'), 'exclude': lambda f: f is None }})
    r"""The ID of the product listing for this app."""  
    product_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productUrl'), 'exclude': lambda f: f is None }})
    r"""A link to the product listing for this app."""  
    secondary_file_extensions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryFileExtensions'), 'exclude': lambda f: f is None }})
    r"""The list of secondary file extensions."""  
    secondary_mime_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryMimeTypes'), 'exclude': lambda f: f is None }})
    r"""The list of secondary mime types."""  
    short_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortDescription'), 'exclude': lambda f: f is None }})
    r"""A short description of the app."""  
    supports_create: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportsCreate'), 'exclude': lambda f: f is None }})
    r"""Whether this app supports creating new objects."""  
    supports_import: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportsImport'), 'exclude': lambda f: f is None }})
    r"""Whether this app supports importing from Docs Editors."""  
    supports_multi_open: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportsMultiOpen'), 'exclude': lambda f: f is None }})
    r"""Whether this app supports opening more than one file."""  
    supports_offline_create: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportsOfflineCreate'), 'exclude': lambda f: f is None }})
    r"""Whether this app supports creating new files when offline."""  
    use_by_default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useByDefault'), 'exclude': lambda f: f is None }})
    r"""Whether the app is selected as the default handler for the types it supports."""  
    