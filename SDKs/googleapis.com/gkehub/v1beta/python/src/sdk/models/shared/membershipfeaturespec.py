"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import anthosobservabilitymembershipspec as shared_anthosobservabilitymembershipspec
from ..shared import configmanagementmembershipspec as shared_configmanagementmembershipspec
from ..shared import identityservicemembershipspec as shared_identityservicemembershipspec
from ..shared import membershipspec as shared_membershipspec
from ..shared import policycontrollermembershipspec as shared_policycontrollermembershipspec
from ..shared import servicemeshmembershipspec as shared_servicemeshmembershipspec
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MembershipFeatureSpec:
    r"""MembershipFeatureSpec contains configuration information for a single Membership."""
    
    anthosobservability: Optional[shared_anthosobservabilitymembershipspec.AnthosObservabilityMembershipSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('anthosobservability'), 'exclude': lambda f: f is None }})
    r"""**Anthosobservability**: Per-Membership Feature spec."""  
    cloudbuild: Optional[shared_membershipspec.MembershipSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudbuild'), 'exclude': lambda f: f is None }})
    r"""**Cloud Build**: Configurations for each Cloud Build enabled cluster."""  
    configmanagement: Optional[shared_configmanagementmembershipspec.ConfigManagementMembershipSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configmanagement'), 'exclude': lambda f: f is None }})
    r"""**Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR."""  
    fleet_inherited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fleetInherited'), 'exclude': lambda f: f is None }})
    r"""True if value of `feature_spec` was inherited from a fleet-level default."""  
    fleetobservability: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fleetobservability'), 'exclude': lambda f: f is None }})
    r"""**FleetObservability**: The membership-specific input for FleetObservability feature."""  
    identityservice: Optional[shared_identityservicemembershipspec.IdentityServiceMembershipSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityservice'), 'exclude': lambda f: f is None }})
    r"""**Anthos Identity Service**: Configuration for a single Membership."""  
    mesh: Optional[shared_servicemeshmembershipspec.ServiceMeshMembershipSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mesh'), 'exclude': lambda f: f is None }})
    r"""**Service Mesh**: Spec for a single Membership for the servicemesh feature"""  
    policycontroller: Optional[shared_policycontrollermembershipspec.PolicyControllerMembershipSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policycontroller'), 'exclude': lambda f: f is None }})
    r"""**Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MembershipFeatureSpecInput:
    r"""MembershipFeatureSpec contains configuration information for a single Membership."""
    
    anthosobservability: Optional[shared_anthosobservabilitymembershipspec.AnthosObservabilityMembershipSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('anthosobservability'), 'exclude': lambda f: f is None }})
    r"""**Anthosobservability**: Per-Membership Feature spec."""  
    cloudbuild: Optional[shared_membershipspec.MembershipSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudbuild'), 'exclude': lambda f: f is None }})
    r"""**Cloud Build**: Configurations for each Cloud Build enabled cluster."""  
    configmanagement: Optional[shared_configmanagementmembershipspec.ConfigManagementMembershipSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configmanagement'), 'exclude': lambda f: f is None }})
    r"""**Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR."""  
    fleet_inherited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fleetInherited'), 'exclude': lambda f: f is None }})
    r"""True if value of `feature_spec` was inherited from a fleet-level default."""  
    fleetobservability: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fleetobservability'), 'exclude': lambda f: f is None }})
    r"""**FleetObservability**: The membership-specific input for FleetObservability feature."""  
    identityservice: Optional[shared_identityservicemembershipspec.IdentityServiceMembershipSpecInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityservice'), 'exclude': lambda f: f is None }})
    r"""**Anthos Identity Service**: Configuration for a single Membership."""  
    mesh: Optional[shared_servicemeshmembershipspec.ServiceMeshMembershipSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mesh'), 'exclude': lambda f: f is None }})
    r"""**Service Mesh**: Spec for a single Membership for the servicemesh feature"""  
    policycontroller: Optional[shared_policycontrollermembershipspec.PolicyControllerMembershipSpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policycontroller'), 'exclude': lambda f: f is None }})
    r"""**Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR."""  
    