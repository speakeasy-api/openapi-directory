/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Coap {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Show the agent's COAP argument structure
   *
   * @remarks
   * Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap
   */
  protocolCoapGetArgs(
    req: operations.ProtocolCoapGetArgsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolCoapGetArgsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolCoapGetArgsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/coap/get/args",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolCoapGetArgsResponse =
        new operations.ProtocolCoapGetArgsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolCoapGetArgs200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's COAP configuration
   *
   * @remarks
   * Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap
   */
  protocolCoapGetConfig(
    req: operations.ProtocolCoapGetConfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolCoapGetConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolCoapGetConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/coap/get/config",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolCoapGetConfigResponse =
        new operations.ProtocolCoapGetConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configCOAP = utils.objectToClass(
              httpRes?.data,
              shared.ConfigCOAP
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's COAP statistics
   *
   * @remarks
   * Statistics of fields indicated in the headers
   */
  protocolCoapGetStatistics(
    req: operations.ProtocolCoapGetStatisticsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolCoapGetStatisticsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolCoapGetStatisticsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/coap/get/statistics",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolCoapGetStatisticsResponse =
        new operations.ProtocolCoapGetStatisticsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolCoapGetStatistics200ApplicationJSONInt32Integers =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the COAP statistics headers
   *
   * @remarks
   * The headers of statistics fields
   */
  protocolCoapGetStatsHdr(
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolCoapGetStatsHdrResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/mimic/protocol/msg/coap/get/stats_hdr";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolCoapGetStatsHdrResponse =
        new operations.ProtocolCoapGetStatsHdrResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolCoapGetStatsHdr200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's COAP traffic tracing
   *
   * @remarks
   * Trace 1 means enabled, 0 means not
   */
  protocolCoapGetTrace(
    req: operations.ProtocolCoapGetTraceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolCoapGetTraceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolCoapGetTraceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/coap/get/trace",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolCoapGetTraceResponse =
        new operations.ProtocolCoapGetTraceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configCOAP = utils.objectToClass(
              httpRes?.data,
              shared.ConfigCOAP
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Set the agent's COAP configuration
   *
   * @remarks
   * Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap
   */
  protocolCoapSetConfig(
    req: operations.ProtocolCoapSetConfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolCoapSetConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolCoapSetConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/coap/set/config/{argument}/{value}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolCoapSetConfigResponse =
        new operations.ProtocolCoapSetConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolCoapSetConfig200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Set the agent's COAP traffic tracing
   *
   * @remarks
   * 1 to enable, 0 to disable
   */
  protocolCoapSetTrace(
    req: operations.ProtocolCoapSetTraceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolCoapSetTraceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolCoapSetTraceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/coap/set/trace/{enableOrNot}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolCoapSetTraceResponse =
        new operations.ProtocolCoapSetTraceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolCoapSetTrace200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }
}
