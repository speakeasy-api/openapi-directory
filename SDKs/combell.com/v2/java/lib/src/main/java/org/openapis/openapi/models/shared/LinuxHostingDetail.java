/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LinuxHostingDetail - Success
 */
public class LinuxHostingDetail {
    /**
     * Used webspace size in MB
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actual_size")
    public Integer actualSize;

    public LinuxHostingDetail withActualSize(Integer actualSize) {
        this.actualSize = actualSize;
        return this;
    }
    
    /**
     * Domain name for the Linux hosting account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain_name")
    public String domainName;

    public LinuxHostingDetail withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }
    
    /**
     * Indicates whether ftp is enabled for the hosting account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ftp_enabled")
    public Boolean ftpEnabled;

    public LinuxHostingDetail withFtpEnabled(Boolean ftpEnabled) {
        this.ftpEnabled = ftpEnabled;
        return this;
    }
    
    /**
     * Ftp username
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ftp_username")
    public String ftpUsername;

    public LinuxHostingDetail withFtpUsername(String ftpUsername) {
        this.ftpUsername = ftpUsername;
        return this;
    }
    
    /**
     * Linux hosting IP address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip")
    public String ip;

    public LinuxHostingDetail withIp(String ip) {
        this.ip = ip;
        return this;
    }
    
    /**
     * Type of the hosting IP address (dedicated or shared)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_type")
    public LinuxIpTypeEnum ipType;

    public LinuxHostingDetail withIpType(LinuxIpTypeEnum ipType) {
        this.ipType = ipType;
        return this;
    }
    
    /**
     * Maximum webspace size in MB
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_size")
    public Integer maxSize;

    public LinuxHostingDetail withMaxSize(Integer maxSize) {
        this.maxSize = maxSize;
        return this;
    }
    
    /**
     * Maximum webspace size in MB&lt;br /&gt;
     * Use max_size instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_webspace_size")
    public Integer maxWebspaceSize;

    public LinuxHostingDetail withMaxWebspaceSize(Integer maxWebspaceSize) {
        this.maxWebspaceSize = maxWebspaceSize;
        return this;
    }
    
    /**
     * A list of mysql databases linked to the hosting account.&lt;br /&gt;
     * Details of the database can be read using the mysql database detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mysql_database_names")
    public String[] mysqlDatabaseNames;

    public LinuxHostingDetail withMysqlDatabaseNames(String[] mysqlDatabaseNames) {
        this.mysqlDatabaseNames = mysqlDatabaseNames;
        return this;
    }
    
    /**
     * The active php version for the hosting account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("php_version")
    public String phpVersion;

    public LinuxHostingDetail withPhpVersion(String phpVersion) {
        this.phpVersion = phpVersion;
        return this;
    }
    
    /**
     * Id of Linux hosting service package.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("servicepack_id")
    public Integer servicepackId;

    public LinuxHostingDetail withServicepackId(Integer servicepackId) {
        this.servicepackId = servicepackId;
        return this;
    }
    
    /**
     * A list of websites on the hosting account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sites")
    public LinuxSite[] sites;

    public LinuxHostingDetail withSites(LinuxSite[] sites) {
        this.sites = sites;
        return this;
    }
    
    /**
     * Ssh host of the linux hosting account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh_host")
    public String sshHost;

    public LinuxHostingDetail withSshHost(String sshHost) {
        this.sshHost = sshHost;
        return this;
    }
    
    /**
     * Ssh username
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh_username")
    public String sshUsername;

    public LinuxHostingDetail withSshUsername(String sshUsername) {
        this.sshUsername = sshUsername;
        return this;
    }
    
    /**
     * Used webspace size in MB&lt;br /&gt;
     * Use actual_size instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webspace_usage")
    public Integer webspaceUsage;

    public LinuxHostingDetail withWebspaceUsage(Integer webspaceUsage) {
        this.webspaceUsage = webspaceUsage;
        return this;
    }
    
    public LinuxHostingDetail(){}
}
