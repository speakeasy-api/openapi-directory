/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetCommitteeCommitteeIdCandidatesHistoryCycleRequest extends SpeakeasyBase {
  /**
   *
   * @remarks
   * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=api_key",
  })
  apiKey: string;

  /**
   *
   * @remarks
   * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=committee_id",
  })
  committeeId: string;

  /**
   *
   * @remarks
   * Two-year election cycle in which a candidate runs for office.
   * Calculated from Form 2. The cycle begins with
   * an odd year and is named for its ending, even year. This cycle follows
   * the traditional house election cycle and subdivides the presidential
   * and Senate elections into comparable two-year blocks. To retrieve data for
   * the entire four years of a presidential term or six years of a senatorial term,
   * you will need the `election_full` flag.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=cycle",
  })
  cycle: number;

  /**
   * `True` indicates that full election period of a candidate.
   *
   * @remarks
   * `False` indicates that two year election cycle.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=election_full",
  })
  electionFull?: boolean;

  /**
   * For paginating through results, starting at page 1
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results returned per page. Defaults to 20.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Provide a field to sort by. Use `-` for descending order.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Hide null values on sorted column(s).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_hide_null",
  })
  sortHideNull?: boolean;

  /**
   * Toggle that filters out all rows having sort column that is non-null
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_null_only",
  })
  sortNullOnly?: boolean;

  /**
   * Toggle that sorts null values last
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_nulls_last",
  })
  sortNullsLast?: boolean;
}

export class GetCommitteeCommitteeIdCandidatesHistoryCycleResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  candidateHistoryPage?: shared.CandidateHistoryPage;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
