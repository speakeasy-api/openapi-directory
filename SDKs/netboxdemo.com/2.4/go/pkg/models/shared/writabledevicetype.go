// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableDeviceTypeInterfaceOrderingEnum string

const (
	WritableDeviceTypeInterfaceOrderingEnumOne WritableDeviceTypeInterfaceOrderingEnum = "1"
	WritableDeviceTypeInterfaceOrderingEnumTwo WritableDeviceTypeInterfaceOrderingEnum = "2"
)

func (e *WritableDeviceTypeInterfaceOrderingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = WritableDeviceTypeInterfaceOrderingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableDeviceTypeInterfaceOrderingEnum: %s", s)
	}
}

// WritableDeviceTypeParentChildStatusEnum - Parent devices house child devices in device bays. Select "None" if this device type is neither a parent nor a child.
type WritableDeviceTypeParentChildStatusEnum string

const (
	WritableDeviceTypeParentChildStatusEnumNull  WritableDeviceTypeParentChildStatusEnum = "null"
	WritableDeviceTypeParentChildStatusEnumTrue  WritableDeviceTypeParentChildStatusEnum = "true"
	WritableDeviceTypeParentChildStatusEnumFalse WritableDeviceTypeParentChildStatusEnum = "false"
)

func (e *WritableDeviceTypeParentChildStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "null":
		fallthrough
	case "true":
		fallthrough
	case "false":
		*e = WritableDeviceTypeParentChildStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableDeviceTypeParentChildStatusEnum: %s", s)
	}
}

type WritableDeviceTypeInput struct {
	Comments          *string                                  `json:"comments,omitempty"`
	CustomFields      map[string]interface{}                   `json:"custom_fields,omitempty"`
	InterfaceOrdering *WritableDeviceTypeInterfaceOrderingEnum `json:"interface_ordering,omitempty"`
	// This type of device has console server ports
	IsConsoleServer *bool `json:"is_console_server,omitempty"`
	// Device consumes both front and rear rack faces
	IsFullDepth *bool `json:"is_full_depth,omitempty"`
	// This type of device has network interfaces
	IsNetworkDevice *bool `json:"is_network_device,omitempty"`
	// This type of device has power outlets
	IsPdu        *bool  `json:"is_pdu,omitempty"`
	Manufacturer int64  `json:"manufacturer"`
	Model        string `json:"model"`
	// Discrete part number (optional)
	PartNumber *string `json:"part_number,omitempty"`
	Slug       string  `json:"slug"`
	// Parent devices house child devices in device bays. Select "None" if this device type is neither a parent nor a child.
	SubdeviceRole *WritableDeviceTypeParentChildStatusEnum `json:"subdevice_role,omitempty"`
	Tags          []string                                 `json:"tags,omitempty"`
	UHeight       *int64                                   `json:"u_height,omitempty"`
}
