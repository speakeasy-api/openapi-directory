/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The payment option.
 */
export enum CreateOrderRequestBodyPaymentOptionEnum {
  AllUpfront = "ALL_UPFRONT",
  NoUpfront = "NO_UPFRONT",
  PartialUpfront = "PARTIAL_UPFRONT",
}

/**
 * The payment terms.
 */
export enum CreateOrderRequestBodyPaymentTermEnum {
  ThreeYears = "THREE_YEARS",
  OneYear = "ONE_YEAR",
}

export class CreateOrderRequestBody extends SpeakeasyBase {
  /**
   * The line items that make up the order.
   */
  @SpeakeasyMetadata({ elemType: shared.LineItemRequest })
  @Expose({ name: "LineItems" })
  @Type(() => shared.LineItemRequest)
  lineItems: shared.LineItemRequest[];

  /**
   *  The ID or the Amazon Resource Name (ARN) of the Outpost.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OutpostIdentifier" })
  outpostIdentifier: string;

  /**
   * The payment option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentOption" })
  paymentOption: CreateOrderRequestBodyPaymentOptionEnum;

  /**
   * The payment terms.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentTerm" })
  paymentTerm?: CreateOrderRequestBodyPaymentTermEnum;
}

export class CreateOrderRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateOrderRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateOrderResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createOrderOutput?: shared.CreateOrderOutput;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
