"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

SERVERS = [
    "http://datasync.{region}.amazonaws.com",
    r"""The DataSync multi-region endpoint"""
    "https://datasync.{region}.amazonaws.com",
    r"""The DataSync multi-region endpoint"""
    "http://datasync.{region}.amazonaws.com.cn",
    r"""The DataSync endpoint for China (Beijing) and China (Ningxia)"""
    "https://datasync.{region}.amazonaws.com.cn",
    r"""The DataSync endpoint for China (Beijing) and China (Ningxia)"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""<fullname>DataSync</fullname> <p>DataSync is a managed data transfer service that makes it simpler for you to automate moving data between on-premises storage and Amazon Web Services storage services. You also can use DataSync to transfer data between other cloud providers and Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\\">DataSync User Guide</a> </i>.</p>
    https://docs.aws.amazon.com/datasync/ - Amazon Web Services documentation
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def cancel_task_execution(self, request: operations.CancelTaskExecutionRequest) -> operations.CancelTaskExecutionResponse:
        r"""<p>Stops an DataSync task execution that's in progress. The transfer of some files are abruptly interrupted. File contents that're transferred to the destination might be incomplete or inconsistent with the source files.</p> <p>However, if you start a new task execution using the same task and allow it to finish, file content on the destination will be complete and consistent. This applies to other unexpected failures that interrupt a task execution. In all of these cases, DataSync successfully completes the transfer when you start the next task execution.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CancelTaskExecution'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "cancel_task_execution_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelTaskExecutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.cancel_task_execution_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_agent(self, request: operations.CreateAgentRequest) -> operations.CreateAgentResponse:
        r"""<p>Activates an DataSync agent that you have deployed in your storage environment. The activation process associates your agent with your account. In the activation process, you specify information such as the Amazon Web Services Region that you want to activate the agent in. You activate the agent in the Amazon Web Services Region where your target locations (in Amazon S3 or Amazon EFS) reside. Your tasks are created in this Amazon Web Services Region.</p> <p>You can activate the agent in a VPC (virtual private cloud) or provide the agent access to a VPC endpoint so you can run tasks without going over the public internet.</p> <p>You can use an agent for more than one location. If a task uses multiple agents, all of them need to have status AVAILABLE for the task to run. If you use multiple agents for a source location, the status of all the agents must be AVAILABLE for the task to run. </p> <p>Agents are automatically updated by Amazon Web Services on a regular basis, using a mechanism that ensures minimal interruption to your tasks.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateAgent'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_agent_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAgentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateAgentResponse])
                res.create_agent_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_location_efs(self, request: operations.CreateLocationEfsRequest) -> operations.CreateLocationEfsResponse:
        r"""Creates an endpoint for an Amazon EFS file system that DataSync can access for a transfer. For more information, see <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/create-efs-location.html\\">Creating a location for Amazon EFS</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateLocationEfs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_location_efs_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLocationEfsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLocationEfsResponse])
                res.create_location_efs_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_location_fsx_lustre(self, request: operations.CreateLocationFsxLustreRequest) -> operations.CreateLocationFsxLustreResponse:
        r"""Creates an endpoint for an Amazon FSx for Lustre file system."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateLocationFsxLustre'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_location_fsx_lustre_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLocationFsxLustreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLocationFsxLustreResponse])
                res.create_location_fsx_lustre_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_location_fsx_ontap(self, request: operations.CreateLocationFsxOntapRequest) -> operations.CreateLocationFsxOntapResponse:
        r"""Creates an endpoint for an Amazon FSx for NetApp ONTAP file system that DataSync can access for a transfer. For more information, see <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/create-ontap-location.html\\">Creating a location for FSx for ONTAP</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateLocationFsxOntap'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_location_fsx_ontap_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLocationFsxOntapResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLocationFsxOntapResponse])
                res.create_location_fsx_ontap_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_location_fsx_open_zfs(self, request: operations.CreateLocationFsxOpenZfsRequest) -> operations.CreateLocationFsxOpenZfsResponse:
        r"""<p>Creates an endpoint for an Amazon FSx for OpenZFS file system that DataSync can access for a transfer. For more information, see <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/create-openzfs-location.html\\">Creating a location for FSx for OpenZFS</a>.</p> <note> <p>Request parameters related to <code>SMB</code> aren't supported with the <code>CreateLocationFsxOpenZfs</code> operation.</p> </note>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateLocationFsxOpenZfs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_location_fsx_open_zfs_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLocationFsxOpenZfsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLocationFsxOpenZfsResponse])
                res.create_location_fsx_open_zfs_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_location_fsx_windows(self, request: operations.CreateLocationFsxWindowsRequest) -> operations.CreateLocationFsxWindowsResponse:
        r"""Creates an endpoint for an Amazon FSx for Windows File Server file system."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateLocationFsxWindows'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_location_fsx_windows_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLocationFsxWindowsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLocationFsxWindowsResponse])
                res.create_location_fsx_windows_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_location_hdfs(self, request: operations.CreateLocationHdfsRequest) -> operations.CreateLocationHdfsResponse:
        r"""Creates an endpoint for a Hadoop Distributed File System (HDFS)."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateLocationHdfs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_location_hdfs_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLocationHdfsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLocationHdfsResponse])
                res.create_location_hdfs_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_location_nfs(self, request: operations.CreateLocationNfsRequest) -> operations.CreateLocationNfsResponse:
        r"""Defines a file system on a Network File System (NFS) server that can be read from or written to."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateLocationNfs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_location_nfs_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLocationNfsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLocationNfsResponse])
                res.create_location_nfs_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_location_object_storage(self, request: operations.CreateLocationObjectStorageRequest) -> operations.CreateLocationObjectStorageResponse:
        r"""Creates an endpoint for an object storage system that DataSync can access for a transfer. For more information, see <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/create-object-location.html\\">Creating a location for object storage</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateLocationObjectStorage'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_location_object_storage_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLocationObjectStorageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLocationObjectStorageResponse])
                res.create_location_object_storage_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_location_s3(self, request: operations.CreateLocationS3Request) -> operations.CreateLocationS3Response:
        r"""Creates an endpoint for an Amazon S3 bucket that DataSync can access for a transfer. For more information, see <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/create-locations-cli.html#create-location-s3-cli\\">Create an Amazon S3 location</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateLocationS3'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_location_s3_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLocationS3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLocationS3Response])
                res.create_location_s3_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_location_smb(self, request: operations.CreateLocationSmbRequest) -> operations.CreateLocationSmbResponse:
        r"""Creates an endpoint for a Server Message Block (SMB) file server that DataSync can access for a transfer. For more information, see <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/create-smb-location.html\\">Creating an SMB location</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateLocationSmb'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_location_smb_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLocationSmbResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLocationSmbResponse])
                res.create_location_smb_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def create_task(self, request: operations.CreateTaskRequest) -> operations.CreateTaskResponse:
        r"""<p>Configures a task, which defines where and how DataSync transfers your data.</p> <p>A task includes a source location, a destination location, and the preferences for how and when you want to transfer your data (such as bandwidth limits, scheduling, among other options).</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.CreateTask'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_task_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateTaskResponse])
                res.create_task_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def delete_agent(self, request: operations.DeleteAgentRequest) -> operations.DeleteAgentResponse:
        r"""Deletes an agent. To specify which agent to delete, use the Amazon Resource Name (ARN) of the agent in your request. The operation disassociates the agent from your Amazon Web Services account. However, it doesn't delete the agent virtual machine (VM) from your on-premises environment."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DeleteAgent'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "delete_agent_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAgentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.delete_agent_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def delete_location(self, request: operations.DeleteLocationRequest) -> operations.DeleteLocationResponse:
        r"""Deletes the configuration of a location used by DataSync."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DeleteLocation'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "delete_location_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.delete_location_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def delete_task(self, request: operations.DeleteTaskRequest) -> operations.DeleteTaskResponse:
        r"""Deletes an DataSync task."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DeleteTask'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "delete_task_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.delete_task_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_agent(self, request: operations.DescribeAgentRequest) -> operations.DescribeAgentResponse:
        r"""Returns metadata about an DataSync agent, such as its name, endpoint type, and status."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeAgent'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_agent_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeAgentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeAgentResponse])
                res.describe_agent_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_location_efs(self, request: operations.DescribeLocationEfsRequest) -> operations.DescribeLocationEfsResponse:
        r"""Returns metadata about your DataSync location for an Amazon EFS file system."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeLocationEfs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_location_efs_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeLocationEfsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeLocationEfsResponse])
                res.describe_location_efs_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_location_fsx_lustre(self, request: operations.DescribeLocationFsxLustreRequest) -> operations.DescribeLocationFsxLustreResponse:
        r"""Provides details about how an DataSync location for an Amazon FSx for Lustre file system is configured."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeLocationFsxLustre'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_location_fsx_lustre_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeLocationFsxLustreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeLocationFsxLustreResponse])
                res.describe_location_fsx_lustre_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_location_fsx_ontap(self, request: operations.DescribeLocationFsxOntapRequest) -> operations.DescribeLocationFsxOntapResponse:
        r"""<p>Provides details about how an DataSync location for an Amazon FSx for NetApp ONTAP file system is configured.</p> <note> <p>If your location uses SMB, the <code>DescribeLocationFsxOntap</code> operation doesn't actually return a <code>Password</code>.</p> </note>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeLocationFsxOntap'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_location_fsx_ontap_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeLocationFsxOntapResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeLocationFsxOntapResponse])
                res.describe_location_fsx_ontap_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_location_fsx_open_zfs(self, request: operations.DescribeLocationFsxOpenZfsRequest) -> operations.DescribeLocationFsxOpenZfsResponse:
        r"""<p>Provides details about how an DataSync location for an Amazon FSx for OpenZFS file system is configured.</p> <note> <p>Response elements related to <code>SMB</code> aren't supported with the <code>DescribeLocationFsxOpenZfs</code> operation.</p> </note>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeLocationFsxOpenZfs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_location_fsx_open_zfs_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeLocationFsxOpenZfsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeLocationFsxOpenZfsResponse])
                res.describe_location_fsx_open_zfs_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_location_fsx_windows(self, request: operations.DescribeLocationFsxWindowsRequest) -> operations.DescribeLocationFsxWindowsResponse:
        r"""Returns metadata about an Amazon FSx for Windows File Server location, such as information about its path."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeLocationFsxWindows'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_location_fsx_windows_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeLocationFsxWindowsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeLocationFsxWindowsResponse])
                res.describe_location_fsx_windows_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_location_hdfs(self, request: operations.DescribeLocationHdfsRequest) -> operations.DescribeLocationHdfsResponse:
        r"""Returns metadata, such as the authentication information about the Hadoop Distributed File System (HDFS) location."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeLocationHdfs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_location_hdfs_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeLocationHdfsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeLocationHdfsResponse])
                res.describe_location_hdfs_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_location_nfs(self, request: operations.DescribeLocationNfsRequest) -> operations.DescribeLocationNfsResponse:
        r"""Returns metadata, such as the path information, about an NFS location."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeLocationNfs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_location_nfs_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeLocationNfsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeLocationNfsResponse])
                res.describe_location_nfs_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_location_object_storage(self, request: operations.DescribeLocationObjectStorageRequest) -> operations.DescribeLocationObjectStorageResponse:
        r"""Returns metadata about your DataSync location for an object storage system."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeLocationObjectStorage'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_location_object_storage_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeLocationObjectStorageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeLocationObjectStorageResponse])
                res.describe_location_object_storage_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_location_s3(self, request: operations.DescribeLocationS3Request) -> operations.DescribeLocationS3Response:
        r"""Returns metadata, such as bucket name, about an Amazon S3 bucket location."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeLocationS3'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_location_s3_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeLocationS3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeLocationS3Response])
                res.describe_location_s3_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_location_smb(self, request: operations.DescribeLocationSmbRequest) -> operations.DescribeLocationSmbResponse:
        r"""Returns metadata, such as the path and user information about an SMB location."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeLocationSmb'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_location_smb_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeLocationSmbResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeLocationSmbResponse])
                res.describe_location_smb_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_task(self, request: operations.DescribeTaskRequest) -> operations.DescribeTaskResponse:
        r"""Returns metadata about a task."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeTask'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_task_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeTaskResponse])
                res.describe_task_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def describe_task_execution(self, request: operations.DescribeTaskExecutionRequest) -> operations.DescribeTaskExecutionResponse:
        r"""Returns detailed metadata about a task that is being executed."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.DescribeTaskExecution'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "describe_task_execution_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DescribeTaskExecutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DescribeTaskExecutionResponse])
                res.describe_task_execution_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def list_agents(self, request: operations.ListAgentsRequest) -> operations.ListAgentsResponse:
        r"""<p>Returns a list of DataSync agents that belong to an Amazon Web Services account in the Amazon Web Services Region specified in the request.</p> <p>With pagination, you can reduce the number of agents returned in a response. If you get a truncated list of agents in a response, the response contains a marker that you can specify in your next request to fetch the next page of agents.</p> <p> <code>ListAgents</code> is eventually consistent. This means the result of running the operation might not reflect that you just created or deleted an agent. For example, if you create an agent with <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/API_CreateAgent.html\\">CreateAgent</a> and then immediately run <code>ListAgents</code>, that agent might not show up in the list right away. In situations like this, you can always confirm whether an agent has been created (or deleted) by using <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeAgent.html\\">DescribeAgent</a>.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.ListAgents'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "list_agents_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ListAgentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAgentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAgentsResponse])
                res.list_agents_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def list_locations(self, request: operations.ListLocationsRequest) -> operations.ListLocationsResponse:
        r"""<p>Returns a list of source and destination locations.</p> <p>If you have more locations than are returned in a response (that is, the response returns only a truncated list of your agents), the response contains a token that you can specify in your next request to fetch the next page of locations.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.ListLocations'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "list_locations_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ListLocationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListLocationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def list_tags_for_resource(self, request: operations.ListTagsForResourceRequest) -> operations.ListTagsForResourceResponse:
        r"""Returns all the tags associated with an Amazon Web Services resource."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.ListTagsForResource'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "list_tags_for_resource_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ListTagsForResourceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTagsForResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTagsForResourceResponse])
                res.list_tags_for_resource_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def list_task_executions(self, request: operations.ListTaskExecutionsRequest) -> operations.ListTaskExecutionsResponse:
        r"""Returns a list of executed tasks."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.ListTaskExecutions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "list_task_executions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ListTaskExecutionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTaskExecutionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTaskExecutionsResponse])
                res.list_task_executions_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def list_tasks(self, request: operations.ListTasksRequest) -> operations.ListTasksResponse:
        r"""Returns a list of the DataSync tasks you created."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.ListTasks'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "list_tasks_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ListTasksRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTasksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTasksResponse])
                res.list_tasks_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def start_task_execution(self, request: operations.StartTaskExecutionRequest) -> operations.StartTaskExecutionResponse:
        r"""<p>Starts an DataSync task. For each task, you can only run one task execution at a time.</p> <p>There are several phases to a task execution. For more information, see <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/working-with-task-executions.html#understand-task-execution-statuses\\">Task execution statuses</a>.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.StartTaskExecution'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "start_task_execution_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StartTaskExecutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StartTaskExecutionResponse])
                res.start_task_execution_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def tag_resource(self, request: operations.TagResourceRequest) -> operations.TagResourceResponse:
        r"""<p>Applies a <i>tag</i> to an Amazon Web Services resource. Tags are key-value pairs that can help you manage, filter, and search for your resources.</p> <p>These include DataSync resources, such as locations, tasks, and task executions.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.TagResource'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "tag_resource_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TagResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.tag_resource_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def untag_resource(self, request: operations.UntagResourceRequest) -> operations.UntagResourceResponse:
        r"""Removes tags from an Amazon Web Services resource."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.UntagResource'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "untag_resource_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UntagResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.untag_resource_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def update_agent(self, request: operations.UpdateAgentRequest) -> operations.UpdateAgentResponse:
        r"""Updates the name of an agent."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.UpdateAgent'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "update_agent_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAgentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_agent_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def update_location_hdfs(self, request: operations.UpdateLocationHdfsRequest) -> operations.UpdateLocationHdfsResponse:
        r"""Updates some parameters of a previously created location for a Hadoop Distributed File System cluster."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.UpdateLocationHdfs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "update_location_hdfs_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateLocationHdfsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_location_hdfs_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def update_location_nfs(self, request: operations.UpdateLocationNfsRequest) -> operations.UpdateLocationNfsResponse:
        r"""Updates some of the parameters of a previously created location for Network File System (NFS) access. For information about creating an NFS location, see <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html\\">Creating a location for NFS</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.UpdateLocationNfs'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "update_location_nfs_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateLocationNfsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_location_nfs_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def update_location_object_storage(self, request: operations.UpdateLocationObjectStorageRequest) -> operations.UpdateLocationObjectStorageResponse:
        r"""Updates some parameters of an existing object storage location that DataSync accesses for a transfer. For information about creating a self-managed object storage location, see <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/create-object-location.html\\">Creating a location for object storage</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.UpdateLocationObjectStorage'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "update_location_object_storage_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateLocationObjectStorageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_location_object_storage_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def update_location_smb(self, request: operations.UpdateLocationSmbRequest) -> operations.UpdateLocationSmbResponse:
        r"""Updates some of the parameters of a previously created location for Server Message Block (SMB) file system access. For information about creating an SMB location, see <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/create-smb-location.html\\">Creating a location for SMB</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.UpdateLocationSmb'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "update_location_smb_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateLocationSmbResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_location_smb_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def update_task(self, request: operations.UpdateTaskRequest) -> operations.UpdateTaskResponse:
        r"""Updates the metadata associated with a task."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.UpdateTask'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "update_task_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_task_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    def update_task_execution(self, request: operations.UpdateTaskExecutionRequest) -> operations.UpdateTaskExecutionResponse:
        r"""<p>Updates execution of a task.</p> <p>You can modify bandwidth throttling for a task execution that is running or queued. For more information, see <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/working-with-task-executions.html#adjust-bandwidth-throttling\\">Adjusting Bandwidth Throttling for a Task Execution</a>.</p> <note> <p>The only <code>Option</code> that can be modified by <code>UpdateTaskExecution</code> is <code> <a href=\\"https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-BytesPerSecond\\">BytesPerSecond</a> </code>.</p> </note>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=FmrsService.UpdateTaskExecution'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "update_task_execution_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTaskExecutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_task_execution_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.internal_exception = out

        return res

    