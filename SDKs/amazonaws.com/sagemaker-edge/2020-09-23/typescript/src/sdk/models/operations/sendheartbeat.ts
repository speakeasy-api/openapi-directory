/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information about the result of a deployment on an edge device that is registered with SageMaker Edge Manager.
 */
export class SendHeartbeatRequestBodyDeploymentResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DeploymentEndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deploymentEndTime?: Date;

  @SpeakeasyMetadata({ elemType: shared.DeploymentModel })
  @Expose({ name: "DeploymentModels" })
  @Type(() => shared.DeploymentModel)
  deploymentModels?: shared.DeploymentModel[];

  @SpeakeasyMetadata()
  @Expose({ name: "DeploymentName" })
  deploymentName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DeploymentStartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  deploymentStartTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DeploymentStatus" })
  deploymentStatus?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DeploymentStatusMessage" })
  deploymentStatusMessage?: string;
}

export class SendHeartbeatRequestBody extends SpeakeasyBase {
  /**
   * For internal use. Returns a list of SageMaker Edge Manager agent operating metrics.
   */
  @SpeakeasyMetadata({ elemType: shared.EdgeMetric })
  @Expose({ name: "AgentMetrics" })
  @Type(() => shared.EdgeMetric)
  agentMetrics?: shared.EdgeMetric[];

  /**
   * Returns the version of the agent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AgentVersion" })
  agentVersion: string;

  /**
   * Information about the result of a deployment on an edge device that is registered with SageMaker Edge Manager.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DeploymentResult" })
  @Type(() => SendHeartbeatRequestBodyDeploymentResult)
  deploymentResult?: SendHeartbeatRequestBodyDeploymentResult;

  /**
   * The name of the fleet that the device belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DeviceFleetName" })
  deviceFleetName: string;

  /**
   * The unique name of the device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DeviceName" })
  deviceName: string;

  /**
   * Returns a list of models deployed on the the device.
   */
  @SpeakeasyMetadata({ elemType: shared.Model })
  @Expose({ name: "Models" })
  @Type(() => shared.Model)
  models?: shared.Model[];
}

export class SendHeartbeatRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: SendHeartbeatRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class SendHeartbeatResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
