"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Coupons:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def archivebycouponcode(self, request: operations.ArchivebycouponcodeRequest) -> operations.ArchivebycouponcodeResponse:
        r"""Archive coupon by coupon code
        Archives a specifc coupon by its coupon code.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArchivebycouponcodeRequest, base_url, '/api/rnb/pvt/archive/coupon/{couponCode}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArchivebycouponcodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.coupon_code = http_res.content

        return res

    def getall(self, request: operations.GetallRequest) -> operations.GetallResponse:
        r"""Get all coupons
        > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.
        
         Retrieves all coupons from an account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/rnb/pvt/coupon'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.Getall200ApplicationJSON]])
                res.getall_200_application_json_objects = out

        return res

    def getarchivedbycouponcode(self, request: operations.GetarchivedbycouponcodeRequest) -> operations.GetarchivedbycouponcodeResponse:
        r"""Get archived coupon by coupon code
        Retrieves a specific archived coupon by its coupon code.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetarchivedbycouponcodeRequest, base_url, '/api/rnb/pvt/archive/coupon/{couponCode}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetarchivedbycouponcodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Getarchivedbycouponcode200ApplicationJSON])
                res.getarchivedbycouponcode_200_application_json_object = out

        return res

    def getbycouponcode(self, request: operations.GetbycouponcodeRequest) -> operations.GetbycouponcodeResponse:
        r"""Get coupon by coupon code
        Retrieves a specific coupon by its coupon code.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetbycouponcodeRequest, base_url, '/api/rnb/pvt/coupon/{couponCode}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetbycouponcodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Getbycouponcode200ApplicationJSON])
                res.getbycouponcode_200_application_json_object = out

        return res

    def getusage(self, request: operations.GetusageRequest) -> operations.GetusageResponse:
        r"""Get coupon usage
        Retrieves information about the coupon usage.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetusageRequest, base_url, '/api/rnb/pvt/coupon/usage/{couponCode}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetusageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Getusage200ApplicationJSON])
                res.getusage_200_application_json_object = out

        return res

    def massive_generation(self, request: operations.MassiveGenerationRequest) -> operations.MassiveGenerationResponse:
        r"""Coupon Massive Generation
        Generates a massive amount of coupons
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/rnb/pvt/coupons'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.MassiveGenerationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MassiveGenerationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.coupon_codes = out

        return res

    def unarchivebycouponcode(self, request: operations.UnarchivebycouponcodeRequest) -> operations.UnarchivebycouponcodeResponse:
        r"""Unarchive coupon by coupon code
        Unarchives a specifc coupon by its coupon code.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnarchivebycouponcodeRequest, base_url, '/api/rnb/pvt/unarchive/coupon/{couponCode}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnarchivebycouponcodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.coupon_code = http_res.content

        return res

    def update(self, request: operations.UpdateRequest) -> operations.UpdateResponse:
        r"""Update coupon
        Updates information of a specific coupon.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/rnb/pvt/coupon'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Update200ApplicationJSON])
                res.update_200_application_json_object = out

        return res

    def post_api_rnb_pvt_coupon_(self, request: operations.PostAPIRnbPvtCouponRequest) -> operations.PostAPIRnbPvtCouponResponse:
        r"""Create coupon
        Creates a single new coupon.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/rnb/pvt/coupon/'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIRnbPvtCouponResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAPIRnbPvtCoupon201ApplicationJSON])
                res.post_api_rnb_pvt_coupon_201_application_json_object = out

        return res

    def post_api_rnb_pvt_multiple_coupons(self, request: operations.PostAPIRnbPvtMultipleCouponsRequest) -> operations.PostAPIRnbPvtMultipleCouponsResponse:
        r"""Create multiple coupons
        Creates multiple coupons with different coupon codes. This endpoint has a throttling of 60 requests per minute.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/rnb/pvt/multiple-coupons'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIRnbPvtMultipleCouponsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.items = out

        return res

    