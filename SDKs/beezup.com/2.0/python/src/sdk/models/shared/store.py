"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import storelinks as shared_storelinks
from ..shared import storestatus_enum as shared_storestatus_enum
from ..shared import storeuserrole_enum as shared_storeuserrole_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Store:
    r"""The store information"""
    
    country_iso_code_alpha3: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryIsoCodeAlpha3') }})
    r"""The country iso code alpha 3 based on the list of values /user/lov/StoreCountry"""  
    creation_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The creation date of the store"""  
    currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode') }})
    r"""The currency code <a href=\\"https://en.wikipedia.org/wiki/ISO_4217\\">(ISO 4217)</a>"""  
    go_version: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('goVersion') }})
    r"""The version of GO to use"""  
    is_test: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isTest') }})
    r"""Is the store a test or a production store"""  
    links: shared_storelinks.StoreLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})
    r"""The action links for this store"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The store name. Must be unique."""  
    offer_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offerId') }})
    r"""The offer id based on /offers. Not a free offer of course."""  
    offer_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offerName') }})
    r"""The offer Name"""  
    owner_user_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerUserId') }})
    r"""The user id of the owner of the store"""  
    sectors: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sectors') }})
    r"""The store's sectors based on the list of values /user/lov/ParamSector"""  
    share_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shareCount') }})
    r"""The share count related to this store"""  
    status: shared_storestatus_enum.StoreStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The store status
    * Active:  When the store is active
    * SystemBlocked:  When the store is blocked by the system
    * UserBlocked: When the store is blocked on GO not on the system
    """  
    store_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeId') }})
    r"""The store identifier"""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The url of your store"""  
    user_role: shared_storeuserrole_enum.StoreUserRoleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userRole') }})
    r"""Indicates the role can have a user on a store.
    * Owner: Indicates that you are the owner of this store
    * User: Indicates that you are a simple user on this store
    """  
    