/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Branch - Branch represents a repository branch
 */
public class Branch {
    /**
     * PayloadCommit represents a commit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commit")
    public PayloadCommit commit;

    public Branch withCommit(PayloadCommit commit) {
        this.commit = commit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effective_branch_protection_name")
    public String effectiveBranchProtectionName;

    public Branch withEffectiveBranchProtectionName(String effectiveBranchProtectionName) {
        this.effectiveBranchProtectionName = effectiveBranchProtectionName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enable_status_check")
    public Boolean enableStatusCheck;

    public Branch withEnableStatusCheck(Boolean enableStatusCheck) {
        this.enableStatusCheck = enableStatusCheck;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Branch withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protected")
    public Boolean protected_;

    public Branch withProtected(Boolean protected_) {
        this.protected_ = protected_;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required_approvals")
    public Long requiredApprovals;

    public Branch withRequiredApprovals(Long requiredApprovals) {
        this.requiredApprovals = requiredApprovals;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_check_contexts")
    public String[] statusCheckContexts;

    public Branch withStatusCheckContexts(String[] statusCheckContexts) {
        this.statusCheckContexts = statusCheckContexts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_can_merge")
    public Boolean userCanMerge;

    public Branch withUserCanMerge(Boolean userCanMerge) {
        this.userCanMerge = userCanMerge;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_can_push")
    public Boolean userCanPush;

    public Branch withUserCanPush(Boolean userCanPush) {
        this.userCanPush = userCanPush;
        return this;
    }
    
    public Branch(){}
}
