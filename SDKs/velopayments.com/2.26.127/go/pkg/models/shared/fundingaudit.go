// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type FundingAuditFundingTypeEnum string

const (
	FundingAuditFundingTypeEnumAch      FundingAuditFundingTypeEnum = "ACH"
	FundingAuditFundingTypeEnumWire     FundingAuditFundingTypeEnum = "WIRE"
	FundingAuditFundingTypeEnumEmbedded FundingAuditFundingTypeEnum = "EMBEDDED"
)

func (e *FundingAuditFundingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACH":
		fallthrough
	case "WIRE":
		fallthrough
	case "EMBEDDED":
		*e = FundingAuditFundingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FundingAuditFundingTypeEnum: %s", s)
	}
}

type FundingAuditStatusEnum string

const (
	FundingAuditStatusEnumPending FundingAuditStatusEnum = "PENDING"
	FundingAuditStatusEnumFailed  FundingAuditStatusEnum = "FAILED"
	FundingAuditStatusEnumCredit  FundingAuditStatusEnum = "CREDIT"
	FundingAuditStatusEnumDebit   FundingAuditStatusEnum = "DEBIT"
)

func (e *FundingAuditStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PENDING":
		fallthrough
	case "FAILED":
		fallthrough
	case "CREDIT":
		fallthrough
	case "DEBIT":
		*e = FundingAuditStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FundingAuditStatusEnum: %s", s)
	}
}

type FundingAuditTopupTypeEnum string

const (
	FundingAuditTopupTypeEnumAutomatic FundingAuditTopupTypeEnum = "AUTOMATIC"
	FundingAuditTopupTypeEnumManual    FundingAuditTopupTypeEnum = "MANUAL"
)

func (e *FundingAuditTopupTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AUTOMATIC":
		fallthrough
	case "MANUAL":
		*e = FundingAuditTopupTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FundingAuditTopupTypeEnum: %s", s)
	}
}

type FundingAudit struct {
	// The amount funded
	Amount *float64 `json:"amount,omitempty"`
	// The currency of the funding
	Currency           *string                      `json:"currency,omitempty"`
	DateTime           *time.Time                   `json:"dateTime,omitempty"`
	Events             []FundingEvent               `json:"events,omitempty"`
	FundingAccountName *string                      `json:"fundingAccountName,omitempty"`
	FundingType        *FundingAuditFundingTypeEnum `json:"fundingType,omitempty"`
	SourceAccountName  *string                      `json:"sourceAccountName,omitempty"`
	Status             *FundingAuditStatusEnum      `json:"status,omitempty"`
	TopupType          *FundingAuditTopupTypeEnum   `json:"topupType,omitempty"`
}
