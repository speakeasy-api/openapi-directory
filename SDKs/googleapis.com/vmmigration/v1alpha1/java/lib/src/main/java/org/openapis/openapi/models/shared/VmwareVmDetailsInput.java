/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VmwareVmDetailsInput - VmwareVmDetails describes a VM in vCenter.
 */
public class VmwareVmDetailsInput {
    /**
     * The total size of the storage allocated to the VM in MB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committedStorage")
    public String committedStorage;
    public VmwareVmDetailsInput withCommittedStorage(String committedStorage) {
        this.committedStorage = committedStorage;
        return this;
    }
    
    /**
     * The total size of the storage allocated to the VM in MB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committedStorageMb")
    public String committedStorageMb;
    public VmwareVmDetailsInput withCommittedStorageMb(String committedStorageMb) {
        this.committedStorageMb = committedStorageMb;
        return this;
    }
    
    /**
     * The number of cpus in the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpuCount")
    public Integer cpuCount;
    public VmwareVmDetailsInput withCpuCount(Integer cpuCount) {
        this.cpuCount = cpuCount;
        return this;
    }
    
    /**
     * The descriptive name of the vCenter's datacenter this VM is contained in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datacenterDescription")
    public String datacenterDescription;
    public VmwareVmDetailsInput withDatacenterDescription(String datacenterDescription) {
        this.datacenterDescription = datacenterDescription;
        return this;
    }
    
    /**
     * The id of the vCenter's datacenter this VM is contained in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datacenterId")
    public String datacenterId;
    public VmwareVmDetailsInput withDatacenterId(String datacenterId) {
        this.datacenterId = datacenterId;
        return this;
    }
    
    /**
     * The number of disks the VM has.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskCount")
    public Integer diskCount;
    public VmwareVmDetailsInput withDiskCount(Integer diskCount) {
        this.diskCount = diskCount;
        return this;
    }
    
    /**
     * The display name of the VM. Note that this is not necessarily unique.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public VmwareVmDetailsInput withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestDescription")
    public String guestDescription;
    public VmwareVmDetailsInput withGuestDescription(String guestDescription) {
        this.guestDescription = guestDescription;
        return this;
    }
    
    /**
     * The size of the memory of the VM in MB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoryMb")
    public Integer memoryMb;
    public VmwareVmDetailsInput withMemoryMb(Integer memoryMb) {
        this.memoryMb = memoryMb;
        return this;
    }
    
    /**
     * The power state of the VM at the moment list was taken.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("powerState")
    public VmwareVmDetailsPowerStateEnum powerState;
    public VmwareVmDetailsInput withPowerState(VmwareVmDetailsPowerStateEnum powerState) {
        this.powerState = powerState;
        return this;
    }
    
    /**
     * The unique identifier of the VM in vCenter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    public String uuid;
    public VmwareVmDetailsInput withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
    /**
     * The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmId")
    public String vmId;
    public VmwareVmDetailsInput withVmId(String vmId) {
        this.vmId = vmId;
        return this;
    }
    
}
