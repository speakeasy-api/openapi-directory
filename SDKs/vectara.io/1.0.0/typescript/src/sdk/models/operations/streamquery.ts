/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class StreamQuerySecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=x-api-key",
  })
  apiKeyAuth?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth?: string;
}

export class StreamQueryRequest extends SpeakeasyBase {
  /**
   * The Customer ID to use for the request.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=customer-id",
  })
  customerId: number;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  servingBatchQueryRequest: shared.ServingBatchQueryRequest;
}

/**
 * A successful response.(streaming responses)
 */
export class StreamQueryStreamResultOfServingResponseSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => shared.GooglerpcStatus)
  error?: shared.GooglerpcStatus;

  @SpeakeasyMetadata()
  @Expose({ name: "result" })
  @Type(() => shared.ServingResponseSet)
  result?: shared.ServingResponseSet;
}

export class StreamQueryResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * A successful response.(streaming responses)
   */
  @SpeakeasyMetadata()
  streamResultOfServingResponseSet?: StreamQueryStreamResultOfServingResponseSet;

  /**
   * An unexpected error response.
   */
  @SpeakeasyMetadata()
  googlerpcStatus?: shared.GooglerpcStatus;
}
