<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootRole 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a new role
     * 
     * Create a new role in the current organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RoleInfoCreate $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateRoleResponse
     */
	public function createRole(
        \OpenAPI\OpenAPI\Models\Shared\RoleInfoCreate $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/role');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoleInfo', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a role
     * 
     * Delete the role with the specified ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRoleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRoleResponse
     */
	public function deleteRole(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRoleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/role/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get role information for the specified role
     * 
     * Get role information for the role with the specified ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRoleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRoleResponse
     */
	public function getRole(
        \OpenAPI\OpenAPI\Models\Operations\GetRoleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/role/{id}', \OpenAPI\OpenAPI\Models\Operations\GetRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoleInfo', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all roles in an organization
     * 
     * Get a list of role information for all roles in the specified organization.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRolesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRolesResponse
     */
	public function getRoles(
        \OpenAPI\OpenAPI\Models\Operations\GetRolesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRolesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/role');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRolesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleInfoListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoleInfoListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update role information
     * 
     * Update the role information for the specified role.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRoleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateRoleResponse
     */
	public function updateRole(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRoleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateRoleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/role/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateRoleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "roleInfoUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateRoleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RoleInfo', 'json');
            }
        }

        return $response;
    }
}