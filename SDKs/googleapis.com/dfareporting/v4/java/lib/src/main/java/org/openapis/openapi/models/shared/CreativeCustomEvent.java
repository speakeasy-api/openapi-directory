/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreativeCustomEvent - Creative Custom Event.
 */
public class CreativeCustomEvent {
    /**
     * Unique ID of this event used by Reporting and Data Transfer. This is a read-only field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advertiserCustomEventId")
    public String advertiserCustomEventId;

    public CreativeCustomEvent withAdvertiserCustomEventId(String advertiserCustomEventId) {
        this.advertiserCustomEventId = advertiserCustomEventId;
        return this;
    }
    
    /**
     * User-entered name for the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advertiserCustomEventName")
    public String advertiserCustomEventName;

    public CreativeCustomEvent withAdvertiserCustomEventName(String advertiserCustomEventName) {
        this.advertiserCustomEventName = advertiserCustomEventName;
        return this;
    }
    
    /**
     * Type of the event. This is a read-only field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advertiserCustomEventType")
    public CreativeCustomEventAdvertiserCustomEventTypeEnum advertiserCustomEventType;

    public CreativeCustomEvent withAdvertiserCustomEventType(CreativeCustomEventAdvertiserCustomEventTypeEnum advertiserCustomEventType) {
        this.advertiserCustomEventType = advertiserCustomEventType;
        return this;
    }
    
    /**
     * Artwork label column, used to link events in Campaign Manager back to events in Studio. This is a required field and should not be modified after insertion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("artworkLabel")
    public String artworkLabel;

    public CreativeCustomEvent withArtworkLabel(String artworkLabel) {
        this.artworkLabel = artworkLabel;
        return this;
    }
    
    /**
     * Artwork type used by the creative.This is a read-only field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("artworkType")
    public CreativeCustomEventArtworkTypeEnum artworkType;

    public CreativeCustomEvent withArtworkType(CreativeCustomEventArtworkTypeEnum artworkType) {
        this.artworkType = artworkType;
        return this;
    }
    
    /**
     * Click-through URL
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exitClickThroughUrl")
    public CreativeClickThroughUrl exitClickThroughUrl;

    public CreativeCustomEvent withExitClickThroughUrl(CreativeClickThroughUrl exitClickThroughUrl) {
        this.exitClickThroughUrl = exitClickThroughUrl;
        return this;
    }
    
    /**
     * ID of this event. This is a required field and should not be modified after insertion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public CreativeCustomEvent withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Popup Window Properties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("popupWindowProperties")
    public PopupWindowProperties popupWindowProperties;

    public CreativeCustomEvent withPopupWindowProperties(PopupWindowProperties popupWindowProperties) {
        this.popupWindowProperties = popupWindowProperties;
        return this;
    }
    
    /**
     * Target type used by the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetType")
    public CreativeCustomEventTargetTypeEnum targetType;

    public CreativeCustomEvent withTargetType(CreativeCustomEventTargetTypeEnum targetType) {
        this.targetType = targetType;
        return this;
    }
    
    /**
     * Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoReportingId")
    public String videoReportingId;

    public CreativeCustomEvent withVideoReportingId(String videoReportingId) {
        this.videoReportingId = videoReportingId;
        return this;
    }
    
    public CreativeCustomEvent(){}
}
