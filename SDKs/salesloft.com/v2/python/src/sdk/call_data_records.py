"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class CallDataRecords:
    r"""Call Data Record Management"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_v2_call_data_records_json(self, request: operations.GetV2CallDataRecordsJSONRequest) -> operations.GetV2CallDataRecordsJSONResponse:
        r"""List call data records
        Fetches multiple call data records. The records can be filtered, paged, and sorted according to
        the respective parameters.
        
        Call data records are records of all inbound and outbound calls through Salesloft. A call data record may
        be associated with a call, but does not have to be.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/call_data_records.json'
        
        query_params = utils.get_query_params(operations.GetV2CallDataRecordsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2CallDataRecordsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_v2_call_data_records_id_json(self, request: operations.GetV2CallDataRecordsIDJSONRequest) -> operations.GetV2CallDataRecordsIDJSONResponse:
        r"""Fetch a call data record
        Fetches a call data record, by ID only.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV2CallDataRecordsIDJSONRequest, base_url, '/v2/call_data_records/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV2CallDataRecordsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    