/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Sheet - A sheet in a spreadsheet.
 */
public class Sheet {
    /**
     * The banded (alternating colors) ranges on this sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bandedRanges")
    public BandedRange[] bandedRanges;
    public Sheet withBandedRanges(BandedRange[] bandedRanges) {
        this.bandedRanges = bandedRanges;
        return this;
    }
    
    /**
     * The default filter associated with a sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("basicFilter")
    public BasicFilter basicFilter;
    public Sheet withBasicFilter(BasicFilter basicFilter) {
        this.basicFilter = basicFilter;
        return this;
    }
    
    /**
     * The specifications of every chart on this sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("charts")
    public EmbeddedChart[] charts;
    public Sheet withCharts(EmbeddedChart[] charts) {
        this.charts = charts;
        return this;
    }
    
    /**
     * All column groups on this sheet, ordered by increasing range start index, then by group depth.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columnGroups")
    public DimensionGroup[] columnGroups;
    public Sheet withColumnGroups(DimensionGroup[] columnGroups) {
        this.columnGroups = columnGroups;
        return this;
    }
    
    /**
     * The conditional format rules in this sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conditionalFormats")
    public ConditionalFormatRule[] conditionalFormats;
    public Sheet withConditionalFormats(ConditionalFormatRule[] conditionalFormats) {
        this.conditionalFormats = conditionalFormats;
        return this;
    }
    
    /**
     * Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`, and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a startRow/startColumn of `0`, while the second one will have `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D). For a DATA_SOURCE sheet, you can not request a specific range, the GridData contains all the values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    public GridData[] data;
    public Sheet withData(GridData[] data) {
        this.data = data;
        return this;
    }
    
    /**
     * The developer metadata associated with a sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("developerMetadata")
    public DeveloperMetadata[] developerMetadata;
    public Sheet withDeveloperMetadata(DeveloperMetadata[] developerMetadata) {
        this.developerMetadata = developerMetadata;
        return this;
    }
    
    /**
     * The filter views in this sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterViews")
    public FilterView[] filterViews;
    public Sheet withFilterViews(FilterView[] filterViews) {
        this.filterViews = filterViews;
        return this;
    }
    
    /**
     * The ranges that are merged together.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merges")
    public GridRange[] merges;
    public Sheet withMerges(GridRange[] merges) {
        this.merges = merges;
        return this;
    }
    
    /**
     * Properties of a sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    public SheetProperties properties;
    public Sheet withProperties(SheetProperties properties) {
        this.properties = properties;
        return this;
    }
    
    /**
     * The protected ranges in this sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protectedRanges")
    public ProtectedRange[] protectedRanges;
    public Sheet withProtectedRanges(ProtectedRange[] protectedRanges) {
        this.protectedRanges = protectedRanges;
        return this;
    }
    
    /**
     * All row groups on this sheet, ordered by increasing range start index, then by group depth.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowGroups")
    public DimensionGroup[] rowGroups;
    public Sheet withRowGroups(DimensionGroup[] rowGroups) {
        this.rowGroups = rowGroups;
        return this;
    }
    
    /**
     * The slicers on this sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slicers")
    public Slicer[] slicers;
    public Sheet withSlicers(Slicer[] slicers) {
        this.slicers = slicers;
        return this;
    }
    
}
