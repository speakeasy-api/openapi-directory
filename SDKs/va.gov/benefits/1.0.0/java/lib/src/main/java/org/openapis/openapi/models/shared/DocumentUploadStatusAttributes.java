/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class DocumentUploadStatusAttributes {
    /**
     * Unambiguous status code. Only present if status = "error"
     * 
     * * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
     * * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
     * * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
     * * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
     * * `DOC105` - Invalid or unknown id
     * * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
     * * `DOC107` - Empty payload.
     * * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
     * * `DOC201` - Upload server error.
     * * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;

    public DocumentUploadStatusAttributes withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Human readable error detail. Only present if status = "error"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detail")
    public String detail;

    public DocumentUploadStatusAttributes withDetail(String detail) {
        this.detail = detail;
        return this;
    }
    
    /**
     * The document upload identifier
     */
    @JsonProperty("guid")
    public String guid;

    public DocumentUploadStatusAttributes withGuid(String guid) {
        this.guid = guid;
        return this;
    }
    
    /**
     * Human readable error description. Only present if status = "error"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    public String message;

    public DocumentUploadStatusAttributes withMessage(String message) {
        this.message = message;
        return this;
    }
    
    /**
     * Document upload status.
     * 
     */
    @JsonProperty("status")
    public DocumentUploadStatusAttributesStatusEnum status;

    public DocumentUploadStatusAttributes withStatus(DocumentUploadStatusAttributesStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The last time the submission was updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public DocumentUploadStatusAttributes withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploaded_pdf")
    public PdfUploadAttributes uploadedPdf;

    public DocumentUploadStatusAttributes withUploadedPdf(PdfUploadAttributes uploadedPdf) {
        this.uploadedPdf = uploadedPdf;
        return this;
    }
    
    public DocumentUploadStatusAttributes(@JsonProperty("guid") String guid, @JsonProperty("status") DocumentUploadStatusAttributesStatusEnum status) {
        this.guid = guid;
        this.status = status;
  }
}
