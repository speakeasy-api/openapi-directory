/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class CreateAccessTokenApplicationXWwwFormUrlencoded {
    /**
     * Client ID (Consumer Key) of your application
     */
    @SpeakeasyMetadata("form:name=client_id")
    public String clientId;
    public CreateAccessTokenApplicationXWwwFormUrlencoded withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Client Secret (Consumer Secret) of your application
     */
    @SpeakeasyMetadata("form:name=client_secret")
    public String clientSecret;
    public CreateAccessTokenApplicationXWwwFormUrlencoded withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }
    
    /**
     * Response code from the /oauth/authorize flow; required if grant_type=authorization_code
     */
    @SpeakeasyMetadata("form:name=code")
    public String code;
    public CreateAccessTokenApplicationXWwwFormUrlencoded withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token
     */
    @SpeakeasyMetadata("form:name=expires")
    public CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum expires;
    public CreateAccessTokenApplicationXWwwFormUrlencoded withExpires(CreateAccessTokenApplicationXWwwFormUrlencodedExpiresEnum expires) {
        this.expires = expires;
        return this;
    }
    
    /**
     * Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
     */
    @SpeakeasyMetadata("form:name=grant_type")
    public CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum grantType;
    public CreateAccessTokenApplicationXWwwFormUrlencoded withGrantType(CreateAccessTokenApplicationXWwwFormUrlencodedGrantTypeEnum grantType) {
        this.grantType = grantType;
        return this;
    }
    
    /**
     * User type to be authorized (usually 'customer')
     */
    @SpeakeasyMetadata("form:name=realm")
    public CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum realm;
    public CreateAccessTokenApplicationXWwwFormUrlencoded withRealm(CreateAccessTokenApplicationXWwwFormUrlencodedRealmEnum realm) {
        this.realm = realm;
        return this;
    }
    
    /**
     * Pass this along with grant_type=refresh_token to get a fresh access token
     */
    @SpeakeasyMetadata("form:name=refresh_token")
    public String refreshToken;
    public CreateAccessTokenApplicationXWwwFormUrlencoded withRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }
    
}
