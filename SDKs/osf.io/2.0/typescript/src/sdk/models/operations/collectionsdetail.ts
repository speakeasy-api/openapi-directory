/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class CollectionsDetailRequest extends SpeakeasyBase {
  /**
   * A short id for that collection
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=collection_id",
  })
  collectionId: string;
}

/**
 * The properties of the collection.
 */
export class CollectionsDetailCollectionAttributes extends SpeakeasyBase {
  /**
   * This attribute indicates if a collection is being used as part of the bookmarking feature that allows each user to create a personal collection.
   */
  @SpeakeasyMetadata()
  bookmarks?: boolean;

  /**
   * A list of the acceptable entity `collected_type` metadata options acceptable for entities in the a collection. This indicates the collected types of entities within a collection.
   */
  @SpeakeasyMetadata()
  collectedTypeChoices?: string[];

  /**
   * The time at which the collection was created, as an iso8601 formatted timestamp.
   */
  @SpeakeasyMetadata()
  dateCreated?: Date;

  /**
   * The time at which the collection was last modified, as an iso8601 formatted timestamp.
   */
  @SpeakeasyMetadata()
  dateModified?: Date;

  /**
   * ???
   */
  @SpeakeasyMetadata()
  isPromoted?: boolean;

  /**
   * This attribute indicates if a collection is viewable to a user with no special permissions.
   */
  @SpeakeasyMetadata()
  isPublic?: boolean;

  /**
   * A list of the acceptable entity `issue` metadata options acceptable for entities in the a collection.  This indicates what issues exist of a multi-issue collection.
   */
  @SpeakeasyMetadata()
  issueChoices?: string[];

  /**
   * A list of the acceptable entity `program_area` metadata options acceptable for entities in the a collection.  This indicates what program areas a collection is composed of .
   */
  @SpeakeasyMetadata()
  programAreaChoices?: string[];

  /**
   * A list of the acceptable entity `status` metadata options acceptable for entities in the a collection. This indicates the status of a entity within a collection.
   */
  @SpeakeasyMetadata()
  statusChoices?: string[];

  /**
   * The title of the collection.
   */
  @SpeakeasyMetadata()
  title?: string;

  /**
   * A list of the acceptable entity `volume` metadata options acceptable for entities in the a collection.  This indicates what volumes exist of a multi-volume collection.
   */
  @SpeakeasyMetadata()
  volumeChoices?: string[];
}

/**
 * URLs to alternative representations of the entity.
 */
export class CollectionsDetailCollectionLinks extends SpeakeasyBase {
  /**
   * A link to the canonical API endpoint of this collection.
   */
  @SpeakeasyMetadata()
  self?: string;
}

/**
 * URLs to other entities or entity collections that have a relationship to the node entity.
 */
export class CollectionsDetailCollectionRelationships extends SpeakeasyBase {
  /**
   * A link to the list of metadata entries that are linked to the current collections.
   */
  @SpeakeasyMetadata()
  collectedMetadata?: string;

  /**
   * A link to the list of nodes that are linked to the current collection.
   */
  @SpeakeasyMetadata()
  linkedNodes?: string;

  /**
   * A link to the list of preprints that are linked to the current collection.
   */
  @SpeakeasyMetadata()
  linkedPreprints?: string;

  /**
   * A link to the list of registrations that are linked to the current collection.
   */
  @SpeakeasyMetadata()
  linkedRegistrations?: string;

  /**
   * A link to the list of nodes that are linked to the current collection.
   */
  @SpeakeasyMetadata()
  nodeLinks?: string;

  /**
   * A link to the list of preprints that this node relates to.
   */
  @SpeakeasyMetadata()
  provider?: string;
}

export class CollectionsDetailCollection extends SpeakeasyBase {
  /**
   * The properties of the collection.
   */
  @SpeakeasyMetadata()
  attributes?: CollectionsDetailCollectionAttributes;

  /**
   * The unique identifier of the collection.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * URLs to alternative representations of the entity.
   */
  @SpeakeasyMetadata()
  links?: CollectionsDetailCollectionLinks;

  /**
   * URLs to other entities or entity collections that have a relationship to the node entity.
   */
  @SpeakeasyMetadata()
  relationships?: CollectionsDetailCollectionRelationships;

  /**
   * The type identifier of the entity (`collections`).
   */
  @SpeakeasyMetadata()
  type: string;
}

export class CollectionsDetailResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
