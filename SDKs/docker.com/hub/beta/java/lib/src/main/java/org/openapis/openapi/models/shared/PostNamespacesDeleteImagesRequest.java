/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PostNamespacesDeleteImagesRequest - Delete images request.
 */
public class PostNamespacesDeleteImagesRequest {
    /**
     * Sets the time from which an image must have been pushed or pulled to
     * be counted as active.
     * 
     * Defaults to 1 month before the current time.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active_from")
    public String activeFrom;
    public PostNamespacesDeleteImagesRequest withActiveFrom(String activeFrom) {
        this.activeFrom = activeFrom;
        return this;
    }
    
    /**
     * If `true` then will check and return errors and unignored warnings for the deletion request but will not delete any images.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dry_run")
    public Boolean dryRun;
    public PostNamespacesDeleteImagesRequest withDryRun(Boolean dryRun) {
        this.dryRun = dryRun;
        return this;
    }
    
    /**
     * Warnings to ignore. If a warning is not ignored then no deletions will happen and the 
     * warning is returned in the response.
     * 
     * These warnings include:
     * 
     * - is_active: warning when attempting to delete an image that is marked as active.
     * - current_tag: warning when attempting to delete an image that has one or more current 
     * tags in the repository.
     * 
     * Warnings can be copied from the response to the request.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignore_warnings")
    public PostNamespacesDeleteImagesRequestIgnoreWarnings[] ignoreWarnings;
    public PostNamespacesDeleteImagesRequest withIgnoreWarnings(PostNamespacesDeleteImagesRequestIgnoreWarnings[] ignoreWarnings) {
        this.ignoreWarnings = ignoreWarnings;
        return this;
    }
    
    /**
     * Image manifests to delete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manifests")
    public PostNamespacesDeleteImagesRequestManifests[] manifests;
    public PostNamespacesDeleteImagesRequest withManifests(PostNamespacesDeleteImagesRequestManifests[] manifests) {
        this.manifests = manifests;
        return this;
    }
    
}
