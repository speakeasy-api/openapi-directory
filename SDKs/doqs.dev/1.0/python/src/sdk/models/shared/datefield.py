"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import boundingbox as shared_boundingbox
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DateFieldFontEnum(str, Enum):
    r"""An enumeration."""
    COURIER = 'courier'
    HELVETICA = 'helvetica'
    TIMES_ROMAN = 'times_roman'

class DateFieldHorizontalAlignEnum(str, Enum):
    r"""An enumeration."""
    L = 'L'
    C = 'C'
    R = 'R'

class DateFieldTypeEnum(str, Enum):
    DATE = 'date'

class DateFieldVerticalAlignEnum(str, Enum):
    r"""An enumeration."""
    T = 'T'
    C = 'C'
    B = 'B'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DateField:
    
    bbox: shared_boundingbox.BoundingBox = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bbox') }})  
    format: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    page: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page') }})  
    type: DateFieldTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    cell_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cell_count'), 'exclude': lambda f: f is None }})  
    cell_offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cell_offset'), 'exclude': lambda f: f is None }})  
    cells: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cells'), 'exclude': lambda f: f is None }})  
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})  
    font: Optional[DateFieldFontEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('font'), 'exclude': lambda f: f is None }})  
    font_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('font_size'), 'exclude': lambda f: f is None }})  
    h_align: Optional[DateFieldHorizontalAlignEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('h_align'), 'exclude': lambda f: f is None }})  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})  
    v_align: Optional[DateFieldVerticalAlignEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('v_align'), 'exclude': lambda f: f is None }})  
    