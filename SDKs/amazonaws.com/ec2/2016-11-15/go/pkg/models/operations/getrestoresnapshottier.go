// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETRestoreSnapshotTierActionEnum
type GETRestoreSnapshotTierActionEnum string

const (
	GETRestoreSnapshotTierActionEnumRestoreSnapshotTier GETRestoreSnapshotTierActionEnum = "RestoreSnapshotTier"
)

func (e GETRestoreSnapshotTierActionEnum) ToPointer() *GETRestoreSnapshotTierActionEnum {
	return &e
}

func (e *GETRestoreSnapshotTierActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RestoreSnapshotTier":
		*e = GETRestoreSnapshotTierActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRestoreSnapshotTierActionEnum: %v", v)
	}
}

// GETRestoreSnapshotTierVersionEnum
type GETRestoreSnapshotTierVersionEnum string

const (
	GETRestoreSnapshotTierVersionEnumTwoThousandAndSixteen1115 GETRestoreSnapshotTierVersionEnum = "2016-11-15"
)

func (e GETRestoreSnapshotTierVersionEnum) ToPointer() *GETRestoreSnapshotTierVersionEnum {
	return &e
}

func (e *GETRestoreSnapshotTierVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETRestoreSnapshotTierVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRestoreSnapshotTierVersionEnum: %v", v)
	}
}

type GETRestoreSnapshotTierRequest struct {
	Action GETRestoreSnapshotTierActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// Indicates whether to permanently restore an archived snapshot. To permanently restore an archived snapshot, specify <code>true</code> and omit the <b>RestoreSnapshotTierRequest$TemporaryRestoreDays</b> parameter.
	PermanentRestore *bool `queryParam:"style=form,explode=true,name=PermanentRestore"`
	// The ID of the snapshot to restore.
	SnapshotID string `queryParam:"style=form,explode=true,name=SnapshotId"`
	// <p>Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.</p> <p>To temporarily restore an archived snapshot, specify the number of days and omit the <b>PermanentRestore</b> parameter or set it to <code>false</code>.</p>
	TemporaryRestoreDays *int64                            `queryParam:"style=form,explode=true,name=TemporaryRestoreDays"`
	Version              GETRestoreSnapshotTierVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm        *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETRestoreSnapshotTierResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
