/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Match - Successful response
 */
public class Match {
    /**
     * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actual_time")
    public Long actualTime;
    public Match withActualTime(Long actualTime) {
        this.actualTime = actualTime;
        return this;
    }
    
    /**
     * A list of alliances, the teams on the alliances, and their score.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alliances")
    public MatchAlliances alliances;
    public Match withAlliances(MatchAlliances alliances) {
        this.alliances = alliances;
        return this;
    }
    
    /**
     * The competition level the match was played at.
     */
    @JsonProperty("comp_level")
    public MatchCompLevelEnum compLevel;
    public Match withCompLevel(MatchCompLevelEnum compLevel) {
        this.compLevel = compLevel;
        return this;
    }
    
    /**
     * Event key of the event the match was played at.
     */
    @JsonProperty("event_key")
    public String eventKey;
    public Match withEventKey(String eventKey) {
        this.eventKey = eventKey;
        return this;
    }
    
    /**
     * TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.
     */
    @JsonProperty("key")
    public String key;
    public Match withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * The match number of the match in the competition level.
     */
    @JsonProperty("match_number")
    public Long matchNumber;
    public Match withMatchNumber(Long matchNumber) {
        this.matchNumber = matchNumber;
        return this;
    }
    
    /**
     * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("post_result_time")
    public Long postResultTime;
    public Match withPostResultTime(Long postResultTime) {
        this.postResultTime = postResultTime;
        return this;
    }
    
    /**
     * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("predicted_time")
    public Long predictedTime;
    public Match withPredictedTime(Long predictedTime) {
        this.predictedTime = predictedTime;
        return this;
    }
    
    /**
     * Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("score_breakdown")
    public java.util.Map<String, Object> scoreBreakdown;
    public Match withScoreBreakdown(java.util.Map<String, Object> scoreBreakdown) {
        this.scoreBreakdown = scoreBreakdown;
        return this;
    }
    
    /**
     * The set number in a series of matches where more than one match is required in the match series.
     */
    @JsonProperty("set_number")
    public Long setNumber;
    public Match withSetNumber(Long setNumber) {
        this.setNumber = setNumber;
        return this;
    }
    
    /**
     * UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time")
    public Long time;
    public Match withTime(Long time) {
        this.time = time;
        return this;
    }
    
    /**
     * Array of video objects associated with this match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videos")
    public MatchVideos[] videos;
    public Match withVideos(MatchVideos[] videos) {
        this.videos = videos;
        return this;
    }
    
    /**
     * The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("winning_alliance")
    public MatchWinningAllianceEnum winningAlliance;
    public Match withWinningAlliance(MatchWinningAllianceEnum winningAlliance) {
        this.winningAlliance = winningAlliance;
        return this;
    }
    
}
