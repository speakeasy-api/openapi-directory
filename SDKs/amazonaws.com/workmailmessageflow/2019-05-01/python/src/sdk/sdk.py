"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

SERVERS = [
    "http://workmailmessageflow.{region}.amazonaws.com",
    r"""The Amazon WorkMail Message Flow multi-region endpoint"""
    "https://workmailmessageflow.{region}.amazonaws.com",
    r"""The Amazon WorkMail Message Flow multi-region endpoint"""
    "http://workmailmessageflow.{region}.amazonaws.com.cn",
    r"""The Amazon WorkMail Message Flow endpoint for China (Beijing) and China (Ningxia)"""
    "https://workmailmessageflow.{region}.amazonaws.com.cn",
    r"""The Amazon WorkMail Message Flow endpoint for China (Beijing) and China (Ningxia)"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The WorkMail Message Flow API provides access to email messages as they are being sent and received by a WorkMail organization.
    https://docs.aws.amazon.com/workmailmessageflow/ - Amazon Web Services documentation
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def get_raw_message_content(self, request: operations.GetRawMessageContentRequest) -> operations.GetRawMessageContentResponse:
        r"""Retrieves the raw content of an in-transit email message, in MIME format."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRawMessageContentRequest, base_url, '/messages/{messageId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRawMessageContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetRawMessageContentResponse])
                res.get_raw_message_content_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out

        return res

    def put_raw_message_content(self, request: operations.PutRawMessageContentRequest) -> operations.PutRawMessageContentResponse:
        r"""<p>Updates the raw content of an in-transit email message, in MIME format.</p> <p>This example describes how to update in-transit email message. For more information and examples for using this API, see <a href=\\"https://docs.aws.amazon.com/workmail/latest/adminguide/update-with-lambda.html\\"> Updating message content with AWS Lambda</a>.</p> <note> <p>Updates to an in-transit message only appear when you call <code>PutRawMessageContent</code> from an AWS Lambda function configured with a synchronous <a href=\\"https://docs.aws.amazon.com/workmail/latest/adminguide/lambda.html#synchronous-rules\\"> Run Lambda</a> rule. If you call <code>PutRawMessageContent</code> on a delivered or sent message, the message remains unchanged, even though <a href=\\"https://docs.aws.amazon.com/workmail/latest/APIReference/API_messageflow_GetRawMessageContent.html\\">GetRawMessageContent</a> returns an updated message. </p> </note>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRawMessageContentRequest, base_url, '/messages/{messageId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRawMessageContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.put_raw_message_content_response = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_content_location = out
        elif http_res.status_code == 482:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.message_rejected = out
        elif http_res.status_code == 483:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.message_frozen = out

        return res

    