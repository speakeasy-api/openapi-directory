"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddocumentaiv1documentpageblock as shared_googleclouddocumentaiv1documentpageblock
from ..shared import googleclouddocumentaiv1documentpagedetectedbarcode as shared_googleclouddocumentaiv1documentpagedetectedbarcode
from ..shared import googleclouddocumentaiv1documentpagedetectedlanguage as shared_googleclouddocumentaiv1documentpagedetectedlanguage
from ..shared import googleclouddocumentaiv1documentpagedimension as shared_googleclouddocumentaiv1documentpagedimension
from ..shared import googleclouddocumentaiv1documentpageformfield as shared_googleclouddocumentaiv1documentpageformfield
from ..shared import googleclouddocumentaiv1documentpageimage as shared_googleclouddocumentaiv1documentpageimage
from ..shared import googleclouddocumentaiv1documentpageimagequalityscores as shared_googleclouddocumentaiv1documentpageimagequalityscores
from ..shared import googleclouddocumentaiv1documentpagelayout as shared_googleclouddocumentaiv1documentpagelayout
from ..shared import googleclouddocumentaiv1documentpageline as shared_googleclouddocumentaiv1documentpageline
from ..shared import googleclouddocumentaiv1documentpagematrix as shared_googleclouddocumentaiv1documentpagematrix
from ..shared import googleclouddocumentaiv1documentpageparagraph as shared_googleclouddocumentaiv1documentpageparagraph
from ..shared import googleclouddocumentaiv1documentpagesymbol as shared_googleclouddocumentaiv1documentpagesymbol
from ..shared import googleclouddocumentaiv1documentpagetable as shared_googleclouddocumentaiv1documentpagetable
from ..shared import googleclouddocumentaiv1documentpagetoken as shared_googleclouddocumentaiv1documentpagetoken
from ..shared import googleclouddocumentaiv1documentpagevisualelement as shared_googleclouddocumentaiv1documentpagevisualelement
from ..shared import googleclouddocumentaiv1documentprovenance as shared_googleclouddocumentaiv1documentprovenance
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDocumentaiV1DocumentPage:
    r"""A page in a Document."""
    
    blocks: Optional[list[shared_googleclouddocumentaiv1documentpageblock.GoogleCloudDocumentaiV1DocumentPageBlock]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocks'), 'exclude': lambda f: f is None }})
    r"""A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation."""  
    detected_barcodes: Optional[list[shared_googleclouddocumentaiv1documentpagedetectedbarcode.GoogleCloudDocumentaiV1DocumentPageDetectedBarcode]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedBarcodes'), 'exclude': lambda f: f is None }})
    r"""A list of detected barcodes."""  
    detected_languages: Optional[list[shared_googleclouddocumentaiv1documentpagedetectedlanguage.GoogleCloudDocumentaiV1DocumentPageDetectedLanguage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedLanguages'), 'exclude': lambda f: f is None }})
    r"""A list of detected languages together with confidence."""  
    dimension: Optional[shared_googleclouddocumentaiv1documentpagedimension.GoogleCloudDocumentaiV1DocumentPageDimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimension'), 'exclude': lambda f: f is None }})
    r"""Dimension for the page."""  
    form_fields: Optional[list[shared_googleclouddocumentaiv1documentpageformfield.GoogleCloudDocumentaiV1DocumentPageFormField]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formFields'), 'exclude': lambda f: f is None }})
    r"""A list of visually detected form fields on the page."""  
    image: Optional[shared_googleclouddocumentaiv1documentpageimage.GoogleCloudDocumentaiV1DocumentPageImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Rendered image contents for this page."""  
    image_quality_scores: Optional[shared_googleclouddocumentaiv1documentpageimagequalityscores.GoogleCloudDocumentaiV1DocumentPageImageQualityScores] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageQualityScores'), 'exclude': lambda f: f is None }})
    r"""Image Quality Scores for the page image"""  
    layout: Optional[shared_googleclouddocumentaiv1documentpagelayout.GoogleCloudDocumentaiV1DocumentPageLayout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layout'), 'exclude': lambda f: f is None }})
    r"""Visual element describing a layout unit on a page."""  
    lines: Optional[list[shared_googleclouddocumentaiv1documentpageline.GoogleCloudDocumentaiV1DocumentPageLine]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lines'), 'exclude': lambda f: f is None }})
    r"""A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line."""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageNumber'), 'exclude': lambda f: f is None }})
    r"""1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing."""  
    paragraphs: Optional[list[shared_googleclouddocumentaiv1documentpageparagraph.GoogleCloudDocumentaiV1DocumentPageParagraph]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paragraphs'), 'exclude': lambda f: f is None }})
    r"""A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph."""  
    provenance: Optional[shared_googleclouddocumentaiv1documentprovenance.GoogleCloudDocumentaiV1DocumentProvenance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provenance'), 'exclude': lambda f: f is None }})
    r"""Structure to identify provenance relationships between annotations in different revisions."""  
    symbols: Optional[list[shared_googleclouddocumentaiv1documentpagesymbol.GoogleCloudDocumentaiV1DocumentPageSymbol]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbols'), 'exclude': lambda f: f is None }})
    r"""A list of visually detected symbols on the page."""  
    tables: Optional[list[shared_googleclouddocumentaiv1documentpagetable.GoogleCloudDocumentaiV1DocumentPageTable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tables'), 'exclude': lambda f: f is None }})
    r"""A list of visually detected tables on the page."""  
    tokens: Optional[list[shared_googleclouddocumentaiv1documentpagetoken.GoogleCloudDocumentaiV1DocumentPageToken]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokens'), 'exclude': lambda f: f is None }})
    r"""A list of visually detected tokens on the page."""  
    transforms: Optional[list[shared_googleclouddocumentaiv1documentpagematrix.GoogleCloudDocumentaiV1DocumentPageMatrix]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transforms'), 'exclude': lambda f: f is None }})
    r"""Transformation matrices that were applied to the original document image to produce Page.image."""  
    visual_elements: Optional[list[shared_googleclouddocumentaiv1documentpagevisualelement.GoogleCloudDocumentaiV1DocumentPageVisualElement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visualElements'), 'exclude': lambda f: f is None }})
    r"""A list of detected non-text visual elements e.g. checkbox, signature etc. on the page."""  
    