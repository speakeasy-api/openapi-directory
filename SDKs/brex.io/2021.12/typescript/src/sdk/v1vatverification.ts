/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * VAT Verification methods
 */
export class V1VatVerification {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns a verification result
   *
   * @remarks
   * Basic verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
   */
  vatBasic(
    req: operations.VatBasicRequest,
    security: operations.VatBasicSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VatBasicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VatBasicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/vat-verification/basic-check/{country}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.VatBasicSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VatBasicResponse = new operations.VatBasicResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vatBasic200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.VatBasic200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vatBasicDefaultApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.VatBasicDefaultApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a verification result and company data
   *
   * @remarks
   * Extended verification of given VAT number against VIES. Optional parameters may help to build a better confidence score.
   */
  vatComprehensive(
    req: operations.VatComprehensiveRequest,
    security: operations.VatComprehensiveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VatComprehensiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VatComprehensiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/vat-verification/comprehensive-check/{country}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.VatComprehensiveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VatComprehensiveResponse =
        new operations.VatComprehensiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vatComprehensive200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.VatComprehensive200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vatComprehensiveDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.VatComprehensiveDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a level two verification result
   *
   * @remarks
   * Second Level Verification of VAT number against BMF Austria. Optional confirmation parameter can be provided to order a Confirmation Report.
   */
  vatLevelTwo(
    req: operations.VatLevelTwoRequest,
    security: operations.VatLevelTwoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VatLevelTwoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VatLevelTwoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/vat-verification/leveltwo-check/{country}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.VatLevelTwoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VatLevelTwoResponse =
        new operations.VatLevelTwoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vatLevelTwo200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.VatLevelTwo200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vatLevelTwoDefaultApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.VatLevelTwoDefaultApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of vat numbers with additional data
   *
   * @remarks
   * Reverse VAT Lookup: Search for companies and their VAT numbers by company name. Search is forwarded to a provider.
   */
  vatLookup(
    req: operations.VatLookupRequest,
    security: operations.VatLookupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VatLookupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VatLookupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/vat-verification/lookup/{country}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.VatLookupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VatLookupResponse =
        new operations.VatLookupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vatLookup200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.VatLookup200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.vatLookupDefaultApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.VatLookupDefaultApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
