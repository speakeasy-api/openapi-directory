"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2actiondetails as shared_googleprivacydlpv2actiondetails
from ..shared import googleprivacydlpv2analyzedatasourceriskdetails as shared_googleprivacydlpv2analyzedatasourceriskdetails
from ..shared import googleprivacydlpv2error as shared_googleprivacydlpv2error
from ..shared import googleprivacydlpv2inspectdatasourcedetails as shared_googleprivacydlpv2inspectdatasourcedetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GooglePrivacyDlpV2DlpJobStateEnum(str, Enum):
    r"""State of a job."""
    JOB_STATE_UNSPECIFIED = 'JOB_STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    DONE = 'DONE'
    CANCELED = 'CANCELED'
    FAILED = 'FAILED'
    ACTIVE = 'ACTIVE'

class GooglePrivacyDlpV2DlpJobTypeEnum(str, Enum):
    r"""The type of job."""
    DLP_JOB_TYPE_UNSPECIFIED = 'DLP_JOB_TYPE_UNSPECIFIED'
    INSPECT_JOB = 'INSPECT_JOB'
    RISK_ANALYSIS_JOB = 'RISK_ANALYSIS_JOB'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2DlpJob:
    r"""Combines all of the information about a DLP job."""
    
    action_details: Optional[list[shared_googleprivacydlpv2actiondetails.GooglePrivacyDlpV2ActionDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionDetails'), 'exclude': lambda f: f is None }})
    r"""Events that should occur after the job has completed."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Time when the job was created."""  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""Time when the job finished."""  
    errors: Optional[list[shared_googleprivacydlpv2error.GooglePrivacyDlpV2Error]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""A stream of errors encountered running the job."""  
    inspect_details: Optional[shared_googleprivacydlpv2inspectdatasourcedetails.GooglePrivacyDlpV2InspectDataSourceDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inspectDetails'), 'exclude': lambda f: f is None }})
    r"""The results of an inspect DataSource job."""  
    job_trigger_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobTriggerName'), 'exclude': lambda f: f is None }})
    r"""If created by a job trigger, the resource name of the trigger that instantiated the job."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The server-assigned name."""  
    risk_details: Optional[shared_googleprivacydlpv2analyzedatasourceriskdetails.GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('riskDetails'), 'exclude': lambda f: f is None }})
    r"""Result of a risk analysis operation request."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Time when the job started."""  
    state: Optional[GooglePrivacyDlpV2DlpJobStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of a job."""  
    type: Optional[GooglePrivacyDlpV2DlpJobTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of job."""  
    