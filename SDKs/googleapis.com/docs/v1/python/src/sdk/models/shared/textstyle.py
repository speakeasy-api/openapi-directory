"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dimension as shared_dimension
from ..shared import link as shared_link
from ..shared import optionalcolor as shared_optionalcolor
from ..shared import weightedfontfamily as shared_weightedfontfamily
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TextStyleBaselineOffsetEnum(str, Enum):
    r"""The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. Changes in this field don't affect the `font_size`."""
    BASELINE_OFFSET_UNSPECIFIED = 'BASELINE_OFFSET_UNSPECIFIED'
    NONE = 'NONE'
    SUPERSCRIPT = 'SUPERSCRIPT'
    SUBSCRIPT = 'SUBSCRIPT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TextStyle:
    r"""Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor."""
    
    background_color: Optional[shared_optionalcolor.OptionalColor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backgroundColor'), 'exclude': lambda f: f is None }})
    r"""A color that can either be fully opaque or fully transparent."""  
    baseline_offset: Optional[TextStyleBaselineOffsetEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baselineOffset'), 'exclude': lambda f: f is None }})
    r"""The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. Changes in this field don't affect the `font_size`."""  
    bold: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bold'), 'exclude': lambda f: f is None }})
    r"""Whether or not the text is rendered as bold."""  
    font_size: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fontSize'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    foreground_color: Optional[shared_optionalcolor.OptionalColor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('foregroundColor'), 'exclude': lambda f: f is None }})
    r"""A color that can either be fully opaque or fully transparent."""  
    italic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('italic'), 'exclude': lambda f: f is None }})
    r"""Whether or not the text is italicized."""  
    link: Optional[shared_link.Link] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""A reference to another portion of a document or an external URL resource."""  
    small_caps: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smallCaps'), 'exclude': lambda f: f is None }})
    r"""Whether or not the text is in small capital letters."""  
    strikethrough: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strikethrough'), 'exclude': lambda f: f is None }})
    r"""Whether or not the text is struck through."""  
    underline: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('underline'), 'exclude': lambda f: f is None }})
    r"""Whether or not the text is underlined."""  
    weighted_font_family: Optional[shared_weightedfontfamily.WeightedFontFamily] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weightedFontFamily'), 'exclude': lambda f: f is None }})
    r"""Represents a font family and weight of text."""  
    