"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ExclusionRuleExcludeDeliveryEnum(str, Enum):
    STREAM = 'Stream'
    DOWNLOAD = 'Download'
    STREAM_OR_DOWNLOAD = 'StreamOrDownload'
    PROGRESSIVE_DOWNLOAD = 'ProgressiveDownload'
    NONE = 'None'

class ExclusionRuleExcludeMinResolutionEnum(str, Enum):
    SD = 'SD'
    HD_720 = 'HD-720'
    HD_1080 = 'HD-1080'
    HD_4_K = 'HD-4K'
    EXTERNAL = 'External'
    UNKNOWN = 'Unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExclusionRule:
    r"""Defines playback exclusion rules for an Offer or Entitlement."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    device: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device'), 'exclude': lambda f: f is None }})
    r"""The device type that the exclusion rules apply to."""  
    exclude_airplay: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeAirplay'), 'exclude': lambda f: f is None }})
    r"""Prevent airplay from an apple device."""  
    exclude_chromecast: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeChromecast'), 'exclude': lambda f: f is None }})
    r"""Prevent chromecasting."""  
    exclude_delivery: Optional[ExclusionRuleExcludeDeliveryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeDelivery'), 'exclude': lambda f: f is None }})  
    exclude_min_resolution: Optional[ExclusionRuleExcludeMinResolutionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeMinResolution'), 'exclude': lambda f: f is None }})  
    