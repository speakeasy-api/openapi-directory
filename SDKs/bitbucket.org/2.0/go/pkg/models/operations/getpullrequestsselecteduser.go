// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetPullrequestsSelectedUserSecurity struct {
	APIKey *string             `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
	Basic  *shared.SchemeBasic `security:"scheme,type=http,subtype=basic"`
	Oauth2 *string             `security:"scheme,type=oauth2,name=Authorization"`
}

// GetPullrequestsSelectedUserStateEnum - Only return pull requests that are in this state. This parameter can be repeated.
type GetPullrequestsSelectedUserStateEnum string

const (
	GetPullrequestsSelectedUserStateEnumOpen       GetPullrequestsSelectedUserStateEnum = "OPEN"
	GetPullrequestsSelectedUserStateEnumMerged     GetPullrequestsSelectedUserStateEnum = "MERGED"
	GetPullrequestsSelectedUserStateEnumDeclined   GetPullrequestsSelectedUserStateEnum = "DECLINED"
	GetPullrequestsSelectedUserStateEnumSuperseded GetPullrequestsSelectedUserStateEnum = "SUPERSEDED"
)

func (e GetPullrequestsSelectedUserStateEnum) ToPointer() *GetPullrequestsSelectedUserStateEnum {
	return &e
}

func (e *GetPullrequestsSelectedUserStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPEN":
		fallthrough
	case "MERGED":
		fallthrough
	case "DECLINED":
		fallthrough
	case "SUPERSEDED":
		*e = GetPullrequestsSelectedUserStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPullrequestsSelectedUserStateEnum: %v", v)
	}
}

type GetPullrequestsSelectedUserRequest struct {
	// This can either be the username of the pull request author, the author's UUID
	// surrounded by curly-braces, for example: `{account UUID}`, or the author's Atlassian ID.
	//
	SelectedUser string `pathParam:"style=simple,explode=false,name=selected_user"`
	// Only return pull requests that are in this state. This parameter can be repeated.
	State *GetPullrequestsSelectedUserStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type GetPullrequestsSelectedUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// If the specified user does not exist.
	Error map[string]interface{}
	// All pull requests authored by the specified user.
	PaginatedPullrequests *shared.PaginatedPullrequests
}
