// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyHubs struct {
	// The network ID of the hub.
	HubID string `json:"hubId"`
	// Only valid in 'spoke' mode. Indicates whether default route traffic should be sent to this hub.
	UseDefaultRoute *bool `json:"useDefaultRoute,omitempty"`
}

// UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum - The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'
type UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum string

const (
	UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnumHub   UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum = "hub"
	UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnumNone  UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum = "none"
	UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnumSpoke UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum = "spoke"
)

func (e UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum) ToPointer() *UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum {
	return &e
}

func (e *UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hub":
		fallthrough
	case "none":
		fallthrough
	case "spoke":
		*e = UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum: %v", v)
	}
}

type UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodySubnets struct {
	// The CIDR notation subnet used within the VPN
	LocalSubnet string `json:"localSubnet"`
	// Indicates the presence of the subnet in the VPN
	UseVpn *bool `json:"useVpn,omitempty"`
}

type UpdateNetworkApplianceVpnSiteToSiteVpnRequestBody struct {
	// The list of VPN hubs, in order of preference. In spoke mode, at least 1 hub is required.
	Hubs []UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyHubs `json:"hubs,omitempty"`
	// The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'
	Mode UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum `json:"mode"`
	// The list of subnets and their VPN presence.
	Subnets []UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodySubnets `json:"subnets,omitempty"`
}

type UpdateNetworkApplianceVpnSiteToSiteVpnRequest struct {
	RequestBody UpdateNetworkApplianceVpnSiteToSiteVpnRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                            `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs struct {
	// The network ID of the hub.
	HubID *string `json:"hubId,omitempty"`
	// Indicates whether default route traffic should be sent to this hub.
	UseDefaultRoute *bool `json:"useDefaultRoute,omitempty"`
}

type UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets struct {
	// The CIDR notation subnet used within the VPN
	LocalSubnet *string `json:"localSubnet,omitempty"`
	// Indicates the presence of the subnet in the VPN
	UseVpn *bool `json:"useVpn,omitempty"`
}

// UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON - Successful operation
type UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON struct {
	// The list of VPN hubs, in order of preference.
	Hubs []UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs `json:"hubs,omitempty"`
	// The site-to-site VPN mode.
	Mode *string `json:"mode,omitempty"`
	// The list of subnets and their VPN presence.
	Subnets []UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets `json:"subnets,omitempty"`
}

type UpdateNetworkApplianceVpnSiteToSiteVpnResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONObject *UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON
}
