/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GroupLockedSettingsApplicationJSON1InMeeting {
    /**
     * Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alert_guest_join")
    public Boolean alertGuestJoin;
    public GroupLockedSettingsApplicationJSON1InMeeting withAlertGuestJoin(Boolean alertGuestJoin) {
        this.alertGuestJoin = alertGuestJoin;
        return this;
    }
    
    /**
     * Show Zoom windows during screen share.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_show_zoom_windows")
    public Boolean allowShowZoomWindows;
    public GroupLockedSettingsApplicationJSON1InMeeting withAllowShowZoomWindows(Boolean allowShowZoomWindows) {
        this.allowShowZoomWindows = allowShowZoomWindows;
        return this;
    }
    
    /**
     * Allow participants to use annotation tools to add information to shared screens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotation")
    public Boolean annotation;
    public GroupLockedSettingsApplicationJSON1InMeeting withAnnotation(Boolean annotation) {
        this.annotation = annotation;
        return this;
    }
    
    /**
     * Allow host to put attendee on hold.
     * 
     * **This field has been deprecated and is no longer supported.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attendee_on_hold")
    public Boolean attendeeOnHold;
    public GroupLockedSettingsApplicationJSON1InMeeting withAttendeeOnHold(Boolean attendeeOnHold) {
        this.attendeeOnHold = attendeeOnHold;
        return this;
    }
    
    /**
     * Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_answer")
    public Boolean autoAnswer;
    public GroupLockedSettingsApplicationJSON1InMeeting withAutoAnswer(Boolean autoAnswer) {
        this.autoAnswer = autoAnswer;
        return this;
    }
    
    /**
     * Automatically save all in-meeting chats.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_saving_chat")
    public Boolean autoSavingChat;
    public GroupLockedSettingsApplicationJSON1InMeeting withAutoSavingChat(Boolean autoSavingChat) {
        this.autoSavingChat = autoSavingChat;
        return this;
    }
    
    /**
     * Allow host to split meeting participants into separate, smaller rooms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("breakout_room")
    public Boolean breakoutRoom;
    public GroupLockedSettingsApplicationJSON1InMeeting withBreakoutRoom(Boolean breakoutRoom) {
        this.breakoutRoom = breakoutRoom;
        return this;
    }
    
    /**
     * Allow meeting participants to send chat message visible to all participants.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chat")
    public Boolean chat;
    public GroupLockedSettingsApplicationJSON1InMeeting withChat(Boolean chat) {
        this.chat = chat;
        return this;
    }
    
    /**
     * Allow host to type closed captions or assign a participant/third party device to add closed captions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closed_caption")
    public Boolean closedCaption;
    public GroupLockedSettingsApplicationJSON1InMeeting withClosedCaption(Boolean closedCaption) {
        this.closedCaption = closedCaption;
        return this;
    }
    
    /**
     * Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("co_host")
    public Boolean coHost;
    public GroupLockedSettingsApplicationJSON1InMeeting withCoHost(Boolean coHost) {
        this.coHost = coHost;
        return this;
    }
    
    /**
     * Displays whether or not custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) have been selected for meetings/webinars hosted by this group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_data_center_regions")
    public Boolean customDataCenterRegions;
    public GroupLockedSettingsApplicationJSON1InMeeting withCustomDataCenterRegions(Boolean customDataCenterRegions) {
        this.customDataCenterRegions = customDataCenterRegions;
        return this;
    }
    
    /**
     * Require that all meetings are encrypted using AES.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("e2e_encryption")
    public Boolean e2eEncryption;
    public GroupLockedSettingsApplicationJSON1InMeeting withE2eEncryption(Boolean e2eEncryption) {
        this.e2eEncryption = e2eEncryption;
        return this;
    }
    
    /**
     * Play sound when participants join or leave.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entry_exit_chime")
    public String entryExitChime;
    public GroupLockedSettingsApplicationJSON1InMeeting withEntryExitChime(String entryExitChime) {
        this.entryExitChime = entryExitChime;
        return this;
    }
    
    /**
     * Allow another user to take control of the camera during a meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("far_end_camera_control")
    public Boolean farEndCameraControl;
    public GroupLockedSettingsApplicationJSON1InMeeting withFarEndCameraControl(Boolean farEndCameraControl) {
        this.farEndCameraControl = farEndCameraControl;
        return this;
    }
    
    /**
     * Enable users to provide feedback to Zoom at the end of the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedback")
    public Boolean feedback;
    public GroupLockedSettingsApplicationJSON1InMeeting withFeedback(Boolean feedback) {
        this.feedback = feedback;
        return this;
    }
    
    /**
     * Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_transfer")
    public Boolean fileTransfer;
    public GroupLockedSettingsApplicationJSON1InMeeting withFileTransfer(Boolean fileTransfer) {
        this.fileTransfer = fileTransfer;
        return this;
    }
    
    /**
     * Enable higher quality video for host and participants. This will require more bandwidth.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_hd")
    public Boolean groupHd;
    public GroupLockedSettingsApplicationJSON1InMeeting withGroupHd(Boolean groupHd) {
        this.groupHd = groupHd;
        return this;
    }
    
    /**
     * Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("non_verbal_feedback")
    public Boolean nonVerbalFeedback;
    public GroupLockedSettingsApplicationJSON1InMeeting withNonVerbalFeedback(Boolean nonVerbalFeedback) {
        this.nonVerbalFeedback = nonVerbalFeedback;
        return this;
    }
    
    /**
     * Allow users to select original sound during a meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_audio")
    public Boolean originalAudio;
    public GroupLockedSettingsApplicationJSON1InMeeting withOriginalAudio(Boolean originalAudio) {
        this.originalAudio = originalAudio;
        return this;
    }
    
    /**
     * Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("polling")
    public Boolean polling;
    public GroupLockedSettingsApplicationJSON1InMeeting withPolling(Boolean polling) {
        this.polling = polling;
        return this;
    }
    
    /**
     * Display end-of-meeting experience feedback survey.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("post_meeting_feedback")
    public Boolean postMeetingFeedback;
    public GroupLockedSettingsApplicationJSON1InMeeting withPostMeetingFeedback(Boolean postMeetingFeedback) {
        this.postMeetingFeedback = postMeetingFeedback;
        return this;
    }
    
    /**
     * Allow meeting participants to send a private 1:1 message to another participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_chat")
    public Boolean privateChat;
    public GroupLockedSettingsApplicationJSON1InMeeting withPrivateChat(Boolean privateChat) {
        this.privateChat = privateChat;
        return this;
    }
    
    /**
     * During screen sharing, allow the person who is sharing to let others control the shared content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_control")
    public Boolean remoteControl;
    public GroupLockedSettingsApplicationJSON1InMeeting withRemoteControl(Boolean remoteControl) {
        this.remoteControl = remoteControl;
        return this;
    }
    
    /**
     * Allow meeting host to provide 1:1 remote support to another participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_support")
    public Boolean remoteSupport;
    public GroupLockedSettingsApplicationJSON1InMeeting withRemoteSupport(Boolean remoteSupport) {
        this.remoteSupport = remoteSupport;
        return this;
    }
    
    /**
     * Indicate whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option should be enabled and locked for the group or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_permission_to_unmute")
    public Boolean requestPermissionToUnmute;
    public GroupLockedSettingsApplicationJSON1InMeeting withRequestPermissionToUnmute(Boolean requestPermissionToUnmute) {
        this.requestPermissionToUnmute = requestPermissionToUnmute;
        return this;
    }
    
    /**
     * Allow host and participants to share their screen or content during meetings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screen_sharing")
    public Boolean screenSharing;
    public GroupLockedSettingsApplicationJSON1InMeeting withScreenSharing(Boolean screenSharing) {
        this.screenSharing = screenSharing;
        return this;
    }
    
    /**
     * Allow users to invite participants by email only by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sending_default_email_invites")
    public Boolean sendingDefaultEmailInvites;
    public GroupLockedSettingsApplicationJSON1InMeeting withSendingDefaultEmailInvites(Boolean sendingDefaultEmailInvites) {
        this.sendingDefaultEmailInvites = sendingDefaultEmailInvites;
        return this;
    }
    
    /**
     * Allow participants to join a meeting directly from their browser.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_browser_join_link")
    public Boolean showBrowserJoinLink;
    public GroupLockedSettingsApplicationJSON1InMeeting withShowBrowserJoinLink(Boolean showBrowserJoinLink) {
        this.showBrowserJoinLink = showBrowserJoinLink;
        return this;
    }
    
    /**
     * Always show meeting controls during a meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_meeting_control_toolbar")
    public Boolean showMeetingControlToolbar;
    public GroupLockedSettingsApplicationJSON1InMeeting withShowMeetingControlToolbar(Boolean showMeetingControlToolbar) {
        this.showMeetingControlToolbar = showMeetingControlToolbar;
        return this;
    }
    
    /**
     * Allow users to select stereo audio during a meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stereo_audio")
    public Boolean stereoAudio;
    public GroupLockedSettingsApplicationJSON1InMeeting withStereoAudio(Boolean stereoAudio) {
        this.stereoAudio = stereoAudio;
        return this;
    }
    
    /**
     * Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_html_format_email")
    public Boolean useHtmlFormatEmail;
    public GroupLockedSettingsApplicationJSON1InMeeting withUseHtmlFormatEmail(Boolean useHtmlFormatEmail) {
        this.useHtmlFormatEmail = useHtmlFormatEmail;
        return this;
    }
    
    /**
     * Enable virtual background.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_background")
    public Boolean virtualBackground;
    public GroupLockedSettingsApplicationJSON1InMeeting withVirtualBackground(Boolean virtualBackground) {
        this.virtualBackground = virtualBackground;
        return this;
    }
    
    /**
     * Attendees cannot join a meeting until a host admits them individually from the waiting room.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waiting_room")
    public Boolean waitingRoom;
    public GroupLockedSettingsApplicationJSON1InMeeting withWaitingRoom(Boolean waitingRoom) {
        this.waitingRoom = waitingRoom;
        return this;
    }
    
    /**
     * Allow participants to share a whiteboard that includes annotation tools.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("whiteboard")
    public Boolean whiteboard;
    public GroupLockedSettingsApplicationJSON1InMeeting withWhiteboard(Boolean whiteboard) {
        this.whiteboard = whiteboard;
        return this;
    }
    
}
