// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreatePortalRequestBodyAuthenticationTypeEnum - <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p> <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p> <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
type CreatePortalRequestBodyAuthenticationTypeEnum string

const (
	CreatePortalRequestBodyAuthenticationTypeEnumStandard          CreatePortalRequestBodyAuthenticationTypeEnum = "Standard"
	CreatePortalRequestBodyAuthenticationTypeEnumIamIdentityCenter CreatePortalRequestBodyAuthenticationTypeEnum = "IAM_Identity_Center"
)

func (e *CreatePortalRequestBodyAuthenticationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Standard":
		fallthrough
	case "IAM_Identity_Center":
		*e = CreatePortalRequestBodyAuthenticationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePortalRequestBodyAuthenticationTypeEnum: %s", s)
	}
}

type CreatePortalRequestBody struct {
	// The additional encryption context of the portal.
	AdditionalEncryptionContext map[string]string `json:"additionalEncryptionContext,omitempty"`
	// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p> <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p> <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
	AuthenticationType *CreatePortalRequestBodyAuthenticationTypeEnum `json:"authenticationType,omitempty"`
	// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
	ClientToken *string `json:"clientToken,omitempty"`
	// The customer managed key of the web portal.
	CustomerManagedKey *string `json:"customerManagedKey,omitempty"`
	// The name of the web portal. This is not visible to users who log into the web portal.
	DisplayName *string `json:"displayName,omitempty"`
	// The tags to add to the web portal. A tag is a key-value pair.
	Tags []shared.Tag `json:"tags,omitempty"`
}

type CreatePortalRequest struct {
	RequestBody       CreatePortalRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreatePortalResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreatePortalResponse *shared.CreatePortalResponse
	// InternalServerException
	InternalServerException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
