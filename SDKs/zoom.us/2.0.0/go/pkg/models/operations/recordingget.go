// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type RecordingGetSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type RecordingGetPathParams struct {
	// To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
	//
	// To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875=="), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
}

type RecordingGetQueryParams struct {
	// Get the `download_access_token` field for downloading meeting recordings.
	IncludeFields *string `queryParam:"style=form,explode=true,name=include_fields"`
	// Time to live (TTL) of the `download_access_token`. This is only valid if the `include_fields` query parameter contains `download_access_token`. The range is between 0-604800.
	TTL *int64 `queryParam:"style=form,explode=true,name=ttl"`
}

type RecordingGetRequest struct {
	PathParams  RecordingGetPathParams
	QueryParams RecordingGetQueryParams
	Security    RecordingGetSecurity
}

// RecordingGetRecordingFileListRecordingFilesStatusEnum - The recording status.
type RecordingGetRecordingFileListRecordingFilesStatusEnum string

const (
	RecordingGetRecordingFileListRecordingFilesStatusEnumCompleted RecordingGetRecordingFileListRecordingFilesStatusEnum = "completed"
)

func (e *RecordingGetRecordingFileListRecordingFilesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "completed":
		*e = RecordingGetRecordingFileListRecordingFilesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordingGetRecordingFileListRecordingFilesStatusEnum: %s", s)
	}
}

// RecordingGetRecordingFileListRecordingFiles - Recording file object.
type RecordingGetRecordingFileListRecordingFiles struct {
	// The time at which recording was deleted. Returned in the response only for trash query.
	DeletedTime *string `json:"deleted_time,omitempty"`
	// The URL using which the recording file can be downloaded. **To access a private or password protected cloud recording of a user in your account, you can use a [Zoom JWT App Type](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app). Use the generated JWT token as the value of the `access_token` query parameter and include this query parameter at the end of the URL as shown in the example.**
	// <br>
	// Example: `https://api.zoom.us/recording/download/{{ Download Path }}?access_token={{ JWT Token }}`
	//
	// **Similarly, if the user has installed your OAuth app that contains recording scope(s), you can also use the user's [OAuth access token](https://marketplace.zoom.us/docs/guides/auth/oauth) to download the Cloud Recording.**<br>
	//
	// Example: `https://api.zoom.us/recording/download/{{ Download Path }}?access_token={{ OAuth Access Token }}`
	//
	//
	DownloadURL *string `json:"download_url,omitempty"`
	// The recording file size.
	FileSize *float64 `json:"file_size,omitempty"`
	// The recording file type. The value of this field could be one of the following:<br>
	// `MP4`: Video file of the recording.<br>`M4A` Audio-only file of the recording.<br>`TIMELINE`: Timestamp file of the recording in JSON file format. To get a timeline file, the "Add a timestamp to the recording" setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone, set on their Zoom profile.
	// <br> `TRANSCRIPT`: Transcription file of the recording in VTT format.<br> `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>`CC`: File containing closed captions of the recording in VTT file format.<br>`CSV`: File containing polling data in csv format.
	//
	// <br>
	//
	// A recording file object with file type of either `CC` or `TIMELINE` **does not have** the following properties:<br>
	// 	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
	FileType *string `json:"file_type,omitempty"`
	// The recording file ID. Included in the response of general query.
	ID *string `json:"id,omitempty"`
	// The meeting ID.
	MeetingID *string `json:"meeting_id,omitempty"`
	// The URL using which a recording file can be played.
	PlayURL *string `json:"play_url,omitempty"`
	// The recording end time. Response in general query.
	RecordingEnd *string `json:"recording_end,omitempty"`
	// The recording start time.
	RecordingStart *string `json:"recording_start,omitempty"`
	// The recording type. The value of this field can be one of the following:<br>`shared_screen_with_speaker_view(CC)`<br>`shared_screen_with_speaker_view`<br>`shared_screen_with_gallery_view`<br>`speaker_view`<br>`gallery_view`<br>`shared_screen`<br>`audio_only`<br>`audio_transcript`<br>`chat_file`<br>`active_speaker`<br>`poll`
	RecordingType *string `json:"recording_type,omitempty"`
	// The recording status.
	Status *RecordingGetRecordingFileListRecordingFilesStatusEnum `json:"status,omitempty"`
}

// RecordingGetRecordingFileList - List of recording file.
type RecordingGetRecordingFileList struct {
	// Unique Identifier of the user account.
	AccountID *string `json:"account_id,omitempty"`
	// JWT token for downloading the meeting recording.
	//  This is only returned if the `include_fields` query parameter contains `download_access_token`.
	DownloadAccessToken *string `json:"download_access_token,omitempty"`
	// Meeting duration.
	Duration *int64 `json:"duration,omitempty"`
	// ID of the user set as host of meeting.
	HostID *string `json:"host_id,omitempty"`
	// Meeting ID - also known as the meeting number.
	ID *string `json:"id,omitempty"`
	// Number of recording files returned in the response of this API call.
	RecordingCount *string `json:"recording_count,omitempty"`
	// List of recording file.
	RecordingFiles []RecordingGetRecordingFileListRecordingFiles `json:"recording_files,omitempty"`
	// The time at which the meeting started.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Meeting topic.
	Topic *string `json:"topic,omitempty"`
	// Total size of the recording.
	TotalSize *string `json:"total_size,omitempty"`
	// Type of the meeting that was recorded.
	//
	// Meeting Types:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`8` - Recurring meeting with fixed time.
	Type *string `json:"type,omitempty"`
	// Unique Meeting Identifier. Each instance of the meeting will have its own UUID.
	UUID *string `json:"uuid,omitempty"`
}

type RecordingGetResponse struct {
	Body        []byte
	ContentType string
	// **Error Code:** `200` <br>
	// You do not have the right permissions.
	// **HTTP Status Code:** `200`<br>
	// Recording object returned.<br>
	//
	RecordingFileList *RecordingGetRecordingFileList
	StatusCode        int
	RawResponse       *http.Response
}
