"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterconnectRemoteLocation = exports.InterconnectRemoteLocationStatusEnum = exports.InterconnectRemoteLocationLacpEnum = exports.InterconnectRemoteLocationContinentEnum = void 0;
var utils_1 = require("../../../internal/utils");
var interconnectattachmentconfigurationconstraints_1 = require("./interconnectattachmentconfigurationconstraints");
var interconnectremotelocationconstraints_1 = require("./interconnectremotelocationconstraints");
var interconnectremotelocationpermittedconnections_1 = require("./interconnectremotelocationpermittedconnections");
var class_transformer_1 = require("class-transformer");
/**
 * [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA_PAC - EUROPE - NORTH_AMERICA - SOUTH_AMERICA
 */
var InterconnectRemoteLocationContinentEnum;
(function (InterconnectRemoteLocationContinentEnum) {
    InterconnectRemoteLocationContinentEnum["Africa"] = "AFRICA";
    InterconnectRemoteLocationContinentEnum["AsiaPac"] = "ASIA_PAC";
    InterconnectRemoteLocationContinentEnum["Europe"] = "EUROPE";
    InterconnectRemoteLocationContinentEnum["NorthAmerica"] = "NORTH_AMERICA";
    InterconnectRemoteLocationContinentEnum["SouthAmerica"] = "SOUTH_AMERICA";
})(InterconnectRemoteLocationContinentEnum = exports.InterconnectRemoteLocationContinentEnum || (exports.InterconnectRemoteLocationContinentEnum = {}));
/**
 * [Output Only] Link Aggregation Control Protocol (LACP) constraints, which can take one of the following values: LACP_SUPPORTED, LACP_UNSUPPORTED
 */
var InterconnectRemoteLocationLacpEnum;
(function (InterconnectRemoteLocationLacpEnum) {
    InterconnectRemoteLocationLacpEnum["LacpSupported"] = "LACP_SUPPORTED";
    InterconnectRemoteLocationLacpEnum["LacpUnsupported"] = "LACP_UNSUPPORTED";
})(InterconnectRemoteLocationLacpEnum = exports.InterconnectRemoteLocationLacpEnum || (exports.InterconnectRemoteLocationLacpEnum = {}));
/**
 * [Output Only] The status of this InterconnectRemoteLocation, which can take one of the following values: - CLOSED: The InterconnectRemoteLocation is closed and is unavailable for provisioning new Cross-Cloud Interconnects. - AVAILABLE: The InterconnectRemoteLocation is available for provisioning new Cross-Cloud Interconnects.
 */
var InterconnectRemoteLocationStatusEnum;
(function (InterconnectRemoteLocationStatusEnum) {
    InterconnectRemoteLocationStatusEnum["Available"] = "AVAILABLE";
    InterconnectRemoteLocationStatusEnum["Closed"] = "CLOSED";
})(InterconnectRemoteLocationStatusEnum = exports.InterconnectRemoteLocationStatusEnum || (exports.InterconnectRemoteLocationStatusEnum = {}));
/**
 * Represents an Cross-Cloud Interconnect Remote Location resource. You can use this resource to find remote location details about an Interconnect attachment (VLAN).
 */
var InterconnectRemoteLocation = /** @class */ (function (_super) {
    __extends(InterconnectRemoteLocation, _super);
    function InterconnectRemoteLocation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "address" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "address", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "attachmentConfigurationConstraints" }),
        (0, class_transformer_1.Type)(function () { return interconnectattachmentconfigurationconstraints_1.InterconnectAttachmentConfigurationConstraints; }),
        __metadata("design:type", interconnectattachmentconfigurationconstraints_1.InterconnectAttachmentConfigurationConstraints)
    ], InterconnectRemoteLocation.prototype, "attachmentConfigurationConstraints", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "city" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "city", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "constraints" }),
        (0, class_transformer_1.Type)(function () { return interconnectremotelocationconstraints_1.InterconnectRemoteLocationConstraints; }),
        __metadata("design:type", interconnectremotelocationconstraints_1.InterconnectRemoteLocationConstraints)
    ], InterconnectRemoteLocation.prototype, "constraints", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "continent" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "continent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "facilityProvider" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "facilityProvider", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "facilityProviderFacilityId" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "facilityProviderFacilityId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lacp" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "lacp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxLagSize100Gbps" }),
        __metadata("design:type", Number)
    ], InterconnectRemoteLocation.prototype, "maxLagSize100Gbps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxLagSize10Gbps" }),
        __metadata("design:type", Number)
    ], InterconnectRemoteLocation.prototype, "maxLagSize10Gbps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "peeringdbFacilityId" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "peeringdbFacilityId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: interconnectremotelocationpermittedconnections_1.InterconnectRemoteLocationPermittedConnections,
        }),
        (0, class_transformer_1.Expose)({ name: "permittedConnections" }),
        (0, class_transformer_1.Type)(function () { return interconnectremotelocationpermittedconnections_1.InterconnectRemoteLocationPermittedConnections; }),
        __metadata("design:type", Array)
    ], InterconnectRemoteLocation.prototype, "permittedConnections", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "remoteService" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "remoteService", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLinkWithId" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "selfLinkWithId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], InterconnectRemoteLocation.prototype, "status", void 0);
    return InterconnectRemoteLocation;
}(utils_1.SpeakeasyBase));
exports.InterconnectRemoteLocation = InterconnectRemoteLocation;
