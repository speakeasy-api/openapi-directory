/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ExternalEventEntity - List External Events
 */
public class ExternalEventEntity {
    /**
     * Event body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    public String body;

    public ExternalEventEntity withBody(String body) {
        this.body = body;
        return this;
    }
    
    /**
     * Link to log file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body_url")
    public String bodyUrl;

    public ExternalEventEntity withBodyUrl(String bodyUrl) {
        this.bodyUrl = bodyUrl;
        return this;
    }
    
    /**
     * For sync events, the total number of bytes synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bytes_synced")
    public Integer bytesSynced;

    public ExternalEventEntity withBytesSynced(Integer bytesSynced) {
        this.bytesSynced = bytesSynced;
        return this;
    }
    
    /**
     * External event create date/time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public ExternalEventEntity withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * For sync events, the number of files that encountered errors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errored_files")
    public Integer erroredFiles;

    public ExternalEventEntity withErroredFiles(Integer erroredFiles) {
        this.erroredFiles = erroredFiles;
        return this;
    }
    
    /**
     * Type of event being recorded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_type")
    public ExternalEventEntityEventTypeEnum eventType;

    public ExternalEventEntity withEventType(ExternalEventEntityEventTypeEnum eventType) {
        this.eventType = eventType;
        return this;
    }
    
    /**
     * Folder Behavior ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("folder_behavior_id")
    public Integer folderBehaviorId;

    public ExternalEventEntity withFolderBehaviorId(Integer folderBehaviorId) {
        this.folderBehaviorId = folderBehaviorId;
        return this;
    }
    
    /**
     * Event ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;

    public ExternalEventEntity withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Associated Remote Server type, if any
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_server_type")
    public String remoteServerType;

    public ExternalEventEntity withRemoteServerType(String remoteServerType) {
        this.remoteServerType = remoteServerType;
        return this;
    }
    
    /**
     * Status of event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ExternalEventEntityStatusEnum status;

    public ExternalEventEntity withStatus(ExternalEventEntityStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * For sync events, the number of files handled successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("successful_files")
    public Integer successfulFiles;

    public ExternalEventEntity withSuccessfulFiles(Integer successfulFiles) {
        this.successfulFiles = successfulFiles;
        return this;
    }
    
    public ExternalEventEntity(){}
}
