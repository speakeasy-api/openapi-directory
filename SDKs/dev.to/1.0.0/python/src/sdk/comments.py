"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Comments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_comment_by_id(self, request: operations.GetCommentByIDRequest) -> operations.GetCommentByIDResponse:
        r"""Comment by id
        This endpoint allows the client to retrieve a comment as well as his descendants comments.
        
          It will return the required comment (the root) with its nested descendants as a thread.
        
          See the format specification for further details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCommentByIDRequest, base_url, '/api/comments/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommentByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_comments_by_article_id(self, request: operations.GetCommentsByArticleIDRequest) -> operations.GetCommentsByArticleIDResponse:
        r"""Comments
        This endpoint allows the client to retrieve all comments belonging to an article or podcast episode as threaded conversations.
        
        It will return the all top level comments with their nested comments as threads. See the format specification for further details.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/comments'
        
        query_params = utils.get_query_params(operations.GetCommentsByArticleIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommentsByArticleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Comment]])
                res.comments = out
        elif http_res.status_code == 404:
            pass

        return res

    