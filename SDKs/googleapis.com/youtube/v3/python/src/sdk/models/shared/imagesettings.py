"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import localizedproperty as shared_localizedproperty
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageSettings:
    r"""Branding properties for images associated with the channel."""
    
    background_image_url: Optional[shared_localizedproperty.LocalizedProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backgroundImageUrl'), 'exclude': lambda f: f is None }})  
    banner_external_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerExternalUrl'), 'exclude': lambda f: f is None }})
    r"""This is generated when a ChannelBanner.Insert request has succeeded for the given channel."""  
    banner_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. Desktop size (1060x175)."""  
    banner_mobile_extra_hd_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerMobileExtraHdImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. Mobile size high resolution (1440x395)."""  
    banner_mobile_hd_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerMobileHdImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. Mobile size high resolution (1280x360)."""  
    banner_mobile_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerMobileImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. Mobile size (640x175)."""  
    banner_mobile_low_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerMobileLowImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. Mobile size low resolution (320x88)."""  
    banner_mobile_medium_hd_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerMobileMediumHdImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. Mobile size medium/high resolution (960x263)."""  
    banner_tablet_extra_hd_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerTabletExtraHdImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. Tablet size extra high resolution (2560x424)."""  
    banner_tablet_hd_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerTabletHdImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. Tablet size high resolution (2276x377)."""  
    banner_tablet_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerTabletImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. Tablet size (1707x283)."""  
    banner_tablet_low_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerTabletLowImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. Tablet size low resolution (1138x188)."""  
    banner_tv_high_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerTvHighImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. TV size high resolution (1920x1080)."""  
    banner_tv_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerTvImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. TV size extra high resolution (2120x1192)."""  
    banner_tv_low_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerTvLowImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. TV size low resolution (854x480)."""  
    banner_tv_medium_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannerTvMediumImageUrl'), 'exclude': lambda f: f is None }})
    r"""Banner image. TV size medium resolution (1280x720)."""  
    large_branded_banner_image_imap_script: Optional[shared_localizedproperty.LocalizedProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('largeBrandedBannerImageImapScript'), 'exclude': lambda f: f is None }})  
    large_branded_banner_image_url: Optional[shared_localizedproperty.LocalizedProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('largeBrandedBannerImageUrl'), 'exclude': lambda f: f is None }})  
    small_branded_banner_image_imap_script: Optional[shared_localizedproperty.LocalizedProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smallBrandedBannerImageImapScript'), 'exclude': lambda f: f is None }})  
    small_branded_banner_image_url: Optional[shared_localizedproperty.LocalizedProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smallBrandedBannerImageUrl'), 'exclude': lambda f: f is None }})  
    tracking_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingImageUrl'), 'exclude': lambda f: f is None }})
    r"""The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages."""  
    watch_icon_image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchIconImageUrl'), 'exclude': lambda f: f is None }})  
    