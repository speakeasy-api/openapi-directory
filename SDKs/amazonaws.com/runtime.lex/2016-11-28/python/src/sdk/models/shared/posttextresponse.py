"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import activecontext as shared_activecontext
from ..shared import dialogstate_enum as shared_dialogstate_enum
from ..shared import intentconfidence as shared_intentconfidence
from ..shared import messageformattype_enum as shared_messageformattype_enum
from ..shared import predictedintent as shared_predictedintent
from ..shared import responsecard as shared_responsecard
from ..shared import sentimentresponse as shared_sentimentresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostTextResponse:
    r"""Success"""
    
    active_contexts: Optional[list[shared_activecontext.ActiveContext]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeContexts'), 'exclude': lambda f: f is None }})  
    alternative_intents: Optional[list[shared_predictedintent.PredictedIntent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternativeIntents'), 'exclude': lambda f: f is None }})  
    bot_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('botVersion'), 'exclude': lambda f: f is None }})  
    dialog_state: Optional[shared_dialogstate_enum.DialogStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dialogState'), 'exclude': lambda f: f is None }})  
    intent_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intentName'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    message_format: Optional[shared_messageformattype_enum.MessageFormatTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageFormat'), 'exclude': lambda f: f is None }})  
    nlu_intent_confidence: Optional[shared_intentconfidence.IntentConfidence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nluIntentConfidence'), 'exclude': lambda f: f is None }})  
    response_card: Optional[shared_responsecard.ResponseCard] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseCard'), 'exclude': lambda f: f is None }})  
    sentiment_response: Optional[shared_sentimentresponse.SentimentResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentimentResponse'), 'exclude': lambda f: f is None }})  
    session_attributes: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionAttributes'), 'exclude': lambda f: f is None }})  
    session_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionId'), 'exclude': lambda f: f is None }})  
    slots: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slots'), 'exclude': lambda f: f is None }})  
    slot_to_elicit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotToElicit'), 'exclude': lambda f: f is None }})  
    