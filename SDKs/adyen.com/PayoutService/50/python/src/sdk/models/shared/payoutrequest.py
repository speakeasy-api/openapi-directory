"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from ..shared import amount as shared_amount
from ..shared import card as shared_card
from ..shared import fundsource as shared_fundsource
from ..shared import name as shared_name
from ..shared import recurring as shared_recurring
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PayoutRequestShopperInteractionEnum(str, Enum):
    r"""Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
    For the web service API, Adyen assumes Ecommerce shopper interaction by default.
    
    This field has the following possible values:
    * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
    * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
    * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
    * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
    """
    ECOMMERCE = 'Ecommerce'
    CONT_AUTH = 'ContAuth'
    MOTO = 'Moto'
    POS = 'POS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayoutRequest:
    
    amount: shared_amount.Amount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})  
    merchant_account: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantAccount') }})
    r"""The merchant account identifier, with which you want to process the transaction."""  
    reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference') }})
    r"""The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
    If you need to provide multiple references for a transaction, separate them with hyphens (\"-\").
    Maximum length: 80 characters.
    """  
    billing_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingAddress'), 'exclude': lambda f: f is None }})  
    card: Optional[shared_card.Card] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card'), 'exclude': lambda f: f is None }})  
    fraud_offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fraudOffset'), 'exclude': lambda f: f is None }})
    r"""An integer value that is added to the normal fraud score. The value can be either positive or negative."""  
    fund_source: Optional[shared_fundsource.FundSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fundSource'), 'exclude': lambda f: f is None }})  
    recurring: Optional[shared_recurring.Recurring] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurring'), 'exclude': lambda f: f is None }})  
    selected_recurring_detail_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedRecurringDetailReference'), 'exclude': lambda f: f is None }})
    r"""The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail."""  
    shopper_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperEmail'), 'exclude': lambda f: f is None }})
    r"""The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.
    > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.
    """  
    shopper_interaction: Optional[PayoutRequestShopperInteractionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperInteraction'), 'exclude': lambda f: f is None }})
    r"""Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
    For the web service API, Adyen assumes Ecommerce shopper interaction by default.
    
    This field has the following possible values:
    * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
    * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
    * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
    * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
    """  
    shopper_name: Optional[shared_name.Name] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperName'), 'exclude': lambda f: f is None }})  
    shopper_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperReference'), 'exclude': lambda f: f is None }})
    r"""Required for recurring payments.
    Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.
    > Your reference must not include personally identifiable information (PII), for example name or email address.
    """  
    telephone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telephoneNumber'), 'exclude': lambda f: f is None }})
    r"""The shopper's telephone number."""  
    