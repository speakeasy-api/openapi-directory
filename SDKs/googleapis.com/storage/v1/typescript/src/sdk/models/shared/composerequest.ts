/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ObjectT } from "./object";
import { Expose, Type } from "class-transformer";

/**
 * Conditions that must be met for this operation to execute.
 */
export class ComposeRequestSourceObjectsObjectPreconditions extends SpeakeasyBase {
  /**
   * Only perform the composition if the generation of the source object that would be used matches this value. If this value and a generation are both specified, they must be the same value or the call will fail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ifGenerationMatch" })
  ifGenerationMatch?: string;
}

export class ComposeRequestSourceObjects extends SpeakeasyBase {
  /**
   * The generation of this object to use as the source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "generation" })
  generation?: string;

  /**
   * The source object's name. All source objects must reside in the same bucket.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Conditions that must be met for this operation to execute.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "objectPreconditions" })
  @Type(() => ComposeRequestSourceObjectsObjectPreconditions)
  objectPreconditions?: ComposeRequestSourceObjectsObjectPreconditions;
}

/**
 * A Compose request.
 */
export class ComposeRequest extends SpeakeasyBase {
  /**
   * An object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  @Type(() => ObjectT)
  destination?: ObjectT;

  /**
   * The kind of item this is.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * The list of source objects that will be concatenated into a single object.
   */
  @SpeakeasyMetadata({ elemType: ComposeRequestSourceObjects })
  @Expose({ name: "sourceObjects" })
  @Type(() => ComposeRequestSourceObjects)
  sourceObjects?: ComposeRequestSourceObjects[];
}
