// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum - Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
type POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum string

const (
	POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnumProcessing POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum = "Processing"
	POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnumYes        POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum = "Yes"
	POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnumNo         POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum = "No"
	POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnumError      POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum = "Error"
	POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnumIgnore     POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum = "Ignore"
)

func (e *POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processing":
		fallthrough
	case "Yes":
		fallthrough
	case "No":
		fallthrough
	case "Error":
		fallthrough
	case "Ignore":
		*e = POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum: %s", s)
	}
}

// POSTSettlePaymentResponseFinanceInformation - Container for the finance information related to the refund.
type POSTSettlePaymentResponseFinanceInformation struct {
	// The accounting code that maps to a bank account in your accounting system.
	//
	BankAccountAccountingCode *string `json:"bankAccountAccountingCode,omitempty"`
	// The type of the accounting code that maps to a bank account in your accounting system.
	//
	//
	BankAccountAccountingCodeType *string `json:"bankAccountAccountingCodeType,omitempty"`
	// Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
	//
	TransferredToAccounting *POSTSettlePaymentResponseFinanceInformationTransferredToAccountingEnum `json:"transferredToAccounting,omitempty"`
	// The accounting code for the unapplied payment.
	//
	UnappliedPaymentAccountingCode *string `json:"unappliedPaymentAccountingCode,omitempty"`
	// The type of the accounting code for the unapplied payment.
	//
	//
	UnappliedPaymentAccountingCodeType *string `json:"unappliedPaymentAccountingCodeType,omitempty"`
}

// POSTSettlePaymentResponseGatewayStateEnum - The status of the payment in the gateway; used for reconciliation.
type POSTSettlePaymentResponseGatewayStateEnum string

const (
	POSTSettlePaymentResponseGatewayStateEnumMarkedForSubmission POSTSettlePaymentResponseGatewayStateEnum = "MarkedForSubmission"
	POSTSettlePaymentResponseGatewayStateEnumSubmitted           POSTSettlePaymentResponseGatewayStateEnum = "Submitted"
	POSTSettlePaymentResponseGatewayStateEnumSettled             POSTSettlePaymentResponseGatewayStateEnum = "Settled"
	POSTSettlePaymentResponseGatewayStateEnumNotSubmitted        POSTSettlePaymentResponseGatewayStateEnum = "NotSubmitted"
	POSTSettlePaymentResponseGatewayStateEnumFailedToSettle      POSTSettlePaymentResponseGatewayStateEnum = "FailedToSettle"
)

func (e *POSTSettlePaymentResponseGatewayStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MarkedForSubmission":
		fallthrough
	case "Submitted":
		fallthrough
	case "Settled":
		fallthrough
	case "NotSubmitted":
		fallthrough
	case "FailedToSettle":
		*e = POSTSettlePaymentResponseGatewayStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTSettlePaymentResponseGatewayStateEnum: %s", s)
	}
}

// POSTSettlePaymentResponseTypeEnum - The type of the payment.
type POSTSettlePaymentResponseTypeEnum string

const (
	POSTSettlePaymentResponseTypeEnumExternal   POSTSettlePaymentResponseTypeEnum = "External"
	POSTSettlePaymentResponseTypeEnumElectronic POSTSettlePaymentResponseTypeEnum = "Electronic"
)

func (e *POSTSettlePaymentResponseTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "External":
		fallthrough
	case "Electronic":
		*e = POSTSettlePaymentResponseTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTSettlePaymentResponseTypeEnum: %s", s)
	}
}

type POSTSettlePaymentResponse struct {
	// The ID of the customer account that the payment is for.
	//
	AccountID *string `json:"accountId,omitempty"`
	// The total amount of the payment.
	//
	Amount *float64 `json:"amount,omitempty"`
	// The applied amount of the payment.
	//
	AppliedAmount *float64 `json:"appliedAmount,omitempty"`
	// The authorization transaction ID from the payment gateway.
	//
	AuthTransactionID *string `json:"authTransactionId,omitempty"`
	// The first six digits of the credit card or debit card used for the payment, when applicable.
	//
	BankIdentificationNumber *string `json:"bankIdentificationNumber,omitempty"`
	// The date and time when the payment was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
	//
	CancelledOn *time.Time `json:"cancelledOn,omitempty"`
	// Comments about the payment.
	//
	Comment *string `json:"comment,omitempty"`
	// The ID of the Zuora user who created the refund.
	//
	CreatedByID *string `json:"createdById,omitempty"`
	// The date and time when the chargeback is created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-01 15:31:10.
	//
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// The amount that the payment transfers to the credit balance. The value is not `0` only for those payments that come from legacy payment operations performed without the Invoice Settlement feature.
	//
	CreditBalanceAmount *float64 `json:"creditBalanceAmount,omitempty"`
	// A currency defined in the web-based UI administrative settings.
	//
	Currency *string `json:"currency,omitempty"`
	// The date and time when the payment takes effect, in `yyyy-mm-dd hh:mm:ss` format.
	//
	EffectiveDate *time.Time `json:"effectiveDate,omitempty"`
	// Container for the finance information related to the refund.
	//
	FinanceInformation *POSTSettlePaymentResponseFinanceInformation `json:"financeInformation,omitempty"`
	// The ID of the gateway instance that processes the payment.
	//
	GatewayID *string `json:"gatewayId,omitempty"`
	// A merchant-specified natural key value that can be passed to the electronic payment gateway when a payment is created. If not specified, the payment number will be passed in instead.
	//
	GatewayOrderID *string `json:"gatewayOrderId,omitempty"`
	// The message returned from the payment gateway for the payment. This message is gateway-dependent.
	//
	GatewayResponse *string `json:"gatewayResponse,omitempty"`
	// The code returned from the payment gateway for the payment. This code is gateway-dependent.
	//
	GatewayResponseCode *string `json:"gatewayResponseCode,omitempty"`
	// The status of the payment in the gateway; used for reconciliation.
	//
	GatewayState *POSTSettlePaymentResponseGatewayStateEnum `json:"gatewayState,omitempty"`
	// The ID of the payment chargeback.
	//
	ID *string `json:"id,omitempty"`
	// The date and time when a charge was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
	//
	MarkedForSubmissionOn *time.Time `json:"markedForSubmissionOn,omitempty"`
	// The unique identification number of the payment. For example, P-00000001.
	//
	Number *string `json:"number,omitempty"`
	// The unique ID of the payment method that the customer used to make the payment.
	//
	PaymentMethodID *string `json:"paymentMethodId,omitempty"`
	// The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
	//
	PaymentMethodSnapshotID *string `json:"paymentMethodSnapshotId,omitempty"`
	// The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
	//
	ReferenceID *string `json:"referenceId,omitempty"`
	// The amount of the payment that is refunded.
	//
	RefundAmount *float64 `json:"refundAmount,omitempty"`
	// The transaction ID returned by the payment gateway if there is an additional transaction for the payment.
	//
	SecondPaymentReferenceID *string `json:"secondPaymentReferenceId,omitempty"`
	// The date and time when the transaction is settled, in `yyyy-mm-dd hh:mm:ss` format.
	//
	SettledOn *time.Time `json:"settledOn,omitempty"`
	// A payment gateway-specific field that maps Zuora to other gateways.
	//
	SoftDescriptor *string `json:"softDescriptor,omitempty"`
	// A payment gateway-specific field that maps Zuora to other gateways.
	//
	SoftDescriptorPhone *string `json:"softDescriptorPhone,omitempty"`
	// The status of the payment.
	//
	Status *string `json:"status,omitempty"`
	// The date and time when the payment was submitted, in `yyyy-mm-dd hh:mm:ss` format.
	//
	SubmittedOn *time.Time `json:"submittedOn,omitempty"`
	// Indicates if the request is processed successfully.
	//
	Success *bool `json:"success,omitempty"`
	// The type of the payment.
	//
	Type *POSTSettlePaymentResponseTypeEnum `json:"type,omitempty"`
	// The unapplied amount of the payment.
	//
	UnappliedAmount *float64 `json:"unappliedAmount,omitempty"`
	// The ID of the Zuora user who last updated the payment.
	//
	UpdatedByID *string `json:"updatedById,omitempty"`
	// The date and time when the payment was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2019-03-02 15:36:10.
	//
	UpdatedDate *time.Time `json:"updatedDate,omitempty"`
}
