"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import automlcandidate as shared_automlcandidate
from ..shared import automldatasplitconfig as shared_automldatasplitconfig
from ..shared import automljobchannel as shared_automljobchannel
from ..shared import automljobobjective as shared_automljobobjective
from ..shared import automljobsecondarystatus_enum as shared_automljobsecondarystatus_enum
from ..shared import automljobstatus_enum as shared_automljobstatus_enum
from ..shared import automloutputdataconfig as shared_automloutputdataconfig
from ..shared import automlpartialfailurereason as shared_automlpartialfailurereason
from ..shared import automlproblemtypeconfig as shared_automlproblemtypeconfig
from ..shared import automlsecurityconfig as shared_automlsecurityconfig
from ..shared import modeldeployconfig as shared_modeldeployconfig
from ..shared import modeldeployresult as shared_modeldeployresult
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeAutoMLJobV2Response:
    r"""Success"""
    
    auto_ml_job_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJobArn') }})  
    auto_ml_job_input_data_config: list[shared_automljobchannel.AutoMLJobChannel] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJobInputDataConfig') }})  
    auto_ml_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJobName') }})  
    auto_ml_job_secondary_status: shared_automljobsecondarystatus_enum.AutoMLJobSecondaryStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJobSecondaryStatus') }})  
    auto_ml_job_status: shared_automljobstatus_enum.AutoMLJobStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJobStatus') }})  
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    last_modified_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    output_data_config: shared_automloutputdataconfig.AutoMLOutputDataConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputDataConfig') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    auto_ml_job_objective: Optional[shared_automljobobjective.AutoMLJobObjective] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLJobObjective'), 'exclude': lambda f: f is None }})  
    auto_ml_problem_type_config: Optional[shared_automlproblemtypeconfig.AutoMLProblemTypeConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMLProblemTypeConfig'), 'exclude': lambda f: f is None }})  
    best_candidate: Optional[shared_automlcandidate.AutoMLCandidate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BestCandidate'), 'exclude': lambda f: f is None }})  
    data_split_config: Optional[shared_automldatasplitconfig.AutoMLDataSplitConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataSplitConfig'), 'exclude': lambda f: f is None }})  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    model_deploy_config: Optional[shared_modeldeployconfig.ModelDeployConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelDeployConfig'), 'exclude': lambda f: f is None }})  
    model_deploy_result: Optional[shared_modeldeployresult.ModelDeployResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelDeployResult'), 'exclude': lambda f: f is None }})  
    partial_failure_reasons: Optional[list[shared_automlpartialfailurereason.AutoMLPartialFailureReason]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PartialFailureReasons'), 'exclude': lambda f: f is None }})  
    security_config: Optional[shared_automlsecurityconfig.AutoMLSecurityConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityConfig'), 'exclude': lambda f: f is None }})  
    