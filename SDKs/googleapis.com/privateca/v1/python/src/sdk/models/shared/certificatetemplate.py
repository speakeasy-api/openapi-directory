"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import certificateextensionconstraints as shared_certificateextensionconstraints
from ..shared import certificateidentityconstraints as shared_certificateidentityconstraints
from ..shared import x509parameters as shared_x509parameters
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CertificateTemplateInput:
    r"""A CertificateTemplate refers to a managed template for certificate issuance."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. A human-readable description of scenarios this template is intended for."""  
    identity_constraints: Optional[shared_certificateidentityconstraints.CertificateIdentityConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityConstraints'), 'exclude': lambda f: f is None }})
    r"""Describes constraints on a Certificate's Subject and SubjectAltNames."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. Labels with user-defined metadata."""  
    passthrough_extensions: Optional[shared_certificateextensionconstraints.CertificateExtensionConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passthroughExtensions'), 'exclude': lambda f: f is None }})
    r"""Describes a set of X.509 extensions that may be part of some certificate issuance controls."""  
    predefined_values: Optional[shared_x509parameters.X509Parameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('predefinedValues'), 'exclude': lambda f: f is None }})
    r"""An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CertificateTemplate:
    r"""A CertificateTemplate refers to a managed template for certificate issuance."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time at which this CertificateTemplate was created."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. A human-readable description of scenarios this template is intended for."""  
    identity_constraints: Optional[shared_certificateidentityconstraints.CertificateIdentityConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityConstraints'), 'exclude': lambda f: f is None }})
    r"""Describes constraints on a Certificate's Subject and SubjectAltNames."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. Labels with user-defined metadata."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name for this CertificateTemplate in the format `projects/*/locations/*/certificateTemplates/*`."""  
    passthrough_extensions: Optional[shared_certificateextensionconstraints.CertificateExtensionConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passthroughExtensions'), 'exclude': lambda f: f is None }})
    r"""Describes a set of X.509 extensions that may be part of some certificate issuance controls."""  
    predefined_values: Optional[shared_x509parameters.X509Parameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('predefinedValues'), 'exclude': lambda f: f is None }})
    r"""An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time at which this CertificateTemplate was updated."""  
    