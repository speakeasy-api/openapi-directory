"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlechromemanagementv1displaydevice as shared_googlechromemanagementv1displaydevice
from ..shared import googlechromemanagementv1graphicsadapterinfo as shared_googlechromemanagementv1graphicsadapterinfo
from ..shared import googlechromemanagementv1touchscreeninfo as shared_googlechromemanagementv1touchscreeninfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleChromeManagementV1GraphicsInfo:
    r"""Information of the graphics subsystem. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceGraphicsStatus](https://chromeenterprise.google/policies/#ReportDeviceGraphicsStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A"""
    
    adapter_info: Optional[shared_googlechromemanagementv1graphicsadapterinfo.GoogleChromeManagementV1GraphicsAdapterInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adapterInfo'), 'exclude': lambda f: f is None }})
    r"""Information of a graphics adapter (GPU)."""  
    display_devices: Optional[list[shared_googlechromemanagementv1displaydevice.GoogleChromeManagementV1DisplayDevice]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayDevices'), 'exclude': lambda f: f is None }})
    r"""Output only. Information about the display(s) of the device."""  
    eprivacy_supported: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eprivacySupported'), 'exclude': lambda f: f is None }})
    r"""Output only. Is ePrivacy screen supported or not."""  
    touch_screen_info: Optional[shared_googlechromemanagementv1touchscreeninfo.GoogleChromeManagementV1TouchScreenInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('touchScreenInfo'), 'exclude': lambda f: f is None }})
    r"""Information on the device touch screen."""  
    