// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetAutomationExecutionXAmzTargetEnum
type GetAutomationExecutionXAmzTargetEnum string

const (
	GetAutomationExecutionXAmzTargetEnumAmazonSsmGetAutomationExecution GetAutomationExecutionXAmzTargetEnum = "AmazonSSM.GetAutomationExecution"
)

func (e *GetAutomationExecutionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonSSM.GetAutomationExecution":
		*e = GetAutomationExecutionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAutomationExecutionXAmzTargetEnum: %s", s)
	}
}

type GetAutomationExecutionHeaders struct {
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetAutomationExecutionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetAutomationExecutionRequest struct {
	Headers GetAutomationExecutionHeaders
	Request shared.GetAutomationExecutionRequest `request:"mediaType=application/json"`
}

type GetAutomationExecutionResponse struct {
	// AutomationExecutionNotFoundException
	AutomationExecutionNotFoundException interface{}
	ContentType                          string
	// Success
	GetAutomationExecutionResult *shared.GetAutomationExecutionResult
	// InternalServerError
	InternalServerError interface{}
	StatusCode          int
	RawResponse         *http.Response
}
