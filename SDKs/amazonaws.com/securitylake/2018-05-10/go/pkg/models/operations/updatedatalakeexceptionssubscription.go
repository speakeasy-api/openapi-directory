// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum - The subscription protocol to which exception messages are posted.
type UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum string

const (
	UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnumHTTP      UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum = "HTTP"
	UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnumHTTPS     UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum = "HTTPS"
	UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnumEmail     UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum = "EMAIL"
	UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnumEmailJSON UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum = "EMAIL_JSON"
	UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnumSms       UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum = "SMS"
	UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnumSqs       UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum = "SQS"
	UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnumLambda    UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum = "LAMBDA"
	UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnumApp       UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum = "APP"
	UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnumFirehose  UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum = "FIREHOSE"
)

func (e *UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HTTP":
		fallthrough
	case "HTTPS":
		fallthrough
	case "EMAIL":
		fallthrough
	case "EMAIL_JSON":
		fallthrough
	case "SMS":
		fallthrough
	case "SQS":
		fallthrough
	case "LAMBDA":
		fallthrough
	case "APP":
		fallthrough
	case "FIREHOSE":
		*e = UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum: %s", s)
	}
}

type UpdateDatalakeExceptionsSubscriptionRequestBody struct {
	// The account that is subscribed to receive exception notifications.
	NotificationEndpoint string `json:"notificationEndpoint"`
	// The subscription protocol to which exception messages are posted.
	SubscriptionProtocol UpdateDatalakeExceptionsSubscriptionRequestBodySubscriptionProtocolEnum `json:"subscriptionProtocol"`
}

type UpdateDatalakeExceptionsSubscriptionRequest struct {
	RequestBody       UpdateDatalakeExceptionsSubscriptionRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type UpdateDatalakeExceptionsSubscriptionResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// AccountNotFoundException
	AccountNotFoundException interface{}
	ContentType              string
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// Success
	UpdateDatalakeExceptionsSubscriptionResponse map[string]interface{}
	// ValidationException
	ValidationException interface{}
}
