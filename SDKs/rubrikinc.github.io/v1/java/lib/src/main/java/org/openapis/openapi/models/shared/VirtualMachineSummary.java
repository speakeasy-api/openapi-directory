/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class VirtualMachineSummary {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agentStatus")
    public AgentStatus agentStatus;

    public VirtualMachineSummary withAgentStatus(AgentStatus agentStatus) {
        this.agentStatus = agentStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudInstantiationSpec")
    public CloudInstantiationSpec cloudInstantiationSpec;

    public VirtualMachineSummary withCloudInstantiationSpec(CloudInstantiationSpec cloudInstantiationSpec) {
        this.cloudInstantiationSpec = cloudInstantiationSpec;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterName")
    public String clusterName;

    public VirtualMachineSummary withClusterName(String clusterName) {
        this.clusterName = clusterName;
        return this;
    }
    
    /**
     * The ID of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public VirtualMachineSummary withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainName")
    public String configuredSlaDomainName;

    public VirtualMachineSummary withConfiguredSlaDomainName(String configuredSlaDomainName) {
        this.configuredSlaDomainName = configuredSlaDomainName;
        return this;
    }
    
    /**
     * Specifies whether the SLA Domain is used for protection or retention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainType")
    public ConfiguredSlaTypeEnum configuredSlaDomainType;

    public VirtualMachineSummary withConfiguredSlaDomainType(ConfiguredSlaTypeEnum configuredSlaDomainType) {
        this.configuredSlaDomainType = configuredSlaDomainType;
        return this;
    }
    
    /**
     * The ID of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainId")
    public String effectiveSlaDomainId;

    public VirtualMachineSummary withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainName")
    public String effectiveSlaDomainName;

    public VirtualMachineSummary withEffectiveSlaDomainName(String effectiveSlaDomainName) {
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        return this;
    }
    
    /**
     * Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaDomainPolarisManagedId")
    public String effectiveSlaDomainPolarisManagedId;

    public VirtualMachineSummary withEffectiveSlaDomainPolarisManagedId(String effectiveSlaDomainPolarisManagedId) {
        this.effectiveSlaDomainPolarisManagedId = effectiveSlaDomainPolarisManagedId;
        return this;
    }
    
    /**
     * The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectId")
    public String effectiveSlaSourceObjectId;

    public VirtualMachineSummary withEffectiveSlaSourceObjectId(String effectiveSlaSourceObjectId) {
        this.effectiveSlaSourceObjectId = effectiveSlaSourceObjectId;
        return this;
    }
    
    /**
     * The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectName")
    public String effectiveSlaSourceObjectName;

    public VirtualMachineSummary withEffectiveSlaSourceObjectName(String effectiveSlaSourceObjectName) {
        this.effectiveSlaSourceObjectName = effectiveSlaSourceObjectName;
        return this;
    }
    
    /**
     * Brief info of all the objects in the folder path to this VM.
     */
    @JsonProperty("folderPath")
    public VmPathPoint[] folderPath;

    public VirtualMachineSummary withFolderPath(VmPathPoint[] folderPath) {
        this.folderPath = folderPath;
        return this;
    }
    
    /**
     * Status of authentication with a specific virtual machine using guest credentials. Possible values are: SUCCESSFUL, PENDING, or FAILED.
     */
    @JsonProperty("guestCredentialAuthorizationStatus")
    public String guestCredentialAuthorizationStatus;

    public VirtualMachineSummary withGuestCredentialAuthorizationStatus(String guestCredentialAuthorizationStatus) {
        this.guestCredentialAuthorizationStatus = guestCredentialAuthorizationStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestOsName")
    public String guestOsName;

    public VirtualMachineSummary withGuestOsName(String guestOsName) {
        this.guestOsName = guestOsName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostId")
    public String hostId;

    public VirtualMachineSummary withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostName")
    public String hostName;

    public VirtualMachineSummary withHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }
    
    /**
     * The ID of the Rubrik object.
     */
    @JsonProperty("id")
    public String id;

    public VirtualMachineSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Brief info of all the objects in the infrastructure path to this VM.
     */
    @JsonProperty("infraPath")
    public VmPathPoint[] infraPath;

    public VirtualMachineSummary withInfraPath(VmPathPoint[] infraPath) {
        this.infraPath = infraPath;
        return this;
    }
    
    @JsonProperty("ipAddress")
    public String ipAddress;

    public VirtualMachineSummary withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isConfiguredSlaDomainRetentionLocked")
    public Boolean isConfiguredSlaDomainRetentionLocked;

    public VirtualMachineSummary withIsConfiguredSlaDomainRetentionLocked(Boolean isConfiguredSlaDomainRetentionLocked) {
        this.isConfiguredSlaDomainRetentionLocked = isConfiguredSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEffectiveSlaDomainRetentionLocked")
    public Boolean isEffectiveSlaDomainRetentionLocked;

    public VirtualMachineSummary withIsEffectiveSlaDomainRetentionLocked(Boolean isEffectiveSlaDomainRetentionLocked) {
        this.isEffectiveSlaDomainRetentionLocked = isEffectiveSlaDomainRetentionLocked;
        return this;
    }
    
    @JsonProperty("isRelic")
    public Boolean isRelic;

    public VirtualMachineSummary withIsRelic(Boolean isRelic) {
        this.isRelic = isRelic;
        return this;
    }
    
    @JsonProperty("isReplicationEnabled")
    public Boolean isReplicationEnabled;

    public VirtualMachineSummary withIsReplicationEnabled(Boolean isReplicationEnabled) {
        this.isReplicationEnabled = isReplicationEnabled;
        return this;
    }
    
    @JsonProperty("moid")
    public String moid;

    public VirtualMachineSummary withMoid(String moid) {
        this.moid = moid;
        return this;
    }
    
    /**
     * The name of the Rubrik object.
     */
    @JsonProperty("name")
    public String name;

    public VirtualMachineSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentAppInfo")
    public ParentAppInfo parentAppInfo;

    public VirtualMachineSummary withParentAppInfo(ParentAppInfo parentAppInfo) {
        this.parentAppInfo = parentAppInfo;
        return this;
    }
    
    /**
     * The power status of VM(ON,OFF,SLEEP etc.).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("powerStatus")
    public String powerStatus;

    public VirtualMachineSummary withPowerStatus(String powerStatus) {
        this.powerStatus = powerStatus;
        return this;
    }
    
    /**
     * The ID of the cluster that manages the Rubrik object.
     */
    @JsonProperty("primaryClusterId")
    public String primaryClusterId;

    public VirtualMachineSummary withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("protectionDate")
    public OffsetDateTime protectionDate;

    public VirtualMachineSummary withProtectionDate(OffsetDateTime protectionDate) {
        this.protectionDate = protectionDate;
        return this;
    }
    
    /**
     * The ID of the SLA Domain whose retention policy is in use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retentionSlaDomainId")
    public String retentionSlaDomainId;

    public VirtualMachineSummary withRetentionSlaDomainId(String retentionSlaDomainId) {
        this.retentionSlaDomainId = retentionSlaDomainId;
        return this;
    }
    
    /**
     * The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.
     */
    @JsonProperty("slaAssignment")
    public VirtualMachineSummarySlaAssignmentEnum slaAssignment;

    public VirtualMachineSummary withSlaAssignment(VirtualMachineSummarySlaAssignmentEnum slaAssignment) {
        this.slaAssignment = slaAssignment;
        return this;
    }
    
    /**
     * The UTC time when the SLA Domain was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("slaLastUpdateTime")
    public OffsetDateTime slaLastUpdateTime;

    public VirtualMachineSummary withSlaLastUpdateTime(OffsetDateTime slaLastUpdateTime) {
        this.slaLastUpdateTime = slaLastUpdateTime;
        return this;
    }
    
    /**
     * Consistency level mandated for this VM or empty string for none.
     */
    @JsonProperty("snapshotConsistencyMandate")
    public VirtualMachineSummarySnapshotConsistencyMandateEnum snapshotConsistencyMandate;

    public VirtualMachineSummary withSnapshotConsistencyMandate(VirtualMachineSummarySnapshotConsistencyMandateEnum snapshotConsistencyMandate) {
        this.snapshotConsistencyMandate = snapshotConsistencyMandate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("toolsInstalled")
    public Boolean toolsInstalled;

    public VirtualMachineSummary withToolsInstalled(Boolean toolsInstalled) {
        this.toolsInstalled = toolsInstalled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vcenterId")
    public String vcenterId;

    public VirtualMachineSummary withVcenterId(String vcenterId) {
        this.vcenterId = vcenterId;
        return this;
    }
    
    @JsonProperty("vmwareToolsInstalled")
    public Boolean vmwareToolsInstalled;

    public VirtualMachineSummary withVmwareToolsInstalled(Boolean vmwareToolsInstalled) {
        this.vmwareToolsInstalled = vmwareToolsInstalled;
        return this;
    }
    
    public VirtualMachineSummary(@JsonProperty("configuredSlaDomainId") String configuredSlaDomainId, @JsonProperty("configuredSlaDomainName") String configuredSlaDomainName, @JsonProperty("effectiveSlaDomainId") String effectiveSlaDomainId, @JsonProperty("effectiveSlaDomainName") String effectiveSlaDomainName, @JsonProperty("folderPath") VmPathPoint[] folderPath, @JsonProperty("guestCredentialAuthorizationStatus") String guestCredentialAuthorizationStatus, @JsonProperty("id") String id, @JsonProperty("infraPath") VmPathPoint[] infraPath, @JsonProperty("ipAddress") String ipAddress, @JsonProperty("isRelic") Boolean isRelic, @JsonProperty("isReplicationEnabled") Boolean isReplicationEnabled, @JsonProperty("moid") String moid, @JsonProperty("name") String name, @JsonProperty("primaryClusterId") String primaryClusterId, @JsonProperty("slaAssignment") VirtualMachineSummarySlaAssignmentEnum slaAssignment, @JsonProperty("snapshotConsistencyMandate") VirtualMachineSummarySnapshotConsistencyMandateEnum snapshotConsistencyMandate, @JsonProperty("vmwareToolsInstalled") Boolean vmwareToolsInstalled) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        this.configuredSlaDomainName = configuredSlaDomainName;
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        this.folderPath = folderPath;
        this.guestCredentialAuthorizationStatus = guestCredentialAuthorizationStatus;
        this.id = id;
        this.infraPath = infraPath;
        this.ipAddress = ipAddress;
        this.isRelic = isRelic;
        this.isReplicationEnabled = isReplicationEnabled;
        this.moid = moid;
        this.name = name;
        this.primaryClusterId = primaryClusterId;
        this.slaAssignment = slaAssignment;
        this.snapshotConsistencyMandate = snapshotConsistencyMandate;
        this.vmwareToolsInstalled = vmwareToolsInstalled;
  }
}
