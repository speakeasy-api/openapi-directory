"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import individual as shared_individual
from ..shared import legalentityassociation as shared_legalentityassociation
from ..shared import organization as shared_organization
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LegalEntityInfoTypeEnum(str, Enum):
    r"""The type of legal entity.
    
     Possible values: **individual** or **organization**
    """
    INDIVIDUAL = 'individual'
    ORGANIZATION = 'organization'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LegalEntityInfoInput:
    
    entity_associations: Optional[list[shared_legalentityassociation.LegalEntityAssociationInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityAssociations'), 'exclude': lambda f: f is None }})
    r"""List of legal entities associated with the current legal entity.
    For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.
    """  
    individual: Optional[shared_individual.IndividualInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual'), 'exclude': lambda f: f is None }})  
    organization: Optional[shared_organization.OrganizationInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization'), 'exclude': lambda f: f is None }})  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Your reference for the legal entity, maximum 150 characters."""  
    type: Optional[LegalEntityInfoTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of legal entity.
    
     Possible values: **individual** or **organization**
    """  
    