/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * POSTSubscriptionType - Container for custom fields of a Subscription object.
 * 
 */
public class POSTSubscriptionType {
    /**
     * The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CpqBundleJsonId__QT")
    public String cpqBundleJsonIdQT;
    public POSTSubscriptionType withCpqBundleJsonIdQT(String cpqBundleJsonIdQT) {
        this.cpqBundleJsonIdQT = cpqBundleJsonIdQT;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public POSTSubscriptionType withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public POSTSubscriptionType withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     * The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("OpportunityCloseDate__QT")
    public LocalDate opportunityCloseDateQT;
    public POSTSubscriptionType withOpportunityCloseDateQT(LocalDate opportunityCloseDateQT) {
        this.opportunityCloseDateQT = opportunityCloseDateQT;
        return this;
    }
    
    /**
     * The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OpportunityName__QT")
    public String opportunityNameQT;
    public POSTSubscriptionType withOpportunityNameQT(String opportunityNameQT) {
        this.opportunityNameQT = opportunityNameQT;
        return this;
    }
    
    /**
     * The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Project__NS")
    public String projectNS;
    public POSTSubscriptionType withProjectNS(String projectNS) {
        this.projectNS = projectNS;
        return this;
    }
    
    /**
     * The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuoteBusinessType__QT")
    public String quoteBusinessTypeQT;
    public POSTSubscriptionType withQuoteBusinessTypeQT(String quoteBusinessTypeQT) {
        this.quoteBusinessTypeQT = quoteBusinessTypeQT;
        return this;
    }
    
    /**
     * The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuoteNumber__QT")
    public String quoteNumberQT;
    public POSTSubscriptionType withQuoteNumberQT(String quoteNumberQT) {
        this.quoteNumberQT = quoteNumberQT;
        return this;
    }
    
    /**
     * The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QuoteType__QT")
    public String quoteTypeQT;
    public POSTSubscriptionType withQuoteTypeQT(String quoteTypeQT) {
        this.quoteTypeQT = quoteTypeQT;
        return this;
    }
    
    /**
     * The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SalesOrder__NS")
    public String salesOrderNS;
    public POSTSubscriptionType withSalesOrderNS(String salesOrderNS) {
        this.salesOrderNS = salesOrderNS;
        return this;
    }
    
    /**
     * Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public POSTSubscriptionType withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * Customer account number or ID
     * 
     */
    @JsonProperty("accountKey")
    public String accountKey;
    public POSTSubscriptionType withAccountKey(String accountKey) {
        this.accountKey = accountKey;
        return this;
    }
    
    /**
     * The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.
     * 
     * **Note:**
     *   - This field is valid only if the `applyCredit` field is set to `true`.
     *   - If no value is specified for this field, the default priority order is used, ["CreditMemo", "UnappliedPayment"], to apply credit memos first and then apply unapplied payments.
     *   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `["CreditMemo"]`, only credit memos are used to apply to invoices.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationOrder")
    public String[] applicationOrder;
    public POSTSubscriptionType withApplicationOrder(String[] applicationOrder) {
        this.applicationOrder = applicationOrder;
        return this;
    }
    
    /**
     * Whether to automatically apply credit memos or unapplied payments, or both to an invoice.
     * 
     * If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the invoice. If no value is specified or the value is `false`, no action is taken.
     * 
     * **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyCredit")
    public Boolean applyCredit;
    public POSTSubscriptionType withApplyCredit(Boolean applyCredit) {
        this.applyCredit = applyCredit;
        return this;
    }
    
    /**
     * Whether to automatically apply a credit balance to an invoice.
     * 
     * If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.
     * 
     * 
     * To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.
     * 
     * Prerequisite: `invoice` must be `true`. 
     * 
     * **Note:** 
     *   - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.
     *   - This field is deprecated if you have the Invoice Settlement feature enabled.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyCreditBalance")
    public Boolean applyCreditBalance;
    public POSTSubscriptionType withApplyCreditBalance(Boolean applyCreditBalance) {
        this.applyCreditBalance = applyCreditBalance;
        return this;
    }
    
    /**
     * If true, this subscription automatically renews at the end of the subscription term.
     * 
     * This field is only required if the `termType` field is set to `TERMED`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoRenew")
    public Boolean autoRenew;
    public POSTSubscriptionType withAutoRenew(Boolean autoRenew) {
        this.autoRenew = autoRenew;
        return this;
    }
    
    /**
     * Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.
     * 
     * If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.
     * 
     * Prerequisite: The `invoice` or `runBilling` field must be `true`. 
     * 
     * **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collect")
    public Boolean collect;
    public POSTSubscriptionType withCollect(Boolean collect) {
        this.collect = collect;
        return this;
    }
    
    /**
     * Effective contract date for this subscription, as yyyy-mm-dd
     * 
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("contractEffectiveDate")
    public LocalDate contractEffectiveDate;
    public POSTSubscriptionType withContractEffectiveDate(LocalDate contractEffectiveDate) {
        this.contractEffectiveDate = contractEffectiveDate;
        return this;
    }
    
    /**
     * The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.
     * 
     * Default value is dependent on the value of other fields. See **Notes** section for more details.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("customerAcceptanceDate")
    public LocalDate customerAcceptanceDate;
    public POSTSubscriptionType withCustomerAcceptanceDate(LocalDate customerAcceptanceDate) {
        this.customerAcceptanceDate = customerAcceptanceDate;
        return this;
    }
    
    /**
     * The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.
     * 
     * - If this field is specified, the specified date is used as the billing document date. 
     * - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("documentDate")
    public LocalDate documentDate;
    public POSTSubscriptionType withDocumentDate(LocalDate documentDate) {
        this.documentDate = documentDate;
        return this;
    }
    
    /**
     * The ID of the payment gateway instance. For example, `2c92c0f86078c4d5016091674bcc3e92`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayId")
    public String gatewayId;
    public POSTSubscriptionType withGatewayId(String gatewayId) {
        this.gatewayId = gatewayId;
        return this;
    }
    
    /**
     * The length of the period for the first subscription term. If `termType` is `TERMED`, then this field is required, and the value must be greater than `0`. If `termType` is `EVERGREEN`, this field is ignored.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initialTerm")
    public Long initialTerm;
    public POSTSubscriptionType withInitialTerm(Long initialTerm) {
        this.initialTerm = initialTerm;
        return this;
    }
    
    /**
     * The period type for the first subscription term.
     * 
     * This field is used with the `InitialTerm` field to specify the initial subscription term.
     * 
     * Values are:
     * 
     * * `Month` (default)
     * * `Year`
     * * `Day`
     * * `Week`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initialTermPeriodType")
    public String initialTermPeriodType;
    public POSTSubscriptionType withInitialTermPeriodType(String initialTermPeriodType) {
        this.initialTermPeriodType = initialTermPeriodType;
        return this;
    }
    
    /**
     * **Note:** This field has been replaced by the `runBilling` field. The
     * `invoice` field is only available for backward compatibility.
     * 
     * 
     * Creates an invoice for a subscription. The invoice generated in this
     * operation is only for this subscription, not for the entire customer
     * account.
     * 
     * 
     * If the value is `true`, an invoice is created. If the value is
     * `false`, no action is taken. The default value is `true`. 
     * 
     * 
     * This field is in Zuora REST API version control. Supported minor
     * versions are `196.0` and `207.0`. To use this field in the method, you
     * must set the zuora-version parameter to the minor version number in
     * the request header. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice")
    public Boolean invoice;
    public POSTSubscriptionType withInvoice(Boolean invoice) {
        this.invoice = invoice;
        return this;
    }
    
    /**
     * **Note:** This field has been replaced by the `invoice` field
     * and the `collect` field. `invoiceCollect` is available only for backward compatibility.
     * 
     * 
     * If this field is set to `true`, an invoice is generated and payment collected automatically
     * during the subscription process. If `false`, no invoicing or payment takes
     * place. The invoice generated in this operation is only for this subscription,
     * not for the entire customer account.
     * 
     * 
     * **Note**: This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceCollect")
    public Boolean invoiceCollect;
    public POSTSubscriptionType withInvoiceCollect(Boolean invoiceCollect) {
        this.invoiceCollect = invoiceCollect;
        return this;
    }
    
    /**
     * Invoice owner account number or ID.
     * 
     * **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceOwnerAccountKey")
    public String invoiceOwnerAccountKey;
    public POSTSubscriptionType withInvoiceOwnerAccountKey(String invoiceOwnerAccountKey) {
        this.invoiceOwnerAccountKey = invoiceOwnerAccountKey;
        return this;
    }
    
    /**
     * Separates a single subscription from other subscriptions and invoices the charge independently. 
     * 
     * If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.
     * 
     * The default value is `false`.
     * 
     * Prerequisite: The default subscription setting Enable Subscriptions to be Invoiced Separately must be set to Yes.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceSeparately")
    public Boolean invoiceSeparately;
    public POSTSubscriptionType withInvoiceSeparately(Boolean invoiceSeparately) {
        this.invoiceSeparately = invoiceSeparately;
        return this;
    }
    
    /**
     * **Note:** This field has been replaced by the `targetDate` field. The
     * `invoiceTargetDate` field is only available for backward
     * compatibility.
     * 
     * 
     * Date through which to calculate charges if an invoice is generated, as
     * yyyy-mm-dd. Default is current date.
     * 
     * 
     * This field is in Zuora REST API version control. Supported minor
     * versions are `207.0` and earlier.  
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("invoiceTargetDate")
    public LocalDate invoiceTargetDate;
    public POSTSubscriptionType withInvoiceTargetDate(LocalDate invoiceTargetDate) {
        this.invoiceTargetDate = invoiceTargetDate;
        return this;
    }
    
    /**
     * String of up to 500 characters.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public POSTSubscriptionType withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The ID of the payment method used for the payment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMethodId")
    public String paymentMethodId;
    public POSTSubscriptionType withPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }
    
    /**
     * Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.
     * 
     * Values:
     * 
     * * `RENEW_WITH_SPECIFIC_TERM` (default)
     * * `RENEW_TO_EVERGREEN`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("renewalSetting")
    public String renewalSetting;
    public POSTSubscriptionType withRenewalSetting(String renewalSetting) {
        this.renewalSetting = renewalSetting;
        return this;
    }
    
    /**
     * The length of the period for the subscription renewal term. Default is `0`.
     * 
     */
    @JsonProperty("renewalTerm")
    public Long renewalTerm;
    public POSTSubscriptionType withRenewalTerm(Long renewalTerm) {
        this.renewalTerm = renewalTerm;
        return this;
    }
    
    /**
     * The period type for the subscription renewal term.
     * 
     * This field is used with the `renewalTerm` field to specify the subscription renewal term.
     * 
     * Values are:
     * 
     * * `Month` (default)
     * * `Year`
     * * `Day`
     * * `Week`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("renewalTermPeriodType")
    public String renewalTermPeriodType;
    public POSTSubscriptionType withRenewalTermPeriodType(String renewalTermPeriodType) {
        this.renewalTermPeriodType = renewalTermPeriodType;
        return this;
    }
    
    /**
     * Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).  
     * 
     * 
     * The billing documents generated
     * in this operation is only for this subscription, not for the entire
     * customer account.
     * 
     * 
     * Possible values:
     * 
     * - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.
     * 
     * 
     * - `false`: No invoice is created.
     * 
     * 
     * **Note:** This field is in Zuora REST API version control. Supported
     * minor versions are `211.0` or later. To use this field in the method,
     * you must set the `zuora-version` parameter to the minor version number
     * in the request header.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runBilling")
    public POSTSubscriptionTypeRunBillingEnum runBilling;
    public POSTSubscriptionType withRunBilling(POSTSubscriptionTypeRunBillingEnum runBilling) {
        this.runBilling = runBilling;
        return this;
    }
    
    /**
     * The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.
     * 
     * Default value is dependent on the value of other fields. See **Notes** section for more details.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("serviceActivationDate")
    public LocalDate serviceActivationDate;
    public POSTSubscriptionType withServiceActivationDate(LocalDate serviceActivationDate) {
        this.serviceActivationDate = serviceActivationDate;
        return this;
    }
    
    /**
     * Container for one or more rate plans for this subscription.
     * 
     */
    @JsonProperty("subscribeToRatePlans")
    public POSTSrpCreateType[] subscribeToRatePlans;
    public POSTSubscriptionType withSubscribeToRatePlans(POSTSrpCreateType[] subscribeToRatePlans) {
        this.subscribeToRatePlans = subscribeToRatePlans;
        return this;
    }
    
    /**
     * Subscription Number. The value can be up to 1000 characters.
     * 
     * If you do not specify a subscription number when creating a subscription, Zuora will generate a subscription number automatically.
     * 
     * If the account is created successfully, the subscription number is returned in the `subscriptionNumber` response field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriptionNumber")
    public String subscriptionNumber;
    public POSTSubscriptionType withSubscriptionNumber(String subscriptionNumber) {
        this.subscriptionNumber = subscriptionNumber;
        return this;
    }
    
    /**
     * Date through which to calculate charges if an invoice or a credit memo is generated, as
     * yyyy-mm-dd. Default is current date.
     * 
     * 
     * **Note:** The credit memo is only available if you have the Invoice Settlement feature enabled.
     * 
     * 
     * This field is in Zuora REST API version control. Supported minor
     * versions are `211.0` and later. To use this field in the method, you
     * must set the  `zuora-version` parameter to the minor version number in
     * the request header.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("targetDate")
    public LocalDate targetDate;
    public POSTSubscriptionType withTargetDate(LocalDate targetDate) {
        this.targetDate = targetDate;
        return this;
    }
    
    /**
     * The date on which the subscription term begins, as yyyy-mm-dd. If this is a renewal subscription, this date is different from the subscription start date.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("termStartDate")
    public LocalDate termStartDate;
    public POSTSubscriptionType withTermStartDate(LocalDate termStartDate) {
        this.termStartDate = termStartDate;
        return this;
    }
    
    /**
     * Possible values are: `TERMED`, `EVERGREEN`.
     * 
     */
    @JsonProperty("termType")
    public String termType;
    public POSTSubscriptionType withTermType(String termType) {
        this.termType = termType;
        return this;
    }
    
}
