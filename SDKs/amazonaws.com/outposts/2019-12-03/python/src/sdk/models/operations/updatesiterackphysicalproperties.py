"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import updatesiterackphysicalpropertiesoutput as shared_updatesiterackphysicalpropertiesoutput
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum(str, Enum):
    r"""The type of fiber that you will use to attach the Outpost to your network."""
    SINGLE_MODE = 'SINGLE_MODE'
    MULTI_MODE = 'MULTI_MODE'

class UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum(str, Enum):
    r"""The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000lbs."""
    NO_LIMIT = 'NO_LIMIT'
    MAX_1400_LBS = 'MAX_1400_LBS'
    MAX_1600_LBS = 'MAX_1600_LBS'
    MAX_1800_LBS = 'MAX_1800_LBS'
    MAX_2000_LBS = 'MAX_2000_LBS'

class UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum(str, Enum):
    r"""<p>The type of optical standard that you will use to attach the Outpost to your network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href=\\"https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking\\">Network</a> in the Amazon Web Services Outposts User Guide. </p> <ul> <li> <p> <code>OPTIC_10GBASE_SR</code>: 10GBASE-SR</p> </li> <li> <p> <code>OPTIC_10GBASE_IR</code>: 10GBASE-IR</p> </li> <li> <p> <code>OPTIC_10GBASE_LR</code>: 10GBASE-LR</p> </li> <li> <p> <code>OPTIC_40GBASE_SR</code>: 40GBASE-SR</p> </li> <li> <p> <code>OPTIC_40GBASE_ESR</code>: 40GBASE-ESR</p> </li> <li> <p> <code>OPTIC_40GBASE_IR4_LR4L</code>: 40GBASE-IR (LR4L)</p> </li> <li> <p> <code>OPTIC_40GBASE_LR4</code>: 40GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100GBASE_SR4</code>: 100GBASE-SR4</p> </li> <li> <p> <code>OPTIC_100GBASE_CWDM4</code>: 100GBASE-CWDM4</p> </li> <li> <p> <code>OPTIC_100GBASE_LR4</code>: 100GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100G_PSM4_MSA</code>: 100G PSM4 MSA</p> </li> <li> <p> <code>OPTIC_1000BASE_LX</code>: 1000Base-LX</p> </li> <li> <p> <code>OPTIC_1000BASE_SX</code> : 1000Base-SX</p> </li> </ul>"""
    OPTIC_10_GBASE_SR = 'OPTIC_10GBASE_SR'
    OPTIC_10_GBASE_IR = 'OPTIC_10GBASE_IR'
    OPTIC_10_GBASE_LR = 'OPTIC_10GBASE_LR'
    OPTIC_40_GBASE_SR = 'OPTIC_40GBASE_SR'
    OPTIC_40_GBASE_ESR = 'OPTIC_40GBASE_ESR'
    OPTIC_40_GBASE_IR4_LR4_L = 'OPTIC_40GBASE_IR4_LR4L'
    OPTIC_40_GBASE_LR4 = 'OPTIC_40GBASE_LR4'
    OPTIC_100_GBASE_SR4 = 'OPTIC_100GBASE_SR4'
    OPTIC_100_GBASE_CWDM4 = 'OPTIC_100GBASE_CWDM4'
    OPTIC_100_GBASE_LR4 = 'OPTIC_100GBASE_LR4'
    OPTIC_100_G_PSM4_MSA = 'OPTIC_100G_PSM4_MSA'
    OPTIC_1000_BASE_LX = 'OPTIC_1000BASE_LX'
    OPTIC_1000_BASE_SX = 'OPTIC_1000BASE_SX'

class UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum(str, Enum):
    r"""<p>The power connector that Amazon Web Services should plan to provide for connections to the hardware. Note the correlation between <code>PowerPhase</code> and <code>PowerConnector</code>. </p> <ul> <li> <p>Single-phase AC feed</p> <ul> <li> <p> <b>L6-30P</b> – (common in US); 30A; single phase</p> </li> <li> <p> <b>IEC309 (blue)</b> – P+N+E, 6hr; 32 A; single phase</p> </li> </ul> </li> <li> <p>Three-phase AC feed</p> <ul> <li> <p> <b>AH530P7W (red)</b> – 3P+N+E, 7hr; 30A; three phase</p> </li> <li> <p> <b>AH532P6W (red)</b> – 3P+N+E, 6hr; 32A; three phase</p> </li> </ul> </li> </ul>"""
    L6_30_P = 'L6_30P'
    IEC309 = 'IEC309'
    AH530_P7_W = 'AH530P7W'
    AH532_P6_W = 'AH532P6W'

class UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum(str, Enum):
    r"""The power draw, in kVA, available at the hardware placement position for the rack."""
    POWER_5_KVA = 'POWER_5_KVA'
    POWER_10_KVA = 'POWER_10_KVA'
    POWER_15_KVA = 'POWER_15_KVA'
    POWER_30_KVA = 'POWER_30_KVA'

class UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum(str, Enum):
    r"""Indicates whether the power feed comes above or below the rack."""
    ABOVE_RACK = 'ABOVE_RACK'
    BELOW_RACK = 'BELOW_RACK'

class UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum(str, Enum):
    r"""<p>The power option that you can provide for hardware. </p> <ul> <li> <p>Single-phase AC feed: 200 V to 277 V, 50 Hz or 60 Hz</p> </li> <li> <p>Three-phase AC feed: 346 V to 480 V, 50 Hz or 60 Hz</p> </li> </ul>"""
    SINGLE_PHASE = 'SINGLE_PHASE'
    THREE_PHASE = 'THREE_PHASE'

class UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum(str, Enum):
    r"""<p>Racks come with two Outpost network devices. Depending on the supported uplink speed at the site, the Outpost network devices provide a variable number of uplinks. Specify the number of uplinks for each Outpost network device that you intend to use to connect the rack to your network. Note the correlation between <code>UplinkGbps</code> and <code>UplinkCount</code>. </p> <ul> <li> <p>1Gbps - Uplinks available: 1, 2, 4, 6, 8</p> </li> <li> <p>10Gbps - Uplinks available: 1, 2, 4, 8, 12, 16</p> </li> <li> <p>40 and 100 Gbps- Uplinks available: 1, 2, 4</p> </li> </ul>"""
    UPLINK_COUNT_1 = 'UPLINK_COUNT_1'
    UPLINK_COUNT_2 = 'UPLINK_COUNT_2'
    UPLINK_COUNT_3 = 'UPLINK_COUNT_3'
    UPLINK_COUNT_4 = 'UPLINK_COUNT_4'
    UPLINK_COUNT_5 = 'UPLINK_COUNT_5'
    UPLINK_COUNT_6 = 'UPLINK_COUNT_6'
    UPLINK_COUNT_7 = 'UPLINK_COUNT_7'
    UPLINK_COUNT_8 = 'UPLINK_COUNT_8'
    UPLINK_COUNT_12 = 'UPLINK_COUNT_12'
    UPLINK_COUNT_16 = 'UPLINK_COUNT_16'

class UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum(str, Enum):
    r"""The uplink speed the rack should support for the connection to the Region."""
    UPLINK_1_G = 'UPLINK_1G'
    UPLINK_10_G = 'UPLINK_10G'
    UPLINK_40_G = 'UPLINK_40G'
    UPLINK_100_G = 'UPLINK_100G'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateSiteRackPhysicalPropertiesRequestBody:
    
    fiber_optic_cable_type: Optional[UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FiberOpticCableType'), 'exclude': lambda f: f is None }})
    r"""The type of fiber that you will use to attach the Outpost to your network."""  
    maximum_supported_weight_lbs: Optional[UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumSupportedWeightLbs'), 'exclude': lambda f: f is None }})
    r"""The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000lbs."""  
    optical_standard: Optional[UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpticalStandard'), 'exclude': lambda f: f is None }})
    r"""<p>The type of optical standard that you will use to attach the Outpost to your network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href=\\"https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking\\">Network</a> in the Amazon Web Services Outposts User Guide. </p> <ul> <li> <p> <code>OPTIC_10GBASE_SR</code>: 10GBASE-SR</p> </li> <li> <p> <code>OPTIC_10GBASE_IR</code>: 10GBASE-IR</p> </li> <li> <p> <code>OPTIC_10GBASE_LR</code>: 10GBASE-LR</p> </li> <li> <p> <code>OPTIC_40GBASE_SR</code>: 40GBASE-SR</p> </li> <li> <p> <code>OPTIC_40GBASE_ESR</code>: 40GBASE-ESR</p> </li> <li> <p> <code>OPTIC_40GBASE_IR4_LR4L</code>: 40GBASE-IR (LR4L)</p> </li> <li> <p> <code>OPTIC_40GBASE_LR4</code>: 40GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100GBASE_SR4</code>: 100GBASE-SR4</p> </li> <li> <p> <code>OPTIC_100GBASE_CWDM4</code>: 100GBASE-CWDM4</p> </li> <li> <p> <code>OPTIC_100GBASE_LR4</code>: 100GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100G_PSM4_MSA</code>: 100G PSM4 MSA</p> </li> <li> <p> <code>OPTIC_1000BASE_LX</code>: 1000Base-LX</p> </li> <li> <p> <code>OPTIC_1000BASE_SX</code> : 1000Base-SX</p> </li> </ul>"""  
    power_connector: Optional[UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerConnector'), 'exclude': lambda f: f is None }})
    r"""<p>The power connector that Amazon Web Services should plan to provide for connections to the hardware. Note the correlation between <code>PowerPhase</code> and <code>PowerConnector</code>. </p> <ul> <li> <p>Single-phase AC feed</p> <ul> <li> <p> <b>L6-30P</b> – (common in US); 30A; single phase</p> </li> <li> <p> <b>IEC309 (blue)</b> – P+N+E, 6hr; 32 A; single phase</p> </li> </ul> </li> <li> <p>Three-phase AC feed</p> <ul> <li> <p> <b>AH530P7W (red)</b> – 3P+N+E, 7hr; 30A; three phase</p> </li> <li> <p> <b>AH532P6W (red)</b> – 3P+N+E, 6hr; 32A; three phase</p> </li> </ul> </li> </ul>"""  
    power_draw_kva: Optional[UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerDrawKva'), 'exclude': lambda f: f is None }})
    r"""The power draw, in kVA, available at the hardware placement position for the rack."""  
    power_feed_drop: Optional[UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerFeedDrop'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the power feed comes above or below the rack."""  
    power_phase: Optional[UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerPhase'), 'exclude': lambda f: f is None }})
    r"""<p>The power option that you can provide for hardware. </p> <ul> <li> <p>Single-phase AC feed: 200 V to 277 V, 50 Hz or 60 Hz</p> </li> <li> <p>Three-phase AC feed: 346 V to 480 V, 50 Hz or 60 Hz</p> </li> </ul>"""  
    uplink_count: Optional[UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UplinkCount'), 'exclude': lambda f: f is None }})
    r"""<p>Racks come with two Outpost network devices. Depending on the supported uplink speed at the site, the Outpost network devices provide a variable number of uplinks. Specify the number of uplinks for each Outpost network device that you intend to use to connect the rack to your network. Note the correlation between <code>UplinkGbps</code> and <code>UplinkCount</code>. </p> <ul> <li> <p>1Gbps - Uplinks available: 1, 2, 4, 6, 8</p> </li> <li> <p>10Gbps - Uplinks available: 1, 2, 4, 8, 12, 16</p> </li> <li> <p>40 and 100 Gbps- Uplinks available: 1, 2, 4</p> </li> </ul>"""  
    uplink_gbps: Optional[UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UplinkGbps'), 'exclude': lambda f: f is None }})
    r"""The uplink speed the rack should support for the connection to the Region."""  
    

@dataclasses.dataclass
class UpdateSiteRackPhysicalPropertiesRequest:
    
    request_body: UpdateSiteRackPhysicalPropertiesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    site_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'SiteId', 'style': 'simple', 'explode': False }})
    r"""The ID or the Amazon Resource Name (ARN) of the site."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateSiteRackPhysicalPropertiesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_site_rack_physical_properties_output: Optional[shared_updatesiterackphysicalpropertiesoutput.UpdateSiteRackPhysicalPropertiesOutput] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    