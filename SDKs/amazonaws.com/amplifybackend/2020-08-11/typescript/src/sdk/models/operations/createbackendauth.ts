/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Defines whether you want to configure only authentication or both authentication and authorization settings.
 */
export enum CreateBackendAuthRequestBodyResourceConfigAuthResourcesEnum {
  UserPoolOnly = "USER_POOL_ONLY",
  IdentityPoolAndUserPool = "IDENTITY_POOL_AND_USER_POOL",
}

/**
 * Describes the authorization configuration for the Amazon Cognito identity pool, provisioned as a part of your auth resource in the Amplify project.
 */
export class CreateBackendAuthRequestBodyResourceConfigIdentityPoolConfigs extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "IdentityPoolName" })
  identityPoolName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "UnauthenticatedLogin" })
  unauthenticatedLogin: boolean;
}

/**
 * Defines the service name to use when configuring an authentication resource in your Amplify project.
 */
export enum CreateBackendAuthRequestBodyResourceConfigServiceEnum {
  Cognito = "COGNITO",
}

/**
 * <b>(DEPRECATED)</b> Describes which mode to use (either SMS or email) to deliver messages to app users who want to recover their password.
 */
export enum CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordDeliveryMethodEnum {
  Email = "EMAIL",
  Sms = "SMS",
}

/**
 * <b>(DEPRECATED)</b> The configuration for the email sent when an app user forgets their password.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordEmailSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "EmailMessage" })
  emailMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "EmailSubject" })
  emailSubject?: string;
}

/**
 * <b>(DEPRECATED)</b> The configuration for the SMS message sent when an app user forgets their password.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordSmsSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "SmsMessage" })
  smsMessage?: string;
}

/**
 * <b>(DEPRECATED)</b> Describes the forgotten password policy for your Amazon Cognito user pool, configured as a part of your Amplify project.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPassword extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DeliveryMethod" })
  deliveryMethod: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordDeliveryMethodEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "EmailSettings" })
  @Type(
    () =>
      CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordEmailSettings
  )
  emailSettings?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordEmailSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "SmsSettings" })
  @Type(
    () =>
      CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordSmsSettings
  )
  smsSettings?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordSmsSettings;
}

/**
 * Describes the configuration settings and methods for your Amplify app users to use MFA.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfaSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "MfaTypes" })
  mfaTypes?: shared.MfaTypesElementEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "SmsMessage" })
  smsMessage?: string;
}

/**
 * Describes whether to apply multi-factor authentication policies for your Amazon Cognito user pool configured as a part of your Amplify project.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfa extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "MFAMode" })
  mfaMode: shared.MFAModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Settings" })
  @Type(
    () => CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfaSettings
  )
  settings?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfaSettings;
}

/**
 * The OAuth grant type that you use to allow app users to authenticate from your Amplify app.
 */
export enum CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthOAuthGrantTypeEnum {
  Code = "CODE",
  Implicit = "IMPLICIT",
}

/**
 * The settings for using social providers to access your Amplify app.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthSocialProviderSettings extends SpeakeasyBase {
  /**
   * Describes third-party social federation configurations for allowing your app users to sign in using OAuth.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Facebook" })
  @Type(() => shared.BackendAuthSocialProviderConfig)
  facebook?: shared.BackendAuthSocialProviderConfig;

  /**
   * Describes third-party social federation configurations for allowing your app users to sign in using OAuth.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Google" })
  @Type(() => shared.BackendAuthSocialProviderConfig)
  google?: shared.BackendAuthSocialProviderConfig;

  /**
   * Describes third-party social federation configurations for allowing your app users to sign in using OAuth.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LoginWithAmazon" })
  @Type(() => shared.BackendAuthSocialProviderConfig)
  loginWithAmazon?: shared.BackendAuthSocialProviderConfig;

  /**
   * Describes Apple social federation configurations for allowing your app users to sign in using OAuth.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SignInWithApple" })
  @Type(() => shared.BackendAuthAppleProviderConfig)
  signInWithApple?: shared.BackendAuthAppleProviderConfig;
}

/**
 * Describes the OAuth policy and rules for your Amazon Cognito user pool, configured as a part of your Amplify project.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuth extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DomainPrefix" })
  domainPrefix?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "OAuthGrantType" })
  oAuthGrantType: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthOAuthGrantTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "OAuthScopes" })
  oAuthScopes: shared.OAuthScopesElementEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "RedirectSignInURIs" })
  redirectSignInURIs: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "RedirectSignOutURIs" })
  redirectSignOutURIs: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "SocialProviderSettings" })
  @Type(
    () =>
      CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthSocialProviderSettings
  )
  socialProviderSettings?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthSocialProviderSettings;
}

/**
 * Describes the password policy for your Amazon Cognito user pool, configured as a part of your Amplify project.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsPasswordPolicy extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AdditionalConstraints" })
  additionalConstraints?: shared.AdditionalConstraintsElementEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "MinimumLength" })
  minimumLength: number;
}

/**
 * Describes the sign-in methods that your Amplify app users use to log in using the Amazon Cognito user pool, configured as a part of your Amplify project.
 */
export enum CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsSignInMethodEnum {
  Email = "EMAIL",
  EmailAndPhoneNumber = "EMAIL_AND_PHONE_NUMBER",
  PhoneNumber = "PHONE_NUMBER",
  Username = "USERNAME",
}

/**
 * The type of verification message to send.
 */
export enum CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageDeliveryMethodEnum {
  Email = "EMAIL",
  Sms = "SMS",
}

/**
 * The settings for the email message.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageEmailSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "EmailMessage" })
  emailMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "EmailSubject" })
  emailSubject?: string;
}

/**
 * The settings for the SMS message.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageSmsSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "SmsMessage" })
  smsMessage?: string;
}

/**
 * Describes the email or SMS verification message for your Amazon Cognito user pool, configured as a part of your Amplify project.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DeliveryMethod" })
  deliveryMethod: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageDeliveryMethodEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "EmailSettings" })
  @Type(
    () =>
      CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageEmailSettings
  )
  emailSettings?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageEmailSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "SmsSettings" })
  @Type(
    () =>
      CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageSmsSettings
  )
  smsSettings?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageSmsSettings;
}

/**
 * Describes authentication configuration for the Amazon Cognito user pool, provisioned as a part of your auth resource in the Amplify project.
 */
export class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigs extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ForgotPassword" })
  @Type(
    () =>
      CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPassword
  )
  forgotPassword?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPassword;

  @SpeakeasyMetadata()
  @Expose({ name: "Mfa" })
  @Type(() => CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfa)
  mfa?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfa;

  @SpeakeasyMetadata()
  @Expose({ name: "OAuth" })
  @Type(() => CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuth)
  oAuth?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuth;

  @SpeakeasyMetadata()
  @Expose({ name: "PasswordPolicy" })
  @Type(
    () =>
      CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsPasswordPolicy
  )
  passwordPolicy?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsPasswordPolicy;

  @SpeakeasyMetadata()
  @Expose({ name: "RequiredSignUpAttributes" })
  requiredSignUpAttributes: shared.RequiredSignUpAttributesElementEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "SignInMethod" })
  signInMethod: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsSignInMethodEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "UserPoolName" })
  userPoolName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "VerificationMessage" })
  @Type(
    () =>
      CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessage
  )
  verificationMessage?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessage;
}

/**
 * Defines the resource configuration when creating an auth resource in your Amplify project.
 */
export class CreateBackendAuthRequestBodyResourceConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AuthResources" })
  authResources?: CreateBackendAuthRequestBodyResourceConfigAuthResourcesEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "IdentityPoolConfigs" })
  @Type(() => CreateBackendAuthRequestBodyResourceConfigIdentityPoolConfigs)
  identityPoolConfigs?: CreateBackendAuthRequestBodyResourceConfigIdentityPoolConfigs;

  @SpeakeasyMetadata()
  @Expose({ name: "Service" })
  service?: CreateBackendAuthRequestBodyResourceConfigServiceEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "UserPoolConfigs" })
  @Type(() => CreateBackendAuthRequestBodyResourceConfigUserPoolConfigs)
  userPoolConfigs?: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigs;
}

export class CreateBackendAuthRequestBody extends SpeakeasyBase {
  /**
   * The name of the backend environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backendEnvironmentName" })
  backendEnvironmentName: string;

  /**
   * Defines the resource configuration when creating an auth resource in your Amplify project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceConfig" })
  @Type(() => CreateBackendAuthRequestBodyResourceConfig)
  resourceConfig: CreateBackendAuthRequestBodyResourceConfig;

  /**
   * The name of this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceName" })
  resourceName: string;
}

export class CreateBackendAuthRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateBackendAuthRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The app ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=appId",
  })
  appId: string;
}

export class CreateBackendAuthResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createBackendAuthResponse?: shared.CreateBackendAuthResponse;

  /**
   * GatewayTimeoutException
   */
  @SpeakeasyMetadata()
  gatewayTimeoutException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
