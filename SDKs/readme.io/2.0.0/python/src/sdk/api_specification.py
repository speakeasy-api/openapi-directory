"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class APISpecification:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_api_specification(self, request: operations.DeleteAPISpecificationRequest, security: operations.DeleteAPISpecificationSecurity) -> operations.DeleteAPISpecificationResponse:
        r"""Delete an API specification in ReadMe"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPISpecificationRequest, base_url, '/api-specification/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPISpecificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_api_specification(self, request: operations.GetAPISpecificationRequest, security: operations.GetAPISpecificationSecurity) -> operations.GetAPISpecificationResponse:
        r"""Get API specification metadata"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api-specification'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetAPISpecificationRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPISpecificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            

        return res

    def update_api_specification(self, request: operations.UpdateAPISpecificationRequest, security: operations.UpdateAPISpecificationSecurity) -> operations.UpdateAPISpecificationResponse:
        r"""Update an API specification in ReadMe"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateAPISpecificationRequest, base_url, '/api-specification/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAPISpecificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def upload_api_specification(self, request: operations.UploadAPISpecificationRequest, security: operations.UploadAPISpecificationSecurity) -> operations.UploadAPISpecificationResponse:
        r"""Upload an API specification to ReadMe. Or, to use a newer solution see https://docs.readme.com/guides/docs/automatically-sync-api-specification-with-github"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api-specification'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadAPISpecificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    