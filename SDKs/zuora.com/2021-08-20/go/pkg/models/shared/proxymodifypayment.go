// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// ProxyModifyPaymentStatusEnum - The status of the payment in Zuora. The value depends on the type of payments.
//
// - If you have the Invoice Settlement feature disabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.
// - If you have the Invoice Settlement feature enabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Canceled`. For external payments, the status can be `Processed` or `Canceled`.
type ProxyModifyPaymentStatusEnum string

const (
	ProxyModifyPaymentStatusEnumProcessed ProxyModifyPaymentStatusEnum = "Processed"
	ProxyModifyPaymentStatusEnumError     ProxyModifyPaymentStatusEnum = "Error"
	ProxyModifyPaymentStatusEnumVoided    ProxyModifyPaymentStatusEnum = "Voided"
	ProxyModifyPaymentStatusEnumCanceled  ProxyModifyPaymentStatusEnum = "Canceled"
)

func (e *ProxyModifyPaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processed":
		fallthrough
	case "Error":
		fallthrough
	case "Voided":
		fallthrough
	case "Canceled":
		*e = ProxyModifyPaymentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyModifyPaymentStatusEnum: %s", s)
	}
}

// ProxyModifyPaymentTransferredToAccountingEnum - Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
type ProxyModifyPaymentTransferredToAccountingEnum string

const (
	ProxyModifyPaymentTransferredToAccountingEnumProcessing ProxyModifyPaymentTransferredToAccountingEnum = "Processing"
	ProxyModifyPaymentTransferredToAccountingEnumYes        ProxyModifyPaymentTransferredToAccountingEnum = "Yes"
	ProxyModifyPaymentTransferredToAccountingEnumError      ProxyModifyPaymentTransferredToAccountingEnum = "Error"
	ProxyModifyPaymentTransferredToAccountingEnumIgnore     ProxyModifyPaymentTransferredToAccountingEnum = "Ignore"
)

func (e *ProxyModifyPaymentTransferredToAccountingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processing":
		fallthrough
	case "Yes":
		fallthrough
	case "Error":
		fallthrough
	case "Ignore":
		*e = ProxyModifyPaymentTransferredToAccountingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyModifyPaymentTransferredToAccountingEnum: %s", s)
	}
}

// ProxyModifyPaymentTypeEnum - The type of the payment, whether the payment is external or electronic.
type ProxyModifyPaymentTypeEnum string

const (
	ProxyModifyPaymentTypeEnumExternal   ProxyModifyPaymentTypeEnum = "External"
	ProxyModifyPaymentTypeEnumElectronic ProxyModifyPaymentTypeEnum = "Electronic"
)

func (e *ProxyModifyPaymentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "External":
		fallthrough
	case "Electronic":
		*e = ProxyModifyPaymentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyModifyPaymentTypeEnum: %s", s)
	}
}

// ProxyModifyPayment - Container for custom fields of a Payment object.
type ProxyModifyPayment struct {
	// The unique account ID for the customer that the payment is for.
	//
	AccountID *string `json:"AccountId,omitempty"`
	// The accounting code for the payment. Accounting codes group transactions that contain similar accounting attributes.
	//
	AccountingCode *string `json:"AccountingCode,omitempty"`
	// The amount of the payment.
	//
	Amount *float64 `json:"Amount,omitempty"`
	// The date when the payment takes effect.
	//
	EffectiveDate *types.Date `json:"EffectiveDate,omitempty"`
	// ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	IntegrationIDNS *string `json:"IntegrationId__NS,omitempty"`
	// Status of the payment's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	IntegrationStatusNS *string `json:"IntegrationStatus__NS,omitempty"`
	// Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	OriginNS *string `json:"Origin__NS,omitempty"`
	// The ID of the payment method used for the payment.
	//
	PaymentMethodID *string `json:"PaymentMethodId,omitempty"`
	// The transaction ID returned by the payment gateway. Use this field to reconcile payments between your gateway and Zuora Payments.
	//
	ReferenceID *string `json:"ReferenceId,omitempty"`
	// The status of the payment in Zuora. The value depends on the type of payments.
	//
	// - If you have the Invoice Settlement feature disabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Voided`. For external payments, the status can be `Processed` or `Canceled`.
	// - If you have the Invoice Settlement feature enabled, for electronic payments, the status can be `Processed`, `Processing`, `Error`, or `Canceled`. For external payments, the status can be `Processed` or `Canceled`.
	//
	Status *ProxyModifyPaymentStatusEnum `json:"Status,omitempty"`
	// Date when the payment was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	SyncDateNS *string `json:"SyncDate__NS,omitempty"`
	// Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	TransactionNS *string `json:"Transaction__NS,omitempty"`
	// Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
	//
	TransferredToAccounting *ProxyModifyPaymentTransferredToAccountingEnum `json:"TransferredToAccounting,omitempty"`
	// The type of the payment, whether the payment is external or electronic.
	//
	Type *ProxyModifyPaymentTypeEnum `json:"Type,omitempty"`
}
