"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listoforders as shared_listoforders
from enum import Enum
from typing import Optional

class GetOrdersOrderStatusEnum(str, Enum):
    r"""Filter by status"""
    ACTIVE = 'Active'
    CANCELLED = 'Cancelled'
    COMPLETED = 'Completed'


@dataclasses.dataclass
class GetOrdersRequest:
    
    limit: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The maximum number of items to return. If the value exceeds the maximum, then the maximum value will be used."""  
    offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The number of items to skip before starting to collect the result set."""  
    order_status: Optional[GetOrdersOrderStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orderStatus', 'style': 'form', 'explode': True }})
    r"""Filter by status"""  
    

@dataclasses.dataclass
class GetOrdersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_of_orders: Optional[shared_listoforders.ListOfOrders] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    