"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillbeeInterfacesBillbeeAPIModelUpdateStockAPIModel:
    
    autosubtract_reserved_amount: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutosubtractReservedAmount'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'AutosubtractReservedAmount' }})
    r"""Automatically reduce the NewQuantity by the currently not fulfilled amount"""  
    billbee_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BillbeeId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'BillbeeId' }})
    r"""Optional the ID of the Billbee product to update"""  
    delta_quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeltaQuantity'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'DeltaQuantity' }})
    r"""This parameter is currently ignored"""  
    force_send_stock_to_shops: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForceSendStockToShops'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ForceSendStockToShops' }})
    r"""If true, every sent stockchange is stored and transmitted to the connected shop, even if the value has not changed"""  
    new_quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NewQuantity'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'NewQuantity' }})
    r"""The new absolute stock quantity for the product you want to set"""  
    old_quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OldQuantity'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'OldQuantity' }})
    r"""This parameter is currently ignored"""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reason'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Reason' }})
    r"""Optional a reason text for the stock update"""  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sku'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Sku' }})
    r"""The SKU of the product to update"""  
    stock_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StockId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'StockId' }})
    r"""Optional the stock id if the feature multi stock is activated"""  
    