/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PatchBundlesIdRequestBody {
    /**
     * ID of the clickwrap to use with this bundle.
     */
    @SpeakeasyMetadata("multipartForm:name=clickwrap_id")
    public Integer clickwrapId;

    public PatchBundlesIdRequestBody withClickwrapId(Integer clickwrapId) {
        this.clickwrapId = clickwrapId;
        return this;
    }
    
    /**
     * Bundle code.  This code forms the end part of the Public URL.
     */
    @SpeakeasyMetadata("multipartForm:name=code")
    public String code;

    public PatchBundlesIdRequestBody withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Public description
     */
    @SpeakeasyMetadata("multipartForm:name=description")
    public String description;

    public PatchBundlesIdRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.
     */
    @SpeakeasyMetadata("multipartForm:name=dont_separate_submissions_by_folder")
    public Boolean dontSeparateSubmissionsByFolder;

    public PatchBundlesIdRequestBody withDontSeparateSubmissionsByFolder(Boolean dontSeparateSubmissionsByFolder) {
        this.dontSeparateSubmissionsByFolder = dontSeparateSubmissionsByFolder;
        return this;
    }
    
    /**
     * Bundle expiration date/time
     */
    @SpeakeasyMetadata("multipartForm:name=expires_at")
    public OffsetDateTime expiresAt;

    public PatchBundlesIdRequestBody withExpiresAt(OffsetDateTime expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    /**
     * Id of Form Field Set to use with this bundle
     */
    @SpeakeasyMetadata("multipartForm:name=form_field_set_id")
    public Integer formFieldSetId;

    public PatchBundlesIdRequestBody withFormFieldSetId(Integer formFieldSetId) {
        this.formFieldSetId = formFieldSetId;
        return this;
    }
    
    /**
     * ID of the associated inbox, if available.
     */
    @SpeakeasyMetadata("multipartForm:name=inbox_id")
    public Integer inboxId;

    public PatchBundlesIdRequestBody withInboxId(Integer inboxId) {
        this.inboxId = inboxId;
        return this;
    }
    
    /**
     * Maximum number of times bundle can be accessed
     */
    @SpeakeasyMetadata("multipartForm:name=max_uses")
    public Integer maxUses;

    public PatchBundlesIdRequestBody withMaxUses(Integer maxUses) {
        this.maxUses = maxUses;
        return this;
    }
    
    /**
     * Bundle internal note
     */
    @SpeakeasyMetadata("multipartForm:name=note")
    public String note;

    public PatchBundlesIdRequestBody withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * Password for this bundle.
     */
    @SpeakeasyMetadata("multipartForm:name=password")
    public String password;

    public PatchBundlesIdRequestBody withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data.
     */
    @SpeakeasyMetadata("multipartForm:name=path_template")
    public String pathTemplate;

    public PatchBundlesIdRequestBody withPathTemplate(String pathTemplate) {
        this.pathTemplate = pathTemplate;
        return this;
    }
    
    /**
     * A list of paths to include in this bundle.
     */
    @SpeakeasyMetadata("multipartForm:name=paths")
    public String[] paths;

    public PatchBundlesIdRequestBody withPaths(String[] paths) {
        this.paths = paths;
        return this;
    }
    
    /**
     * Permissions that apply to Folders in this Share Link.
     */
    @SpeakeasyMetadata("multipartForm:name=permissions")
    public PatchBundlesIdRequestBodyPermissionsEnum permissions;

    public PatchBundlesIdRequestBody withPermissions(PatchBundlesIdRequestBodyPermissionsEnum permissions) {
        this.permissions = permissions;
        return this;
    }
    
    /**
     * Restrict users to previewing files only?
     */
    @SpeakeasyMetadata("multipartForm:name=preview_only")
    public Boolean previewOnly;

    public PatchBundlesIdRequestBody withPreviewOnly(Boolean previewOnly) {
        this.previewOnly = previewOnly;
        return this;
    }
    
    /**
     * Show a registration page that captures the downloader's name and email address?
     */
    @SpeakeasyMetadata("multipartForm:name=require_registration")
    public Boolean requireRegistration;

    public PatchBundlesIdRequestBody withRequireRegistration(Boolean requireRegistration) {
        this.requireRegistration = requireRegistration;
        return this;
    }
    
    /**
     * Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?
     */
    @SpeakeasyMetadata("multipartForm:name=require_share_recipient")
    public Boolean requireShareRecipient;

    public PatchBundlesIdRequestBody withRequireShareRecipient(Boolean requireShareRecipient) {
        this.requireShareRecipient = requireShareRecipient;
        return this;
    }
    
    /**
     * Send delivery receipt to the uploader. Note: For writable share only
     */
    @SpeakeasyMetadata("multipartForm:name=send_email_receipt_to_uploader")
    public Boolean sendEmailReceiptToUploader;

    public PatchBundlesIdRequestBody withSendEmailReceiptToUploader(Boolean sendEmailReceiptToUploader) {
        this.sendEmailReceiptToUploader = sendEmailReceiptToUploader;
        return this;
    }
    
    /**
     * BundleRegistrations can be saved without providing company?
     */
    @SpeakeasyMetadata("multipartForm:name=skip_company")
    public Boolean skipCompany;

    public PatchBundlesIdRequestBody withSkipCompany(Boolean skipCompany) {
        this.skipCompany = skipCompany;
        return this;
    }
    
    /**
     * BundleRegistrations can be saved without providing email?
     */
    @SpeakeasyMetadata("multipartForm:name=skip_email")
    public Boolean skipEmail;

    public PatchBundlesIdRequestBody withSkipEmail(Boolean skipEmail) {
        this.skipEmail = skipEmail;
        return this;
    }
    
    /**
     * BundleRegistrations can be saved without providing name?
     */
    @SpeakeasyMetadata("multipartForm:name=skip_name")
    public Boolean skipName;

    public PatchBundlesIdRequestBody withSkipName(Boolean skipName) {
        this.skipName = skipName;
        return this;
    }
    
    /**
     * If true, will delete the file stored in watermark_attachment
     */
    @SpeakeasyMetadata("multipartForm:name=watermark_attachment_delete")
    public Boolean watermarkAttachmentDelete;

    public PatchBundlesIdRequestBody withWatermarkAttachmentDelete(Boolean watermarkAttachmentDelete) {
        this.watermarkAttachmentDelete = watermarkAttachmentDelete;
        return this;
    }
    
    /**
     * Preview watermark image applied to all bundle items.
     */
    @SpeakeasyMetadata("multipartForm:file")
    public PatchBundlesIdRequestBodyWatermarkAttachmentFile watermarkAttachmentFile;

    public PatchBundlesIdRequestBody withWatermarkAttachmentFile(PatchBundlesIdRequestBodyWatermarkAttachmentFile watermarkAttachmentFile) {
        this.watermarkAttachmentFile = watermarkAttachmentFile;
        return this;
    }
    
    public PatchBundlesIdRequestBody(){}
}
