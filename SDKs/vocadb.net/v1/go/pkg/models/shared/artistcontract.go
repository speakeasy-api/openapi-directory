// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type ArtistContractArtistTypeEnum string

const (
	ArtistContractArtistTypeEnumUnknown               ArtistContractArtistTypeEnum = "Unknown"
	ArtistContractArtistTypeEnumCircle                ArtistContractArtistTypeEnum = "Circle"
	ArtistContractArtistTypeEnumLabel                 ArtistContractArtistTypeEnum = "Label"
	ArtistContractArtistTypeEnumProducer              ArtistContractArtistTypeEnum = "Producer"
	ArtistContractArtistTypeEnumAnimator              ArtistContractArtistTypeEnum = "Animator"
	ArtistContractArtistTypeEnumIllustrator           ArtistContractArtistTypeEnum = "Illustrator"
	ArtistContractArtistTypeEnumLyricist              ArtistContractArtistTypeEnum = "Lyricist"
	ArtistContractArtistTypeEnumVocaloid              ArtistContractArtistTypeEnum = "Vocaloid"
	ArtistContractArtistTypeEnumUtau                  ArtistContractArtistTypeEnum = "UTAU"
	ArtistContractArtistTypeEnumCeVio                 ArtistContractArtistTypeEnum = "CeVIO"
	ArtistContractArtistTypeEnumOtherVoiceSynthesizer ArtistContractArtistTypeEnum = "OtherVoiceSynthesizer"
	ArtistContractArtistTypeEnumOtherVocalist         ArtistContractArtistTypeEnum = "OtherVocalist"
	ArtistContractArtistTypeEnumOtherGroup            ArtistContractArtistTypeEnum = "OtherGroup"
	ArtistContractArtistTypeEnumOtherIndividual       ArtistContractArtistTypeEnum = "OtherIndividual"
	ArtistContractArtistTypeEnumUtaite                ArtistContractArtistTypeEnum = "Utaite"
	ArtistContractArtistTypeEnumBand                  ArtistContractArtistTypeEnum = "Band"
	ArtistContractArtistTypeEnumVocalist              ArtistContractArtistTypeEnum = "Vocalist"
	ArtistContractArtistTypeEnumCharacter             ArtistContractArtistTypeEnum = "Character"
	ArtistContractArtistTypeEnumSynthesizerV          ArtistContractArtistTypeEnum = "SynthesizerV"
)

func (e *ArtistContractArtistTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Circle":
		fallthrough
	case "Label":
		fallthrough
	case "Producer":
		fallthrough
	case "Animator":
		fallthrough
	case "Illustrator":
		fallthrough
	case "Lyricist":
		fallthrough
	case "Vocaloid":
		fallthrough
	case "UTAU":
		fallthrough
	case "CeVIO":
		fallthrough
	case "OtherVoiceSynthesizer":
		fallthrough
	case "OtherVocalist":
		fallthrough
	case "OtherGroup":
		fallthrough
	case "OtherIndividual":
		fallthrough
	case "Utaite":
		fallthrough
	case "Band":
		fallthrough
	case "Vocalist":
		fallthrough
	case "Character":
		fallthrough
	case "SynthesizerV":
		*e = ArtistContractArtistTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ArtistContractArtistTypeEnum: %s", s)
	}
}

type ArtistContractStatusEnum string

const (
	ArtistContractStatusEnumDraft    ArtistContractStatusEnum = "Draft"
	ArtistContractStatusEnumFinished ArtistContractStatusEnum = "Finished"
	ArtistContractStatusEnumApproved ArtistContractStatusEnum = "Approved"
	ArtistContractStatusEnumLocked   ArtistContractStatusEnum = "Locked"
)

func (e *ArtistContractStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Draft":
		fallthrough
	case "Finished":
		fallthrough
	case "Approved":
		fallthrough
	case "Locked":
		*e = ArtistContractStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ArtistContractStatusEnum: %s", s)
	}
}

type ArtistContract struct {
	AdditionalNames *string                       `json:"additionalNames,omitempty"`
	ArtistType      *ArtistContractArtistTypeEnum `json:"artistType,omitempty"`
	Deleted         *bool                         `json:"deleted,omitempty"`
	ID              *int                          `json:"id,omitempty"`
	Name            *string                       `json:"name,omitempty"`
	PictureMime     *string                       `json:"pictureMime,omitempty"`
	ReleaseDate     *time.Time                    `json:"releaseDate,omitempty"`
	Status          *ArtistContractStatusEnum     `json:"status,omitempty"`
	Version         *int                          `json:"version,omitempty"`
}
