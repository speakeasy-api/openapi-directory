"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import sqlserveruserdetails as shared_sqlserveruserdetails
from ..shared import userpasswordvalidationpolicy as shared_userpasswordvalidationpolicy
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UserDualPasswordTypeEnum(str, Enum):
    r"""Dual password status for the user."""
    DUAL_PASSWORD_TYPE_UNSPECIFIED = 'DUAL_PASSWORD_TYPE_UNSPECIFIED'
    NO_MODIFY_DUAL_PASSWORD = 'NO_MODIFY_DUAL_PASSWORD'
    NO_DUAL_PASSWORD = 'NO_DUAL_PASSWORD'
    DUAL_PASSWORD = 'DUAL_PASSWORD'

class UserTypeEnum(str, Enum):
    r"""The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type."""
    BUILT_IN = 'BUILT_IN'
    CLOUD_IAM_USER = 'CLOUD_IAM_USER'
    CLOUD_IAM_SERVICE_ACCOUNT = 'CLOUD_IAM_SERVICE_ACCOUNT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class User:
    r"""A Cloud SQL user resource."""
    
    dual_password_type: Optional[UserDualPasswordTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dualPasswordType'), 'exclude': lambda f: f is None }})
    r"""Dual password status for the user."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""This field is deprecated and will be removed from a future version of the API."""  
    host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})
    r"""Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional."""  
    instance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instance'), 'exclude': lambda f: f is None }})
    r"""The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for `update` because it is already specified on the URL."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always `sql#user`."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The password for the user."""  
    password_policy: Optional[shared_userpasswordvalidationpolicy.UserPasswordValidationPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordPolicy'), 'exclude': lambda f: f is None }})
    r"""User level password validation policy."""  
    project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project'), 'exclude': lambda f: f is None }})
    r"""The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for `update` because it is already specified on the URL."""  
    sqlserver_user_details: Optional[shared_sqlserveruserdetails.SQLServerUserDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sqlserverUserDetails'), 'exclude': lambda f: f is None }})
    r"""Represents a Sql Server user on the Cloud SQL instance."""  
    type: Optional[UserTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type."""  
    