// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// EntryAPIGetNamesNameMatchModeEnum - Name match mode.
type EntryAPIGetNamesNameMatchModeEnum string

const (
	EntryAPIGetNamesNameMatchModeEnumAuto       EntryAPIGetNamesNameMatchModeEnum = "Auto"
	EntryAPIGetNamesNameMatchModeEnumPartial    EntryAPIGetNamesNameMatchModeEnum = "Partial"
	EntryAPIGetNamesNameMatchModeEnumStartsWith EntryAPIGetNamesNameMatchModeEnum = "StartsWith"
	EntryAPIGetNamesNameMatchModeEnumExact      EntryAPIGetNamesNameMatchModeEnum = "Exact"
	EntryAPIGetNamesNameMatchModeEnumWords      EntryAPIGetNamesNameMatchModeEnum = "Words"
)

func (e *EntryAPIGetNamesNameMatchModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Auto":
		fallthrough
	case "Partial":
		fallthrough
	case "StartsWith":
		fallthrough
	case "Exact":
		fallthrough
	case "Words":
		*e = EntryAPIGetNamesNameMatchModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EntryAPIGetNamesNameMatchModeEnum: %s", s)
	}
}

type EntryAPIGetNamesQueryParams struct {
	// Maximum number of results.
	MaxResults *int `queryParam:"style=form,explode=true,name=maxResults"`
	// Name match mode.
	NameMatchMode *EntryAPIGetNamesNameMatchModeEnum `queryParam:"style=form,explode=true,name=nameMatchMode"`
	// Text query.
	Query *string `queryParam:"style=form,explode=true,name=query"`
}

type EntryAPIGetNamesRequest struct {
	QueryParams EntryAPIGetNamesQueryParams
}

type EntryAPIGetNamesResponse struct {
	Body        []byte
	ContentType string
	// OK
	EntryAPIGetNames200ApplicationJSONStrings []string
	// OK
	EntryAPIGetNames200ApplicationJsonpStrings []string
	// OK
	EntryAPIGetNames200TextJSONStrings []string
	StatusCode                         int
	RawResponse                        *http.Response
}
