"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import channelcatalogcategorymappingsettings as shared_channelcatalogcategorymappingsettings
from ..shared import channelcatalogcolumnmappingwithname as shared_channelcatalogcolumnmappingwithname
from ..shared import channelcataloglinks as shared_channelcataloglinks
from ..shared import channelcatalogstate as shared_channelcatalogstate
from ..shared import channelcategorysettings as shared_channelcategorysettings
from ..shared import channelcostsettings as shared_channelcostsettings
from ..shared import costsettings as shared_costsettings
from ..shared import exclusionfilter as shared_exclusionfilter
from ..shared import generalsettings as shared_generalsettings
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelCatalog:
    r"""The channel catalog"""
    
    channel_catalog_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCatalogId') }})
    r"""The channel catalog identifier"""  
    channel_category_settings: shared_channelcategorysettings.ChannelCategorySettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCategorySettings') }})  
    channel_cost_settings: shared_channelcostsettings.ChannelCostSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCostSettings') }})
    r"""Indicate the default configuration of the cost on this channel."""  
    channel_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelId') }})
    r"""The channel identifier"""  
    channel_image_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelImageUrl') }})
    r"""The URL <a href=\\"https://en.wikipedia.org/wiki/URL\\">https://en.wikipedia.org/wiki/URL</a>"""  
    channel_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelName') }})
    r"""The channel name"""  
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})
    r"""Indicates if the channel catalog is enable"""  
    general_settings: shared_generalsettings.GeneralSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generalSettings') }})
    r"""Represents the general settings of your channel catalog"""  
    is_marketplace: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isMarketplace') }})
    r"""Indicates if this channel catalog is related to a marketplace"""  
    links: shared_channelcataloglinks.ChannelCatalogLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})
    r"""Indicates the actions you can do on a channel catalog"""  
    state: shared_channelcatalogstate.ChannelCatalogState = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""Channel Catalog State"""  
    store_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeId') }})
    r"""The store identifier"""  
    types: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('types') }})
    r"""The channel type list related to the channel"""  
    category_mapping_settings: Optional[shared_channelcatalogcategorymappingsettings.ChannelCatalogCategoryMappingSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryMappingSettings'), 'exclude': lambda f: f is None }})  
    column_mappings: Optional[list[shared_channelcatalogcolumnmappingwithname.ChannelCatalogColumnMappingWithName]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnMappings'), 'exclude': lambda f: f is None }})
    r"""The column mapping list between a channel and a catalog"""  
    cost_settings: Optional[shared_costsettings.CostSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costSettings'), 'exclude': lambda f: f is None }})
    r"""If this property is not indicated please force the user to configure the cost settings.
    Defines the cost type you have on this channel with the cost value.
    """  
    exclusion_filters: Optional[list[shared_exclusionfilter.ExclusionFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclusionFilters'), 'exclude': lambda f: f is None }})
    r"""The exclusion filter list"""  
    export_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exportUrl'), 'exclude': lambda f: f is None }})
    r"""The URL <a href=\\"https://en.wikipedia.org/wiki/URL\\">https://en.wikipedia.org/wiki/URL</a>"""  
    