"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def apigateway_projects_locations_apis_configs_create(self, request: operations.ApigatewayProjectsLocationsApisConfigsCreateRequest, security: operations.ApigatewayProjectsLocationsApisConfigsCreateSecurity) -> operations.ApigatewayProjectsLocationsApisConfigsCreateResponse:
        r"""Creates a new ApiConfig in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsApisConfigsCreateRequest, base_url, '/v1beta/{parent}/configs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "apigateway_api_config_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsApisConfigsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsApisConfigsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayOperation])
                res.apigateway_operation = out

        return res

    def apigateway_projects_locations_apis_configs_list(self, request: operations.ApigatewayProjectsLocationsApisConfigsListRequest, security: operations.ApigatewayProjectsLocationsApisConfigsListSecurity) -> operations.ApigatewayProjectsLocationsApisConfigsListResponse:
        r"""Lists ApiConfigs in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsApisConfigsListRequest, base_url, '/v1beta/{parent}/configs', request)
        
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsApisConfigsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsApisConfigsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayListAPIConfigsResponse])
                res.apigateway_list_api_configs_response = out

        return res

    def apigateway_projects_locations_apis_create(self, request: operations.ApigatewayProjectsLocationsApisCreateRequest, security: operations.ApigatewayProjectsLocationsApisCreateSecurity) -> operations.ApigatewayProjectsLocationsApisCreateResponse:
        r"""Creates a new Api in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsApisCreateRequest, base_url, '/v1beta/{parent}/apis', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "apigateway_api_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsApisCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsApisCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayOperation])
                res.apigateway_operation = out

        return res

    def apigateway_projects_locations_apis_list(self, request: operations.ApigatewayProjectsLocationsApisListRequest, security: operations.ApigatewayProjectsLocationsApisListSecurity) -> operations.ApigatewayProjectsLocationsApisListResponse:
        r"""Lists Apis in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsApisListRequest, base_url, '/v1beta/{parent}/apis', request)
        
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsApisListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsApisListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayListApisResponse])
                res.apigateway_list_apis_response = out

        return res

    def apigateway_projects_locations_gateways_create(self, request: operations.ApigatewayProjectsLocationsGatewaysCreateRequest, security: operations.ApigatewayProjectsLocationsGatewaysCreateSecurity) -> operations.ApigatewayProjectsLocationsGatewaysCreateResponse:
        r"""Creates a new Gateway in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsGatewaysCreateRequest, base_url, '/v1beta/{parent}/gateways', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "apigateway_gateway_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsGatewaysCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsGatewaysCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayOperation])
                res.apigateway_operation = out

        return res

    def apigateway_projects_locations_gateways_get_iam_policy(self, request: operations.ApigatewayProjectsLocationsGatewaysGetIamPolicyRequest, security: operations.ApigatewayProjectsLocationsGatewaysGetIamPolicySecurity) -> operations.ApigatewayProjectsLocationsGatewaysGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsGatewaysGetIamPolicyRequest, base_url, '/v1beta/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsGatewaysGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsGatewaysGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayPolicy])
                res.apigateway_policy = out

        return res

    def apigateway_projects_locations_gateways_list(self, request: operations.ApigatewayProjectsLocationsGatewaysListRequest, security: operations.ApigatewayProjectsLocationsGatewaysListSecurity) -> operations.ApigatewayProjectsLocationsGatewaysListResponse:
        r"""Lists Gateways in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsGatewaysListRequest, base_url, '/v1beta/{parent}/gateways', request)
        
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsGatewaysListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsGatewaysListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayListGatewaysResponse])
                res.apigateway_list_gateways_response = out

        return res

    def apigateway_projects_locations_gateways_patch(self, request: operations.ApigatewayProjectsLocationsGatewaysPatchRequest, security: operations.ApigatewayProjectsLocationsGatewaysPatchSecurity) -> operations.ApigatewayProjectsLocationsGatewaysPatchResponse:
        r"""Updates the parameters of a single Gateway."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsGatewaysPatchRequest, base_url, '/v1beta/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "apigateway_gateway_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsGatewaysPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsGatewaysPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayOperation])
                res.apigateway_operation = out

        return res

    def apigateway_projects_locations_gateways_set_iam_policy(self, request: operations.ApigatewayProjectsLocationsGatewaysSetIamPolicyRequest, security: operations.ApigatewayProjectsLocationsGatewaysSetIamPolicySecurity) -> operations.ApigatewayProjectsLocationsGatewaysSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsGatewaysSetIamPolicyRequest, base_url, '/v1beta/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "apigateway_set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsGatewaysSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsGatewaysSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayPolicy])
                res.apigateway_policy = out

        return res

    def apigateway_projects_locations_gateways_test_iam_permissions(self, request: operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsRequest, security: operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsSecurity) -> operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsRequest, base_url, '/v1beta/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "apigateway_test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsGatewaysTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayTestIamPermissionsResponse])
                res.apigateway_test_iam_permissions_response = out

        return res

    def apigateway_projects_locations_list(self, request: operations.ApigatewayProjectsLocationsListRequest, security: operations.ApigatewayProjectsLocationsListSecurity) -> operations.ApigatewayProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsListRequest, base_url, '/v1beta/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayListLocationsResponse])
                res.apigateway_list_locations_response = out

        return res

    def apigateway_projects_locations_operations_cancel(self, request: operations.ApigatewayProjectsLocationsOperationsCancelRequest, security: operations.ApigatewayProjectsLocationsOperationsCancelSecurity) -> operations.ApigatewayProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsOperationsCancelRequest, base_url, '/v1beta/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def apigateway_projects_locations_operations_delete(self, request: operations.ApigatewayProjectsLocationsOperationsDeleteRequest, security: operations.ApigatewayProjectsLocationsOperationsDeleteSecurity) -> operations.ApigatewayProjectsLocationsOperationsDeleteResponse:
        r"""Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsOperationsDeleteRequest, base_url, '/v1beta/{name}', request)
        
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsOperationsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsOperationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def apigateway_projects_locations_operations_get(self, request: operations.ApigatewayProjectsLocationsOperationsGetRequest, security: operations.ApigatewayProjectsLocationsOperationsGetSecurity) -> operations.ApigatewayProjectsLocationsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsOperationsGetRequest, base_url, '/v1beta/{name}', request)
        
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayOperation])
                res.apigateway_operation = out

        return res

    def apigateway_projects_locations_operations_list(self, request: operations.ApigatewayProjectsLocationsOperationsListRequest, security: operations.ApigatewayProjectsLocationsOperationsListSecurity) -> operations.ApigatewayProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ApigatewayProjectsLocationsOperationsListRequest, base_url, '/v1beta/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.ApigatewayProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ApigatewayProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApigatewayListOperationsResponse])
                res.apigateway_list_operations_response = out

        return res

    