/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Device - The device resource.
 */
public class Device {
    /**
     * If a device is blocked, connections or requests from this device will fail. Can be used to temporarily prevent the device from connecting if, for example, the sensor is generating bad data and needs maintenance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocked")
    public Boolean blocked;

    public Device withBlocked(Boolean blocked) {
        this.blocked = blocked;
        return this;
    }
    
    /**
     * The device configuration. Eventually delivered to devices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("config")
    public DeviceConfig config;

    public Device withConfig(DeviceConfig config) {
        this.config = config;
        return this;
    }
    
    /**
     * The credentials used to authenticate this device. To allow credential rotation without interruption, multiple device credentials can be bound to this device. No more than 3 credentials can be bound to a single device at a time. When new credentials are added to a device, they are verified against the registry credentials. For details, see the description of the `DeviceRegistry.credentials` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentials")
    public DeviceCredential[] credentials;

    public Device withCredentials(DeviceCredential[] credentials) {
        this.credentials = credentials;
        return this;
    }
    
    /**
     * Gateway-related configuration and state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayConfig")
    public GatewayConfig gatewayConfig;

    public Device withGatewayConfig(GatewayConfig gatewayConfig) {
        this.gatewayConfig = gatewayConfig;
        return this;
    }
    
    /**
     * The user-defined device identifier. The device ID must be unique within a device registry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Device withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * [Output only] The last time a cloud-to-device config version acknowledgment was received from the device. This field is only for configurations sent through MQTT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastConfigAckTime")
    public String lastConfigAckTime;

    public Device withLastConfigAckTime(String lastConfigAckTime) {
        this.lastConfigAckTime = lastConfigAckTime;
        return this;
    }
    
    /**
     * [Output only] The last time a cloud-to-device config version was sent to the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastConfigSendTime")
    public String lastConfigSendTime;

    public Device withLastConfigSendTime(String lastConfigSendTime) {
        this.lastConfigSendTime = lastConfigSendTime;
        return this;
    }
    
    /**
     * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastErrorStatus")
    public Status lastErrorStatus;

    public Device withLastErrorStatus(Status lastErrorStatus) {
        this.lastErrorStatus = lastErrorStatus;
        return this;
    }
    
    /**
     * [Output only] The time the most recent error occurred, such as a failure to publish to Cloud Pub/Sub. This field is the timestamp of 'last_error_status'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastErrorTime")
    public String lastErrorTime;

    public Device withLastErrorTime(String lastErrorTime) {
        this.lastErrorTime = lastErrorTime;
        return this;
    }
    
    /**
     * [Output only] The last time a telemetry event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastEventTime")
    public String lastEventTime;

    public Device withLastEventTime(String lastEventTime) {
        this.lastEventTime = lastEventTime;
        return this;
    }
    
    /**
     * [Output only] The last time an MQTT `PINGREQ` was received. This field applies only to devices connecting through MQTT. MQTT clients usually only send `PINGREQ` messages if the connection is idle, and no other messages have been sent. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastHeartbeatTime")
    public String lastHeartbeatTime;

    public Device withLastHeartbeatTime(String lastHeartbeatTime) {
        this.lastHeartbeatTime = lastHeartbeatTime;
        return this;
    }
    
    /**
     * [Output only] The last time a state event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastStateTime")
    public String lastStateTime;

    public Device withLastStateTime(String lastStateTime) {
        this.lastStateTime = lastStateTime;
        return this;
    }
    
    /**
     * **Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logLevel")
    public DeviceLogLevelEnum logLevel;

    public Device withLogLevel(DeviceLogLevelEnum logLevel) {
        this.logLevel = logLevel;
        return this;
    }
    
    /**
     * The metadata key-value pairs assigned to the device. This metadata is not interpreted or indexed by Cloud IoT Core. It can be used to add contextual information for the device. Keys must conform to the regular expression a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings. Each value must be less than or equal to 32 KB in size. The total size of all keys and values must be less than 256 KB, and the maximum number of key-value pairs is 500.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;

    public Device withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Device withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * [Output only] A server-defined unique numeric ID for the device. This is a more compact way to identify devices, and it is globally unique.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numId")
    public String numId;

    public Device withNumId(String numId) {
        this.numId = numId;
        return this;
    }
    
    /**
     * The device state, as reported by the device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public DeviceState state;

    public Device withState(DeviceState state) {
        this.state = state;
        return this;
    }
    
    public Device(){}
}
