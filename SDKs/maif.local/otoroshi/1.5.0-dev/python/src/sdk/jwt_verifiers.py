"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class JwtVerifiers:
    r"""Everything about Otoroshi global JWT token verifiers"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_global_jwt_verifier(self, request: shared.GlobalJwtVerifier, security: operations.CreateGlobalJwtVerifierSecurity) -> operations.CreateGlobalJwtVerifierResponse:
        r"""Create one global JWT verifiers
        Create one global JWT verifiers
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/verifiers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGlobalJwtVerifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalJwtVerifier])
                res.global_jwt_verifier = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def delete_global_jwt_verifier(self, request: operations.DeleteGlobalJwtVerifierRequest, security: operations.DeleteGlobalJwtVerifierSecurity) -> operations.DeleteGlobalJwtVerifierResponse:
        r"""Delete one global JWT verifiers
        Delete one global JWT verifiers
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteGlobalJwtVerifierRequest, base_url, '/api/verifiers/{verifierId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteGlobalJwtVerifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deleted])
                res.deleted = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def find_all_global_jwt_verifiers(self) -> operations.FindAllGlobalJwtVerifiersResponse:
        r"""Get all global JWT verifiers
        Get all global JWT verifiers
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/verifiers'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindAllGlobalJwtVerifiersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.GlobalJwtVerifier]])
                res.global_jwt_verifiers = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def find_global_jwt_verifiers_by_id(self, request: operations.FindGlobalJwtVerifiersByIDRequest, security: operations.FindGlobalJwtVerifiersByIDSecurity) -> operations.FindGlobalJwtVerifiersByIDResponse:
        r"""Get one global JWT verifiers
        Get one global JWT verifiers
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FindGlobalJwtVerifiersByIDRequest, base_url, '/api/verifiers/{verifierId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindGlobalJwtVerifiersByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalJwtVerifier])
                res.global_jwt_verifier = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_global_jwt_verifier(self, request: operations.PatchGlobalJwtVerifierRequest, security: operations.PatchGlobalJwtVerifierSecurity) -> operations.PatchGlobalJwtVerifierResponse:
        r"""Update one global JWT verifiers
        Update one global JWT verifiers
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchGlobalJwtVerifierRequest, base_url, '/api/verifiers/{verifierId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchGlobalJwtVerifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalJwtVerifier])
                res.global_jwt_verifier = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_global_jwt_verifier(self, request: operations.UpdateGlobalJwtVerifierRequest, security: operations.UpdateGlobalJwtVerifierSecurity) -> operations.UpdateGlobalJwtVerifierResponse:
        r"""Update one global JWT verifiers
        Update one global JWT verifiers
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateGlobalJwtVerifierRequest, base_url, '/api/verifiers/{verifierId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "global_jwt_verifier", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGlobalJwtVerifierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalJwtVerifier])
                res.global_jwt_verifier = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    