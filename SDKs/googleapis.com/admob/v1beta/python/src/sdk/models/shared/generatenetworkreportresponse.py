"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import reportfooter as shared_reportfooter
from ..shared import reportheader as shared_reportheader
from ..shared import reportrow as shared_reportrow
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GenerateNetworkReportResponse:
    r"""The streaming response for the AdMob Network report where the first response contains the report header, then a stream of row responses, and finally a footer as the last response message. For example: [{ \\"header\\": { \\"dateRange\\": { \\"startDate\\": {\\"year\\": 2018, \\"month\\": 9, \\"day\\": 1}, \\"endDate\\": {\\"year\\": 2018, \\"month\\": 9, \\"day\\": 1} }, \\"localizationSettings\\": { \\"currencyCode\\": \\"USD\\", \\"languageCode\\": \\"en-US\\" } } }, { \\"row\\": { \\"dimensionValues\\": { \\"DATE\\": {\\"value\\": \\"20180918\\"}, \\"APP\\": { \\"value\\": \\"ca-app-pub-8123415297019784~1001342552\\", displayLabel: \\"My app name!\\" } }, \\"metricValues\\": { \\"ESTIMATED_EARNINGS\\": {\\"microsValue\\": 6500000} } } }, { \\"footer\\": {\\"matchingRowCount\\": 1} }]"""
    
    footer: Optional[shared_reportfooter.ReportFooter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('footer'), 'exclude': lambda f: f is None }})
    r"""Groups data available after report generation, for example, warnings and row counts. Always sent as the last message in the stream response."""  
    header: Optional[shared_reportheader.ReportHeader] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('header'), 'exclude': lambda f: f is None }})
    r"""Groups data helps to treat the generated report. Always sent as a first message in the stream response."""  
    row: Optional[shared_reportrow.ReportRow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('row'), 'exclude': lambda f: f is None }})
    r"""A row of the returning report."""  
    