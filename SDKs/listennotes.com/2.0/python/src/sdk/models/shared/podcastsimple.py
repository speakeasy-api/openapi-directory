"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import podcastextrafield as shared_podcastextrafield
from ..shared import podcastlookingforfield as shared_podcastlookingforfield
from ..shared import podcasttypefield_enum as shared_podcasttypefield_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PodcastSimple:
    
    audio_length_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio_length_sec'), 'exclude': lambda f: f is None }})
    r"""Average audio length of all episodes of this podcast. In seconds."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""The country where this podcast is produced."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Html of this episode's full description"""  
    earliest_pub_date_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earliest_pub_date_ms'), 'exclude': lambda f: f is None }})
    r"""The published date of the oldest episode of this podcast. In milliseconds"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The email of this podcast's producer. This field is available only in the PRO/ENTERPRISE plan."""  
    explicit_content: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('explicit_content'), 'exclude': lambda f: f is None }})
    r"""Whether this podcast contains explicit language."""  
    extra: Optional[shared_podcastextrafield.PodcastExtraField] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extra'), 'exclude': lambda f: f is None }})  
    genre_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genre_ids'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Podcast id, which can be used to further fetch detailed podcast metadata via `GET /podcasts/{id}`."""  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Image url for this podcast's artwork. If you are using PRO/ENTERPRISE plan, then it's
    a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**,
    low resolution image (300x300).
    """  
    is_claimed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_claimed'), 'exclude': lambda f: f is None }})
    r"""Whether this podcast is claimed by its producer on [ListenNotes.com](https://www.ListenNotes.com)."""  
    itunes_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itunes_id'), 'exclude': lambda f: f is None }})
    r"""iTunes id for this podcast."""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""The language of this podcast. You can get all supported languages from `GET /languages`."""  
    latest_episode_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latest_episode_id'), 'exclude': lambda f: f is None }})
    r"""The id of the most recently published episode of this podcast, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`."""  
    latest_pub_date_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latest_pub_date_ms'), 'exclude': lambda f: f is None }})
    r"""The published date of the latest episode of this podcast. In milliseconds"""  
    listen_score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listen_score'), 'exclude': lambda f: f is None }})
    r"""The estimated popularity score of a podcast compared to all other rss-based public podcasts in the world on a scale from 0 to 100.
    If the score is not available, it'll be null. Learn more at listennotes.com/listen-score
    """  
    listen_score_global_rank: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listen_score_global_rank'), 'exclude': lambda f: f is None }})
    r"""The estimated popularity ranking of a podcast compared to all other rss-based public podcasts in the world.
    For example, if the value is 0.5%, then this podcast is one of the top 0.5% most popular shows out of all podcasts globally, ranked by Listen Score.
    If the ranking is not available, it'll be null. Learn more at listennotes.com/listen-score
    """  
    listennotes_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listennotes_url'), 'exclude': lambda f: f is None }})
    r"""The url of this podcast on [ListenNotes.com](https://www.ListenNotes.com)."""  
    looking_for: Optional[shared_podcastlookingforfield.PodcastLookingForField] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('looking_for'), 'exclude': lambda f: f is None }})  
    publisher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisher'), 'exclude': lambda f: f is None }})
    r"""Podcast publisher name."""  
    rss: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rss'), 'exclude': lambda f: f is None }})
    r"""RSS url of this podcast. This field is available only in the PRO/ENTERPRISE plan."""  
    thumbnail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnail'), 'exclude': lambda f: f is None }})
    r"""Thumbnail image url for this podcast's artwork (300x300)."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Podcast name."""  
    total_episodes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_episodes'), 'exclude': lambda f: f is None }})
    r"""Total number of episodes in this podcast."""  
    type: Optional[shared_podcasttypefield_enum.PodcastTypeFieldEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of this podcast - episodic or serial."""  
    update_frequency_hours: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update_frequency_hours'), 'exclude': lambda f: f is None }})
    r"""How frequently does this podcast release a new episode? In hours. For example, if the value is 166, then it's every 166 hours (or weekly)."""  
    website: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('website'), 'exclude': lambda f: f is None }})
    r"""Website url of this podcast."""  
    