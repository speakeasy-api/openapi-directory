"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CustomDevice:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def custom_device_get(self) -> operations.CustomDeviceGetResponse:
        r"""Gets all Custom Devices
        Gets all Devices
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/CustomDevice'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomDeviceGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomDeviceToPost]])
                res.custom_device_to_posts = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomDeviceToPost]])
                res.custom_device_to_posts = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def custom_device_post_form(self, request: shared.CustomDeviceToPost) -> operations.CustomDevicePostFormResponse:
        r"""Creates or updates a Custom Device or updates it's values.
        Creates or updates a Custom Device or updates it's values.
                    A Custom Device can be any device that like to add some measurement values to the smart-me Cloud.
                    Only use a custom device for all non meters.
                    For a new device leave the ID empty. To create a device you have to set the DeviceEnergyType.
                    To update values, add the ID of the device and the values you like to set.  (See the Data Type Model for more Information)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/CustomDevice'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomDevicePostFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDeviceToPost])
                res.custom_device_to_post = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDeviceToPost])
                res.custom_device_to_post = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def custom_device_post_json(self, request: shared.CustomDeviceToPost) -> operations.CustomDevicePostJSONResponse:
        r"""Creates or updates a Custom Device or updates it's values.
        Creates or updates a Custom Device or updates it's values.
                    A Custom Device can be any device that like to add some measurement values to the smart-me Cloud.
                    Only use a custom device for all non meters.
                    For a new device leave the ID empty. To create a device you have to set the DeviceEnergyType.
                    To update values, add the ID of the device and the values you like to set.  (See the Data Type Model for more Information)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/CustomDevice'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomDevicePostJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDeviceToPost])
                res.custom_device_to_post = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDeviceToPost])
                res.custom_device_to_post = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def custom_device_post_raw(self, request: bytes) -> operations.CustomDevicePostRawResponse:
        r"""Creates or updates a Custom Device or updates it's values.
        Creates or updates a Custom Device or updates it's values.
                    A Custom Device can be any device that like to add some measurement values to the smart-me Cloud.
                    Only use a custom device for all non meters.
                    For a new device leave the ID empty. To create a device you have to set the DeviceEnergyType.
                    To update values, add the ID of the device and the values you like to set.  (See the Data Type Model for more Information)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/CustomDevice'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomDevicePostRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDeviceToPost])
                res.custom_device_to_post = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDeviceToPost])
                res.custom_device_to_post = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code == 401:
            pass

        return res

    def get_api_custom_device_id_(self, request: operations.GetAPICustomDeviceIDRequest) -> operations.GetAPICustomDeviceIDResponse:
        r"""Gets a Custom Device by it's ID
        Gets a Device by it's ID
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPICustomDeviceIDRequest, base_url, '/api/CustomDevice/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPICustomDeviceIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDeviceToPost])
                res.custom_device_to_post = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDeviceToPost])
                res.custom_device_to_post = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    