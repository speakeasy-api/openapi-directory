/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SyncSummary - Success
 */
public class SyncSummary {
    /**
     * Unique identifier for the sync in Codat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerceSyncId")
    public String commerceSyncId;

    public SyncSummary withCommerceSyncId(String commerceSyncId) {
        this.commerceSyncId = commerceSyncId;
        return this;
    }
    
    /**
     * Unique identifier for your SMB in Codat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyId")
    public String companyId;

    public SyncSummary withCompanyId(String companyId) {
        this.companyId = companyId;
        return this;
    }
    
    /**
     * Array of containing objects data connection information for the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataConnections")
    public Connection[] dataConnections;

    public SyncSummary withDataConnections(Connection[] dataConnections) {
        this.dataConnections = dataConnections;
        return this;
    }
    
    /**
     * Boolean indicator for data being pushed during a sync operation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataPushed")
    public Boolean dataPushed;

    public SyncSummary withDataPushed(Boolean dataPushed) {
        this.dataPushed = dataPushed;
        return this;
    }
    
    /**
     * Friendly error message for the sync operation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    public String errorMessage;

    public SyncSummary withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncDateRangeUtc")
    public DateRange syncDateRangeUtc;

    public SyncSummary withSyncDateRangeUtc(DateRange syncDateRangeUtc) {
        this.syncDateRangeUtc = syncDateRangeUtc;
        return this;
    }
    
    /**
     * Exception message for the sync operation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncExceptionMessage")
    public String syncExceptionMessage;

    public SyncSummary withSyncExceptionMessage(String syncExceptionMessage) {
        this.syncExceptionMessage = syncExceptionMessage;
        return this;
    }
    
    /**
     * Status of the sync of the company data. This is linked to status code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncStatus")
    public String syncStatus;

    public SyncSummary withSyncStatus(String syncStatus) {
        this.syncStatus = syncStatus;
        return this;
    }
    
    /**
     * Numerical status code sync of the company data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncStatusCode")
    public Integer syncStatusCode;

    public SyncSummary withSyncStatusCode(Integer syncStatusCode) {
        this.syncStatusCode = syncStatusCode;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncUtc")
    public String syncUtc;

    public SyncSummary withSyncUtc(String syncUtc) {
        this.syncUtc = syncUtc;
        return this;
    }
    
    public SyncSummary(){}
}
