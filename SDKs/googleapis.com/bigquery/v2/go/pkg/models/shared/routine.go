// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RoutineDeterminismLevelEnum - Optional. The determinism level of the JavaScript UDF, if defined.
type RoutineDeterminismLevelEnum string

const (
	RoutineDeterminismLevelEnumDeterminismLevelUnspecified RoutineDeterminismLevelEnum = "DETERMINISM_LEVEL_UNSPECIFIED"
	RoutineDeterminismLevelEnumDeterministic               RoutineDeterminismLevelEnum = "DETERMINISTIC"
	RoutineDeterminismLevelEnumNotDeterministic            RoutineDeterminismLevelEnum = "NOT_DETERMINISTIC"
)

func (e *RoutineDeterminismLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DETERMINISM_LEVEL_UNSPECIFIED":
		fallthrough
	case "DETERMINISTIC":
		fallthrough
	case "NOT_DETERMINISTIC":
		*e = RoutineDeterminismLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RoutineDeterminismLevelEnum: %s", s)
	}
}

// RoutineLanguageEnum - Optional. Defaults to "SQL" if remote_function_options field is absent, not set otherwise.
type RoutineLanguageEnum string

const (
	RoutineLanguageEnumLanguageUnspecified RoutineLanguageEnum = "LANGUAGE_UNSPECIFIED"
	RoutineLanguageEnumSQL                 RoutineLanguageEnum = "SQL"
	RoutineLanguageEnumJavascript          RoutineLanguageEnum = "JAVASCRIPT"
	RoutineLanguageEnumPython              RoutineLanguageEnum = "PYTHON"
)

func (e *RoutineLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LANGUAGE_UNSPECIFIED":
		fallthrough
	case "SQL":
		fallthrough
	case "JAVASCRIPT":
		fallthrough
	case "PYTHON":
		*e = RoutineLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RoutineLanguageEnum: %s", s)
	}
}

// RoutineRoutineTypeEnum - Required. The type of routine.
type RoutineRoutineTypeEnum string

const (
	RoutineRoutineTypeEnumRoutineTypeUnspecified RoutineRoutineTypeEnum = "ROUTINE_TYPE_UNSPECIFIED"
	RoutineRoutineTypeEnumScalarFunction         RoutineRoutineTypeEnum = "SCALAR_FUNCTION"
	RoutineRoutineTypeEnumProcedure              RoutineRoutineTypeEnum = "PROCEDURE"
	RoutineRoutineTypeEnumTableValuedFunction    RoutineRoutineTypeEnum = "TABLE_VALUED_FUNCTION"
)

func (e *RoutineRoutineTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ROUTINE_TYPE_UNSPECIFIED":
		fallthrough
	case "SCALAR_FUNCTION":
		fallthrough
	case "PROCEDURE":
		fallthrough
	case "TABLE_VALUED_FUNCTION":
		*e = RoutineRoutineTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RoutineRoutineTypeEnum: %s", s)
	}
}

// RoutineInput - A user-defined function or a stored procedure.
type RoutineInput struct {
	// Optional.
	Arguments []Argument `json:"arguments,omitempty"`
	// Required. The body of the routine. For functions, this is the expression in the AS clause. If language=SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, "\n", y))` The definition_body is `concat(x, "\n", y)` (\n is not replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return "\n";\n'` The definition_body is `return "\n";\n` Note that both \n are replaced with linebreaks.
	DefinitionBody *string `json:"definitionBody,omitempty"`
	// Optional. The description of the routine, if defined.
	Description *string `json:"description,omitempty"`
	// Optional. The determinism level of the JavaScript UDF, if defined.
	DeterminismLevel *RoutineDeterminismLevelEnum `json:"determinismLevel,omitempty"`
	// Optional. If language = "JAVASCRIPT", this field stores the path of the imported JAVASCRIPT libraries.
	ImportedLibraries []string `json:"importedLibraries,omitempty"`
	// Optional. Defaults to "SQL" if remote_function_options field is absent, not set otherwise.
	Language *RoutineLanguageEnum `json:"language,omitempty"`
	// Options for a remote user-defined function.
	RemoteFunctionOptions *RemoteFunctionOptions `json:"remoteFunctionOptions,omitempty"`
	// A table type
	ReturnTableType *StandardSQLTableType `json:"returnTableType,omitempty"`
	// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
	ReturnType       *StandardSQLDataType `json:"returnType,omitempty"`
	RoutineReference *RoutineReference    `json:"routineReference,omitempty"`
	// Required. The type of routine.
	RoutineType *RoutineRoutineTypeEnum `json:"routineType,omitempty"`
	// Options for a user-defined Spark routine.
	SparkOptions *SparkOptions `json:"sparkOptions,omitempty"`
	// Optional. Can be set for procedures only. If true (default), the definition body will be validated in the creation and the updates of the procedure. For procedures with an argument of ANY TYPE, the definition body validtion is not supported at creation/update time, and thus this field must be set to false explicitly.
	StrictMode *bool `json:"strictMode,omitempty"`
}

// Routine - A user-defined function or a stored procedure.
type Routine struct {
	// Optional.
	Arguments []Argument `json:"arguments,omitempty"`
	// Output only. The time when this routine was created, in milliseconds since the epoch.
	CreationTime *string `json:"creationTime,omitempty"`
	// Required. The body of the routine. For functions, this is the expression in the AS clause. If language=SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, "\n", y))` The definition_body is `concat(x, "\n", y)` (\n is not replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return "\n";\n'` The definition_body is `return "\n";\n` Note that both \n are replaced with linebreaks.
	DefinitionBody *string `json:"definitionBody,omitempty"`
	// Optional. The description of the routine, if defined.
	Description *string `json:"description,omitempty"`
	// Optional. The determinism level of the JavaScript UDF, if defined.
	DeterminismLevel *RoutineDeterminismLevelEnum `json:"determinismLevel,omitempty"`
	// Output only. A hash of this resource.
	Etag *string `json:"etag,omitempty"`
	// Optional. If language = "JAVASCRIPT", this field stores the path of the imported JAVASCRIPT libraries.
	ImportedLibraries []string `json:"importedLibraries,omitempty"`
	// Optional. Defaults to "SQL" if remote_function_options field is absent, not set otherwise.
	Language *RoutineLanguageEnum `json:"language,omitempty"`
	// Output only. The time when this routine was last modified, in milliseconds since the epoch.
	LastModifiedTime *string `json:"lastModifiedTime,omitempty"`
	// Options for a remote user-defined function.
	RemoteFunctionOptions *RemoteFunctionOptions `json:"remoteFunctionOptions,omitempty"`
	// A table type
	ReturnTableType *StandardSQLTableType `json:"returnTableType,omitempty"`
	// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
	ReturnType       *StandardSQLDataType `json:"returnType,omitempty"`
	RoutineReference *RoutineReference    `json:"routineReference,omitempty"`
	// Required. The type of routine.
	RoutineType *RoutineRoutineTypeEnum `json:"routineType,omitempty"`
	// Options for a user-defined Spark routine.
	SparkOptions *SparkOptions `json:"sparkOptions,omitempty"`
	// Optional. Can be set for procedures only. If true (default), the definition body will be validated in the creation and the updates of the procedure. For procedures with an argument of ANY TYPE, the definition body validtion is not supported at creation/update time, and thus this field must be set to false explicitly.
	StrictMode *bool `json:"strictMode,omitempty"`
}
