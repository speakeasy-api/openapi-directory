// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FindingSeverityEnum - The severity level of the reported vulnerability.
type FindingSeverityEnum string

const (
	FindingSeverityEnumSeverityUnspecified FindingSeverityEnum = "SEVERITY_UNSPECIFIED"
	FindingSeverityEnumCritical            FindingSeverityEnum = "CRITICAL"
	FindingSeverityEnumHigh                FindingSeverityEnum = "HIGH"
	FindingSeverityEnumMedium              FindingSeverityEnum = "MEDIUM"
	FindingSeverityEnumLow                 FindingSeverityEnum = "LOW"
)

func (e FindingSeverityEnum) ToPointer() *FindingSeverityEnum {
	return &e
}

func (e *FindingSeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SEVERITY_UNSPECIFIED":
		fallthrough
	case "CRITICAL":
		fallthrough
	case "HIGH":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "LOW":
		*e = FindingSeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindingSeverityEnum: %v", v)
	}
}

// Finding - A Finding resource represents a vulnerability instance identified during a ScanRun.
type Finding struct {
	// The body of the request that triggered the vulnerability.
	Body *string `json:"body,omitempty"`
	// The description of the vulnerability.
	Description *string `json:"description,omitempty"`
	// The URL where the browser lands when the vulnerability is detected.
	FinalURL *string `json:"finalUrl,omitempty"`
	// The type of the Finding. Detailed and up-to-date information on findings can be found here: https://cloud.google.com/security-command-center/docs/how-to-remediate-web-security-scanner
	FindingType *string `json:"findingType,omitempty"`
	// ! Information about a vulnerability with an HTML.
	Form *Form `json:"form,omitempty"`
	// If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported.
	FrameURL *string `json:"frameUrl,omitempty"`
	// The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability.
	FuzzedURL *string `json:"fuzzedUrl,omitempty"`
	// The http method of the request that triggered the vulnerability, in uppercase.
	HTTPMethod *string `json:"httpMethod,omitempty"`
	// The resource name of the Finding. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'. The finding IDs are generated by the system.
	Name *string `json:"name,omitempty"`
	// Information reported for an outdated library.
	OutdatedLibrary *OutdatedLibrary `json:"outdatedLibrary,omitempty"`
	// The URL containing human-readable payload that user can leverage to reproduce the vulnerability.
	ReproductionURL *string `json:"reproductionUrl,omitempty"`
	// The severity level of the reported vulnerability.
	Severity *FindingSeverityEnum `json:"severity,omitempty"`
	// The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns.
	TrackingID *string `json:"trackingId,omitempty"`
	// Information regarding any resource causing the vulnerability such as JavaScript sources, image, audio files, etc.
	ViolatingResource *ViolatingResource `json:"violatingResource,omitempty"`
	// Information about vulnerable or missing HTTP Headers.
	VulnerableHeaders *VulnerableHeaders `json:"vulnerableHeaders,omitempty"`
	// Information about vulnerable request parameters.
	VulnerableParameters *VulnerableParameters `json:"vulnerableParameters,omitempty"`
	// Information reported for an XSS.
	XSS *XSS `json:"xss,omitempty"`
	// Information reported for an XXE.
	Xxe *Xxe `json:"xxe,omitempty"`
}
