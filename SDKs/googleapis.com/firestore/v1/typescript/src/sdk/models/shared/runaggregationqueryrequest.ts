/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { StructuredAggregationQuery } from "./structuredaggregationquery";
import { TransactionOptions } from "./transactionoptions";
import { Expose, Type } from "class-transformer";

/**
 * The request for Firestore.RunAggregationQuery.
 */
export class RunAggregationQueryRequest extends SpeakeasyBase {
  /**
   * Options for creating a new transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "newTransaction" })
  @Type(() => TransactionOptions)
  newTransaction?: TransactionOptions;

  /**
   * Executes the query at the given timestamp. Requires: * Cannot be more than 270 seconds in the past.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "readTime" })
  readTime?: string;

  /**
   * Firestore query for running an aggregation over a StructuredQuery.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "structuredAggregationQuery" })
  @Type(() => StructuredAggregationQuery)
  structuredAggregationQuery?: StructuredAggregationQuery;

  /**
   * Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction" })
  transaction?: string;
}
