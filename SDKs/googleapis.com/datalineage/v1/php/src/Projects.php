<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve information about LineageProcesses associated with specific links. LineageProcesses are transformation pipelines that result in data flowing from **source** to **target** assets. Links between assets represent this operation. If you have specific link names, you can use this method to verify which LineageProcesses contribute to creating those links. See the SearchLinks method for more information on how to retrieve link name. You can retrieve the LineageProcess information in every project where you have the `datalineage.events.get` permission. The project provided in the URL is used for Billing and Quota.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsBatchSearchLinkProcessesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsBatchSearchLinkProcessesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsBatchSearchLinkProcessesResponse
     */
	public function datalineageProjectsLocationsBatchSearchLinkProcesses(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsBatchSearchLinkProcessesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsBatchSearchLinkProcessesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsBatchSearchLinkProcessesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}:batchSearchLinkProcesses', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsBatchSearchLinkProcessesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogLineageV1BatchSearchLinkProcessesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsBatchSearchLinkProcessesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsBatchSearchLinkProcessesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogLineageV1BatchSearchLinkProcessesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogLineageV1BatchSearchLinkProcessesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsCancelResponse
     */
	public function datalineageProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsListResponse
     */
	public function datalineageProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new process.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesCreateResponse
     */
	public function datalineageProjectsLocationsProcessesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/processes', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogLineageV1Process", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogLineageV1Process = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogLineageV1Process', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List processes in the given project and location. List order is descending by insertion time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesListResponse
     */
	public function datalineageProjectsLocationsProcessesList(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/processes', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogLineageV1ListProcessesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogLineageV1ListProcessesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new run.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsCreateResponse
     */
	public function datalineageProjectsLocationsProcessesRunsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/runs', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogLineageV1Run", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogLineageV1Run = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogLineageV1Run', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new lineage event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsCreateResponse
     */
	public function datalineageProjectsLocationsProcessesRunsLineageEventsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/lineageEvents', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogLineageV1LineageEvent", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogLineageV1LineageEvent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogLineageV1LineageEvent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the lineage event with the specified name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteResponse
     */
	public function datalineageProjectsLocationsProcessesRunsLineageEventsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details of a specified lineage event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsGetResponse
     */
	public function datalineageProjectsLocationsProcessesRunsLineageEventsGet(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogLineageV1LineageEvent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogLineageV1LineageEvent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists lineage events in the given project and location. The list order is not defined.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsListResponse
     */
	public function datalineageProjectsLocationsProcessesRunsLineageEventsList(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/lineageEvents', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsLineageEventsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogLineageV1ListLineageEventsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogLineageV1ListLineageEventsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists runs in the given project and location. List order is descending by `start_time`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsListResponse
     */
	public function datalineageProjectsLocationsProcessesRunsList(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/runs', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogLineageV1ListRunsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogLineageV1ListRunsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a run.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsPatchResponse
     */
	public function datalineageProjectsLocationsProcessesRunsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogLineageV1Run", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsProcessesRunsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogLineageV1Run = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogLineageV1Run', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of links connected to a specific asset. Links represent the data flow between **source** (upstream) and **target** (downstream) assets in transformation pipelines. Links are stored in the same project as the Lineage Events that create them. You can retrieve links in every project where you have the `datalineage.events.get` permission. The project provided in the URL is used for Billing and Quota.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsSearchLinksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsSearchLinksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsSearchLinksResponse
     */
	public function datalineageProjectsLocationsSearchLinks(
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsSearchLinksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsSearchLinksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsSearchLinksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}:searchLinks', \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsSearchLinksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatacatalogLineageV1SearchLinksRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsSearchLinksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatalineageProjectsLocationsSearchLinksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatacatalogLineageV1SearchLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatacatalogLineageV1SearchLinksResponse', 'json');
            }
        }

        return $response;
    }
}