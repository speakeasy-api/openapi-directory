"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import code_of_conduct as shared_code_of_conduct
from ..shared import security_and_analysis as shared_security_and_analysis
from ..shared import simple_user as shared_simple_user
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NullableMinimalRepositoryLicense:
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    node_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id'), 'exclude': lambda f: f is None }})  
    spdx_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spdx_id'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NullableMinimalRepositoryPermissions:
    
    admin: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin'), 'exclude': lambda f: f is None }})  
    maintain: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintain'), 'exclude': lambda f: f is None }})  
    pull: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pull'), 'exclude': lambda f: f is None }})  
    push: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push'), 'exclude': lambda f: f is None }})  
    triage: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NullableMinimalRepository:
    r"""Minimal Repository"""
    
    archive_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archive_url') }})  
    assignees_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignees_url') }})  
    blobs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blobs_url') }})  
    branches_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branches_url') }})  
    collaborators_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collaborators_url') }})  
    comments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments_url') }})  
    commits_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commits_url') }})  
    compare_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compare_url') }})  
    contents_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents_url') }})  
    contributors_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributors_url') }})  
    deployments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployments_url') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    downloads_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloads_url') }})  
    events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events_url') }})  
    fork: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fork') }})  
    forks_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forks_url') }})  
    full_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_name') }})  
    git_commits_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_commits_url') }})  
    git_refs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_refs_url') }})  
    git_tags_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_tags_url') }})  
    hooks_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hooks_url') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    issue_comment_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_comment_url') }})  
    issue_events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_events_url') }})  
    issues_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues_url') }})  
    keys_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keys_url') }})  
    labels_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels_url') }})  
    languages_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languages_url') }})  
    merges_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merges_url') }})  
    milestones_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('milestones_url') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    notifications_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications_url') }})  
    owner: shared_simple_user.SimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})
    r"""A GitHub user."""  
    private: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private') }})  
    pulls_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pulls_url') }})  
    releases_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releases_url') }})  
    stargazers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stargazers_url') }})  
    statuses_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses_url') }})  
    subscribers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscribers_url') }})  
    subscription_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscription_url') }})  
    tags_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags_url') }})  
    teams_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teams_url') }})  
    trees_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trees_url') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    allow_forking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_forking'), 'exclude': lambda f: f is None }})  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})  
    clone_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clone_url'), 'exclude': lambda f: f is None }})  
    code_of_conduct: Optional[shared_code_of_conduct.CodeOfConduct] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code_of_conduct'), 'exclude': lambda f: f is None }})
    r"""Code Of Conduct"""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    default_branch: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_branch'), 'exclude': lambda f: f is None }})  
    delete_branch_on_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete_branch_on_merge'), 'exclude': lambda f: f is None }})  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled'), 'exclude': lambda f: f is None }})  
    forks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forks'), 'exclude': lambda f: f is None }})  
    forks_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forks_count'), 'exclude': lambda f: f is None }})  
    git_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('git_url'), 'exclude': lambda f: f is None }})  
    has_discussions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_discussions'), 'exclude': lambda f: f is None }})  
    has_downloads: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_downloads'), 'exclude': lambda f: f is None }})  
    has_issues: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_issues'), 'exclude': lambda f: f is None }})  
    has_pages: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_pages'), 'exclude': lambda f: f is None }})  
    has_projects: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_projects'), 'exclude': lambda f: f is None }})  
    has_wiki: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_wiki'), 'exclude': lambda f: f is None }})  
    homepage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homepage'), 'exclude': lambda f: f is None }})  
    is_template: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_template'), 'exclude': lambda f: f is None }})  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})  
    license: Optional[NullableMinimalRepositoryLicense] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license'), 'exclude': lambda f: f is None }})  
    mirror_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mirror_url'), 'exclude': lambda f: f is None }})  
    network_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_count'), 'exclude': lambda f: f is None }})  
    open_issues: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open_issues'), 'exclude': lambda f: f is None }})  
    open_issues_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('open_issues_count'), 'exclude': lambda f: f is None }})  
    permissions: Optional[NullableMinimalRepositoryPermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})  
    pushed_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pushed_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    role_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role_name'), 'exclude': lambda f: f is None }})  
    security_and_analysis: Optional[shared_security_and_analysis.SecurityAndAnalysis] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('security_and_analysis'), 'exclude': lambda f: f is None }})  
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0."""  
    ssh_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssh_url'), 'exclude': lambda f: f is None }})  
    stargazers_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stargazers_count'), 'exclude': lambda f: f is None }})  
    subscribers_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscribers_count'), 'exclude': lambda f: f is None }})  
    svn_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('svn_url'), 'exclude': lambda f: f is None }})  
    temp_clone_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temp_clone_token'), 'exclude': lambda f: f is None }})  
    topics: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    visibility: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})  
    watchers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchers'), 'exclude': lambda f: f is None }})  
    watchers_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchers_count'), 'exclude': lambda f: f is None }})  
    web_commit_signoff_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('web_commit_signoff_required'), 'exclude': lambda f: f is None }})  
    