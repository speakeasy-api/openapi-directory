"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import apierror as shared_apierror
from ..shared import genericerror as shared_genericerror
from ..shared import nearbyresponse as shared_nearbyresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetNearbyFacilitiesSecurity:
    
    apikey: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'apikey' }})  
    
class GetNearbyFacilitiesDriveTimeEnum(str, Enum):
    r"""Filter to only include facilities that are within the specified number of drive time minutes from the requested location."""
    TEN = '10'
    TWENTY = '20'
    THIRTY = '30'
    FORTY = '40'
    FIFTY = '50'
    SIXTY = '60'
    SEVENTY = '70'
    EIGHTY = '80'
    NINETY = '90'


@dataclasses.dataclass
class GetNearbyFacilitiesRequest:
    
    city: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'city', 'style': 'form', 'explode': True }})
    r"""City of the location from which drive time will be calculated."""  
    drive_time: Optional[GetNearbyFacilitiesDriveTimeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'drive_time', 'style': 'form', 'explode': True }})
    r"""Filter to only include facilities that are within the specified number of drive time minutes from the requested location."""  
    lat: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lat', 'style': 'form', 'explode': True }})
    r"""Latitude of the location from which drive time will be calculated."""  
    lng: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lng', 'style': 'form', 'explode': True }})
    r"""Longitude of the location from which drive time will be calculated."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page of results to return per paginated response."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Number of results to return per paginated response."""  
    services: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'services[]', 'style': 'form', 'explode': True }})
    r"""Optional facility service search filter"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""Two character state code of the location from which drive time will be calculated."""  
    street_address: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'street_address', 'style': 'form', 'explode': True }})
    r"""Street address of the location from which drive time will be calculated."""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'zip', 'style': 'form', 'explode': True }})
    r"""Zip code of the location from which drive time will be calculated."""  
    

@dataclasses.dataclass
class GetNearbyFacilitiesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_error: Optional[shared_apierror.APIError] = dataclasses.field(default=None)
    r"""Requested format unacceptable"""  
    generic_error: Optional[shared_genericerror.GenericError] = dataclasses.field(default=None)
    r"""Missing Required Or Ambiguous Parameters"""  
    nearby_response: Optional[shared_nearbyresponse.NearbyResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    