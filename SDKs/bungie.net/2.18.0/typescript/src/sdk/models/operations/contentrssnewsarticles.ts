/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class ContentRssNewsArticlesRequest extends SpeakeasyBase {
  /**
   * Optionally filter response to only include news items in a certain category.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=categoryfilter",
  })
  categoryfilter?: string;

  /**
   * Optionally include full content body for each news item.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includebody",
  })
  includebody?: boolean;

  /**
   * Zero-based pagination token for paging through result sets.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=pageToken",
  })
  pageToken: string;
}

/**
 * Look at the Response property for more information about the nature of this response
 */
export class ContentRssNewsArticles200Wildcard extends SpeakeasyBase {
  @SpeakeasyMetadata()
  detailedErrorTrace?: string;

  @SpeakeasyMetadata()
  errorCode?: number;

  @SpeakeasyMetadata()
  errorStatus?: string;

  @SpeakeasyMetadata()
  message?: string;

  @SpeakeasyMetadata()
  messageData?: Record<string, string>;

  @SpeakeasyMetadata()
  response?: shared.ContentNewsArticleRssResponse;

  @SpeakeasyMetadata()
  throttleSeconds?: number;
}

export class ContentRssNewsArticlesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
