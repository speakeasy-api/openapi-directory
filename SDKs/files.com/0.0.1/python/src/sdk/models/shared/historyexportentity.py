"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HistoryExportEntity:
    r"""Show History Export"""
    
    end_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date/time of export range."""  
    history_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('history_version'), 'exclude': lambda f: f is None }})
    r"""Version of the history for the export."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""History Export ID"""  
    query_action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_action'), 'exclude': lambda f: f is None }})
    r"""Filter results by this this action type. Valid values: `create`, `read`, `update`, `destroy`, `move`, `login`, `failedlogin`, `copy`, `user_create`, `user_update`, `user_destroy`, `group_create`, `group_update`, `group_destroy`, `permission_create`, `permission_destroy`, `api_key_create`, `api_key_update`, `api_key_destroy`"""  
    query_destination: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_destination'), 'exclude': lambda f: f is None }})
    r"""Return results that are file moves with this path as destination."""  
    query_failure_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_failure_type'), 'exclude': lambda f: f is None }})
    r"""If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: `expired_trial`, `account_overdue`, `locked_out`, `ip_mismatch`, `password_mismatch`, `site_mismatch`, `username_not_found`, `none`, `no_ftp_permission`, `no_web_permission`, `no_directory`, `errno_enoent`, `no_sftp_permission`, `no_dav_permission`, `no_restapi_permission`, `key_mismatch`, `region_mismatch`, `expired_access`, `desktop_ip_mismatch`, `desktop_api_key_not_used_quickly_enough`, `disabled`, `country_mismatch`"""  
    query_file_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_file_id'), 'exclude': lambda f: f is None }})
    r"""Return results that are file actions related to the file indicated by this File ID"""  
    query_folder: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_folder'), 'exclude': lambda f: f is None }})
    r"""Return results that are file actions related to files or folders inside this folder path."""  
    query_interface: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_interface'), 'exclude': lambda f: f is None }})
    r"""Filter results by this this interface type. Valid values: `web`, `ftp`, `robot`, `jsapi`, `webdesktopapi`, `sftp`, `dav`, `desktop`, `restapi`, `scim`, `office`, `mobile`, `as2`, `inbound_email`, `remote`"""  
    query_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_ip'), 'exclude': lambda f: f is None }})
    r"""Filter results by this IP address."""  
    query_parent_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_parent_id'), 'exclude': lambda f: f is None }})
    r"""Return results that are file actions inside the parent folder specified by this folder ID"""  
    query_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_path'), 'exclude': lambda f: f is None }})
    r"""Return results that are file actions related to this path."""  
    query_src: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_src'), 'exclude': lambda f: f is None }})
    r"""Return results that are file moves originating from this path."""  
    query_target_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_target_id'), 'exclude': lambda f: f is None }})
    r"""If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID."""  
    query_target_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_target_name'), 'exclude': lambda f: f is None }})
    r"""If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username."""  
    query_target_permission: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_target_permission'), 'exclude': lambda f: f is None }})
    r"""If searching for Histories about Permisisons, this parameter restricts results to permissions of this level."""  
    query_target_permission_set: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_target_permission_set'), 'exclude': lambda f: f is None }})
    r"""If searching for Histories about API keys, this parameter restricts results to API keys with this permission set."""  
    query_target_platform: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_target_platform'), 'exclude': lambda f: f is None }})
    r"""If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform."""  
    query_target_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_target_user_id'), 'exclude': lambda f: f is None }})
    r"""If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID."""  
    query_target_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_target_username'), 'exclude': lambda f: f is None }})
    r"""If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username."""  
    query_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_user_id'), 'exclude': lambda f: f is None }})
    r"""Return results that are actions performed by the user indiciated by this User ID"""  
    query_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query_username'), 'exclude': lambda f: f is None }})
    r"""Filter results by this username."""  
    results_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results_url'), 'exclude': lambda f: f is None }})
    r"""If `status` is `ready`, this will be a URL where all the results can be downloaded at once as a CSV."""  
    start_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date/time of export range."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of export.  Will be: `building`, `ready`, or `failed`"""  
    