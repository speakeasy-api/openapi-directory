<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * RetryConfig - Settings that determine the retry behavior. By default, if a job does not complete successfully (meaning that an acknowledgement is not received from the handler, then it will be retried with exponential backoff according to the settings in RetryConfig.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class RetryConfig
{
    /**
     * The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
     * 
     * @var ?string $maxBackoffDuration
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxBackoffDuration')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $maxBackoffDuration = null;
    
    /**
     * The time between retries will double `max_doublings` times. A job's retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
     * 
     * @var ?int $maxDoublings
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxDoublings')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxDoublings = null;
    
    /**
     * The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
     * 
     * @var ?string $maxRetryDuration
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxRetryDuration')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $maxRetryDuration = null;
    
    /**
     * The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
     * 
     * @var ?string $minBackoffDuration
     */
	#[\JMS\Serializer\Annotation\SerializedName('minBackoffDuration')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $minBackoffDuration = null;
    
    /**
     * The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
     * 
     * @var ?int $retryCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('retryCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $retryCount = null;
    
	public function __construct()
	{
		$this->maxBackoffDuration = null;
		$this->maxDoublings = null;
		$this->maxRetryDuration = null;
		$this->minBackoffDuration = null;
		$this->retryCount = null;
	}
}
