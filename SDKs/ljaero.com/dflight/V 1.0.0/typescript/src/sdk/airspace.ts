/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * #### Information is available for the following types of airspace:
 *
 * @remarks
 * * **Controlled Airspace (CAS):** Class B, C, D, E2 airspace names, boundaries, altitude information, and LAANC availability
 * * **Special Use Airspace (SUA):** Names, boundaries, and altitude information for the following types of Special Use Airspace:
 *     - Alert Areas (AA)
 *     - Military Operations Areas (MOA)
 *     - National Security Areas (NSA)
 *     - Prohibited Areas (PA)
 *     - Restricted Areas (RA)
 *     - Warning Areas (WA)
 * * **Miscellaneous Activity Areas (MAA):** Names and boundary information for the following types of Miscellaneous Activity Areas:
 *     - Aerobatic Practice Areas (AEROBATIC PRACTICE)
 *     - Glider Operations Areas (GLIDER)
 *     - Hang Glider Operations Areas (HANG GLIDER)
 *     - Parachute Jump Areas (PARACHUTE JUMP AREA)
 *     - Space Launch Activity Areas (SPACE LAUNCH ACTIVITY)
 * * **Military Training Routes (MTR):** Names, route geometry, usage times, and corridor width information for both VFR and IFR Military Training Routes
 */
export class Airspace {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve all requested types of airspace located within given distance of location.
   *
   * @remarks
   * Retrieve selected types of airspace existing within given distance from a point. Request body parameters are:
   * * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
   * * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
   * * distance:  distance in meters (max allowed value is 25000)
   * * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
   *
   * Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
   * * CAS (Controlled Airspace)
   *     - *name*
   *     - *cas_class*: B, C, D, or E2
   *     - *floor*: integer value in ft MSL
   *     - *ceiling*: integer value in ft MSL
   *     - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
   * * SUA (Special Use Airspace)
   *     - *name*
   *     - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
   *     - *floor*: lower limit of the airspace
   *     - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
   *     - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
   *     - *ceiling*: upper limit of the airspace
   *     - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
   *     - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
   * * MAA (Miscellaneous Activity Area)
   *     - *name*
   *     - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
   *     - *use_times*: textual description of days/times when activity in the area should be expected
   * * MTR (Military Training Route)
   *     - *name*
   *     - *use_times*: textual description of days/times when MTR is active/hot
   *     - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
   *     - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
   */
  aspByDistanceUsV1AirspaceDistanceQueryPost(
    req: operations.AspByDistanceUsV1AirspaceDistanceQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AspByDistanceUsV1AirspaceDistanceQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AspByDistanceUsV1AirspaceDistanceQueryPostRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/us/v1/airspace/distance-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "airspaceByDistance",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AspByDistanceUsV1AirspaceDistanceQueryPostResponse =
        new operations.AspByDistanceUsV1AirspaceDistanceQueryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.airspaceDistanceResponse = utils.objectToClass(
              httpRes?.data,
              shared.AirspaceDistanceResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve all requested types of airspace located within given GeoJSON Polygon.
   *
   * @remarks
   * Retrieve selected types of airspace located within given area. Request body parameters are:
   * * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
   * * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
   *
   * Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
   * * CAS (Controlled Airspace)
   *     - *name*
   *     - *cas_class*: B, C, D, or E2
   *     - *floor*: integer value in ft MSL
   *     - *ceiling*: integer value in ft MSL
   *     - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
   * * SUA (Special Use Airspace)
   *     - *name*
   *     - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
   *     - *floor*: lower limit of the airspace
   *     - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
   *     - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
   *     - *ceiling*: upper limit of the airspace
   *     - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
   *     - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
   * * MAA (Miscellaneous Activity Area)
   *     - *name*
   *     - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
   *     - *use_times*: textual description of days/times when activity in the area should be expected
   * * MTR (Military Training Route)
   *     - *name*
   *     - *use_times*: textual description of days/times when MTR is active/hot
   *     - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
   *     - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
   */
  aspByPolyUsV1AirspacePolygonQueryPost(
    req: operations.AspByPolyUsV1AirspacePolygonQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AspByPolyUsV1AirspacePolygonQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AspByPolyUsV1AirspacePolygonQueryPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/us/v1/airspace/polygon-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "airspaceByPolygon",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AspByPolyUsV1AirspacePolygonQueryPostResponse =
        new operations.AspByPolyUsV1AirspacePolygonQueryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.airspacePolyResponse = utils.objectToClass(
              httpRes?.data,
              shared.AirspacePolyResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve all requested types of airspace traversed by route.
   *
   * @remarks
   * Retrieve selected types of airspace traversed by route. Request body parameters are:
   * * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
   * * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
   *
   * Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
   * * CAS (Controlled Airspace)
   *     - *name*
   *     - *cas_class*: B, C, D, or E2
   *     - *floor*: integer value in ft MSL
   *     - *ceiling*: integer value in ft MSL
   *     - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
   * * SUA (Special Use Airspace)
   *     - *name*
   *     - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
   *     - *floor*: lower limit of the airspace
   *     - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
   *     - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
   *     - *ceiling*: upper limit of the airspace
   *     - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
   *     - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
   * * MAA (Miscellaneous Activity Area)
   *     - *name*
   *     - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
   *     - *use_times*: textual description of days/times when activity in the area should be expected
   * * MTR (Military Training Route)
   *     - *name*
   *     - *use_times*: textual description of days/times when MTR is active/hot
   *     - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
   *     - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
   */
  aspByRouteUsV1AirspaceRouteQueryPost(
    req: operations.AspByRouteUsV1AirspaceRouteQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AspByRouteUsV1AirspaceRouteQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AspByRouteUsV1AirspaceRouteQueryPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/us/v1/airspace/route-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "airspaceByRoute",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AspByRouteUsV1AirspaceRouteQueryPostResponse =
        new operations.AspByRouteUsV1AirspaceRouteQueryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.airspaceRouteResponse = utils.objectToClass(
              httpRes?.data,
              shared.AirspaceRouteResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }
}
