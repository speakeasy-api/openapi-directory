// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProvinceIDEnum - Canadian province abbreviations
type ProvinceIDEnum string

const (
	ProvinceIDEnumAb ProvinceIDEnum = "AB"
	ProvinceIDEnumBc ProvinceIDEnum = "BC"
	ProvinceIDEnumMb ProvinceIDEnum = "MB"
	ProvinceIDEnumNb ProvinceIDEnum = "NB"
	ProvinceIDEnumNl ProvinceIDEnum = "NL"
	ProvinceIDEnumNs ProvinceIDEnum = "NS"
	ProvinceIDEnumNt ProvinceIDEnum = "NT"
	ProvinceIDEnumNu ProvinceIDEnum = "NU"
	ProvinceIDEnumOn ProvinceIDEnum = "ON"
	ProvinceIDEnumPe ProvinceIDEnum = "PE"
	ProvinceIDEnumQc ProvinceIDEnum = "QC"
	ProvinceIDEnumSk ProvinceIDEnum = "SK"
	ProvinceIDEnumYt ProvinceIDEnum = "YT"
)

func (e ProvinceIDEnum) ToPointer() *ProvinceIDEnum {
	return &e
}

func (e *ProvinceIDEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AB":
		fallthrough
	case "BC":
		fallthrough
	case "MB":
		fallthrough
	case "NB":
		fallthrough
	case "NL":
		fallthrough
	case "NS":
		fallthrough
	case "NT":
		fallthrough
	case "NU":
		fallthrough
	case "ON":
		fallthrough
	case "PE":
		fallthrough
	case "QC":
		fallthrough
	case "SK":
		fallthrough
	case "YT":
		*e = ProvinceIDEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvinceIDEnum: %v", v)
	}
}

// ProvinceOptionalEnum - Whether this province optionally observes a given holiday.
type ProvinceOptionalEnum int64

const (
	ProvinceOptionalEnumOne ProvinceOptionalEnum = 1
)

func (e ProvinceOptionalEnum) ToPointer() *ProvinceOptionalEnum {
	return &e
}

func (e *ProvinceOptionalEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		*e = ProvinceOptionalEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvinceOptionalEnum: %v", v)
	}
}

// Province - A Canadian province or territory
type Province struct {
	// Canadian province abbreviations
	ID ProvinceIDEnum `json:"id"`
	// English name
	NameEn string `json:"nameEn"`
	// French name
	NameFr string `json:"nameFr"`
	// A Canadian holiday. Includes a name, the literal date of the holiday, the observed date of the holiday (ie, accommodating for weekends), and a list of regions that observe this holiday.
	NextHoliday *Holiday `json:"nextHoliday,omitempty"`
	// Whether this province optionally observes a given holiday.
	Optional  *ProvinceOptionalEnum `json:"optional,omitempty"`
	Provinces []Holiday             `json:"provinces,omitempty"`
	// Name of reference page with public holidays for this region
	SourceEn string `json:"sourceEn"`
	// URL to public holidays reference for this region
	SourceLink string `json:"sourceLink"`
}
