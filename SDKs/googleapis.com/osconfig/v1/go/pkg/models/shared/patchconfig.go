// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PatchConfigRebootConfigEnum - Post-patch reboot settings.
type PatchConfigRebootConfigEnum string

const (
	PatchConfigRebootConfigEnumRebootConfigUnspecified PatchConfigRebootConfigEnum = "REBOOT_CONFIG_UNSPECIFIED"
	PatchConfigRebootConfigEnumDefault                 PatchConfigRebootConfigEnum = "DEFAULT"
	PatchConfigRebootConfigEnumAlways                  PatchConfigRebootConfigEnum = "ALWAYS"
	PatchConfigRebootConfigEnumNever                   PatchConfigRebootConfigEnum = "NEVER"
)

func (e *PatchConfigRebootConfigEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "REBOOT_CONFIG_UNSPECIFIED":
		fallthrough
	case "DEFAULT":
		fallthrough
	case "ALWAYS":
		fallthrough
	case "NEVER":
		*e = PatchConfigRebootConfigEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchConfigRebootConfigEnum: %s", s)
	}
}

// PatchConfig - Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfig struct {
	// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
	Apt *AptSettings `json:"apt,omitempty"`
	// Googet patching is performed by running `googet update`.
	Goo map[string]interface{} `json:"goo,omitempty"`
	// Allows the patch job to run on Managed instance groups (MIGs).
	MigInstancesAllowed *bool `json:"migInstancesAllowed,omitempty"`
	// A step that runs an executable for a PatchJob.
	PostStep *ExecStep `json:"postStep,omitempty"`
	// A step that runs an executable for a PatchJob.
	PreStep *ExecStep `json:"preStep,omitempty"`
	// Post-patch reboot settings.
	RebootConfig *PatchConfigRebootConfigEnum `json:"rebootConfig,omitempty"`
	// Windows patching is performed using the Windows Update Agent.
	WindowsUpdate *WindowsUpdateSettings `json:"windowsUpdate,omitempty"`
	// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
	Yum *YumSettings `json:"yum,omitempty"`
	// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
	Zypper *ZypperSettings `json:"zypper,omitempty"`
}
