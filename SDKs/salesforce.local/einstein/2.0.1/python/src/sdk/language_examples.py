"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class LanguageExamples:
    r"""Resources that manage text examples."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_examples(self, request: operations.GetExamplesRequest, security: operations.GetExamplesSecurity) -> operations.GetExamplesResponse:
        r"""Get All Examples
        Returns all the examples for the specified dataset,
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetExamplesRequest, base_url, '/v2/language/datasets/{datasetId}/examples', request)
        
        query_params = utils.get_query_params(operations.GetExamplesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetExamplesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExampleList])
                res.example_list = out

        return res

    def get_examples_by_label(self, request: operations.GetExamplesByLabelRequest, security: operations.GetExamplesByLabelSecurity) -> operations.GetExamplesByLabelResponse:
        r"""Get All Examples for Label
        Returns all the examples for the specified label. Returns both uploaded examples and feedback examples.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/language/examples'
        
        query_params = utils.get_query_params(operations.GetExamplesByLabelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetExamplesByLabelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExampleList])
                res.example_list = out

        return res

    def provide_feedback(self, request: operations.ProvideFeedbackRequestBody, security: operations.ProvideFeedbackSecurity) -> operations.ProvideFeedbackResponse:
        r"""Create a Feedback Example
        Adds a feedback example to the dataset associated with the specified model.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/language/feedback'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProvideFeedbackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Example])
                res.example = out

        return res

    def update_dataset_async(self, request: operations.UpdateDatasetAsyncRequest, security: operations.UpdateDatasetAsyncSecurity) -> operations.UpdateDatasetAsyncResponse:
        r"""Create Examples From a File
        Adds examples from a .csv, .tsv, or .json file to a dataset.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDatasetAsyncRequest, base_url, '/v2/language/datasets/{datasetId}/upload', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDatasetAsyncResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dataset])
                res.dataset = out

        return res

    