"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudchannelv1repricingconfig as shared_googlecloudchannelv1repricingconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudChannelV1ChannelPartnerRepricingConfig:
    r"""Configuration for how a distributor will rebill a channel partner (also known as a distributor-authorized reseller)."""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name of the ChannelPartnerRepricingConfig. Format: accounts/{account_id}/channelPartnerLinks/{channel_partner_id}/channelPartnerRepricingConfigs/{id}."""  
    repricing_config: Optional[shared_googlecloudchannelv1repricingconfig.GoogleCloudChannelV1RepricingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repricingConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for repricing a Google bill over a period of time."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp of an update to the repricing rule. If `update_time` is after RepricingConfig.effective_invoice_month then it indicates this was set mid-month."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudChannelV1ChannelPartnerRepricingConfigInput:
    r"""Configuration for how a distributor will rebill a channel partner (also known as a distributor-authorized reseller)."""
    
    repricing_config: Optional[shared_googlecloudchannelv1repricingconfig.GoogleCloudChannelV1RepricingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repricingConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for repricing a Google bill over a period of time."""  
    