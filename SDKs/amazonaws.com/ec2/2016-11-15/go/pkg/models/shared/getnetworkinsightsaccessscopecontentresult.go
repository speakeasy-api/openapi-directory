// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum string

const (
	GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnumTCP GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum = "tcp"
	GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnumUDP GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum = "udp"
)

func (e GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum) ToPointer() *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum {
	return &e
}

func (e *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "udp":
		*e = GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum: %v", v)
	}
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatement - The packet header statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatement struct {
	DestinationAddresses   []string
	DestinationPorts       []string
	DestinationPrefixLists []string
	Protocols              []GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum
	SourceAddresses        []string
	SourcePorts            []string
	SourcePrefixLists      []string
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationResourceStatement - The resource statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationResourceStatement struct {
	ResourceTypes []string
	Resources     []string
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestination - The destination.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestination struct {
	PacketHeaderStatement *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatement
	ResourceStatement     *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestinationResourceStatement
}

type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum string

const (
	GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnumTCP GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum = "tcp"
	GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnumUDP GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum = "udp"
)

func (e GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum) ToPointer() *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum {
	return &e
}

func (e *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "udp":
		*e = GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum: %v", v)
	}
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatement - The packet header statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatement struct {
	DestinationAddresses   []string
	DestinationPorts       []string
	DestinationPrefixLists []string
	Protocols              []GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum
	SourceAddresses        []string
	SourcePorts            []string
	SourcePrefixLists      []string
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourceResourceStatement - The resource statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourceResourceStatement struct {
	ResourceTypes []string
	Resources     []string
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSource - The source.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSource struct {
	PacketHeaderStatement *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatement
	ResourceStatement     *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSourceResourceStatement
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsThroughResourcesResourceStatement - The resource statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsThroughResourcesResourceStatement struct {
	ResourceTypes []string
	Resources     []string
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsThroughResources - Describes a through resource statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsThroughResources struct {
	ResourceStatement *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsThroughResourcesResourceStatement
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePaths - Describes a path.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePaths struct {
	Destination      *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsDestination
	Source           *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsSource
	ThroughResources []GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePathsThroughResources
}

type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum string

const (
	GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnumTCP GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum = "tcp"
	GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnumUDP GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum = "udp"
)

func (e GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum) ToPointer() *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum {
	return &e
}

func (e *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "udp":
		*e = GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum: %v", v)
	}
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatement - The packet header statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatement struct {
	DestinationAddresses   []string
	DestinationPorts       []string
	DestinationPrefixLists []string
	Protocols              []GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum
	SourceAddresses        []string
	SourcePorts            []string
	SourcePrefixLists      []string
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationResourceStatement - The resource statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationResourceStatement struct {
	ResourceTypes []string
	Resources     []string
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestination - The destination.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestination struct {
	PacketHeaderStatement *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatement
	ResourceStatement     *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestinationResourceStatement
}

type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum string

const (
	GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnumTCP GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum = "tcp"
	GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnumUDP GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum = "udp"
)

func (e GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum) ToPointer() *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum {
	return &e
}

func (e *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "udp":
		*e = GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum: %v", v)
	}
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatement - The packet header statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatement struct {
	DestinationAddresses   []string
	DestinationPorts       []string
	DestinationPrefixLists []string
	Protocols              []GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum
	SourceAddresses        []string
	SourcePorts            []string
	SourcePrefixLists      []string
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourceResourceStatement - The resource statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourceResourceStatement struct {
	ResourceTypes []string
	Resources     []string
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSource - The source.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSource struct {
	PacketHeaderStatement *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatement
	ResourceStatement     *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSourceResourceStatement
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsThroughResourcesResourceStatement - The resource statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsThroughResourcesResourceStatement struct {
	ResourceTypes []string
	Resources     []string
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsThroughResources - Describes a through resource statement.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsThroughResources struct {
	ResourceStatement *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsThroughResourcesResourceStatement
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPaths - Describes a path.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPaths struct {
	Destination      *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsDestination
	Source           *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsSource
	ThroughResources []GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPathsThroughResources
}

// GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContent - The Network Access Scope content.
type GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContent struct {
	ExcludePaths                 []GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentExcludePaths
	MatchPaths                   []GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContentMatchPaths
	NetworkInsightsAccessScopeID *string
}

// GetNetworkInsightsAccessScopeContentResult - Success
type GetNetworkInsightsAccessScopeContentResult struct {
	NetworkInsightsAccessScopeContent *GetNetworkInsightsAccessScopeContentResultNetworkInsightsAccessScopeContent
}
