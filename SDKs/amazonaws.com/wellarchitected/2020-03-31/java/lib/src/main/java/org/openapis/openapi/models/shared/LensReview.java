/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * LensReview - A lens review of a question.
 */
public class LensReview {
    /**
     * &lt;p&gt;The alias of the lens.&lt;/p&gt; &lt;p&gt;For Amazon Web Services official lenses, this is either the lens alias, such as &lt;code&gt;serverless&lt;/code&gt;, or the lens ARN, such as &lt;code&gt;arn:aws:wellarchitected:us-east-1::lens/serverless&lt;/code&gt;. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.&lt;/p&gt; &lt;p&gt;For custom lenses, this is the lens ARN, such as &lt;code&gt;arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Each lens is identified by its &lt;a&gt;LensSummary$LensAlias&lt;/a&gt;.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LensAlias")
    public String lensAlias;

    public LensReview withLensAlias(String lensAlias) {
        this.lensAlias = lensAlias;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LensArn")
    public String lensArn;

    public LensReview withLensArn(String lensArn) {
        this.lensArn = lensArn;
        return this;
    }
    
    /**
     * The full name of the lens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LensName")
    public String lensName;

    public LensReview withLensName(String lensName) {
        this.lensName = lensName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LensStatus")
    public LensStatusEnum lensStatus;

    public LensReview withLensStatus(LensStatusEnum lensStatus) {
        this.lensStatus = lensStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LensVersion")
    public String lensVersion;

    public LensReview withLensVersion(String lensVersion) {
        this.lensVersion = lensVersion;
        return this;
    }
    
    /**
     * The token to use to retrieve the next set of results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NextToken")
    public String nextToken;

    public LensReview withNextToken(String nextToken) {
        this.nextToken = nextToken;
        return this;
    }
    
    /**
     * The notes associated with the workload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Notes")
    public String notes;

    public LensReview withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * List of pillar review summaries of lens review in a workload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PillarReviewSummaries")
    public PillarReviewSummary[] pillarReviewSummaries;

    public LensReview withPillarReviewSummaries(PillarReviewSummary[] pillarReviewSummaries) {
        this.pillarReviewSummaries = pillarReviewSummaries;
        return this;
    }
    
    /**
     * A map from risk names to the count of how many questions have that rating.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RiskCounts")
    public java.util.Map<String, Long> riskCounts;

    public LensReview withRiskCounts(java.util.Map<String, Long> riskCounts) {
        this.riskCounts = riskCounts;
        return this;
    }
    
    /**
     * The date and time recorded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedAt")
    public OffsetDateTime updatedAt;

    public LensReview withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public LensReview(){}
}
