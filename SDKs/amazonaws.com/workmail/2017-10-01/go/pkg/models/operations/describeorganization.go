// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeOrganizationXAmzTargetEnum
type DescribeOrganizationXAmzTargetEnum string

const (
	DescribeOrganizationXAmzTargetEnumWorkMailServiceDescribeOrganization DescribeOrganizationXAmzTargetEnum = "WorkMailService.DescribeOrganization"
)

func (e DescribeOrganizationXAmzTargetEnum) ToPointer() *DescribeOrganizationXAmzTargetEnum {
	return &e
}

func (e *DescribeOrganizationXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WorkMailService.DescribeOrganization":
		*e = DescribeOrganizationXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeOrganizationXAmzTargetEnum: %v", v)
	}
}

type DescribeOrganizationRequest struct {
	DescribeOrganizationRequest shared.DescribeOrganizationRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  DescribeOrganizationXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeOrganizationResponse struct {
	ContentType string
	// Success
	DescribeOrganizationResponse *shared.DescribeOrganizationResponse
	// InvalidParameterException
	InvalidParameterException interface{}
	// OrganizationNotFoundException
	OrganizationNotFoundException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
}
