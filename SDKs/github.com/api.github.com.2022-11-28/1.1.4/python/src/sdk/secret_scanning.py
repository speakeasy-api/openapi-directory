"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class SecretScanning:
    r"""Retrieve secret scanning alerts from a repository."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def secret_scanning_get_alert(self, request: operations.SecretScanningGetAlertRequest) -> operations.SecretScanningGetAlertResponse:
        r"""Get a secret scanning alert
        Gets a single secret scanning alert detected in an eligible repository.
        To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
        For public repositories, you may instead use the `public_repo` scope.
        
        GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretScanningGetAlertRequest, base_url, '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretScanningGetAlertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SecretScanningAlert])
                res.secret_scanning_alert = out
        elif http_res.status_code in [304, 404]:
            pass
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SecretScanningGetAlert503ApplicationJSON])
                res.secret_scanning_get_alert_503_application_json_object = out

        return res

    def secret_scanning_list_alerts_for_enterprise(self, request: operations.SecretScanningListAlertsForEnterpriseRequest) -> operations.SecretScanningListAlertsForEnterpriseResponse:
        r"""List secret scanning alerts for an enterprise
        Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
        To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
        https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretScanningListAlertsForEnterpriseRequest, base_url, '/enterprises/{enterprise}/secret-scanning/alerts', request)
        
        query_params = utils.get_query_params(operations.SecretScanningListAlertsForEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretScanningListAlertsForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OrganizationSecretScanningAlert]])
                res.organization_secret_scanning_alerts = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SecretScanningListAlertsForEnterprise503ApplicationJSON])
                res.secret_scanning_list_alerts_for_enterprise_503_application_json_object = out

        return res

    def secret_scanning_list_alerts_for_org(self, request: operations.SecretScanningListAlertsForOrgRequest) -> operations.SecretScanningListAlertsForOrgResponse:
        r"""List secret scanning alerts for an organization
        Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
        To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
        For public repositories, you may instead use the `public_repo` scope.
        
        GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretScanningListAlertsForOrgRequest, base_url, '/orgs/{org}/secret-scanning/alerts', request)
        
        query_params = utils.get_query_params(operations.SecretScanningListAlertsForOrgRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretScanningListAlertsForOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OrganizationSecretScanningAlert]])
                res.organization_secret_scanning_alerts = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SecretScanningListAlertsForOrg503ApplicationJSON])
                res.secret_scanning_list_alerts_for_org_503_application_json_object = out

        return res

    def secret_scanning_list_alerts_for_repo(self, request: operations.SecretScanningListAlertsForRepoRequest) -> operations.SecretScanningListAlertsForRepoResponse:
        r"""List secret scanning alerts for a repository
        Lists secret scanning alerts for an eligible repository, from newest to oldest.
        To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
        For public repositories, you may instead use the `public_repo` scope.
        
        GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretScanningListAlertsForRepoRequest, base_url, '/repos/{owner}/{repo}/secret-scanning/alerts', request)
        
        query_params = utils.get_query_params(operations.SecretScanningListAlertsForRepoRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretScanningListAlertsForRepoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SecretScanningAlert]])
                res.secret_scanning_alerts = out
        elif http_res.status_code == 404:
            pass
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SecretScanningListAlertsForRepo503ApplicationJSON])
                res.secret_scanning_list_alerts_for_repo_503_application_json_object = out

        return res

    def secret_scanning_list_locations_for_alert(self, request: operations.SecretScanningListLocationsForAlertRequest) -> operations.SecretScanningListLocationsForAlertResponse:
        r"""List locations for a secret scanning alert
        Lists all locations for a given secret scanning alert for an eligible repository.
        To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
        For public repositories, you may instead use the `public_repo` scope.
        
        GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
        https://docs.github.com/rest/reference/secret-scanning#list-locations-for-a-secret-scanning-alert - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretScanningListLocationsForAlertRequest, base_url, '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations', request)
        
        query_params = utils.get_query_params(operations.SecretScanningListLocationsForAlertRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretScanningListLocationsForAlertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SecretScanningLocation]])
                res.secret_scanning_locations = out
        elif http_res.status_code == 404:
            pass
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SecretScanningListLocationsForAlert503ApplicationJSON])
                res.secret_scanning_list_locations_for_alert_503_application_json_object = out

        return res

    def secret_scanning_update_alert(self, request: operations.SecretScanningUpdateAlertRequest) -> operations.SecretScanningUpdateAlertResponse:
        r"""Update a secret scanning alert
        Updates the status of a secret scanning alert in an eligible repository.
        To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
        For public repositories, you may instead use the `public_repo` scope.
        
        GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
        https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretScanningUpdateAlertRequest, base_url, '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretScanningUpdateAlertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SecretScanningAlert])
                res.secret_scanning_alert = out
        elif http_res.status_code in [400, 404, 422]:
            pass
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SecretScanningUpdateAlert503ApplicationJSON])
                res.secret_scanning_update_alert_503_application_json_object = out

        return res

    