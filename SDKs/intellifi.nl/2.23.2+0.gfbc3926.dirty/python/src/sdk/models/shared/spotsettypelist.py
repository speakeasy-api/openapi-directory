"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SpotSetTypeListRestrictions:
    r"""Restrict changes spot and brain."""
    
    allow_server_edit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_server_edit'), 'exclude': lambda f: f is None }})
    r"""Server can change this set."""  
    allow_spot_edit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_spot_edit'), 'exclude': lambda f: f is None }})
    r"""Spots can change set, differences from the brain server will be merged with the device"""  
    
class SpotSetTypeListTypeEnum(str, Enum):
    r"""Spot set type `list`; List of items. Matches this set if Item is part of this list."""
    LIST = 'list'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SpotSetTypeListInput:
    
    itemlist_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemlist_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""Number, list limit, default `1000` if not specified."""  
    restrictions: Optional[SpotSetTypeListRestrictions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictions'), 'exclude': lambda f: f is None }})
    r"""Restrict changes spot and brain."""  
    setid: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setid'), 'exclude': lambda f: f is None }})
    r"""Spot set unique identifier. Must be unique within a single device"""  
    type: Optional[SpotSetTypeListTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Spot set type `list`; List of items. Matches this set if Item is part of this list."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SpotSetTypeList:
    
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by'), 'exclude': lambda f: f is None }})
    r"""Who was responsible for the creation of this spot list. Value determines who's allowed to manages this object."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    itemlist_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemlist_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""Number, list limit, default `1000` if not specified."""  
    mutation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mutation'), 'exclude': lambda f: f is None }})
    r"""Last mutation that was synchronized to the device. This is used for internal synchronization between the device and the server."""  
    restrictions: Optional[SpotSetTypeListRestrictions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictions'), 'exclude': lambda f: f is None }})
    r"""Restrict changes spot and brain."""  
    setid: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setid'), 'exclude': lambda f: f is None }})
    r"""Spot set unique identifier. Must be unique within a single device"""  
    sha1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha1'), 'exclude': lambda f: f is None }})
    r"""The sha1 checksum of the list. This will change when the list is mutated."""  
    spot_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spot_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for resource."""  
    time_created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_created'), 'exclude': lambda f: f is None }})
    r"""[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was created."""  
    time_updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_updated'), 'exclude': lambda f: f is None }})
    r"""[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string for when this resource was updated."""  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Total amount of items in this set"""  
    type: Optional[SpotSetTypeListTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Spot set type `list`; List of items. Matches this set if Item is part of this list."""  
    