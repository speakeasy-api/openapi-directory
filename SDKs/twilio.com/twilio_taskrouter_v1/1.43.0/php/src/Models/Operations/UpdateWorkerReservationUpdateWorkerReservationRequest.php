<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class UpdateWorkerReservationUpdateWorkerReservationRequest
{
    /**
     * Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
     * 
     * @var ?string $beep
     */
	#[SpeakeasyMetadata('form:name=Beep')]
    public ?string $beep = null;
    
    /**
     * Whether to play a notification beep when the customer joins.
     * 
     * @var ?bool $beepOnCustomerEntrance
     */
	#[SpeakeasyMetadata('form:name=BeepOnCustomerEntrance')]
    public ?bool $beepOnCustomerEntrance = null;
    
    /**
     * Whether to accept a reservation when executing a Call instruction.
     * 
     * @var ?bool $callAccept
     */
	#[SpeakeasyMetadata('form:name=CallAccept')]
    public ?bool $callAccept = null;
    
    /**
     * The Caller ID of the outbound call when executing a Call instruction.
     * 
     * @var ?string $callFrom
     */
	#[SpeakeasyMetadata('form:name=CallFrom')]
    public ?string $callFrom = null;
    
    /**
     * Whether to record both legs of a call when executing a Call instruction.
     * 
     * @var ?string $callRecord
     */
	#[SpeakeasyMetadata('form:name=CallRecord')]
    public ?string $callRecord = null;
    
    /**
     * The URL to call for the completed call event when executing a Call instruction.
     * 
     * @var ?string $callStatusCallbackUrl
     */
	#[SpeakeasyMetadata('form:name=CallStatusCallbackUrl')]
    public ?string $callStatusCallbackUrl = null;
    
    /**
     * The timeout for a call when executing a Call instruction.
     * 
     * @var ?int $callTimeout
     */
	#[SpeakeasyMetadata('form:name=CallTimeout')]
    public ?int $callTimeout = null;
    
    /**
     * The contact URI of the worker when executing a Call instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     * 
     * @var ?string $callTo
     */
	#[SpeakeasyMetadata('form:name=CallTo')]
    public ?string $callTo = null;
    
    /**
     * TwiML URI executed on answering the worker's leg as a result of the Call instruction.
     * 
     * @var ?string $callUrl
     */
	#[SpeakeasyMetadata('form:name=CallUrl')]
    public ?string $callUrl = null;
    
    /**
     * Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
     * 
     * @var ?string $conferenceRecord
     */
	#[SpeakeasyMetadata('form:name=ConferenceRecord')]
    public ?string $conferenceRecord = null;
    
    /**
     * The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
     * 
     * @var ?string $conferenceRecordingStatusCallback
     */
	#[SpeakeasyMetadata('form:name=ConferenceRecordingStatusCallback')]
    public ?string $conferenceRecordingStatusCallback = null;
    
    /**
     * The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum $conferenceRecordingStatusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=ConferenceRecordingStatusCallbackMethod')]
    public ?UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum $conferenceRecordingStatusCallbackMethod = null;
    
    /**
     * The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
     * 
     * @var ?string $conferenceStatusCallback
     */
	#[SpeakeasyMetadata('form:name=ConferenceStatusCallback')]
    public ?string $conferenceStatusCallback = null;
    
    /**
     * The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\WorkerReservationEnumConferenceEventEnum> $conferenceStatusCallbackEvent
     */
	#[SpeakeasyMetadata('form:name=ConferenceStatusCallbackEvent')]
    public ?array $conferenceStatusCallbackEvent = null;
    
    /**
     * The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum $conferenceStatusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=ConferenceStatusCallbackMethod')]
    public ?UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum $conferenceStatusCallbackMethod = null;
    
    /**
     * Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
     * 
     * @var ?string $conferenceTrim
     */
	#[SpeakeasyMetadata('form:name=ConferenceTrim')]
    public ?string $conferenceTrim = null;
    
    /**
     * The caller ID of the call to the worker when executing a Dequeue instruction.
     * 
     * @var ?string $dequeueFrom
     */
	#[SpeakeasyMetadata('form:name=DequeueFrom')]
    public ?string $dequeueFrom = null;
    
    /**
     * The SID of the Activity resource to start after executing a Dequeue instruction.
     * 
     * @var ?string $dequeuePostWorkActivitySid
     */
	#[SpeakeasyMetadata('form:name=DequeuePostWorkActivitySid')]
    public ?string $dequeuePostWorkActivitySid = null;
    
    /**
     * Whether to record both legs of a call when executing a Dequeue instruction or which leg to record.
     * 
     * @var ?string $dequeueRecord
     */
	#[SpeakeasyMetadata('form:name=DequeueRecord')]
    public ?string $dequeueRecord = null;
    
    /**
     * The call progress events sent via webhooks as a result of a Dequeue instruction.
     * 
     * @var ?array<string> $dequeueStatusCallbackEvent
     */
	#[SpeakeasyMetadata('form:name=DequeueStatusCallbackEvent')]
    public ?array $dequeueStatusCallbackEvent = null;
    
    /**
     * The callback URL for completed call event when executing a Dequeue instruction.
     * 
     * @var ?string $dequeueStatusCallbackUrl
     */
	#[SpeakeasyMetadata('form:name=DequeueStatusCallbackUrl')]
    public ?string $dequeueStatusCallbackUrl = null;
    
    /**
     * The timeout for call when executing a Dequeue instruction.
     * 
     * @var ?int $dequeueTimeout
     */
	#[SpeakeasyMetadata('form:name=DequeueTimeout')]
    public ?int $dequeueTimeout = null;
    
    /**
     * The contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     * 
     * @var ?string $dequeueTo
     */
	#[SpeakeasyMetadata('form:name=DequeueTo')]
    public ?string $dequeueTo = null;
    
    /**
     * Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`.
     * 
     * @var ?bool $earlyMedia
     */
	#[SpeakeasyMetadata('form:name=EarlyMedia')]
    public ?bool $earlyMedia = null;
    
    /**
     * Whether to end the conference when the customer leaves.
     * 
     * @var ?bool $endConferenceOnCustomerExit
     */
	#[SpeakeasyMetadata('form:name=EndConferenceOnCustomerExit')]
    public ?bool $endConferenceOnCustomerExit = null;
    
    /**
     * Whether to end the conference when the agent leaves.
     * 
     * @var ?bool $endConferenceOnExit
     */
	#[SpeakeasyMetadata('form:name=EndConferenceOnExit')]
    public ?bool $endConferenceOnExit = null;
    
    /**
     * The caller ID of the call to the worker when executing a Conference instruction.
     * 
     * @var ?string $from
     */
	#[SpeakeasyMetadata('form:name=From')]
    public ?string $from = null;
    
    /**
     * The assignment instruction for the reservation.
     * 
     * @var ?string $instruction
     */
	#[SpeakeasyMetadata('form:name=Instruction')]
    public ?string $instruction = null;
    
    /**
     * The maximum number of participants allowed in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
     * 
     * @var ?int $maxParticipants
     */
	#[SpeakeasyMetadata('form:name=MaxParticipants')]
    public ?int $maxParticipants = null;
    
    /**
     * Whether the agent is muted in the conference. Defaults to `false`.
     * 
     * @var ?bool $muted
     */
	#[SpeakeasyMetadata('form:name=Muted')]
    public ?bool $muted = null;
    
    /**
     * The new worker activity SID after executing a Conference instruction.
     * 
     * @var ?string $postWorkActivitySid
     */
	#[SpeakeasyMetadata('form:name=PostWorkActivitySid')]
    public ?string $postWorkActivitySid = null;
    
    /**
     * Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
     * 
     * @var ?bool $record
     */
	#[SpeakeasyMetadata('form:name=Record')]
    public ?bool $record = null;
    
    /**
     * The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
     * 
     * @var ?string $recordingChannels
     */
	#[SpeakeasyMetadata('form:name=RecordingChannels')]
    public ?string $recordingChannels = null;
    
    /**
     * The URL that we should call using the `recording_status_callback_method` when the recording status changes.
     * 
     * @var ?string $recordingStatusCallback
     */
	#[SpeakeasyMetadata('form:name=RecordingStatusCallback')]
    public ?string $recordingStatusCallback = null;
    
    /**
     * The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum $recordingStatusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=RecordingStatusCallbackMethod')]
    public ?UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum $recordingStatusCallbackMethod = null;
    
    /**
     * Whether the reservation should be accepted when executing a Redirect instruction.
     * 
     * @var ?bool $redirectAccept
     */
	#[SpeakeasyMetadata('form:name=RedirectAccept')]
    public ?bool $redirectAccept = null;
    
    /**
     * The Call SID of the call parked in the queue when executing a Redirect instruction.
     * 
     * @var ?string $redirectCallSid
     */
	#[SpeakeasyMetadata('form:name=RedirectCallSid')]
    public ?string $redirectCallSid = null;
    
    /**
     * TwiML URI to redirect the call to when executing the Redirect instruction.
     * 
     * @var ?string $redirectUrl
     */
	#[SpeakeasyMetadata('form:name=RedirectUrl')]
    public ?string $redirectUrl = null;
    
    /**
     * The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
     * 
     * @var ?string $region
     */
	#[SpeakeasyMetadata('form:name=Region')]
    public ?string $region = null;
    
	#[SpeakeasyMetadata('form:name=ReservationStatus')]
    public ?\OpenAPI\OpenAPI\Models\Shared\WorkerReservationEnumStatusEnum $reservationStatus = null;
    
    /**
     * The SIP password for authentication.
     * 
     * @var ?string $sipAuthPassword
     */
	#[SpeakeasyMetadata('form:name=SipAuthPassword')]
    public ?string $sipAuthPassword = null;
    
    /**
     * The SIP username used for authentication.
     * 
     * @var ?string $sipAuthUsername
     */
	#[SpeakeasyMetadata('form:name=SipAuthUsername')]
    public ?string $sipAuthUsername = null;
    
    /**
     * Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
     * 
     * @var ?bool $startConferenceOnEnter
     */
	#[SpeakeasyMetadata('form:name=StartConferenceOnEnter')]
    public ?bool $startConferenceOnEnter = null;
    
    /**
     * The URL we should call using the `status_callback_method` to send status information to your application.
     * 
     * @var ?string $statusCallback
     */
	#[SpeakeasyMetadata('form:name=StatusCallback')]
    public ?string $statusCallback = null;
    
    /**
     * The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\WorkerReservationEnumCallStatusEnum> $statusCallbackEvent
     */
	#[SpeakeasyMetadata('form:name=StatusCallbackEvent')]
    public ?array $statusCallbackEvent = null;
    
    /**
     * The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum $statusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=StatusCallbackMethod')]
    public ?UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum $statusCallbackMethod = null;
    
    /**
     * The timeout for a call when executing a Conference instruction.
     * 
     * @var ?int $timeout
     */
	#[SpeakeasyMetadata('form:name=Timeout')]
    public ?int $timeout = null;
    
    /**
     * The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     * 
     * @var ?string $to
     */
	#[SpeakeasyMetadata('form:name=To')]
    public ?string $to = null;
    
    /**
     * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum $waitMethod
     */
	#[SpeakeasyMetadata('form:name=WaitMethod')]
    public ?UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum $waitMethod = null;
    
    /**
     * The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
     * 
     * @var ?string $waitUrl
     */
	#[SpeakeasyMetadata('form:name=WaitUrl')]
    public ?string $waitUrl = null;
    
    /**
     * The new worker activity SID if rejecting a reservation.
     * 
     * @var ?string $workerActivitySid
     */
	#[SpeakeasyMetadata('form:name=WorkerActivitySid')]
    public ?string $workerActivitySid = null;
    
	public function __construct()
	{
		$this->beep = null;
		$this->beepOnCustomerEntrance = null;
		$this->callAccept = null;
		$this->callFrom = null;
		$this->callRecord = null;
		$this->callStatusCallbackUrl = null;
		$this->callTimeout = null;
		$this->callTo = null;
		$this->callUrl = null;
		$this->conferenceRecord = null;
		$this->conferenceRecordingStatusCallback = null;
		$this->conferenceRecordingStatusCallbackMethod = null;
		$this->conferenceStatusCallback = null;
		$this->conferenceStatusCallbackEvent = null;
		$this->conferenceStatusCallbackMethod = null;
		$this->conferenceTrim = null;
		$this->dequeueFrom = null;
		$this->dequeuePostWorkActivitySid = null;
		$this->dequeueRecord = null;
		$this->dequeueStatusCallbackEvent = null;
		$this->dequeueStatusCallbackUrl = null;
		$this->dequeueTimeout = null;
		$this->dequeueTo = null;
		$this->earlyMedia = null;
		$this->endConferenceOnCustomerExit = null;
		$this->endConferenceOnExit = null;
		$this->from = null;
		$this->instruction = null;
		$this->maxParticipants = null;
		$this->muted = null;
		$this->postWorkActivitySid = null;
		$this->record = null;
		$this->recordingChannels = null;
		$this->recordingStatusCallback = null;
		$this->recordingStatusCallbackMethod = null;
		$this->redirectAccept = null;
		$this->redirectCallSid = null;
		$this->redirectUrl = null;
		$this->region = null;
		$this->reservationStatus = null;
		$this->sipAuthPassword = null;
		$this->sipAuthUsername = null;
		$this->startConferenceOnEnter = null;
		$this->statusCallback = null;
		$this->statusCallbackEvent = null;
		$this->statusCallbackMethod = null;
		$this->timeout = null;
		$this->to = null;
		$this->waitMethod = null;
		$this->waitUrl = null;
		$this->workerActivitySid = null;
	}
}
