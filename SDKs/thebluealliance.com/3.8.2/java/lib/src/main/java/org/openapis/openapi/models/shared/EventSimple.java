/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * EventSimple - Successful response
 */
public class EventSimple {
    /**
     * City, town, village, etc. the event is located in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    public String city;

    public EventSimple withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * Country the event is located in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;

    public EventSimple withCountry(String country) {
        this.country = country;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("district")
    public DistrictList district;

    public EventSimple withDistrict(DistrictList district) {
        this.district = district;
        return this;
    }
    
    /**
     * Event end date in `yyyy-mm-dd` format.
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("end_date")
    public LocalDate endDate;

    public EventSimple withEndDate(LocalDate endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * Event short code, as provided by FIRST.
     */
    @JsonProperty("event_code")
    public String eventCode;

    public EventSimple withEventCode(String eventCode) {
        this.eventCode = eventCode;
        return this;
    }
    
    /**
     * Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
     */
    @JsonProperty("event_type")
    public Long eventType;

    public EventSimple withEventType(Long eventType) {
        this.eventType = eventType;
        return this;
    }
    
    /**
     * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
     */
    @JsonProperty("key")
    public String key;

    public EventSimple withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Official name of event on record either provided by FIRST or organizers of offseason event.
     */
    @JsonProperty("name")
    public String name;

    public EventSimple withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Event start date in `yyyy-mm-dd` format.
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start_date")
    public LocalDate startDate;

    public EventSimple withStartDate(LocalDate startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * State or Province the event is located in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state_prov")
    public String stateProv;

    public EventSimple withStateProv(String stateProv) {
        this.stateProv = stateProv;
        return this;
    }
    
    /**
     * Year the event data is for.
     */
    @JsonProperty("year")
    public Long year;

    public EventSimple withYear(Long year) {
        this.year = year;
        return this;
    }
    
    public EventSimple(@JsonProperty("end_date") LocalDate endDate, @JsonProperty("event_code") String eventCode, @JsonProperty("event_type") Long eventType, @JsonProperty("key") String key, @JsonProperty("name") String name, @JsonProperty("start_date") LocalDate startDate, @JsonProperty("year") Long year) {
        this.endDate = endDate;
        this.eventCode = eventCode;
        this.eventType = eventType;
        this.key = key;
        this.name = name;
        this.startDate = startDate;
        this.year = year;
  }
}
