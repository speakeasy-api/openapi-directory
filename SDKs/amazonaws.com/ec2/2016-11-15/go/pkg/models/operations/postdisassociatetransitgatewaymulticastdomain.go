// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDisassociateTransitGatewayMulticastDomainActionEnum
type POSTDisassociateTransitGatewayMulticastDomainActionEnum string

const (
	POSTDisassociateTransitGatewayMulticastDomainActionEnumDisassociateTransitGatewayMulticastDomain POSTDisassociateTransitGatewayMulticastDomainActionEnum = "DisassociateTransitGatewayMulticastDomain"
)

func (e *POSTDisassociateTransitGatewayMulticastDomainActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DisassociateTransitGatewayMulticastDomain":
		*e = POSTDisassociateTransitGatewayMulticastDomainActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDisassociateTransitGatewayMulticastDomainActionEnum: %s", s)
	}
}

// POSTDisassociateTransitGatewayMulticastDomainVersionEnum
type POSTDisassociateTransitGatewayMulticastDomainVersionEnum string

const (
	POSTDisassociateTransitGatewayMulticastDomainVersionEnumTwoThousandAndSixteen1115 POSTDisassociateTransitGatewayMulticastDomainVersionEnum = "2016-11-15"
)

func (e *POSTDisassociateTransitGatewayMulticastDomainVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = POSTDisassociateTransitGatewayMulticastDomainVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDisassociateTransitGatewayMulticastDomainVersionEnum: %s", s)
	}
}

type POSTDisassociateTransitGatewayMulticastDomainQueryParams struct {
	Action  POSTDisassociateTransitGatewayMulticastDomainActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTDisassociateTransitGatewayMulticastDomainVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDisassociateTransitGatewayMulticastDomainHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDisassociateTransitGatewayMulticastDomainRequest struct {
	QueryParams POSTDisassociateTransitGatewayMulticastDomainQueryParams
	Headers     POSTDisassociateTransitGatewayMulticastDomainHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDisassociateTransitGatewayMulticastDomainResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
