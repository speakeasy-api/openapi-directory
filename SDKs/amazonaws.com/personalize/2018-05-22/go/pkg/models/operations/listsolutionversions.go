// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListSolutionVersionsXAmzTargetEnum
type ListSolutionVersionsXAmzTargetEnum string

const (
	ListSolutionVersionsXAmzTargetEnumAmazonPersonalizeListSolutionVersions ListSolutionVersionsXAmzTargetEnum = "AmazonPersonalize.ListSolutionVersions"
)

func (e *ListSolutionVersionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonPersonalize.ListSolutionVersions":
		*e = ListSolutionVersionsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSolutionVersionsXAmzTargetEnum: %s", s)
	}
}

type ListSolutionVersionsRequest struct {
	ListSolutionVersionsRequest shared.ListSolutionVersionsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  ListSolutionVersionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListSolutionVersionsResponse struct {
	ContentType string
	// InvalidInputException
	InvalidInputException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// Success
	ListSolutionVersionsResponse *shared.ListSolutionVersionsResponse
	StatusCode                   int
	RawResponse                  *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
