/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



/**
 * ServiceSummary - Successful operation
 */
public class ServiceSummary {
    /**
     * The currency in which all energy cost values are being expressed.
     */
    
    public String costUnit;
    public ServiceSummary withCostUnit(String costUnit) {
        this.costUnit = costUnit;
        return this;
    }
    
    /**
     * The list of devices attached to the service.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;: when using the &lt;b&gt;Services&lt;/b&gt; service, this list is always empty. It is populated only when using the &lt;b&gt;Service Details&lt;/b&gt; service.
     */
    
    public DeviceSummary[] deviceSummaries;
    public ServiceSummary withDeviceSummaries(DeviceSummary[] deviceSummaries) {
        this.deviceSummaries = deviceSummaries;
        return this;
    }
    
    /**
     * The unit in which all CO&lt;sub&gt;2&lt;/sub&gt; emission values are being expressed.
     */
    
    public String emittedCo2Unit;
    public ServiceSummary withEmittedCo2Unit(String emittedCo2Unit) {
        this.emittedCo2Unit = emittedCo2Unit;
        return this;
    }
    
    /**
     * The unit in which all energy consumption values are being expressed.
     */
    
    public String energyConsumptionUnit;
    public ServiceSummary withEnergyConsumptionUnit(String energyConsumptionUnit) {
        this.energyConsumptionUnit = energyConsumptionUnit;
        return this;
    }
    
    /**
     * The lowest heating margin among the heating margins of the devices attached to the service.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public Double heatingMargin;
    public ServiceSummary withHeatingMargin(Double heatingMargin) {
        this.heatingMargin = heatingMargin;
        return this;
    }
    
    /**
     * The percentage of devices attached to the service, whose heating margin could be found.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public Double heatingMarginCoverage;
    public ServiceSummary withHeatingMarginCoverage(Double heatingMarginCoverage) {
        this.heatingMarginCoverage = heatingMarginCoverage;
        return this;
    }
    
    /**
     * The name of the device having the lowest heating margin.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public String heatingMarginDeviceName;
    public ServiceSummary withHeatingMarginDeviceName(String heatingMarginDeviceName) {
        this.heatingMarginDeviceName = heatingMarginDeviceName;
        return this;
    }
    
    /**
     * The link to the details of the device having the lowest heating margin.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be found.
     */
    
    public String heatingMarginDeviceUrl;
    public ServiceSummary withHeatingMarginDeviceUrl(String heatingMarginDeviceUrl) {
        this.heatingMarginDeviceUrl = heatingMarginDeviceUrl;
        return this;
    }
    
    /**
     * The unit in which the heating margin of the service is being expressed.
     */
    
    public String heatingMarginUnit;
    public ServiceSummary withHeatingMarginUnit(String heatingMarginUnit) {
        this.heatingMarginUnit = heatingMarginUnit;
        return this;
    }
    
    /**
     * The name of the key used to identify the service in the history table.
     */
    
    public String historyParentIdKey;
    public ServiceSummary withHistoryParentIdKey(String historyParentIdKey) {
        this.historyParentIdKey = historyParentIdKey;
        return this;
    }
    
    /**
     * The ID of the service.
     */
    
    public String id;
    public ServiceSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The name of the service.
     */
    
    public String name;
    public ServiceSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The number of devices attached to the service.
     */
    
    public Integer numberOfDevices;
    public ServiceSummary withNumberOfDevices(Integer numberOfDevices) {
        this.numberOfDevices = numberOfDevices;
        return this;
    }
    
    /**
     * The confidence score (percentage) for the daily energy consumption, energy cost and CO&lt;sub&gt;2&lt;/sub&gt; emission values.&lt;br&gt;The lower the confidence score, the more extrapolated the values are.
     */
    
    public Double oneDayConfidence;
    public ServiceSummary withOneDayConfidence(Double oneDayConfidence) {
        this.oneDayConfidence = oneDayConfidence;
        return this;
    }
    
    /**
     * The daily cost of the energy consumed by the devices attached to the service.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneDayCost;
    public ServiceSummary withOneDayCost(Double oneDayCost) {
        this.oneDayCost = oneDayCost;
        return this;
    }
    
    /**
     * The quantity of CO&lt;sub&gt;2&lt;/sub&gt; emitted by the devices attached to the service during one day.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneDayEmittedCo2;
    public ServiceSummary withOneDayEmittedCo2(Double oneDayEmittedCo2) {
        this.oneDayEmittedCo2 = oneDayEmittedCo2;
        return this;
    }
    
    /**
     * The quantity of energy consumed by the devices attached to the service during one day.
     */
    
    public Double oneDayEnergyConsumption;
    public ServiceSummary withOneDayEnergyConsumption(Double oneDayEnergyConsumption) {
        this.oneDayEnergyConsumption = oneDayEnergyConsumption;
        return this;
    }
    
    /**
     * The confidence score (percentage) for the monthly energy consumption, energy cost and CO&lt;sub&gt;2&lt;/sub&gt; emission values.&lt;br&gt;The lower the confidence score, the more extrapolated the values are.
     */
    
    public Double oneMonthConfidence;
    public ServiceSummary withOneMonthConfidence(Double oneMonthConfidence) {
        this.oneMonthConfidence = oneMonthConfidence;
        return this;
    }
    
    /**
     * The monthly cost of the energy consumed by the devices attached to the service.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneMonthCost;
    public ServiceSummary withOneMonthCost(Double oneMonthCost) {
        this.oneMonthCost = oneMonthCost;
        return this;
    }
    
    /**
     * The quantity of CO&lt;sub&gt;2&lt;/sub&gt; emitted by the devices attached to the service during one month.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneMonthEmittedCo2;
    public ServiceSummary withOneMonthEmittedCo2(Double oneMonthEmittedCo2) {
        this.oneMonthEmittedCo2 = oneMonthEmittedCo2;
        return this;
    }
    
    /**
     * The quantity of energy consumed by the devices attached to the service during one month.
     */
    
    public Double oneMonthEnergyConsumption;
    public ServiceSummary withOneMonthEnergyConsumption(Double oneMonthEnergyConsumption) {
        this.oneMonthEnergyConsumption = oneMonthEnergyConsumption;
        return this;
    }
    
    /**
     * The confidence score (percentage) for the yearly energy consumption, energy cost and CO&lt;sub&gt;2&lt;/sub&gt; emission values.&lt;br&gt;The lower the confidence score, the more extrapolated the values are.
     */
    
    public Double oneYearConfidence;
    public ServiceSummary withOneYearConfidence(Double oneYearConfidence) {
        this.oneYearConfidence = oneYearConfidence;
        return this;
    }
    
    /**
     * The yearly cost of the energy consumed by the devices attached to the service.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneYearCost;
    public ServiceSummary withOneYearCost(Double oneYearCost) {
        this.oneYearCost = oneYearCost;
        return this;
    }
    
    /**
     * The quantity of CO&lt;sub&gt;2&lt;/sub&gt; emitted by the devices attached to the service in one year.&lt;br&gt;&lt;u&gt;Note&lt;/u&gt;:This field will only be present if a value could be computed.
     */
    
    public Double oneYearEmittedCo2;
    public ServiceSummary withOneYearEmittedCo2(Double oneYearEmittedCo2) {
        this.oneYearEmittedCo2 = oneYearEmittedCo2;
        return this;
    }
    
    /**
     * The quantity of energy consumed by the devices attached to the service during one year.
     */
    
    public Double oneYearEnergyConsumption;
    public ServiceSummary withOneYearEnergyConsumption(Double oneYearEnergyConsumption) {
        this.oneYearEnergyConsumption = oneYearEnergyConsumption;
        return this;
    }
    
    /**
     * The ID of the server providing the service.
     */
    
    public String providerId;
    public ServiceSummary withProviderId(String providerId) {
        this.providerId = providerId;
        return this;
    }
    
    /**
     * The total power consumption of the devices attached to the service.
     */
    
    public Double totalPowerConsumption;
    public ServiceSummary withTotalPowerConsumption(Double totalPowerConsumption) {
        this.totalPowerConsumption = totalPowerConsumption;
        return this;
    }
    
    /**
     * The unit in which the total power consumption of the devices attached to the service is being expressed.
     */
    
    public String totalPowerConsumptionUnit;
    public ServiceSummary withTotalPowerConsumptionUnit(String totalPowerConsumptionUnit) {
        this.totalPowerConsumptionUnit = totalPowerConsumptionUnit;
        return this;
    }
    
    /**
     * The data collection time (as an Epoch time, in seconds).
     */
    
    public Long updateTimestamp;
    public ServiceSummary withUpdateTimestamp(Long updateTimestamp) {
        this.updateTimestamp = updateTimestamp;
        return this;
    }
    
    /**
     * The link to the service details.
     */
    
    public String url;
    public ServiceSummary withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
