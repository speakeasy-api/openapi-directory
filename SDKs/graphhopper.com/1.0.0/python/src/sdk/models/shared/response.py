"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import solution as shared_solution
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ResponseStatusEnum(str, Enum):
    r"""Indicates the current status of the job"""
    WAITING_IN_QUEUE = 'waiting_in_queue'
    PROCESSING = 'processing'
    FINISHED = 'finished'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Response:
    r"""A response containing the solution"""
    
    copyrights: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyrights'), 'exclude': lambda f: f is None }})  
    processing_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_time'), 'exclude': lambda f: f is None }})
    r"""Processing time in ms. If job is still waiting in queue, processing_time is 0"""  
    solution: Optional[shared_solution.Solution] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('solution'), 'exclude': lambda f: f is None }})
    r"""Only available if status field indicates `finished`."""  
    status: Optional[ResponseStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Indicates the current status of the job"""  
    waiting_time_in_queue: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waiting_time_in_queue'), 'exclude': lambda f: f is None }})
    r"""Waiting time in ms"""  
    