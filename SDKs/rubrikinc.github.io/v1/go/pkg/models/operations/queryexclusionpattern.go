// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// QueryExclusionPatternSortByEnum - Specifies a comma-separated list of attributes to use in sorting the matches. Performs an ASCII sort of the values in the response using each specified attribute, in the order specified.
type QueryExclusionPatternSortByEnum string

const (
	QueryExclusionPatternSortByEnumPattern QueryExclusionPatternSortByEnum = "pattern"
)

func (e QueryExclusionPatternSortByEnum) ToPointer() *QueryExclusionPatternSortByEnum {
	return &e
}

func (e *QueryExclusionPatternSortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pattern":
		*e = QueryExclusionPatternSortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryExclusionPatternSortByEnum: %v", v)
	}
}

// QueryExclusionPatternSortOrderEnum - Sort order, either ascending or descending.
type QueryExclusionPatternSortOrderEnum string

const (
	QueryExclusionPatternSortOrderEnumAsc  QueryExclusionPatternSortOrderEnum = "asc"
	QueryExclusionPatternSortOrderEnumDesc QueryExclusionPatternSortOrderEnum = "desc"
)

func (e QueryExclusionPatternSortOrderEnum) ToPointer() *QueryExclusionPatternSortOrderEnum {
	return &e
}

func (e *QueryExclusionPatternSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = QueryExclusionPatternSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryExclusionPatternSortOrderEnum: %v", v)
	}
}

type QueryExclusionPatternRequest struct {
	// Filter a response based on the mutability of the pattern.
	IsMutable *bool `queryParam:"style=form,explode=true,name=is_mutable"`
	// Limit the summary information to a specified maximum number of matches. Optionally, use with offset to start the count at a specified point. Optionally, use with sort_by to perform sort on given attributes. Include sort_order to determine the ascending or descending direction of the sort.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Starting position in the list of matches. The response includes the specified numbered entry and all higher numbered entries. Use with limit to retrieve the response as smaller groups of entries, for example for paging of results.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Filter a response by making an infix comparison of the exclusion patttern in the response with the specified value.
	Pattern *string `queryParam:"style=form,explode=true,name=pattern"`
	// Limit a response to the results that have the specified primary cluster value.
	PrimaryClusterID *string `queryParam:"style=form,explode=true,name=primary_cluster_id"`
	// Specifies a comma-separated list of attributes to use in sorting the matches. Performs an ASCII sort of the values in the response using each specified attribute, in the order specified.
	SortBy *QueryExclusionPatternSortByEnum `queryParam:"style=form,explode=true,name=sort_by"`
	// Sort order, either ascending or descending.
	SortOrder *QueryExclusionPatternSortOrderEnum `queryParam:"style=form,explode=true,name=sort_order"`
	// Filter a response based on the protectable object to which the exclusion pattern applies.
	SourceID *string `queryParam:"style=form,explode=true,name=source_id"`
}

type QueryExclusionPatternResponse struct {
	ContentType string
	// Successful query results for exclusion pattern.
	ExclusionPatternDetailListResponse *shared.ExclusionPatternDetailListResponse
	StatusCode                         int
	RawResponse                        *http.Response
}
