/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetPullrequestsSelectedUserSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey?: string;

  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2?: string;
}

/**
 * Only return pull requests that are in this state. This parameter can be repeated.
 */
export enum GetPullrequestsSelectedUserStateEnum {
  Open = "OPEN",
  Merged = "MERGED",
  Declined = "DECLINED",
  Superseded = "SUPERSEDED",
}

export class GetPullrequestsSelectedUserRequest extends SpeakeasyBase {
  /**
   * This can either be the username of the pull request author, the author's UUID
   *
   * @remarks
   * surrounded by curly-braces, for example: `{account UUID}`, or the author's Atlassian ID.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=selected_user",
  })
  selectedUser: string;

  /**
   * Only return pull requests that are in this state. This parameter can be repeated.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: GetPullrequestsSelectedUserStateEnum;
}

export class GetPullrequestsSelectedUserResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * If the specified user does not exist.
   */
  @SpeakeasyMetadata()
  error?: Record<string, any>;

  /**
   * All pull requests authored by the specified user.
   */
  @SpeakeasyMetadata()
  paginatedPullrequests?: shared.PaginatedPullrequests;
}
