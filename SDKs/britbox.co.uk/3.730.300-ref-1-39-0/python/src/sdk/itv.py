"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Itv:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def activate_save_offer(self, request: operations.ActivateSaveOfferRequest, security: operations.ActivateSaveOfferSecurity) -> operations.ActivateSaveOfferResponse:
        r"""Activates the discount for a user. Only Stripe platform is currently supported."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/save-offer'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ActivateSaveOfferRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActivateSaveOfferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def change_card_details(self, request: operations.ChangeCardDetailsRequest, security: operations.ChangeCardDetailsSecurity) -> operations.ChangeCardDetailsResponse:
        r"""Change payment card details."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeCardDetailsRequest, base_url, '/itv/cards/{platform}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_change_card_details_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ChangeCardDetailsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeCardDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def change_email(self, request: operations.ChangeEmailRequest, security: operations.ChangeEmailSecurity) -> operations.ChangeEmailResponse:
        r"""Change email address related to account/profile.
        
        The expected token scope is Settings.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/changeemail'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_change_email_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ChangeEmailRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def change_marketing(self, request: operations.ChangeMarketingRequest, security: operations.ChangeMarketingSecurity) -> operations.ChangeMarketingResponse:
        r"""Change marketing preferences related to account/profile.
        
        The expected token scope is Settings.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/changemarketing'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_change_marketing_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ChangeMarketingRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeMarketingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def check_previous_entitlements(self, request: operations.CheckPreviousEntitlementsRequest, security: operations.CheckPreviousEntitlementsSecurity) -> operations.CheckPreviousEntitlementsResponse:
        r"""Check whether the user has been previously entitled."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/had/entitlements'
        
        query_params = utils.get_query_params(operations.CheckPreviousEntitlementsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckPreviousEntitlementsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvHadEntitlement])
                res.itv_had_entitlement = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def check_voucher(self, request: operations.CheckVoucherRequest, security: operations.CheckVoucherSecurity) -> operations.CheckVoucherResponse:
        r"""Validates the coupon/voucher for specified payment platform."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckVoucherRequest, base_url, '/itv/voucher/{platform}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_voucher_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CheckVoucherRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckVoucherResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvVoucher])
                res.itv_voucher = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def confirm_purchase(self, request: operations.ConfirmPurchaseRequest, security: operations.ConfirmPurchaseSecurity) -> operations.ConfirmPurchaseResponse:
        r"""Confirms purchase and returns the details of purchased subscription for specified payment platform."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfirmPurchaseRequest, base_url, '/itv/purchase/{platform}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_purchase_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ConfirmPurchaseRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmPurchaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvPurchase])
                res.itv_purchase = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def confirm_purchase_strong(self, request: operations.ConfirmPurchaseStrongRequest, security: operations.ConfirmPurchaseStrongSecurity) -> operations.ConfirmPurchaseStrongResponse:
        r"""Confirms purchase and returns the details of purchased subscription for specified payment platform."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfirmPurchaseStrongRequest, base_url, '/itv/purchase/{platform}/strong', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_purchase_strong_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ConfirmPurchaseStrongRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmPurchaseStrongResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvPurchaseStrongResponse])
                res.itv_purchase_strong_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def confirm_purchase_with_offer(self, request: operations.ConfirmPurchaseWithOfferRequest, security: operations.ConfirmPurchaseWithOfferSecurity) -> operations.ConfirmPurchaseWithOfferResponse:
        r"""Confirms purchase and returns the details of purchased subscription for specified payment platform."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfirmPurchaseWithOfferRequest, base_url, '/itv/purchase/{platform}/withoffer', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_purchase_with_offer_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ConfirmPurchaseWithOfferRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfirmPurchaseWithOfferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvPurchaseWithOfferResponse])
                res.itv_purchase_with_offer_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def delete_account(self, request: operations.DeleteAccountRequest, security: operations.DeleteAccountSecurity) -> operations.DeleteAccountResponse:
        r"""Delete account in compliance with GDPR.
        
        The expected token scope is Settings.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/deleteaccount'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_delete_account_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.DeleteAccountRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def delete_itv_purchase_platform_(self, request: operations.DeleteItvPurchasePlatformRequest, security: operations.DeleteItvPurchasePlatformSecurity) -> operations.DeleteItvPurchasePlatformResponse:
        r"""Cancel a plan subscription.
        
        A cancelled subscription will continue to be valid until the subscription
        expiry date or next renewal date.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteItvPurchasePlatformRequest, base_url, '/itv/purchase/{platform}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_cancel_subscription_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.DeleteItvPurchasePlatformRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteItvPurchasePlatformResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def execute_transaction(self, request: operations.ExecuteTransactionRequest) -> operations.ExecuteTransactionResponse:
        r"""Sends request to execute specified transaction."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExecuteTransactionRequest, base_url, '/itv/roku/transaction/{transactionid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_roku_transaction_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ExecuteTransactionRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExecuteTransactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_account_token_with_pin(self, request: operations.GetAccountTokenWithPinRequest, security: operations.GetAccountTokenWithPinSecurity) -> operations.GetAccountTokenWithPinResponse:
        r"""Provides authorization with parental control pin.
        
        Returns an array containing account token with Playback scope.
        
        Requires access token with Catalog scope.
        
        Pin must be a 4-digit string
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/pinauthorization'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_pin_auth_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.GetAccountTokenWithPinRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountTokenWithPinResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AccessToken]])
                res.access_tokens = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_billing_history(self, request: operations.GetBillingHistoryRequest, security: operations.GetBillingHistorySecurity) -> operations.GetBillingHistoryResponse:
        r"""Returns the list of billing records for specified payment platform."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBillingHistoryRequest, base_url, '/itv/billinghistory/{platform}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_billing_history_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.GetBillingHistoryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBillingHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvBillingHistory])
                res.itv_billing_history = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_card_details(self, request: operations.GetCardDetailsRequest, security: operations.GetCardDetailsSecurity) -> operations.GetCardDetailsResponse:
        r"""Get payment card details."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCardDetailsRequest, base_url, '/itv/cards/{platform}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_get_card_details_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.GetCardDetailsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCardDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvCardDetails])
                res.itv_card_details = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_current_entitlement(self, request: operations.GetCurrentEntitlementRequest, security: operations.GetCurrentEntitlementSecurity) -> operations.GetCurrentEntitlementResponse:
        r"""Returns current entitlement."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/entitlements/current'
        
        query_params = utils.get_query_params(operations.GetCurrentEntitlementRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCurrentEntitlementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvEntitlementCurrent])
                res.itv_entitlement_current = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_current_subscription(self, request: operations.GetCurrentSubscriptionRequest, security: operations.GetCurrentSubscriptionSecurity) -> operations.GetCurrentSubscriptionResponse:
        r"""Returns the details of current subscription for specified payment platform."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCurrentSubscriptionRequest, base_url, '/itv/purchase/{platform}', request)
        
        query_params = utils.get_query_params(operations.GetCurrentSubscriptionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCurrentSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvCurrentSubscription])
                res.itv_current_subscription = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_entitlements_history(self, request: operations.GetEntitlementsHistoryRequest, security: operations.GetEntitlementsHistorySecurity) -> operations.GetEntitlementsHistoryResponse:
        r"""Returns the state of subscription for any payment platform."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/entitlements/history'
        
        query_params = utils.get_query_params(operations.GetEntitlementsHistoryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEntitlementsHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvEntitlementsHistory])
                res.itv_entitlements_history = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_feature_flag(self, request: operations.GetFeatureFlagRequest) -> operations.GetFeatureFlagResponse:
        r"""Gets info whether or not a feature is enabled or disabled using a feature flag. Feature flags are set as a custom field within PM. It also supports custom feature flag data if needed. Such data can be return as well."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFeatureFlagRequest, base_url, '/itv/featureFlag/{feature}', request)
        
        query_params = utils.get_query_params(operations.GetFeatureFlagRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFeatureFlagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvFeatureFlag])
                res.itv_feature_flag = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_full_price_renewal(self, request: operations.GetFullPriceRenewalRequest, security: operations.GetFullPriceRenewalSecurity) -> operations.GetFullPriceRenewalResponse:
        r"""Returns full price renewal state and reason for specific user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/subscription/fullpricerenewal'
        
        query_params = utils.get_query_params(operations.GetFullPriceRenewalRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFullPriceRenewalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvSubscriptionFullPriceRenewal])
                res.itv_subscription_full_price_renewal = out

        return res

    def get_itv_profile_token(self, request: operations.GetItvProfileTokenRequest, security: operations.GetItvProfileTokenSecurity) -> operations.GetItvProfileTokenResponse:
        r"""Returns the ITV profile token."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/profiletoken'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_profile_token_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.GetItvProfileTokenRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItvProfileTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvProfileToken])
                res.itv_profile_token = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_public_preview(self) -> operations.GetPublicPreviewResponse:
        r"""Returns public preview for Samsung based on the page '/samsung-preview' configured in PresentationManager.
        There is a hard limit of max 40 items to be returned. It splits evenly items count into the page rows, remaining items are added into the first row.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/samsung-preview'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPublicPreviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SamsungPreview])
                res.samsung_preview = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_recommended_list(self, request: operations.GetRecommendedListRequest, security: operations.GetRecommendedListSecurity) -> operations.GetRecommendedListResponse:
        r"""Get the list of recommended items under the active profile."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/profile/recommendation/list'
        
        query_params = utils.get_query_params(operations.GetRecommendedListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRecommendedListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItemList])
                res.item_list = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_save_offer(self, request: operations.GetSaveOfferRequest, security: operations.GetSaveOfferSecurity) -> operations.GetSaveOfferResponse:
        r"""Checks the provided coupon id for a user. Only Stripe platform is currently supported."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/save-offer'
        
        query_params = utils.get_query_params(operations.GetSaveOfferRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSaveOfferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvGetDiscountResponse])
                res.itv_get_discount_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_subscription_state(self, request: operations.GetSubscriptionStateRequest, security: operations.GetSubscriptionStateSecurity) -> operations.GetSubscriptionStateResponse:
        r"""Returns the state of subscription for any payment platform."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/subscriptionstate'
        
        query_params = utils.get_query_params(operations.GetSubscriptionStateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubscriptionStateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvSubscriptionState])
                res.itv_subscription_state = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_subscription_status(self, request: operations.GetSubscriptionStatusRequest, security: operations.GetSubscriptionStatusSecurity) -> operations.GetSubscriptionStatusResponse:
        r"""Returns status of latest payment intent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSubscriptionStatusRequest, base_url, '/itv/subscription/status/{platform}', request)
        
        query_params = utils.get_query_params(operations.GetSubscriptionStatusRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubscriptionStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvSubscriptionStatusResponse])
                res.itv_subscription_status_response = out

        return res

    def get_upcoming_invoice(self, request: operations.GetUpcomingInvoiceRequest, security: operations.GetUpcomingInvoiceSecurity) -> operations.GetUpcomingInvoiceResponse:
        r"""Returns an upcoming invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/upcominginvoice'
        
        query_params = utils.get_query_params(operations.GetUpcomingInvoiceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUpcomingInvoiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvGetDiscountResponse])
                res.itv_get_discount_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_voucher_by_id(self, request: operations.GetVoucherByIDRequest, security: operations.GetVoucherByIDSecurity) -> operations.GetVoucherByIDResponse:
        r"""Checks the provided coupon id for a user. Only Stripe platform is currently supported."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVoucherByIDRequest, base_url, '/itv/voucher/{planId}/{voucherId}', request)
        
        query_params = utils.get_query_params(operations.GetVoucherByIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVoucherByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvVoucher])
                res.itv_voucher = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_itv_itemsummary_external_id_(self, request: operations.GetItvItemsummaryExternalIDRequest) -> operations.GetItvItemsummaryExternalIDResponse:
        r"""Redirects to corresponding Axis Item details page."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetItvItemsummaryExternalIDRequest, base_url, '/itv/itemsummary/{externalId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItvItemsummaryExternalIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 302:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_itv_itemsummary_external_id_302_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_itv_plans_platform_(self, request: operations.GetItvPlansPlatformRequest, security: operations.GetItvPlansPlatformSecurity) -> operations.GetItvPlansPlatformResponse:
        r"""Returns the plans available for specified payment platform."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetItvPlansPlatformRequest, base_url, '/itv/plans/{platform}', request)
        
        query_params = utils.get_query_params(operations.GetItvPlansPlatformRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItvPlansPlatformResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvPlans])
                res.itv_plans = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_itv_profile(self, request: operations.GetItvProfileRequest, security: operations.GetItvProfileSecurity) -> operations.GetItvProfileResponse:
        r"""Returns the ITV profile object."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/profile'
        
        query_params = utils.get_query_params(operations.GetItvProfileRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItvProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_itv_profile_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def get_itv_roku_plans(self, request: operations.GetItvRokuPlansRequest) -> operations.GetItvRokuPlansResponse:
        r"""Gets available Roku plans."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/roku/plans'
        
        query_params = utils.get_query_params(operations.GetItvRokuPlansRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItvRokuPlansResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RokuPlans])
                res.roku_plans = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def google_pay_subscription(self, request: operations.GooglePaySubscriptionRequest, security: operations.GooglePaySubscriptionSecurity) -> operations.GooglePaySubscriptionResponse:
        r"""Get the list of recommended items under the active profile."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/googlepay/subscription'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_google_pay_subscription_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.GooglePaySubscriptionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GooglePaySubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def resubscribe(self, request: operations.ResubscribeRequest, security: operations.ResubscribeSecurity) -> operations.ResubscribeResponse:
        r"""Resubscription for a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResubscribeRequest, base_url, '/itv/resubscribe/{platform}', request)
        
        query_params = utils.get_query_params(operations.ResubscribeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResubscribeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.resubscribe_200_application_json_object = out
        elif http_res.status_code in [401, 404, 406, 409, 500]:
            pass

        return res

    def update_payment_intent_strong(self, request: operations.UpdatePaymentIntentStrongRequest, security: operations.UpdatePaymentIntentStrongSecurity) -> operations.UpdatePaymentIntentStrongResponse:
        r"""Change payment method details."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePaymentIntentStrongRequest, base_url, '/itv/updateIntent/strong/{platform}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_update_intent_strong_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.UpdatePaymentIntentStrongRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePaymentIntentStrongResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ItvUpdateIntentStrongResponse])
                res.itv_update_intent_strong_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def update_payment_method_strong(self, request: operations.UpdatePaymentMethodStrongRequest, security: operations.UpdatePaymentMethodStrongSecurity) -> operations.UpdatePaymentMethodStrongResponse:
        r"""Change payment method details."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePaymentMethodStrongRequest, base_url, '/itv/updatePayment/strong/{platform}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_update_payment_strong_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.UpdatePaymentMethodStrongRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePaymentMethodStrongResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def update_profile(self, request: operations.UpdateProfileRequest, security: operations.UpdateProfileSecurity) -> operations.UpdateProfileResponse:
        r"""Update ITV profile.
        
        The expected token scope is Settings.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/itv/profile'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_update_profile_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.UpdateProfileRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    def upgrade_plan(self, request: operations.UpgradePlanRequest, security: operations.UpgradePlanSecurity) -> operations.UpgradePlanResponse:
        r"""Upgrades the plan for the current user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpgradePlanRequest, base_url, '/itv/plan/{platform}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "itv_upgrade_plan_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.UpgradePlanRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpgradePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    