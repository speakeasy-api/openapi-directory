"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import scanfrequency_enum as shared_scanfrequency_enum
from ..shared import scanningrepositoryfilter as shared_scanningrepositoryfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RepositoryScanningConfiguration:
    r"""The details of the scanning configuration for a repository."""
    
    applied_scan_filters: Optional[list[shared_scanningrepositoryfilter.ScanningRepositoryFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliedScanFilters'), 'exclude': lambda f: f is None }})  
    repository_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositoryArn'), 'exclude': lambda f: f is None }})  
    repository_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositoryName'), 'exclude': lambda f: f is None }})  
    scan_frequency: Optional[shared_scanfrequency_enum.ScanFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scanFrequency'), 'exclude': lambda f: f is None }})  
    scan_on_push: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scanOnPush'), 'exclude': lambda f: f is None }})  
    