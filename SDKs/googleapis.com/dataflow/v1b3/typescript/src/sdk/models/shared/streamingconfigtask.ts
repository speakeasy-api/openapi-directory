/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { StreamingComputationConfig } from "./streamingcomputationconfig";
import { Expose, Type } from "class-transformer";

/**
 * A task that carries configuration information for streaming computations.
 */
export class StreamingConfigTask extends SpeakeasyBase {
  /**
   * Chunk size for commit streams from the harness to windmill.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commitStreamChunkSizeBytes" })
  commitStreamChunkSizeBytes?: string;

  /**
   * Chunk size for get data streams from the harness to windmill.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "getDataStreamChunkSizeBytes" })
  getDataStreamChunkSizeBytes?: string;

  /**
   * Maximum size for work item commit supported windmill storage layer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxWorkItemCommitBytes" })
  maxWorkItemCommitBytes?: string;

  /**
   * Set of computation configuration information.
   */
  @SpeakeasyMetadata({ elemType: StreamingComputationConfig })
  @Expose({ name: "streamingComputationConfigs" })
  @Type(() => StreamingComputationConfig)
  streamingComputationConfigs?: StreamingComputationConfig[];

  /**
   * Map from user step names to state families.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userStepToStateFamilyNameMap" })
  userStepToStateFamilyNameMap?: Record<string, string>;

  /**
   * If present, the worker must use this endpoint to communicate with Windmill Service dispatchers, otherwise the worker must continue to use whatever endpoint it had been using.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "windmillServiceEndpoint" })
  windmillServiceEndpoint?: string;

  /**
   * If present, the worker must use this port to communicate with Windmill Service dispatchers. Only applicable when windmill_service_endpoint is specified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "windmillServicePort" })
  windmillServicePort?: string;
}
