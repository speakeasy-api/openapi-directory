// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InferenceExperimentStatusEnum string

const (
	InferenceExperimentStatusEnumCreating  InferenceExperimentStatusEnum = "Creating"
	InferenceExperimentStatusEnumCreated   InferenceExperimentStatusEnum = "Created"
	InferenceExperimentStatusEnumUpdating  InferenceExperimentStatusEnum = "Updating"
	InferenceExperimentStatusEnumRunning   InferenceExperimentStatusEnum = "Running"
	InferenceExperimentStatusEnumStarting  InferenceExperimentStatusEnum = "Starting"
	InferenceExperimentStatusEnumStopping  InferenceExperimentStatusEnum = "Stopping"
	InferenceExperimentStatusEnumCompleted InferenceExperimentStatusEnum = "Completed"
	InferenceExperimentStatusEnumCancelled InferenceExperimentStatusEnum = "Cancelled"
)

func (e *InferenceExperimentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Creating":
		fallthrough
	case "Created":
		fallthrough
	case "Updating":
		fallthrough
	case "Running":
		fallthrough
	case "Starting":
		fallthrough
	case "Stopping":
		fallthrough
	case "Completed":
		fallthrough
	case "Cancelled":
		*e = InferenceExperimentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InferenceExperimentStatusEnum: %s", s)
	}
}
