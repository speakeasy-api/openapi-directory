"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Committee:
    r"""Committees are entities that spend and raise money in an election. Their characteristics and relationships with candidates can change over time.
    
     You might want to use filters or search endpoints to find the committee you're looking for. Then you can use other committee endpoints to explore information about the committee that interests you. 
    
     Financial information is organized by `committee_id`, so finding the committee you're interested in will lead you to more granular financial information. 
    
     The committee endpoints include all FEC filers, even if they aren't registered as a committee. 
    
     Officially, committees include the committees and organizations that file with the FEC. Several different types of organizations file financial reports with the FEC: 
    
     *Campaign committees authorized by particular candidates to raise and spend funds in their campaigns. Non-party committees (e.g., PACs), some of which may be sponsored by corporations, unions, trade or membership groups, etc. Political party committees at the national, state, and local levels. Groups and individuals making only independent expenditures Corporations, unions, and other organizations making internal communications* 
    
     The committee endpoints primarily use data from FEC registration Form 1 and Form 2.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_candidate_candidate_id_committees_(self, request: operations.GetCandidateCandidateIDCommitteesRequest) -> operations.GetCandidateCandidateIDCommitteesResponse:
        r"""This endpoint is useful for finding detailed information about a particular committee or
        filer. Use the `committee_id` to find the most recent information about the committee.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCandidateCandidateIDCommitteesRequest, base_url, '/candidate/{candidate_id}/committees/', request)
        
        query_params = utils.get_query_params(operations.GetCandidateCandidateIDCommitteesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCandidateCandidateIDCommitteesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommitteeDetailPage])
                res.committee_detail_page = out

        return res

    def get_candidate_candidate_id_committees_history_(self, request: operations.GetCandidateCandidateIDCommitteesHistoryRequest) -> operations.GetCandidateCandidateIDCommitteesHistoryResponse:
        r"""Explore a filer's characteristics over time. This can be particularly useful if the
        committees change treasurers, designation, or `committee_type`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCandidateCandidateIDCommitteesHistoryRequest, base_url, '/candidate/{candidate_id}/committees/history/', request)
        
        query_params = utils.get_query_params(operations.GetCandidateCandidateIDCommitteesHistoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCandidateCandidateIDCommitteesHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommitteeHistoryProfilePage])
                res.committee_history_profile_page = out

        return res

    def get_candidate_candidate_id_committees_history_cycle_(self, request: operations.GetCandidateCandidateIDCommitteesHistoryCycleRequest) -> operations.GetCandidateCandidateIDCommitteesHistoryCycleResponse:
        r"""Explore a filer's characteristics over time. This can be particularly useful if the
        committees change treasurers, designation, or `committee_type`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCandidateCandidateIDCommitteesHistoryCycleRequest, base_url, '/candidate/{candidate_id}/committees/history/{cycle}/', request)
        
        query_params = utils.get_query_params(operations.GetCandidateCandidateIDCommitteesHistoryCycleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCandidateCandidateIDCommitteesHistoryCycleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommitteeHistoryProfilePage])
                res.committee_history_profile_page = out

        return res

    def get_committee_committee_id_(self, request: operations.GetCommitteeCommitteeIDRequest) -> operations.GetCommitteeCommitteeIDResponse:
        r"""This endpoint is useful for finding detailed information about a particular committee or
        filer. Use the `committee_id` to find the most recent information about the committee.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCommitteeCommitteeIDRequest, base_url, '/committee/{committee_id}/', request)
        
        query_params = utils.get_query_params(operations.GetCommitteeCommitteeIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommitteeCommitteeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommitteeDetailPage])
                res.committee_detail_page = out

        return res

    def get_committee_committee_id_history_(self, request: operations.GetCommitteeCommitteeIDHistoryRequest) -> operations.GetCommitteeCommitteeIDHistoryResponse:
        r"""Explore a filer's characteristics over time. This can be particularly useful if the
        committees change treasurers, designation, or `committee_type`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCommitteeCommitteeIDHistoryRequest, base_url, '/committee/{committee_id}/history/', request)
        
        query_params = utils.get_query_params(operations.GetCommitteeCommitteeIDHistoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommitteeCommitteeIDHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommitteeHistoryProfilePage])
                res.committee_history_profile_page = out

        return res

    def get_committee_committee_id_history_cycle_(self, request: operations.GetCommitteeCommitteeIDHistoryCycleRequest) -> operations.GetCommitteeCommitteeIDHistoryCycleResponse:
        r"""Explore a filer's characteristics over time. This can be particularly useful if the
        committees change treasurers, designation, or `committee_type`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCommitteeCommitteeIDHistoryCycleRequest, base_url, '/committee/{committee_id}/history/{cycle}/', request)
        
        query_params = utils.get_query_params(operations.GetCommitteeCommitteeIDHistoryCycleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommitteeCommitteeIDHistoryCycleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommitteeHistoryProfilePage])
                res.committee_history_profile_page = out

        return res

    def get_committees_(self, request: operations.GetCommitteesRequest) -> operations.GetCommitteesResponse:
        r"""Fetch basic information about committees and filers. Use parameters to filter for
        particular characteristics.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/committees/'
        
        query_params = utils.get_query_params(operations.GetCommitteesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommitteesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommitteePage])
                res.committee_page = out

        return res

    