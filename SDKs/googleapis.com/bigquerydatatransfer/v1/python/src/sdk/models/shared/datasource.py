"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasourceparameter as shared_datasourceparameter
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DataSourceAuthorizationTypeEnum(str, Enum):
    r"""Indicates the type of authorization."""
    AUTHORIZATION_TYPE_UNSPECIFIED = 'AUTHORIZATION_TYPE_UNSPECIFIED'
    AUTHORIZATION_CODE = 'AUTHORIZATION_CODE'
    GOOGLE_PLUS_AUTHORIZATION_CODE = 'GOOGLE_PLUS_AUTHORIZATION_CODE'
    FIRST_PARTY_OAUTH = 'FIRST_PARTY_OAUTH'

class DataSourceDataRefreshTypeEnum(str, Enum):
    r"""Specifies whether the data source supports automatic data refresh for the past few days, and how it's supported. For some data sources, data might not be complete until a few days later, so it's useful to refresh data automatically."""
    DATA_REFRESH_TYPE_UNSPECIFIED = 'DATA_REFRESH_TYPE_UNSPECIFIED'
    SLIDING_WINDOW = 'SLIDING_WINDOW'
    CUSTOM_SLIDING_WINDOW = 'CUSTOM_SLIDING_WINDOW'

class DataSourceTransferTypeEnum(str, Enum):
    r"""Deprecated. This field has no effect."""
    TRANSFER_TYPE_UNSPECIFIED = 'TRANSFER_TYPE_UNSPECIFIED'
    BATCH = 'BATCH'
    STREAMING = 'STREAMING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataSource:
    r"""Defines the properties and custom parameters for a data source."""
    
    authorization_type: Optional[DataSourceAuthorizationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizationType'), 'exclude': lambda f: f is None }})
    r"""Indicates the type of authorization."""  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""Data source client id which should be used to receive refresh token."""  
    data_refresh_type: Optional[DataSourceDataRefreshTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataRefreshType'), 'exclude': lambda f: f is None }})
    r"""Specifies whether the data source supports automatic data refresh for the past few days, and how it's supported. For some data sources, data might not be complete until a few days later, so it's useful to refresh data automatically."""  
    data_source_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSourceId'), 'exclude': lambda f: f is None }})
    r"""Data source id."""  
    default_data_refresh_window_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultDataRefreshWindowDays'), 'exclude': lambda f: f is None }})
    r"""Default data refresh window on days. Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`."""  
    default_schedule: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultSchedule'), 'exclude': lambda f: f is None }})
    r"""Default data transfer schedule. Examples of valid schedules include: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""User friendly data source description string."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""User friendly data source name."""  
    help_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('helpUrl'), 'exclude': lambda f: f is None }})
    r"""Url for the help document for this data source."""  
    manual_runs_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manualRunsDisabled'), 'exclude': lambda f: f is None }})
    r"""Disables backfilling and manual run scheduling for the data source."""  
    minimum_schedule_interval: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumScheduleInterval'), 'exclude': lambda f: f is None }})
    r"""The minimum interval for scheduler to schedule runs."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Data source resource name."""  
    parameters: Optional[list[shared_datasourceparameter.DataSourceParameter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""Data source parameters."""  
    scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""Api auth scopes for which refresh token needs to be obtained. These are scopes needed by a data source to prepare data and ingest them into BigQuery, e.g., https://www.googleapis.com/auth/bigquery"""  
    supports_custom_schedule: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportsCustomSchedule'), 'exclude': lambda f: f is None }})
    r"""Specifies whether the data source supports a user defined schedule, or operates on the default schedule. When set to `true`, user can override default schedule."""  
    supports_multiple_transfers: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportsMultipleTransfers'), 'exclude': lambda f: f is None }})
    r"""Deprecated. This field has no effect."""  
    transfer_type: Optional[DataSourceTransferTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferType'), 'exclude': lambda f: f is None }})
    r"""Deprecated. This field has no effect."""  
    update_deadline_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateDeadlineSeconds'), 'exclude': lambda f: f is None }})
    r"""The number of seconds to wait for an update from the data source before the Data Transfer Service marks the transfer as FAILED."""  
    