// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetPrimaryIpsSortEnum - Can be used multiple times. Choices id id:asc id:desc created created:asc created:desc
type GetPrimaryIpsSortEnum string

const (
	GetPrimaryIpsSortEnumID          GetPrimaryIpsSortEnum = "id"
	GetPrimaryIpsSortEnumIDAsc       GetPrimaryIpsSortEnum = "id:asc"
	GetPrimaryIpsSortEnumIDDesc      GetPrimaryIpsSortEnum = "id:desc"
	GetPrimaryIpsSortEnumCreated     GetPrimaryIpsSortEnum = "created"
	GetPrimaryIpsSortEnumCreatedAsc  GetPrimaryIpsSortEnum = "created:asc"
	GetPrimaryIpsSortEnumCreatedDesc GetPrimaryIpsSortEnum = "created:desc"
)

func (e *GetPrimaryIpsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "created":
		fallthrough
	case "created:asc":
		fallthrough
	case "created:desc":
		*e = GetPrimaryIpsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPrimaryIpsSortEnum: %s", s)
	}
}

type GetPrimaryIpsRequest struct {
	// Can be used to filter resources by their ip. The response will only contain the resources matching the specified ip.
	IP *string `queryParam:"style=form,explode=true,name=ip"`
	// Can be used to filter resources by labels. The response will only contain resources matching the label selector.
	LabelSelector *string `queryParam:"style=form,explode=true,name=label_selector"`
	// Can be used to filter resources by their name. The response will only contain the resources matching the specified name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Can be used multiple times. Choices id id:asc id:desc created created:asc created:desc
	Sort *GetPrimaryIpsSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type GetPrimaryIpsPrimaryIPsResponseMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetPrimaryIpsPrimaryIPsResponseMeta struct {
	Pagination GetPrimaryIpsPrimaryIPsResponseMetaPagination `json:"pagination"`
}

// GetPrimaryIpsPrimaryIPsResponsePrimaryIPAssigneeTypeEnum - Resource type the Primary IP can be assigned to
type GetPrimaryIpsPrimaryIPsResponsePrimaryIPAssigneeTypeEnum string

const (
	GetPrimaryIpsPrimaryIPsResponsePrimaryIPAssigneeTypeEnumServer GetPrimaryIpsPrimaryIPsResponsePrimaryIPAssigneeTypeEnum = "server"
)

func (e *GetPrimaryIpsPrimaryIPsResponsePrimaryIPAssigneeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		*e = GetPrimaryIpsPrimaryIPsResponsePrimaryIPAssigneeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPrimaryIpsPrimaryIPsResponsePrimaryIPAssigneeTypeEnum: %s", s)
	}
}

type GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenterLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

// GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenterServerTypes - The Server types the Datacenter can handle
type GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenterServerTypes struct {
	// IDs of Server types that are supported and for which the Datacenter has enough resources left
	Available []float64 `json:"available"`
	// IDs of Server types that are supported and for which the Datacenter has enough resources left
	AvailableForMigration []float64 `json:"available_for_migration"`
	// IDs of Server types that are supported in the Datacenter
	Supported []float64 `json:"supported"`
}

// GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenter - Datacenter this Primary IP is located at
type GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenter struct {
	// Description of the Datacenter
	Description string `json:"description"`
	// ID of the Resource
	ID       int64                                                      `json:"id"`
	Location GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenterLocation `json:"location"`
	// Unique identifier of the Datacenter
	Name string `json:"name"`
	// The Server types the Datacenter can handle
	ServerTypes GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenterServerTypes `json:"server_types"`
}

type GetPrimaryIpsPrimaryIPsResponsePrimaryIPDNSPtr struct {
	// DNS pointer for the specific IP address
	DNSPtr string `json:"dns_ptr"`
	// Single IPv4 or IPv6 address
	IP string `json:"ip"`
}

// GetPrimaryIpsPrimaryIPsResponsePrimaryIPProtection - Protection configuration for the Resource
type GetPrimaryIpsPrimaryIPsResponsePrimaryIPProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnum - Type of the Primary IP
type GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnum string

const (
	GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnumIpv4 GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnum = "ipv4"
	GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnumIpv6 GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnum = "ipv6"
)

func (e *GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnum: %s", s)
	}
}

type GetPrimaryIpsPrimaryIPsResponsePrimaryIP struct {
	// ID of the resource the Primary IP is assigned to, null if it is not assigned at all
	AssigneeID int64 `json:"assignee_id"`
	// Resource type the Primary IP can be assigned to
	AssigneeType GetPrimaryIpsPrimaryIPsResponsePrimaryIPAssigneeTypeEnum `json:"assignee_type"`
	// Delete this Primary IP when the resource it is assigned to is deleted
	AutoDelete bool `json:"auto_delete"`
	// Whether the IP is blocked
	Blocked bool `json:"blocked"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Datacenter this Primary IP is located at
	Datacenter GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenter `json:"datacenter"`
	// Array of reverse DNS entries
	DNSPtr []GetPrimaryIpsPrimaryIPsResponsePrimaryIPDNSPtr `json:"dns_ptr"`
	// ID of the Resource
	ID int64 `json:"id"`
	// IP address
	IP string `json:"ip"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Protection configuration for the Resource
	Protection GetPrimaryIpsPrimaryIPsResponsePrimaryIPProtection `json:"protection"`
	// Type of the Primary IP
	Type GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnum `json:"type"`
}

// GetPrimaryIpsPrimaryIPsResponse - The `primary_ips` key contains an array of Primary IP objects
type GetPrimaryIpsPrimaryIPsResponse struct {
	Meta       *GetPrimaryIpsPrimaryIPsResponseMeta       `json:"meta,omitempty"`
	PrimaryIps []GetPrimaryIpsPrimaryIPsResponsePrimaryIP `json:"primary_ips"`
}

type GetPrimaryIpsResponse struct {
	ContentType string
	// The `primary_ips` key contains an array of Primary IP objects
	PrimaryIPsResponse *GetPrimaryIpsPrimaryIPsResponse
	StatusCode         int
	RawResponse        *http.Response
}
