/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Address } from "./address";
import { ArchiveHistory } from "./archivehistory";
import { PatientIdentifier } from "./patientidentifier";
import { PhoneNumber } from "./phonenumber";
import { Expose, Transform, Type } from "class-transformer";

export enum PatientCreateResourceAttributesGenderEnum {
  Male = "male",
  Female = "female",
  Other = "other",
}

export class PatientCreateResourceAttributesInput extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Address })
  @Expose({ name: "addresses" })
  @Type(() => Address)
  addresses?: Address[];

  @SpeakeasyMetadata({ elemType: ArchiveHistory })
  @Expose({ name: "archive_history" })
  @Type(() => ArchiveHistory)
  archiveHistory?: ArchiveHistory[];

  @SpeakeasyMetadata()
  @Expose({ name: "birth_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  birthDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "email_address" })
  emailAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender?: PatientCreateResourceAttributesGenderEnum;

  @SpeakeasyMetadata({ elemType: PatientIdentifier })
  @Expose({ name: "identifiers" })
  @Type(() => PatientIdentifier)
  identifiers?: PatientIdentifier[];

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;

  /**
   * Coach's note about the patient. Not visible to the patient.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "note" })
  note?: string;

  @SpeakeasyMetadata({ elemType: PhoneNumber })
  @Expose({ name: "phone_numbers" })
  @Type(() => PhoneNumber)
  phoneNumbers?: PhoneNumber[];
}

export class PatientCreateResourceRelationshipsCoachesDataMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "primary" })
  primary?: boolean;
}

export enum PatientCreateResourceRelationshipsCoachesDataTypeEnum {
  Coach = "coach",
}

export class PatientCreateResourceRelationshipsCoachesData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => PatientCreateResourceRelationshipsCoachesDataMeta)
  meta?: PatientCreateResourceRelationshipsCoachesDataMeta;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PatientCreateResourceRelationshipsCoachesDataTypeEnum;
}

export class PatientCreateResourceRelationshipsCoachesInput extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: PatientCreateResourceRelationshipsCoachesData,
  })
  @Expose({ name: "data" })
  @Type(() => PatientCreateResourceRelationshipsCoachesData)
  data: PatientCreateResourceRelationshipsCoachesData[];
}

/**
 * 1. If the query does not return any groups, a group with the specified name will be created and related to the patient.
 *
 * @remarks
 * 2. If the query returns one group, that group will be related to the patient.
 * 3. If the query returns more than one group, the creation of the patient will fail.
 *
 */
export class PatientCreateResourceRelationshipsGroupsDataMetaQuery extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "organization" })
  organization: string;
}

/**
 * Allows the specification of a query for a group rather than providing a group id directly
 */
export class PatientCreateResourceRelationshipsGroupsDataMeta extends SpeakeasyBase {
  /**
   * 1. If the query does not return any groups, a group with the specified name will be created and related to the patient.
   *
   * @remarks
   * 2. If the query returns one group, that group will be related to the patient.
   * 3. If the query returns more than one group, the creation of the patient will fail.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  @Type(() => PatientCreateResourceRelationshipsGroupsDataMetaQuery)
  query: PatientCreateResourceRelationshipsGroupsDataMetaQuery;
}

export enum PatientCreateResourceRelationshipsGroupsDataTypeEnum {
  Group = "group",
}

export class PatientCreateResourceRelationshipsGroupsData extends SpeakeasyBase {
  /**
   * Required if the `meta.query` is not defined.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Allows the specification of a query for a group rather than providing a group id directly
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => PatientCreateResourceRelationshipsGroupsDataMeta)
  meta?: PatientCreateResourceRelationshipsGroupsDataMeta;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PatientCreateResourceRelationshipsGroupsDataTypeEnum;
}

export class PatientCreateResourceRelationshipsGroups extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: PatientCreateResourceRelationshipsGroupsData })
  @Expose({ name: "data" })
  @Type(() => PatientCreateResourceRelationshipsGroupsData)
  data: PatientCreateResourceRelationshipsGroupsData[];
}

export class PatientCreateResourceRelationshipsInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "coaches" })
  @Type(() => PatientCreateResourceRelationshipsCoachesInput)
  coaches?: PatientCreateResourceRelationshipsCoachesInput;

  @SpeakeasyMetadata()
  @Expose({ name: "groups" })
  @Type(() => PatientCreateResourceRelationshipsGroups)
  groups: PatientCreateResourceRelationshipsGroups;
}

export enum PatientCreateResourceTypeEnum {
  Patient = "patient",
}

/**
 * Note that `data` can either be a single object or an array of objects matching the schema specified here
 *
 * @remarks
 * (bulk create).
 *
 */
export class PatientCreateResourceInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => PatientCreateResourceAttributesInput)
  attributes: PatientCreateResourceAttributesInput;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => PatientCreateResourceRelationshipsInput)
  relationships?: PatientCreateResourceRelationshipsInput;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PatientCreateResourceTypeEnum;
}
