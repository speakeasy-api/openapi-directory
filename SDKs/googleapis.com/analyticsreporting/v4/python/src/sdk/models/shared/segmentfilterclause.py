"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import segmentdimensionfilter as shared_segmentdimensionfilter
from ..shared import segmentmetricfilter as shared_segmentmetricfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SegmentFilterClause:
    r"""Filter Clause to be used in a segment definition, can be wither a metric or a dimension filter."""
    
    dimension_filter: Optional[shared_segmentdimensionfilter.SegmentDimensionFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimensionFilter'), 'exclude': lambda f: f is None }})
    r"""Dimension filter specifies the filtering options on a dimension."""  
    metric_filter: Optional[shared_segmentmetricfilter.SegmentMetricFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricFilter'), 'exclude': lambda f: f is None }})
    r"""Metric filter to be used in a segment filter clause."""  
    not_: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not'), 'exclude': lambda f: f is None }})
    r"""Matches the complement (`!`) of the filter."""  
    