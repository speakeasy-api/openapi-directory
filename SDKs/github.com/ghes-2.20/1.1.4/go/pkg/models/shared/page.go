// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PageStatusEnum - The status of the most recent build of the Page.
type PageStatusEnum string

const (
	PageStatusEnumBuilt    PageStatusEnum = "built"
	PageStatusEnumBuilding PageStatusEnum = "building"
	PageStatusEnumErrored  PageStatusEnum = "errored"
)

func (e *PageStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "built":
		fallthrough
	case "building":
		fallthrough
	case "errored":
		*e = PageStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PageStatusEnum: %s", s)
	}
}

// Page - The configuration for GitHub Pages for a repository.
type Page struct {
	// The Pages site's custom domain
	Cname string `json:"cname"`
	// Whether the Page has a custom 404 page.
	Custom404 bool `json:"custom_404"`
	// The web address the Page can be accessed from.
	HTMLURL          *string                `json:"html_url,omitempty"`
	HTTPSCertificate *PagesHTTPSCertificate `json:"https_certificate,omitempty"`
	// Whether https is enabled on the domain
	HTTPSEnforced *bool `json:"https_enforced,omitempty"`
	// Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
	Public bool             `json:"public"`
	Source *PagesSourceHash `json:"source,omitempty"`
	// The status of the most recent build of the Page.
	Status PageStatusEnum `json:"status"`
	// The API address for accessing this Page resource.
	URL string `json:"url"`
}
