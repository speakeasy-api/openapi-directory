/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Models {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes the model specified by modelId from the dataset.
   */
  bigqueryModelsDelete(
    req: operations.BigqueryModelsDeleteRequest,
    security: operations.BigqueryModelsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigqueryModelsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigqueryModelsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{projectId}/datasets/{datasetId}/models/{modelId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BigqueryModelsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigqueryModelsDeleteResponse =
        new operations.BigqueryModelsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets the specified model resource by model ID.
   */
  bigqueryModelsGet(
    req: operations.BigqueryModelsGetRequest,
    security: operations.BigqueryModelsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigqueryModelsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigqueryModelsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{projectId}/datasets/{datasetId}/models/{modelId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BigqueryModelsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigqueryModelsGetResponse =
        new operations.BigqueryModelsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.model = utils.objectToClass(httpRes?.data, shared.Model);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all models in the specified dataset. Requires the READER dataset role. After retrieving the list of models, you can get information about a particular model by calling the models.get method.
   */
  bigqueryModelsList(
    req: operations.BigqueryModelsListRequest,
    security: operations.BigqueryModelsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigqueryModelsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigqueryModelsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{projectId}/datasets/{datasetId}/models",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BigqueryModelsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigqueryModelsListResponse =
        new operations.BigqueryModelsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listModelsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListModelsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patch specific fields in the specified model.
   */
  bigqueryModelsPatch(
    req: operations.BigqueryModelsPatchRequest,
    security: operations.BigqueryModelsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigqueryModelsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigqueryModelsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{projectId}/datasets/{datasetId}/models/{modelId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "modelInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BigqueryModelsPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigqueryModelsPatchResponse =
        new operations.BigqueryModelsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.model = utils.objectToClass(httpRes?.data, shared.Model);
          }
          break;
      }

      return res;
    });
  }
}
