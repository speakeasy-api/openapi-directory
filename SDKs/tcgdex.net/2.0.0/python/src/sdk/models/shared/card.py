"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import setresume as shared_setresume
from ..shared import weakres as shared_weakres
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CardAbilities:
    
    effect: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effect'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CardAttacks:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    cost: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost'), 'exclude': lambda f: f is None }})  
    damage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('damage'), 'exclude': lambda f: f is None }})  
    effect: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effect'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CardItem:
    
    effect: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effect') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CardLegal:
    
    expanded: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expanded'), 'exclude': lambda f: f is None }})  
    standard: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standard'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CardVariants:
    
    first_edition: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstEdition') }})  
    holo: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('holo') }})  
    normal: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('normal') }})  
    reverse: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reverse') }})  
    w_promo: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wPromo') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Card:
    r"""successful operation"""
    
    category: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    legal: CardLegal = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legal') }})  
    local_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localId') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    rarity: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rarity') }})  
    set: shared_setresume.SetResume = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('set') }})  
    abilities: Optional[list[CardAbilities]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abilities'), 'exclude': lambda f: f is None }})  
    attacks: Optional[list[CardAttacks]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attacks'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    dex_id: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dexId'), 'exclude': lambda f: f is None }})  
    energy_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('energyType'), 'exclude': lambda f: f is None }})  
    evolve_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evolveFrom'), 'exclude': lambda f: f is None }})  
    hp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hp'), 'exclude': lambda f: f is None }})  
    illustrator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('illustrator'), 'exclude': lambda f: f is None }})  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})  
    item: Optional[CardItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item'), 'exclude': lambda f: f is None }})  
    level: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level'), 'exclude': lambda f: f is None }})  
    regulation_mark: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regulationMark'), 'exclude': lambda f: f is None }})  
    resistances: Optional[list[list[shared_weakres.WeakRes]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resistances'), 'exclude': lambda f: f is None }})  
    retreat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retreat'), 'exclude': lambda f: f is None }})  
    stage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stage'), 'exclude': lambda f: f is None }})  
    suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suffix'), 'exclude': lambda f: f is None }})  
    trainer_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trainerType'), 'exclude': lambda f: f is None }})  
    types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('types'), 'exclude': lambda f: f is None }})  
    variants: Optional[CardVariants] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variants'), 'exclude': lambda f: f is None }})  
    weaknesses: Optional[list[list[shared_weakres.WeakRes]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weaknesses'), 'exclude': lambda f: f is None }})  
    