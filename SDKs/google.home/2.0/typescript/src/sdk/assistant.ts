/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * This folder contains all endpoints related to Assistant's tasks like Do Not Disturb, Alarms and Timers, Accessibility and equalizer.
 */
export class Assistant {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Accessibility
   *
   * @remarks
   * This controls Accessibility sounds. `hotword_enabled` is for 'Play start sound' and `endpoint_enabled` is for 'Play end sound'.
   * Sending an empty-body POST request returns the current values.
   * Either of the fields or both can be sent and new values will be saved.
   */
  accessibility(
    req: shared.AccessibilityRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AccessibilityResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.AccessibilityRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/assistant/a11y_mode";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccessibilityResponse =
        new operations.AccessibilityResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getcurrentvalues = utils.objectToClass(
              httpRes?.data,
              shared.Getcurrentvalues
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Alarm Volume
   *
   * @remarks
   * This gets and sets alarms and timers volume.
   * **Note:** This is not the same as normal volume.
   *
   * Volume is a float number in [0, 1] where 0 is minimum and 1 is maximum.
   * Sending an empty body gets the volume. Sending `volume` sets the volume.
   */
  alarmVolume(
    req: shared.AlarmVolumeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AlarmVolumeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.AlarmVolumeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/assistant/alarms/volume";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlarmVolumeResponse =
        new operations.AlarmVolumeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getvolume = utils.objectToClass(
              httpRes?.data,
              shared.Getvolume
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete Alarms and Timers
   *
   * @remarks
   * This deletes alarms and timers by their id.
   *
   * `ids` is a list of ids to be deleted. Sending invalid id still returns a 200 OK. The `/` in the ids have to be escaped like `\/`.
   */
  deleteAlarmsandTimers(
    req: shared.DeleteAlarmsandTimersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteAlarmsandTimersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.DeleteAlarmsandTimersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/assistant/alarms/delete";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteAlarmsandTimersResponse =
        new operations.DeleteAlarmsandTimersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example19 = utils.objectToClass(
              httpRes?.data,
              shared.Example19
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Do Not Disturb
   *
   * @remarks
   * This is for the Do Not Disturb option. Sending an empty-body POST returns the current value. Sending a new value changes it.
   */
  doNotDisturb(
    req: operations.DoNotDisturbRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DoNotDisturbResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoNotDisturbRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/assistant/notifications";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoNotDisturbResponse =
        new operations.DoNotDisturbResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getcurrentstate = utils.objectToClass(
              httpRes?.data,
              shared.Getcurrentstate
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Alarms and Timers
   *
   * @remarks
   * This gives a list of all active alarms and timers.
   *
   * Both alarms and timers have `id`s which can be used to delete them. (There is no known way of creating/deleting yet). The value of `status` have different meanings for alarms and timers (given below).
   *
   * Alarms have `date_pattern` and `time_pattern` with day, month, year, hour, minute, second. `fire_time` is the same in unix time (milliseconds, not seconds).
   * `status` is 1 for set up and 2 for ringing.
   *
   * Timers have `original_duration` is the original duration.
   * `status` is 1 for set up and 3 for ringing.
   */
  getAlarmsandTimers(
    config?: AxiosRequestConfig
  ): Promise<operations.GetAlarmsandTimersResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/assistant/alarms";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAlarmsandTimersResponse =
        new operations.GetAlarmsandTimersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.example18 = utils.objectToClass(
              httpRes?.data,
              shared.Example18
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Set Equalizer Values
   *
   * @remarks
   * This can only set new equalizer values. To get already set values, use /setup/eureka_info.
   *
   * The body is mandatory. It can either contain `low_shelf` or `high_shelf` or both.
   *
   * `low_shelf.gain_db` and `high_shelf.gain_db` refer to **bass** and **treble** respectively.
   *
   * Default values are 0 for both.
   * While the slider in the Home app only ranges from -6 to +6, they can be set to any integer like 50 or -100. These changes persist.
   */
  setEqualizerValues(
    req: shared.SetEqualizerValuesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SetEqualizerValuesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SetEqualizerValuesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/user_eq/set_equalizer";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetEqualizerValuesResponse =
        new operations.SetEqualizerValuesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/plain`)) {
            res.setEqualizerValues200TextPlainObject = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }
}
