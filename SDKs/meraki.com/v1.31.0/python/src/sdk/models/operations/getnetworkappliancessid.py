"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkApplianceSsidRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    number: str = dataclasses.field(metadata={'path_param': { 'field_name': 'number', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkApplianceSsid200ApplicationJSONRadiusServers:
    
    host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})
    r"""The IP address of your RADIUS server."""  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""The UDP port your RADIUS servers listens on for Access-requests."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkApplianceSsid200ApplicationJSON:
    r"""Successful operation"""
    
    auth_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authMode'), 'exclude': lambda f: f is None }})
    r"""The association control method for the SSID."""  
    default_vlan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultVlanId'), 'exclude': lambda f: f is None }})
    r"""The VLAN ID of the VLAN associated to this SSID."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether or not the SSID is enabled."""  
    encryption_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionMode'), 'exclude': lambda f: f is None }})
    r"""The psk encryption mode for the SSID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the SSID."""  
    number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""The number of the SSID."""  
    radius_servers: Optional[list[GetNetworkApplianceSsid200ApplicationJSONRadiusServers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('radiusServers'), 'exclude': lambda f: f is None }})
    r"""The RADIUS 802.1x servers to be used for authentication."""  
    visible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visible'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating whether the MX should advertise or hide this SSID."""  
    wpa_encryption_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wpaEncryptionMode'), 'exclude': lambda f: f is None }})
    r"""WPA encryption mode for the SSID."""  
    

@dataclasses.dataclass
class GetNetworkApplianceSsidResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_appliance_ssid_200_application_json_object: Optional[GetNetworkApplianceSsid200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    