"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GetV2MeetingsJSONRequest:
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'account_id', 'style': 'form', 'explode': True }})
    r"""Filters meetings by account_id. Multiple account ids can be applied"""  
    event_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'event_ids', 'style': 'form', 'explode': False }})
    r"""Filters meetings by event IDs"""  
    i_cal_uids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'i_cal_uids', 'style': 'form', 'explode': False }})
    r"""Filters meetings by UIDs provided by calendar provider"""  
    ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': False }})
    r"""IDs of meetings to fetch. If a record can't be found, that record won't be returned and your request will be successful"""  
    include_meetings_settings: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_meetings_settings', 'style': 'form', 'explode': True }})
    r"""Flag to indicate whether to include owned_by_meetings_settings and booked_by_meetings_settings objects"""  
    include_paging_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_paging_counts', 'style': 'form', 'explode': True }})
    r"""Whether to include total_pages and total_count in the metadata. Defaults to false"""  
    limit_paging_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit_paging_counts', 'style': 'form', 'explode': True }})
    r"""Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The current page to fetch results from. Defaults to 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""How many records to show per page in the range [1, 100]. Defaults to 25"""  
    person_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'person_id', 'style': 'form', 'explode': True }})
    r"""Filters meetings by person_id. Multiple person ids can be applied"""  
    person_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'person_ids', 'style': 'form', 'explode': False }})
    r"""Filters meetings by person_id. Multiple person ids can be applied"""  
    show_deleted: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'show_deleted', 'style': 'form', 'explode': True }})
    r"""Whether to include deleted events in the result"""  
    sort_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_by', 'style': 'form', 'explode': True }})
    r"""Key to sort on, must be one of: start_time, created_at, updated_at. Defaults to start_time"""  
    sort_direction: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_direction', 'style': 'form', 'explode': True }})
    r"""Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"""  
    start_time: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start_time', 'style': 'form', 'explode': False }})
    r"""Equality filters that are applied to the start_time field. A single filter can be used by itself or combined with other filters to create a range.
    
    ---CUSTOM---
    {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Filters meetings by status. Possible values are: pending, booked, failed, retry"""  
    task_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'task_ids', 'style': 'form', 'explode': False }})
    r"""Filters meetings by task_id. Multiple task ids can be applied"""  
    user_guids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'user_guids', 'style': 'form', 'explode': False }})
    r"""Filters meetings by user_guid. Multiple user guids can be applied"""  
    

@dataclasses.dataclass
class GetV2MeetingsJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    