"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Badges:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def admin_list_badges(self) -> operations.AdminListBadgesResponse:
        r"""List badges"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/badges.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdminListBadgesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AdminListBadges200ApplicationJSON])
                res.admin_list_badges_200_application_json_object = out

        return res

    def create_badge(self, request: operations.CreateBadgeRequestBody) -> operations.CreateBadgeResponse:
        r"""Create badge"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/badges.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateBadgeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateBadge200ApplicationJSON])
                res.create_badge_200_application_json_object = out

        return res

    def delete_badge(self, request: operations.DeleteBadgeRequest) -> operations.DeleteBadgeResponse:
        r"""Delete badge"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteBadgeRequest, base_url, '/admin/badges/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteBadgeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def list_user_badges(self, request: operations.ListUserBadgesRequest) -> operations.ListUserBadgesResponse:
        r"""List badges for a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListUserBadgesRequest, base_url, '/user-badges/{username}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListUserBadgesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListUserBadges200ApplicationJSON])
                res.list_user_badges_200_application_json_object = out

        return res

    def update_badge(self, request: operations.UpdateBadgeRequest) -> operations.UpdateBadgeResponse:
        r"""Update badge"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateBadgeRequest, base_url, '/admin/badges/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateBadgeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateBadge200ApplicationJSON])
                res.update_badge_200_application_json_object = out

        return res

    