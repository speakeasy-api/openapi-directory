"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import badrequest as shared_badrequest
from ..shared import clusterresponse as shared_clusterresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetClusterSolutionRequest:
    
    job_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'jobId', 'style': 'simple', 'explode': False }})
    r"""Request solution with jobId"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetClusterSolution404ApplicationJSON:
    r"""Requested solution could not be found."""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""Error message"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""status"""  
    

@dataclasses.dataclass
class GetClusterSolutionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request: Optional[shared_badrequest.BadRequest] = dataclasses.field(default=None)
    r"""Error occurred on client side such as invalid input."""  
    cluster_response: Optional[shared_clusterresponse.ClusterResponse] = dataclasses.field(default=None)
    r"""A response containing the solution"""  
    get_cluster_solution_404_application_json_object: Optional[GetClusterSolution404ApplicationJSON] = dataclasses.field(default=None)
    r"""Requested solution could not be found."""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    