/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FieldTransform - A transformation of a field of the document.
 */
public class FieldTransform {
    /**
     * An array value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appendMissingElements")
    public ArrayValue appendMissingElements;

    public FieldTransform withAppendMissingElements(ArrayValue appendMissingElements) {
        this.appendMissingElements = appendMissingElements;
        return this;
    }
    
    /**
     * The path of the field. See Document.fields for the field path syntax reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fieldPath")
    public String fieldPath;

    public FieldTransform withFieldPath(String fieldPath) {
        this.fieldPath = fieldPath;
        return this;
    }
    
    /**
     * A message that can hold any of the supported value types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("increment")
    public Value increment;

    public FieldTransform withIncrement(Value increment) {
        this.increment = increment;
        return this;
    }
    
    /**
     * A message that can hold any of the supported value types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximum")
    public Value maximum;

    public FieldTransform withMaximum(Value maximum) {
        this.maximum = maximum;
        return this;
    }
    
    /**
     * A message that can hold any of the supported value types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimum")
    public Value minimum;

    public FieldTransform withMinimum(Value minimum) {
        this.minimum = minimum;
        return this;
    }
    
    /**
     * An array value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removeAllFromArray")
    public ArrayValue removeAllFromArray;

    public FieldTransform withRemoveAllFromArray(ArrayValue removeAllFromArray) {
        this.removeAllFromArray = removeAllFromArray;
        return this;
    }
    
    /**
     * Sets the field to the given server value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("setToServerValue")
    public FieldTransformSetToServerValueEnum setToServerValue;

    public FieldTransform withSetToServerValue(FieldTransformSetToServerValueEnum setToServerValue) {
        this.setToServerValue = setToServerValue;
        return this;
    }
    
    public FieldTransform(){}
}
