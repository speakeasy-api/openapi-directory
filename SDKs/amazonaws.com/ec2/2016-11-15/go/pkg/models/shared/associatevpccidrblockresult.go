// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum - The state of the CIDR block.
type AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum string

const (
	AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnumAssociating    AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum = "associating"
	AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnumAssociated     AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum = "associated"
	AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnumDisassociating AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum = "disassociating"
	AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnumDisassociated  AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum = "disassociated"
	AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnumFailing        AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum = "failing"
	AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnumFailed         AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum = "failed"
)

func (e AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum) ToPointer() *AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum {
	return &e
}

func (e *AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failing":
		fallthrough
	case "failed":
		*e = AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum: %v", v)
	}
}

// AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockState - Information about the state of the CIDR block.
type AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockState struct {
	State         *AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockStateStateEnum
	StatusMessage *string
}

// AssociateVpcCidrBlockResultCidrBlockAssociation - Information about the IPv4 CIDR block association.
type AssociateVpcCidrBlockResultCidrBlockAssociation struct {
	AssociationID  *string
	CidrBlock      *string
	CidrBlockState *AssociateVpcCidrBlockResultCidrBlockAssociationCidrBlockState
}

// AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum - The state of the CIDR block.
type AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum string

const (
	AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumAssociating    AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "associating"
	AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumAssociated     AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "associated"
	AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumDisassociating AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "disassociating"
	AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumDisassociated  AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "disassociated"
	AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumFailing        AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "failing"
	AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumFailed         AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "failed"
)

func (e AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum) ToPointer() *AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum {
	return &e
}

func (e *AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failing":
		fallthrough
	case "failed":
		*e = AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum: %v", v)
	}
}

// AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockState - Information about the state of the CIDR block.
type AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockState struct {
	State         *AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum
	StatusMessage *string
}

// AssociateVpcCidrBlockResultIpv6CidrBlockAssociation - Information about the IPv6 CIDR block association.
type AssociateVpcCidrBlockResultIpv6CidrBlockAssociation struct {
	AssociationID      *string
	Ipv6CidrBlock      *string
	Ipv6CidrBlockState *AssociateVpcCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockState
	Ipv6Pool           *string
	NetworkBorderGroup *string
}

// AssociateVpcCidrBlockResult - Success
type AssociateVpcCidrBlockResult struct {
	CidrBlockAssociation     *AssociateVpcCidrBlockResultCidrBlockAssociation
	Ipv6CidrBlockAssociation *AssociateVpcCidrBlockResultIpv6CidrBlockAssociation
	VpcID                    *string
}
