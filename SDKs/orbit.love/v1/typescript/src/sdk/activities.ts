/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Activities {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a post activity
   */
  deleteWorkspaceSlugMembersMemberSlugActivitiesId(
    req: operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIdRequest,
    security: operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members/{member_slug}/activities/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIdResponse =
        new operations.DeleteWorkspaceSlugMembersMemberSlugActivitiesIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [204, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List activities for a workspace
   */
  getWorkspaceSlugActivities(
    req: operations.GetWorkspaceSlugActivitiesRequest,
    security: operations.GetWorkspaceSlugActivitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWorkspaceSlugActivitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWorkspaceSlugActivitiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/activities",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetWorkspaceSlugActivitiesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWorkspaceSlugActivitiesResponse =
        new operations.GetWorkspaceSlugActivitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Get an activity in the workspace
   */
  getWorkspaceSlugActivitiesId(
    req: operations.GetWorkspaceSlugActivitiesIdRequest,
    security: operations.GetWorkspaceSlugActivitiesIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWorkspaceSlugActivitiesIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWorkspaceSlugActivitiesIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/activities/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetWorkspaceSlugActivitiesIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWorkspaceSlugActivitiesIdResponse =
        new operations.GetWorkspaceSlugActivitiesIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * List activities for a member
   */
  getWorkspaceSlugMembersMemberSlugActivities(
    req: operations.GetWorkspaceSlugMembersMemberSlugActivitiesRequest,
    security: operations.GetWorkspaceSlugMembersMemberSlugActivitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWorkspaceSlugMembersMemberSlugActivitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWorkspaceSlugMembersMemberSlugActivitiesRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members/{member_slug}/activities",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetWorkspaceSlugMembersMemberSlugActivitiesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWorkspaceSlugMembersMemberSlugActivitiesResponse =
        new operations.GetWorkspaceSlugMembersMemberSlugActivitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * List member activities in an organization
   */
  getWorkspaceSlugOrganizationsOrganizationIdActivities(
    req: operations.GetWorkspaceSlugOrganizationsOrganizationIdActivitiesRequest,
    security: operations.GetWorkspaceSlugOrganizationsOrganizationIdActivitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWorkspaceSlugOrganizationsOrganizationIdActivitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetWorkspaceSlugOrganizationsOrganizationIdActivitiesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/organizations/{organization_id}/activities",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetWorkspaceSlugOrganizationsOrganizationIdActivitiesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWorkspaceSlugOrganizationsOrganizationIdActivitiesResponse =
        new operations.GetWorkspaceSlugOrganizationsOrganizationIdActivitiesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Create a Custom or a Content activity for a new or existing member
   *
   * @remarks
   * Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
   */
  postWorkspaceSlugActivities(
    req: operations.PostWorkspaceSlugActivitiesRequest,
    security: operations.PostWorkspaceSlugActivitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostWorkspaceSlugActivitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostWorkspaceSlugActivitiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/activities",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "activityAndIdentity",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostWorkspaceSlugActivitiesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostWorkspaceSlugActivitiesResponse =
        new operations.PostWorkspaceSlugActivitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [201, 403, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a Custom or a Content activity for a member
   */
  postWorkspaceSlugMembersMemberSlugActivities(
    req: operations.PostWorkspaceSlugMembersMemberSlugActivitiesRequest,
    security: operations.PostWorkspaceSlugMembersMemberSlugActivitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostWorkspaceSlugMembersMemberSlugActivitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostWorkspaceSlugMembersMemberSlugActivitiesRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members/{member_slug}/activities",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PostWorkspaceSlugMembersMemberSlugActivitiesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostWorkspaceSlugMembersMemberSlugActivitiesResponse =
        new operations.PostWorkspaceSlugMembersMemberSlugActivitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [201, 403, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a custom activity for a member
   */
  putWorkspaceSlugMembersMemberSlugActivitiesId(
    req: operations.PutWorkspaceSlugMembersMemberSlugActivitiesIdRequest,
    security: operations.PutWorkspaceSlugMembersMemberSlugActivitiesIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutWorkspaceSlugMembersMemberSlugActivitiesIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutWorkspaceSlugMembersMemberSlugActivitiesIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members/{member_slug}/activities/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "activity",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PutWorkspaceSlugMembersMemberSlugActivitiesIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutWorkspaceSlugMembersMemberSlugActivitiesIdResponse =
        new operations.PutWorkspaceSlugMembersMemberSlugActivitiesIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 403, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
