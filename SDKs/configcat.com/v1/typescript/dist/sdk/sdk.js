"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var auditlogs_1 = require("./auditlogs");
var codereferences_1 = require("./codereferences");
var configs_1 = require("./configs");
var environments_1 = require("./environments");
var featureflagandsettingvalues_1 = require("./featureflagandsettingvalues");
var featureflagandsettingvaluesusingsdkkey_1 = require("./featureflagandsettingvaluesusingsdkkey");
var featureflagsandsettings_1 = require("./featureflagsandsettings");
var integrationlinks_1 = require("./integrationlinks");
var me_1 = require("./me");
var members_1 = require("./members");
var shared = __importStar(require("./models/shared"));
var organizations_1 = require("./organizations");
var permissiongroups_1 = require("./permissiongroups");
var products_1 = require("./products");
var sdkkeys_1 = require("./sdkkeys");
var segments_1 = require("./segments");
var tags_1 = require("./tags");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://api.configcat.com"];
/**
 * **Base API URL**: https://api.configcat.com
 *
 * @remarks
 *
 * If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).
 *
 * The purpose of this API is to access the ConfigCat platform programmatically.
 * You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.
 *
 * The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON
 * and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).
 *
 *
 * # OpenAPI Specification
 *
 * The complete specification is publicly available here: [swagger.json](v1/swagger.json).
 * You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or
 * [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.
 *
 * # Authentication
 * This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).
 *
 * <!-- ReDoc-Inject: <security-definitions> -->
 *
 * # Throttling and rate limits
 * All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:
 *
 * | Header | Description |
 * | :- | :- |
 * | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. |
 * | X-Rate-Limit-Reset     | The time	when the current rate limit period resets.						  |
 *
 * When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.auditLogs = new auditlogs_1.AuditLogs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.codeReferences = new codereferences_1.CodeReferences(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.configs = new configs_1.Configs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.environments = new environments_1.Environments(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.featureFlagAndSettingValues = new featureflagandsettingvalues_1.FeatureFlagAndSettingValues(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.featureFlagAndSettingValuesUsingSDKKey =
            new featureflagandsettingvaluesusingsdkkey_1.FeatureFlagAndSettingValuesUsingSDKKey(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.featureFlagsAndSettings = new featureflagsandsettings_1.FeatureFlagsAndSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.integrationLinks = new integrationlinks_1.IntegrationLinks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.me = new me_1.Me(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.members = new members_1.Members(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.organizations = new organizations_1.Organizations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.permissionGroups = new permissiongroups_1.PermissionGroups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.products = new products_1.Products(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sdkKeys = new sdkkeys_1.SDKKeys(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.segments = new segments_1.Segments(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.tags = new tags_1.Tags(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
