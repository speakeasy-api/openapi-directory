// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateAccessPointRequestBodyPosixUser - The full POSIX identity, including the user ID, group ID, and any secondary group IDs, on the access point that is used for all file system operations performed by NFS clients using the access point.
type CreateAccessPointRequestBodyPosixUser struct {
	Gid           *int64  `json:"Gid,omitempty"`
	SecondaryGids []int64 `json:"SecondaryGids,omitempty"`
	UID           *int64  `json:"Uid,omitempty"`
}

// CreateAccessPointRequestBodyRootDirectory - Specifies the directory on the Amazon EFS file system that the access point provides access to. The access point exposes the specified file system path as the root directory of your file system to applications using the access point. NFS clients using the access point can only access data in the access point's <code>RootDirectory</code> and it's subdirectories.
type CreateAccessPointRequestBodyRootDirectory struct {
	CreationInfo *shared.CreationInfo `json:"CreationInfo,omitempty"`
	Path         *string              `json:"Path,omitempty"`
}

type CreateAccessPointRequestBody struct {
	// A string of up to 64 ASCII characters that Amazon EFS uses to ensure idempotent creation.
	ClientToken string `json:"ClientToken"`
	// The ID of the EFS file system that the access point provides access to.
	FileSystemID string `json:"FileSystemId"`
	// The full POSIX identity, including the user ID, group ID, and any secondary group IDs, on the access point that is used for all file system operations performed by NFS clients using the access point.
	PosixUser *CreateAccessPointRequestBodyPosixUser `json:"PosixUser,omitempty"`
	// Specifies the directory on the Amazon EFS file system that the access point provides access to. The access point exposes the specified file system path as the root directory of your file system to applications using the access point. NFS clients using the access point can only access data in the access point's <code>RootDirectory</code> and it's subdirectories.
	RootDirectory *CreateAccessPointRequestBodyRootDirectory `json:"RootDirectory,omitempty"`
	// Creates tags associated with the access point. Each tag is a key-value pair, each key must be unique. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.
	Tags []shared.Tag `json:"Tags,omitempty"`
}

type CreateAccessPointRequest struct {
	RequestBody       CreateAccessPointRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateAccessPointResponse struct {
	// AccessPointAlreadyExists
	AccessPointAlreadyExists interface{}
	// Success
	AccessPointDescription *shared.AccessPointDescription
	// AccessPointLimitExceeded
	AccessPointLimitExceeded interface{}
	// BadRequest
	BadRequest  interface{}
	ContentType string
	// FileSystemNotFound
	FileSystemNotFound interface{}
	// IncorrectFileSystemLifeCycleState
	IncorrectFileSystemLifeCycleState interface{}
	// InternalServerError
	InternalServerError interface{}
	StatusCode          int
	RawResponse         *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
