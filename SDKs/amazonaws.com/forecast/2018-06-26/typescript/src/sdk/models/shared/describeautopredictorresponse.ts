/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DataConfig } from "./dataconfig";
import { EncryptionConfig } from "./encryptionconfig";
import { ExplainabilityInfo } from "./explainabilityinfo";
import { MonitorInfo } from "./monitorinfo";
import { OptimizationMetricEnum } from "./optimizationmetricenum";
import { ReferencePredictorSummary } from "./referencepredictorsummary";
import { TimeAlignmentBoundary } from "./timealignmentboundary";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DescribeAutoPredictorResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DataConfig" })
  @Type(() => DataConfig)
  dataConfig?: DataConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "DatasetImportJobArns" })
  datasetImportJobArns?: string[];

  /**
   * An Key Management Service (KMS) key and an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <a>CreateDataset</a> and <a>CreatePredictor</a> requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EncryptionConfig" })
  @Type(() => EncryptionConfig)
  encryptionConfig?: EncryptionConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "EstimatedTimeRemainingInMinutes" })
  estimatedTimeRemainingInMinutes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ExplainabilityInfo" })
  @Type(() => ExplainabilityInfo)
  explainabilityInfo?: ExplainabilityInfo;

  @SpeakeasyMetadata()
  @Expose({ name: "ForecastDimensions" })
  forecastDimensions?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "ForecastFrequency" })
  forecastFrequency?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ForecastHorizon" })
  forecastHorizon?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ForecastTypes" })
  forecastTypes?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "LastModificationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModificationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MonitorInfo" })
  @Type(() => MonitorInfo)
  monitorInfo?: MonitorInfo;

  @SpeakeasyMetadata()
  @Expose({ name: "OptimizationMetric" })
  optimizationMetric?: OptimizationMetricEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PredictorArn" })
  predictorArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "PredictorName" })
  predictorName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ReferencePredictorSummary" })
  @Type(() => ReferencePredictorSummary)
  referencePredictorSummary?: ReferencePredictorSummary;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TimeAlignmentBoundary" })
  @Type(() => TimeAlignmentBoundary)
  timeAlignmentBoundary?: TimeAlignmentBoundary;
}
