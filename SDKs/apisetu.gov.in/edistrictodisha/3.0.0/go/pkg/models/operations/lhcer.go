// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LhcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type LhcerRequestBodyCertificateParameters struct {
	// Aadhaar number
	UID string `json:"UID"`
	// ApplicationReferenceNo
	Refno string `json:"refno"`
}

// LhcerRequestBodyFormatEnum - The format of the certificate in response.
type LhcerRequestBodyFormatEnum string

const (
	LhcerRequestBodyFormatEnumPdf LhcerRequestBodyFormatEnum = "pdf"
)

func (e LhcerRequestBodyFormatEnum) ToPointer() *LhcerRequestBodyFormatEnum {
	return &e
}

func (e *LhcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = LhcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LhcerRequestBodyFormatEnum: %v", v)
	}
}

// LhcerRequestBody - Request format
type LhcerRequestBody struct {
	CertificateParameters *LhcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format LhcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Lhcer504ApplicationJSONErrorEnum string

const (
	Lhcer504ApplicationJSONErrorEnumGatewayTimeout Lhcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Lhcer504ApplicationJSONErrorEnum) ToPointer() *Lhcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Lhcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Lhcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Lhcer504ApplicationJSONErrorDescriptionEnum string

const (
	Lhcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Lhcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Lhcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Lhcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lhcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Lhcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lhcer504ApplicationJSON - Gateway timeout
type Lhcer504ApplicationJSON struct {
	Error            *Lhcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lhcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lhcer503ApplicationJSONErrorEnum string

const (
	Lhcer503ApplicationJSONErrorEnumServiceUnavailable Lhcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Lhcer503ApplicationJSONErrorEnum) ToPointer() *Lhcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Lhcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Lhcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Lhcer503ApplicationJSONErrorDescriptionEnum string

const (
	Lhcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Lhcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Lhcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Lhcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lhcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Lhcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lhcer503ApplicationJSON - Service unavailable
type Lhcer503ApplicationJSON struct {
	Error            *Lhcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lhcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lhcer502ApplicationJSONErrorEnum string

const (
	Lhcer502ApplicationJSONErrorEnumBadGatewy Lhcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Lhcer502ApplicationJSONErrorEnum) ToPointer() *Lhcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Lhcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Lhcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Lhcer502ApplicationJSONErrorDescriptionEnum string

const (
	Lhcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Lhcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Lhcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Lhcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lhcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Lhcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lhcer502ApplicationJSON - Bad gateway
type Lhcer502ApplicationJSON struct {
	Error            *Lhcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lhcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lhcer500ApplicationJSONErrorEnum string

const (
	Lhcer500ApplicationJSONErrorEnumInternalServerError Lhcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Lhcer500ApplicationJSONErrorEnum) ToPointer() *Lhcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Lhcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Lhcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Lhcer500ApplicationJSONErrorDescriptionEnum string

const (
	Lhcer500ApplicationJSONErrorDescriptionEnumInternalServerError Lhcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Lhcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Lhcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lhcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Lhcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lhcer500ApplicationJSON - Internal server error
type Lhcer500ApplicationJSON struct {
	Error            *Lhcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lhcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lhcer404ApplicationJSONErrorEnum string

const (
	Lhcer404ApplicationJSONErrorEnumRecordNotFound Lhcer404ApplicationJSONErrorEnum = "record_not_found"
	Lhcer404ApplicationJSONErrorEnumURLNotFound    Lhcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Lhcer404ApplicationJSONErrorEnum) ToPointer() *Lhcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Lhcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Lhcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Lhcer404ApplicationJSONErrorDescriptionEnum string

const (
	Lhcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Lhcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Lhcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Lhcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Lhcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Lhcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lhcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Lhcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lhcer404ApplicationJSON - No record found
type Lhcer404ApplicationJSON struct {
	Error            *Lhcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lhcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lhcer401ApplicationJSONErrorEnum string

const (
	Lhcer401ApplicationJSONErrorEnumInvalidAuthentication Lhcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Lhcer401ApplicationJSONErrorEnumInvalidAuthorization  Lhcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Lhcer401ApplicationJSONErrorEnum) ToPointer() *Lhcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Lhcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Lhcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Lhcer401ApplicationJSONErrorDescriptionEnum string

const (
	Lhcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Lhcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Lhcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Lhcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Lhcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Lhcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lhcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Lhcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lhcer401ApplicationJSON - Unauthorized access
type Lhcer401ApplicationJSON struct {
	Error            *Lhcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lhcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lhcer400ApplicationJSONErrorEnum string

const (
	Lhcer400ApplicationJSONErrorEnumMissingParameter Lhcer400ApplicationJSONErrorEnum = "missing_parameter"
	Lhcer400ApplicationJSONErrorEnumInvalidParameter Lhcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Lhcer400ApplicationJSONErrorEnumInvalidFormat    Lhcer400ApplicationJSONErrorEnum = "invalid_format"
	Lhcer400ApplicationJSONErrorEnumInvalidTxnid     Lhcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Lhcer400ApplicationJSONErrorEnumInvalidConsentid Lhcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Lhcer400ApplicationJSONErrorEnum) ToPointer() *Lhcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Lhcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Lhcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Lhcer400ApplicationJSONErrorDescriptionEnum string

const (
	Lhcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Lhcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Lhcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Lhcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Lhcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Lhcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Lhcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Lhcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Lhcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Lhcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Lhcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Lhcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lhcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Lhcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lhcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lhcer400ApplicationJSON - Bad request
type Lhcer400ApplicationJSON struct {
	Error            *Lhcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lhcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type LhcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Lhcer400ApplicationJSONObject *Lhcer400ApplicationJSON
	// Unauthorized access
	Lhcer401ApplicationJSONObject *Lhcer401ApplicationJSON
	// No record found
	Lhcer404ApplicationJSONObject *Lhcer404ApplicationJSON
	// Internal server error
	Lhcer500ApplicationJSONObject *Lhcer500ApplicationJSON
	// Bad gateway
	Lhcer502ApplicationJSONObject *Lhcer502ApplicationJSON
	// Service unavailable
	Lhcer503ApplicationJSONObject *Lhcer503ApplicationJSON
	// Gateway timeout
	Lhcer504ApplicationJSONObject *Lhcer504ApplicationJSON
}
