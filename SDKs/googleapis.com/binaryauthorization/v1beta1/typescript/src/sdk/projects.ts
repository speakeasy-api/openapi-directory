/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor already exists.
   */
  binaryauthorizationProjectsAttestorsCreate(
    req: operations.BinaryauthorizationProjectsAttestorsCreateRequest,
    security: operations.BinaryauthorizationProjectsAttestorsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BinaryauthorizationProjectsAttestorsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BinaryauthorizationProjectsAttestorsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/attestors",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "attestorInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BinaryauthorizationProjectsAttestorsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BinaryauthorizationProjectsAttestorsCreateResponse =
        new operations.BinaryauthorizationProjectsAttestorsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.attestor = utils.objectToClass(httpRes?.data, shared.Attestor);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an attestor. Returns NOT_FOUND if the attestor does not exist.
   */
  binaryauthorizationProjectsAttestorsDelete(
    req: operations.BinaryauthorizationProjectsAttestorsDeleteRequest,
    security: operations.BinaryauthorizationProjectsAttestorsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BinaryauthorizationProjectsAttestorsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BinaryauthorizationProjectsAttestorsDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BinaryauthorizationProjectsAttestorsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BinaryauthorizationProjectsAttestorsDeleteResponse =
        new operations.BinaryauthorizationProjectsAttestorsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists attestors. Returns INVALID_ARGUMENT if the project does not exist.
   */
  binaryauthorizationProjectsAttestorsList(
    req: operations.BinaryauthorizationProjectsAttestorsListRequest,
    security: operations.BinaryauthorizationProjectsAttestorsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BinaryauthorizationProjectsAttestorsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BinaryauthorizationProjectsAttestorsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/attestors",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BinaryauthorizationProjectsAttestorsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BinaryauthorizationProjectsAttestorsListResponse =
        new operations.BinaryauthorizationProjectsAttestorsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAttestorsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAttestorsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an attestor. Returns NOT_FOUND if the attestor does not exist.
   */
  binaryauthorizationProjectsAttestorsUpdate(
    req: operations.BinaryauthorizationProjectsAttestorsUpdateRequest,
    security: operations.BinaryauthorizationProjectsAttestorsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BinaryauthorizationProjectsAttestorsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BinaryauthorizationProjectsAttestorsUpdateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "attestorInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BinaryauthorizationProjectsAttestorsUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BinaryauthorizationProjectsAttestorsUpdateResponse =
        new operations.BinaryauthorizationProjectsAttestorsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.attestor = utils.objectToClass(httpRes?.data, shared.Attestor);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns whether the given Attestation for the given image URI was signed by the given Attestor
   */
  binaryauthorizationProjectsAttestorsValidateAttestationOccurrence(
    req: operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceRequest,
    security: operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{attestor}:validateAttestationOccurrence",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "validateAttestationOccurrenceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceResponse =
        new operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validateAttestationOccurrenceResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidateAttestationOccurrenceResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
   */
  binaryauthorizationProjectsPolicyGetIamPolicy(
    req: operations.BinaryauthorizationProjectsPolicyGetIamPolicyRequest,
    security: operations.BinaryauthorizationProjectsPolicyGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BinaryauthorizationProjectsPolicyGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BinaryauthorizationProjectsPolicyGetIamPolicyRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BinaryauthorizationProjectsPolicyGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BinaryauthorizationProjectsPolicyGetIamPolicyResponse =
        new operations.BinaryauthorizationProjectsPolicyGetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.iamPolicy = utils.objectToClass(
              httpRes?.data,
              shared.IamPolicy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
   */
  binaryauthorizationProjectsPolicySetIamPolicy(
    req: operations.BinaryauthorizationProjectsPolicySetIamPolicyRequest,
    security: operations.BinaryauthorizationProjectsPolicySetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BinaryauthorizationProjectsPolicySetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BinaryauthorizationProjectsPolicySetIamPolicyRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BinaryauthorizationProjectsPolicySetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BinaryauthorizationProjectsPolicySetIamPolicyResponse =
        new operations.BinaryauthorizationProjectsPolicySetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.iamPolicy = utils.objectToClass(
              httpRes?.data,
              shared.IamPolicy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
   */
  binaryauthorizationProjectsPolicyTestIamPermissions(
    req: operations.BinaryauthorizationProjectsPolicyTestIamPermissionsRequest,
    security: operations.BinaryauthorizationProjectsPolicyTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BinaryauthorizationProjectsPolicyTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BinaryauthorizationProjectsPolicyTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BinaryauthorizationProjectsPolicyTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BinaryauthorizationProjectsPolicyTestIamPermissionsResponse =
        new operations.BinaryauthorizationProjectsPolicyTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
