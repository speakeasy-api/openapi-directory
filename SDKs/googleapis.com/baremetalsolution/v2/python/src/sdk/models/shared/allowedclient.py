"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AllowedClientMountPermissionsEnum(str, Enum):
    r"""Mount permissions."""
    MOUNT_PERMISSIONS_UNSPECIFIED = 'MOUNT_PERMISSIONS_UNSPECIFIED'
    READ = 'READ'
    READ_WRITE = 'READ_WRITE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AllowedClient:
    r"""Represents an 'access point' for the share."""
    
    allow_dev: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowDev'), 'exclude': lambda f: f is None }})
    r"""Allow dev flag. Which controls whether to allow creation of devices."""  
    allowed_clients_cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedClientsCidr'), 'exclude': lambda f: f is None }})
    r"""The subnet of IP addresses permitted to access the share."""  
    allow_suid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowSuid'), 'exclude': lambda f: f is None }})
    r"""Allow the setuid flag."""  
    mount_permissions: Optional[AllowedClientMountPermissionsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mountPermissions'), 'exclude': lambda f: f is None }})
    r"""Mount permissions."""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""The network the access point sits on."""  
    nfs_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nfsPath'), 'exclude': lambda f: f is None }})
    r"""Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like \\"10.0.0.0:/g123456789-nfs001\\" """  
    no_root_squash: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noRootSquash'), 'exclude': lambda f: f is None }})
    r"""Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication."""  
    share_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shareIp'), 'exclude': lambda f: f is None }})
    r"""Output only. The IP address of the share on this network. Assigned automatically during provisioning based on the network's services_cidr."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AllowedClientInput:
    r"""Represents an 'access point' for the share."""
    
    allow_dev: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowDev'), 'exclude': lambda f: f is None }})
    r"""Allow dev flag. Which controls whether to allow creation of devices."""  
    allowed_clients_cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedClientsCidr'), 'exclude': lambda f: f is None }})
    r"""The subnet of IP addresses permitted to access the share."""  
    allow_suid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowSuid'), 'exclude': lambda f: f is None }})
    r"""Allow the setuid flag."""  
    mount_permissions: Optional[AllowedClientMountPermissionsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mountPermissions'), 'exclude': lambda f: f is None }})
    r"""Mount permissions."""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""The network the access point sits on."""  
    no_root_squash: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noRootSquash'), 'exclude': lambda f: f is None }})
    r"""Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication."""  
    