// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RegisterActivityTypeXAmzTargetEnum
type RegisterActivityTypeXAmzTargetEnum string

const (
	RegisterActivityTypeXAmzTargetEnumSimpleWorkflowServiceRegisterActivityType RegisterActivityTypeXAmzTargetEnum = "SimpleWorkflowService.RegisterActivityType"
)

func (e RegisterActivityTypeXAmzTargetEnum) ToPointer() *RegisterActivityTypeXAmzTargetEnum {
	return &e
}

func (e *RegisterActivityTypeXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SimpleWorkflowService.RegisterActivityType":
		*e = RegisterActivityTypeXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterActivityTypeXAmzTargetEnum: %v", v)
	}
}

type RegisterActivityTypeRequest struct {
	RegisterActivityTypeInput shared.RegisterActivityTypeInput   `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                RegisterActivityTypeXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RegisterActivityTypeResponse struct {
	ContentType string
	// LimitExceededFault
	LimitExceededFault interface{}
	// OperationNotPermittedFault
	OperationNotPermittedFault interface{}
	StatusCode                 int
	RawResponse                *http.Response
	// TypeAlreadyExistsFault
	TypeAlreadyExistsFault interface{}
	// UnknownResourceFault
	UnknownResourceFault interface{}
}
