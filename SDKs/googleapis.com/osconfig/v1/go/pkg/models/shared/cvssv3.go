// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CVSSv3AttackComplexityEnum - This metric describes the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
type CVSSv3AttackComplexityEnum string

const (
	CVSSv3AttackComplexityEnumAttackComplexityUnspecified CVSSv3AttackComplexityEnum = "ATTACK_COMPLEXITY_UNSPECIFIED"
	CVSSv3AttackComplexityEnumAttackComplexityLow         CVSSv3AttackComplexityEnum = "ATTACK_COMPLEXITY_LOW"
	CVSSv3AttackComplexityEnumAttackComplexityHigh        CVSSv3AttackComplexityEnum = "ATTACK_COMPLEXITY_HIGH"
)

func (e CVSSv3AttackComplexityEnum) ToPointer() *CVSSv3AttackComplexityEnum {
	return &e
}

func (e *CVSSv3AttackComplexityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ATTACK_COMPLEXITY_UNSPECIFIED":
		fallthrough
	case "ATTACK_COMPLEXITY_LOW":
		fallthrough
	case "ATTACK_COMPLEXITY_HIGH":
		*e = CVSSv3AttackComplexityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSv3AttackComplexityEnum: %v", v)
	}
}

// CVSSv3AttackVectorEnum - This metric reflects the context by which vulnerability exploitation is possible.
type CVSSv3AttackVectorEnum string

const (
	CVSSv3AttackVectorEnumAttackVectorUnspecified CVSSv3AttackVectorEnum = "ATTACK_VECTOR_UNSPECIFIED"
	CVSSv3AttackVectorEnumAttackVectorNetwork     CVSSv3AttackVectorEnum = "ATTACK_VECTOR_NETWORK"
	CVSSv3AttackVectorEnumAttackVectorAdjacent    CVSSv3AttackVectorEnum = "ATTACK_VECTOR_ADJACENT"
	CVSSv3AttackVectorEnumAttackVectorLocal       CVSSv3AttackVectorEnum = "ATTACK_VECTOR_LOCAL"
	CVSSv3AttackVectorEnumAttackVectorPhysical    CVSSv3AttackVectorEnum = "ATTACK_VECTOR_PHYSICAL"
)

func (e CVSSv3AttackVectorEnum) ToPointer() *CVSSv3AttackVectorEnum {
	return &e
}

func (e *CVSSv3AttackVectorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ATTACK_VECTOR_UNSPECIFIED":
		fallthrough
	case "ATTACK_VECTOR_NETWORK":
		fallthrough
	case "ATTACK_VECTOR_ADJACENT":
		fallthrough
	case "ATTACK_VECTOR_LOCAL":
		fallthrough
	case "ATTACK_VECTOR_PHYSICAL":
		*e = CVSSv3AttackVectorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSv3AttackVectorEnum: %v", v)
	}
}

// CVSSv3AvailabilityImpactEnum - This metric measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
type CVSSv3AvailabilityImpactEnum string

const (
	CVSSv3AvailabilityImpactEnumImpactUnspecified CVSSv3AvailabilityImpactEnum = "IMPACT_UNSPECIFIED"
	CVSSv3AvailabilityImpactEnumImpactHigh        CVSSv3AvailabilityImpactEnum = "IMPACT_HIGH"
	CVSSv3AvailabilityImpactEnumImpactLow         CVSSv3AvailabilityImpactEnum = "IMPACT_LOW"
	CVSSv3AvailabilityImpactEnumImpactNone        CVSSv3AvailabilityImpactEnum = "IMPACT_NONE"
)

func (e CVSSv3AvailabilityImpactEnum) ToPointer() *CVSSv3AvailabilityImpactEnum {
	return &e
}

func (e *CVSSv3AvailabilityImpactEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IMPACT_UNSPECIFIED":
		fallthrough
	case "IMPACT_HIGH":
		fallthrough
	case "IMPACT_LOW":
		fallthrough
	case "IMPACT_NONE":
		*e = CVSSv3AvailabilityImpactEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSv3AvailabilityImpactEnum: %v", v)
	}
}

// CVSSv3ConfidentialityImpactEnum - This metric measures the impact to the confidentiality of the information resources managed by a software component due to a successfully exploited vulnerability.
type CVSSv3ConfidentialityImpactEnum string

const (
	CVSSv3ConfidentialityImpactEnumImpactUnspecified CVSSv3ConfidentialityImpactEnum = "IMPACT_UNSPECIFIED"
	CVSSv3ConfidentialityImpactEnumImpactHigh        CVSSv3ConfidentialityImpactEnum = "IMPACT_HIGH"
	CVSSv3ConfidentialityImpactEnumImpactLow         CVSSv3ConfidentialityImpactEnum = "IMPACT_LOW"
	CVSSv3ConfidentialityImpactEnumImpactNone        CVSSv3ConfidentialityImpactEnum = "IMPACT_NONE"
)

func (e CVSSv3ConfidentialityImpactEnum) ToPointer() *CVSSv3ConfidentialityImpactEnum {
	return &e
}

func (e *CVSSv3ConfidentialityImpactEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IMPACT_UNSPECIFIED":
		fallthrough
	case "IMPACT_HIGH":
		fallthrough
	case "IMPACT_LOW":
		fallthrough
	case "IMPACT_NONE":
		*e = CVSSv3ConfidentialityImpactEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSv3ConfidentialityImpactEnum: %v", v)
	}
}

// CVSSv3IntegrityImpactEnum - This metric measures the impact to integrity of a successfully exploited vulnerability.
type CVSSv3IntegrityImpactEnum string

const (
	CVSSv3IntegrityImpactEnumImpactUnspecified CVSSv3IntegrityImpactEnum = "IMPACT_UNSPECIFIED"
	CVSSv3IntegrityImpactEnumImpactHigh        CVSSv3IntegrityImpactEnum = "IMPACT_HIGH"
	CVSSv3IntegrityImpactEnumImpactLow         CVSSv3IntegrityImpactEnum = "IMPACT_LOW"
	CVSSv3IntegrityImpactEnumImpactNone        CVSSv3IntegrityImpactEnum = "IMPACT_NONE"
)

func (e CVSSv3IntegrityImpactEnum) ToPointer() *CVSSv3IntegrityImpactEnum {
	return &e
}

func (e *CVSSv3IntegrityImpactEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IMPACT_UNSPECIFIED":
		fallthrough
	case "IMPACT_HIGH":
		fallthrough
	case "IMPACT_LOW":
		fallthrough
	case "IMPACT_NONE":
		*e = CVSSv3IntegrityImpactEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSv3IntegrityImpactEnum: %v", v)
	}
}

// CVSSv3PrivilegesRequiredEnum - This metric describes the level of privileges an attacker must possess before successfully exploiting the vulnerability.
type CVSSv3PrivilegesRequiredEnum string

const (
	CVSSv3PrivilegesRequiredEnumPrivilegesRequiredUnspecified CVSSv3PrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_UNSPECIFIED"
	CVSSv3PrivilegesRequiredEnumPrivilegesRequiredNone        CVSSv3PrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_NONE"
	CVSSv3PrivilegesRequiredEnumPrivilegesRequiredLow         CVSSv3PrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_LOW"
	CVSSv3PrivilegesRequiredEnumPrivilegesRequiredHigh        CVSSv3PrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_HIGH"
)

func (e CVSSv3PrivilegesRequiredEnum) ToPointer() *CVSSv3PrivilegesRequiredEnum {
	return &e
}

func (e *CVSSv3PrivilegesRequiredEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRIVILEGES_REQUIRED_UNSPECIFIED":
		fallthrough
	case "PRIVILEGES_REQUIRED_NONE":
		fallthrough
	case "PRIVILEGES_REQUIRED_LOW":
		fallthrough
	case "PRIVILEGES_REQUIRED_HIGH":
		*e = CVSSv3PrivilegesRequiredEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSv3PrivilegesRequiredEnum: %v", v)
	}
}

// CVSSv3ScopeEnum - The Scope metric captures whether a vulnerability in one vulnerable component impacts resources in components beyond its security scope.
type CVSSv3ScopeEnum string

const (
	CVSSv3ScopeEnumScopeUnspecified CVSSv3ScopeEnum = "SCOPE_UNSPECIFIED"
	CVSSv3ScopeEnumScopeUnchanged   CVSSv3ScopeEnum = "SCOPE_UNCHANGED"
	CVSSv3ScopeEnumScopeChanged     CVSSv3ScopeEnum = "SCOPE_CHANGED"
)

func (e CVSSv3ScopeEnum) ToPointer() *CVSSv3ScopeEnum {
	return &e
}

func (e *CVSSv3ScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SCOPE_UNSPECIFIED":
		fallthrough
	case "SCOPE_UNCHANGED":
		fallthrough
	case "SCOPE_CHANGED":
		*e = CVSSv3ScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSv3ScopeEnum: %v", v)
	}
}

// CVSSv3UserInteractionEnum - This metric captures the requirement for a human user, other than the attacker, to participate in the successful compromise of the vulnerable component.
type CVSSv3UserInteractionEnum string

const (
	CVSSv3UserInteractionEnumUserInteractionUnspecified CVSSv3UserInteractionEnum = "USER_INTERACTION_UNSPECIFIED"
	CVSSv3UserInteractionEnumUserInteractionNone        CVSSv3UserInteractionEnum = "USER_INTERACTION_NONE"
	CVSSv3UserInteractionEnumUserInteractionRequired    CVSSv3UserInteractionEnum = "USER_INTERACTION_REQUIRED"
)

func (e CVSSv3UserInteractionEnum) ToPointer() *CVSSv3UserInteractionEnum {
	return &e
}

func (e *CVSSv3UserInteractionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USER_INTERACTION_UNSPECIFIED":
		fallthrough
	case "USER_INTERACTION_NONE":
		fallthrough
	case "USER_INTERACTION_REQUIRED":
		*e = CVSSv3UserInteractionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CVSSv3UserInteractionEnum: %v", v)
	}
}

// CVSSv3 - Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
type CVSSv3 struct {
	// This metric describes the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
	AttackComplexity *CVSSv3AttackComplexityEnum `json:"attackComplexity,omitempty"`
	// This metric reflects the context by which vulnerability exploitation is possible.
	AttackVector *CVSSv3AttackVectorEnum `json:"attackVector,omitempty"`
	// This metric measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
	AvailabilityImpact *CVSSv3AvailabilityImpactEnum `json:"availabilityImpact,omitempty"`
	// The base score is a function of the base metric scores. https://www.first.org/cvss/specification-document#Base-Metrics
	BaseScore *float32 `json:"baseScore,omitempty"`
	// This metric measures the impact to the confidentiality of the information resources managed by a software component due to a successfully exploited vulnerability.
	ConfidentialityImpact *CVSSv3ConfidentialityImpactEnum `json:"confidentialityImpact,omitempty"`
	// The Exploitability sub-score equation is derived from the Base Exploitability metrics. https://www.first.org/cvss/specification-document#2-1-Exploitability-Metrics
	ExploitabilityScore *float32 `json:"exploitabilityScore,omitempty"`
	// The Impact sub-score equation is derived from the Base Impact metrics.
	ImpactScore *float32 `json:"impactScore,omitempty"`
	// This metric measures the impact to integrity of a successfully exploited vulnerability.
	IntegrityImpact *CVSSv3IntegrityImpactEnum `json:"integrityImpact,omitempty"`
	// This metric describes the level of privileges an attacker must possess before successfully exploiting the vulnerability.
	PrivilegesRequired *CVSSv3PrivilegesRequiredEnum `json:"privilegesRequired,omitempty"`
	// The Scope metric captures whether a vulnerability in one vulnerable component impacts resources in components beyond its security scope.
	Scope *CVSSv3ScopeEnum `json:"scope,omitempty"`
	// This metric captures the requirement for a human user, other than the attacker, to participate in the successful compromise of the vulnerable component.
	UserInteraction *CVSSv3UserInteractionEnum `json:"userInteraction,omitempty"`
}
