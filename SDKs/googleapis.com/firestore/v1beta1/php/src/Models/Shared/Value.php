<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Value - A message that can hold any of the supported value types.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Value
{
    /**
     * An array value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ArrayValue $arrayValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('arrayValue')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ArrayValue')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ArrayValue $arrayValue = null;
    
    /**
     * A boolean value.
     * 
     * @var ?bool $booleanValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('booleanValue')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $booleanValue = null;
    
    /**
     * A bytes value. Must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes are considered by queries.
     * 
     * @var ?string $bytesValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('bytesValue')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bytesValue = null;
    
    /**
     * A double value.
     * 
     * @var ?float $doubleValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('doubleValue')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $doubleValue = null;
    
    /**
     * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\LatLng $geoPointValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('geoPointValue')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\LatLng')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?LatLng $geoPointValue = null;
    
    /**
     * An integer value.
     * 
     * @var ?string $integerValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('integerValue')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $integerValue = null;
    
    /**
     * A map value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\MapValue $mapValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('mapValue')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MapValue')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?MapValue $mapValue = null;
    
    /**
     * A null value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ValueNullValueEnum $nullValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('nullValue')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ValueNullValueEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ValueNullValueEnum $nullValue = null;
    
    /**
     * A reference to a document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
     * 
     * @var ?string $referenceValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('referenceValue')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referenceValue = null;
    
    /**
     * A string value. The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes of the UTF-8 representation are considered by queries.
     * 
     * @var ?string $stringValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('stringValue')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $stringValue = null;
    
    /**
     * A timestamp value. Precise only to microseconds. When stored, any additional precision is rounded down.
     * 
     * @var ?string $timestampValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('timestampValue')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $timestampValue = null;
    
	public function __construct()
	{
		$this->arrayValue = null;
		$this->booleanValue = null;
		$this->bytesValue = null;
		$this->doubleValue = null;
		$this->geoPointValue = null;
		$this->integerValue = null;
		$this->mapValue = null;
		$this->nullValue = null;
		$this->referenceValue = null;
		$this->stringValue = null;
		$this->timestampValue = null;
	}
}
