/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SearchExpression - &lt;p&gt;A multi-expression that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. You must specify at least one subexpression, filter, or nested filter. A &lt;code&gt;SearchExpression&lt;/code&gt; can contain up to twenty elements.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;SearchExpression&lt;/code&gt; contains the following components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A list of &lt;code&gt;Filter&lt;/code&gt; objects. Each filter defines a simple Boolean expression comprised of a resource property name, Boolean operator, and value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A list of &lt;code&gt;NestedFilter&lt;/code&gt; objects. Each nested filter defines a list of Boolean expressions using a list of resource properties. A nested filter is satisfied if a single object in the list satisfies all Boolean expressions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A list of &lt;code&gt;SearchExpression&lt;/code&gt; objects. A search expression object can be nested in a list of search expression objects.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A Boolean operator: &lt;code&gt;And&lt;/code&gt; or &lt;code&gt;Or&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
public class SearchExpression {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Filters")
    public Filter[] filters;

    public SearchExpression withFilters(Filter[] filters) {
        this.filters = filters;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NestedFilters")
    public NestedFilters[] nestedFilters;

    public SearchExpression withNestedFilters(NestedFilters[] nestedFilters) {
        this.nestedFilters = nestedFilters;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Operator")
    public BooleanOperatorEnum operator;

    public SearchExpression withOperator(BooleanOperatorEnum operator) {
        this.operator = operator;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SubExpressions")
    public SearchExpression[] subExpressions;

    public SearchExpression withSubExpressions(SearchExpression[] subExpressions) {
        this.subExpressions = subExpressions;
        return this;
    }
    
    public SearchExpression(){}
}
