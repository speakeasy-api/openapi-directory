/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PrimaryIPActions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Assign a Primary IP to a resource
   *
   * @remarks
   * Assigns a Primary IP to a Server.
   *
   * A Server can only have one Primary IP of type `ipv4` and one of type `ipv6` assigned. If you need more IPs use Floating IPs.
   *
   * The Server must be powered off (status `off`) in order for this operation to succeed.
   *
   * #### Call specific error codes
   *
   * | Code                          | Description                                                   |
   * |------------------------------ |-------------------------------------------------------------- |
   * | `server_not_stopped`          | The server is running, but needs to be powered off            |
   * | `primary_ip_already_assigned` | Primary ip is already assigned to a different server          |
   * | `server_has_ipv4`             | The server already has an ipv4 address                        |
   * | `server_has_ipv6`             | The server already has an ipv6 address                        |
   *
   */
  postPrimaryIpsIdActionsAssign(
    req: operations.PostPrimaryIpsIdActionsAssignRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPrimaryIpsIdActionsAssignResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostPrimaryIpsIdActionsAssignRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/primary_ips/{id}/actions/assign",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPrimaryIpsIdActionsAssignResponse =
        new operations.PostPrimaryIpsIdActionsAssignResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostPrimaryIpsIdActionsAssignActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Change reverse DNS entry for a Primary IP
   *
   * @remarks
   * Changes the hostname that will appear when getting the hostname belonging to this Primary IP.
   */
  postPrimaryIpsIdActionsChangeDnsPtr(
    req: operations.PostPrimaryIpsIdActionsChangeDnsPtrRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPrimaryIpsIdActionsChangeDnsPtrResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostPrimaryIpsIdActionsChangeDnsPtrRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/primary_ips/{id}/actions/change_dns_ptr",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPrimaryIpsIdActionsChangeDnsPtrResponse =
        new operations.PostPrimaryIpsIdActionsChangeDnsPtrResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostPrimaryIpsIdActionsChangeDnsPtrActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Change Primary IP Protection
   *
   * @remarks
   * Changes the protection configuration of a Primary IP.
   *
   * A Primary IP can only be delete protected if its `auto_delete` property is set to `false`.
   *
   */
  postPrimaryIpsIdActionsChangeProtection(
    req: operations.PostPrimaryIpsIdActionsChangeProtectionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPrimaryIpsIdActionsChangeProtectionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostPrimaryIpsIdActionsChangeProtectionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/primary_ips/{id}/actions/change_protection",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPrimaryIpsIdActionsChangeProtectionResponse =
        new operations.PostPrimaryIpsIdActionsChangeProtectionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostPrimaryIpsIdActionsChangeProtectionActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unassign a Primary IP from a resource
   *
   * @remarks
   * Unassigns a Primary IP from a Server.
   *
   * The Server must be powered off (status `off`) in order for this operation to succeed.
   *
   * Note that only Servers that have at least one network interface (public or private) attached can be powered on.
   *
   * #### Call specific error codes
   *
   * | Code                              | Description                                                   |
   * |---------------------------------- |-------------------------------------------------------------- |
   * | `server_not_stopped`              | The server is running, but needs to be powered off            |
   * | `server_is_load_balancer_target`  | The server ipv4 address is a loadbalancer target              |
   *
   */
  postPrimaryIpsIdActionsUnassign(
    req: operations.PostPrimaryIpsIdActionsUnassignRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPrimaryIpsIdActionsUnassignResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostPrimaryIpsIdActionsUnassignRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/primary_ips/{id}/actions/unassign",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPrimaryIpsIdActionsUnassignResponse =
        new operations.PostPrimaryIpsIdActionsUnassignResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostPrimaryIpsIdActionsUnassignActionResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
