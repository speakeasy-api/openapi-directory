// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostFirewallsCreateFirewallRequestApplyToLabelSelector - Configuration for type LabelSelector, required if type is `label_selector`
type PostFirewallsCreateFirewallRequestApplyToLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

// PostFirewallsCreateFirewallRequestApplyToServer - Configuration for type Server, required if type is `server`
type PostFirewallsCreateFirewallRequestApplyToServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

// PostFirewallsCreateFirewallRequestApplyToTypeEnum - Type of the resource
type PostFirewallsCreateFirewallRequestApplyToTypeEnum string

const (
	PostFirewallsCreateFirewallRequestApplyToTypeEnumServer        PostFirewallsCreateFirewallRequestApplyToTypeEnum = "server"
	PostFirewallsCreateFirewallRequestApplyToTypeEnumLabelSelector PostFirewallsCreateFirewallRequestApplyToTypeEnum = "label_selector"
)

func (e PostFirewallsCreateFirewallRequestApplyToTypeEnum) ToPointer() *PostFirewallsCreateFirewallRequestApplyToTypeEnum {
	return &e
}

func (e *PostFirewallsCreateFirewallRequestApplyToTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server":
		fallthrough
	case "label_selector":
		*e = PostFirewallsCreateFirewallRequestApplyToTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsCreateFirewallRequestApplyToTypeEnum: %v", v)
	}
}

type PostFirewallsCreateFirewallRequestApplyTo struct {
	// Configuration for type LabelSelector, required if type is `label_selector`
	LabelSelector *PostFirewallsCreateFirewallRequestApplyToLabelSelector `json:"label_selector,omitempty"`
	// Configuration for type Server, required if type is `server`
	Server *PostFirewallsCreateFirewallRequestApplyToServer `json:"server,omitempty"`
	// Type of the resource
	Type PostFirewallsCreateFirewallRequestApplyToTypeEnum `json:"type"`
}

// PostFirewallsCreateFirewallRequestRuleDirectionEnum - Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
type PostFirewallsCreateFirewallRequestRuleDirectionEnum string

const (
	PostFirewallsCreateFirewallRequestRuleDirectionEnumIn  PostFirewallsCreateFirewallRequestRuleDirectionEnum = "in"
	PostFirewallsCreateFirewallRequestRuleDirectionEnumOut PostFirewallsCreateFirewallRequestRuleDirectionEnum = "out"
)

func (e PostFirewallsCreateFirewallRequestRuleDirectionEnum) ToPointer() *PostFirewallsCreateFirewallRequestRuleDirectionEnum {
	return &e
}

func (e *PostFirewallsCreateFirewallRequestRuleDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in":
		fallthrough
	case "out":
		*e = PostFirewallsCreateFirewallRequestRuleDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsCreateFirewallRequestRuleDirectionEnum: %v", v)
	}
}

// PostFirewallsCreateFirewallRequestRuleProtocolEnum - Type of traffic to allow
type PostFirewallsCreateFirewallRequestRuleProtocolEnum string

const (
	PostFirewallsCreateFirewallRequestRuleProtocolEnumTCP  PostFirewallsCreateFirewallRequestRuleProtocolEnum = "tcp"
	PostFirewallsCreateFirewallRequestRuleProtocolEnumUDP  PostFirewallsCreateFirewallRequestRuleProtocolEnum = "udp"
	PostFirewallsCreateFirewallRequestRuleProtocolEnumIcmp PostFirewallsCreateFirewallRequestRuleProtocolEnum = "icmp"
	PostFirewallsCreateFirewallRequestRuleProtocolEnumEsp  PostFirewallsCreateFirewallRequestRuleProtocolEnum = "esp"
	PostFirewallsCreateFirewallRequestRuleProtocolEnumGre  PostFirewallsCreateFirewallRequestRuleProtocolEnum = "gre"
)

func (e PostFirewallsCreateFirewallRequestRuleProtocolEnum) ToPointer() *PostFirewallsCreateFirewallRequestRuleProtocolEnum {
	return &e
}

func (e *PostFirewallsCreateFirewallRequestRuleProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "udp":
		fallthrough
	case "icmp":
		fallthrough
	case "esp":
		fallthrough
	case "gre":
		*e = PostFirewallsCreateFirewallRequestRuleProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsCreateFirewallRequestRuleProtocolEnum: %v", v)
	}
}

type PostFirewallsCreateFirewallRequestRule struct {
	// Description of the Rule
	Description *string `json:"description,omitempty"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	DestinationIps []string `json:"destination_ips,omitempty"`
	// Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
	Direction PostFirewallsCreateFirewallRequestRuleDirectionEnum `json:"direction"`
	// Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.
	Port *string `json:"port,omitempty"`
	// Type of traffic to allow
	Protocol PostFirewallsCreateFirewallRequestRuleProtocolEnum `json:"protocol"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	SourceIps []string `json:"source_ips,omitempty"`
}

type PostFirewallsCreateFirewallRequest struct {
	// Resources the Firewall should be applied to after creation
	ApplyTo []PostFirewallsCreateFirewallRequestApplyTo `json:"apply_to,omitempty"`
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	// Name of the Firewall
	Name string `json:"name"`
	// Array of rules
	Rules []PostFirewallsCreateFirewallRequestRule `json:"rules,omitempty"`
}

// PostFirewallsCreateFirewallResponseActionError - Error message for the Action if error occurred, otherwise null
type PostFirewallsCreateFirewallResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostFirewallsCreateFirewallResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostFirewallsCreateFirewallResponseActionStatusEnum - Status of the Action
type PostFirewallsCreateFirewallResponseActionStatusEnum string

const (
	PostFirewallsCreateFirewallResponseActionStatusEnumSuccess PostFirewallsCreateFirewallResponseActionStatusEnum = "success"
	PostFirewallsCreateFirewallResponseActionStatusEnumRunning PostFirewallsCreateFirewallResponseActionStatusEnum = "running"
	PostFirewallsCreateFirewallResponseActionStatusEnumError   PostFirewallsCreateFirewallResponseActionStatusEnum = "error"
)

func (e PostFirewallsCreateFirewallResponseActionStatusEnum) ToPointer() *PostFirewallsCreateFirewallResponseActionStatusEnum {
	return &e
}

func (e *PostFirewallsCreateFirewallResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostFirewallsCreateFirewallResponseActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsCreateFirewallResponseActionStatusEnum: %v", v)
	}
}

type PostFirewallsCreateFirewallResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostFirewallsCreateFirewallResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostFirewallsCreateFirewallResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostFirewallsCreateFirewallResponseActionStatusEnum `json:"status"`
}

type PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesServer struct {
	// ID of the Resource
	ID int64 `json:"id"`
}

// PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum - Type of resource referenced
type PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum string

const (
	PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnumServer PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum = "server"
)

func (e PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum) ToPointer() *PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum {
	return &e
}

func (e *PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server":
		*e = PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum: %v", v)
	}
}

type PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResources struct {
	Server *PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesServer `json:"server,omitempty"`
	// Type of resource referenced
	Type *PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum `json:"type,omitempty"`
}

type PostFirewallsCreateFirewallResponseFirewallAppliedToLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

type PostFirewallsCreateFirewallResponseFirewallAppliedToServer struct {
	// ID of the Resource
	ID int64 `json:"id"`
}

// PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum - Type of resource referenced
type PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum string

const (
	PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnumServer        PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum = "server"
	PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnumLabelSelector PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum = "label_selector"
)

func (e PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum) ToPointer() *PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum {
	return &e
}

func (e *PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server":
		fallthrough
	case "label_selector":
		*e = PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum: %v", v)
	}
}

type PostFirewallsCreateFirewallResponseFirewallAppliedTo struct {
	AppliedToResources []PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResources `json:"applied_to_resources,omitempty"`
	LabelSelector      *PostFirewallsCreateFirewallResponseFirewallAppliedToLabelSelector       `json:"label_selector,omitempty"`
	Server             *PostFirewallsCreateFirewallResponseFirewallAppliedToServer              `json:"server,omitempty"`
	// Type of resource referenced
	Type PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum `json:"type"`
}

// PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum - Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
type PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum string

const (
	PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnumIn  PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum = "in"
	PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnumOut PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum = "out"
)

func (e PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum) ToPointer() *PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum {
	return &e
}

func (e *PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in":
		fallthrough
	case "out":
		*e = PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum: %v", v)
	}
}

// PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum - Type of traffic to allow
type PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum string

const (
	PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnumTCP  PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum = "tcp"
	PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnumUDP  PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum = "udp"
	PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnumIcmp PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum = "icmp"
	PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnumEsp  PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum = "esp"
	PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnumGre  PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum = "gre"
)

func (e PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum) ToPointer() *PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum {
	return &e
}

func (e *PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "udp":
		fallthrough
	case "icmp":
		fallthrough
	case "esp":
		fallthrough
	case "gre":
		*e = PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum: %v", v)
	}
}

type PostFirewallsCreateFirewallResponseFirewallRule struct {
	// Description of the Rule
	Description *string `json:"description,omitempty"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	DestinationIps []string `json:"destination_ips,omitempty"`
	// Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
	Direction PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum `json:"direction"`
	// Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.
	Port *string `json:"port,omitempty"`
	// Type of traffic to allow
	Protocol PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum `json:"protocol"`
	// List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
	SourceIps []string `json:"source_ips,omitempty"`
}

type PostFirewallsCreateFirewallResponseFirewall struct {
	AppliedTo []PostFirewallsCreateFirewallResponseFirewallAppliedTo `json:"applied_to"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels,omitempty"`
	// Name of the Resource. Must be unique per Project.
	Name  string                                            `json:"name"`
	Rules []PostFirewallsCreateFirewallResponseFirewallRule `json:"rules"`
}

// PostFirewallsCreateFirewallResponse - The `firewall` key contains the Firewall that was just created
type PostFirewallsCreateFirewallResponse struct {
	Actions  []PostFirewallsCreateFirewallResponseAction  `json:"actions,omitempty"`
	Firewall *PostFirewallsCreateFirewallResponseFirewall `json:"firewall,omitempty"`
}

type PostFirewallsResponse struct {
	ContentType string
	// The `firewall` key contains the Firewall that was just created
	CreateFirewallResponse *PostFirewallsCreateFirewallResponse
	StatusCode             int
	RawResponse            *http.Response
}
