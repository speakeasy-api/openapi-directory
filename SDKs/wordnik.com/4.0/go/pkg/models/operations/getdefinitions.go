// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetDefinitionsIncludeTagsEnum - Return a closed set of XML tags in response
type GetDefinitionsIncludeTagsEnum string

const (
	GetDefinitionsIncludeTagsEnumFalse GetDefinitionsIncludeTagsEnum = "false"
	GetDefinitionsIncludeTagsEnumTrue  GetDefinitionsIncludeTagsEnum = "true"
)

func (e *GetDefinitionsIncludeTagsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = GetDefinitionsIncludeTagsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDefinitionsIncludeTagsEnum: %s", s)
	}
}

// GetDefinitionsPartOfSpeechEnum - CSV list of part-of-speech types
type GetDefinitionsPartOfSpeechEnum string

const (
	GetDefinitionsPartOfSpeechEnumNoun                GetDefinitionsPartOfSpeechEnum = "noun"
	GetDefinitionsPartOfSpeechEnumAdjective           GetDefinitionsPartOfSpeechEnum = "adjective"
	GetDefinitionsPartOfSpeechEnumVerb                GetDefinitionsPartOfSpeechEnum = "verb"
	GetDefinitionsPartOfSpeechEnumAdverb              GetDefinitionsPartOfSpeechEnum = "adverb"
	GetDefinitionsPartOfSpeechEnumInterjection        GetDefinitionsPartOfSpeechEnum = "interjection"
	GetDefinitionsPartOfSpeechEnumPronoun             GetDefinitionsPartOfSpeechEnum = "pronoun"
	GetDefinitionsPartOfSpeechEnumPreposition         GetDefinitionsPartOfSpeechEnum = "preposition"
	GetDefinitionsPartOfSpeechEnumAbbreviation        GetDefinitionsPartOfSpeechEnum = "abbreviation"
	GetDefinitionsPartOfSpeechEnumAffix               GetDefinitionsPartOfSpeechEnum = "affix"
	GetDefinitionsPartOfSpeechEnumArticle             GetDefinitionsPartOfSpeechEnum = "article"
	GetDefinitionsPartOfSpeechEnumAuxiliaryVerb       GetDefinitionsPartOfSpeechEnum = "auxiliary-verb"
	GetDefinitionsPartOfSpeechEnumConjunction         GetDefinitionsPartOfSpeechEnum = "conjunction"
	GetDefinitionsPartOfSpeechEnumDefiniteArticle     GetDefinitionsPartOfSpeechEnum = "definite-article"
	GetDefinitionsPartOfSpeechEnumFamilyName          GetDefinitionsPartOfSpeechEnum = "family-name"
	GetDefinitionsPartOfSpeechEnumGivenName           GetDefinitionsPartOfSpeechEnum = "given-name"
	GetDefinitionsPartOfSpeechEnumIdiom               GetDefinitionsPartOfSpeechEnum = "idiom"
	GetDefinitionsPartOfSpeechEnumImperative          GetDefinitionsPartOfSpeechEnum = "imperative"
	GetDefinitionsPartOfSpeechEnumNounPlural          GetDefinitionsPartOfSpeechEnum = "noun-plural"
	GetDefinitionsPartOfSpeechEnumNounPosessive       GetDefinitionsPartOfSpeechEnum = "noun-posessive"
	GetDefinitionsPartOfSpeechEnumPastParticiple      GetDefinitionsPartOfSpeechEnum = "past-participle"
	GetDefinitionsPartOfSpeechEnumPhrasalPrefix       GetDefinitionsPartOfSpeechEnum = "phrasal-prefix"
	GetDefinitionsPartOfSpeechEnumProperNoun          GetDefinitionsPartOfSpeechEnum = "proper-noun"
	GetDefinitionsPartOfSpeechEnumProperNounPlural    GetDefinitionsPartOfSpeechEnum = "proper-noun-plural"
	GetDefinitionsPartOfSpeechEnumProperNounPosessive GetDefinitionsPartOfSpeechEnum = "proper-noun-posessive"
	GetDefinitionsPartOfSpeechEnumSuffix              GetDefinitionsPartOfSpeechEnum = "suffix"
	GetDefinitionsPartOfSpeechEnumVerbIntransitive    GetDefinitionsPartOfSpeechEnum = "verb-intransitive"
	GetDefinitionsPartOfSpeechEnumVerbTransitive      GetDefinitionsPartOfSpeechEnum = "verb-transitive"
)

func (e *GetDefinitionsPartOfSpeechEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "noun":
		fallthrough
	case "adjective":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "interjection":
		fallthrough
	case "pronoun":
		fallthrough
	case "preposition":
		fallthrough
	case "abbreviation":
		fallthrough
	case "affix":
		fallthrough
	case "article":
		fallthrough
	case "auxiliary-verb":
		fallthrough
	case "conjunction":
		fallthrough
	case "definite-article":
		fallthrough
	case "family-name":
		fallthrough
	case "given-name":
		fallthrough
	case "idiom":
		fallthrough
	case "imperative":
		fallthrough
	case "noun-plural":
		fallthrough
	case "noun-posessive":
		fallthrough
	case "past-participle":
		fallthrough
	case "phrasal-prefix":
		fallthrough
	case "proper-noun":
		fallthrough
	case "proper-noun-plural":
		fallthrough
	case "proper-noun-posessive":
		fallthrough
	case "suffix":
		fallthrough
	case "verb-intransitive":
		fallthrough
	case "verb-transitive":
		*e = GetDefinitionsPartOfSpeechEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDefinitionsPartOfSpeechEnum: %s", s)
	}
}

// GetDefinitionsSourceDictionariesEnum - Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet
type GetDefinitionsSourceDictionariesEnum string

const (
	GetDefinitionsSourceDictionariesEnumAll        GetDefinitionsSourceDictionariesEnum = "all"
	GetDefinitionsSourceDictionariesEnumAhd5       GetDefinitionsSourceDictionariesEnum = "ahd-5"
	GetDefinitionsSourceDictionariesEnumCentury    GetDefinitionsSourceDictionariesEnum = "century"
	GetDefinitionsSourceDictionariesEnumWiktionary GetDefinitionsSourceDictionariesEnum = "wiktionary"
	GetDefinitionsSourceDictionariesEnumWebster    GetDefinitionsSourceDictionariesEnum = "webster"
	GetDefinitionsSourceDictionariesEnumWordnet    GetDefinitionsSourceDictionariesEnum = "wordnet"
)

func (e *GetDefinitionsSourceDictionariesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "ahd-5":
		fallthrough
	case "century":
		fallthrough
	case "wiktionary":
		fallthrough
	case "webster":
		fallthrough
	case "wordnet":
		*e = GetDefinitionsSourceDictionariesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDefinitionsSourceDictionariesEnum: %s", s)
	}
}

// GetDefinitionsUseCanonicalEnum - If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
type GetDefinitionsUseCanonicalEnum string

const (
	GetDefinitionsUseCanonicalEnumFalse GetDefinitionsUseCanonicalEnum = "false"
	GetDefinitionsUseCanonicalEnumTrue  GetDefinitionsUseCanonicalEnum = "true"
)

func (e *GetDefinitionsUseCanonicalEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = GetDefinitionsUseCanonicalEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDefinitionsUseCanonicalEnum: %s", s)
	}
}

type GetDefinitionsRequest struct {
	// Return related words with definitions
	IncludeRelated *string `queryParam:"style=form,explode=true,name=includeRelated"`
	// Return a closed set of XML tags in response
	IncludeTags *GetDefinitionsIncludeTagsEnum `queryParam:"style=form,explode=true,name=includeTags"`
	// Maximum number of results to return
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// CSV list of part-of-speech types
	PartOfSpeech *GetDefinitionsPartOfSpeechEnum `queryParam:"style=form,explode=true,name=partOfSpeech"`
	// Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet
	SourceDictionaries *GetDefinitionsSourceDictionariesEnum `queryParam:"style=form,explode=false,name=sourceDictionaries"`
	// If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
	UseCanonical *GetDefinitionsUseCanonicalEnum `queryParam:"style=form,explode=true,name=useCanonical"`
	// Word to return definitions for
	Word string `pathParam:"style=simple,explode=false,name=word"`
}

type GetDefinitionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
