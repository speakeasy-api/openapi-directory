// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ErrorsErrorLocationSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ErrorsErrorLocationRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the error group
	ErrorGroupID string `pathParam:"style=simple,explode=false,name=errorGroupId"`
	// The id of the error
	ErrorID string `pathParam:"style=simple,explode=false,name=errorId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnumConflict            ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsErrorLocationDefaultApplicationJSONError struct {
	Code    ErrorsErrorLocationDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                 `json:"message"`
}

// ErrorsErrorLocationDefaultApplicationJSON - Error code with reason
type ErrorsErrorLocationDefaultApplicationJSON struct {
	Error ErrorsErrorLocationDefaultApplicationJSONError `json:"error"`
}

// ErrorsErrorLocation200ApplicationJSON - Error location.
type ErrorsErrorLocation200ApplicationJSON struct {
	URI *string `json:"uri,omitempty"`
}

type ErrorsErrorLocationResponse struct {
	ContentType string
	// Error location.
	ErrorsErrorLocation200ApplicationJSONObject *ErrorsErrorLocation200ApplicationJSON
	// Error code with reason
	ErrorsErrorLocationDefaultApplicationJSONObject *ErrorsErrorLocationDefaultApplicationJSON
	StatusCode                                      int
	RawResponse                                     *http.Response
}
