/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Permission - A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy.
 */
public class Permission {
    /**
     * Whether the permission allows the file to be discovered through search. This is only applicable for permissions of type domain or anyone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowFileDiscovery")
    public Boolean allowFileDiscovery;
    public Permission withAllowFileDiscovery(Boolean allowFileDiscovery) {
        this.allowFileDiscovery = allowFileDiscovery;
        return this;
    }
    
    /**
     * Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    public Boolean deleted;
    public Permission withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * The "pretty" name of the value of the permission. The following is a list of examples for each type of permission:  
     * - user - User's full name, as defined for their Google Account, such as "Joe Smith." 
     * - group - Name of the Google Group, such as "The Company Administrators." 
     * - domain - String domain name, such as "your-company.com." 
     * - anyone - No displayName is present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Permission withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The domain to which this permission refers. The following options are currently allowed:  
     * - The entire domain, such as "your-company.com." 
     * - A target audience, such as "ID.audience.googledomains.com."
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public String domain;
    public Permission withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * The email address of the user or group to which this permission refers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailAddress")
    public String emailAddress;
    public Permission withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }
    
    /**
     * The time at which this permission will expire (RFC 3339 date-time). Expiration times have the following restrictions:  
     * - They cannot be set on shared drive items. 
     * - They can only be set on user and group permissions. 
     * - The time must be in the future. 
     * - The time cannot be more than one year in the future.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expirationTime")
    public OffsetDateTime expirationTime;
    public Permission withExpirationTime(OffsetDateTime expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }
    
    /**
     * The ID of this permission. This is a unique identifier for the grantee, and is published in User resources as permissionId. IDs should be treated as opaque values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Permission withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "drive#permission".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Permission withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Whether the account associated with this permission is a pending owner. Only populated for user type permissions for files that aren't in a shared drive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingOwner")
    public Boolean pendingOwner;
    public Permission withPendingOwner(Boolean pendingOwner) {
        this.pendingOwner = pendingOwner;
        return this;
    }
    
    /**
     * Details of whether the permissions on this shared drive item are inherited or are directly on this item. This is an output-only field that's present only for shared drive items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissionDetails")
    public PermissionPermissionDetails[] permissionDetails;
    public Permission withPermissionDetails(PermissionPermissionDetails[] permissionDetails) {
        this.permissionDetails = permissionDetails;
        return this;
    }
    
    /**
     * A link to the user's profile photo, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoLink")
    public String photoLink;
    public Permission withPhotoLink(String photoLink) {
        this.photoLink = photoLink;
        return this;
    }
    
    /**
     * The role granted by this permission. While new values may be supported in the future, the following are currently allowed:  
     * - owner 
     * - organizer 
     * - fileOrganizer 
     * - writer 
     * - commenter 
     * - reader
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    public String role;
    public Permission withRole(String role) {
        this.role = role;
        return this;
    }
    
    /**
     * Deprecated - use permissionDetails instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teamDrivePermissionDetails")
    public PermissionTeamDrivePermissionDetails[] teamDrivePermissionDetails;
    public Permission withTeamDrivePermissionDetails(PermissionTeamDrivePermissionDetails[] teamDrivePermissionDetails) {
        this.teamDrivePermissionDetails = teamDrivePermissionDetails;
        return this;
    }
    
    /**
     * The type of the grantee. Valid values are:  
     * - user 
     * - group 
     * - domain 
     * - anyone  When creating a permission, if type is user or group, you must provide an emailAddress for the user or group. When type is domain, you must provide a domain. There isn't extra information required for the anyone type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public Permission withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Indicates the view for this permission. Only populated for permissions that belong to a view. published is the only supported value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("view")
    public String view;
    public Permission withView(String view) {
        this.view = view;
        return this;
    }
    
}
