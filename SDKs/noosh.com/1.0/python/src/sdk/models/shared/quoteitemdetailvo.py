"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import propertypaandattvo as shared_propertypaandattvo
from ..shared import quotepricedetailvo as shared_quotepricedetailvo
from ..shared import specbasevo as shared_specbasevo
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QuoteItemDetailVO:
    r"""Java type: com.noosh.nooshapi.vo.QuoteItemDetailVO"""
    
    chosen_quantity: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chosen_quantity'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    completion_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completion_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[list[shared_propertypaandattvo.PropertyPaAndAttVO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})  
    item_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_id'), 'exclude': lambda f: f is None }})  
    item_prices: Optional[list[shared_quotepricedetailvo.QuotePriceDetailVO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_prices'), 'exclude': lambda f: f is None }})  
    item_shipping_total: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_shipping_total'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    item_tax_total: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_tax_total'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    item_total: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_total'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    reason_for_quote_selection: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason_for_quote_selection'), 'exclude': lambda f: f is None }})  
    show_cost_prices_and_markup: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_cost_prices_and_markup'), 'exclude': lambda f: f is None }})  
    spec: Optional[shared_specbasevo.SpecBaseVO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spec'), 'exclude': lambda f: f is None }})
    r"""Java type: com.noosh.nooshapi.vo.SpecBaseVO"""  
    transactional_item_shipping_total: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactional_item_shipping_total'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    transactional_item_tax_total: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactional_item_tax_total'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    transactional_item_total: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactional_item_total'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    vat_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vat_code'), 'exclude': lambda f: f is None }})  
    vat_rate: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vat_rate'), 'exclude': lambda f: f is None }})
    r"""Java type: java.math.BigDecimal"""  
    