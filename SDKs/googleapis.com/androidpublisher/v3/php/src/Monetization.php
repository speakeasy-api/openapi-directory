<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Monetization 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Calculates the region prices, using today's exchange rate and country-specific pricing patterns, based on the price in the request for a set of regions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationConvertRegionPricesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationConvertRegionPricesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationConvertRegionPricesResponse
     */
	public function androidpublisherMonetizationConvertRegionPrices(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationConvertRegionPricesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationConvertRegionPricesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationConvertRegionPricesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/pricing:convertRegionPrices', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationConvertRegionPricesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "convertRegionPricesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationConvertRegionPricesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationConvertRegionPricesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->convertRegionPricesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConvertRegionPricesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Archives a subscription. Can only be done if at least one base plan was active in the past, and no base plan is available for new or existing subscribers currently. This action is irreversible, and the subscription ID will remain reserved.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsArchiveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsArchiveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsArchiveResponse
     */
	public function androidpublisherMonetizationSubscriptionsArchive(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsArchiveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsArchiveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsArchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}:archive', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsArchiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsArchiveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsArchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subscription', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Activates a base plan. Once activated, base plans will be available to new subscribers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansActivateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansActivateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansActivateResponse
     */
	public function androidpublisherMonetizationSubscriptionsBasePlansActivate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansActivateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansActivateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansActivateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:activate', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansActivateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansActivateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansActivateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subscription', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deactivates a base plan. Once deactivated, the base plan will become unavailable to new subscribers, but existing subscribers will maintain their subscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateResponse
     */
	public function androidpublisherMonetizationSubscriptionsBasePlansDeactivate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:deactivate', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subscription', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a base plan. Can only be done for draft base plans. This action is irreversible.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeleteResponse
     */
	public function androidpublisherMonetizationSubscriptionsBasePlansDelete(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Migrates subscribers who are receiving an historical subscription price to the currently-offered price for the specified region. Requests will cause price change notifications to be sent to users who are currently receiving an historical price older than the supplied timestamp. Subscribers who do not agree to the new price will have their subscription ended at the next renewal.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesResponse
     */
	public function androidpublisherMonetizationSubscriptionsBasePlansMigratePrices(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:migratePrices', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "migrateBasePlanPricesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->migrateBasePlanPricesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Activates a subscription offer. Once activated, subscription offers will be available to new subscribers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateResponse
     */
	public function androidpublisherMonetizationSubscriptionsBasePlansOffersActivate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:activate', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionOffer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionOffer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new subscription offer. Only auto-renewing base plans can have subscription offers. The offer state will be DRAFT until it is activated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateResponse
     */
	public function androidpublisherMonetizationSubscriptionsBasePlansOffersCreate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscriptionOfferInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionOffer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionOffer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deactivates a subscription offer. Once deactivated, existing subscribers will maintain their subscription, but the offer will become unavailable to new subscribers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateResponse
     */
	public function androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:deactivate', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionOffer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionOffer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a subscription offer. Can only be done for draft offers. This action is irreversible.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteResponse
     */
	public function androidpublisherMonetizationSubscriptionsBasePlansOffersDelete(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reads a single offer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetResponse
     */
	public function androidpublisherMonetizationSubscriptionsBasePlansOffersGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionOffer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionOffer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all offers under a given subscription.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersListResponse
     */
	public function androidpublisherMonetizationSubscriptionsBasePlansOffersList(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSubscriptionOffersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSubscriptionOffersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing subscription offer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchResponse
     */
	public function androidpublisherMonetizationSubscriptionsBasePlansOffersPatch(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscriptionOfferInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionOffer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionOffer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new subscription. Newly added base plans will remain in draft state until activated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsCreateResponse
     */
	public function androidpublisherMonetizationSubscriptionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscriptionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subscription', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a subscription. A subscription can only be deleted if it has never had a base plan published.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsDeleteResponse
     */
	public function androidpublisherMonetizationSubscriptionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reads a single subscription.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsGetResponse
     */
	public function androidpublisherMonetizationSubscriptionsGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subscription', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all subscriptions under a given app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsListResponse
     */
	public function androidpublisherMonetizationSubscriptionsList(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSubscriptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSubscriptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing subscription.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsPatchResponse
     */
	public function androidpublisherMonetizationSubscriptionsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscriptionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherMonetizationSubscriptionsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subscription', 'json');
            }
        }

        return $response;
    }
}