/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Configuration for streaming workstations created using this launch profile.
 */
export class UpdateLaunchProfileRequestBodyStreamConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "automaticTerminationMode" })
  automaticTerminationMode?: shared.AutomaticTerminationModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "clipboardMode" })
  clipboardMode?: shared.StreamingClipboardModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ec2InstanceTypes" })
  ec2InstanceTypes?: shared.StreamingInstanceTypeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "maxSessionLengthInMinutes" })
  maxSessionLengthInMinutes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "maxStoppedSessionLengthInMinutes" })
  maxStoppedSessionLengthInMinutes?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "sessionBackup" })
  @Type(() => shared.StreamConfigurationSessionBackup)
  sessionBackup?: shared.StreamConfigurationSessionBackup;

  @SpeakeasyMetadata()
  @Expose({ name: "sessionPersistenceMode" })
  sessionPersistenceMode?: shared.SessionPersistenceModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "sessionStorage" })
  @Type(() => shared.StreamConfigurationSessionStorage)
  sessionStorage?: shared.StreamConfigurationSessionStorage;

  @SpeakeasyMetadata()
  @Expose({ name: "streamingImageIds" })
  streamingImageIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "volumeConfiguration" })
  @Type(() => shared.VolumeConfiguration)
  volumeConfiguration?: shared.VolumeConfiguration;
}

export class UpdateLaunchProfileRequestBody extends SpeakeasyBase {
  /**
   * A human-readable description of the launch profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "launchProfileProtocolVersions" })
  launchProfileProtocolVersions?: string[];

  /**
   * The name for the launch profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Configuration for streaming workstations created using this launch profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "streamConfiguration" })
  @Type(() => UpdateLaunchProfileRequestBodyStreamConfiguration)
  streamConfiguration?: UpdateLaunchProfileRequestBodyStreamConfiguration;

  /**
   * Unique identifiers for a collection of studio components that can be used with this launch profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "studioComponentIds" })
  studioComponentIds?: string[];
}

export class UpdateLaunchProfileRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateLaunchProfileRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Client-Token",
  })
  xAmzClientToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ID of the launch profile used to control access from the streaming session.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=launchProfileId",
  })
  launchProfileId: string;

  /**
   * The studio ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=studioId",
  })
  studioId: string;
}

export class UpdateLaunchProfileResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerErrorException
   */
  @SpeakeasyMetadata()
  internalServerErrorException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateLaunchProfileResponse?: shared.UpdateLaunchProfileResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
