// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETExportClientVpnClientConfigurationActionEnum
type GETExportClientVpnClientConfigurationActionEnum string

const (
	GETExportClientVpnClientConfigurationActionEnumExportClientVpnClientConfiguration GETExportClientVpnClientConfigurationActionEnum = "ExportClientVpnClientConfiguration"
)

func (e GETExportClientVpnClientConfigurationActionEnum) ToPointer() *GETExportClientVpnClientConfigurationActionEnum {
	return &e
}

func (e *GETExportClientVpnClientConfigurationActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ExportClientVpnClientConfiguration":
		*e = GETExportClientVpnClientConfigurationActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETExportClientVpnClientConfigurationActionEnum: %v", v)
	}
}

// GETExportClientVpnClientConfigurationVersionEnum
type GETExportClientVpnClientConfigurationVersionEnum string

const (
	GETExportClientVpnClientConfigurationVersionEnumTwoThousandAndSixteen1115 GETExportClientVpnClientConfigurationVersionEnum = "2016-11-15"
)

func (e GETExportClientVpnClientConfigurationVersionEnum) ToPointer() *GETExportClientVpnClientConfigurationVersionEnum {
	return &e
}

func (e *GETExportClientVpnClientConfigurationVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETExportClientVpnClientConfigurationVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETExportClientVpnClientConfigurationVersionEnum: %v", v)
	}
}

type GETExportClientVpnClientConfigurationRequest struct {
	Action GETExportClientVpnClientConfigurationActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointID string `queryParam:"style=form,explode=true,name=ClientVpnEndpointId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun            *bool                                            `queryParam:"style=form,explode=true,name=DryRun"`
	Version           GETExportClientVpnClientConfigurationVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETExportClientVpnClientConfigurationResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
