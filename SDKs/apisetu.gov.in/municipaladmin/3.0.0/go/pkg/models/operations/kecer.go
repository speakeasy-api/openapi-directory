// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type KecerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type KecerRequestBodyCertificateParameters struct {
	// Document Number
	DocumentNumber string `json:"DocumentNumber"`
}

// KecerRequestBodyFormatEnum - The format of the certificate in response.
type KecerRequestBodyFormatEnum string

const (
	KecerRequestBodyFormatEnumPdf KecerRequestBodyFormatEnum = "pdf"
)

func (e KecerRequestBodyFormatEnum) ToPointer() *KecerRequestBodyFormatEnum {
	return &e
}

func (e *KecerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = KecerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KecerRequestBodyFormatEnum: %v", v)
	}
}

// KecerRequestBody - Request format
type KecerRequestBody struct {
	CertificateParameters *KecerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format KecerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Kecer504ApplicationJSONErrorEnum string

const (
	Kecer504ApplicationJSONErrorEnumGatewayTimeout Kecer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Kecer504ApplicationJSONErrorEnum) ToPointer() *Kecer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Kecer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Kecer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Kecer504ApplicationJSONErrorDescriptionEnum string

const (
	Kecer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Kecer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Kecer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Kecer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Kecer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Kecer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Kecer504ApplicationJSON - Gateway timeout
type Kecer504ApplicationJSON struct {
	Error            *Kecer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Kecer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Kecer503ApplicationJSONErrorEnum string

const (
	Kecer503ApplicationJSONErrorEnumServiceUnavailable Kecer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Kecer503ApplicationJSONErrorEnum) ToPointer() *Kecer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Kecer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Kecer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Kecer503ApplicationJSONErrorDescriptionEnum string

const (
	Kecer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Kecer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Kecer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Kecer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Kecer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Kecer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Kecer503ApplicationJSON - Service unavailable
type Kecer503ApplicationJSON struct {
	Error            *Kecer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Kecer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Kecer502ApplicationJSONErrorEnum string

const (
	Kecer502ApplicationJSONErrorEnumBadGatewy Kecer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Kecer502ApplicationJSONErrorEnum) ToPointer() *Kecer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Kecer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Kecer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Kecer502ApplicationJSONErrorDescriptionEnum string

const (
	Kecer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Kecer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Kecer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Kecer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Kecer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Kecer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Kecer502ApplicationJSON - Bad gateway
type Kecer502ApplicationJSON struct {
	Error            *Kecer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Kecer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Kecer500ApplicationJSONErrorEnum string

const (
	Kecer500ApplicationJSONErrorEnumInternalServerError Kecer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Kecer500ApplicationJSONErrorEnum) ToPointer() *Kecer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Kecer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Kecer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Kecer500ApplicationJSONErrorDescriptionEnum string

const (
	Kecer500ApplicationJSONErrorDescriptionEnumInternalServerError Kecer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Kecer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Kecer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Kecer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Kecer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Kecer500ApplicationJSON - Internal server error
type Kecer500ApplicationJSON struct {
	Error            *Kecer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Kecer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Kecer404ApplicationJSONErrorEnum string

const (
	Kecer404ApplicationJSONErrorEnumRecordNotFound Kecer404ApplicationJSONErrorEnum = "record_not_found"
	Kecer404ApplicationJSONErrorEnumURLNotFound    Kecer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Kecer404ApplicationJSONErrorEnum) ToPointer() *Kecer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Kecer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Kecer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Kecer404ApplicationJSONErrorDescriptionEnum string

const (
	Kecer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Kecer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Kecer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Kecer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Kecer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Kecer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Kecer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Kecer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Kecer404ApplicationJSON - No record found
type Kecer404ApplicationJSON struct {
	Error            *Kecer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Kecer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Kecer401ApplicationJSONErrorEnum string

const (
	Kecer401ApplicationJSONErrorEnumInvalidAuthentication Kecer401ApplicationJSONErrorEnum = "invalid_authentication"
	Kecer401ApplicationJSONErrorEnumInvalidAuthorization  Kecer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Kecer401ApplicationJSONErrorEnum) ToPointer() *Kecer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Kecer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Kecer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Kecer401ApplicationJSONErrorDescriptionEnum string

const (
	Kecer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Kecer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Kecer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Kecer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Kecer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Kecer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Kecer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Kecer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Kecer401ApplicationJSON - Unauthorized access
type Kecer401ApplicationJSON struct {
	Error            *Kecer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Kecer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Kecer400ApplicationJSONErrorEnum string

const (
	Kecer400ApplicationJSONErrorEnumMissingParameter Kecer400ApplicationJSONErrorEnum = "missing_parameter"
	Kecer400ApplicationJSONErrorEnumInvalidParameter Kecer400ApplicationJSONErrorEnum = "invalid_parameter"
	Kecer400ApplicationJSONErrorEnumInvalidFormat    Kecer400ApplicationJSONErrorEnum = "invalid_format"
	Kecer400ApplicationJSONErrorEnumInvalidTxnid     Kecer400ApplicationJSONErrorEnum = "invalid_txnid"
	Kecer400ApplicationJSONErrorEnumInvalidConsentid Kecer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Kecer400ApplicationJSONErrorEnum) ToPointer() *Kecer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Kecer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Kecer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Kecer400ApplicationJSONErrorDescriptionEnum string

const (
	Kecer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Kecer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Kecer400ApplicationJSONErrorDescriptionEnumBadRequest                              Kecer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Kecer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Kecer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Kecer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Kecer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Kecer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Kecer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Kecer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Kecer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Kecer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Kecer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Kecer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Kecer400ApplicationJSON - Bad request
type Kecer400ApplicationJSON struct {
	Error            *Kecer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Kecer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type KecerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Kecer400ApplicationJSONObject *Kecer400ApplicationJSON
	// Unauthorized access
	Kecer401ApplicationJSONObject *Kecer401ApplicationJSON
	// No record found
	Kecer404ApplicationJSONObject *Kecer404ApplicationJSON
	// Internal server error
	Kecer500ApplicationJSONObject *Kecer500ApplicationJSON
	// Bad gateway
	Kecer502ApplicationJSONObject *Kecer502ApplicationJSON
	// Service unavailable
	Kecer503ApplicationJSONObject *Kecer503ApplicationJSON
	// Gateway timeout
	Kecer504ApplicationJSONObject *Kecer504ApplicationJSON
}
