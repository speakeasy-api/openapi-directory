/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum CreateClusterXAmzTargetEnum {
  AmazonDaxv3CreateCluster = "AmazonDAXV3.CreateCluster",
}

export class CreateClusterRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  createClusterRequest: shared.CreateClusterRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: CreateClusterXAmzTargetEnum;
}

export class CreateClusterResponse extends SpeakeasyBase {
  /**
   * ClusterAlreadyExistsFault
   */
  @SpeakeasyMetadata()
  clusterAlreadyExistsFault?: any;

  /**
   * ClusterQuotaForCustomerExceededFault
   */
  @SpeakeasyMetadata()
  clusterQuotaForCustomerExceededFault?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createClusterResponse?: shared.CreateClusterResponse;

  /**
   * InsufficientClusterCapacityFault
   */
  @SpeakeasyMetadata()
  insufficientClusterCapacityFault?: any;

  /**
   * InvalidClusterStateFault
   */
  @SpeakeasyMetadata()
  invalidClusterStateFault?: any;

  /**
   * InvalidParameterCombinationException
   */
  @SpeakeasyMetadata()
  invalidParameterCombinationException?: any;

  /**
   * InvalidParameterGroupStateFault
   */
  @SpeakeasyMetadata()
  invalidParameterGroupStateFault?: any;

  /**
   * InvalidParameterValueException
   */
  @SpeakeasyMetadata()
  invalidParameterValueException?: any;

  /**
   * InvalidVPCNetworkStateFault
   */
  @SpeakeasyMetadata()
  invalidVPCNetworkStateFault?: any;

  /**
   * NodeQuotaForClusterExceededFault
   */
  @SpeakeasyMetadata()
  nodeQuotaForClusterExceededFault?: any;

  /**
   * NodeQuotaForCustomerExceededFault
   */
  @SpeakeasyMetadata()
  nodeQuotaForCustomerExceededFault?: any;

  /**
   * ParameterGroupNotFoundFault
   */
  @SpeakeasyMetadata()
  parameterGroupNotFoundFault?: any;

  /**
   * ServiceLinkedRoleNotFoundFault
   */
  @SpeakeasyMetadata()
  serviceLinkedRoleNotFoundFault?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * SubnetGroupNotFoundFault
   */
  @SpeakeasyMetadata()
  subnetGroupNotFoundFault?: any;

  /**
   * TagQuotaPerResourceExceeded
   */
  @SpeakeasyMetadata()
  tagQuotaPerResourceExceeded?: any;
}
