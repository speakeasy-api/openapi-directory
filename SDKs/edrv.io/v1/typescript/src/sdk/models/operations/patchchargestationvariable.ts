/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export enum PatchChargeStationVariableRequestBodyVariableEnum {
  MeterValueSampleInterval = "MeterValueSampleInterval",
  HeartbeatInterval = "HeartbeatInterval",
  ConnectionTimeOut = "ConnectionTimeOut",
  WebSocketPingInterval = "WebSocketPingInterval",
  TransactionMessageRetryInterval = "TransactionMessageRetryInterval",
  TransactionMessageAttempts = "TransactionMessageAttempts",
}

/**
 * Charge Station Variable to set
 */
export class PatchChargeStationVariableRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "variable" })
  variable?: PatchChargeStationVariableRequestBodyVariableEnum;
}

export class PatchChargeStationVariableRequest extends SpeakeasyBase {
  /**
   * Charge Station Variable to set
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PatchChargeStationVariableRequestBody;

  /**
   * ID of charge station
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;
}

/**
 * A successful response
 */
export class PatchChargeStationVariable201ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ok" })
  ok?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "result" })
  result?: Record<string, any>;
}

export class PatchChargeStationVariableResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * A successful response
   */
  @SpeakeasyMetadata()
  patchChargeStationVariable201ApplicationJSONObject?: PatchChargeStationVariable201ApplicationJSON;
}
