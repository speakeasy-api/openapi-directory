<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Experiments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * createExperiment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateExperimentUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateExperimentUsingPOSTResponse
     */
	public function createExperimentUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\CreateExperimentUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateExperimentUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/manage/experiments', \OpenAPI\OpenAPI\Models\Operations\CreateExperimentUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "experimentModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateExperimentUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->experimentModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExperimentModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * deleteExperiment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETEExperimentUsingDELETERequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETEExperimentUsingDELETEResponse
     */
	public function deleteExperimentUsingDELETE(
        \OpenAPI\OpenAPI\Models\Operations\DELETEExperimentUsingDELETERequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETEExperimentUsingDELETEResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/manage/experiments/{id}', \OpenAPI\OpenAPI\Models\Operations\DELETEExperimentUsingDELETERequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETEExperimentUsingDELETEResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * doActionExperiment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DoActionExperimentUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DoActionExperimentUsingPOSTResponse
     */
	public function doActionExperimentUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\DoActionExperimentUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DoActionExperimentUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/manage/experiments/{id}/{action}', \OpenAPI\OpenAPI\Models\Operations\DoActionExperimentUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DoActionExperimentUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->experimentModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExperimentModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * getExperiment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETExperimentUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETExperimentUsingGETResponse
     */
	public function getExperimentUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETExperimentUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETExperimentUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/manage/experiments/{id}', \OpenAPI\OpenAPI\Models\Operations\GETExperimentUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETExperimentUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->experimentModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExperimentModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * getExperiments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETExperimentsUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETExperimentsUsingGETResponse
     */
	public function getExperimentsUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETExperimentsUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETExperimentsUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/manage/experiments', \OpenAPI\OpenAPI\Models\Operations\GETExperimentsUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETExperimentsUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->experimentModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ExperimentModel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * updateExperiment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateExperimentUsingPUTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateExperimentUsingPUTResponse
     */
	public function updateExperimentUsingPUT(
        \OpenAPI\OpenAPI\Models\Operations\UpdateExperimentUsingPUTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateExperimentUsingPUTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/manage/experiments/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateExperimentUsingPUTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "experimentModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateExperimentUsingPUTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->experimentModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExperimentModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}