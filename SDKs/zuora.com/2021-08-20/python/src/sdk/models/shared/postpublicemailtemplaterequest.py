"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class POSTPublicEmailTemplateRequestCcEmailTypeEnum(str, Enum):
    r"""Email CC type:
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    """
    BILL_TO_CONTACT = 'BillToContact'
    SOLD_TO_CONTACT = 'SoldToContact'
    SPECIFIC_EMAILS = 'SpecificEmails'
    TENANT_ADMIN = 'TenantAdmin'
    BILL_TO_AND_SOLD_TO_CONTACTS = 'BillToAndSoldToContacts'
    RUN_OWNER = 'RunOwner'
    ALL_CONTACTS = 'AllContacts'
    INVOICE_OWNER_BILL_TO_CONTACT = 'InvoiceOwnerBillToContact'
    INVOICE_OWNER_SOLD_TO_CONTACT = 'InvoiceOwnerSoldToContact'
    INVOICE_OWNER_BILL_TO_AND_SOLD_TO_CONTACTS = 'InvoiceOwnerBillToAndSoldToContacts'
    INVOICE_OWNER_ALL_CONTACTS = 'InvoiceOwnerAllContacts'

class POSTPublicEmailTemplateRequestEncodingTypeEnum(str, Enum):
    r"""The endcode type of the email body."""
    UTF8 = 'UTF8'
    SHIFT_JIS = 'Shift_JIS'
    ISO_2022_JP = 'ISO_2022_JP'
    EUC_JP = 'EUC_JP'
    X_SJIS_0213 = 'X_SJIS_0213'

class POSTPublicEmailTemplateRequestFromEmailTypeEnum(str, Enum):
    r"""The type of the email."""
    TENANT_EMAIL = 'TenantEmail'
    SPECIFIC_EMAIL = 'SpecificEmail'

class POSTPublicEmailTemplateRequestReplyToEmailTypeEnum(str, Enum):
    r"""Type of the replyTo email."""
    TENANT_EMAIL = 'TenantEmail'
    SPECIFIC_EMAIL = 'SpecificEmail'

class POSTPublicEmailTemplateRequestToEmailTypeEnum(str, Enum):
    r"""Email receive type.
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    """
    BILL_TO_CONTACT = 'BillToContact'
    SOLD_TO_CONTACT = 'SoldToContact'
    SPECIFIC_EMAILS = 'SpecificEmails'
    TENANT_ADMIN = 'TenantAdmin'
    BILL_TO_AND_SOLD_TO_CONTACTS = 'BillToAndSoldToContacts'
    RUN_OWNER = 'RunOwner'
    ALL_CONTACTS = 'AllContacts'
    INVOICE_OWNER_BILL_TO_CONTACT = 'InvoiceOwnerBillToContact'
    INVOICE_OWNER_SOLD_TO_CONTACT = 'InvoiceOwnerSoldToContact'
    INVOICE_OWNER_BILL_TO_AND_SOLD_TO_CONTACTS = 'InvoiceOwnerBillToAndSoldToContacts'
    INVOICE_OWNER_ALL_CONTACTS = 'InvoiceOwnerAllContacts'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class POSTPublicEmailTemplateRequest:
    r"""The request body to create an email template."""
    
    email_body: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailBody') }})
    r"""The email body. You can add merge fields in the email object using angle brackets.
    You can also embed HTML tags if 'isHtml' is true.
    """  
    email_subject: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailSubject') }})
    r"""The email subject. Users can add merge fields in the email subject using angle brackets."""  
    event_type_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventTypeName') }})
    r"""The name of the event type."""  
    from_email_type: POSTPublicEmailTemplateRequestFromEmailTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromEmailType') }})
    r"""The type of the email."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the email template, a unique name in a tenant."""  
    to_email_type: POSTPublicEmailTemplateRequestToEmailTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toEmailType') }})
    r"""Email receive type.
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    """  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""The status of the email template. The default value is true."""  
    bcc_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bccEmailAddress'), 'exclude': lambda f: f is None }})
    r"""The email bcc address."""  
    cc_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ccEmailAddress'), 'exclude': lambda f: f is None }})
    r"""The email CC address."""  
    cc_email_type: Optional[POSTPublicEmailTemplateRequestCcEmailTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ccEmailType'), 'exclude': lambda f: f is None }})
    r"""Email CC type:
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail. 
    * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the email template."""  
    encoding_type: Optional[POSTPublicEmailTemplateRequestEncodingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encodingType'), 'exclude': lambda f: f is None }})
    r"""The endcode type of the email body."""  
    event_type_namespace: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventTypeNamespace'), 'exclude': lambda f: f is None }})
    r"""The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default.
    
    Note that if the `eventTypeName` is a standard event type, you must specify the `com.zuora.notification` namespace; otherwise, you will get an error.
    
    For example, if you want to create an email template on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.
    """  
    from_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromEmailAddress'), 'exclude': lambda f: f is None }})
    r"""If fromEmailType is SpecificEmail, this field is required."""  
    from_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromName'), 'exclude': lambda f: f is None }})
    r"""The name of the email sender."""  
    is_html: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isHtml'), 'exclude': lambda f: f is None }})
    r"""Specifies whether the style of email body is HTML. The default value is false."""  
    reply_to_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replyToEmailAddress'), 'exclude': lambda f: f is None }})
    r"""If replyToEmailType is SpecificEmail, this field is required."""  
    reply_to_email_type: Optional[POSTPublicEmailTemplateRequestReplyToEmailTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replyToEmailType'), 'exclude': lambda f: f is None }})
    r"""Type of the replyTo email."""  
    to_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toEmailAddress'), 'exclude': lambda f: f is None }})
    r"""If toEmailType is SpecificEmail, this field is required."""  
    