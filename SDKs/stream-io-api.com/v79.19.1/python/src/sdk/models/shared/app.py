"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import channelconfig as shared_channelconfig
from ..shared import config as shared_config
from ..shared import fileuploadconfig as shared_fileuploadconfig
from ..shared import policy as shared_policy
from ..shared import pushnotificationfields as shared_pushnotificationfields
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class AppSearchBackendEnum(str, Enum):
    r"""Backend implementation used for search"""
    ELASTICSEARCH = 'elasticsearch'
    POSTGRES = 'postgres'
    DISABLED = 'disabled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class App:
    
    async_url_enrich_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('async_url_enrich_enabled') }})  
    campaign_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaign_enabled') }})  
    cdn_expiration_seconds: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cdn_expiration_seconds') }})  
    channel_configs: dict[str, shared_channelconfig.ChannelConfig] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel_configs') }})
    r"""Object with channel configs"""  
    custom_action_handler_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_action_handler_url') }})  
    disable_auth_checks: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disable_auth_checks') }})  
    disable_permissions_checks: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disable_permissions_checks') }})  
    enforce_unique_usernames: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforce_unique_usernames') }})  
    file_upload_config: shared_fileuploadconfig.FileUploadConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_upload_config') }})  
    grants: dict[str, list[str]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grants') }})  
    image_moderation_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_moderation_enabled') }})  
    image_upload_config: shared_fileuploadconfig.FileUploadConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_upload_config') }})  
    multi_tenant_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multi_tenant_enabled') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    organization: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization') }})  
    permission_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission_version') }})  
    policies: dict[str, list[shared_policy.Policy]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policies') }})  
    push_notifications: shared_pushnotificationfields.PushNotificationFields = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push_notifications') }})  
    reminders_interval: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reminders_interval') }})  
    search_backend: AppSearchBackendEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_backend') }})
    r"""Backend implementation used for search"""  
    sqs_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sqs_key') }})  
    sqs_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sqs_secret') }})  
    sqs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sqs_url') }})  
    suspended: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended') }})  
    suspended_explanation: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended_explanation') }})  
    user_search_disallowed_roles: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_search_disallowed_roles') }})  
    video_provider: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video_provider') }})  
    webhook_events: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhook_events') }})  
    webhook_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhook_url') }})  
    agora_options: Optional[shared_config.Config] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agora_options'), 'exclude': lambda f: f is None }})  
    auto_translation_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_translation_enabled'), 'exclude': lambda f: f is None }})  
    before_message_send_hook_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('before_message_send_hook_url'), 'exclude': lambda f: f is None }})  
    hms_options: Optional[shared_config.Config] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hms_options'), 'exclude': lambda f: f is None }})  
    image_moderation_labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_moderation_labels'), 'exclude': lambda f: f is None }})  
    revoke_tokens_issued_before: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revoke_tokens_issued_before'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    