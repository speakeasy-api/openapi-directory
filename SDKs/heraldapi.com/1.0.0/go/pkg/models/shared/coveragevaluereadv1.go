// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CoverageValueReadV1InputTypeEnum - Recommended input type. Only returned by `/applications` endpoint. [Full list of input types](https://www.heraldapi.com/docs/input-types).
type CoverageValueReadV1InputTypeEnum string

const (
	CoverageValueReadV1InputTypeEnumDate       CoverageValueReadV1InputTypeEnum = "date"
	CoverageValueReadV1InputTypeEnumNumber     CoverageValueReadV1InputTypeEnum = "number"
	CoverageValueReadV1InputTypeEnumInteger    CoverageValueReadV1InputTypeEnum = "integer"
	CoverageValueReadV1InputTypeEnumSelectOne  CoverageValueReadV1InputTypeEnum = "select_one"
	CoverageValueReadV1InputTypeEnumSelectMany CoverageValueReadV1InputTypeEnum = "select_many"
	CoverageValueReadV1InputTypeEnumAddress    CoverageValueReadV1InputTypeEnum = "address"
	CoverageValueReadV1InputTypeEnumClaimEvent CoverageValueReadV1InputTypeEnum = "claim_event"
	CoverageValueReadV1InputTypeEnumEmail      CoverageValueReadV1InputTypeEnum = "email"
	CoverageValueReadV1InputTypeEnumPhone      CoverageValueReadV1InputTypeEnum = "phone"
	CoverageValueReadV1InputTypeEnumYear       CoverageValueReadV1InputTypeEnum = "year"
	CoverageValueReadV1InputTypeEnumShortText  CoverageValueReadV1InputTypeEnum = "short_text"
	CoverageValueReadV1InputTypeEnumLongText   CoverageValueReadV1InputTypeEnum = "long_text"
	CoverageValueReadV1InputTypeEnumWebsite    CoverageValueReadV1InputTypeEnum = "website"
	CoverageValueReadV1InputTypeEnumFile       CoverageValueReadV1InputTypeEnum = "file"
)

func (e *CoverageValueReadV1InputTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "date":
		fallthrough
	case "number":
		fallthrough
	case "integer":
		fallthrough
	case "select_one":
		fallthrough
	case "select_many":
		fallthrough
	case "address":
		fallthrough
	case "claim_event":
		fallthrough
	case "email":
		fallthrough
	case "phone":
		fallthrough
	case "year":
		fallthrough
	case "short_text":
		fallthrough
	case "long_text":
		fallthrough
	case "website":
		fallthrough
	case "file":
		*e = CoverageValueReadV1InputTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CoverageValueReadV1InputTypeEnum: %s", s)
	}
}

type CoverageValueReadV1RequiredForEnum string

const (
	CoverageValueReadV1RequiredForEnumQuote CoverageValueReadV1RequiredForEnum = "quote"
	CoverageValueReadV1RequiredForEnumBind  CoverageValueReadV1RequiredForEnum = "bind"
	CoverageValueReadV1RequiredForEnumNull  CoverageValueReadV1RequiredForEnum = "null"
)

func (e *CoverageValueReadV1RequiredForEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "quote":
		fallthrough
	case "bind":
		fallthrough
	case "null":
		*e = CoverageValueReadV1RequiredForEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CoverageValueReadV1RequiredForEnum: %s", s)
	}
}

// CoverageValueReadV1 - Coverage values assign specific values to coverage parameters.
type CoverageValueReadV1 struct {
	// True if the value potentially impacts the relevance of other risk or coverage values. Only returned by `/applications` endpoint. Read more about [conditionality](https://www.heraldapi.com/docs/risk-and-coverage-parameters#affects_conditions).
	AffectsConditions *bool `json:"affects_conditions,omitempty"`
	// Array of "children" coverage values, only required for certain coverage parameters.
	//
	// Objects in the `child_coverage_values` array should adhere to the `coverage_values` schema. Read more about [parent/child relationships](https://www.heraldapi.com/docs/risk-and-coverage-parameters#parent_child).
	ChildCoverageValues []CoverageValueReadV1 `json:"child_coverage_values,omitempty"`
	// The ID of the [coverage parameter](https://www.heraldapi.com/docs/risk-and-coverage-parameters) for which a value is being provided. A list of all coverage parameters are documented in the [appendix](https://www.heraldapi.com/tools-and-resources/the-appendix).
	CoverageParameterID *string `json:"coverage_parameter_id,omitempty"`
	// True if multiple values can be submitted with the same parameter ID.  Read more about [`creates_array`](https://www.heraldapi.com/docs/risk-and-coverage-parameters#creates_array).
	CreatesArray *bool `json:"creates_array,omitempty"`
	// Recommended input type. Only returned by `/applications` endpoint. [Full list of input types](https://www.heraldapi.com/docs/input-types).
	InputType *CoverageValueReadV1InputTypeEnum `json:"input_type,omitempty"`
	// Unique identifier to distinguish different instances of coverage values that have the same `coverage_parameter_id`. Only returned by `/applications` for risk and coverage values where `creates_array: true`
	// Read our [guide to using instances](https://www.heraldapi.com/docs/instance).
	Instance *string `json:"instance,omitempty"`
	// Object containing text for the parameter that you can render on a front-end.
	ParameterText *ParameterTextV1 `json:"parameter_text,omitempty"`
	// Array of product IDs the coverage parameter is relevant for. Some coverage parameters are relevant for all products, but some are unique to a certain product. Only returned by `/applications` endpoint.
	RelevantProducts []string `json:"relevant_products,omitempty"`
	// Specifies fow which operations this value is required.
	RequiredFor []CoverageValueReadV1RequiredForEnum `json:"required_for,omitempty"`
	// [JSON schema](https://json-schema.org/) describing the expected value. Only returned by `/applications` endpoint.
	Schema map[string]interface{} `json:"schema,omitempty"`
	// **Deprecated**: use the `parameter_text` object instead.
	Text *string `json:"text,omitempty"`
	// The value being assigned. Different coverage parameters expect different value types. This is specified in the [appendix](https://www.heraldapi.com/tools-and-resources/the-appendix).
	Value interface{} `json:"value,omitempty"`
}
