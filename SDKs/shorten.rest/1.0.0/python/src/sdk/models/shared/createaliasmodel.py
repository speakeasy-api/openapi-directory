"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import destinationmodel as shared_destinationmodel
from ..shared import metatagmodel as shared_metatagmodel
from ..shared import snippetmodel as shared_snippetmodel
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAliasModel:
    r"""alias properties"""
    
    destinations: Optional[list[shared_destinationmodel.DestinationModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinations'), 'exclude': lambda f: f is None }})  
    metatags: Optional[list[shared_metatagmodel.MetaTagModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metatags'), 'exclude': lambda f: f is None }})  
    snippets: Optional[list[shared_snippetmodel.SnippetModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snippets'), 'exclude': lambda f: f is None }})  
    