/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Created
 */
export class VerifyV2ServiceEntityChallengeNotification extends SpeakeasyBase {
  /**
   * The unique SID identifier of the Account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_sid" })
  accountSid?: string;

  /**
   * The unique SID identifier of the Challenge.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "challenge_sid" })
  challengeSid?: string;

  /**
   * The date that this Notification was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateCreated?: Date;

  /**
   * The unique SID identifier of the Entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entity_sid" })
  entitySid?: string;

  /**
   * Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identity" })
  identity?: string;

  /**
   * The priority of the notification. For `push` Challenges it's always `high` which sends the notification immediately, and can wake up a sleeping device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priority" })
  priority?: string;

  /**
   * The unique SID identifier of the Service.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "service_sid" })
  serviceSid?: string;

  /**
   * A 34 character string that uniquely identifies this Notification.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sid" })
  sid?: string;

  /**
   * How long, in seconds, the notification is valid. Max: 5 minutes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ttl" })
  ttl?: number;
}
