"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createclusterrequest as shared_createclusterrequest
from ..shared import createclusterresponse as shared_createclusterresponse
from enum import Enum
from typing import Any, Optional

class CreateClusterXAmzTargetEnum(str, Enum):
    AMAZON_MEMORY_DB_CREATE_CLUSTER = 'AmazonMemoryDB.CreateCluster'


@dataclasses.dataclass
class CreateClusterRequest:
    
    create_cluster_request: shared_createclusterrequest.CreateClusterRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CreateClusterXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateClusterResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    acl_not_found_fault: Optional[Any] = dataclasses.field(default=None)
    r"""ACLNotFoundFault"""  
    cluster_already_exists_fault: Optional[Any] = dataclasses.field(default=None)
    r"""ClusterAlreadyExistsFault"""  
    cluster_quota_for_customer_exceeded_fault: Optional[Any] = dataclasses.field(default=None)
    r"""ClusterQuotaForCustomerExceededFault"""  
    create_cluster_response: Optional[shared_createclusterresponse.CreateClusterResponse] = dataclasses.field(default=None)
    r"""Success"""  
    insufficient_cluster_capacity_fault: Optional[Any] = dataclasses.field(default=None)
    r"""InsufficientClusterCapacityFault"""  
    invalid_acl_state_fault: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidACLStateFault"""  
    invalid_credentials_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidCredentialsException"""  
    invalid_parameter_combination_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterCombinationException"""  
    invalid_parameter_value_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterValueException"""  
    invalid_vpc_network_state_fault: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidVPCNetworkStateFault"""  
    node_quota_for_cluster_exceeded_fault: Optional[Any] = dataclasses.field(default=None)
    r"""NodeQuotaForClusterExceededFault"""  
    node_quota_for_customer_exceeded_fault: Optional[Any] = dataclasses.field(default=None)
    r"""NodeQuotaForCustomerExceededFault"""  
    parameter_group_not_found_fault: Optional[Any] = dataclasses.field(default=None)
    r"""ParameterGroupNotFoundFault"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_linked_role_not_found_fault: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceLinkedRoleNotFoundFault"""  
    shards_per_cluster_quota_exceeded_fault: Optional[Any] = dataclasses.field(default=None)
    r"""ShardsPerClusterQuotaExceededFault"""  
    subnet_group_not_found_fault: Optional[Any] = dataclasses.field(default=None)
    r"""SubnetGroupNotFoundFault"""  
    tag_quota_per_resource_exceeded: Optional[Any] = dataclasses.field(default=None)
    r"""TagQuotaPerResourceExceeded"""  
    