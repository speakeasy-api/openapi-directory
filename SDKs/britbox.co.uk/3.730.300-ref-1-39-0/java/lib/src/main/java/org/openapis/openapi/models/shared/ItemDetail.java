/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ItemDetail - The item requested
 */
public class ItemDetail {
    /**
     * Advisory text about this item, related to the classification
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advisoryText")
    public String advisoryText;
    public ItemDetail withAdvisoryText(String advisoryText) {
        this.advisoryText = advisoryText;
        return this;
    }
    
    /**
     * The number of available episodes in the season, if the item is a season.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableEpisodeCount")
    public Integer availableEpisodeCount;
    public ItemDetail withAvailableEpisodeCount(Integer availableEpisodeCount) {
        this.availableEpisodeCount = availableEpisodeCount;
        return this;
    }
    
    /**
     * The number of available seasons in the show, if the item is a show.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableSeasonCount")
    public Integer availableSeasonCount;
    public ItemDetail withAvailableSeasonCount(Integer availableSeasonCount) {
        this.availableSeasonCount = availableSeasonCount;
        return this;
    }
    
    /**
     * The average user rating.
     * When based on user ratings from our system this will be out of 10.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("averageUserRating")
    public Double averageUserRating;
    public ItemDetail withAverageUserRating(Double averageUserRating) {
        this.averageUserRating = averageUserRating;
        return this;
    }
    
    /**
     * The badge this item has.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("badge")
    public String badge;
    public ItemDetail withBadge(String badge) {
        this.badge = badge;
        return this;
    }
    
    /**
     * The channel short code, if the item is a channel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channelShortCode")
    public String channelShortCode;
    public ItemDetail withChannelShortCode(String channelShortCode) {
        this.channelShortCode = channelShortCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classification")
    public ClassificationSummary classification;
    public ItemDetail withClassification(ClassificationSummary classification) {
        this.classification = classification;
        return this;
    }
    
    /**
     * A contextually relative title to display after a parent title.
     * Mostly applicable to Season, Episode and Trailer.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contextualTitle")
    public String contextualTitle;
    public ItemDetail withContextualTitle(String contextualTitle) {
        this.contextualTitle = contextualTitle;
        return this;
    }
    
    /**
     * Copyright information about this item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("copyright")
    public String copyright;
    public ItemDetail withCopyright(String copyright) {
        this.copyright = copyright;
        return this;
    }
    
    /**
     * A list of credits associated with this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credits")
    public Credit[] credits;
    public ItemDetail withCredits(Credit[] credits) {
        this.credits = credits;
        return this;
    }
    
    /**
     * A map of custom fields defined by a curator for an item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    public java.util.Map<String, Object> customFields;
    public ItemDetail withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * A custom identifier for this item.
     * For example the id for this item under a different content system.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customId")
    public String customId;
    public ItemDetail withCustomId(String customId) {
        this.customId = customId;
        return this;
    }
    
    /**
     * An ordered list of custom name-value-pair item metadata.
     * 
     * Usually displayed on an item detail page.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customMetadata")
    public ItemCustomMetadata[] customMetadata;
    public ItemDetail withCustomMetadata(ItemCustomMetadata[] customMetadata) {
        this.customMetadata = customMetadata;
        return this;
    }
    
    /**
     * The description of this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public ItemDetail withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The distributor of this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distributor")
    public String distributor;
    public ItemDetail withDistributor(String distributor) {
        this.distributor = distributor;
        return this;
    }
    
    /**
     * The duration of the media in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Integer duration;
    public ItemDetail withDuration(Integer duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * The number of episodes in the season, if the item is a season.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("episodeCount")
    public Integer episodeCount;
    public ItemDetail withEpisodeCount(Integer episodeCount) {
        this.episodeCount = episodeCount;
        return this;
    }
    
    /**
     * The full name of an episode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("episodeName")
    public String episodeName;
    public ItemDetail withEpisodeName(String episodeName) {
        this.episodeName = episodeName;
        return this;
    }
    
    /**
     * The number of an episode, if the item is an episode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("episodeNumber")
    public Integer episodeNumber;
    public ItemDetail withEpisodeNumber(Integer episodeNumber) {
        this.episodeNumber = episodeNumber;
        return this;
    }
    
    /**
     * A pageable list of items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("episodes")
    public ItemList episodes;
    public ItemDetail withEpisodes(ItemList episodes) {
        this.episodes = episodes;
        return this;
    }
    
    /**
     * The optional date of an event.
     * Specific to a Program item type.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("eventDate")
    public OffsetDateTime eventDate;
    public ItemDetail withEventDate(OffsetDateTime eventDate) {
        this.eventDate = eventDate;
        return this;
    }
    
    /**
     * An array of genre paths mapping to the values within the `genres` array from ItemSummary.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("genrePaths")
    public String[] genrePaths;
    public ItemDetail withGenrePaths(String[] genrePaths) {
        this.genrePaths = genrePaths;
        return this;
    }
    
    /**
     * The array of genres this item belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("genres")
    public String[] genres;
    public ItemDetail withGenres(String[] genres) {
        this.genres = genres;
        return this;
    }
    
    /**
     * Whether closed captioning is available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasClosedCaptions")
    public Boolean hasClosedCaptions;
    public ItemDetail withHasClosedCaptions(Boolean hasClosedCaptions) {
        this.hasClosedCaptions = hasClosedCaptions;
        return this;
    }
    
    /**
     * Unique identifier for an Item
     */
    @JsonProperty("id")
    public String id;
    public ItemDetail withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    public java.util.Map<String, String> images;
    public ItemDetail withImages(java.util.Map<String, String> images) {
        this.images = images;
        return this;
    }
    
    /**
     * The optional location (e.g. city) of an event.
     * Specific to a Program item type.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public ItemDetail withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The array of available offers for this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offers")
    public Offer[] offers;
    public ItemDetail withOffers(Offer[] offers) {
        this.offers = offers;
        return this;
    }
    
    /**
     * The path to the detail page of this item. Can be used to load the item detail page via the /page endpoint.
     */
    @JsonProperty("path")
    public String path;
    public ItemDetail withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * The year this item was released
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releaseYear")
    public Integer releaseYear;
    public ItemDetail withReleaseYear(Integer releaseYear) {
        this.releaseYear = releaseYear;
        return this;
    }
    
    /**
     * The scopes for this item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    public String[] scopes;
    public ItemDetail withScopes(String[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("season")
    public ItemDetail season;
    public ItemDetail withSeason(ItemDetail season) {
        this.season = season;
        return this;
    }
    
    /**
     * The identifier of the season this item belongs to, if the item is an episode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seasonId")
    public String seasonId;
    public ItemDetail withSeasonId(String seasonId) {
        this.seasonId = seasonId;
        return this;
    }
    
    /**
     * The number of a season, if the item is a season.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seasonNumber")
    public Integer seasonNumber;
    public ItemDetail withSeasonNumber(Integer seasonNumber) {
        this.seasonNumber = seasonNumber;
        return this;
    }
    
    /**
     * A pageable list of items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seasons")
    public ItemList seasons;
    public ItemDetail withSeasons(ItemList seasons) {
        this.seasons = seasons;
        return this;
    }
    
    /**
     * A truncated description of the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortDescription")
    public String shortDescription;
    public ItemDetail withShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show")
    public ItemDetail show;
    public ItemDetail withShow(ItemDetail show) {
        this.show = show;
        return this;
    }
    
    /**
     * The identifier of the show this item belongs to, if the item is a season or episode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("showId")
    public String showId;
    public ItemDetail withShowId(String showId) {
        this.showId = showId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("showTitle")
    public String showTitle;
    public ItemDetail withShowTitle(String showTitle) {
        this.showTitle = showTitle;
        return this;
    }
    
    /**
     * Subtype of the item. Mainly used to identify different types when `type`
     * is `customAsset`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtype")
    public String subtype;
    public ItemDetail withSubtype(String subtype) {
        this.subtype = subtype;
        return this;
    }
    
    /**
     * The tagline of the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagline")
    public String tagline;
    public ItemDetail withTagline(String tagline) {
        this.tagline = tagline;
        return this;
    }
    
    /**
     * Gets themes associated with the item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("themes")
    public Theme[] themes;
    public ItemDetail withThemes(Theme[] themes) {
        this.themes = themes;
        return this;
    }
    
    /**
     * The display title of the item.
     */
    @JsonProperty("title")
    public String title;
    public ItemDetail withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The total number of users who have rated this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalUserRatings")
    public Integer totalUserRatings;
    public ItemDetail withTotalUserRatings(Integer totalUserRatings) {
        this.totalUserRatings = totalUserRatings;
        return this;
    }
    
    /**
     * A list of trailers associated with this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trailers")
    public ItemSummary[] trailers;
    public ItemDetail withTrailers(ItemSummary[] trailers) {
        this.trailers = trailers;
        return this;
    }
    
    /**
     * The type of item
     */
    @JsonProperty("type")
    public ItemDetailTypeEnum type;
    public ItemDetail withType(ItemDetailTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The optional venue of an event.
     * Specific to a Program item type.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("venue")
    public String venue;
    public ItemDetail withVenue(String venue) {
        this.venue = venue;
        return this;
    }
    
    /**
     * The path to watch this item, if the item is a watchable type, e.g. a `movie`, `program` and `episode`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watchPath")
    public String watchPath;
    public ItemDetail withWatchPath(String watchPath) {
        this.watchPath = watchPath;
        return this;
    }
    
}
