/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RunQueryResponse - The response for Firestore.RunQuery.
 */
public class RunQueryResponse {
    /**
     * A Firestore document. Must not exceed 1 MiB - 4 bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document")
    public Document document;
    public RunQueryResponse withDocument(Document document) {
        this.document = document;
        return this;
    }
    
    /**
     * If present, Firestore has completely finished the request and no more documents will be returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("done")
    public Boolean done;
    public RunQueryResponse withDone(Boolean done) {
        this.done = done;
        return this;
    }
    
    /**
     * The time at which the document was read. This may be monotonically increasing; in this case, the previous documents in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `document` will be sent, and this represents the time at which the query was run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readTime")
    public String readTime;
    public RunQueryResponse withReadTime(String readTime) {
        this.readTime = readTime;
        return this;
    }
    
    /**
     * The number of results that have been skipped due to an offset between the last response and the current response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skippedResults")
    public Integer skippedResults;
    public RunQueryResponse withSkippedResults(Integer skippedResults) {
        this.skippedResults = skippedResults;
        return this;
    }
    
    /**
     * The transaction that was started as part of this request. Can only be set in the first response, and only if RunQueryRequest.new_transaction was set in the request. If set, no other fields will be set in this response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction")
    public String transaction;
    public RunQueryResponse withTransaction(String transaction) {
        this.transaction = transaction;
        return this;
    }
    
}
