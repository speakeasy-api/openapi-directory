"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetpagedadminRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Describes the type of the content being sent."""  
    is_active: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isActive', 'style': 'form', 'explode': True }})
    r"""Defines if the SKU binding is active."""  
    seller_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sellerId', 'style': 'form', 'explode': True }})
    r"""ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID."""  
    seller_sku_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sellerSkuId', 'style': 'form', 'explode': True }})
    r"""SKU ID in the seller's store."""  
    size: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""Amount of results."""  
    sku_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'skuId', 'style': 'form', 'explode': True }})
    r"""SKU's unique identifier in the marketplace."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Getpagedadmin200ApplicationJSON:
    r"""OK"""
    
    is_active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsActive'), 'exclude': lambda f: f is None }})
    r"""Defines if the SKU binding is active."""  
    is_persisted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsPersisted'), 'exclude': lambda f: f is None }})
    r"""Defines if the seller is persisted."""  
    is_removed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsRemoved'), 'exclude': lambda f: f is None }})
    r"""Defines if the seller is removed."""  
    requested_update_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedUpdateDate'), 'exclude': lambda f: f is None }})
    r"""Date when an SKU binding update was requested for the last time, in UTC format."""  
    seller_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SellerId'), 'exclude': lambda f: f is None }})
    r"""ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID."""  
    seller_stock_keeping_unit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SellerStockKeepingUnitId'), 'exclude': lambda f: f is None }})
    r"""SKU ID in the seller's store."""  
    sku_seller_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SkuSellerId'), 'exclude': lambda f: f is None }})
    r"""SKU Binding ID."""  
    stock_keeping_unit_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StockKeepingUnitId'), 'exclude': lambda f: f is None }})
    r"""SKU ID in the VTEX marketplace."""  
    update_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateDate'), 'exclude': lambda f: f is None }})
    r"""Date when the SKU binding was updated for the last time, in UTC format."""  
    

@dataclasses.dataclass
class GetpagedadminResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    getpagedadmin_200_application_json_object: Optional[Getpagedadmin200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    