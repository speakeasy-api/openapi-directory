// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FailbackReplicationErrorEnum string

const (
	FailbackReplicationErrorEnumAgentNotSeen                                          FailbackReplicationErrorEnum = "AGENT_NOT_SEEN"
	FailbackReplicationErrorEnumFailbackClientNotSeen                                 FailbackReplicationErrorEnum = "FAILBACK_CLIENT_NOT_SEEN"
	FailbackReplicationErrorEnumNotConverging                                         FailbackReplicationErrorEnum = "NOT_CONVERGING"
	FailbackReplicationErrorEnumUnstableNetwork                                       FailbackReplicationErrorEnum = "UNSTABLE_NETWORK"
	FailbackReplicationErrorEnumFailedToEstablishRecoveryInstanceCommunication        FailbackReplicationErrorEnum = "FAILED_TO_ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION"
	FailbackReplicationErrorEnumFailedToDownloadReplicationSoftwareToFailbackClient   FailbackReplicationErrorEnum = "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT"
	FailbackReplicationErrorEnumFailedToConfigureReplicationSoftware                  FailbackReplicationErrorEnum = "FAILED_TO_CONFIGURE_REPLICATION_SOFTWARE"
	FailbackReplicationErrorEnumFailedToPairAgentWithReplicationSoftware              FailbackReplicationErrorEnum = "FAILED_TO_PAIR_AGENT_WITH_REPLICATION_SOFTWARE"
	FailbackReplicationErrorEnumFailedToEstablishAgentReplicatorSoftwareCommunication FailbackReplicationErrorEnum = "FAILED_TO_ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION"
	FailbackReplicationErrorEnumFailedGettingReplicationState                         FailbackReplicationErrorEnum = "FAILED_GETTING_REPLICATION_STATE"
	FailbackReplicationErrorEnumSnapshotsFailure                                      FailbackReplicationErrorEnum = "SNAPSHOTS_FAILURE"
	FailbackReplicationErrorEnumFailedToCreateSecurityGroup                           FailbackReplicationErrorEnum = "FAILED_TO_CREATE_SECURITY_GROUP"
	FailbackReplicationErrorEnumFailedToLaunchReplicationServer                       FailbackReplicationErrorEnum = "FAILED_TO_LAUNCH_REPLICATION_SERVER"
	FailbackReplicationErrorEnumFailedToBootReplicationServer                         FailbackReplicationErrorEnum = "FAILED_TO_BOOT_REPLICATION_SERVER"
	FailbackReplicationErrorEnumFailedToAuthenticateWithService                       FailbackReplicationErrorEnum = "FAILED_TO_AUTHENTICATE_WITH_SERVICE"
	FailbackReplicationErrorEnumFailedToDownloadReplicationSoftware                   FailbackReplicationErrorEnum = "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE"
	FailbackReplicationErrorEnumFailedToCreateStagingDisks                            FailbackReplicationErrorEnum = "FAILED_TO_CREATE_STAGING_DISKS"
	FailbackReplicationErrorEnumFailedToAttachStagingDisks                            FailbackReplicationErrorEnum = "FAILED_TO_ATTACH_STAGING_DISKS"
	FailbackReplicationErrorEnumFailedToPairReplicationServerWithAgent                FailbackReplicationErrorEnum = "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT"
	FailbackReplicationErrorEnumFailedToConnectAgentToReplicationServer               FailbackReplicationErrorEnum = "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER"
	FailbackReplicationErrorEnumFailedToStartDataTransfer                             FailbackReplicationErrorEnum = "FAILED_TO_START_DATA_TRANSFER"
)

func (e FailbackReplicationErrorEnum) ToPointer() *FailbackReplicationErrorEnum {
	return &e
}

func (e *FailbackReplicationErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AGENT_NOT_SEEN":
		fallthrough
	case "FAILBACK_CLIENT_NOT_SEEN":
		fallthrough
	case "NOT_CONVERGING":
		fallthrough
	case "UNSTABLE_NETWORK":
		fallthrough
	case "FAILED_TO_ESTABLISH_RECOVERY_INSTANCE_COMMUNICATION":
		fallthrough
	case "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE_TO_FAILBACK_CLIENT":
		fallthrough
	case "FAILED_TO_CONFIGURE_REPLICATION_SOFTWARE":
		fallthrough
	case "FAILED_TO_PAIR_AGENT_WITH_REPLICATION_SOFTWARE":
		fallthrough
	case "FAILED_TO_ESTABLISH_AGENT_REPLICATOR_SOFTWARE_COMMUNICATION":
		fallthrough
	case "FAILED_GETTING_REPLICATION_STATE":
		fallthrough
	case "SNAPSHOTS_FAILURE":
		fallthrough
	case "FAILED_TO_CREATE_SECURITY_GROUP":
		fallthrough
	case "FAILED_TO_LAUNCH_REPLICATION_SERVER":
		fallthrough
	case "FAILED_TO_BOOT_REPLICATION_SERVER":
		fallthrough
	case "FAILED_TO_AUTHENTICATE_WITH_SERVICE":
		fallthrough
	case "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE":
		fallthrough
	case "FAILED_TO_CREATE_STAGING_DISKS":
		fallthrough
	case "FAILED_TO_ATTACH_STAGING_DISKS":
		fallthrough
	case "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT":
		fallthrough
	case "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER":
		fallthrough
	case "FAILED_TO_START_DATA_TRANSFER":
		*e = FailbackReplicationErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FailbackReplicationErrorEnum: %v", v)
	}
}
