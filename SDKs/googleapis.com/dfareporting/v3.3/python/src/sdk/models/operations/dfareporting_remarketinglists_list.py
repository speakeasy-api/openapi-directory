"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import remarketinglistslistresponse as shared_remarketinglistslistresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class DfareportingRemarketingListsListSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class DfareportingRemarketingListsListSortFieldEnum(str, Enum):
    r"""Field by which to sort the list."""
    ID = 'ID'
    NAME = 'NAME'

class DfareportingRemarketingListsListSortOrderEnum(str, Enum):
    r"""Order of sorted results."""
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


@dataclasses.dataclass
class DfareportingRemarketingListsListRequest:
    
    advertiser_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'advertiserId', 'style': 'form', 'explode': True }})
    r"""Select only remarketing lists owned by this advertiser."""  
    profile_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'profileId', 'style': 'simple', 'explode': False }})
    r"""User profile ID associated with this request."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'active', 'style': 'form', 'explode': True }})
    r"""Select only active or only inactive remarketing lists."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    floodlight_activity_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'floodlightActivityId', 'style': 'form', 'explode': True }})
    r"""Select only remarketing lists that have this floodlight activity ID."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, \\"remarketing list*2015\\" will return objects with names like \\"remarketing list June 2015\\", \\"remarketing list April 2015\\", or simply \\"remarketing list 2015\\". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of \\"remarketing list\\" will match objects with name \\"my remarketing list\\", \\"remarketing list 2015\\", or simply \\"remarketing list\\"."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""Value of the nextPageToken from the previous result page."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    sort_field: Optional[DfareportingRemarketingListsListSortFieldEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortField', 'style': 'form', 'explode': True }})
    r"""Field by which to sort the list."""  
    sort_order: Optional[DfareportingRemarketingListsListSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortOrder', 'style': 'form', 'explode': True }})
    r"""Order of sorted results."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class DfareportingRemarketingListsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    remarketing_lists_list_response: Optional[shared_remarketinglistslistresponse.RemarketingListsListResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    