// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DeviceSignalsDiskEncryptionEnum - The encryption state of the disk. On ChromeOS, the main disk is always ENCRYPTED.
type DeviceSignalsDiskEncryptionEnum string

const (
	DeviceSignalsDiskEncryptionEnumDiskEncryptionUnspecified DeviceSignalsDiskEncryptionEnum = "DISK_ENCRYPTION_UNSPECIFIED"
	DeviceSignalsDiskEncryptionEnumDiskEncryptionUnknown     DeviceSignalsDiskEncryptionEnum = "DISK_ENCRYPTION_UNKNOWN"
	DeviceSignalsDiskEncryptionEnumDiskEncryptionDisabled    DeviceSignalsDiskEncryptionEnum = "DISK_ENCRYPTION_DISABLED"
	DeviceSignalsDiskEncryptionEnumDiskEncryptionEncrypted   DeviceSignalsDiskEncryptionEnum = "DISK_ENCRYPTION_ENCRYPTED"
)

func (e DeviceSignalsDiskEncryptionEnum) ToPointer() *DeviceSignalsDiskEncryptionEnum {
	return &e
}

func (e *DeviceSignalsDiskEncryptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DISK_ENCRYPTION_UNSPECIFIED":
		fallthrough
	case "DISK_ENCRYPTION_UNKNOWN":
		fallthrough
	case "DISK_ENCRYPTION_DISABLED":
		fallthrough
	case "DISK_ENCRYPTION_ENCRYPTED":
		*e = DeviceSignalsDiskEncryptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceSignalsDiskEncryptionEnum: %v", v)
	}
}

// DeviceSignalsOperatingSystemEnum - The type of the Operating System currently running on the device.
type DeviceSignalsOperatingSystemEnum string

const (
	DeviceSignalsOperatingSystemEnumOperatingSystemUnspecified DeviceSignalsOperatingSystemEnum = "OPERATING_SYSTEM_UNSPECIFIED"
	DeviceSignalsOperatingSystemEnumChromeOs                   DeviceSignalsOperatingSystemEnum = "CHROME_OS"
	DeviceSignalsOperatingSystemEnumChromiumOs                 DeviceSignalsOperatingSystemEnum = "CHROMIUM_OS"
	DeviceSignalsOperatingSystemEnumWindows                    DeviceSignalsOperatingSystemEnum = "WINDOWS"
	DeviceSignalsOperatingSystemEnumMacOsX                     DeviceSignalsOperatingSystemEnum = "MAC_OS_X"
	DeviceSignalsOperatingSystemEnumLinux                      DeviceSignalsOperatingSystemEnum = "LINUX"
)

func (e DeviceSignalsOperatingSystemEnum) ToPointer() *DeviceSignalsOperatingSystemEnum {
	return &e
}

func (e *DeviceSignalsOperatingSystemEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPERATING_SYSTEM_UNSPECIFIED":
		fallthrough
	case "CHROME_OS":
		fallthrough
	case "CHROMIUM_OS":
		fallthrough
	case "WINDOWS":
		fallthrough
	case "MAC_OS_X":
		fallthrough
	case "LINUX":
		*e = DeviceSignalsOperatingSystemEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceSignalsOperatingSystemEnum: %v", v)
	}
}

// DeviceSignalsOsFirewallEnum - The state of the OS level firewall. On ChromeOS, the value will always be ENABLED on regular devices and UNKNOWN on devices in developer mode.
type DeviceSignalsOsFirewallEnum string

const (
	DeviceSignalsOsFirewallEnumOsFirewallUnspecified DeviceSignalsOsFirewallEnum = "OS_FIREWALL_UNSPECIFIED"
	DeviceSignalsOsFirewallEnumOsFirewallUnknown     DeviceSignalsOsFirewallEnum = "OS_FIREWALL_UNKNOWN"
	DeviceSignalsOsFirewallEnumOsFirewallDisabled    DeviceSignalsOsFirewallEnum = "OS_FIREWALL_DISABLED"
	DeviceSignalsOsFirewallEnumOsFirewallEnabled     DeviceSignalsOsFirewallEnum = "OS_FIREWALL_ENABLED"
)

func (e DeviceSignalsOsFirewallEnum) ToPointer() *DeviceSignalsOsFirewallEnum {
	return &e
}

func (e *DeviceSignalsOsFirewallEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OS_FIREWALL_UNSPECIFIED":
		fallthrough
	case "OS_FIREWALL_UNKNOWN":
		fallthrough
	case "OS_FIREWALL_DISABLED":
		fallthrough
	case "OS_FIREWALL_ENABLED":
		*e = DeviceSignalsOsFirewallEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceSignalsOsFirewallEnum: %v", v)
	}
}

// DeviceSignalsPasswordProtectionWarningTriggerEnum - Whether the Password Protection Warning feature is enabled or not. Password protection alerts users when they reuse their protected password on potentially suspicious sites. This setting is controlled by an enterprise policy: https://chromeenterprise.google/policies/#PasswordProtectionWarningTrigger. Note that the policy unset does not have the same effects as having the policy explicitly set to `PASSWORD_PROTECTION_OFF`.
type DeviceSignalsPasswordProtectionWarningTriggerEnum string

const (
	DeviceSignalsPasswordProtectionWarningTriggerEnumPasswordProtectionWarningTriggerUnspecified DeviceSignalsPasswordProtectionWarningTriggerEnum = "PASSWORD_PROTECTION_WARNING_TRIGGER_UNSPECIFIED"
	DeviceSignalsPasswordProtectionWarningTriggerEnumPolicyUnset                                 DeviceSignalsPasswordProtectionWarningTriggerEnum = "POLICY_UNSET"
	DeviceSignalsPasswordProtectionWarningTriggerEnumPasswordProtectionOff                       DeviceSignalsPasswordProtectionWarningTriggerEnum = "PASSWORD_PROTECTION_OFF"
	DeviceSignalsPasswordProtectionWarningTriggerEnumPasswordReuse                               DeviceSignalsPasswordProtectionWarningTriggerEnum = "PASSWORD_REUSE"
	DeviceSignalsPasswordProtectionWarningTriggerEnumPhishingReuse                               DeviceSignalsPasswordProtectionWarningTriggerEnum = "PHISHING_REUSE"
)

func (e DeviceSignalsPasswordProtectionWarningTriggerEnum) ToPointer() *DeviceSignalsPasswordProtectionWarningTriggerEnum {
	return &e
}

func (e *DeviceSignalsPasswordProtectionWarningTriggerEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSWORD_PROTECTION_WARNING_TRIGGER_UNSPECIFIED":
		fallthrough
	case "POLICY_UNSET":
		fallthrough
	case "PASSWORD_PROTECTION_OFF":
		fallthrough
	case "PASSWORD_REUSE":
		fallthrough
	case "PHISHING_REUSE":
		*e = DeviceSignalsPasswordProtectionWarningTriggerEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceSignalsPasswordProtectionWarningTriggerEnum: %v", v)
	}
}

// DeviceSignalsRealtimeURLCheckModeEnum - Whether Enterprise-grade (i.e. custom) unsafe URL scanning is enabled or not. This setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#EnterpriseRealTimeUrlCheckMode
type DeviceSignalsRealtimeURLCheckModeEnum string

const (
	DeviceSignalsRealtimeURLCheckModeEnumRealtimeURLCheckModeUnspecified      DeviceSignalsRealtimeURLCheckModeEnum = "REALTIME_URL_CHECK_MODE_UNSPECIFIED"
	DeviceSignalsRealtimeURLCheckModeEnumRealtimeURLCheckModeDisabled         DeviceSignalsRealtimeURLCheckModeEnum = "REALTIME_URL_CHECK_MODE_DISABLED"
	DeviceSignalsRealtimeURLCheckModeEnumRealtimeURLCheckModeEnabledMainFrame DeviceSignalsRealtimeURLCheckModeEnum = "REALTIME_URL_CHECK_MODE_ENABLED_MAIN_FRAME"
)

func (e DeviceSignalsRealtimeURLCheckModeEnum) ToPointer() *DeviceSignalsRealtimeURLCheckModeEnum {
	return &e
}

func (e *DeviceSignalsRealtimeURLCheckModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REALTIME_URL_CHECK_MODE_UNSPECIFIED":
		fallthrough
	case "REALTIME_URL_CHECK_MODE_DISABLED":
		fallthrough
	case "REALTIME_URL_CHECK_MODE_ENABLED_MAIN_FRAME":
		*e = DeviceSignalsRealtimeURLCheckModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceSignalsRealtimeURLCheckModeEnum: %v", v)
	}
}

// DeviceSignalsSafeBrowsingProtectionLevelEnum - Safe Browsing Protection Level. That setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#SafeBrowsingProtectionLevel.
type DeviceSignalsSafeBrowsingProtectionLevelEnum string

const (
	DeviceSignalsSafeBrowsingProtectionLevelEnumSafeBrowsingProtectionLevelUnspecified DeviceSignalsSafeBrowsingProtectionLevelEnum = "SAFE_BROWSING_PROTECTION_LEVEL_UNSPECIFIED"
	DeviceSignalsSafeBrowsingProtectionLevelEnumInactive                               DeviceSignalsSafeBrowsingProtectionLevelEnum = "INACTIVE"
	DeviceSignalsSafeBrowsingProtectionLevelEnumStandard                               DeviceSignalsSafeBrowsingProtectionLevelEnum = "STANDARD"
	DeviceSignalsSafeBrowsingProtectionLevelEnumEnhanced                               DeviceSignalsSafeBrowsingProtectionLevelEnum = "ENHANCED"
)

func (e DeviceSignalsSafeBrowsingProtectionLevelEnum) ToPointer() *DeviceSignalsSafeBrowsingProtectionLevelEnum {
	return &e
}

func (e *DeviceSignalsSafeBrowsingProtectionLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SAFE_BROWSING_PROTECTION_LEVEL_UNSPECIFIED":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "STANDARD":
		fallthrough
	case "ENHANCED":
		*e = DeviceSignalsSafeBrowsingProtectionLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceSignalsSafeBrowsingProtectionLevelEnum: %v", v)
	}
}

// DeviceSignalsScreenLockSecuredEnum - The state of the Screen Lock password protection. On ChromeOS, this value will always be ENABLED as there is not way to disable requiring a password or pin when unlocking the device.
type DeviceSignalsScreenLockSecuredEnum string

const (
	DeviceSignalsScreenLockSecuredEnumScreenLockSecuredUnspecified DeviceSignalsScreenLockSecuredEnum = "SCREEN_LOCK_SECURED_UNSPECIFIED"
	DeviceSignalsScreenLockSecuredEnumScreenLockSecuredUnknown     DeviceSignalsScreenLockSecuredEnum = "SCREEN_LOCK_SECURED_UNKNOWN"
	DeviceSignalsScreenLockSecuredEnumScreenLockSecuredDisabled    DeviceSignalsScreenLockSecuredEnum = "SCREEN_LOCK_SECURED_DISABLED"
	DeviceSignalsScreenLockSecuredEnumScreenLockSecuredEnabled     DeviceSignalsScreenLockSecuredEnum = "SCREEN_LOCK_SECURED_ENABLED"
)

func (e DeviceSignalsScreenLockSecuredEnum) ToPointer() *DeviceSignalsScreenLockSecuredEnum {
	return &e
}

func (e *DeviceSignalsScreenLockSecuredEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SCREEN_LOCK_SECURED_UNSPECIFIED":
		fallthrough
	case "SCREEN_LOCK_SECURED_UNKNOWN":
		fallthrough
	case "SCREEN_LOCK_SECURED_DISABLED":
		fallthrough
	case "SCREEN_LOCK_SECURED_ENABLED":
		*e = DeviceSignalsScreenLockSecuredEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceSignalsScreenLockSecuredEnum: %v", v)
	}
}

// DeviceSignalsSecureBootModeEnum - Whether the device's startup software has its Secure Boot feature enabled.
type DeviceSignalsSecureBootModeEnum string

const (
	DeviceSignalsSecureBootModeEnumSecureBootModeUnspecified DeviceSignalsSecureBootModeEnum = "SECURE_BOOT_MODE_UNSPECIFIED"
	DeviceSignalsSecureBootModeEnumSecureBootModeUnknown     DeviceSignalsSecureBootModeEnum = "SECURE_BOOT_MODE_UNKNOWN"
	DeviceSignalsSecureBootModeEnumSecureBootModeDisabled    DeviceSignalsSecureBootModeEnum = "SECURE_BOOT_MODE_DISABLED"
	DeviceSignalsSecureBootModeEnumSecureBootModeEnabled     DeviceSignalsSecureBootModeEnum = "SECURE_BOOT_MODE_ENABLED"
)

func (e DeviceSignalsSecureBootModeEnum) ToPointer() *DeviceSignalsSecureBootModeEnum {
	return &e
}

func (e *DeviceSignalsSecureBootModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SECURE_BOOT_MODE_UNSPECIFIED":
		fallthrough
	case "SECURE_BOOT_MODE_UNKNOWN":
		fallthrough
	case "SECURE_BOOT_MODE_DISABLED":
		fallthrough
	case "SECURE_BOOT_MODE_ENABLED":
		*e = DeviceSignalsSecureBootModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceSignalsSecureBootModeEnum: %v", v)
	}
}

// DeviceSignals - The device signals as reported by Chrome.
type DeviceSignals struct {
	// Value of the AllowScreenLock policy on the device. See https://chromeenterprise.google/policies/?policy=AllowScreenLock for more details.
	AllowScreenLock *bool `json:"allowScreenLock,omitempty"`
	// Current version of the Chrome browser which generated this set of signals. Example value: "107.0.5286.0".
	BrowserVersion *string `json:"browserVersion,omitempty"`
	// Whether Chrome's built-in DNS client is used. The OS DNS client is otherwise used. This value may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#BuiltInDnsClientEnabled.
	BuiltInDNSClientEnabled *bool `json:"builtInDnsClientEnabled,omitempty"`
	// Whether access to the Chrome Remote Desktop application is blocked via a policy.
	ChromeRemoteDesktopAppBlocked *bool `json:"chromeRemoteDesktopAppBlocked,omitempty"`
	// Properties of the CrowdStrike agent installed on a device.
	CrowdStrikeAgent *CrowdStrikeAgent `json:"crowdStrikeAgent,omitempty"`
	// Affiliation IDs of the organizations that are affiliated with the organization that is currently managing the device. When the sets of device and profile affiliation IDs overlap, it means that the organizations managing the device and user are affiliated. To learn more about user affiliation, visit https://support.google.com/chrome/a/answer/12801245?ref_topic=9027936.
	DeviceAffiliationIds []string `json:"deviceAffiliationIds,omitempty"`
	// Enrollment domain of the customer which is currently managing the device.
	DeviceEnrollmentDomain *string `json:"deviceEnrollmentDomain,omitempty"`
	// The name of the device's manufacturer.
	DeviceManufacturer *string `json:"deviceManufacturer,omitempty"`
	// The name of the device's model.
	DeviceModel *string `json:"deviceModel,omitempty"`
	// The encryption state of the disk. On ChromeOS, the main disk is always ENCRYPTED.
	DiskEncryption *DeviceSignalsDiskEncryptionEnum `json:"diskEncryption,omitempty"`
	// The display name of the device, as defined by the user.
	DisplayName *string `json:"displayName,omitempty"`
	// Hostname of the device.
	Hostname *string `json:"hostname,omitempty"`
	// International Mobile Equipment Identity (IMEI) of the device.
	Imei []string `json:"imei,omitempty"`
	// MAC addresses of the device.
	MacAddresses []string `json:"macAddresses,omitempty"`
	// Mobile Equipment Identifier (MEID) of the device.
	Meid []string `json:"meid,omitempty"`
	// The type of the Operating System currently running on the device.
	OperatingSystem *DeviceSignalsOperatingSystemEnum `json:"operatingSystem,omitempty"`
	// The state of the OS level firewall. On ChromeOS, the value will always be ENABLED on regular devices and UNKNOWN on devices in developer mode.
	OsFirewall *DeviceSignalsOsFirewallEnum `json:"osFirewall,omitempty"`
	// The current version of the Operating System. On Windows and linux, the value will also include the security patch information.
	OsVersion *string `json:"osVersion,omitempty"`
	// Whether the Password Protection Warning feature is enabled or not. Password protection alerts users when they reuse their protected password on potentially suspicious sites. This setting is controlled by an enterprise policy: https://chromeenterprise.google/policies/#PasswordProtectionWarningTrigger. Note that the policy unset does not have the same effects as having the policy explicitly set to `PASSWORD_PROTECTION_OFF`.
	PasswordProtectionWarningTrigger *DeviceSignalsPasswordProtectionWarningTriggerEnum `json:"passwordProtectionWarningTrigger,omitempty"`
	// Affiliation IDs of the organizations that are affiliated with the organization that is currently managing the Chrome Profile’s user or ChromeOS user.
	ProfileAffiliationIds []string `json:"profileAffiliationIds,omitempty"`
	// Whether Enterprise-grade (i.e. custom) unsafe URL scanning is enabled or not. This setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#EnterpriseRealTimeUrlCheckMode
	RealtimeURLCheckMode *DeviceSignalsRealtimeURLCheckModeEnum `json:"realtimeUrlCheckMode,omitempty"`
	// Safe Browsing Protection Level. That setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#SafeBrowsingProtectionLevel.
	SafeBrowsingProtectionLevel *DeviceSignalsSafeBrowsingProtectionLevelEnum `json:"safeBrowsingProtectionLevel,omitempty"`
	// The state of the Screen Lock password protection. On ChromeOS, this value will always be ENABLED as there is not way to disable requiring a password or pin when unlocking the device.
	ScreenLockSecured *DeviceSignalsScreenLockSecuredEnum `json:"screenLockSecured,omitempty"`
	// Whether the device's startup software has its Secure Boot feature enabled.
	SecureBootMode *DeviceSignalsSecureBootModeEnum `json:"secureBootMode,omitempty"`
	// The serial number of the device. On Windows, this represents the BIOS's serial number.
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Whether the Site Isolation (a.k.a Site Per Process) setting is enabled. That setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/#SitePerProcess
	SiteIsolationEnabled *bool `json:"siteIsolationEnabled,omitempty"`
	// List of the addesses of all OS level DNS servers configured in the device's network settings.
	SystemDNSServers []string `json:"systemDnsServers,omitempty"`
	// Whether Chrome is blocking third-party software injection or not. This setting may be controlled by an enterprise policy: https://chromeenterprise.google/policies/?policy=ThirdPartyBlockingEnabled
	ThirdPartyBlockingEnabled *bool `json:"thirdPartyBlockingEnabled,omitempty"`
	// Windows domain that the current machine has joined.
	WindowsMachineDomain *string `json:"windowsMachineDomain,omitempty"`
	// Windows domain for the current OS user.
	WindowsUserDomain *string `json:"windowsUserDomain,omitempty"`
}
