// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PeoplePeopleConnectionsListSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type PeoplePeopleConnectionsListSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type PeoplePeopleConnectionsListSecurity struct {
	Option1 *PeoplePeopleConnectionsListSecurityOption1 `security:"option"`
	Option2 *PeoplePeopleConnectionsListSecurityOption2 `security:"option"`
}

// PeoplePeopleConnectionsListSortOrderEnum - Optional. The order in which the connections should be sorted. Defaults to `LAST_MODIFIED_ASCENDING`.
type PeoplePeopleConnectionsListSortOrderEnum string

const (
	PeoplePeopleConnectionsListSortOrderEnumLastModifiedAscending  PeoplePeopleConnectionsListSortOrderEnum = "LAST_MODIFIED_ASCENDING"
	PeoplePeopleConnectionsListSortOrderEnumLastModifiedDescending PeoplePeopleConnectionsListSortOrderEnum = "LAST_MODIFIED_DESCENDING"
	PeoplePeopleConnectionsListSortOrderEnumFirstNameAscending     PeoplePeopleConnectionsListSortOrderEnum = "FIRST_NAME_ASCENDING"
	PeoplePeopleConnectionsListSortOrderEnumLastNameAscending      PeoplePeopleConnectionsListSortOrderEnum = "LAST_NAME_ASCENDING"
)

func (e PeoplePeopleConnectionsListSortOrderEnum) ToPointer() *PeoplePeopleConnectionsListSortOrderEnum {
	return &e
}

func (e *PeoplePeopleConnectionsListSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAST_MODIFIED_ASCENDING":
		fallthrough
	case "LAST_MODIFIED_DESCENDING":
		fallthrough
	case "FIRST_NAME_ASCENDING":
		fallthrough
	case "LAST_NAME_ASCENDING":
		*e = PeoplePeopleConnectionsListSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PeoplePeopleConnectionsListSortOrderEnum: %v", v)
	}
}

type PeoplePeopleConnectionsListSourcesEnum string

const (
	PeoplePeopleConnectionsListSourcesEnumReadSourceTypeUnspecified   PeoplePeopleConnectionsListSourcesEnum = "READ_SOURCE_TYPE_UNSPECIFIED"
	PeoplePeopleConnectionsListSourcesEnumReadSourceTypeProfile       PeoplePeopleConnectionsListSourcesEnum = "READ_SOURCE_TYPE_PROFILE"
	PeoplePeopleConnectionsListSourcesEnumReadSourceTypeContact       PeoplePeopleConnectionsListSourcesEnum = "READ_SOURCE_TYPE_CONTACT"
	PeoplePeopleConnectionsListSourcesEnumReadSourceTypeDomainContact PeoplePeopleConnectionsListSourcesEnum = "READ_SOURCE_TYPE_DOMAIN_CONTACT"
)

func (e PeoplePeopleConnectionsListSourcesEnum) ToPointer() *PeoplePeopleConnectionsListSourcesEnum {
	return &e
}

func (e *PeoplePeopleConnectionsListSourcesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "READ_SOURCE_TYPE_UNSPECIFIED":
		fallthrough
	case "READ_SOURCE_TYPE_PROFILE":
		fallthrough
	case "READ_SOURCE_TYPE_CONTACT":
		fallthrough
	case "READ_SOURCE_TYPE_DOMAIN_CONTACT":
		*e = PeoplePeopleConnectionsListSourcesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PeoplePeopleConnectionsListSourcesEnum: %v", v)
	}
}

type PeoplePeopleConnectionsListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Optional. The number of connections to include in the response. Valid values are between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0.
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// Optional. A page token, received from a previous response `next_page_token`. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `people.connections.list` must match the first call that provided the page token.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined
	PersonFields *string `queryParam:"style=form,explode=true,name=personFields"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`.
	RequestMaskIncludeField *string `queryParam:"style=form,explode=true,name=requestMask.includeField"`
	// Optional. Whether the response should return `next_sync_token` on the last page of results. It can be used to get incremental changes since the last request by setting it on the request `sync_token`. More details about sync behavior at `people.connections.list`.
	RequestSyncToken *bool `queryParam:"style=form,explode=true,name=requestSyncToken"`
	// Required. The resource name to return connections for. Only `people/me` is valid.
	ResourceName string `pathParam:"style=simple,explode=false,name=resourceName"`
	// Optional. The order in which the connections should be sorted. Defaults to `LAST_MODIFIED_ASCENDING`.
	SortOrder *PeoplePeopleConnectionsListSortOrderEnum `queryParam:"style=form,explode=true,name=sortOrder"`
	// Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
	Sources []PeoplePeopleConnectionsListSourcesEnum `queryParam:"style=form,explode=true,name=sources"`
	// Optional. A sync token, received from a previous response `next_sync_token` Provide this to retrieve only the resources changed since the last request. When syncing, all other parameters provided to `people.connections.list` must match the first call that provided the sync token. More details about sync behavior at `people.connections.list`.
	SyncToken *string `queryParam:"style=form,explode=true,name=syncToken"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type PeoplePeopleConnectionsListResponse struct {
	ContentType string
	// Successful response
	ListConnectionsResponse *shared.ListConnectionsResponse
	StatusCode              int
	RawResponse             *http.Response
}
