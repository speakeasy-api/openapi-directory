// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type LocalJwtVerifierAlgoSettingsType string

const (
	LocalJwtVerifierAlgoSettingsTypeHSAlgoSettings   LocalJwtVerifierAlgoSettingsType = "HSAlgoSettings"
	LocalJwtVerifierAlgoSettingsTypeRSAlgoSettings   LocalJwtVerifierAlgoSettingsType = "RSAlgoSettings"
	LocalJwtVerifierAlgoSettingsTypeESAlgoSettings   LocalJwtVerifierAlgoSettingsType = "ESAlgoSettings"
	LocalJwtVerifierAlgoSettingsTypeJWKSAlgoSettings LocalJwtVerifierAlgoSettingsType = "JWKSAlgoSettings"
)

type LocalJwtVerifierAlgoSettings struct {
	HSAlgoSettings   *HSAlgoSettings
	RSAlgoSettings   *RSAlgoSettings
	ESAlgoSettings   *ESAlgoSettings
	JWKSAlgoSettings *JWKSAlgoSettings

	Type LocalJwtVerifierAlgoSettingsType
}

func CreateLocalJwtVerifierAlgoSettingsHSAlgoSettings(hsAlgoSettings HSAlgoSettings) LocalJwtVerifierAlgoSettings {
	typ := LocalJwtVerifierAlgoSettingsTypeHSAlgoSettings

	return LocalJwtVerifierAlgoSettings{
		HSAlgoSettings: &hsAlgoSettings,
		Type:           typ,
	}
}

func CreateLocalJwtVerifierAlgoSettingsRSAlgoSettings(rsAlgoSettings RSAlgoSettings) LocalJwtVerifierAlgoSettings {
	typ := LocalJwtVerifierAlgoSettingsTypeRSAlgoSettings

	return LocalJwtVerifierAlgoSettings{
		RSAlgoSettings: &rsAlgoSettings,
		Type:           typ,
	}
}

func CreateLocalJwtVerifierAlgoSettingsESAlgoSettings(esAlgoSettings ESAlgoSettings) LocalJwtVerifierAlgoSettings {
	typ := LocalJwtVerifierAlgoSettingsTypeESAlgoSettings

	return LocalJwtVerifierAlgoSettings{
		ESAlgoSettings: &esAlgoSettings,
		Type:           typ,
	}
}

func CreateLocalJwtVerifierAlgoSettingsJWKSAlgoSettings(jwksAlgoSettings JWKSAlgoSettings) LocalJwtVerifierAlgoSettings {
	typ := LocalJwtVerifierAlgoSettingsTypeJWKSAlgoSettings

	return LocalJwtVerifierAlgoSettings{
		JWKSAlgoSettings: &jwksAlgoSettings,
		Type:             typ,
	}
}

func (u *LocalJwtVerifierAlgoSettings) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	hsAlgoSettings := new(HSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&hsAlgoSettings); err == nil {
		u.HSAlgoSettings = hsAlgoSettings
		u.Type = LocalJwtVerifierAlgoSettingsTypeHSAlgoSettings
		return nil
	}

	rsAlgoSettings := new(RSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&rsAlgoSettings); err == nil {
		u.RSAlgoSettings = rsAlgoSettings
		u.Type = LocalJwtVerifierAlgoSettingsTypeRSAlgoSettings
		return nil
	}

	esAlgoSettings := new(ESAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&esAlgoSettings); err == nil {
		u.ESAlgoSettings = esAlgoSettings
		u.Type = LocalJwtVerifierAlgoSettingsTypeESAlgoSettings
		return nil
	}

	jwksAlgoSettings := new(JWKSAlgoSettings)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&jwksAlgoSettings); err == nil {
		u.JWKSAlgoSettings = jwksAlgoSettings
		u.Type = LocalJwtVerifierAlgoSettingsTypeJWKSAlgoSettings
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u LocalJwtVerifierAlgoSettings) MarshalJSON() ([]byte, error) {
	if u.HSAlgoSettings != nil {
		return json.Marshal(u.HSAlgoSettings)
	}

	if u.RSAlgoSettings != nil {
		return json.Marshal(u.RSAlgoSettings)
	}

	if u.ESAlgoSettings != nil {
		return json.Marshal(u.ESAlgoSettings)
	}

	if u.JWKSAlgoSettings != nil {
		return json.Marshal(u.JWKSAlgoSettings)
	}

	return nil, nil
}

type LocalJwtVerifierSourceType string

const (
	LocalJwtVerifierSourceTypeInQueryParam LocalJwtVerifierSourceType = "InQueryParam"
	LocalJwtVerifierSourceTypeInHeader     LocalJwtVerifierSourceType = "InHeader"
	LocalJwtVerifierSourceTypeInCookie     LocalJwtVerifierSourceType = "InCookie"
)

type LocalJwtVerifierSource struct {
	InQueryParam *InQueryParam
	InHeader     *InHeader
	InCookie     *InCookie

	Type LocalJwtVerifierSourceType
}

func CreateLocalJwtVerifierSourceInQueryParam(inQueryParam InQueryParam) LocalJwtVerifierSource {
	typ := LocalJwtVerifierSourceTypeInQueryParam

	return LocalJwtVerifierSource{
		InQueryParam: &inQueryParam,
		Type:         typ,
	}
}

func CreateLocalJwtVerifierSourceInHeader(inHeader InHeader) LocalJwtVerifierSource {
	typ := LocalJwtVerifierSourceTypeInHeader

	return LocalJwtVerifierSource{
		InHeader: &inHeader,
		Type:     typ,
	}
}

func CreateLocalJwtVerifierSourceInCookie(inCookie InCookie) LocalJwtVerifierSource {
	typ := LocalJwtVerifierSourceTypeInCookie

	return LocalJwtVerifierSource{
		InCookie: &inCookie,
		Type:     typ,
	}
}

func (u *LocalJwtVerifierSource) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	inQueryParam := new(InQueryParam)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inQueryParam); err == nil {
		u.InQueryParam = inQueryParam
		u.Type = LocalJwtVerifierSourceTypeInQueryParam
		return nil
	}

	inHeader := new(InHeader)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inHeader); err == nil {
		u.InHeader = inHeader
		u.Type = LocalJwtVerifierSourceTypeInHeader
		return nil
	}

	inCookie := new(InCookie)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inCookie); err == nil {
		u.InCookie = inCookie
		u.Type = LocalJwtVerifierSourceTypeInCookie
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u LocalJwtVerifierSource) MarshalJSON() ([]byte, error) {
	if u.InQueryParam != nil {
		return json.Marshal(u.InQueryParam)
	}

	if u.InHeader != nil {
		return json.Marshal(u.InHeader)
	}

	if u.InCookie != nil {
		return json.Marshal(u.InCookie)
	}

	return nil, nil
}

type LocalJwtVerifierStrategyType string

const (
	LocalJwtVerifierStrategyTypePassThrough LocalJwtVerifierStrategyType = "PassThrough"
	LocalJwtVerifierStrategyTypeSign        LocalJwtVerifierStrategyType = "Sign"
	LocalJwtVerifierStrategyTypeTransform   LocalJwtVerifierStrategyType = "Transform"
)

type LocalJwtVerifierStrategy struct {
	PassThrough *PassThrough
	Sign        *Sign
	Transform   *Transform

	Type LocalJwtVerifierStrategyType
}

func CreateLocalJwtVerifierStrategyPassThrough(passThrough PassThrough) LocalJwtVerifierStrategy {
	typ := LocalJwtVerifierStrategyTypePassThrough

	return LocalJwtVerifierStrategy{
		PassThrough: &passThrough,
		Type:        typ,
	}
}

func CreateLocalJwtVerifierStrategySign(sign Sign) LocalJwtVerifierStrategy {
	typ := LocalJwtVerifierStrategyTypeSign

	return LocalJwtVerifierStrategy{
		Sign: &sign,
		Type: typ,
	}
}

func CreateLocalJwtVerifierStrategyTransform(transform Transform) LocalJwtVerifierStrategy {
	typ := LocalJwtVerifierStrategyTypeTransform

	return LocalJwtVerifierStrategy{
		Transform: &transform,
		Type:      typ,
	}
}

func (u *LocalJwtVerifierStrategy) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	passThrough := new(PassThrough)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&passThrough); err == nil {
		u.PassThrough = passThrough
		u.Type = LocalJwtVerifierStrategyTypePassThrough
		return nil
	}

	sign := new(Sign)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sign); err == nil {
		u.Sign = sign
		u.Type = LocalJwtVerifierStrategyTypeSign
		return nil
	}

	transform := new(Transform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&transform); err == nil {
		u.Transform = transform
		u.Type = LocalJwtVerifierStrategyTypeTransform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u LocalJwtVerifierStrategy) MarshalJSON() ([]byte, error) {
	if u.PassThrough != nil {
		return json.Marshal(u.PassThrough)
	}

	if u.Sign != nil {
		return json.Marshal(u.Sign)
	}

	if u.Transform != nil {
		return json.Marshal(u.Transform)
	}

	return nil, nil
}

// LocalJwtVerifier - A JWT verifier used only for the current service descriptor
type LocalJwtVerifier struct {
	AlgoSettings LocalJwtVerifierAlgoSettings `json:"algoSettings"`
	// Is it enabled
	Enabled  bool                     `json:"enabled"`
	Source   LocalJwtVerifierSource   `json:"source"`
	Strategy LocalJwtVerifierStrategy `json:"strategy"`
	// Does it fail if JWT not found
	Strict bool `json:"strict"`
	// A string with value 'local'
	Type string `json:"type"`
}
