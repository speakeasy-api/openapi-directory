// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP - Additional configuration for protocol http
type PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP struct {
	// Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
	Domain string `json:"domain"`
	// HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
	Path string `json:"path"`
	// String that must be contained in HTTP response in order to pass the health check
	Response *string `json:"response,omitempty"`
	// List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
	StatusCodes []string `json:"status_codes,omitempty"`
	// Use HTTPS for health check
	TLS *bool `json:"tls,omitempty"`
}

// PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum - Type of the health check
type PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum string

const (
	PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumTCP  PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "tcp"
	PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumHTTP PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "http"
)

func (e *PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "http":
		*e = PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum: %s", s)
	}
}

// PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheck - Service health check
type PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheck struct {
	// Additional configuration for protocol http
	HTTP *PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP `json:"http,omitempty"`
	// Time interval in seconds health checks are performed
	Interval int64 `json:"interval"`
	// Port the health check will be performed on
	Port int64 `json:"port"`
	// Type of the health check
	Protocol PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum `json:"protocol"`
	// Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
	Retries int64 `json:"retries"`
	// Time in seconds after an attempt is considered a timeout
	Timeout int64 `json:"timeout"`
}

// PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHTTP - Configuration option for protocols http and https
type PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHTTP struct {
	// IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"
	Certificates []int64 `json:"certificates,omitempty"`
	// Lifetime of the cookie used for sticky sessions
	CookieLifetime *int64 `json:"cookie_lifetime,omitempty"`
	// Name of the cookie used for sticky sessions
	CookieName *string `json:"cookie_name,omitempty"`
	// Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`
	RedirectHTTP *bool `json:"redirect_http,omitempty"`
	// Use sticky sessions. Only available if protocol is "http" or "https". Default `false`
	StickySessions *bool `json:"sticky_sessions,omitempty"`
}

// PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnum - Protocol of the Load Balancer
type PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnum string

const (
	PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnumTCP   PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnum = "tcp"
	PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnumHTTP  PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnum = "http"
	PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnumHTTPS PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnum = "https"
)

func (e *PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnum: %s", s)
	}
}

type PostLoadBalancersIDActionsUpdateServiceLoadBalancerService struct {
	// Port the Load Balancer will balance to
	DestinationPort int64 `json:"destination_port"`
	// Service health check
	HealthCheck PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHealthCheck `json:"health_check"`
	// Configuration option for protocols http and https
	HTTP *PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceLoadBalancerServiceHTTP `json:"http,omitempty"`
	// Port the Load Balancer listens on
	ListenPort int64 `json:"listen_port"`
	// Protocol of the Load Balancer
	Protocol PostLoadBalancersIDActionsUpdateServiceLoadBalancerServiceProtocolEnum `json:"protocol"`
	// Is Proxyprotocol enabled or not
	Proxyprotocol bool `json:"proxyprotocol"`
}

type PostLoadBalancersIDActionsUpdateServiceRequest struct {
	RequestBody *PostLoadBalancersIDActionsUpdateServiceLoadBalancerService `request:"mediaType=application/json"`
	// ID of the Load Balancer
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostLoadBalancersIDActionsUpdateServiceActionResponseActionError - Error message for the Action if error occurred, otherwise null
type PostLoadBalancersIDActionsUpdateServiceActionResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostLoadBalancersIDActionsUpdateServiceActionResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnum - Status of the Action
type PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnum string

const (
	PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnumSuccess PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnum = "success"
	PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnumRunning PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnum = "running"
	PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnumError   PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnum = "error"
)

func (e *PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnum: %s", s)
	}
}

type PostLoadBalancersIDActionsUpdateServiceActionResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostLoadBalancersIDActionsUpdateServiceActionResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostLoadBalancersIDActionsUpdateServiceActionResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostLoadBalancersIDActionsUpdateServiceActionResponseActionStatusEnum `json:"status"`
}

// PostLoadBalancersIDActionsUpdateServiceActionResponse - The `action` key contains the `update_service` Action
type PostLoadBalancersIDActionsUpdateServiceActionResponse struct {
	Action PostLoadBalancersIDActionsUpdateServiceActionResponseAction `json:"action"`
}

type PostLoadBalancersIDActionsUpdateServiceResponse struct {
	// The `action` key contains the `update_service` Action
	ActionResponse *PostLoadBalancersIDActionsUpdateServiceActionResponse
	ContentType    string
	StatusCode     int
	RawResponse    *http.Response
}
