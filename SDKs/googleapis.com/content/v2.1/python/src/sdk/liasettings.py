"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Liasettings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def content_liasettings_custombatch(self, request: operations.ContentLiasettingsCustombatchRequest, security: operations.ContentLiasettingsCustombatchSecurity) -> operations.ContentLiasettingsCustombatchResponse:
        r"""Retrieves and/or updates the LIA settings of multiple accounts in a single request."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/liasettings/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "liasettings_custom_batch_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentLiasettingsCustombatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentLiasettingsCustombatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LiasettingsCustomBatchResponse])
                res.liasettings_custom_batch_response = out

        return res

    def content_liasettings_get(self, request: operations.ContentLiasettingsGetRequest, security: operations.ContentLiasettingsGetSecurity) -> operations.ContentLiasettingsGetResponse:
        r"""Retrieves the LIA settings of the account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentLiasettingsGetRequest, base_url, '/{merchantId}/liasettings/{accountId}', request)
        
        query_params = utils.get_query_params(operations.ContentLiasettingsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentLiasettingsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LiaSettings])
                res.lia_settings = out

        return res

    def content_liasettings_getaccessiblegmbaccounts(self, request: operations.ContentLiasettingsGetaccessiblegmbaccountsRequest, security: operations.ContentLiasettingsGetaccessiblegmbaccountsSecurity) -> operations.ContentLiasettingsGetaccessiblegmbaccountsResponse:
        r"""Retrieves the list of accessible Business Profiles."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentLiasettingsGetaccessiblegmbaccountsRequest, base_url, '/{merchantId}/liasettings/{accountId}/accessiblegmbaccounts', request)
        
        query_params = utils.get_query_params(operations.ContentLiasettingsGetaccessiblegmbaccountsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentLiasettingsGetaccessiblegmbaccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LiasettingsGetAccessibleGmbAccountsResponse])
                res.liasettings_get_accessible_gmb_accounts_response = out

        return res

    def content_liasettings_list(self, request: operations.ContentLiasettingsListRequest, security: operations.ContentLiasettingsListSecurity) -> operations.ContentLiasettingsListResponse:
        r"""Lists the LIA settings of the sub-accounts in your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentLiasettingsListRequest, base_url, '/{merchantId}/liasettings', request)
        
        query_params = utils.get_query_params(operations.ContentLiasettingsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentLiasettingsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LiasettingsListResponse])
                res.liasettings_list_response = out

        return res

    def content_liasettings_listposdataproviders(self, request: operations.ContentLiasettingsListposdataprovidersRequest, security: operations.ContentLiasettingsListposdataprovidersSecurity) -> operations.ContentLiasettingsListposdataprovidersResponse:
        r"""Retrieves the list of POS data providers that have active settings for the all eiligible countries."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/liasettings/posdataproviders'
        
        query_params = utils.get_query_params(operations.ContentLiasettingsListposdataprovidersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentLiasettingsListposdataprovidersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LiasettingsListPosDataProvidersResponse])
                res.liasettings_list_pos_data_providers_response = out

        return res

    def content_liasettings_requestgmbaccess(self, request: operations.ContentLiasettingsRequestgmbaccessRequest, security: operations.ContentLiasettingsRequestgmbaccessSecurity) -> operations.ContentLiasettingsRequestgmbaccessResponse:
        r"""Requests access to a specified Business Profile."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentLiasettingsRequestgmbaccessRequest, base_url, '/{merchantId}/liasettings/{accountId}/requestgmbaccess', request)
        
        query_params = utils.get_query_params(operations.ContentLiasettingsRequestgmbaccessRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentLiasettingsRequestgmbaccessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LiasettingsRequestGmbAccessResponse])
                res.liasettings_request_gmb_access_response = out

        return res

    def content_liasettings_requestinventoryverification(self, request: operations.ContentLiasettingsRequestinventoryverificationRequest, security: operations.ContentLiasettingsRequestinventoryverificationSecurity) -> operations.ContentLiasettingsRequestinventoryverificationResponse:
        r"""Requests inventory validation for the specified country."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentLiasettingsRequestinventoryverificationRequest, base_url, '/{merchantId}/liasettings/{accountId}/requestinventoryverification/{country}', request)
        
        query_params = utils.get_query_params(operations.ContentLiasettingsRequestinventoryverificationRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentLiasettingsRequestinventoryverificationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LiasettingsRequestInventoryVerificationResponse])
                res.liasettings_request_inventory_verification_response = out

        return res

    def content_liasettings_setinventoryverificationcontact(self, request: operations.ContentLiasettingsSetinventoryverificationcontactRequest, security: operations.ContentLiasettingsSetinventoryverificationcontactSecurity) -> operations.ContentLiasettingsSetinventoryverificationcontactResponse:
        r"""Sets the inventory verification contract for the specified country."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentLiasettingsSetinventoryverificationcontactRequest, base_url, '/{merchantId}/liasettings/{accountId}/setinventoryverificationcontact', request)
        
        query_params = utils.get_query_params(operations.ContentLiasettingsSetinventoryverificationcontactRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentLiasettingsSetinventoryverificationcontactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LiasettingsSetInventoryVerificationContactResponse])
                res.liasettings_set_inventory_verification_contact_response = out

        return res

    def content_liasettings_setposdataprovider(self, request: operations.ContentLiasettingsSetposdataproviderRequest, security: operations.ContentLiasettingsSetposdataproviderSecurity) -> operations.ContentLiasettingsSetposdataproviderResponse:
        r"""Sets the POS data provider for the specified country."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentLiasettingsSetposdataproviderRequest, base_url, '/{merchantId}/liasettings/{accountId}/setposdataprovider', request)
        
        query_params = utils.get_query_params(operations.ContentLiasettingsSetposdataproviderRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentLiasettingsSetposdataproviderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LiasettingsSetPosDataProviderResponse])
                res.liasettings_set_pos_data_provider_response = out

        return res

    def content_liasettings_update(self, request: operations.ContentLiasettingsUpdateRequest, security: operations.ContentLiasettingsUpdateSecurity) -> operations.ContentLiasettingsUpdateResponse:
        r"""Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentLiasettingsUpdateRequest, base_url, '/{merchantId}/liasettings/{accountId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "lia_settings", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentLiasettingsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentLiasettingsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LiaSettings])
                res.lia_settings = out

        return res

    