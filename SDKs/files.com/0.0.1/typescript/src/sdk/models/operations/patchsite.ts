/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class PatchSiteRequestBodyBundleWatermarkAttachmentFile extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "multipart_form, name=bundle_watermark_attachment_file",
  })
  bundleWatermarkAttachmentFile: string;

  @SpeakeasyMetadata({ data: "multipart_form, content=true" })
  content: Uint8Array;
}

export class PatchSiteRequestBodyIcon128File extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "multipart_form, content=true" })
  content: Uint8Array;

  @SpeakeasyMetadata({ data: "multipart_form, name=icon128_file" })
  icon128File: string;
}

export class PatchSiteRequestBodyIcon16File extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "multipart_form, content=true" })
  content: Uint8Array;

  @SpeakeasyMetadata({ data: "multipart_form, name=icon16_file" })
  icon16File: string;
}

export class PatchSiteRequestBodyIcon32File extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "multipart_form, content=true" })
  content: Uint8Array;

  @SpeakeasyMetadata({ data: "multipart_form, name=icon32_file" })
  icon32File: string;
}

export class PatchSiteRequestBodyIcon48File extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "multipart_form, content=true" })
  content: Uint8Array;

  @SpeakeasyMetadata({ data: "multipart_form, name=icon48_file" })
  icon48File: string;
}

export class PatchSiteRequestBodyLogoFile extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "multipart_form, content=true" })
  content: Uint8Array;

  @SpeakeasyMetadata({ data: "multipart_form, name=logo_file" })
  logoFile: string;
}

export class PatchSiteRequestBody extends SpeakeasyBase {
  /**
   * Id of the currently selected custom SFTP Host Key
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=active_sftp_host_key_id" })
  activeSftpHostKeyId?: number;

  /**
   * Are manual Bundle names allowed?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=allow_bundle_names" })
  allowBundleNames?: boolean;

  /**
   * Are users allowed to configure their two factor authentication to be bypassed for FTP/SFTP/WebDAV?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=allowed_2fa_method_bypass_for_ftp_sftp_dav",
  })
  allowed2faMethodBypassForFtpSftpDav?: boolean;

  /**
   * Is SMS two factor authentication allowed?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=allowed_2fa_method_sms" })
  allowed2faMethodSms?: boolean;

  /**
   * Is TOTP two factor authentication allowed?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=allowed_2fa_method_totp" })
  allowed2faMethodTotp?: boolean;

  /**
   * Is U2F two factor authentication allowed?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=allowed_2fa_method_u2f" })
  allowed2faMethodU2f?: boolean;

  /**
   * Is WebAuthn two factor authentication allowed?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=allowed_2fa_method_webauthn",
  })
  allowed2faMethodWebauthn?: boolean;

  /**
   * Is yubikey two factor authentication allowed?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=allowed_2fa_method_yubi" })
  allowed2faMethodYubi?: boolean;

  /**
   * Comma seperated list of allowed Country codes
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=allowed_countries" })
  allowedCountries?: string;

  /**
   * List of allowed IP addresses
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=allowed_ips" })
  allowedIps?: string;

  /**
   * If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ask_about_overwrites" })
  askAboutOverwrites?: boolean;

  /**
   * Do Bundle owners receive activity notifications?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=bundle_activity_notifications",
  })
  bundleActivityNotifications?: string;

  /**
   * Site-wide Bundle expiration in days
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=bundle_expiration" })
  bundleExpiration?: number;

  /**
   * Do Bundles require password protection?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=bundle_password_required" })
  bundlePasswordRequired?: boolean;

  /**
   * Do Bundle owners receive registration notification?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=bundle_registration_notifications",
  })
  bundleRegistrationNotifications?: string;

  /**
   * Do Bundles require recipients for sharing?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=bundle_require_share_recipient",
  })
  bundleRequireShareRecipient?: boolean;

  /**
   * Do Bundle uploaders receive upload confirmation notifications?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=bundle_upload_receipt_notifications",
  })
  bundleUploadReceiptNotifications?: string;

  /**
   * If true, will delete the file stored in bundle_watermark_attachment
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=bundle_watermark_attachment_delete",
  })
  bundleWatermarkAttachmentDelete?: boolean;

  @SpeakeasyMetadata({ data: "multipart_form, file=true" })
  bundleWatermarkAttachmentFile?: PatchSiteRequestBodyBundleWatermarkAttachmentFile;

  /**
   * Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=bundle_watermark_value;json=true",
  })
  bundleWatermarkValue?: Record<string, any>;

  /**
   * Page link and button color
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=color2_left" })
  color2Left?: string;

  /**
   * Top bar link color
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=color2_link" })
  color2Link?: string;

  /**
   * Page link and button color
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=color2_text" })
  color2Text?: string;

  /**
   * Top bar background color
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=color2_top" })
  color2Top?: string;

  /**
   * Top bar text color
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=color2_top_text" })
  color2TopText?: string;

  /**
   * Is this site using a custom namespace for users?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=custom_namespace" })
  customNamespace?: boolean;

  /**
   * Number of days to keep deleted files
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=days_to_retain_backups" })
  daysToRetainBackups?: number;

  /**
   * Site default time zone
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=default_time_zone" })
  defaultTimeZone?: string;

  /**
   * Is the desktop app enabled?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=desktop_app" })
  desktopApp?: boolean;

  /**
   * Is desktop app session IP pinning enabled?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=desktop_app_session_ip_pinning",
  })
  desktopAppSessionIpPinning?: boolean;

  /**
   * Desktop app session lifetime (in hours)
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=desktop_app_session_lifetime",
  })
  desktopAppSessionLifetime?: number;

  /**
   * If set to true, we will begin the process of disabling 2FA on this site.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=disable_2fa_with_delay" })
  disable2faWithDelay?: boolean;

  /**
   * If set, Files.com will not set the CAA records required to generate future SSL certificates for this domain.
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=disable_files_certificate_generation",
  })
  disableFilesCertificateGeneration?: boolean;

  /**
   * Is password reset disabled?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=disable_password_reset" })
  disablePasswordReset?: boolean;

  /**
   * If greater than zero, users will unable to login if they do not show activity within this number of days.
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=disable_users_from_inactivity_period_days",
  })
  disableUsersFromInactivityPeriodDays?: number;

  /**
   * Comma seperated list of disallowed Country codes
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=disallowed_countries" })
  disallowedCountries?: string;

  /**
   * Custom domain
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=domain" })
  domain?: string;

  /**
   * Send HSTS (HTTP Strict Transport Security) header when visitors access the site via a custom domain?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=domain_hsts_header" })
  domainHstsHeader?: boolean;

  /**
   * Letsencrypt chain to use when registering SSL Certificate for domain.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=domain_letsencrypt_chain" })
  domainLetsencryptChain?: string;

  /**
   * Main email for this site
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=email" })
  email?: string;

  /**
   * If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=folder_permissions_groups_only",
  })
  folderPermissionsGroupsOnly?: boolean;

  /**
   * Is FTP enabled?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ftp_enabled" })
  ftpEnabled?: boolean;

  /**
   * If true, will delete the file stored in icon128
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=icon128_delete" })
  icon128Delete?: boolean;

  @SpeakeasyMetadata({ data: "multipart_form, file=true" })
  icon128File?: PatchSiteRequestBodyIcon128File;

  /**
   * If true, will delete the file stored in icon16
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=icon16_delete" })
  icon16Delete?: boolean;

  @SpeakeasyMetadata({ data: "multipart_form, file=true" })
  icon16File?: PatchSiteRequestBodyIcon16File;

  /**
   * If true, will delete the file stored in icon32
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=icon32_delete" })
  icon32Delete?: boolean;

  @SpeakeasyMetadata({ data: "multipart_form, file=true" })
  icon32File?: PatchSiteRequestBodyIcon32File;

  /**
   * If true, will delete the file stored in icon48
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=icon48_delete" })
  icon48Delete?: boolean;

  @SpeakeasyMetadata({ data: "multipart_form, file=true" })
  icon48File?: PatchSiteRequestBodyIcon48File;

  /**
   * Are files protected from modification?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=immutable_files" })
  immutableFiles?: boolean;

  /**
   * Include password in emails to new users?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=include_password_in_welcome_email",
  })
  includePasswordInWelcomeEmail?: boolean;

  /**
   * Site default language
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=language" })
  language?: string;

  /**
   * Base DN for looking up users in LDAP server
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_base_dn" })
  ldapBaseDn?: string;

  /**
   * Domain name that will be appended to usernames
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_domain" })
  ldapDomain?: string;

  /**
   * Main LDAP setting: is LDAP enabled?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_enabled" })
  ldapEnabled?: boolean;

  /**
   * Should we sync groups from LDAP server?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_group_action" })
  ldapGroupAction?: string;

  /**
   * Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_group_exclusion" })
  ldapGroupExclusion?: string;

  /**
   * Comma or newline separated list of group names (with optional wildcards) to include when syncing.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_group_inclusion" })
  ldapGroupInclusion?: string;

  /**
   * LDAP host
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_host" })
  ldapHost?: string;

  /**
   * LDAP backup host
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_host_2" })
  ldapHost2?: string;

  /**
   * LDAP backup host
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_host_3" })
  ldapHost3?: string;

  /**
   * New LDAP password.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_password_change" })
  ldapPasswordChange?: string;

  /**
   * Confirm new LDAP password.
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=ldap_password_change_confirmation",
  })
  ldapPasswordChangeConfirmation?: string;

  /**
   * LDAP port
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_port" })
  ldapPort?: number;

  /**
   * Use secure LDAP?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_secure" })
  ldapSecure?: boolean;

  /**
   * LDAP type
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_type" })
  ldapType?: string;

  /**
   * Should we sync users from LDAP server?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_user_action" })
  ldapUserAction?: string;

  /**
   * Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_user_include_groups" })
  ldapUserIncludeGroups?: string;

  /**
   * Username for signing in to LDAP server.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_username" })
  ldapUsername?: string;

  /**
   * LDAP username field
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ldap_username_field" })
  ldapUsernameField?: string;

  /**
   * Login help text
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=login_help_text" })
  loginHelpText?: string;

  /**
   * If true, will delete the file stored in logo
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=logo_delete" })
  logoDelete?: boolean;

  @SpeakeasyMetadata({ data: "multipart_form, file=true" })
  logoFile?: PatchSiteRequestBodyLogoFile;

  /**
   * Number of prior passwords to disallow
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=max_prior_passwords" })
  maxPriorPasswords?: number;

  /**
   * Is the mobile app enabled?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=mobile_app" })
  mobileApp?: boolean;

  /**
   * Is mobile app session IP pinning enabled?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=mobile_app_session_ip_pinning",
  })
  mobileAppSessionIpPinning?: boolean;

  /**
   * Mobile app session lifetime (in hours)
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=mobile_app_session_lifetime",
  })
  mobileAppSessionLifetime?: number;

  /**
   * A message to show users when they connect via FTP or SFTP.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=motd_text" })
  motdText?: string;

  /**
   * Show message to users connecting via FTP
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=motd_use_for_ftp" })
  motdUseForFtp?: boolean;

  /**
   * Show message to users connecting via SFTP
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=motd_use_for_sftp" })
  motdUseForSftp?: boolean;

  /**
   * Site name
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=name" })
  name?: string;

  /**
   * If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=non_sso_groups_allowed" })
  nonSsoGroupsAllowed?: boolean;

  /**
   * If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=non_sso_users_allowed" })
  nonSsoUsersAllowed?: boolean;

  /**
   * Allow users to use Office for the web?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=office_integration_available",
  })
  officeIntegrationAvailable?: boolean;

  /**
   * Office integration application used to edit and view the MS Office documents
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=office_integration_type" })
  officeIntegrationType?: string;

  /**
   * Use servers in the USA only?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=opt_out_global" })
  optOutGlobal?: boolean;

  /**
   * Notify site email of overages?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=overage_notify" })
  overageNotify?: boolean;

  /**
   * Shortest password length for users
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=password_min_length" })
  passwordMinLength?: number;

  /**
   * Require a letter in passwords?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=password_require_letter" })
  passwordRequireLetter?: boolean;

  /**
   * Require lower and upper case letters in passwords?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=password_require_mixed" })
  passwordRequireMixed?: boolean;

  /**
   * Require a number in passwords?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=password_require_number" })
  passwordRequireNumber?: boolean;

  /**
   * Require special characters in password?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=password_require_special" })
  passwordRequireSpecial?: boolean;

  /**
   * Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=password_require_unbreached",
  })
  passwordRequireUnbreached?: boolean;

  /**
   * Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=password_requirements_apply_to_bundles",
  })
  passwordRequirementsApplyToBundles?: boolean;

  /**
   * Number of days password is valid
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=password_validity_days" })
  passwordValidityDays?: number;

  /**
   * If true, we will ensure that all internal communications with any remote server are made through the primary region of the site. This setting overrides individual remote server settings.
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=pin_all_remote_servers_to_site_region",
  })
  pinAllRemoteServersToSiteRegion?: boolean;

  /**
   * Reply-to email for this site
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=reply_to_email" })
  replyToEmail?: string;

  /**
   * Require two-factor authentication for all users?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=require_2fa" })
  require2fa?: boolean;

  /**
   * What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=require_2fa_user_type" })
  require2faUserType?: string;

  /**
   * Session expiry in hours
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=session_expiry" })
  sessionExpiry?: number;

  /**
   * Session expiry in minutes
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=session_expiry_minutes" })
  sessionExpiryMinutes?: number;

  /**
   * Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=session_pinned_by_ip" })
  sessionPinnedByIp?: boolean;

  /**
   * Is SFTP enabled?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=sftp_enabled" })
  sftpEnabled?: boolean;

  /**
   * Sftp Host Key Type
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=sftp_host_key_type" })
  sftpHostKeyType?: string;

  /**
   * Are Insecure Ciphers allowed for SFTP?  Note:  Settting TLS Disabled -> True will always allow insecure ciphers for SFTP as well.  Enabling this is insecure.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=sftp_insecure_ciphers" })
  sftpInsecureCiphers?: boolean;

  /**
   * Use user FTP roots also for SFTP?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=sftp_user_root_enabled" })
  sftpUserRootEnabled?: boolean;

  /**
   * Allow bundle creation
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=sharing_enabled" })
  sharingEnabled?: boolean;

  /**
   * Show request access link for users without access?  Currently unused.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=show_request_access_link" })
  showRequestAccessLink?: boolean;

  /**
   * Custom site footer text
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=site_footer" })
  siteFooter?: string;

  /**
   * Custom site header text
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=site_header" })
  siteHeader?: string;

  /**
   * SMTP server hostname or IP
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=smtp_address" })
  smtpAddress?: string;

  /**
   * SMTP server authentication type
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=smtp_authentication" })
  smtpAuthentication?: string;

  /**
   * From address to use when mailing through custom SMTP
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=smtp_from" })
  smtpFrom?: string;

  /**
   * Password for SMTP server.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=smtp_password" })
  smtpPassword?: string;

  /**
   * SMTP server port
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=smtp_port" })
  smtpPort?: number;

  /**
   * SMTP server username
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=smtp_username" })
  smtpUsername?: string;

  /**
   * Is SSL required?  Disabling this is insecure.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=ssl_required" })
  sslRequired?: boolean;

  /**
   * Site subdomain
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=subdomain" })
  subdomain?: string;

  /**
   * Are Insecure TLS and SFTP Ciphers allowed?  Enabling this is insecure.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=tls_disabled" })
  tlsDisabled?: boolean;

  /**
   * Do incoming emails in the Inboxes require checking for SPF/DKIM/DMARC?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=uploads_via_email_authentication",
  })
  uploadsViaEmailAuthentication?: boolean;

  /**
   * Allow uploaders to set `provided_modified_at` for uploaded files?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=use_provided_modified_at" })
  useProvidedModifiedAt?: boolean;

  /**
   * Will users be locked out after incorrect login attempts?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=user_lockout" })
  userLockout?: boolean;

  /**
   * How many hours to lock user out for failed password?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=user_lockout_lock_period" })
  userLockoutLockPeriod?: number;

  /**
   * Number of login tries within `user_lockout_within` hours before users are locked out
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=user_lockout_tries" })
  userLockoutTries?: number;

  /**
   * Number of hours for user lockout window
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=user_lockout_within" })
  userLockoutWithin?: number;

  /**
   * Enable User Requests feature
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=user_requests_enabled" })
  userRequestsEnabled?: boolean;

  /**
   * Send email to site admins when a user request is received?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=user_requests_notify_admins",
  })
  userRequestsNotifyAdmins?: boolean;

  /**
   * Custom text send in user welcome email
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=welcome_custom_text" })
  welcomeCustomText?: string;

  /**
   * Include this email in welcome emails if enabled
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=welcome_email_cc" })
  welcomeEmailCc?: string;

  /**
   * Will the welcome email be sent to new users?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=welcome_email_enabled" })
  welcomeEmailEnabled?: boolean;

  /**
   * Include this email subject in welcome emails if enabled
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=welcome_email_subject" })
  welcomeEmailSubject?: string;

  /**
   * Does the welcome screen appear?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=welcome_screen" })
  welcomeScreen?: string;

  /**
   * Does FTP user Windows emulation mode?
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=windows_mode_ftp" })
  windowsModeFtp?: boolean;
}

export class PatchSiteResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The Site object.
   */
  @SpeakeasyMetadata()
  siteEntity?: shared.SiteEntity;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
