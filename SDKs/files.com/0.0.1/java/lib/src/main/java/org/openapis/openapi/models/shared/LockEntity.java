/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LockEntity - List Locks by path
 */
public class LockEntity {
    /**
     * Can lock be modified by users other than its creator?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_access_by_any_user")
    public Boolean allowAccessByAnyUser;

    public LockEntity withAllowAccessByAnyUser(Boolean allowAccessByAnyUser) {
        this.allowAccessByAnyUser = allowAccessByAnyUser;
        return this;
    }
    
    /**
     * DEPRECATED: Lock depth
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("depth")
    public String depth;

    public LockEntity withDepth(String depth) {
        this.depth = depth;
        return this;
    }
    
    /**
     * Is lock exclusive?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclusive")
    public Boolean exclusive;

    public LockEntity withExclusive(Boolean exclusive) {
        this.exclusive = exclusive;
        return this;
    }
    
    /**
     * Owner of the lock.  This can be any arbitrary string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    public String owner;

    public LockEntity withOwner(String owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * Path
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public LockEntity withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Does lock apply to subfolders?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recursive")
    public Boolean recursive;

    public LockEntity withRecursive(Boolean recursive) {
        this.recursive = recursive;
        return this;
    }
    
    /**
     * DEPRECATED: Lock scope
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public String scope;

    public LockEntity withScope(String scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * Lock timeout in seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout")
    public Integer timeout;

    public LockEntity withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }
    
    /**
     * Lock token.  Use to release lock.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    public String token;

    public LockEntity withToken(String token) {
        this.token = token;
        return this;
    }
    
    /**
     * DEPRECATED: Lock type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public LockEntity withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Lock creator user ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public Integer userId;

    public LockEntity withUserId(Integer userId) {
        this.userId = userId;
        return this;
    }
    
    /**
     * Lock creator username
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public LockEntity withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public LockEntity(){}
}
