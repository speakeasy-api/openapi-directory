// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PafAddressCountryEnum string

const (
	PafAddressCountryEnumEngland         PafAddressCountryEnum = "England"
	PafAddressCountryEnumScotland        PafAddressCountryEnum = "Scotland"
	PafAddressCountryEnumWales           PafAddressCountryEnum = "Wales"
	PafAddressCountryEnumNorthernIreland PafAddressCountryEnum = "Northern Ireland"
	PafAddressCountryEnumJersey          PafAddressCountryEnum = "Jersey"
	PafAddressCountryEnumGuernsey        PafAddressCountryEnum = "Guernsey"
	PafAddressCountryEnumIsleOfMan       PafAddressCountryEnum = "Isle of Man"
)

func (e *PafAddressCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "England":
		fallthrough
	case "Scotland":
		fallthrough
	case "Wales":
		fallthrough
	case "Northern Ireland":
		fallthrough
	case "Jersey":
		fallthrough
	case "Guernsey":
		fallthrough
	case "Isle of Man":
		*e = PafAddressCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PafAddressCountryEnum: %s", s)
	}
}

type PafAddressCountryIsoEnum string

const (
	PafAddressCountryIsoEnumGbr PafAddressCountryIsoEnum = "GBR"
	PafAddressCountryIsoEnumImn PafAddressCountryIsoEnum = "IMN"
	PafAddressCountryIsoEnumJey PafAddressCountryIsoEnum = "JEY"
	PafAddressCountryIsoEnumGgy PafAddressCountryIsoEnum = "GGY"
)

func (e *PafAddressCountryIsoEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GBR":
		fallthrough
	case "IMN":
		fallthrough
	case "JEY":
		fallthrough
	case "GGY":
		*e = PafAddressCountryIsoEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PafAddressCountryIsoEnum: %s", s)
	}
}

type PafAddressCountryIso2Enum string

const (
	PafAddressCountryIso2EnumGb PafAddressCountryIso2Enum = "GB"
	PafAddressCountryIso2EnumIm PafAddressCountryIso2Enum = "IM"
	PafAddressCountryIso2EnumJe PafAddressCountryIso2Enum = "JE"
	PafAddressCountryIso2EnumGg PafAddressCountryIso2Enum = "GG"
)

func (e *PafAddressCountryIso2Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GB":
		fallthrough
	case "IM":
		fallthrough
	case "JE":
		fallthrough
	case "GG":
		*e = PafAddressCountryIso2Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PafAddressCountryIso2Enum: %s", s)
	}
}

type PafAddressDatasetEnum string

const (
	PafAddressDatasetEnumPaf PafAddressDatasetEnum = "paf"
)

func (e *PafAddressDatasetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "paf":
		*e = PafAddressDatasetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PafAddressDatasetEnum: %s", s)
	}
}

type PafAddressLanguageEnum string

const (
	PafAddressLanguageEnumEn PafAddressLanguageEnum = "en"
)

func (e *PafAddressLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "en":
		*e = PafAddressLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PafAddressLanguageEnum: %s", s)
	}
}

// PafAddress - Standard UK Address. Also known as a Postcode Address File (PAF) address is defined by Royal Mail and updated on a daily cadence.
//
// A PAF Address represents a deliverable endpoint.
type PafAddress struct {
	// The current administrative county to which the postcode has been assigned.
	//
	// A Unitary Authority name, where one is present. If there is no Unitary Authority, the County name is used. This information is not static, because County boundaries may change due to administrative changes. Data
	//
	// source: ONS
	AdministrativeCounty string `json:"administrative_county"`
	// Name of residential or commercial premise.
	//
	// Examples:
	//   - The Manor
	//   - 1-2
	//   - A
	//   - 12A
	//   - K
	//   - Victoria House
	BuildingName string `json:"building_name"`
	// Number to identify premise on a thoroughfare or dependant thoroughfare.
	BuildingNumber string                    `json:"building_number"`
	Country        PafAddressCountryEnum     `json:"country"`
	CountryIso     PafAddressCountryIsoEnum  `json:"country_iso"`
	CountryIso2    PafAddressCountryIso2Enum `json:"country_iso_2"`
	// Since postal, administrative or traditional counties may not apply to some addresses, the county field is designed to return whatever county data is available. Normally, the postal county is returned. If this is not present, the county field will fall back to the administrative county. If the administrative county is also not present, the county field will fall back to the traditional county. May be empty in cases where no administrative, postal or traditional county present.
	County string `json:"county"`
	// Short code representing the county or province. May be empty (`""`)
	CountyCode string                `json:"county_code"`
	Dataset    PafAddressDatasetEnum `json:"dataset"`
	// A unique Royal Mail 2-character code (the first numeric & the second alphabetical), which, when added to the Postcode, enables each live Delivery Point to be uniquely identified. Once the Delivery Point is deleted from PAF the DPS may be reused (although they arenâ€™t reused until all remaining Delivery Points in the range have been allocated). The DPS for a Large User is always '1A' as each Large User has its own Postcode.
	DeliveryPointSuffix string `json:"delivery_point_suffix"`
	// Used to supplment Organisation Name to identify a deparment within the organisation.
	DepartmentName string `json:"department_name"`
	// When the same thoroughfare name reoccurs in a Post town, it may not be possible to make it dependant on a dependant thoroughfare. In this case the thoroughfare is dependant on a locality. For example if we want to find 1 Back Lane in Huddersfield we see that there are three.
	DependantLocality string `json:"dependant_locality"`
	// Used to supplement thoroughfare. When a thoroughfare name is used twice in the same Post Town, the dependant thoroughfare is added to uniquely indentify a delivery point.
	DependantThoroughfare string `json:"dependant_thoroughfare"`
	// The current district/unitary authority to which the postcode has been assigned.
	District string `json:"district"`
	// Used to supplement Dependant Locality. A Double Dependant Locality supplied along with a Dependant Locality if the Dependant Locality exists twice in the same locality.
	DoubleDependantLocality string `json:"double_dependant_locality"`
	// Eastings reference using the [Ordnance Survey National Grid reference system](https://en.wikipedia.org/wiki/Ordnance_Survey_National_Grid).
	//
	// Northern Ireland Eastings uses the [Irish Grid Reference System](https://en.wikipedia.org/wiki/Irish_grid_reference_system).
	//
	// Metres from origin. E.g. `550458`
	//
	// Returns an empty string if no location data is available. Otherwise a number is returned.
	Eastings Eastings `json:"eastings"`
	// Global unique internally generated identifier for an address
	ID       string                 `json:"id"`
	Language PafAddressLanguageEnum `json:"language"`
	// The latitude of the postcode (WGS84/ETRS89).
	//
	// Can be a positive or negative decimal. E.g. `51.5083983`.
	//
	// Returns an empty string if no location data is available.
	Latitude Latitude `json:"latitude"`
	// First Address Line. Often contains premise and thoroughfare information. In the case of a commercial premise, the first line is always the full name of the registered organisation. Never empty.
	Line1 string `json:"line_1"`
	// Second Address Line. Often contains thoroughfare and locality information. May be empty
	Line2 string `json:"line_2"`
	// Third address line. May be empty.
	Line3 string `json:"line_3"`
	// The longitude of the postcode (WGS84/ETRS89).
	//
	// Can be a positive or negative decimal. E.g. -0.1283983
	//
	// Returns an empty string if no location data is available.
	Longitude Longitude `json:"longitude"`
	// Northings reference using the [Ordnance Survey National Grid reference system](https://en.wikipedia.org/wiki/Ordnance_Survey_National_Grid)
	//
	// Northern Ireland Northings uses the [Irish Grid Reference System](https://en.wikipedia.org/wiki/Irish_grid_reference_system)
	//
	// Metres from origin. E.g. `180458`
	//
	// Returns an empty string if no location data is available. Otherwise a number is returned
	Northings Northings `json:"northings"`
	// Used to supplment Organisation Name to identify a deparment within the organisation
	OrganisationName string `json:"organisation_name"`
	// When the PO Box Number field is populated it will contain PO BOX nnnnnn where n represents the PO Box number. Note that the PO Box details can occasionally consist of a combination of numbers and letters. PO Box Numbers are only allocated to Large Users.
	PoBox string `json:"po_box"`
	// A Post Town is mandatory for delivery of mail to a Delivery Point. This is not necessarily the nearest town geographically, but a routing instruction to the Royal Mail delivery office sorting mail for that Delivery Point. A Post Town will always be present in every address, and for some Localities the Post Town will be the only locality element present.
	PostTown string `json:"post_town"`
	// Postal counties were used for the distribution of mail before the Postcode system was introduced in the 1970s. The Former Postal County was the Administrative County at the time. This data rarely changes. May be empty.
	PostalCounty string `json:"postal_county"`
	// Correctly formatted postcode. Capitalised and spaced.
	Postcode string `json:"postcode"`
	// The second part of a postcode is known as the inward code. e.g. The inward code of ID1 1QD is 1QD.
	//
	// The number identifies the sector in the postal district. The number is followed by 2 letters. The letters then define one or more properties in that sector.
	PostcodeInward string `json:"postcode_inward"`
	// The first part of a postcode is known as the outward code. e.g. The outward code of ID1 1QD is ID1. Enables mail to be sorted to the correct local area for delivery. This part of the code contains the area and the district to which the mail is to be delivered, e.g. â€˜PO1â€™, â€˜SW1Aâ€™ or â€˜B23â€™.
	PostcodeOutward string `json:"postcode_outward"`
	// This indicates the type of user. It can only take the values 'S' or 'L' indicating small or large respectively. Large User Postcodes. These are assigned to one single address either due to the large volume of mail received at that address, or because a PO Box or Selectapost service has been set up. Small User Postcodes. These identify a group of Delivery Points.
	//
	// On average there are 15 Delivery Points per Postcode. However this can vary between 1 and, in some cases, 100. There will never be more than 100 Delivery Points on a Postcode.
	PostcodeType PafPostcodeTypeEnum `json:"postcode_type"`
	// A pre-computed string which sensibly combines building_number, building_name and sub_building_name. building_number, building_name and sub_building_name represent raw data from Royal Mail's and can be difficult to parse if you are unaware of how the Postcode Address File premise fields work together. For this reason, we also provide a pre-computed premise field which intelligently gathers these points into a single, simple premise string. This field is ideal if you want to pull premise information and thoroughfare information separately instead of using our address lines data.
	Premise string `json:"premise"`
	// Small User Organisation Indicator can have the values 'Y' or space. A value of 'Y' indicates that a Small User Organisation is present at this address.
	SuOrganisationIndicator string `json:"su_organisation_indicator"`
	// When a premise is split into individual units such as flats, apartments or business units. Cannot be present without either building_name or building_number. E.g. Flat 1, A, 10B
	SubBuildingName string `json:"sub_building_name"`
	// Also known as the street or road name. In general each Thoroughfare Name will have a separate Postcode. Longer Thoroughfares with high number ranges often have multiple Postcodes covering the entire length of the road, with breaks at suitable points e.g. junctions or natural breaks in the road.
	Thoroughfare string `json:"thoroughfare"`
	// Traditional counties are provided by the Association of British Counties. It is historical data, and can date from the 1800s. May be empty.
	TraditionalCounty string `json:"traditional_county"`
	// UDPRN stands for â€˜Unique Delivery Point Reference Numberâ€™. Royal Mail assigns a unique UDPRN code for each premise on PAF. Simple, unique reference number for each Delivery Point. Unlikely to be reused when an address expires.
	//
	// Up to 8-digit numeric code.
	//
	// A new UDPRN is automatically assigned to each new Delivery Point added to PAF.
	Udprn int `json:"udprn"`
	// A small minority of individual premises (as identified by a UDPRN) may have multiple occupants behind the same letterbox. These are known as Multiple Residence occupants and can be queried via the Multiple Residence dataset. Simple, unique reference number for each Multiple Residence occupant.
	//
	// Note: this will be an empty string `""` when not used.
	Umprn PafUmprn `json:"umprn"`
	// UPRN stands for Unique Property Reference Number and is maintained by the Ordnance Survey (OS). Local governments in the UK have allocated a unique number for each land or property.
	//
	// Up to 12 digits in length.
	//
	// Multiple Residence premises currently share the same UPRN as the parent premise.
	//
	// May not be available for a small number of Great Britain addresses due to longer update cycles for Ordnance Survey's AddressBase datasets. Returns empty string "" in these instances.
	//
	// Although UPRN takes an integer format, we encode and transmit this data as strings. As a 12 digit number, the UPRN can exceed the maximum safe integer `Number.MAX_SAFE_INTEGER` in most browsers causing this datapoint to be corrupted.
	//
	// Take special care when storing UPRN. As a 12 digit identifier, you will need 64 bits to encode every possible UPRN value. This means applications like Excel will corrupt cells containing UPRN values.
	Uprn string `json:"uprn"`
	// The current administrative/electoral area to which the postcode has been assigned. May be empty for a small number of addresses.
	Ward string `json:"ward"`
}
