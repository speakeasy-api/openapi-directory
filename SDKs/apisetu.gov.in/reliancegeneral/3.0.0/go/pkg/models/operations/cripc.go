// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CripcSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type CripcRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Gender - M for male, F for female and O for other
	Gender string `json:"GENDER"`
	// PolicyNo
	PolicyNo string `json:"PolicyNo"`
	// PolicyType
	PolicyType string `json:"PolicyType"`
}

// CripcRequestBodyFormatEnum - The format of the certificate in response.
type CripcRequestBodyFormatEnum string

const (
	CripcRequestBodyFormatEnumPdf CripcRequestBodyFormatEnum = "pdf"
)

func (e *CripcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = CripcRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CripcRequestBodyFormatEnum: %s", s)
	}
}

// CripcRequestBody - Request format
type CripcRequestBody struct {
	CertificateParameters *CripcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CripcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Cripc504ApplicationJSONErrorEnum string

const (
	Cripc504ApplicationJSONErrorEnumGatewayTimeout Cripc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Cripc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Cripc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Cripc504ApplicationJSONErrorDescriptionEnum string

const (
	Cripc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Cripc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Cripc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Cripc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cripc504ApplicationJSON - Gateway timeout
type Cripc504ApplicationJSON struct {
	Error            *Cripc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cripc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cripc503ApplicationJSONErrorEnum string

const (
	Cripc503ApplicationJSONErrorEnumServiceUnavailable Cripc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Cripc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Cripc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Cripc503ApplicationJSONErrorDescriptionEnum string

const (
	Cripc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Cripc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Cripc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Cripc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cripc503ApplicationJSON - Service unavailable
type Cripc503ApplicationJSON struct {
	Error            *Cripc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cripc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cripc502ApplicationJSONErrorEnum string

const (
	Cripc502ApplicationJSONErrorEnumBadGatewy Cripc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Cripc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Cripc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Cripc502ApplicationJSONErrorDescriptionEnum string

const (
	Cripc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Cripc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Cripc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Cripc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cripc502ApplicationJSON - Bad gateway
type Cripc502ApplicationJSON struct {
	Error            *Cripc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cripc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cripc500ApplicationJSONErrorEnum string

const (
	Cripc500ApplicationJSONErrorEnumInternalServerError Cripc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Cripc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Cripc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Cripc500ApplicationJSONErrorDescriptionEnum string

const (
	Cripc500ApplicationJSONErrorDescriptionEnumInternalServerError Cripc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Cripc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Cripc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cripc500ApplicationJSON - Internal server error
type Cripc500ApplicationJSON struct {
	Error            *Cripc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cripc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cripc404ApplicationJSONErrorEnum string

const (
	Cripc404ApplicationJSONErrorEnumRecordNotFound Cripc404ApplicationJSONErrorEnum = "record_not_found"
	Cripc404ApplicationJSONErrorEnumURLNotFound    Cripc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Cripc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Cripc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Cripc404ApplicationJSONErrorDescriptionEnum string

const (
	Cripc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Cripc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Cripc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Cripc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Cripc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Cripc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cripc404ApplicationJSON - No record found
type Cripc404ApplicationJSON struct {
	Error            *Cripc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cripc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cripc401ApplicationJSONErrorEnum string

const (
	Cripc401ApplicationJSONErrorEnumInvalidAuthentication Cripc401ApplicationJSONErrorEnum = "invalid_authentication"
	Cripc401ApplicationJSONErrorEnumInvalidAuthorization  Cripc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Cripc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Cripc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Cripc401ApplicationJSONErrorDescriptionEnum string

const (
	Cripc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Cripc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Cripc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Cripc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Cripc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Cripc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cripc401ApplicationJSON - Unauthorized access
type Cripc401ApplicationJSON struct {
	Error            *Cripc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cripc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cripc400ApplicationJSONErrorEnum string

const (
	Cripc400ApplicationJSONErrorEnumMissingParameter Cripc400ApplicationJSONErrorEnum = "missing_parameter"
	Cripc400ApplicationJSONErrorEnumInvalidParameter Cripc400ApplicationJSONErrorEnum = "invalid_parameter"
	Cripc400ApplicationJSONErrorEnumInvalidFormat    Cripc400ApplicationJSONErrorEnum = "invalid_format"
	Cripc400ApplicationJSONErrorEnumInvalidTxnid     Cripc400ApplicationJSONErrorEnum = "invalid_txnid"
	Cripc400ApplicationJSONErrorEnumInvalidConsentid Cripc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Cripc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Cripc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Cripc400ApplicationJSONErrorDescriptionEnum string

const (
	Cripc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Cripc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Cripc400ApplicationJSONErrorDescriptionEnumBadRequest                              Cripc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Cripc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Cripc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Cripc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Cripc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Cripc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Cripc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Cripc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Cripc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cripc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cripc400ApplicationJSON - Bad request
type Cripc400ApplicationJSON struct {
	Error            *Cripc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cripc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CripcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Cripc400ApplicationJSONObject *Cripc400ApplicationJSON
	// Unauthorized access
	Cripc401ApplicationJSONObject *Cripc401ApplicationJSON
	// No record found
	Cripc404ApplicationJSONObject *Cripc404ApplicationJSON
	// Internal server error
	Cripc500ApplicationJSONObject *Cripc500ApplicationJSON
	// Bad gateway
	Cripc502ApplicationJSONObject *Cripc502ApplicationJSON
	// Service unavailable
	Cripc503ApplicationJSONObject *Cripc503ApplicationJSON
	// Gateway timeout
	Cripc504ApplicationJSONObject *Cripc504ApplicationJSON
}
