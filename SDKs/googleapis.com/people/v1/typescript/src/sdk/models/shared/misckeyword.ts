/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FieldMetadata, FieldMetadataInput } from "./fieldmetadata";
import { Expose, Type } from "class-transformer";

/**
 * The miscellaneous keyword type.
 */
export enum MiscKeywordTypeEnum {
  TypeUnspecified = "TYPE_UNSPECIFIED",
  OutlookBillingInformation = "OUTLOOK_BILLING_INFORMATION",
  OutlookDirectoryServer = "OUTLOOK_DIRECTORY_SERVER",
  OutlookKeyword = "OUTLOOK_KEYWORD",
  OutlookMileage = "OUTLOOK_MILEAGE",
  OutlookPriority = "OUTLOOK_PRIORITY",
  OutlookSensitivity = "OUTLOOK_SENSITIVITY",
  OutlookSubject = "OUTLOOK_SUBJECT",
  OutlookUser = "OUTLOOK_USER",
  Home = "HOME",
  Work = "WORK",
  Other = "OTHER",
}

/**
 * A person's miscellaneous keyword.
 */
export class MiscKeyword extends SpeakeasyBase {
  /**
   * Output only. The type of the miscellaneous keyword translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formattedType" })
  formattedType?: string;

  /**
   * Metadata about a field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => FieldMetadata)
  metadata?: FieldMetadata;

  /**
   * The miscellaneous keyword type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: MiscKeywordTypeEnum;

  /**
   * The value of the miscellaneous keyword.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * A person's miscellaneous keyword.
 */
export class MiscKeywordInput extends SpeakeasyBase {
  /**
   * Metadata about a field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => FieldMetadataInput)
  metadata?: FieldMetadataInput;

  /**
   * The miscellaneous keyword type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: MiscKeywordTypeEnum;

  /**
   * The value of the miscellaneous keyword.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}
