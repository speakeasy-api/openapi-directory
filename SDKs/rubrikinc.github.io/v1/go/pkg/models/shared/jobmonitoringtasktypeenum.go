// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// JobMonitoringTaskTypeEnum - Task type.
type JobMonitoringTaskTypeEnum string

const (
	JobMonitoringTaskTypeEnumArchival       JobMonitoringTaskTypeEnum = "Archival"
	JobMonitoringTaskTypeEnumBackup         JobMonitoringTaskTypeEnum = "Backup"
	JobMonitoringTaskTypeEnumConversion     JobMonitoringTaskTypeEnum = "Conversion"
	JobMonitoringTaskTypeEnumRecovery       JobMonitoringTaskTypeEnum = "Recovery"
	JobMonitoringTaskTypeEnumReplication    JobMonitoringTaskTypeEnum = "Replication"
	JobMonitoringTaskTypeEnumIndex          JobMonitoringTaskTypeEnum = "Index"
	JobMonitoringTaskTypeEnumLogBackup      JobMonitoringTaskTypeEnum = "LogBackup"
	JobMonitoringTaskTypeEnumLogArchival    JobMonitoringTaskTypeEnum = "LogArchival"
	JobMonitoringTaskTypeEnumLogReplication JobMonitoringTaskTypeEnum = "LogReplication"
	JobMonitoringTaskTypeEnumLogShipping    JobMonitoringTaskTypeEnum = "LogShipping"
)

func (e JobMonitoringTaskTypeEnum) ToPointer() *JobMonitoringTaskTypeEnum {
	return &e
}

func (e *JobMonitoringTaskTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Archival":
		fallthrough
	case "Backup":
		fallthrough
	case "Conversion":
		fallthrough
	case "Recovery":
		fallthrough
	case "Replication":
		fallthrough
	case "Index":
		fallthrough
	case "LogBackup":
		fallthrough
	case "LogArchival":
		fallthrough
	case "LogReplication":
		fallthrough
	case "LogShipping":
		*e = JobMonitoringTaskTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobMonitoringTaskTypeEnum: %v", v)
	}
}
