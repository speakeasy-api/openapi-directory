/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Indicates whether attachment requests are automatically accepted.
 */
export enum DescribeTransitGatewaysResultTransitGatewaysOptionsAutoAcceptSharedAttachmentsEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether resource attachments are automatically associated with the default association route table.
 */
export enum DescribeTransitGatewaysResultTransitGatewaysOptionsDefaultRouteTableAssociationEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether resource attachments automatically propagate routes to the default propagation route table.
 */
export enum DescribeTransitGatewaysResultTransitGatewaysOptionsDefaultRouteTablePropagationEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether DNS support is enabled.
 */
export enum DescribeTransitGatewaysResultTransitGatewaysOptionsDnsSupportEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether multicast is enabled on the transit gateway
 */
export enum DescribeTransitGatewaysResultTransitGatewaysOptionsMulticastSupportEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * Indicates whether Equal Cost Multipath Protocol support is enabled.
 */
export enum DescribeTransitGatewaysResultTransitGatewaysOptionsVpnEcmpSupportEnum {
  Enable = "enable",
  Disable = "disable",
}

/**
 * The transit gateway options.
 */
export class DescribeTransitGatewaysResultTransitGatewaysOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  amazonSideAsn?: number;

  @SpeakeasyMetadata()
  associationDefaultRouteTableId?: string;

  @SpeakeasyMetadata()
  autoAcceptSharedAttachments?: DescribeTransitGatewaysResultTransitGatewaysOptionsAutoAcceptSharedAttachmentsEnum;

  @SpeakeasyMetadata()
  defaultRouteTableAssociation?: DescribeTransitGatewaysResultTransitGatewaysOptionsDefaultRouteTableAssociationEnum;

  @SpeakeasyMetadata()
  defaultRouteTablePropagation?: DescribeTransitGatewaysResultTransitGatewaysOptionsDefaultRouteTablePropagationEnum;

  @SpeakeasyMetadata()
  dnsSupport?: DescribeTransitGatewaysResultTransitGatewaysOptionsDnsSupportEnum;

  @SpeakeasyMetadata()
  multicastSupport?: DescribeTransitGatewaysResultTransitGatewaysOptionsMulticastSupportEnum;

  @SpeakeasyMetadata()
  propagationDefaultRouteTableId?: string;

  @SpeakeasyMetadata()
  transitGatewayCidrBlocks?: string[];

  @SpeakeasyMetadata()
  vpnEcmpSupport?: DescribeTransitGatewaysResultTransitGatewaysOptionsVpnEcmpSupportEnum;
}

/**
 * The state of the transit gateway.
 */
export enum DescribeTransitGatewaysResultTransitGatewaysStateEnum {
  Pending = "pending",
  Available = "available",
  Modifying = "modifying",
  Deleting = "deleting",
  Deleted = "deleted",
}

/**
 * Describes a tag.
 */
export class DescribeTransitGatewaysResultTransitGatewaysTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Describes a transit gateway.
 */
export class DescribeTransitGatewaysResultTransitGateways extends SpeakeasyBase {
  @SpeakeasyMetadata()
  creationTime?: Date;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  options?: DescribeTransitGatewaysResultTransitGatewaysOptions;

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  state?: DescribeTransitGatewaysResultTransitGatewaysStateEnum;

  @SpeakeasyMetadata({
    elemType: DescribeTransitGatewaysResultTransitGatewaysTags,
  })
  tags?: DescribeTransitGatewaysResultTransitGatewaysTags[];

  @SpeakeasyMetadata()
  transitGatewayArn?: string;

  @SpeakeasyMetadata()
  transitGatewayId?: string;
}

/**
 * Success
 */
export class DescribeTransitGatewaysResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  nextToken?: string;

  @SpeakeasyMetadata({ elemType: DescribeTransitGatewaysResultTransitGateways })
  transitGateways?: DescribeTransitGatewaysResultTransitGateways[];
}
