"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Regions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def content_regions_create(self, request: operations.ContentRegionsCreateRequest, security: operations.ContentRegionsCreateSecurity) -> operations.ContentRegionsCreateResponse:
        r"""Creates a region definition in your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentRegionsCreateRequest, base_url, '/{merchantId}/regions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "region_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentRegionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentRegionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Region])
                res.region = out

        return res

    def content_regions_delete(self, request: operations.ContentRegionsDeleteRequest, security: operations.ContentRegionsDeleteSecurity) -> operations.ContentRegionsDeleteResponse:
        r"""Deletes a region definition from your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentRegionsDeleteRequest, base_url, '/{merchantId}/regions/{regionId}', request)
        
        query_params = utils.get_query_params(operations.ContentRegionsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentRegionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def content_regions_get(self, request: operations.ContentRegionsGetRequest, security: operations.ContentRegionsGetSecurity) -> operations.ContentRegionsGetResponse:
        r"""Retrieves a region defined in your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentRegionsGetRequest, base_url, '/{merchantId}/regions/{regionId}', request)
        
        query_params = utils.get_query_params(operations.ContentRegionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentRegionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Region])
                res.region = out

        return res

    def content_regions_list(self, request: operations.ContentRegionsListRequest, security: operations.ContentRegionsListSecurity) -> operations.ContentRegionsListResponse:
        r"""Lists the regions in your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentRegionsListRequest, base_url, '/{merchantId}/regions', request)
        
        query_params = utils.get_query_params(operations.ContentRegionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentRegionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListRegionsResponse])
                res.list_regions_response = out

        return res

    def content_regions_patch(self, request: operations.ContentRegionsPatchRequest, security: operations.ContentRegionsPatchSecurity) -> operations.ContentRegionsPatchResponse:
        r"""Updates a region definition in your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentRegionsPatchRequest, base_url, '/{merchantId}/regions/{regionId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "region_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentRegionsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentRegionsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Region])
                res.region = out

        return res

    