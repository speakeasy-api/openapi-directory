// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetFoodBrandedNamePhpSecurity struct {
	APIKeyAuth string `security:"scheme,type=apiKey,subtype=query,name=api_key"`
}

// GetFoodBrandedNamePhpLimitEnum - #### Set maximum number of records you want the API to return. The default value is "**10**."
//
// **Example**
// > ```&limit=10```
type GetFoodBrandedNamePhpLimitEnum string

const (
	GetFoodBrandedNamePhpLimitEnumOne   GetFoodBrandedNamePhpLimitEnum = "1"
	GetFoodBrandedNamePhpLimitEnumTwo   GetFoodBrandedNamePhpLimitEnum = "2"
	GetFoodBrandedNamePhpLimitEnumThree GetFoodBrandedNamePhpLimitEnum = "3"
	GetFoodBrandedNamePhpLimitEnumFour  GetFoodBrandedNamePhpLimitEnum = "4"
	GetFoodBrandedNamePhpLimitEnumFive  GetFoodBrandedNamePhpLimitEnum = "5"
	GetFoodBrandedNamePhpLimitEnumSix   GetFoodBrandedNamePhpLimitEnum = "6"
	GetFoodBrandedNamePhpLimitEnumSeven GetFoodBrandedNamePhpLimitEnum = "7"
	GetFoodBrandedNamePhpLimitEnumEight GetFoodBrandedNamePhpLimitEnum = "8"
	GetFoodBrandedNamePhpLimitEnumNine  GetFoodBrandedNamePhpLimitEnum = "9"
	GetFoodBrandedNamePhpLimitEnumTen   GetFoodBrandedNamePhpLimitEnum = "10"
)

func (e *GetFoodBrandedNamePhpLimitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		fallthrough
	case "8":
		fallthrough
	case "9":
		fallthrough
	case "10":
		*e = GetFoodBrandedNamePhpLimitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFoodBrandedNamePhpLimitEnum: %s", s)
	}
}

type GetFoodBrandedNamePhpRequest struct {
	// #### Set maximum number of records you want the API to return. The default value is "**10**."
	//
	// **Example**
	// > ```&limit=10```
	//
	Limit *GetFoodBrandedNamePhpLimitEnum `queryParam:"style=form,explode=true,name=limit"`
	// #### Search for branded food items using a general food name keyword. This does not have to exactly match the "official" name for the food.
	//
	// **Example**
	// > ```&name=Starburst```
	//
	Name string `queryParam:"style=form,explode=true,name=name"`
	// #### This is how you paginate the search result. By default, you will see the first 10 records. You must increment the page number to access the next 10 records, and so on. The default value is "**1**."
	//
	// **Example**
	// > ```&page=1```
	//
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
}

type GetFoodBrandedNamePhpResponse struct {
	// **Valid** - Will return an object containing any matching foods.
	//
	BrandedFoodObject *shared.BrandedFoodObject
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
}
