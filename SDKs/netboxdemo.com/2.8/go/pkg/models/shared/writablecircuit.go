// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

type WritableCircuitStatusEnum string

const (
	WritableCircuitStatusEnumPlanned        WritableCircuitStatusEnum = "planned"
	WritableCircuitStatusEnumProvisioning   WritableCircuitStatusEnum = "provisioning"
	WritableCircuitStatusEnumActive         WritableCircuitStatusEnum = "active"
	WritableCircuitStatusEnumOffline        WritableCircuitStatusEnum = "offline"
	WritableCircuitStatusEnumDeprovisioning WritableCircuitStatusEnum = "deprovisioning"
	WritableCircuitStatusEnumDecommissioned WritableCircuitStatusEnum = "decommissioned"
)

func (e *WritableCircuitStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "planned":
		fallthrough
	case "provisioning":
		fallthrough
	case "active":
		fallthrough
	case "offline":
		fallthrough
	case "deprovisioning":
		fallthrough
	case "decommissioned":
		*e = WritableCircuitStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableCircuitStatusEnum: %s", s)
	}
}

type WritableCircuitInput struct {
	Cid          string                     `json:"cid"`
	Comments     *string                    `json:"comments,omitempty"`
	CommitRate   *int64                     `json:"commit_rate,omitempty"`
	CustomFields map[string]interface{}     `json:"custom_fields,omitempty"`
	Description  *string                    `json:"description,omitempty"`
	InstallDate  *types.Date                `json:"install_date,omitempty"`
	Provider     int64                      `json:"provider"`
	Status       *WritableCircuitStatusEnum `json:"status,omitempty"`
	Tags         []string                   `json:"tags,omitempty"`
	Tenant       *int64                     `json:"tenant,omitempty"`
	Type         int64                      `json:"type"`
}
