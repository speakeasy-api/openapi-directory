/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Mylibrary {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes an annotation.
   */
  booksMylibraryAnnotationsDelete(
    req: operations.BooksMylibraryAnnotationsDeleteRequest,
    security: operations.BooksMylibraryAnnotationsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryAnnotationsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryAnnotationsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/mylibrary/annotations/{annotationId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryAnnotationsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryAnnotationsDeleteResponse =
        new operations.BooksMylibraryAnnotationsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a new annotation.
   */
  booksMylibraryAnnotationsInsert(
    req: operations.BooksMylibraryAnnotationsInsertRequest,
    security: operations.BooksMylibraryAnnotationsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryAnnotationsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryAnnotationsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/mylibrary/annotations";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "annotation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryAnnotationsInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryAnnotationsInsertResponse =
        new operations.BooksMylibraryAnnotationsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.annotation = utils.objectToClass(
              httpRes?.data,
              shared.Annotation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of annotations, possibly filtered.
   */
  booksMylibraryAnnotationsList(
    req: operations.BooksMylibraryAnnotationsListRequest,
    security: operations.BooksMylibraryAnnotationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryAnnotationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryAnnotationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/mylibrary/annotations";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryAnnotationsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryAnnotationsListResponse =
        new operations.BooksMylibraryAnnotationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.annotations = utils.objectToClass(
              httpRes?.data,
              shared.Annotations
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the summary of specified layers.
   */
  booksMylibraryAnnotationsSummary(
    req: operations.BooksMylibraryAnnotationsSummaryRequest,
    security: operations.BooksMylibraryAnnotationsSummarySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryAnnotationsSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryAnnotationsSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/mylibrary/annotations/summary";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryAnnotationsSummarySecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryAnnotationsSummaryResponse =
        new operations.BooksMylibraryAnnotationsSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.annotationsSummary = utils.objectToClass(
              httpRes?.data,
              shared.AnnotationsSummary
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing annotation.
   */
  booksMylibraryAnnotationsUpdate(
    req: operations.BooksMylibraryAnnotationsUpdateRequest,
    security: operations.BooksMylibraryAnnotationsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryAnnotationsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryAnnotationsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/mylibrary/annotations/{annotationId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "annotation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryAnnotationsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryAnnotationsUpdateResponse =
        new operations.BooksMylibraryAnnotationsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.annotation = utils.objectToClass(
              httpRes?.data,
              shared.Annotation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds a volume to a bookshelf.
   */
  booksMylibraryBookshelvesAddVolume(
    req: operations.BooksMylibraryBookshelvesAddVolumeRequest,
    security: operations.BooksMylibraryBookshelvesAddVolumeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryBookshelvesAddVolumeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryBookshelvesAddVolumeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/mylibrary/bookshelves/{shelf}/addVolume",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryBookshelvesAddVolumeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryBookshelvesAddVolumeResponse =
        new operations.BooksMylibraryBookshelvesAddVolumeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Clears all volumes from a bookshelf.
   */
  booksMylibraryBookshelvesClearVolumes(
    req: operations.BooksMylibraryBookshelvesClearVolumesRequest,
    security: operations.BooksMylibraryBookshelvesClearVolumesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryBookshelvesClearVolumesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryBookshelvesClearVolumesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryBookshelvesClearVolumesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryBookshelvesClearVolumesResponse =
        new operations.BooksMylibraryBookshelvesClearVolumesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves metadata for a specific bookshelf belonging to the authenticated user.
   */
  booksMylibraryBookshelvesGet(
    req: operations.BooksMylibraryBookshelvesGetRequest,
    security: operations.BooksMylibraryBookshelvesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryBookshelvesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryBookshelvesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/mylibrary/bookshelves/{shelf}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryBookshelvesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryBookshelvesGetResponse =
        new operations.BooksMylibraryBookshelvesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bookshelf = utils.objectToClass(
              httpRes?.data,
              shared.Bookshelf
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of bookshelves belonging to the authenticated user.
   */
  booksMylibraryBookshelvesList(
    req: operations.BooksMylibraryBookshelvesListRequest,
    security: operations.BooksMylibraryBookshelvesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryBookshelvesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryBookshelvesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/books/v1/mylibrary/bookshelves";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryBookshelvesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryBookshelvesListResponse =
        new operations.BooksMylibraryBookshelvesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bookshelves = utils.objectToClass(
              httpRes?.data,
              shared.Bookshelves
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Moves a volume within a bookshelf.
   */
  booksMylibraryBookshelvesMoveVolume(
    req: operations.BooksMylibraryBookshelvesMoveVolumeRequest,
    security: operations.BooksMylibraryBookshelvesMoveVolumeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryBookshelvesMoveVolumeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryBookshelvesMoveVolumeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/mylibrary/bookshelves/{shelf}/moveVolume",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryBookshelvesMoveVolumeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryBookshelvesMoveVolumeResponse =
        new operations.BooksMylibraryBookshelvesMoveVolumeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes a volume from a bookshelf.
   */
  booksMylibraryBookshelvesRemoveVolume(
    req: operations.BooksMylibraryBookshelvesRemoveVolumeRequest,
    security: operations.BooksMylibraryBookshelvesRemoveVolumeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryBookshelvesRemoveVolumeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryBookshelvesRemoveVolumeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/mylibrary/bookshelves/{shelf}/removeVolume",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryBookshelvesRemoveVolumeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryBookshelvesRemoveVolumeResponse =
        new operations.BooksMylibraryBookshelvesRemoveVolumeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets volume information for volumes on a bookshelf.
   */
  booksMylibraryBookshelvesVolumesList(
    req: operations.BooksMylibraryBookshelvesVolumesListRequest,
    security: operations.BooksMylibraryBookshelvesVolumesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryBookshelvesVolumesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryBookshelvesVolumesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/mylibrary/bookshelves/{shelf}/volumes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryBookshelvesVolumesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryBookshelvesVolumesListResponse =
        new operations.BooksMylibraryBookshelvesVolumesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.volumes = utils.objectToClass(httpRes?.data, shared.Volumes);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves my reading position information for a volume.
   */
  booksMylibraryReadingpositionsGet(
    req: operations.BooksMylibraryReadingpositionsGetRequest,
    security: operations.BooksMylibraryReadingpositionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryReadingpositionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryReadingpositionsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/mylibrary/readingpositions/{volumeId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BooksMylibraryReadingpositionsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryReadingpositionsGetResponse =
        new operations.BooksMylibraryReadingpositionsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.readingPosition = utils.objectToClass(
              httpRes?.data,
              shared.ReadingPosition
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets my reading position information for a volume.
   */
  booksMylibraryReadingpositionsSetPosition(
    req: operations.BooksMylibraryReadingpositionsSetPositionRequest,
    security: operations.BooksMylibraryReadingpositionsSetPositionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BooksMylibraryReadingpositionsSetPositionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BooksMylibraryReadingpositionsSetPositionRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/books/v1/mylibrary/readingpositions/{volumeId}/setPosition",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BooksMylibraryReadingpositionsSetPositionSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BooksMylibraryReadingpositionsSetPositionResponse =
        new operations.BooksMylibraryReadingpositionsSetPositionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
