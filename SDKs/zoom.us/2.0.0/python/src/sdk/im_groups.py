"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class IMGroups:
    r"""IM Group operations"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def im_group(self, request: operations.ImGroupRequest) -> operations.ImGroupResponse:
        r"""Retrieve an IM directory group
        Retrieve an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>
        Scopes: `imgroup:read:admin`<br>
        
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImGroupRequest, base_url, '/im/groups/{groupId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ImGroup200ApplicationJSON])
                res.im_group_200_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [300, 404]:
            pass

        return res

    def im_group_create(self, request: operations.ImGroupCreateApplicationJSON) -> operations.ImGroupCreateResponse:
        r"""Create an IM directory group
        Create an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>
        **Scopes**: `imgroup:write:admin`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/im/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImGroupCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 404, 409]:
            pass
        elif http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ImGroupCreate201ApplicationJSON])
                res.im_group_create_201_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def im_group_delete(self, request: operations.ImGroupDeleteRequest) -> operations.ImGroupDeleteResponse:
        r"""Delete an IM directory group
        Delete an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>
        Scopes: `imgroup:write:admin`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImGroupDeleteRequest, base_url, '/im/groups/{groupId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImGroupDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def im_group_members(self, request: operations.ImGroupMembersRequest, security: operations.ImGroupMembersSecurity) -> operations.ImGroupMembersResponse:
        r"""List IM directory group members
        List the members of an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management).<br><br>
        **Scope:** `imgroup:read:admin`<br>
        
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImGroupMembersRequest, base_url, '/im/groups/{groupId}/members', request)
        
        query_params = utils.get_query_params(operations.ImGroupMembersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImGroupMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ImGroupMembersGroupMemberList])
                res.group_member_list = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [300, 404]:
            pass

        return res

    def im_group_members_create(self, request: operations.ImGroupMembersCreateRequest, security: operations.ImGroupMembersCreateSecurity) -> operations.ImGroupMembersCreateResponse:
        r"""Add IM directory group members
        Add members to an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under an account.<br><br>
        **Scope:** `imgroup:write:admin`<br>
        
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImGroupMembersCreateRequest, base_url, '/im/groups/{groupId}/members', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImGroupMembersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 300, 404]:
            pass
        elif http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ImGroupMembersCreate201ApplicationJSON])
                res.im_group_members_create_201_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def im_group_members_delete(self, request: operations.ImGroupMembersDeleteRequest, security: operations.ImGroupMembersDeleteSecurity) -> operations.ImGroupMembersDeleteResponse:
        r"""Delete an IM directory group member
        Delete a member from an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under an account.<br><br>
        Scopes: `imgroup:write:admin`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImGroupMembersDeleteRequest, base_url, '/im/groups/{groupId}/members/{memberId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImGroupMembersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def im_group_update(self, request: operations.ImGroupUpdateRequest) -> operations.ImGroupUpdateResponse:
        r"""Update an IM directory group
        Update an [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) under your account.<br><br>
        **Scopes**: `imgroup:write:admin`<br>
        
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImGroupUpdateRequest, base_url, '/im/groups/{groupId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImGroupUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def im_groups(self) -> operations.ImGroupsResponse:
        r"""List IM directory groups
        List [IM directory groups](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management).<br><br>
        **Scopes**: `imgroup:read:admin`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/im/groups'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.IMGroupsIMGroupList])
                res.im_group_list = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code == 404:
            pass

        return res

    