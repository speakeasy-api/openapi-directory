// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransactionRuleOutcomeTypeEnum - The [outcome](https://docs.adyen.com/issuing/transaction-rules#outcome) that will be applied when a transaction meets the conditions of the rule. If not provided, by default, this is set to **hardBlock**.
//
// Possible values:
//
//   - **hardBlock**: the transaction is declined.
//
// * **scoreBased**: the transaction is assigned the `score` you specified. Adyen calculates the total score and if it exceeds 100, the transaction is declined.
type TransactionRuleOutcomeTypeEnum string

const (
	TransactionRuleOutcomeTypeEnumHardBlock  TransactionRuleOutcomeTypeEnum = "hardBlock"
	TransactionRuleOutcomeTypeEnumScoreBased TransactionRuleOutcomeTypeEnum = "scoreBased"
)

func (e *TransactionRuleOutcomeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hardBlock":
		fallthrough
	case "scoreBased":
		*e = TransactionRuleOutcomeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionRuleOutcomeTypeEnum: %s", s)
	}
}

// TransactionRuleStatusEnum - The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created
// with an **active** status.
//
// Possible values: **active**, **inactive**.
type TransactionRuleStatusEnum string

const (
	TransactionRuleStatusEnumActive   TransactionRuleStatusEnum = "active"
	TransactionRuleStatusEnumInactive TransactionRuleStatusEnum = "inactive"
)

func (e *TransactionRuleStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = TransactionRuleStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionRuleStatusEnum: %s", s)
	}
}

// TransactionRuleTypeEnum - The [type of rule](https://docs.adyen.com/issuing/transaction-rules#rule-types), which defines if a rule blocks transactions based on individual characteristics or accumulates data.
//
// Possible values:
//   - **blockList**: decline a transaction when the conditions are met.
//   - **maxUsage**: add the amount or number of transactions for the lifetime of a payment instrument, and then decline a transaction when the specified limits are met.
//   - **velocity**: add the amount or number of transactions based on a specified time interval, and then decline a transaction when the specified limits are met.
type TransactionRuleTypeEnum string

const (
	TransactionRuleTypeEnumAllowList TransactionRuleTypeEnum = "allowList"
	TransactionRuleTypeEnumBlockList TransactionRuleTypeEnum = "blockList"
	TransactionRuleTypeEnumMaxUsage  TransactionRuleTypeEnum = "maxUsage"
	TransactionRuleTypeEnumVelocity  TransactionRuleTypeEnum = "velocity"
)

func (e *TransactionRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "allowList":
		fallthrough
	case "blockList":
		fallthrough
	case "maxUsage":
		fallthrough
	case "velocity":
		*e = TransactionRuleTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionRuleTypeEnum: %s", s)
	}
}

// TransactionRule - OK - the request has succeeded.
type TransactionRule struct {
	// The level at which data must be accumulated, used in rules with `type` **velocity** or **maxUsage**. The level must be the [same or lower in hierarchy](https://docs.adyen.com/issuing/transaction-rules#accumulate-data) than the `entityKey`.
	//
	// If not provided, by default, the rule will accumulate data at the **paymentInstrument** level.
	//
	// Possible values: **paymentInstrument**, **paymentInstrumentGroup**, **balanceAccount**, **accountHolder**, **balancePlatform**.
	AggregationLevel *string `json:"aggregationLevel,omitempty"`
	// Your description for the transaction rule, maximum 300 characters.
	Description string `json:"description"`
	// The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.
	//
	// If not provided, the rule will be evaluated until the rule status is set to **inactive**.
	EndDate   *string                  `json:"endDate,omitempty"`
	EntityKey TransactionRuleEntityKey `json:"entityKey"`
	// The unique identifier of the transaction rule.
	ID       *string                 `json:"id,omitempty"`
	Interval TransactionRuleInterval `json:"interval"`
	// The [outcome](https://docs.adyen.com/issuing/transaction-rules#outcome) that will be applied when a transaction meets the conditions of the rule. If not provided, by default, this is set to **hardBlock**.
	//
	// Possible values:
	//
	//  * **hardBlock**: the transaction is declined.
	//
	// * **scoreBased**: the transaction is assigned the `score` you specified. Adyen calculates the total score and if it exceeds 100, the transaction is declined.
	OutcomeType *TransactionRuleOutcomeTypeEnum `json:"outcomeType,omitempty"`
	// Your reference for the transaction rule, maximum 150 characters.
	Reference        string                      `json:"reference"`
	RuleRestrictions TransactionRuleRestrictions `json:"ruleRestrictions"`
	// A positive or negative score applied to the transaction if it meets the conditions of the rule. Required when `outcomeType` is **scoreBased**.  The value must be between **-100** and **100**.
	Score *int `json:"score,omitempty"`
	// The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.
	//
	// If not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**.
	//
	//
	StartDate *string `json:"startDate,omitempty"`
	// The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created
	// with an **active** status.
	//
	// Possible values: **active**, **inactive**.
	Status *TransactionRuleStatusEnum `json:"status,omitempty"`
	// The [type of rule](https://docs.adyen.com/issuing/transaction-rules#rule-types), which defines if a rule blocks transactions based on individual characteristics or accumulates data.
	//
	// Possible values:
	//  * **blockList**: decline a transaction when the conditions are met.
	//  * **maxUsage**: add the amount or number of transactions for the lifetime of a payment instrument, and then decline a transaction when the specified limits are met.
	//  * **velocity**: add the amount or number of transactions based on a specified time interval, and then decline a transaction when the specified limits are met.
	//
	Type TransactionRuleTypeEnum `json:"type"`
}
