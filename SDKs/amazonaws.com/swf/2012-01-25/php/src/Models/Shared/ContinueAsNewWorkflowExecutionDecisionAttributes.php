<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ContinueAsNewWorkflowExecutionDecisionAttributes - <p>Provides the details of the <code>ContinueAsNewWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tag</code> – A tag used to identify the workflow execution</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ContinueAsNewWorkflowExecutionDecisionAttributes
{
	#[\JMS\Serializer\Annotation\SerializedName('childPolicy')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ChildPolicyEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ChildPolicyEnum $childPolicy = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('executionStartToCloseTimeout')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $executionStartToCloseTimeout = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('input')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $input = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('lambdaRole')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $lambdaRole = null;
    
    /**
     * $tagList
     * 
     * @var ?array<string> $tagList
     */
	#[\JMS\Serializer\Annotation\SerializedName('tagList')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tagList = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('taskList')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TaskList')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TaskList $taskList = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('taskPriority')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $taskPriority = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('taskStartToCloseTimeout')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $taskStartToCloseTimeout = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('workflowTypeVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $workflowTypeVersion = null;
    
	public function __construct()
	{
		$this->childPolicy = null;
		$this->executionStartToCloseTimeout = null;
		$this->input = null;
		$this->lambdaRole = null;
		$this->tagList = null;
		$this->taskList = null;
		$this->taskPriority = null;
		$this->taskStartToCloseTimeout = null;
		$this->workflowTypeVersion = null;
	}
}
