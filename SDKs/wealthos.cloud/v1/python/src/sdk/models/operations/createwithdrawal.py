"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class CreateWithdrawalSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    
class CreateWithdrawalRootTypeForWithdrawalSubTransactionTypeEnum(str, Enum):
    r"""Withdrawal sub transaction type"""
    WITHDRAWAL = 'Withdrawal'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateWithdrawalRootTypeForWithdrawal:
    r"""JSON for the Withdrawal resource type"""
    
    bank_account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_account_id') }})
    r"""Bank Account ID"""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""Currency of the Withdrawal.must be a currency configured for the Pot"""  
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})
    r"""Pot ID"""  
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id') }})
    r"""Unique request id to ensure idempotency. (ex: UUID)"""  
    sub_transaction_type: CreateWithdrawalRootTypeForWithdrawalSubTransactionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_transaction_type') }})
    r"""Withdrawal sub transaction type"""  
    transaction_value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_value') }})
    r"""Withdrawal Amount upto 2 decimal places"""  
    

@dataclasses.dataclass
class CreateWithdrawalRequest:
    
    request_body: CreateWithdrawalRootTypeForWithdrawal = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateWithdrawal500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateWithdrawal429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class CreateWithdrawal409ApplicationJSONStatusEnum(str, Enum):
    r"""Current status of the original request"""
    PROCESSING = 'PROCESSING'
    COMPLETE = 'COMPLETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateWithdrawal409ApplicationJSON:
    r"""Duplicate request"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    status: CreateWithdrawal409ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the original request"""  
    response: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})
    r"""Stringified original response body if status is `COMPLETE`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateWithdrawal404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateWithdrawal403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateWithdrawal401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateWithdrawal400ApplicationJSON:
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class CreateWithdrawalRootTypeForWithdrawalCreationResponseDirectionEnum(str, Enum):
    r"""in = cash payment or pending buy transaction, out= cash out or pending sell transaction."""
    IN = 'in'
    OUT = 'out'

class CreateWithdrawalRootTypeForWithdrawalCreationResponseOriginEnum(str, Enum):
    r"""Origin of the transaction"""
    API = 'api'
    ADMIN_UI = 'admin_ui'
    FILE_UPLOAD = 'file_upload'
    SYSTEM = 'system'

class CreateWithdrawalRootTypeForWithdrawalCreationResponsePrimaryTransactionTypeEnum(str, Enum):
    WITHDRAWAL = 'Withdrawal'

class CreateWithdrawalRootTypeForWithdrawalCreationResponseSubTransactionTypeEnum(str, Enum):
    r"""Withdrawal sub transaction type"""
    WITHDRAWAL = 'Withdrawal'

class CreateWithdrawalRootTypeForWithdrawalCreationResponseSubTypeEnum(str, Enum):
    r"""Sub state of the transaction. instructed, confirmed, priced sub_types applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state"""
    INSTRUCTED = 'instructed'
    CONFIRMED = 'confirmed'
    PRICED = 'priced'
    REJECTED = 'rejected'
    SETTLED = 'settled'
    CANCELLED = 'cancelled'
    SCHEDULED = 'scheduled'

class CreateWithdrawalRootTypeForWithdrawalCreationResponseTypeEnum(str, Enum):
    r"""State of the transaction"""
    PENDING = 'pending'
    ARCHIVED = 'archived'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateWithdrawalRootTypeForWithdrawalCreationResponse:
    r"""JSON for the Withdrawal creation response"""
    
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    r"""Will indicate the date where this record was created"""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""Currency of the Withdrawal"""  
    direction: CreateWithdrawalRootTypeForWithdrawalCreationResponseDirectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction') }})
    r"""in = cash payment or pending buy transaction, out= cash out or pending sell transaction."""  
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})
    r"""investment_product_id"""  
    origin: CreateWithdrawalRootTypeForWithdrawalCreationResponseOriginEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin') }})
    r"""Origin of the transaction"""  
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})
    r"""Pot ID"""  
    primary_transaction_type: CreateWithdrawalRootTypeForWithdrawalCreationResponsePrimaryTransactionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_transaction_type') }})  
    sub_transaction_type: CreateWithdrawalRootTypeForWithdrawalCreationResponseSubTransactionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_transaction_type') }})
    r"""Withdrawal sub transaction type"""  
    sub_type: CreateWithdrawalRootTypeForWithdrawalCreationResponseSubTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_type') }})
    r"""Sub state of the transaction. instructed, confirmed, priced sub_types applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state"""  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""Unique ID of the withdrawal transaction"""  
    transaction_value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_value') }})
    r"""Withdrawal Amount upto 2 decimal places"""  
    type: CreateWithdrawalRootTypeForWithdrawalCreationResponseTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""State of the transaction"""  
    updated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at') }})
    r"""Will indicate the date where this record was last changed"""  
    external_transaction_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_transaction_reference'), 'exclude': lambda f: f is None }})
    r"""External Transaction Reference"""  
    settlement_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settlement_date'), 'exclude': lambda f: f is None }})
    r"""Intended settlement date of the pending transaction or actual the settled day of the transaction"""  
    trade_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trade_date'), 'exclude': lambda f: f is None }})
    r"""Date the transaction was effected"""  
    

@dataclasses.dataclass
class CreateWithdrawalResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_withdrawal_400_application_json_object: Optional[CreateWithdrawal400ApplicationJSON] = dataclasses.field(default=None)
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""  
    create_withdrawal_401_application_json_object: Optional[CreateWithdrawal401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    create_withdrawal_403_application_json_object: Optional[CreateWithdrawal403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    create_withdrawal_404_application_json_object: Optional[CreateWithdrawal404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    create_withdrawal_409_application_json_object: Optional[CreateWithdrawal409ApplicationJSON] = dataclasses.field(default=None)
    r"""Duplicate request"""  
    create_withdrawal_429_application_json_object: Optional[CreateWithdrawal429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    create_withdrawal_500_application_json_object: Optional[CreateWithdrawal500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    root_type_for_withdrawal_creation_response: Optional[CreateWithdrawalRootTypeForWithdrawalCreationResponse] = dataclasses.field(default=None)
    r"""success"""  
    