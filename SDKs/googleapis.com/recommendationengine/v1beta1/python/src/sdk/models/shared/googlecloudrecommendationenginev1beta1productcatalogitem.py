"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudrecommendationenginev1beta1image as shared_googlecloudrecommendationenginev1beta1image
from ..shared import googlecloudrecommendationenginev1beta1productcatalogitemexactprice as shared_googlecloudrecommendationenginev1beta1productcatalogitemexactprice
from ..shared import googlecloudrecommendationenginev1beta1productcatalogitempricerange as shared_googlecloudrecommendationenginev1beta1productcatalogitempricerange
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum(str, Enum):
    r"""Optional. Online stock state of the catalog item. Default is `IN_STOCK`."""
    STOCK_STATE_UNSPECIFIED = 'STOCK_STATE_UNSPECIFIED'
    IN_STOCK = 'IN_STOCK'
    OUT_OF_STOCK = 'OUT_OF_STOCK'
    PREORDER = 'PREORDER'
    BACKORDER = 'BACKORDER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecommendationengineV1beta1ProductCatalogItem:
    r"""ProductCatalogItem captures item metadata specific to retail products."""
    
    available_quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableQuantity'), 'exclude': lambda f: f is None }})
    r"""Optional. The available quantity of the item."""  
    canonical_product_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canonicalProductUri'), 'exclude': lambda f: f is None }})
    r"""Optional. Canonical URL directly linking to the item detail page with a length limit of 5 KiB.."""  
    costs: Optional[dict[str, float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costs'), 'exclude': lambda f: f is None }})
    r"""Optional. A map to pass the costs associated with the product. For example: {\\"manufacturing\\": 45.5} The profit of selling this item is computed like so: * If 'exactPrice' is provided, profit = displayPrice - sum(costs) * If 'priceRange' is provided, profit = minPrice - sum(costs)"""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""Optional. Only required if the price is set. Currency code for price/costs. Use three-character ISO-4217 code."""  
    exact_price: Optional[shared_googlecloudrecommendationenginev1beta1productcatalogitemexactprice.GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exactPrice'), 'exclude': lambda f: f is None }})
    r"""Exact product price."""  
    images: Optional[list[shared_googlecloudrecommendationenginev1beta1image.GoogleCloudRecommendationengineV1beta1Image]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images'), 'exclude': lambda f: f is None }})
    r"""Optional. Product images for the catalog item."""  
    price_range: Optional[shared_googlecloudrecommendationenginev1beta1productcatalogitempricerange.GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceRange'), 'exclude': lambda f: f is None }})
    r"""Product price range when there are a range of prices for different variations of the same product."""  
    stock_state: Optional[GoogleCloudRecommendationengineV1beta1ProductCatalogItemStockStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stockState'), 'exclude': lambda f: f is None }})
    r"""Optional. Online stock state of the catalog item. Default is `IN_STOCK`."""  
    