"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import productionvariantacceleratortype_enum as shared_productionvariantacceleratortype_enum
from ..shared import productionvariantcoredumpconfig as shared_productionvariantcoredumpconfig
from ..shared import productionvariantinstancetype_enum as shared_productionvariantinstancetype_enum
from ..shared import productionvariantserverlessconfig as shared_productionvariantserverlessconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductionVariant:
    r"""Identifies a model that you want to host and the resources chosen to deploy for hosting it. If you are deploying multiple models, tell SageMaker how to distribute traffic among the models by specifying variant weights. For more information on production variants, check <a href=\\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html\\"> Production variants</a>."""
    
    model_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelName') }})  
    variant_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VariantName') }})  
    accelerator_type: Optional[shared_productionvariantacceleratortype_enum.ProductionVariantAcceleratorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AcceleratorType'), 'exclude': lambda f: f is None }})  
    container_startup_health_check_timeout_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContainerStartupHealthCheckTimeoutInSeconds'), 'exclude': lambda f: f is None }})  
    core_dump_config: Optional[shared_productionvariantcoredumpconfig.ProductionVariantCoreDumpConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CoreDumpConfig'), 'exclude': lambda f: f is None }})  
    enable_ssm_access: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableSSMAccess'), 'exclude': lambda f: f is None }})  
    initial_instance_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InitialInstanceCount'), 'exclude': lambda f: f is None }})  
    initial_variant_weight: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InitialVariantWeight'), 'exclude': lambda f: f is None }})  
    instance_type: Optional[shared_productionvariantinstancetype_enum.ProductionVariantInstanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceType'), 'exclude': lambda f: f is None }})  
    model_data_download_timeout_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelDataDownloadTimeoutInSeconds'), 'exclude': lambda f: f is None }})  
    serverless_config: Optional[shared_productionvariantserverlessconfig.ProductionVariantServerlessConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerlessConfig'), 'exclude': lambda f: f is None }})  
    volume_size_in_gb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeSizeInGB'), 'exclude': lambda f: f is None }})  
    