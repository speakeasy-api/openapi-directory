"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Locks:
    r"""Operations about locks"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_locks_path(self, request: operations.DeleteLocksPathRequest) -> operations.DeleteLocksPathResponse:
        r"""Delete Lock
        Delete Lock
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteLocksPathRequest, base_url, '/locks/{path}', request)
        
        query_params = utils.get_query_params(operations.DeleteLocksPathRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteLocksPathResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def lock_list_for_path(self, request: operations.LockListForPathRequest) -> operations.LockListForPathResponse:
        r"""List Locks by path
        List Locks by path
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.LockListForPathRequest, base_url, '/locks/{path}', request)
        
        query_params = utils.get_query_params(operations.LockListForPathRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LockListForPathResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.LockEntity]])
                res.lock_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def post_locks_path(self, request: operations.PostLocksPathRequest) -> operations.PostLocksPathResponse:
        r"""Create Lock
        Create Lock
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostLocksPathRequest, base_url, '/locks/{path}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostLocksPathResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LockEntity])
                res.lock_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    