// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetUserContactSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type GetUserContactPathParams struct {
	// The user's contact Id or email address. The contact can be either a company contact or an external contact.
	ContactID string `pathParam:"style=simple,explode=false,name=contactId"`
}

type GetUserContactQueryParams struct {
	// The presence status of the contact.
	// Include this query parameter with a value of `true` to get the presence status of the contact in the response.
	QueryPresenceStatus *bool `queryParam:"style=form,explode=true,name=query_presence_status"`
}

type GetUserContactRequest struct {
	PathParams  GetUserContactPathParams
	QueryParams GetUserContactQueryParams
	Security    GetUserContactSecurity
}

// GetUserContact200ApplicationXMLPresenceStatusEnum - Contact's Presence Status in the Zoom Chat Client. The status can be one of the following: <br> `Do_Not_Disturb`<br> `Away`<br> `Available`<br> `Offline`
type GetUserContact200ApplicationXMLPresenceStatusEnum string

const (
	GetUserContact200ApplicationXMLPresenceStatusEnumDoNotDisturb GetUserContact200ApplicationXMLPresenceStatusEnum = "Do_Not_Disturb"
	GetUserContact200ApplicationXMLPresenceStatusEnumAway         GetUserContact200ApplicationXMLPresenceStatusEnum = "Away"
	GetUserContact200ApplicationXMLPresenceStatusEnumAvailable    GetUserContact200ApplicationXMLPresenceStatusEnum = "Available"
	GetUserContact200ApplicationXMLPresenceStatusEnumOffline      GetUserContact200ApplicationXMLPresenceStatusEnum = "Offline"
)

func (e *GetUserContact200ApplicationXMLPresenceStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Do_Not_Disturb":
		fallthrough
	case "Away":
		fallthrough
	case "Available":
		fallthrough
	case "Offline":
		*e = GetUserContact200ApplicationXMLPresenceStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUserContact200ApplicationXMLPresenceStatusEnum: %s", s)
	}
}

// GetUserContact200ApplicationXML - **HTTP Status Code:** `200`<br>
// Contact information returned.
type GetUserContact200ApplicationXML struct {
	// Direct number(s) assigned to the contact.
	DirectNumbers []string
	// Contact's email address.
	Email *string
	// Extension number of the contact.
	ExtensionNumber *string
	// Contact's first name
	FirstName *string
	// User ID of the contact.
	ID *string
	// Contact's last name
	LastName *string
	// Phone number of the contact.
	PhoneNumber *string
	// Contact's Presence Status in the Zoom Chat Client. The status can be one of the following: <br> `Do_Not_Disturb`<br> `Away`<br> `Available`<br> `Offline`
	PresenceStatus *GetUserContact200ApplicationXMLPresenceStatusEnum
}

// GetUserContact200ApplicationJSONPresenceStatusEnum - Contact's Presence Status in the Zoom Chat Client. The status can be one of the following: <br> `Do_Not_Disturb`<br> `Away`<br> `Available`<br> `Offline`
type GetUserContact200ApplicationJSONPresenceStatusEnum string

const (
	GetUserContact200ApplicationJSONPresenceStatusEnumDoNotDisturb GetUserContact200ApplicationJSONPresenceStatusEnum = "Do_Not_Disturb"
	GetUserContact200ApplicationJSONPresenceStatusEnumAway         GetUserContact200ApplicationJSONPresenceStatusEnum = "Away"
	GetUserContact200ApplicationJSONPresenceStatusEnumAvailable    GetUserContact200ApplicationJSONPresenceStatusEnum = "Available"
	GetUserContact200ApplicationJSONPresenceStatusEnumOffline      GetUserContact200ApplicationJSONPresenceStatusEnum = "Offline"
)

func (e *GetUserContact200ApplicationJSONPresenceStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Do_Not_Disturb":
		fallthrough
	case "Away":
		fallthrough
	case "Available":
		fallthrough
	case "Offline":
		*e = GetUserContact200ApplicationJSONPresenceStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUserContact200ApplicationJSONPresenceStatusEnum: %s", s)
	}
}

// GetUserContact200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Contact information returned.
type GetUserContact200ApplicationJSON struct {
	// Direct number(s) assigned to the contact.
	DirectNumbers []string `json:"direct_numbers,omitempty"`
	// Contact's email address.
	Email *string `json:"email,omitempty"`
	// Extension number of the contact.
	ExtensionNumber *string `json:"extension_number,omitempty"`
	// Contact's first name
	FirstName *string `json:"first_name,omitempty"`
	// User ID of the contact.
	ID *string `json:"id,omitempty"`
	// Contact's last name
	LastName *string `json:"last_name,omitempty"`
	// Phone number of the contact.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Contact's Presence Status in the Zoom Chat Client. The status can be one of the following: <br> `Do_Not_Disturb`<br> `Away`<br> `Available`<br> `Offline`
	PresenceStatus *GetUserContact200ApplicationJSONPresenceStatusEnum `json:"presence_status,omitempty"`
}

type GetUserContactResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Contact information returned.
	//
	//
	//
	GetUserContact200ApplicationJSONObject *GetUserContact200ApplicationJSON
}
