"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DriveTimeBreak:
    
    duration: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})
    r"""Specifies the duration of the break in seconds."""  
    max_driving_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_driving_time') }})
    r"""Specifies the max driving time (in a row) without break in seconds."""  
    initial_driving_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initial_driving_time'), 'exclude': lambda f: f is None }})
    r"""Specifies the initial (current) driving time of a driver to allow dynamic adaptations in seconds."""  
    possible_split: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('possible_split'), 'exclude': lambda f: f is None }})
    r"""Array specifying how a break duration (in seconds) can be split into several smaller breaks"""  
    