/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * Specifies the desired service. Currently, <code>TURN</code> is the only valid value.
 */
export enum GetIceServerConfigRequestBodyServiceEnum {
  Turn = "TURN",
}

export class GetIceServerConfigRequestBody extends SpeakeasyBase {
  /**
   * The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ChannelARN" })
  channelARN: string;

  /**
   * Unique identifier for the viewer. Must be unique within the signaling channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ClientId" })
  clientId?: string;

  /**
   * Specifies the desired service. Currently, <code>TURN</code> is the only valid value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Service" })
  service?: GetIceServerConfigRequestBodyServiceEnum;

  /**
   * An optional user ID to be associated with the credentials.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Username" })
  username?: string;
}

export class GetIceServerConfigRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: GetIceServerConfigRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GetIceServerConfigResponse extends SpeakeasyBase {
  /**
   * ClientLimitExceededException
   */
  @SpeakeasyMetadata()
  clientLimitExceededException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getIceServerConfigResponse?: shared.GetIceServerConfigResponse;

  /**
   * InvalidArgumentException
   */
  @SpeakeasyMetadata()
  invalidArgumentException?: any;

  /**
   * InvalidClientException
   */
  @SpeakeasyMetadata()
  invalidClientException?: any;

  /**
   * NotAuthorizedException
   */
  @SpeakeasyMetadata()
  notAuthorizedException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * SessionExpiredException
   */
  @SpeakeasyMetadata()
  sessionExpiredException?: any;
}
