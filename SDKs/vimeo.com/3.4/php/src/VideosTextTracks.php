<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VideosTextTracks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a text track to a video
     * 
     * For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackResponse
     */
	public function createTextTrack(
        \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/texttracks', \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textTrack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextTrack', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a text track to a video
     * 
     * For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackAlt1Response
     */
	public function createTextTrackAlt1(
        \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/videos/{video_id}/texttracks', \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTextTrackAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textTrack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextTrack', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a text track
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTextTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTextTrackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTextTrackResponse
     */
	public function deleteTextTrack(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTextTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTextTrackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTextTrackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/texttracks/{texttrack_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteTextTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTextTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit a text track
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditTextTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EditTextTrackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EditTextTrackResponse
     */
	public function editTextTrack(
        \OpenAPI\OpenAPI\Models\Operations\EditTextTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EditTextTrackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EditTextTrackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/texttracks/{texttrack_id}', \OpenAPI\OpenAPI\Models\Operations\EditTextTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditTextTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textTrack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextTrack', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific text track
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextTrackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTextTrackResponse
     */
	public function getTextTrack(
        \OpenAPI\OpenAPI\Models\Operations\GetTextTrackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTextTrackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/texttracks/{texttrack_id}', \OpenAPI\OpenAPI\Models\Operations\GetTextTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTextTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textTrack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextTrack', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the text tracks of a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextTracksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTextTracksResponse
     */
	public function getTextTracks(
        \OpenAPI\OpenAPI\Models\Operations\GetTextTracksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTextTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/texttracks', \OpenAPI\OpenAPI\Models\Operations\GetTextTracksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTextTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textTracks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TextTrack>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the text tracks of a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextTracksAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTextTracksAlt1Response
     */
	public function getTextTracksAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetTextTracksAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTextTracksAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/videos/{video_id}/texttracks', \OpenAPI\OpenAPI\Models\Operations\GetTextTracksAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTextTracksAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textTracks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TextTrack>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video.texttrack+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}