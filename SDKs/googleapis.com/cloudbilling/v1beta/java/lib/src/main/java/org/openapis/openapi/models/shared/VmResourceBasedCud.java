/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VmResourceBasedCud - Specifies a resource-based committed use discount (CUD).
 */
public class VmResourceBasedCud {
    /**
     * Specification of a set of guest accelerators attached to a machine.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestAccelerator")
    public GuestAccelerator guestAccelerator;

    public VmResourceBasedCud withGuestAccelerator(GuestAccelerator guestAccelerator) {
        this.guestAccelerator = guestAccelerator;
        return this;
    }
    
    /**
     * The machine series for CUD. For example: "n1" for general purpose N1 machine type commitments. "n2" for general purpose N2 machine type commitments. "e2" for general purpose E2 machine type commitments. "n2d" for general purpose N2D machine type commitments. "t2d" for general purpose T2D machine type commitments. "c2"/"c2d" for compute-optimized commitments. "m1"/"m2" for the memory-optimized commitments. "a2' for the accelerator-optimized commitments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineSeries")
    public String machineSeries;

    public VmResourceBasedCud withMachineSeries(String machineSeries) {
        this.machineSeries = machineSeries;
        return this;
    }
    
    /**
     * Memory size of the VM in GB (2^30 bytes). Must be an increment of 0.25 (256 MB).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memorySizeGb")
    public Double memorySizeGb;

    public VmResourceBasedCud withMemorySizeGb(Double memorySizeGb) {
        this.memorySizeGb = memorySizeGb;
        return this;
    }
    
    /**
     * Commitment usage plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan")
    public VmResourceBasedCudPlanEnum plan;

    public VmResourceBasedCud withPlan(VmResourceBasedCudPlanEnum plan) {
        this.plan = plan;
        return this;
    }
    
    /**
     * The region where the VM runs. For example: "us-central1"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;

    public VmResourceBasedCud withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * The number of vCPUs. The number of vCPUs must be an integer of 0 or more and can be even or odd.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtualCpuCount")
    public String virtualCpuCount;

    public VmResourceBasedCud withVirtualCpuCount(String virtualCpuCount) {
        this.virtualCpuCount = virtualCpuCount;
        return this;
    }
    
    public VmResourceBasedCud(){}
}
