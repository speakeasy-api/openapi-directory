// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CountrySpecificationReceiverBusinessReceiver - The business receiver of the document.
type CountrySpecificationReceiverBusinessReceiver struct {
	Legal   *CountrySpecificationIdentifier `json:"legal,omitempty"`
	Routing *CountrySpecificationIdentifier `json:"routing,omitempty"`
	Tax     *CountrySpecificationIdentifier `json:"tax,omitempty"`
}

// CountrySpecificationReceiverConsumerReceiver - The consumer receiver of the document.
type CountrySpecificationReceiverConsumerReceiver struct {
	Legal   *CountrySpecificationIdentifier `json:"legal,omitempty"`
	Routing *CountrySpecificationIdentifier `json:"routing,omitempty"`
	Tax     *CountrySpecificationIdentifier `json:"tax,omitempty"`
}

// CountrySpecificationReceiverGovernmentReceiver - The government receiver of the document.
type CountrySpecificationReceiverGovernmentReceiver struct {
	Legal   *CountrySpecificationIdentifier `json:"legal,omitempty"`
	Routing *CountrySpecificationIdentifier `json:"routing,omitempty"`
	Tax     *CountrySpecificationIdentifier `json:"tax,omitempty"`
}

// CountrySpecificationReceiver - The receiver of the document.
type CountrySpecificationReceiver struct {
	// The business receiver of the document.
	Business *CountrySpecificationReceiverBusinessReceiver `json:"business,omitempty"`
	// The consumer receiver of the document.
	Consumer *CountrySpecificationReceiverConsumerReceiver `json:"consumer,omitempty"`
	// The government receiver of the document.
	Government *CountrySpecificationReceiverGovernmentReceiver `json:"government,omitempty"`
}

// CountrySpecificationRegionEnum - The region this country belongs to. Within this region exchanging invoices is well defined. Between regions some care needs to be taken and Storecove may help in automatically converting some items. Contact us for details of inter-regional document exchange.
type CountrySpecificationRegionEnum string

const (
	CountrySpecificationRegionEnumEuEea CountrySpecificationRegionEnum = "eu_eea"
	CountrySpecificationRegionEnumSg    CountrySpecificationRegionEnum = "sg"
	CountrySpecificationRegionEnumAunz  CountrySpecificationRegionEnum = "aunz"
	CountrySpecificationRegionEnumIn    CountrySpecificationRegionEnum = "in"
	CountrySpecificationRegionEnumWorld CountrySpecificationRegionEnum = "world"
)

func (e *CountrySpecificationRegionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "eu_eea":
		fallthrough
	case "sg":
		fallthrough
	case "aunz":
		fallthrough
	case "in":
		fallthrough
	case "world":
		*e = CountrySpecificationRegionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CountrySpecificationRegionEnum: %s", s)
	}
}

// CountrySpecificationSender - The sender of the document.
type CountrySpecificationSender struct {
	Legal *CountrySpecificationIdentifier `json:"legal,omitempty"`
	Tax   *CountrySpecificationIdentifier `json:"tax,omitempty"`
}

type CountrySpecification struct {
	// An ISO 3166-1 alpha-2 country code.
	Country *CountryEnum `json:"country,omitempty"`
	// The receiver of the document.
	Receiver *CountrySpecificationReceiver `json:"receiver,omitempty"`
	// The region this country belongs to. Within this region exchanging invoices is well defined. Between regions some care needs to be taken and Storecove may help in automatically converting some items. Contact us for details of inter-regional document exchange.
	Region *CountrySpecificationRegionEnum `json:"region,omitempty"`
	// The sender of the document.
	Sender *CountrySpecificationSender `json:"sender,omitempty"`
}
