/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class PlaydeveloperreportingVitalsErrorsReportsSearchSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class PlaydeveloperreportingVitalsErrorsReportsSearchRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * A selection predicate to retrieve only a subset of the reports. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * `apiLevel`: Matches error reports that occurred in the requested Android versions (specified as the numeric API level) only. Example: `apiLevel = 28 OR apiLevel = 29`. * `versionCode`: Matches error reports that occurred in the requested app version codes only. Example: `versionCode = 123 OR versionCode = 456`. * `deviceModel`: Matches error reports that occurred in the requested devices. Example: `deviceModel = "walleye" OR deviceModel = "marlin"`. * `deviceType`: Matches error reports that occurred in the requested device types. Example: `deviceType = "PHONE"`. * `errorIssueType`: Matches error reports of the requested types only. Valid candidates: `JAVA_CRASH`, `NATIVE_CRASH`, `ANR`. Example: `errorIssueType = JAVA_CRASH OR errorIssueType = NATIVE_CRASH`. * `errorIssueId`: Matches error reports belonging to the requested error issue ids only. Example: `errorIssueId = 1234 OR errorIssueId = 4567`. * `appProcessState`: Matches error reports on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: `FOREGROUND`, `BACKGROUND`. Example: `appProcessState = FOREGROUND`. * `isUserPerceived`: Matches error reports that are user-perceived. It is not accompanied by any operators. Example: `isUserPerceived`. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators `AND` and `OR` can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The `OR` operator takes precedence over `AND` so the use of parenthesis is not necessary when building CNF. The `OR` operator is only supported to build disjunctions that apply to the same field, e.g., `versionCode = 123 OR versionCode = ANR`. The filter expression `versionCode = 123 OR errorIssueType = ANR` is not valid. ** Examples ** Some valid filtering expressions: * `versionCode = 123 AND errorIssueType = ANR` * `versionCode = 123 AND errorIssueType = OR errorIssueType = CRASH` * `versionCode = 123 AND (errorIssueType = OR errorIssueType = CRASH)`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: string;

  /**
   * Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.endTime.day",
  })
  intervalEndTimeDay?: number;

  /**
   * Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.endTime.hours",
  })
  intervalEndTimeHours?: number;

  /**
   * Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.endTime.minutes",
  })
  intervalEndTimeMinutes?: number;

  /**
   * Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.endTime.month",
  })
  intervalEndTimeMonth?: number;

  /**
   * Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.endTime.nanos",
  })
  intervalEndTimeNanos?: number;

  /**
   * Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.endTime.seconds",
  })
  intervalEndTimeSeconds?: number;

  /**
   * IANA Time Zone Database time zone, e.g. "America/New_York".
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.endTime.timeZone.id",
  })
  intervalEndTimeTimeZoneId?: string;

  /**
   * Optional. IANA Time Zone Database version number, e.g. "2019a".
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.endTime.timeZone.version",
  })
  intervalEndTimeTimeZoneVersion?: string;

  /**
   * UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.endTime.utcOffset",
  })
  intervalEndTimeUtcOffset?: string;

  /**
   * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.endTime.year",
  })
  intervalEndTimeYear?: number;

  /**
   * Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.startTime.day",
  })
  intervalStartTimeDay?: number;

  /**
   * Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.startTime.hours",
  })
  intervalStartTimeHours?: number;

  /**
   * Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.startTime.minutes",
  })
  intervalStartTimeMinutes?: number;

  /**
   * Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.startTime.month",
  })
  intervalStartTimeMonth?: number;

  /**
   * Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.startTime.nanos",
  })
  intervalStartTimeNanos?: number;

  /**
   * Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.startTime.seconds",
  })
  intervalStartTimeSeconds?: number;

  /**
   * IANA Time Zone Database time zone, e.g. "America/New_York".
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.startTime.timeZone.id",
  })
  intervalStartTimeTimeZoneId?: string;

  /**
   * Optional. IANA Time Zone Database version number, e.g. "2019a".
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.startTime.timeZone.version",
  })
  intervalStartTimeTimeZoneVersion?: string;

  /**
   * UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.startTime.utcOffset",
  })
  intervalStartTimeUtcOffset?: string;

  /**
   * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=interval.startTime.year",
  })
  intervalStartTimeYear?: number;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * The maximum number of reports to return. The service may return fewer than this value. If unspecified, at most 50 reports will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageSize",
  })
  pageSize?: number;

  /**
   * A page token, received from a previous `SearchErrorReports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchErrorReports` must match the call that provided the page token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageToken",
  })
  pageToken?: string;

  /**
   * Required. Parent resource of the reports, indicating the application for which they were received. Format: apps/{app}
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=parent",
  })
  parent: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;
}

export class PlaydeveloperreportingVitalsErrorsReportsSearchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  googlePlayDeveloperReportingV1alpha1SearchErrorReportsResponse?: shared.GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
