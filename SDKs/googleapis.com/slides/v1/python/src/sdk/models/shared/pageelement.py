"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import affinetransform as shared_affinetransform
from ..shared import group as shared_group
from ..shared import image as shared_image
from ..shared import line as shared_line
from ..shared import shape as shared_shape
from ..shared import sheetschart as shared_sheetschart
from ..shared import size as shared_size
from ..shared import table as shared_table
from ..shared import video as shared_video
from ..shared import wordart as shared_wordart
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PageElement:
    r"""A visual element rendered on a page."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the page element. Combined with title to display alt text. The field is not supported for Group elements."""  
    element_group: Optional[shared_group.Group] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elementGroup'), 'exclude': lambda f: f is None }})
    r"""A PageElement kind representing a joined collection of PageElements."""  
    image: Optional[shared_image.Image] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""A PageElement kind representing an image."""  
    line: Optional[shared_line.Line] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line'), 'exclude': lambda f: f is None }})
    r"""A PageElement kind representing a non-connector line, straight connector, curved connector, or bent connector."""  
    object_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectId'), 'exclude': lambda f: f is None }})
    r"""The object ID for this page element. Object IDs used by google.apps.slides.v1.Page and google.apps.slides.v1.PageElement share the same namespace."""  
    shape: Optional[shared_shape.Shape] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shape'), 'exclude': lambda f: f is None }})
    r"""A PageElement kind representing a generic shape that does not have a more specific classification."""  
    sheets_chart: Optional[shared_sheetschart.SheetsChart] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sheetsChart'), 'exclude': lambda f: f is None }})
    r"""A PageElement kind representing a linked chart embedded from Google Sheets."""  
    size: Optional[shared_size.Size] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""A width and height."""  
    table: Optional[shared_table.Table] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('table'), 'exclude': lambda f: f is None }})
    r"""A PageElement kind representing a table."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the page element. Combined with description to display alt text. The field is not supported for Group elements."""  
    transform: Optional[shared_affinetransform.AffineTransform] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transform'), 'exclude': lambda f: f is None }})
    r"""AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements."""  
    video: Optional[shared_video.Video] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video'), 'exclude': lambda f: f is None }})
    r"""A PageElement kind representing a video."""  
    word_art: Optional[shared_wordart.WordArt] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wordArt'), 'exclude': lambda f: f is None }})
    r"""A PageElement kind representing word art."""  
    