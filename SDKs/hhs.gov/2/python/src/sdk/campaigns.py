"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Campaigns:
    r"""Information about campaigns"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_resources_campaigns_json(self, request: operations.GetResourcesCampaignsJSONRequest) -> operations.GetResourcesCampaignsJSONResponse:
        r"""Get Campaigns
        Media Listings for a specific campaign
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/resources/campaigns.json'
        
        query_params = utils.get_query_params(operations.GetResourcesCampaignsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourcesCampaignsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CampaignWrapped])
                res.campaign_wrapped = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_resources_campaigns_id_json(self, request: operations.GetResourcesCampaignsIDJSONRequest) -> operations.GetResourcesCampaignsIDJSONResponse:
        r"""Get Campaign by ID
        Information about a specific campaign
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetResourcesCampaignsIDJSONRequest, base_url, '/resources/campaigns/{id}.json', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourcesCampaignsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CampaignWrapped])
                res.campaign_wrapped = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_resources_campaigns_id_media_json(self, request: operations.GetResourcesCampaignsIDMediaJSONRequest) -> operations.GetResourcesCampaignsIDMediaJSONResponse:
        r"""Get MediaItems by Campaign ID
        Campaign Listings
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetResourcesCampaignsIDMediaJSONRequest, base_url, '/resources/campaigns/{id}/media.json', request)
        
        query_params = utils.get_query_params(operations.GetResourcesCampaignsIDMediaJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourcesCampaignsIDMediaJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MediaItemWrapped])
                res.media_item_wrapped = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_resources_campaigns_id_syndicate_format_(self, request: operations.GetResourcesCampaignsIDSyndicateFormatRequest) -> operations.GetResourcesCampaignsIDSyndicateFormatResponse:
        r"""Get MediaItems for Campaign
        MediaItem
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetResourcesCampaignsIDSyndicateFormatRequest, base_url, '/resources/campaigns/{id}/syndicate.{format}', request)
        
        query_params = utils.get_query_params(operations.GetResourcesCampaignsIDSyndicateFormatRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourcesCampaignsIDSyndicateFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SyndicateMarshallerWrapped])
                res.syndicate_marshaller_wrapped = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    