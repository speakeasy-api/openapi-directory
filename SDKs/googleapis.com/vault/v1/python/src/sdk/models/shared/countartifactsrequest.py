"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import query as shared_query
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CountArtifactsRequestViewEnum(str, Enum):
    r"""Sets the granularity of the count results."""
    COUNT_RESULT_VIEW_UNSPECIFIED = 'COUNT_RESULT_VIEW_UNSPECIFIED'
    TOTAL_COUNT = 'TOTAL_COUNT'
    ALL = 'ALL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CountArtifactsRequest:
    r"""Count artifacts request."""
    
    query: Optional[shared_query.Query] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})
    r"""The query definition used for search and export."""  
    view: Optional[CountArtifactsRequestViewEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""Sets the granularity of the count results."""  
    