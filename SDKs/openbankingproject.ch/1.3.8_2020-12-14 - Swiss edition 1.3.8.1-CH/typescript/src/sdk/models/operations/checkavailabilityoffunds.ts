/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class CheckAvailabilityOfFundsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearerAuthOAuth?: string;
}

export class CheckAvailabilityOfFundsRequest extends SpeakeasyBase {
  /**
   * This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol,
   *
   * @remarks
   * facilitated by the TPP.
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Authorization",
  })
  authorization?: string;

  /**
   * Is contained if and only if the "Signature" element is contained in the header of the request.
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Digest" })
  digest?: string;

  /**
   * A signature of the request by the TPP on application level. This might be mandated by ASPSP.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Signature",
  })
  signature?: string;

  /**
   * The certificate used for signing the request, in base64 encoding.
   *
   * @remarks
   * Must be contained if a signature is contained.
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=TPP-Signature-Certificate",
  })
  tppSignatureCertificate?: string;

  /**
   * ID of the request, unique to the call, as determined by the initiating party.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Request-ID",
  })
  xRequestID: string;

  /**
   * Request body for a confirmation of funds request.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  confirmationOfFunds: shared.ConfirmationOfFunds;
}

/**
 * Equals "true" if sufficient funds are available at the time of the request,
 *
 * @remarks
 * "false" otherwise.
 *
 */
export class CheckAvailabilityOfFunds200ApplicationJSON extends SpeakeasyBase {
  /**
   * Equals true if sufficient funds are available at the time of the request, false otherwise.
   *
   * @remarks
   *
   * This datalemenet is allways contained in a confirmation of funds response.
   *
   * This data element is contained in a payment status response,
   * if supported by the ASPSP, if a funds check has been performed and
   * if the transactionStatus is "ACTC", "ACWC" or "ACCP".
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fundsAvailable" })
  fundsAvailable: boolean;
}

export class CheckAvailabilityOfFundsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  error400AIS?: shared.Error400AIS;

  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  error400NGAIS?: shared.Error400NGAIS;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  error401NGPIIS?: shared.Error401NGPIIS;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  error401PIIS?: shared.Error401PIIS;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  error403NGPIIS?: shared.Error403NGPIIS;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  error403PIIS?: shared.Error403PIIS;

  /**
   * Not found
   */
  @SpeakeasyMetadata()
  error404NGPIIS?: shared.Error404NGPIIS;

  /**
   * Not found
   */
  @SpeakeasyMetadata()
  error404PIIS?: shared.Error404PIIS;

  /**
   * Method Not Allowed
   */
  @SpeakeasyMetadata()
  error405NGPIIS?: shared.Error405NGPIIS;

  /**
   * Method Not Allowed
   */
  @SpeakeasyMetadata()
  error405PIIS?: shared.Error405PIIS;

  /**
   * Conflict
   */
  @SpeakeasyMetadata()
  error409NGPIIS?: shared.Error409NGPIIS;

  /**
   * Conflict
   */
  @SpeakeasyMetadata()
  error409PIIS?: shared.Error409PIIS;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  checkAvailabilityOfFunds200ApplicationJSONObject?: CheckAvailabilityOfFunds200ApplicationJSON;
}
