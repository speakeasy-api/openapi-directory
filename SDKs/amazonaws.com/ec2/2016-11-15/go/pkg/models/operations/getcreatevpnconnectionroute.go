// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateVpnConnectionRouteActionEnum
type GETCreateVpnConnectionRouteActionEnum string

const (
	GETCreateVpnConnectionRouteActionEnumCreateVpnConnectionRoute GETCreateVpnConnectionRouteActionEnum = "CreateVpnConnectionRoute"
)

func (e GETCreateVpnConnectionRouteActionEnum) ToPointer() *GETCreateVpnConnectionRouteActionEnum {
	return &e
}

func (e *GETCreateVpnConnectionRouteActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateVpnConnectionRoute":
		*e = GETCreateVpnConnectionRouteActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateVpnConnectionRouteActionEnum: %v", v)
	}
}

// GETCreateVpnConnectionRouteVersionEnum
type GETCreateVpnConnectionRouteVersionEnum string

const (
	GETCreateVpnConnectionRouteVersionEnumTwoThousandAndSixteen1115 GETCreateVpnConnectionRouteVersionEnum = "2016-11-15"
)

func (e GETCreateVpnConnectionRouteVersionEnum) ToPointer() *GETCreateVpnConnectionRouteVersionEnum {
	return &e
}

func (e *GETCreateVpnConnectionRouteVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETCreateVpnConnectionRouteVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateVpnConnectionRouteVersionEnum: %v", v)
	}
}

type GETCreateVpnConnectionRouteRequest struct {
	Action GETCreateVpnConnectionRouteActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The CIDR block associated with the local subnet of the customer network.
	DestinationCidrBlock string                                 `queryParam:"style=form,explode=true,name=DestinationCidrBlock"`
	Version              GETCreateVpnConnectionRouteVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the VPN connection.
	VpnConnectionID   string  `queryParam:"style=form,explode=true,name=VpnConnectionId"`
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateVpnConnectionRouteResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
