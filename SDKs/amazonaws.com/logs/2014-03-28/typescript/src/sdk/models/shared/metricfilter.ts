/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MetricTransformation } from "./metrictransformation";
import { Expose, Type } from "class-transformer";

/**
 * Metric filters express how CloudWatch Logs would extract metric observations from ingested log events and transform them into metric data in a CloudWatch metric.
 */
export class MetricFilter extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "creationTime" })
  creationTime?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "filterName" })
  filterName?: string;

  /**
   * A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filterPattern" })
  filterPattern?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "logGroupName" })
  logGroupName?: string;

  @SpeakeasyMetadata({ elemType: MetricTransformation })
  @Expose({ name: "metricTransformations" })
  @Type(() => MetricTransformation)
  metricTransformations?: MetricTransformation[];
}
