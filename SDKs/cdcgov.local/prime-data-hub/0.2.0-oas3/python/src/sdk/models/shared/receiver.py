"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import settingmetadata as shared_settingmetadata
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ReceiverJurisdictionalFiltersMatchFieldsEnum(str, Enum):
    r"""What fields to match in the filter"""
    FACILITY_OR_PATIENT_ADDRESS = 'FACILITY_OR_PATIENT_ADDRESS'
    FACILITY_ADDRESS = 'FACILITY_ADDRESS'
    FACILITY_NAME = 'FACILITY_NAME'
    ABNORMAL_VALUE = 'ABNORMAL_VALUE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReceiverJurisdictionalFilters:
    r"""A single filter"""
    
    does_not_match: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doesNotMatch'), 'exclude': lambda f: f is None }})
    r"""Ensure that the result does not match"""  
    match_fields: Optional[ReceiverJurisdictionalFiltersMatchFieldsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchFields'), 'exclude': lambda f: f is None }})
    r"""What fields to match in the filter"""  
    match_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchValues'), 'exclude': lambda f: f is None }})
    r"""What is the value to match against"""  
    
class ReceiverTimingFrequencyEnum(str, Enum):
    r"""How often send a report"""
    REAL_TIME = 'REAL_TIME'
    HOURLY = 'HOURLY'
    DAILY = 'DAILY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReceiverTiming:
    r"""When the report is sent if not immediately"""
    
    frequency: ReceiverTimingFrequencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency') }})
    r"""How often send a report"""  
    daily_at: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dailyAt'), 'exclude': lambda f: f is None }})
    r"""The UTC hour to send a daily batch"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReceiverInput:
    r"""A receiver of reports from the data hub"""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Display ready description of the receiver"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The unique name for the receiver. Should include the organization name as a prefix."""  
    timing: ReceiverTiming = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timing') }})
    r"""When the report is sent if not immediately"""  
    topic: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic') }})
    r"""The topic of for this receiver. Must match the supported topics."""  
    jurisdictional_filters: Optional[list[ReceiverJurisdictionalFilters]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jurisdictionalFilters'), 'exclude': lambda f: f is None }})
    r"""What items to include in the report."""  
    translations: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('translations'), 'exclude': lambda f: f is None }})
    r"""How the report is translated from the sender. A report can be sent in multiple ways."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Receiver:
    r"""A receiver of reports from the data hub"""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Display ready description of the receiver"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The unique name for the receiver. Should include the organization name as a prefix."""  
    timing: ReceiverTiming = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timing') }})
    r"""When the report is sent if not immediately"""  
    topic: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic') }})
    r"""The topic of for this receiver. Must match the supported topics."""  
    jurisdictional_filters: Optional[list[ReceiverJurisdictionalFilters]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jurisdictionalFilters'), 'exclude': lambda f: f is None }})
    r"""What items to include in the report."""  
    meta: Optional[shared_settingmetadata.SettingMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    r"""The metadata associated with an setting"""  
    organization_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizationName'), 'exclude': lambda f: f is None }})
    r"""The name of the organization that this receiver belongs to"""  
    translations: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('translations'), 'exclude': lambda f: f is None }})
    r"""How the report is translated from the sender. A report can be sent in multiple ways."""  
    