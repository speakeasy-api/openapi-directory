// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GETReportInstanceStatusActionEnum
type GETReportInstanceStatusActionEnum string

const (
	GETReportInstanceStatusActionEnumReportInstanceStatus GETReportInstanceStatusActionEnum = "ReportInstanceStatus"
)

func (e *GETReportInstanceStatusActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ReportInstanceStatus":
		*e = GETReportInstanceStatusActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReportInstanceStatusActionEnum: %s", s)
	}
}

type GETReportInstanceStatusReasonCodeEnum string

const (
	GETReportInstanceStatusReasonCodeEnumInstanceStuckInState     GETReportInstanceStatusReasonCodeEnum = "instance-stuck-in-state"
	GETReportInstanceStatusReasonCodeEnumUnresponsive             GETReportInstanceStatusReasonCodeEnum = "unresponsive"
	GETReportInstanceStatusReasonCodeEnumNotAcceptingCredentials  GETReportInstanceStatusReasonCodeEnum = "not-accepting-credentials"
	GETReportInstanceStatusReasonCodeEnumPasswordNotAvailable     GETReportInstanceStatusReasonCodeEnum = "password-not-available"
	GETReportInstanceStatusReasonCodeEnumPerformanceNetwork       GETReportInstanceStatusReasonCodeEnum = "performance-network"
	GETReportInstanceStatusReasonCodeEnumPerformanceInstanceStore GETReportInstanceStatusReasonCodeEnum = "performance-instance-store"
	GETReportInstanceStatusReasonCodeEnumPerformanceEbsVolume     GETReportInstanceStatusReasonCodeEnum = "performance-ebs-volume"
	GETReportInstanceStatusReasonCodeEnumPerformanceOther         GETReportInstanceStatusReasonCodeEnum = "performance-other"
	GETReportInstanceStatusReasonCodeEnumOther                    GETReportInstanceStatusReasonCodeEnum = "other"
)

func (e *GETReportInstanceStatusReasonCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "instance-stuck-in-state":
		fallthrough
	case "unresponsive":
		fallthrough
	case "not-accepting-credentials":
		fallthrough
	case "password-not-available":
		fallthrough
	case "performance-network":
		fallthrough
	case "performance-instance-store":
		fallthrough
	case "performance-ebs-volume":
		fallthrough
	case "performance-other":
		fallthrough
	case "other":
		*e = GETReportInstanceStatusReasonCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReportInstanceStatusReasonCodeEnum: %s", s)
	}
}

// GETReportInstanceStatusStatusEnum - The status of all instances listed.
type GETReportInstanceStatusStatusEnum string

const (
	GETReportInstanceStatusStatusEnumOk       GETReportInstanceStatusStatusEnum = "ok"
	GETReportInstanceStatusStatusEnumImpaired GETReportInstanceStatusStatusEnum = "impaired"
)

func (e *GETReportInstanceStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ok":
		fallthrough
	case "impaired":
		*e = GETReportInstanceStatusStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReportInstanceStatusStatusEnum: %s", s)
	}
}

// GETReportInstanceStatusVersionEnum
type GETReportInstanceStatusVersionEnum string

const (
	GETReportInstanceStatusVersionEnumTwoThousandAndSixteen1115 GETReportInstanceStatusVersionEnum = "2016-11-15"
)

func (e *GETReportInstanceStatusVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETReportInstanceStatusVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReportInstanceStatusVersionEnum: %s", s)
	}
}

type GETReportInstanceStatusQueryParams struct {
	Action GETReportInstanceStatusActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Descriptive text about the health state of your instance.
	Description *string `queryParam:"style=form,explode=true,name=Description"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The time at which the reported instance health state ended.
	EndTime *time.Time `queryParam:"style=form,explode=true,name=EndTime"`
	// The instances.
	InstanceID []string `queryParam:"style=form,explode=true,name=InstanceId"`
	// <p>The reason codes that describe the health state of your instance.</p> <ul> <li> <p> <code>instance-stuck-in-state</code>: My instance is stuck in a state.</p> </li> <li> <p> <code>unresponsive</code>: My instance is unresponsive.</p> </li> <li> <p> <code>not-accepting-credentials</code>: My instance is not accepting my credentials.</p> </li> <li> <p> <code>password-not-available</code>: A password is not available for my instance.</p> </li> <li> <p> <code>performance-network</code>: My instance is experiencing performance problems that I believe are network related.</p> </li> <li> <p> <code>performance-instance-store</code>: My instance is experiencing performance problems that I believe are related to the instance stores.</p> </li> <li> <p> <code>performance-ebs-volume</code>: My instance is experiencing performance problems that I believe are related to an EBS volume.</p> </li> <li> <p> <code>performance-other</code>: My instance is experiencing performance problems.</p> </li> <li> <p> <code>other</code>: [explain using the description parameter]</p> </li> </ul>
	ReasonCode []GETReportInstanceStatusReasonCodeEnum `queryParam:"style=form,explode=true,name=ReasonCode"`
	// The time at which the reported instance health state began.
	StartTime *time.Time `queryParam:"style=form,explode=true,name=StartTime"`
	// The status of all instances listed.
	Status  GETReportInstanceStatusStatusEnum  `queryParam:"style=form,explode=true,name=Status"`
	Version GETReportInstanceStatusVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETReportInstanceStatusHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETReportInstanceStatusRequest struct {
	QueryParams GETReportInstanceStatusQueryParams
	Headers     GETReportInstanceStatusHeaders
}

type GETReportInstanceStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
