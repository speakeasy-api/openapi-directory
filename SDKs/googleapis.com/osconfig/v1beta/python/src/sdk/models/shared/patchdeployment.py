"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import onetimeschedule as shared_onetimeschedule
from ..shared import patchconfig as shared_patchconfig
from ..shared import patchinstancefilter as shared_patchinstancefilter
from ..shared import patchrollout as shared_patchrollout
from ..shared import recurringschedule as shared_recurringschedule
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatchDeploymentStateEnum(str, Enum):
    r"""Output only. Current state of the patch deployment."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    PAUSED = 'PAUSED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchDeployment:
    r"""Patch deployments are configurations that individual patch jobs use to complete a patch. These configurations include instance filter, package repository settings, and a schedule. For more information about creating and managing patch deployments, see [Scheduling patch jobs](https://cloud.google.com/compute/docs/os-patch-management/schedule-patch-jobs)."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time the patch deployment was created. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. Description of the patch deployment. Length of the description is limited to 1024 characters."""  
    duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Optional. Duration of the patch. After the duration ends, the patch times out."""  
    instance_filter: Optional[shared_patchinstancefilter.PatchInstanceFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceFilter'), 'exclude': lambda f: f is None }})
    r"""A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones."""  
    last_execute_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastExecuteTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The last time a patch job was started by this deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment."""  
    one_time_schedule: Optional[shared_onetimeschedule.OneTimeSchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oneTimeSchedule'), 'exclude': lambda f: f is None }})
    r"""Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."""  
    patch_config: Optional[shared_patchconfig.PatchConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patchConfig'), 'exclude': lambda f: f is None }})
    r"""Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance."""  
    recurring_schedule: Optional[shared_recurringschedule.RecurringSchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringSchedule'), 'exclude': lambda f: f is None }})
    r"""Sets the time for recurring patch deployments."""  
    rollout: Optional[shared_patchrollout.PatchRollout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollout'), 'exclude': lambda f: f is None }})
    r"""Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs."""  
    state: Optional[PatchDeploymentStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. Current state of the patch deployment."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time the patch deployment was last updated. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchDeploymentInput:
    r"""Patch deployments are configurations that individual patch jobs use to complete a patch. These configurations include instance filter, package repository settings, and a schedule. For more information about creating and managing patch deployments, see [Scheduling patch jobs](https://cloud.google.com/compute/docs/os-patch-management/schedule-patch-jobs)."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. Description of the patch deployment. Length of the description is limited to 1024 characters."""  
    duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Optional. Duration of the patch. After the duration ends, the patch times out."""  
    instance_filter: Optional[shared_patchinstancefilter.PatchInstanceFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceFilter'), 'exclude': lambda f: f is None }})
    r"""A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment."""  
    one_time_schedule: Optional[shared_onetimeschedule.OneTimeSchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oneTimeSchedule'), 'exclude': lambda f: f is None }})
    r"""Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."""  
    patch_config: Optional[shared_patchconfig.PatchConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patchConfig'), 'exclude': lambda f: f is None }})
    r"""Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance."""  
    recurring_schedule: Optional[shared_recurringschedule.RecurringScheduleInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurringSchedule'), 'exclude': lambda f: f is None }})
    r"""Sets the time for recurring patch deployments."""  
    rollout: Optional[shared_patchrollout.PatchRollout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollout'), 'exclude': lambda f: f is None }})
    r"""Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs."""  
    