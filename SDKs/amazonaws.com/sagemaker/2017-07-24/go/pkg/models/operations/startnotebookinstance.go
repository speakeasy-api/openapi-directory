// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartNotebookInstanceXAmzTargetEnum
type StartNotebookInstanceXAmzTargetEnum string

const (
	StartNotebookInstanceXAmzTargetEnumSageMakerStartNotebookInstance StartNotebookInstanceXAmzTargetEnum = "SageMaker.StartNotebookInstance"
)

func (e StartNotebookInstanceXAmzTargetEnum) ToPointer() *StartNotebookInstanceXAmzTargetEnum {
	return &e
}

func (e *StartNotebookInstanceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.StartNotebookInstance":
		*e = StartNotebookInstanceXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartNotebookInstanceXAmzTargetEnum: %v", v)
	}
}

type StartNotebookInstanceRequest struct {
	StartNotebookInstanceInput shared.StartNotebookInstanceInput   `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 StartNotebookInstanceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartNotebookInstanceResponse struct {
	ContentType string
	// ResourceLimitExceeded
	ResourceLimitExceeded interface{}
	StatusCode            int
	RawResponse           *http.Response
}
