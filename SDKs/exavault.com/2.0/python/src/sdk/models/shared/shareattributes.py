"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import accessmode as shared_accessmode
from ..shared import sharemessage as shared_sharemessage
from ..shared import sharerecipient as shared_sharerecipient
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ShareAttributesExpiredEnum(str, Enum):
    r"""True if the share has expired."""
    TRUE = 'true'
    FALSE = 'false'

class ShareAttributesFileDropCreateFoldersEnum(str, Enum):
    r"""Flag to show if separate folders should be created for each file upload to receive folder."""
    TRUE = 'true'
    FALSE = 'false'

class ShareAttributesHasNotificationEnum(str, Enum):
    r"""True if share has notification."""
    TRUE = 'true'
    FALSE = 'false'

class ShareAttributesHasPasswordEnum(str, Enum):
    r"""True if the share has password."""
    TRUE = 'true'
    FALSE = 'false'

class ShareAttributesInheritedEnum(str, Enum):
    r"""True if share inherited from parent folder."""
    TRUE = 'true'
    FALSE = 'false'

class ShareAttributesPublicEnum(str, Enum):
    r"""True if the share has a public url."""
    TRUE = 'true'
    FALSE = 'false'

class ShareAttributesStatusEnum(str, Enum):
    r"""Share activity status. Can be active (1) or deactivated (0)."""
    ZERO = '0'
    ONE = '1'

class ShareAttributesTrackingStatusEnum(str, Enum):
    r"""Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)"""
    COMPLETE = 'complete'
    INCOMPLETE = 'incomplete'
    PENDING = 'pending'

class ShareAttributesTypeEnum(str, Enum):
    r"""Type of share."""
    SHARED_FOLDER = 'shared_folder'
    SEND = 'send'
    RECEIVE = 'receive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShareAttributes:
    r"""Attributes of the share including the name, path and share recipients."""
    
    access_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessDescription'), 'exclude': lambda f: f is None }})
    r"""Description of the share access rights."""  
    access_mode: Optional[shared_accessmode.AccessMode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessMode'), 'exclude': lambda f: f is None }})
    r"""An object defining what a not-logged-in visitor can do with the share contents"""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of share creation."""  
    embed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed'), 'exclude': lambda f: f is None }})
    r"""True if share can be embedded."""  
    expiration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration'), 'exclude': lambda f: f is None }})
    r"""Expiration date of the share."""  
    expired: Optional[ShareAttributesExpiredEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expired'), 'exclude': lambda f: f is None }})
    r"""True if the share has expired."""  
    file_drop_create_folders: Optional[ShareAttributesFileDropCreateFoldersEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileDropCreateFolders'), 'exclude': lambda f: f is None }})
    r"""Flag to show if separate folders should be created for each file upload to receive folder."""  
    form_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formId'), 'exclude': lambda f: f is None }})
    r"""ID of the form."""  
    hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hash'), 'exclude': lambda f: f is None }})
    r"""Share hash."""  
    has_notification: Optional[ShareAttributesHasNotificationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasNotification'), 'exclude': lambda f: f is None }})
    r"""True if share has notification."""  
    has_password: Optional[ShareAttributesHasPasswordEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasPassword'), 'exclude': lambda f: f is None }})
    r"""True if the share has password."""  
    inherited: Optional[ShareAttributesInheritedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inherited'), 'exclude': lambda f: f is None }})
    r"""True if share inherited from parent folder."""  
    messages: Optional[list[shared_sharemessage.ShareMessage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})
    r"""Array of invitation messages."""  
    modified: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of share modification. Can be `null` if it wasn't modified."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Share name."""  
    owner_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerHash'), 'exclude': lambda f: f is None }})
    r"""Share owner's hash."""  
    paths: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paths'), 'exclude': lambda f: f is None }})
    r"""Path to the shared resource in your account."""  
    public: Optional[ShareAttributesPublicEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public'), 'exclude': lambda f: f is None }})
    r"""True if the share has a public url."""  
    recipients: Optional[list[shared_sharerecipient.ShareRecipient]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipients'), 'exclude': lambda f: f is None }})
    r"""Array of recipients."""  
    require_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requireEmail'), 'exclude': lambda f: f is None }})
    r"""True if share requires email to access."""  
    resent: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resent'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Invitations resent date. Can be `null` if resent never happened."""  
    status: Optional[ShareAttributesStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Share activity status. Can be active (1) or deactivated (0)."""  
    tracking_status: Optional[ShareAttributesTrackingStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingStatus'), 'exclude': lambda f: f is None }})
    r"""Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)"""  
    type: Optional[ShareAttributesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of share."""  
    