// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DealPausingInfoPauseRoleEnum - The party that first paused the deal; unspecified for active deals.
type DealPausingInfoPauseRoleEnum string

const (
	DealPausingInfoPauseRoleEnumBuyerSellerRoleUnspecified DealPausingInfoPauseRoleEnum = "BUYER_SELLER_ROLE_UNSPECIFIED"
	DealPausingInfoPauseRoleEnumBuyer                      DealPausingInfoPauseRoleEnum = "BUYER"
	DealPausingInfoPauseRoleEnumSeller                     DealPausingInfoPauseRoleEnum = "SELLER"
)

func (e DealPausingInfoPauseRoleEnum) ToPointer() *DealPausingInfoPauseRoleEnum {
	return &e
}

func (e *DealPausingInfoPauseRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUYER_SELLER_ROLE_UNSPECIFIED":
		fallthrough
	case "BUYER":
		fallthrough
	case "SELLER":
		*e = DealPausingInfoPauseRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DealPausingInfoPauseRoleEnum: %v", v)
	}
}

// DealPausingInfo - Information related to deal pausing.
type DealPausingInfo struct {
	// The reason for the pausing of the deal; empty for active deals.
	PauseReason *string `json:"pauseReason,omitempty"`
	// The party that first paused the deal; unspecified for active deals.
	PauseRole *DealPausingInfoPauseRoleEnum `json:"pauseRole,omitempty"`
	// Whether pausing is consented between buyer and seller for the deal.
	PausingConsented *bool `json:"pausingConsented,omitempty"`
}
