<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Users 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create User
     * 
     * Create a new user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersCreateRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersCreateResponse
     */
	public function usersCreate(
        \OpenAPI\OpenAPI\Models\Operations\UsersCreateRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete User
     * 
     * Delete a user by its unique ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersDeleteResponse
     */
	public function usersDelete(
        \OpenAPI\OpenAPI\Models\Operations\UsersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\UsersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete User Session
     * 
     * Delete a user sessions by its unique ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionResponse
     */
	public function usersDeleteSession(
        \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/sessions/{sessionId}', \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete User Sessions
     * 
     * Delete all user's sessions by using the user's unique ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionsResponse
     */
	public function usersDeleteSessions(
        \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/sessions', \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersDeleteSessionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get User
     * 
     * Get a user by its unique ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetResponse
     */
	public function usersGet(
        \OpenAPI\OpenAPI\Models\Operations\UsersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\UsersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get User Logs
     * 
     * Get a user activity logs list by its unique ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetLogsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetLogsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetLogsResponse
     */
	public function usersGetLogs(
        \OpenAPI\OpenAPI\Models\Operations\UsersGetLogsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersGetLogsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/logs', \OpenAPI\OpenAPI\Models\Operations\UsersGetLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->logList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LogList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get User Preferences
     * 
     * Get the user preferences by its unique ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetPrefsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetPrefsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetPrefsResponse
     */
	public function usersGetPrefs(
        \OpenAPI\OpenAPI\Models\Operations\UsersGetPrefsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersGetPrefsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetPrefsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/prefs', \OpenAPI\OpenAPI\Models\Operations\UsersGetPrefsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetPrefsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preferences = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get User Sessions
     * 
     * Get the user sessions list by its unique ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetSessionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersGetSessionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersGetSessionsResponse
     */
	public function usersGetSessions(
        \OpenAPI\OpenAPI\Models\Operations\UsersGetSessionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersGetSessionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersGetSessionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/sessions', \OpenAPI\OpenAPI\Models\Operations\UsersGetSessionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersGetSessionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sessionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SessionList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Users
     * 
     * Get a list of all the project's users. You can use the query params to filter your results.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersListResponse
     */
	public function usersList(
        \OpenAPI\OpenAPI\Models\Operations\UsersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UsersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update User Preferences
     * 
     * Update the user preferences by its unique ID. You can pass only the specific settings you wish to update.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUpdatePrefsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUpdatePrefsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersUpdatePrefsResponse
     */
	public function usersUpdatePrefs(
        \OpenAPI\OpenAPI\Models\Operations\UsersUpdatePrefsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersUpdatePrefsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersUpdatePrefsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/prefs', \OpenAPI\OpenAPI\Models\Operations\UsersUpdatePrefsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersUpdatePrefsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preferences = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update User Status
     * 
     * Update the user status by its unique ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUpdateStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUpdateStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersUpdateStatusResponse
     */
	public function usersUpdateStatus(
        \OpenAPI\OpenAPI\Models\Operations\UsersUpdateStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersUpdateStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersUpdateStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/status', \OpenAPI\OpenAPI\Models\Operations\UsersUpdateStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersUpdateStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Email Verification
     * 
     * Update the user email verification status by its unique ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUpdateVerificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsersUpdateVerificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsersUpdateVerificationResponse
     */
	public function usersUpdateVerification(
        \OpenAPI\OpenAPI\Models\Operations\UsersUpdateVerificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsersUpdateVerificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsersUpdateVerificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/verification', \OpenAPI\OpenAPI\Models\Operations\UsersUpdateVerificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsersUpdateVerificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
}