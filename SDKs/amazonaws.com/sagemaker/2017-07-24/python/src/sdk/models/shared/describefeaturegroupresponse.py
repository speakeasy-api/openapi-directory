"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import featuredefinition as shared_featuredefinition
from ..shared import featuregroupstatus_enum as shared_featuregroupstatus_enum
from ..shared import lastupdatestatus as shared_lastupdatestatus
from ..shared import offlinestoreconfig as shared_offlinestoreconfig
from ..shared import offlinestorestatus as shared_offlinestorestatus
from ..shared import onlinestoreconfig as shared_onlinestoreconfig
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeFeatureGroupResponse:
    r"""Success"""
    
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    event_time_feature_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventTimeFeatureName') }})  
    feature_definitions: list[shared_featuredefinition.FeatureDefinition] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeatureDefinitions') }})  
    feature_group_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeatureGroupArn') }})  
    feature_group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeatureGroupName') }})  
    next_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextToken') }})  
    record_identifier_feature_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecordIdentifierFeatureName') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    feature_group_status: Optional[shared_featuregroupstatus_enum.FeatureGroupStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeatureGroupStatus'), 'exclude': lambda f: f is None }})  
    last_modified_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    last_update_status: Optional[shared_lastupdatestatus.LastUpdateStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdateStatus'), 'exclude': lambda f: f is None }})  
    offline_store_config: Optional[shared_offlinestoreconfig.OfflineStoreConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OfflineStoreConfig'), 'exclude': lambda f: f is None }})  
    offline_store_status: Optional[shared_offlinestorestatus.OfflineStoreStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OfflineStoreStatus'), 'exclude': lambda f: f is None }})  
    online_store_config: Optional[shared_onlinestoreconfig.OnlineStoreConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OnlineStoreConfig'), 'exclude': lambda f: f is None }})  
    online_store_total_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OnlineStoreTotalSizeBytes'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn'), 'exclude': lambda f: f is None }})  
    