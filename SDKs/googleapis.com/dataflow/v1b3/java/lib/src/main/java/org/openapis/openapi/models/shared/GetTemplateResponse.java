/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetTemplateResponse - The response to a GetTemplate request.
 */
public class GetTemplateResponse {
    /**
     * Metadata describing a template.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public TemplateMetadata metadata;
    public GetTemplateResponse withMetadata(TemplateMetadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * RuntimeMetadata describing a runtime environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runtimeMetadata")
    public RuntimeMetadata runtimeMetadata;
    public GetTemplateResponse withRuntimeMetadata(RuntimeMetadata runtimeMetadata) {
        this.runtimeMetadata = runtimeMetadata;
        return this;
    }
    
    /**
     * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public Status status;
    public GetTemplateResponse withStatus(Status status) {
        this.status = status;
        return this;
    }
    
    /**
     * Template Type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("templateType")
    public GetTemplateResponseTemplateTypeEnum templateType;
    public GetTemplateResponse withTemplateType(GetTemplateResponseTemplateTypeEnum templateType) {
        this.templateType = templateType;
        return this;
    }
    
}
