/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RunAggregationQueryRequest - The request for Firestore.RunAggregationQuery.
 */
public class RunAggregationQueryRequest {
    /**
     * Options for creating a new transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newTransaction")
    public TransactionOptions newTransaction;
    public RunAggregationQueryRequest withNewTransaction(TransactionOptions newTransaction) {
        this.newTransaction = newTransaction;
        return this;
    }
    
    /**
     * Executes the query at the given timestamp. Requires: * Cannot be more than 270 seconds in the past.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readTime")
    public String readTime;
    public RunAggregationQueryRequest withReadTime(String readTime) {
        this.readTime = readTime;
        return this;
    }
    
    /**
     * Firestore query for running an aggregation over a StructuredQuery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("structuredAggregationQuery")
    public StructuredAggregationQuery structuredAggregationQuery;
    public RunAggregationQueryRequest withStructuredAggregationQuery(StructuredAggregationQuery structuredAggregationQuery) {
        this.structuredAggregationQuery = structuredAggregationQuery;
        return this;
    }
    
    /**
     * Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction")
    public String transaction;
    public RunAggregationQueryRequest withTransaction(String transaction) {
        this.transaction = transaction;
        return this;
    }
    
}
