"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import billingmethod_enum as shared_billingmethod_enum
from ..shared import customerartifactpaths as shared_customerartifactpaths
from ..shared import location as shared_location
from ..shared import radios as shared_radios
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleRunConfiguration:
    r"""Represents the settings for a run. Includes things like location, radio states, auxiliary apps, and network profiles."""
    
    auxiliary_apps: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auxiliaryApps'), 'exclude': lambda f: f is None }})  
    billing_method: Optional[shared_billingmethod_enum.BillingMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingMethod'), 'exclude': lambda f: f is None }})  
    customer_artifact_paths: Optional[shared_customerartifactpaths.CustomerArtifactPaths] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerArtifactPaths'), 'exclude': lambda f: f is None }})  
    extra_data_package_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraDataPackageArn'), 'exclude': lambda f: f is None }})  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})  
    location: Optional[shared_location.Location] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    network_profile_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkProfileArn'), 'exclude': lambda f: f is None }})  
    radios: Optional[shared_radios.Radios] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('radios'), 'exclude': lambda f: f is None }})  
    vpce_configuration_arns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpceConfigurationArns'), 'exclude': lambda f: f is None }})  
    