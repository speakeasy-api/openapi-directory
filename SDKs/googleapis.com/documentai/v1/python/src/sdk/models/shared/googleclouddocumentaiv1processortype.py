"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddocumentaiv1processortypelocationinfo as shared_googleclouddocumentaiv1processortypelocationinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudDocumentaiV1ProcessorTypeLaunchStageEnum(str, Enum):
    r"""Launch stage of the processor type"""
    LAUNCH_STAGE_UNSPECIFIED = 'LAUNCH_STAGE_UNSPECIFIED'
    UNIMPLEMENTED = 'UNIMPLEMENTED'
    PRELAUNCH = 'PRELAUNCH'
    EARLY_ACCESS = 'EARLY_ACCESS'
    ALPHA = 'ALPHA'
    BETA = 'BETA'
    GA = 'GA'
    DEPRECATED = 'DEPRECATED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDocumentaiV1ProcessorType:
    r"""A processor type is responsible for performing a certain document understanding task on a certain type of document."""
    
    allow_creation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowCreation'), 'exclude': lambda f: f is None }})
    r"""Whether the processor type allows creation. If true, users can create a processor of this processor type. Otherwise, users need to request access."""  
    available_locations: Optional[list[shared_googleclouddocumentaiv1processortypelocationinfo.GoogleCloudDocumentaiV1ProcessorTypeLocationInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableLocations'), 'exclude': lambda f: f is None }})
    r"""The locations in which this processor is available."""  
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The processor category, used by UI to group processor types."""  
    launch_stage: Optional[GoogleCloudDocumentaiV1ProcessorTypeLaunchStageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchStage'), 'exclude': lambda f: f is None }})
    r"""Launch stage of the processor type"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The resource name of the processor type. Format: `projects/{project}/processorTypes/{processor_type}`"""  
    sample_document_uris: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleDocumentUris'), 'exclude': lambda f: f is None }})
    r"""A set of Cloud Storage URIs of sample documents for this processor."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The processor type, e.g., `OCR_PROCESSOR`, `INVOICE_PROCESSOR`, etc."""  
    