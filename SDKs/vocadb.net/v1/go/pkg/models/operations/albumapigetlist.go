// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// AlbumAPIGetListArtistParticipationStatusEnum - Filter by artist participation status. Only valid if artistId is specified.
//
//	Everything (default): Show all albums by that artist (no filter).
//	OnlyMainAlbums: Show only main albums by that artist.
//	OnlyCollaborations: Show only collaborations by that artist.
type AlbumAPIGetListArtistParticipationStatusEnum string

const (
	AlbumAPIGetListArtistParticipationStatusEnumEverything         AlbumAPIGetListArtistParticipationStatusEnum = "Everything"
	AlbumAPIGetListArtistParticipationStatusEnumOnlyMainAlbums     AlbumAPIGetListArtistParticipationStatusEnum = "OnlyMainAlbums"
	AlbumAPIGetListArtistParticipationStatusEnumOnlyCollaborations AlbumAPIGetListArtistParticipationStatusEnum = "OnlyCollaborations"
)

func (e *AlbumAPIGetListArtistParticipationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Everything":
		fallthrough
	case "OnlyMainAlbums":
		fallthrough
	case "OnlyCollaborations":
		*e = AlbumAPIGetListArtistParticipationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumAPIGetListArtistParticipationStatusEnum: %s", s)
	}
}

// AlbumAPIGetListDiscTypesEnum - Disc type. By default nothing. Possible values are Album, Single, EP, SplitAlbum, Compilation, Video, Other. Note: only one type supported for now.
type AlbumAPIGetListDiscTypesEnum string

const (
	AlbumAPIGetListDiscTypesEnumUnknown      AlbumAPIGetListDiscTypesEnum = "Unknown"
	AlbumAPIGetListDiscTypesEnumAlbum        AlbumAPIGetListDiscTypesEnum = "Album"
	AlbumAPIGetListDiscTypesEnumSingle       AlbumAPIGetListDiscTypesEnum = "Single"
	AlbumAPIGetListDiscTypesEnumEp           AlbumAPIGetListDiscTypesEnum = "EP"
	AlbumAPIGetListDiscTypesEnumSplitAlbum   AlbumAPIGetListDiscTypesEnum = "SplitAlbum"
	AlbumAPIGetListDiscTypesEnumCompilation  AlbumAPIGetListDiscTypesEnum = "Compilation"
	AlbumAPIGetListDiscTypesEnumVideo        AlbumAPIGetListDiscTypesEnum = "Video"
	AlbumAPIGetListDiscTypesEnumArtbook      AlbumAPIGetListDiscTypesEnum = "Artbook"
	AlbumAPIGetListDiscTypesEnumGame         AlbumAPIGetListDiscTypesEnum = "Game"
	AlbumAPIGetListDiscTypesEnumFanmade      AlbumAPIGetListDiscTypesEnum = "Fanmade"
	AlbumAPIGetListDiscTypesEnumInstrumental AlbumAPIGetListDiscTypesEnum = "Instrumental"
	AlbumAPIGetListDiscTypesEnumOther        AlbumAPIGetListDiscTypesEnum = "Other"
)

func (e *AlbumAPIGetListDiscTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unknown":
		fallthrough
	case "Album":
		fallthrough
	case "Single":
		fallthrough
	case "EP":
		fallthrough
	case "SplitAlbum":
		fallthrough
	case "Compilation":
		fallthrough
	case "Video":
		fallthrough
	case "Artbook":
		fallthrough
	case "Game":
		fallthrough
	case "Fanmade":
		fallthrough
	case "Instrumental":
		fallthrough
	case "Other":
		*e = AlbumAPIGetListDiscTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumAPIGetListDiscTypesEnum: %s", s)
	}
}

// AlbumAPIGetListFieldsEnum - Optional fields (optional). Possible values are artists, names, pvs, tags, tracks, webLinks.
type AlbumAPIGetListFieldsEnum string

const (
	AlbumAPIGetListFieldsEnumNone            AlbumAPIGetListFieldsEnum = "None"
	AlbumAPIGetListFieldsEnumAdditionalNames AlbumAPIGetListFieldsEnum = "AdditionalNames"
	AlbumAPIGetListFieldsEnumArtists         AlbumAPIGetListFieldsEnum = "Artists"
	AlbumAPIGetListFieldsEnumDescription     AlbumAPIGetListFieldsEnum = "Description"
	AlbumAPIGetListFieldsEnumDiscs           AlbumAPIGetListFieldsEnum = "Discs"
	AlbumAPIGetListFieldsEnumIdentifiers     AlbumAPIGetListFieldsEnum = "Identifiers"
	AlbumAPIGetListFieldsEnumMainPicture     AlbumAPIGetListFieldsEnum = "MainPicture"
	AlbumAPIGetListFieldsEnumNames           AlbumAPIGetListFieldsEnum = "Names"
	AlbumAPIGetListFieldsEnumPVs             AlbumAPIGetListFieldsEnum = "PVs"
	AlbumAPIGetListFieldsEnumReleaseEvent    AlbumAPIGetListFieldsEnum = "ReleaseEvent"
	AlbumAPIGetListFieldsEnumTags            AlbumAPIGetListFieldsEnum = "Tags"
	AlbumAPIGetListFieldsEnumTracks          AlbumAPIGetListFieldsEnum = "Tracks"
	AlbumAPIGetListFieldsEnumWebLinks        AlbumAPIGetListFieldsEnum = "WebLinks"
)

func (e *AlbumAPIGetListFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "AdditionalNames":
		fallthrough
	case "Artists":
		fallthrough
	case "Description":
		fallthrough
	case "Discs":
		fallthrough
	case "Identifiers":
		fallthrough
	case "MainPicture":
		fallthrough
	case "Names":
		fallthrough
	case "PVs":
		fallthrough
	case "ReleaseEvent":
		fallthrough
	case "Tags":
		fallthrough
	case "Tracks":
		fallthrough
	case "WebLinks":
		*e = AlbumAPIGetListFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumAPIGetListFieldsEnum: %s", s)
	}
}

// AlbumAPIGetListLangEnum - Content language preference (optional).
type AlbumAPIGetListLangEnum string

const (
	AlbumAPIGetListLangEnumDefault  AlbumAPIGetListLangEnum = "Default"
	AlbumAPIGetListLangEnumJapanese AlbumAPIGetListLangEnum = "Japanese"
	AlbumAPIGetListLangEnumRomaji   AlbumAPIGetListLangEnum = "Romaji"
	AlbumAPIGetListLangEnumEnglish  AlbumAPIGetListLangEnum = "English"
)

func (e *AlbumAPIGetListLangEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Default":
		fallthrough
	case "Japanese":
		fallthrough
	case "Romaji":
		fallthrough
	case "English":
		*e = AlbumAPIGetListLangEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumAPIGetListLangEnum: %s", s)
	}
}

// AlbumAPIGetListNameMatchModeEnum - Match mode for artist name (optional, defaults to Exact).
type AlbumAPIGetListNameMatchModeEnum string

const (
	AlbumAPIGetListNameMatchModeEnumAuto       AlbumAPIGetListNameMatchModeEnum = "Auto"
	AlbumAPIGetListNameMatchModeEnumPartial    AlbumAPIGetListNameMatchModeEnum = "Partial"
	AlbumAPIGetListNameMatchModeEnumStartsWith AlbumAPIGetListNameMatchModeEnum = "StartsWith"
	AlbumAPIGetListNameMatchModeEnumExact      AlbumAPIGetListNameMatchModeEnum = "Exact"
	AlbumAPIGetListNameMatchModeEnumWords      AlbumAPIGetListNameMatchModeEnum = "Words"
)

func (e *AlbumAPIGetListNameMatchModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Auto":
		fallthrough
	case "Partial":
		fallthrough
	case "StartsWith":
		fallthrough
	case "Exact":
		fallthrough
	case "Words":
		*e = AlbumAPIGetListNameMatchModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumAPIGetListNameMatchModeEnum: %s", s)
	}
}

// AlbumAPIGetListSortEnum - Sort rule (optional, defaults to Name).
//
//	Possible values are None, Name, ReleaseDate, ReleaseDateWithNulls, AdditionDate, RatingAverage, RatingTotal, NameThenReleaseDate.
type AlbumAPIGetListSortEnum string

const (
	AlbumAPIGetListSortEnumNone                 AlbumAPIGetListSortEnum = "None"
	AlbumAPIGetListSortEnumName                 AlbumAPIGetListSortEnum = "Name"
	AlbumAPIGetListSortEnumReleaseDate          AlbumAPIGetListSortEnum = "ReleaseDate"
	AlbumAPIGetListSortEnumReleaseDateWithNulls AlbumAPIGetListSortEnum = "ReleaseDateWithNulls"
	AlbumAPIGetListSortEnumAdditionDate         AlbumAPIGetListSortEnum = "AdditionDate"
	AlbumAPIGetListSortEnumRatingAverage        AlbumAPIGetListSortEnum = "RatingAverage"
	AlbumAPIGetListSortEnumRatingTotal          AlbumAPIGetListSortEnum = "RatingTotal"
	AlbumAPIGetListSortEnumNameThenReleaseDate  AlbumAPIGetListSortEnum = "NameThenReleaseDate"
	AlbumAPIGetListSortEnumCollectionCount      AlbumAPIGetListSortEnum = "CollectionCount"
)

func (e *AlbumAPIGetListSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "Name":
		fallthrough
	case "ReleaseDate":
		fallthrough
	case "ReleaseDateWithNulls":
		fallthrough
	case "AdditionDate":
		fallthrough
	case "RatingAverage":
		fallthrough
	case "RatingTotal":
		fallthrough
	case "NameThenReleaseDate":
		fallthrough
	case "CollectionCount":
		*e = AlbumAPIGetListSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumAPIGetListSortEnum: %s", s)
	}
}

// AlbumAPIGetListStatusEnum - Filter by entry status (optional).
type AlbumAPIGetListStatusEnum string

const (
	AlbumAPIGetListStatusEnumDraft    AlbumAPIGetListStatusEnum = "Draft"
	AlbumAPIGetListStatusEnumFinished AlbumAPIGetListStatusEnum = "Finished"
	AlbumAPIGetListStatusEnumApproved AlbumAPIGetListStatusEnum = "Approved"
	AlbumAPIGetListStatusEnumLocked   AlbumAPIGetListStatusEnum = "Locked"
)

func (e *AlbumAPIGetListStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Draft":
		fallthrough
	case "Finished":
		fallthrough
	case "Approved":
		fallthrough
	case "Locked":
		*e = AlbumAPIGetListStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlbumAPIGetListStatusEnum: %s", s)
	}
}

type AlbumAPIGetListQueryParams struct {
	// List of advanced filters (optional).
	AdvancedFilters []interface{} `queryParam:"style=form,explode=true,name=advancedFilters"`
	// Filter by artist Id (optional).
	ArtistID []int `queryParam:"style=form,explode=true,name=artistId"`
	// Filter by artist participation status. Only valid if artistId is specified.
	//             Everything (default): Show all albums by that artist (no filter).
	//             OnlyMainAlbums: Show only main albums by that artist.
	//             OnlyCollaborations: Show only collaborations by that artist.
	ArtistParticipationStatus *AlbumAPIGetListArtistParticipationStatusEnum `queryParam:"style=form,explode=true,name=artistParticipationStatus"`
	// Filter by album barcode (optional).
	Barcode *string `queryParam:"style=form,explode=true,name=barcode"`
	// Include child tags, if the tags being filtered by have any.
	ChildTags *bool `queryParam:"style=form,explode=true,name=childTags"`
	// Include child voicebanks, if the artist being filtered by has any.
	ChildVoicebanks *bool `queryParam:"style=form,explode=true,name=childVoicebanks"`
	// Whether to search for deleted entries.
	//             If this is true, only deleted entries will be returned.
	//             If this is false (default), deleted entries are not returned.
	Deleted *bool `queryParam:"style=form,explode=true,name=deleted"`
	// Disc type. By default nothing. Possible values are Album, Single, EP, SplitAlbum, Compilation, Video, Other. Note: only one type supported for now.
	DiscTypes *AlbumAPIGetListDiscTypesEnum `queryParam:"style=form,explode=true,name=discTypes"`
	// Optional fields (optional). Possible values are artists, names, pvs, tags, tracks, webLinks.
	Fields *AlbumAPIGetListFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
	// Whether to load total number of items (optional, default to false).
	GetTotalCount *bool `queryParam:"style=form,explode=true,name=getTotalCount"`
	// Include members of groups. This applies if {artistId} is a group.
	IncludeMembers *bool `queryParam:"style=form,explode=true,name=includeMembers"`
	// Content language preference (optional).
	Lang *AlbumAPIGetListLangEnum `queryParam:"style=form,explode=true,name=lang"`
	// Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).
	MaxResults *int `queryParam:"style=form,explode=true,name=maxResults"`
	// Match mode for artist name (optional, defaults to Exact).
	NameMatchMode *AlbumAPIGetListNameMatchModeEnum `queryParam:"style=form,explode=true,name=nameMatchMode"`
	// Whether the search should prefer accurate matches.
	//             If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.
	//             Requires a text query. Does not support pagination.
	//             This is mostly useful for autocomplete boxes.
	PreferAccurateMatches *bool `queryParam:"style=form,explode=true,name=preferAccurateMatches"`
	// Album name query (optional).
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Filter by albums whose release date is after this date (inclusive).
	ReleaseDateAfter *time.Time `queryParam:"style=form,explode=true,name=releaseDateAfter"`
	// Filter by albums whose release date is before this date (exclusive).
	ReleaseDateBefore *time.Time `queryParam:"style=form,explode=true,name=releaseDateBefore"`
	// Sort rule (optional, defaults to Name).
	//             Possible values are None, Name, ReleaseDate, ReleaseDateWithNulls, AdditionDate, RatingAverage, RatingTotal, NameThenReleaseDate.
	Sort *AlbumAPIGetListSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// First item to be retrieved (optional, defaults to 0).
	Start *int `queryParam:"style=form,explode=true,name=start"`
	// Filter by entry status (optional).
	Status *AlbumAPIGetListStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// Filter by tag Id (optional). This filter can be specified multiple times.
	TagID []int `queryParam:"style=form,explode=true,name=tagId"`
	// Filter by tag name (optional). This filter can be specified multiple times.
	TagName []string `queryParam:"style=form,explode=true,name=tagName"`
}

type AlbumAPIGetListRequest struct {
	QueryParams AlbumAPIGetListQueryParams
}

type AlbumAPIGetListResponse struct {
	Body        []byte
	ContentType string
	// OK
	PartialFindResultAlbumForAPIContract *shared.PartialFindResultAlbumForAPIContract
	StatusCode                           int
	RawResponse                          *http.Response
}
