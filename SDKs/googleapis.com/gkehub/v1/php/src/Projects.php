<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds a new Feature.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesCreateResponse
     */
	public function gkehubProjectsLocationsFeaturesCreate(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/features', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "featureInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Features in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesListResponse
     */
	public function gkehubProjectsLocationsFeaturesList(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/features', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsFeaturesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFeaturesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFeaturesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsListResponse
     */
	public function gkehubProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a MembershipBinding.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsCreateResponse
     */
	public function gkehubProjectsLocationsMembershipsBindingsCreate(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/bindings', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "membershipBindingInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists MembershipBindings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsListResponse
     */
	public function gkehubProjectsLocationsMembershipsBindingsList(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/bindings', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMembershipBindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMembershipBindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a MembershipBinding.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsPatchResponse
     */
	public function gkehubProjectsLocationsMembershipsBindingsPatch(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "membershipBindingInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsBindingsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Membership. **This is currently only supported for GKE clusters on Google Cloud**. To register other clusters, follow the instructions at https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsCreateResponse
     */
	public function gkehubProjectsLocationsMembershipsCreate(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/memberships', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "membershipInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates the manifest for deployment of the GKE connect agent. **This method is used internally by Google-provided libraries.** Most clients should not need to call this method directly.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGenerateConnectManifestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGenerateConnectManifestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGenerateConnectManifestResponse
     */
	public function gkehubProjectsLocationsMembershipsGenerateConnectManifest(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGenerateConnectManifestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGenerateConnectManifestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGenerateConnectManifestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:generateConnectManifest', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGenerateConnectManifestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGenerateConnectManifestRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGenerateConnectManifestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateConnectManifestResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateConnectManifestResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGetIamPolicyResponse
     */
	public function gkehubProjectsLocationsMembershipsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Memberships in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsListResponse
     */
	public function gkehubProjectsLocationsMembershipsList(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/memberships', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMembershipsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMembershipsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsSetIamPolicyResponse
     */
	public function gkehubProjectsLocationsMembershipsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsTestIamPermissionsResponse
     */
	public function gkehubProjectsLocationsMembershipsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsMembershipsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsCancelResponse
     */
	public function gkehubProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsListResponse
     */
	public function gkehubProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesCreateResponse
     */
	public function gkehubProjectsLocationsScopesCreate(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/scopes', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scopeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesDeleteResponse
     */
	public function gkehubProjectsLocationsScopesDelete(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the details of a Scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesGetResponse
     */
	public function gkehubProjectsLocationsScopesGet(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scope = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Scope', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Scopes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesListResponse
     */
	public function gkehubProjectsLocationsScopesList(
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/scopes', \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkehubProjectsLocationsScopesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listScopesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListScopesResponse', 'json');
            }
        }

        return $response;
    }
}