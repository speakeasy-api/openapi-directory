<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MarketplacesOrdersSubscriptionsSubscriptions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Activate a subscription to the orders
     * 
     * At this moment, BeezUP will ensure that your callback url is respecting this specification: 
     * - https://app.swaggerhub.com/apis/BeezUP/public_marketplaces_orders_subscriptions_consumer-dev/1.0#/Subscriptions/Verification
     * 
     * After that we will send you the orders related to your subscription, respecting this specification: 
     * - https://app.swaggerhub.com/apis/BeezUP/public_marketplaces_orders_subscriptions_consumer-dev/1.0#/Subscriptions/PushOrders
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivateSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivateSubscriptionResponse
     */
	public function activateSubscription(
        \OpenAPI\OpenAPI\Models\Operations\ActivateSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivateSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/marketplaces/orders/subscriptions/{id}/activate', \OpenAPI\OpenAPI\Models\Operations\ActivateSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "activateSubscriptionRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivateSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a subscription to the orders
     * 
     * Please take a look at this sequence diagram to understand the subscription process to follow [here](https://www.websequencediagrams.com/files/render?link=SBYbeIc8NGshk6ooCbmjoBLIMl4fIGO1xjJbPBQAglBo0n6BwEReh7NXQiPSjOTX)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionResponse
     */
	public function createSubscription(
        \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/marketplaces/orders/subscriptions/{id}', \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createSubscriptionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deactivate a subscription to the orders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeactivateSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeactivateSubscriptionResponse
     */
	public function deactivateSubscription(
        \OpenAPI\OpenAPI\Models\Operations\DeactivateSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeactivateSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/marketplaces/orders/subscriptions/{id}/deactivate', \OpenAPI\OpenAPI\Models\Operations\DeactivateSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeactivateSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a subscription to the orders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionResponse
     */
	public function deleteSubscription(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/marketplaces/orders/subscriptions/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a subscription to the orders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionResponse
     */
	public function getSubscription(
        \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/marketplaces/orders/subscriptions/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionIndex = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscriptionIndex', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the subscription list
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionListResponse
     */
	public function getSubscriptionList(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/marketplaces/orders/subscriptions/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SubscriptionIndex>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the push reporting related to this subscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionPushReportingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionPushReportingResponse
     */
	public function getSubscriptionPushReporting(
        \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionPushReportingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionPushReportingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/marketplaces/orders/subscriptions/{id}/reporting', \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionPushReportingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSubscriptionPushReportingRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionPushReportingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscriptionPushReportings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SubscriptionPushReporting>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Force retry push orders immediatly
     * 
     * In case your subscription consumption is unavailable and your subscription is still active you can ask to retry immediatly to push orders instead of waiting the next scheduled retry date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetryPushOrdersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetryPushOrdersResponse
     */
	public function retryPushOrders(
        \OpenAPI\OpenAPI\Models\Operations\RetryPushOrdersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetryPushOrdersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/marketplaces/orders/subscriptions/{id}/retry', \OpenAPI\OpenAPI\Models\Operations\RetryPushOrdersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetryPushOrdersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
}