// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GrpcRouteHeaderMatchTypeEnum - Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used.
type GrpcRouteHeaderMatchTypeEnum string

const (
	GrpcRouteHeaderMatchTypeEnumTypeUnspecified   GrpcRouteHeaderMatchTypeEnum = "TYPE_UNSPECIFIED"
	GrpcRouteHeaderMatchTypeEnumExact             GrpcRouteHeaderMatchTypeEnum = "EXACT"
	GrpcRouteHeaderMatchTypeEnumRegularExpression GrpcRouteHeaderMatchTypeEnum = "REGULAR_EXPRESSION"
)

func (e *GrpcRouteHeaderMatchTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "EXACT":
		fallthrough
	case "REGULAR_EXPRESSION":
		*e = GrpcRouteHeaderMatchTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GrpcRouteHeaderMatchTypeEnum: %s", s)
	}
}

// GrpcRouteHeaderMatch - A match against a collection of headers.
type GrpcRouteHeaderMatch struct {
	// Required. The key of the header.
	Key *string `json:"key,omitempty"`
	// Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used.
	Type *GrpcRouteHeaderMatchTypeEnum `json:"type,omitempty"`
	// Required. The value of the header.
	Value *string `json:"value,omitempty"`
}
