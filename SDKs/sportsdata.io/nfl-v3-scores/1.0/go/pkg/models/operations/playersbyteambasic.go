// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PlayersByTeamBasicFormatEnum - Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
type PlayersByTeamBasicFormatEnum string

const (
	PlayersByTeamBasicFormatEnumXML  PlayersByTeamBasicFormatEnum = "XML"
	PlayersByTeamBasicFormatEnumJSON PlayersByTeamBasicFormatEnum = "JSON"
)

func (e PlayersByTeamBasicFormatEnum) ToPointer() *PlayersByTeamBasicFormatEnum {
	return &e
}

func (e *PlayersByTeamBasicFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "XML":
		fallthrough
	case "JSON":
		*e = PlayersByTeamBasicFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlayersByTeamBasicFormatEnum: %v", v)
	}
}

type PlayersByTeamBasicRequest struct {
	// Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
	Format PlayersByTeamBasicFormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// Abbreviation of the team. Example: <code>WAS</code>.
	Team string `pathParam:"style=simple,explode=false,name=team"`
}

type PlayersByTeamBasicResponse struct {
	ContentType                             string
	PlayersByTeamBasic200ApplicationJSONAny interface{}
	StatusCode                              int
	RawResponse                             *http.Response
}
