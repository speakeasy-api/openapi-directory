<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SearchOrdersFilter - Filtering criteria to use for a `SearchOrders` request. Multiple filters
 * 
 * are ANDed together.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SearchOrdersFilter
{
    /**
     * A filter based on the order `customer_id` and any tender `customer_id`
     * 
     * associated with the order. It does not filter based on the
     * [FulfillmentRecipient](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentRecipient) `customer_id`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SearchOrdersCustomerFilter $customerFilter
     */
	#[\JMS\Serializer\Annotation\SerializedName('customer_filter')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SearchOrdersCustomerFilter')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SearchOrdersCustomerFilter $customerFilter = null;
    
    /**
     * Filter for `Order` objects based on whether their `CREATED_AT`,
     * 
     * `CLOSED_AT`, or `UPDATED_AT` timestamps fall within a specified time range.
     * You can specify the time range and which timestamp to filter for. You can filter
     * for only one time range at a time.
     * 
     * For each time range, the start time and end time are inclusive. If the end time
     * is absent, it defaults to the time of the first request for the cursor.
     * 
     * __Important:__ If you use the `DateTimeFilter` in a `SearchOrders` query,
     * you must set the `sort_field` in [OrdersSort](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersSort)
     * to the same field you filter for. For example, if you set the `CLOSED_AT` field
     * in `DateTimeFilter`, you must set the `sort_field` in `SearchOrdersSort` to
     * `CLOSED_AT`. Otherwise, `SearchOrders` throws an error.
     * [Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SearchOrdersDateTimeFilter $dateTimeFilter
     */
	#[\JMS\Serializer\Annotation\SerializedName('date_time_filter')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SearchOrdersDateTimeFilter')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SearchOrdersDateTimeFilter $dateTimeFilter = null;
    
    /**
     * Filter based on [order fulfillment](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillment) information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SearchOrdersFulfillmentFilter $fulfillmentFilter
     */
	#[\JMS\Serializer\Annotation\SerializedName('fulfillment_filter')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SearchOrdersFulfillmentFilter')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SearchOrdersFulfillmentFilter $fulfillmentFilter = null;
    
    /**
     * A filter based on order `source` information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SearchOrdersSourceFilter $sourceFilter
     */
	#[\JMS\Serializer\Annotation\SerializedName('source_filter')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SearchOrdersSourceFilter')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SearchOrdersSourceFilter $sourceFilter = null;
    
    /**
     * Filter by the current order `state`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SearchOrdersStateFilter $stateFilter
     */
	#[\JMS\Serializer\Annotation\SerializedName('state_filter')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SearchOrdersStateFilter')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SearchOrdersStateFilter $stateFilter = null;
    
	public function __construct()
	{
		$this->customerFilter = null;
		$this->dateTimeFilter = null;
		$this->fulfillmentFilter = null;
		$this->sourceFilter = null;
		$this->stateFilter = null;
	}
}
