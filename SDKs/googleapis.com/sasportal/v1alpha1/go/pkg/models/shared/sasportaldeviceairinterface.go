// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SasPortalDeviceAirInterfaceRadioTechnologyEnum - Conditional. This field specifies the radio access technology that is used for the CBSD.
type SasPortalDeviceAirInterfaceRadioTechnologyEnum string

const (
	SasPortalDeviceAirInterfaceRadioTechnologyEnumRadioTechnologyUnspecified SasPortalDeviceAirInterfaceRadioTechnologyEnum = "RADIO_TECHNOLOGY_UNSPECIFIED"
	SasPortalDeviceAirInterfaceRadioTechnologyEnumEUtra                      SasPortalDeviceAirInterfaceRadioTechnologyEnum = "E_UTRA"
	SasPortalDeviceAirInterfaceRadioTechnologyEnumCambiumNetworks            SasPortalDeviceAirInterfaceRadioTechnologyEnum = "CAMBIUM_NETWORKS"
	SasPortalDeviceAirInterfaceRadioTechnologyEnumFourGBbwSaa1               SasPortalDeviceAirInterfaceRadioTechnologyEnum = "FOUR_G_BBW_SAA_1"
	SasPortalDeviceAirInterfaceRadioTechnologyEnumNr                         SasPortalDeviceAirInterfaceRadioTechnologyEnum = "NR"
	SasPortalDeviceAirInterfaceRadioTechnologyEnumDoodleCbrs                 SasPortalDeviceAirInterfaceRadioTechnologyEnum = "DOODLE_CBRS"
	SasPortalDeviceAirInterfaceRadioTechnologyEnumCw                         SasPortalDeviceAirInterfaceRadioTechnologyEnum = "CW"
	SasPortalDeviceAirInterfaceRadioTechnologyEnumRedline                    SasPortalDeviceAirInterfaceRadioTechnologyEnum = "REDLINE"
	SasPortalDeviceAirInterfaceRadioTechnologyEnumTaranaWireless             SasPortalDeviceAirInterfaceRadioTechnologyEnum = "TARANA_WIRELESS"
)

func (e SasPortalDeviceAirInterfaceRadioTechnologyEnum) ToPointer() *SasPortalDeviceAirInterfaceRadioTechnologyEnum {
	return &e
}

func (e *SasPortalDeviceAirInterfaceRadioTechnologyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RADIO_TECHNOLOGY_UNSPECIFIED":
		fallthrough
	case "E_UTRA":
		fallthrough
	case "CAMBIUM_NETWORKS":
		fallthrough
	case "FOUR_G_BBW_SAA_1":
		fallthrough
	case "NR":
		fallthrough
	case "DOODLE_CBRS":
		fallthrough
	case "CW":
		fallthrough
	case "REDLINE":
		fallthrough
	case "TARANA_WIRELESS":
		*e = SasPortalDeviceAirInterfaceRadioTechnologyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SasPortalDeviceAirInterfaceRadioTechnologyEnum: %v", v)
	}
}

// SasPortalDeviceAirInterface - Information about the device's air interface.
type SasPortalDeviceAirInterface struct {
	// Conditional. This field specifies the radio access technology that is used for the CBSD.
	RadioTechnology *SasPortalDeviceAirInterfaceRadioTechnologyEnum `json:"radioTechnology,omitempty"`
	// Optional. This field is related to the `radioTechnology` and provides the air interface specification that the CBSD is compliant with at the time of registration.
	SupportedSpec *string `json:"supportedSpec,omitempty"`
}
