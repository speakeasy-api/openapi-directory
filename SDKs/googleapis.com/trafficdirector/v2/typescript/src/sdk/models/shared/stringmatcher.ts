/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RegexMatcher } from "./regexmatcher";
import { Expose, Type } from "class-transformer";

/**
 * Specifies the way to match a string. [#next-free-field: 7]
 */
export class StringMatcher extends SpeakeasyBase {
  /**
   * The input string must match exactly the string specified here. Examples: * *abc* only matches the value *abc*.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exact" })
  exact?: string;

  /**
   * If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no effect for the safe_regex match. For example, the matcher *data* will match both input string *Data* and *data* if set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ignoreCase" })
  ignoreCase?: boolean;

  /**
   * The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *abc.xyz*
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prefix" })
  prefix?: string;

  /**
   * The input string must match the regular expression specified here. The regex grammar is defined `here `_. Examples: * The regex ``\d{3}`` matches the value *123* * The regex ``\d{3}`` does not match the value *1234* * The regex ``\d{3}`` does not match the value *123.456* .. attention:: This field has been deprecated in favor of `safe_regex` as it is not safe for use with untrusted input in all cases.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "regex" })
  regex?: string;

  /**
   * A regex matcher designed for safety when used with untrusted input.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "safeRegex" })
  @Type(() => RegexMatcher)
  safeRegex?: RegexMatcher;

  /**
   * The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *xyz.abc*
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suffix" })
  suffix?: string;
}
