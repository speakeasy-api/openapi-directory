/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GetZRAccountSettings200ApplicationJSON1ZoomRooms {
    /**
     * Enable multiple participants to [share content simultaneously](https://support.zoom.us/hc/en-us/articles/360017767812-Sharing-Multiple-Screens-in-a-Zoom-Room) by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_multiple_content_sharing")
    public Boolean allowMultipleContentSharing;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withAllowMultipleContentSharing(Boolean allowMultipleContentSharing) {
        this.allowMultipleContentSharing = allowMultipleContentSharing;
        return this;
    }
    
    /**
     * Enable [automated audio test](https://support.zoom.us/hc/en-us/articles/360000319683-Zoom-Rooms-Daily-Audio-Testing) to ensure high quality audio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_device_daily_auto_test")
    public Boolean audioDeviceDailyAutoTest;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withAudioDeviceDailyAutoTest(Boolean audioDeviceDailyAutoTest) {
        this.audioDeviceDailyAutoTest = audioDeviceDailyAutoTest;
        return this;
    }
    
    /**
     * Enable participants in a Zoom Room to share their laptop screen on the Zoom Room TV without entering a meeting ID or sharing code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_direct_sharing")
    public Boolean autoDirectSharing;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withAutoDirectSharing(Boolean autoDirectSharing) {
        this.autoDirectSharing = autoDirectSharing;
        return this;
    }
    
    /**
     * Automatically start scheduled meetings according to the start time listed on the calendar associated with the room. A meeting alert will appear 10 minutes prior to the scheduled time on the TV.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_start_scheduled_meeting")
    public Boolean autoStartScheduledMeeting;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withAutoStartScheduledMeeting(Boolean autoStartScheduledMeeting) {
        this.autoStartScheduledMeeting = autoStartScheduledMeeting;
        return this;
    }
    
    /**
     * Automatically stop the meeting at the end time as scheduled and listed in the calendar associated with the room. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_stop_scheduled_meeting")
    public Boolean autoStopScheduledMeeting;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withAutoStopScheduledMeeting(Boolean autoStopScheduledMeeting) {
        this.autoStopScheduledMeeting = autoStopScheduledMeeting;
        return this;
    }
    
    /**
     * Use facial detection technology to [determine and display the attendees count](https://support.zoom.us/hc/en-us/articles/360031027111-Count-Attendees-in-Zoom-Rooms) after meetings on Dashboard.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count_attendees_number_in_room")
    public Boolean countAttendeesNumberInRoom;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withCountAttendeesNumberInRoom(Boolean countAttendeesNumberInRoom) {
        this.countAttendeesNumberInRoom = countAttendeesNumberInRoom;
        return this;
    }
    
    /**
     * Display a [survey](https://support.zoom.us/hc/en-us/articles/214193146-End-of-Meeting-Attendee-Feedback) at the end of each meeting regarding the audio and video quality on the Zoom Rooms Controller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_feedback_survey")
    public Boolean displayFeedbackSurvey;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withDisplayFeedbackSurvey(Boolean displayFeedbackSurvey) {
        this.displayFeedbackSurvey = displayFeedbackSurvey;
        return this;
    }
    
    /**
     *  Show the same information on the TV that is shown on the controller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_meeting_list")
    public Boolean displayMeetingList;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withDisplayMeetingList(Boolean displayMeetingList) {
        this.displayMeetingList = displayMeetingList;
        return this;
    }
    
    /**
     * Allow to display room name, time and sharing key on the top portion of TV.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_top_banner")
    public Boolean displayTopBanner;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withDisplayTopBanner(Boolean displayTopBanner) {
        this.displayTopBanner = displayTopBanner;
        return this;
    }
    
    /**
     * Allow in-room participants to input email address where they can recieve the recording before starting a recording if the meeting was created on the Scheduling Display or if it was started using the "Meet Now" option.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_address_prompt_before_recording")
    public Boolean emailAddressPromptBeforeRecording;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withEmailAddressPromptBeforeRecording(Boolean emailAddressPromptBeforeRecording) {
        this.emailAddressPromptBeforeRecording = emailAddressPromptBeforeRecording;
        return this;
    }
    
    /**
     * Encrypt screen and content shared in meetings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encrypt_shared_screen_content")
    public Boolean encryptSharedScreenContent;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withEncryptSharedScreenContent(Boolean encryptSharedScreenContent) {
        this.encryptSharedScreenContent = encryptSharedScreenContent;
        return this;
    }
    
    /**
     * If enabled, the meeting host and meeting ID (in addition to the meeting topic) are hidden from the Zoom Rooms display for private meetings. This affects meetings that were originally scheduled as private, as well as public meetings that were transformed to private.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hide_id_for_private_meeting")
    public Boolean hideIdForPrivateMeeting;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withHideIdForPrivateMeeting(Boolean hideIdForPrivateMeeting) {
        this.hideIdForPrivateMeeting = hideIdForPrivateMeeting;
        return this;
    }
    
    /**
     * Set [Zoom Rooms as the alternative host](https://support.zoom.us/hc/en-us/articles/203614149-Zoom-Rooms-as-Alternative-Host).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("make_room_alternative_host")
    public Boolean makeRoomAlternativeHost;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withMakeRoomAlternativeHost(Boolean makeRoomAlternativeHost) {
        this.makeRoomAlternativeHost = makeRoomAlternativeHost;
        return this;
    }
    
    /**
     * Enable secure connection between Zoom Rooms computer and controller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secure_connection_channel")
    public Boolean secureConnectionChannel;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withSecureConnectionChannel(Boolean secureConnectionChannel) {
        this.secureConnectionChannel = secureConnectionChannel;
        return this;
    }
    
    /**
     * Restrict[ sending Whiteboard sessions](https://support.zoom.us/hc/en-us/articles/115004797286-Using-the-Whiteboard-in-Zoom-Rooms-for-Touch#h_781274b3-5237-4320-8826-be2120b00e21) to contacts or internal users only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("send_whiteboard_to_internal_contact_only")
    public Boolean sendWhiteboardToInternalContactOnly;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withSendWhiteboardToInternalContactOnly(Boolean sendWhiteboardToInternalContactOnly) {
        this.sendWhiteboardToInternalContactOnly = sendWhiteboardToInternalContactOnly;
        return this;
    }
    
    /**
     * If enabled, the upcoming meeting alert message will be shown on the TV display. The value of the `upcoming_meeting_alert` field should be set to `true` to use this field. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_alert_before_meeting")
    public Boolean showAlertBeforeMeeting;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withShowAlertBeforeMeeting(Boolean showAlertBeforeMeeting) {
        this.showAlertBeforeMeeting = showAlertBeforeMeeting;
        return this;
    }
    
    /**
     * Allow users to see call history of joined meetings and phone calls from the Zoom Rooms controller.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_call_history_in_room")
    public Boolean showCallHistoryInRoom;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withShowCallHistoryInRoom(Boolean showCallHistoryInRoom) {
        this.showCallHistoryInRoom = showCallHistoryInRoom;
        return this;
    }
    
    /**
     * If enabled, you can invite participants from the contact list during a meeting or when starting a meeting
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_contact_list_on_controller")
    public Boolean showContactListOnController;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withShowContactListOnController(Boolean showContactListOnController) {
        this.showContactListOnController = showContactListOnController;
        return this;
    }
    
    /**
     * When enabled, meeting participants that are audio only or have their video turned off will also be shown on the Zoom Rooms display by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_non_video_participants")
    public Boolean showNonVideoParticipants;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withShowNonVideoParticipants(Boolean showNonVideoParticipants) {
        this.showNonVideoParticipants = showNonVideoParticipants;
        return this;
    }
    
    /**
     * Require the AirPlay service to be [started by an administrator](https://support.zoom.us/hc/en-us/articles/204726885-Screen-Share-Using-Airplay-Mirroring#h_a342ad38-4e46-47a8-a1d9-cded3b144b39) rather than always being available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_airplay_manually")
    public Boolean startAirplayManually;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withStartAirplayManually(Boolean startAirplayManually) {
        this.startAirplayManually = startAirplayManually;
        return this;
    }
    
    /**
     * Allow users to share content via Apple Screen Mirroring (called Airplay on iOS 11 or earlier) in Zoom Rooms
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_airplay_mirroring")
    public Boolean startAirplayMirroring;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withStartAirplayMirroring(Boolean startAirplayMirroring) {
        this.startAirplayMirroring = startAirplayMirroring;
        return this;
    }
    
    /**
     * Integrate with Skype for Business, GoToMeeting, or WebEx and show the meeting dial-in button on the meeting list tab for Zoom Rooms Controllers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("support_join_3rd_party_meeting")
    public Boolean supportJoin3rdPartyMeeting;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withSupportJoin3rdPartyMeeting(Boolean supportJoin3rdPartyMeeting) {
        this.supportJoin3rdPartyMeeting = supportJoin3rdPartyMeeting;
        return this;
    }
    
    /**
     * If enabled, all meetings in this room will be treated as [private meetings](https://support.zoom.us/hc/en-us/articles/115001051063-Zoom-Rooms-Private-Meetings), and the Zoom Room will display "Your Name's Meeting" instead of the real meeting topic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transform_meeting_to_private")
    public Boolean transformMeetingToPrivate;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withTransformMeetingToPrivate(Boolean transformMeetingToPrivate) {
        this.transformMeetingToPrivate = transformMeetingToPrivate;
        return this;
    }
    
    /**
     * If enabled, a reminder will display 10 minutes prior to the next scheduled meeting on the controller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upcoming_meeting_alert")
    public Boolean upcomingMeetingAlert;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withUpcomingMeetingAlert(Boolean upcomingMeetingAlert) {
        this.upcomingMeetingAlert = upcomingMeetingAlert;
        return this;
    }
    
    /**
     * [Restart](https://support.zoom.us/hc/en-us/articles/205418949-Zoom-Rooms-Weekly-System-Restart) the Zoom Rooms computer and controller once a week.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weekly_system_restart")
    public Boolean weeklySystemRestart;
    public GetZRAccountSettings200ApplicationJSON1ZoomRooms withWeeklySystemRestart(Boolean weeklySystemRestart) {
        this.weeklySystemRestart = weeklySystemRestart;
        return this;
    }
    
}
