// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetEffectivePermissionsForPathQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

type GetEffectivePermissionsForPathHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GetEffectivePermissionsForPathRequestBody struct {
	// The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
	CatalogID *string `json:"CatalogId,omitempty"`
	// The maximum number of results to return.
	MaxResults *int64 `json:"MaxResults,omitempty"`
	// A continuation token, if this is not the first call to retrieve this list.
	NextToken *string `json:"NextToken,omitempty"`
	// The Amazon Resource Name (ARN) of the resource for which you want to get permissions.
	ResourceArn string `json:"ResourceArn"`
}

type GetEffectivePermissionsForPathRequest struct {
	QueryParams GetEffectivePermissionsForPathQueryParams
	Headers     GetEffectivePermissionsForPathHeaders
	Request     GetEffectivePermissionsForPathRequestBody `request:"mediaType=application/json"`
}

type GetEffectivePermissionsForPathResponse struct {
	ContentType string
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// Success
	GetEffectivePermissionsForPathResponse *shared.GetEffectivePermissionsForPathResponse
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
