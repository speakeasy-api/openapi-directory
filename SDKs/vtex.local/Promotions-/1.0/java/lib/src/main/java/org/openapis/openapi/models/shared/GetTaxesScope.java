/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetTaxesScope - Scope of the tax.
 */
public class GetTaxesScope {
    /**
     * Determines if the tax applies to all products in the Catalog (`true`) or not (`false`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allCatalog")
    public Boolean allCatalog;

    public GetTaxesScope withAllCatalog(Boolean allCatalog) {
        this.allCatalog = allCatalog;
        return this;
    }
    
    /**
     * Quantity of brands which activate or deactivate the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brands")
    public Double brands;

    public GetTaxesScope withBrands(Double brands) {
        this.brands = brands;
        return this;
    }
    
    /**
     * If set to `true`, this tax will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this tax not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brandsAreInclusive")
    public Boolean brandsAreInclusive;

    public GetTaxesScope withBrandsAreInclusive(Boolean brandsAreInclusive) {
        this.brandsAreInclusive = brandsAreInclusive;
        return this;
    }
    
    /**
     * Quantity of categories which activate or deactivate the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public Double categories;

    public GetTaxesScope withCategories(Double categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * If set to `true`, this tax will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this tax not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categoriesAreInclusive")
    public Boolean categoriesAreInclusive;

    public GetTaxesScope withCategoriesAreInclusive(Boolean categoriesAreInclusive) {
        this.categoriesAreInclusive = categoriesAreInclusive;
        return this;
    }
    
    /**
     * Quantity of collections which activate or deactivate the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections")
    public Double collections;

    public GetTaxesScope withCollections(Double collections) {
        this.collections = collections;
        return this;
    }
    
    /**
     * If set to `true`, this tax will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this tax not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collectionsAreInclusive")
    public Boolean collectionsAreInclusive;

    public GetTaxesScope withCollectionsAreInclusive(Boolean collectionsAreInclusive) {
        this.collectionsAreInclusive = collectionsAreInclusive;
        return this;
    }
    
    /**
     * Quantity of products which activate or deactivate the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("products")
    public Double products;

    public GetTaxesScope withProducts(Double products) {
        this.products = products;
        return this;
    }
    
    /**
     * If set to `true`, this tax will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this tax not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productsAreInclusive")
    public Boolean productsAreInclusive;

    public GetTaxesScope withProductsAreInclusive(Boolean productsAreInclusive) {
        this.productsAreInclusive = productsAreInclusive;
        return this;
    }
    
    /**
     * Quantity of sellers which activate or deactivate the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellers")
    public Double sellers;

    public GetTaxesScope withSellers(Double sellers) {
        this.sellers = sellers;
        return this;
    }
    
    /**
     * If set to `true`, this tax will be applied to any seller present on the `sellers` field. If set to `false`, sellers present on that field will make this tax not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellersAreInclusive")
    public Boolean sellersAreInclusive;

    public GetTaxesScope withSellersAreInclusive(Boolean sellersAreInclusive) {
        this.sellersAreInclusive = sellersAreInclusive;
        return this;
    }
    
    /**
     * Quantity of SKUs which activate or deactivate the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skus")
    public Double skus;

    public GetTaxesScope withSkus(Double skus) {
        this.skus = skus;
        return this;
    }
    
    /**
     * If set to `true`, this tax will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this tax not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skusAreInclusive")
    public Boolean skusAreInclusive;

    public GetTaxesScope withSkusAreInclusive(Boolean skusAreInclusive) {
        this.skusAreInclusive = skusAreInclusive;
        return this;
    }
    
    public GetTaxesScope(){}
}
