// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateFleetHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateFleetRequestBody struct {
	// The fleet name to display.
	DisplayName *string `json:"DisplayName,omitempty"`
	// A unique name for the fleet.
	FleetName string `json:"FleetName"`
	// The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region.
	OptimizeForEndUserLocation *bool `json:"OptimizeForEndUserLocation,omitempty"`
	//  The tags to add to the resource. A tag is a key-value pair.
	Tags map[string]string `json:"Tags,omitempty"`
}

type CreateFleetRequest struct {
	Headers CreateFleetHeaders
	Request CreateFleetRequestBody `request:"mediaType=application/json"`
}

type CreateFleetResponse struct {
	ContentType string
	// Success
	CreateFleetResponse *shared.CreateFleetResponse
	// InternalServerErrorException
	InternalServerErrorException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
