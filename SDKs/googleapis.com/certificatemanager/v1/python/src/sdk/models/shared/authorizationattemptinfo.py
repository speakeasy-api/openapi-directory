"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AuthorizationAttemptInfoFailureReasonEnum(str, Enum):
    r"""Output only. Reason for failure of the authorization attempt for the domain."""
    FAILURE_REASON_UNSPECIFIED = 'FAILURE_REASON_UNSPECIFIED'
    CONFIG = 'CONFIG'
    CAA = 'CAA'
    RATE_LIMITED = 'RATE_LIMITED'

class AuthorizationAttemptInfoStateEnum(str, Enum):
    r"""Output only. State of the domain for managed certificate issuance."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    AUTHORIZING = 'AUTHORIZING'
    AUTHORIZED = 'AUTHORIZED'
    FAILED = 'FAILED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuthorizationAttemptInfo:
    r"""State of the latest attempt to authorize a domain for certificate issuance."""
    
    details: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Output only. Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use FailureReason enum."""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""Domain name of the authorization attempt."""  
    failure_reason: Optional[AuthorizationAttemptInfoFailureReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureReason'), 'exclude': lambda f: f is None }})
    r"""Output only. Reason for failure of the authorization attempt for the domain."""  
    state: Optional[AuthorizationAttemptInfoStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. State of the domain for managed certificate issuance."""  
    