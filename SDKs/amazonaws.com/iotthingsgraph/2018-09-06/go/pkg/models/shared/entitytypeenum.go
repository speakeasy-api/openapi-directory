// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EntityTypeEnum string

const (
	EntityTypeEnumDevice      EntityTypeEnum = "DEVICE"
	EntityTypeEnumService     EntityTypeEnum = "SERVICE"
	EntityTypeEnumDeviceModel EntityTypeEnum = "DEVICE_MODEL"
	EntityTypeEnumCapability  EntityTypeEnum = "CAPABILITY"
	EntityTypeEnumState       EntityTypeEnum = "STATE"
	EntityTypeEnumAction      EntityTypeEnum = "ACTION"
	EntityTypeEnumEvent       EntityTypeEnum = "EVENT"
	EntityTypeEnumProperty    EntityTypeEnum = "PROPERTY"
	EntityTypeEnumMapping     EntityTypeEnum = "MAPPING"
	EntityTypeEnumEnum        EntityTypeEnum = "ENUM"
)

func (e EntityTypeEnum) ToPointer() *EntityTypeEnum {
	return &e
}

func (e *EntityTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEVICE":
		fallthrough
	case "SERVICE":
		fallthrough
	case "DEVICE_MODEL":
		fallthrough
	case "CAPABILITY":
		fallthrough
	case "STATE":
		fallthrough
	case "ACTION":
		fallthrough
	case "EVENT":
		fallthrough
	case "PROPERTY":
		fallthrough
	case "MAPPING":
		fallthrough
	case "ENUM":
		*e = EntityTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityTypeEnum: %v", v)
	}
}
