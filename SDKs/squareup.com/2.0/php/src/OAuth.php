<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class OAuth 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * ObtainToken
     * 
     * Returns an OAuth access token.
     * 
     * The endpoint supports distinct methods of obtaining OAuth access tokens.
     * Applications specify a method by adding the `grant_type` parameter
     * in the request and also provide relevant information.
     * 
     * __Note:__ Regardless of the method application specified,
     * the endpoint always returns two items; an OAuth access token and
     * a refresh token in the response.
     * 
     * __OAuth tokens should only live on secure servers. Application clients
     * should never interact directly with OAuth tokens__.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ObtainTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ObtainTokenResponse
     */
	public function obtainToken(
        \OpenAPI\OpenAPI\Models\Shared\ObtainTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ObtainTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth2/token');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ObtainTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obtainTokenResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ObtainTokenResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RenewToken
     * 
     * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see
     * [Migrate from Renew to Refresh OAuth Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
     * 
     * 
     * Renews an OAuth access token before it expires.
     * 
     * OAuth access tokens besides your application's personal access token expire after __30 days__.
     * You can also renew expired tokens within __15 days__ of their expiration.
     * You cannot renew an access token that has been expired for more than 15 days.
     * Instead, the associated user must re-complete the OAuth flow from the beginning.
     * 
     * __Important:__ The `Authorization` header for this endpoint must have the
     * following format:
     * 
     * ```
     * Authorization: Client APPLICATION_SECRET
     * ```
     * 
     * Replace `APPLICATION_SECRET` with the application secret on the Credentials
     * page in the [developer dashboard](https://developer.squareup.com/apps).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RenewTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RenewTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RenewTokenResponse
     */
	public function renewToken(
        \OpenAPI\OpenAPI\Models\Operations\RenewTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RenewTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RenewTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth2/clients/{client_id}/access-token/renew', \OpenAPI\OpenAPI\Models\Operations\RenewTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "renewTokenRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RenewTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->renewTokenResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RenewTokenResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RevokeToken
     * 
     * Revokes an access token generated with the OAuth flow.
     * 
     * If an account has more than one OAuth access token for your application, this
     * endpoint revokes all of them, regardless of which token you specify. When an
     * OAuth access token is revoked, all of the active subscriptions associated
     * with that OAuth token are canceled immediately.
     * 
     * __Important:__ The `Authorization` header for this endpoint must have the
     * following format:
     * 
     * ```
     * Authorization: Client APPLICATION_SECRET
     * ```
     * 
     * Replace `APPLICATION_SECRET` with the application secret on the OAuth
     * page in the [developer dashboard](https://developer.squareup.com/apps).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RevokeTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RevokeTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RevokeTokenResponse
     */
	public function revokeToken(
        \OpenAPI\OpenAPI\Models\Shared\RevokeTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RevokeTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RevokeTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth2/revoke');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RevokeTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->revokeTokenResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RevokeTokenResponse', 'json');
            }
        }

        return $response;
    }
}