"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class APICalls:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_records_format_(self, request: operations.GetRecordsFormatRequest) -> operations.GetRecordsFormatResponse:
        r"""Run queries against DigitalNZ metadata search service.
        This is the main search endpoint allowing queries against the records database.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRecordsFormatRequest, base_url, '/records.{format}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetRecordsFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRecordsFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRecordsFormat200ApplicationJSON])
                res.get_records_format_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_records_format_400_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_records_format_403_application_json_object = out

        return res

    def get_records_record_id_format_(self, request: operations.GetRecordsRecordIDFormatRequest) -> operations.GetRecordsRecordIDFormatResponse:
        r"""View metadata associated with a single record.
        If you know its `record_id` you can use this endpoint to view all metadata associated with that specific record.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRecordsRecordIDFormatRequest, base_url, '/records/{record_id}.{format}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetRecordsRecordIDFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRecordsRecordIDFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Record])
                res.record = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_records_record_id_format_403_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_records_record_id_format_404_application_json_object = out

        return res

    def get_records_record_id_more_like_this_format_(self, request: operations.GetRecordsRecordIDMoreLikeThisFormatRequest) -> operations.GetRecordsRecordIDMoreLikeThisFormatResponse:
        r"""The \\"More Like This\\" call returns similar records to the specified ID.
        This feature returns a set of search results that are similar (ie have similar metadata) to a specific record.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRecordsRecordIDMoreLikeThisFormatRequest, base_url, '/records/{record_id}/more_like_this.{format}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetRecordsRecordIDMoreLikeThisFormatRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRecordsRecordIDMoreLikeThisFormatResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRecordsRecordIDMoreLikeThisFormat200ApplicationJSON])
                res.get_records_record_id_more_like_this_format_200_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_records_record_id_more_like_this_format_403_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_records_record_id_more_like_this_format_404_application_json_object = out

        return res

    