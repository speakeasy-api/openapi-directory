"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attributevalue as shared_attributevalue
from ..shared import returnvaluesonconditioncheckfailure_enum as shared_returnvaluesonconditioncheckfailure_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Put:
    r"""Represents a request to perform a <code>PutItem</code> operation."""
    
    item: dict[str, shared_attributevalue.AttributeValue] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Item') }})  
    table_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableName') }})  
    condition_expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConditionExpression'), 'exclude': lambda f: f is None }})  
    expression_attribute_names: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpressionAttributeNames'), 'exclude': lambda f: f is None }})  
    expression_attribute_values: Optional[dict[str, shared_attributevalue.AttributeValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpressionAttributeValues'), 'exclude': lambda f: f is None }})  
    return_values_on_condition_check_failure: Optional[shared_returnvaluesonconditioncheckfailure_enum.ReturnValuesOnConditionCheckFailureEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReturnValuesOnConditionCheckFailure'), 'exclude': lambda f: f is None }})  
    