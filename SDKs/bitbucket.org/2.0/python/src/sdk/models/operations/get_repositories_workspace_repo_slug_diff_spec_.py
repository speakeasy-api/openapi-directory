"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import security as shared_security
from typing import Any, Optional


@dataclasses.dataclass
class GetRepositoriesWorkspaceRepoSlugDiffSpecSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    oauth2: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetRepositoriesWorkspaceRepoSlugDiffSpecRequest:
    
    repo_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo_slug', 'style': 'simple', 'explode': False }})
    r"""This can either be the repository slug or the UUID of the repository,
    surrounded by curly-braces, for example: `{repository UUID}`.
    """  
    spec: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spec', 'style': 'simple', 'explode': False }})
    r"""A commit SHA (e.g. `3a8b42`) or a commit range using double dot
    notation (e.g. `3a8b42..9ff173`).
    """  
    workspace: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspace', 'style': 'simple', 'explode': False }})
    r"""This can either be the workspace ID (slug) or the workspace UUID
    surrounded by curly-braces, for example: `{workspace UUID}`.
    """  
    binary: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'binary', 'style': 'form', 'explode': True }})
    r"""Generate diffs that include binary files, true if omitted."""  
    context: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'context', 'style': 'form', 'explode': True }})
    r"""Generate diffs with <n> lines of context instead of the usual three."""  
    ignore_whitespace: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ignore_whitespace', 'style': 'form', 'explode': True }})
    r"""Generate diffs that ignore whitespace."""  
    merge: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'merge', 'style': 'form', 'explode': True }})
    r"""This parameter is deprecated and will be removed at the end
    of 2022. The 'topic' parameter should be used instead. The
    'merge' and 'topic' parameters cannot be both used at the same
    time.
    
    If true, the source commit is merged into the
    destination commit, and then a diff from the
    destination to the merge result is returned. If false,
    a simple 'two dot' diff between the source and
    destination is returned. True if omitted.
    """  
    path: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'path', 'style': 'form', 'explode': True }})
    r"""Limit the diff to a particular file (this parameter
    can be repeated for multiple paths).
    """  
    renames: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'renames', 'style': 'form', 'explode': True }})
    r"""Whether to perform rename detection, true if omitted."""  
    topic: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'topic', 'style': 'form', 'explode': True }})
    r"""If true, returns 2-way 'three-dot' diff.
    This is a diff between the source commit and the merge base
    of the source commit and the destination commit.
    If false, a simple 'two dot' diff between the source and
    destination is returned.
    """  
    

@dataclasses.dataclass
class GetRepositoriesWorkspaceRepoSlugDiffSpecResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""If the diff was too large and timed out.
    
    Since this endpoint does not employ any form of pagination, but
    instead returns the diff as a single document, it can run into
    trouble on very large diffs. If Bitbucket times out in cases
    like these, a 555 status code is returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    