/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { CollectdValue } from "./collectdvalue";
import { TypedValue } from "./typedvalue";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A collection of data points sent from a collectd-based plugin. See the collectd documentation for more information.
 */
export class CollectdPayload extends SpeakeasyBase {
  /**
   * The end time of the interval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  endTime?: string;

  /**
   * The measurement metadata. Example: "process_id" -> 12345
   */
  @SpeakeasyMetadata({ elemType: TypedValue })
  @Expose({ name: "metadata" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TypedValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TypedValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  metadata?: Record<string, TypedValue>;

  /**
   * The name of the plugin. Example: "disk".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "plugin" })
  plugin?: string;

  /**
   * The instance name of the plugin Example: "hdcl".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pluginInstance" })
  pluginInstance?: string;

  /**
   * The start time of the interval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  startTime?: string;

  /**
   * The measurement type. Example: "memory".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * The measurement type instance. Example: "used".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "typeInstance" })
  typeInstance?: string;

  /**
   * The measured values during this time interval. Each value must have a different data_source_name.
   */
  @SpeakeasyMetadata({ elemType: CollectdValue })
  @Expose({ name: "values" })
  @Type(() => CollectdValue)
  values?: CollectdValue[];
}
