"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import invalidfield as shared_invalidfield
from ..shared import jsonobject as shared_jsonobject
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RestServiceError:
    r"""Unauthorized - authentication required."""
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})
    r"""A human-readable explanation specific to this occurrence of the problem."""  
    error_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCode') }})
    r"""A code that identifies the problem type."""  
    status: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The HTTP status code."""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""A short, human-readable summary of the problem type."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A URI that identifies the problem type, pointing to human-readable documentation on this problem type."""  
    instance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instance'), 'exclude': lambda f: f is None }})
    r"""A unique URI that identifies the specific occurrence of the problem."""  
    invalid_fields: Optional[list[shared_invalidfield.InvalidField]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalidFields'), 'exclude': lambda f: f is None }})
    r"""Detailed explanation of each validation error, when applicable."""  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId'), 'exclude': lambda f: f is None }})
    r"""A unique reference for the request, essentially the same as `pspReference`."""  
    response: Optional[shared_jsonobject.JSONObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})  
    