"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import account_unauthorized as shared_account_unauthorized
from ..shared import inbound_numbers as shared_inbound_numbers
from ..shared import search_pattern_enum as shared_search_pattern_enum
from typing import Optional


@dataclasses.dataclass
class GetOwnedNumbersRequest:
    
    application_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'application_id', 'style': 'form', 'explode': True }})
    r"""The Application that you want to return the numbers for."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})  
    has_application: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'has_application', 'style': 'form', 'explode': True }})
    r"""Set this optional field to `true` to restrict your results to numbers
    associated with an Application (any Application). Set to `false` to
    find all numbers not associated with any Application. Omit the field
    to avoid filtering on whether or not the number is assigned to an
    Application.
    """  
    index: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'index', 'style': 'form', 'explode': True }})
    r"""Page index"""  
    pattern: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pattern', 'style': 'form', 'explode': True }})
    r"""The number pattern you want to search for. Use in conjunction with `search_pattern`."""  
    search_pattern: Optional[shared_search_pattern_enum.SearchPatternEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search_pattern', 'style': 'form', 'explode': True }})
    r"""The strategy you want to use for matching:
    
    
    * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA)
    * `1` - Search for numbers that contain `pattern`
    * `2` - Search for numbers that end with `pattern`
    """  
    size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""Page size"""  
    

@dataclasses.dataclass
class GetOwnedNumbersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account_unauthorized: Optional[shared_account_unauthorized.AccountUnauthorized] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    body: Optional[bytes] = dataclasses.field(default=None)  
    inbound_numbers: Optional[shared_inbound_numbers.InboundNumbers] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    