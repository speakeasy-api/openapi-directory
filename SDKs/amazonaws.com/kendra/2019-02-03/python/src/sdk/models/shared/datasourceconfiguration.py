"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import alfrescoconfiguration as shared_alfrescoconfiguration
from ..shared import boxconfiguration as shared_boxconfiguration
from ..shared import confluenceconfiguration as shared_confluenceconfiguration
from ..shared import databaseconfiguration as shared_databaseconfiguration
from ..shared import fsxconfiguration as shared_fsxconfiguration
from ..shared import githubconfiguration as shared_githubconfiguration
from ..shared import googledriveconfiguration as shared_googledriveconfiguration
from ..shared import jiraconfiguration as shared_jiraconfiguration
from ..shared import onedriveconfiguration as shared_onedriveconfiguration
from ..shared import quipconfiguration as shared_quipconfiguration
from ..shared import s3datasourceconfiguration as shared_s3datasourceconfiguration
from ..shared import salesforceconfiguration as shared_salesforceconfiguration
from ..shared import servicenowconfiguration as shared_servicenowconfiguration
from ..shared import sharepointconfiguration as shared_sharepointconfiguration
from ..shared import slackconfiguration as shared_slackconfiguration
from ..shared import templateconfiguration as shared_templateconfiguration
from ..shared import webcrawlerconfiguration as shared_webcrawlerconfiguration
from ..shared import workdocsconfiguration as shared_workdocsconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataSourceConfiguration:
    r"""Provides the configuration information for an Amazon Kendra data source."""
    
    alfresco_configuration: Optional[shared_alfrescoconfiguration.AlfrescoConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlfrescoConfiguration'), 'exclude': lambda f: f is None }})  
    box_configuration: Optional[shared_boxconfiguration.BoxConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BoxConfiguration'), 'exclude': lambda f: f is None }})  
    confluence_configuration: Optional[shared_confluenceconfiguration.ConfluenceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfluenceConfiguration'), 'exclude': lambda f: f is None }})  
    database_configuration: Optional[shared_databaseconfiguration.DatabaseConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseConfiguration'), 'exclude': lambda f: f is None }})  
    fsx_configuration: Optional[shared_fsxconfiguration.FsxConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FsxConfiguration'), 'exclude': lambda f: f is None }})  
    git_hub_configuration: Optional[shared_githubconfiguration.GitHubConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GitHubConfiguration'), 'exclude': lambda f: f is None }})  
    google_drive_configuration: Optional[shared_googledriveconfiguration.GoogleDriveConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GoogleDriveConfiguration'), 'exclude': lambda f: f is None }})  
    jira_configuration: Optional[shared_jiraconfiguration.JiraConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JiraConfiguration'), 'exclude': lambda f: f is None }})  
    one_drive_configuration: Optional[shared_onedriveconfiguration.OneDriveConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OneDriveConfiguration'), 'exclude': lambda f: f is None }})  
    quip_configuration: Optional[shared_quipconfiguration.QuipConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuipConfiguration'), 'exclude': lambda f: f is None }})  
    s3_configuration: Optional[shared_s3datasourceconfiguration.S3DataSourceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Configuration'), 'exclude': lambda f: f is None }})  
    salesforce_configuration: Optional[shared_salesforceconfiguration.SalesforceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SalesforceConfiguration'), 'exclude': lambda f: f is None }})  
    service_now_configuration: Optional[shared_servicenowconfiguration.ServiceNowConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceNowConfiguration'), 'exclude': lambda f: f is None }})  
    share_point_configuration: Optional[shared_sharepointconfiguration.SharePointConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SharePointConfiguration'), 'exclude': lambda f: f is None }})  
    slack_configuration: Optional[shared_slackconfiguration.SlackConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SlackConfiguration'), 'exclude': lambda f: f is None }})  
    template_configuration: Optional[shared_templateconfiguration.TemplateConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TemplateConfiguration'), 'exclude': lambda f: f is None }})  
    web_crawler_configuration: Optional[shared_webcrawlerconfiguration.WebCrawlerConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WebCrawlerConfiguration'), 'exclude': lambda f: f is None }})
    r"""Provides the configuration information required for Amazon Kendra Web Crawler."""  
    work_docs_configuration: Optional[shared_workdocsconfiguration.WorkDocsConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkDocsConfiguration'), 'exclude': lambda f: f is None }})  
    