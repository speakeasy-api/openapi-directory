/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UpdateEncryptionPasswordPolicies - Request model for updating encryption password policies
 */
public class UpdateEncryptionPasswordPolicies {
    /**
     * Password character rules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("characterRules")
    public CharacterRules characterRules;
    public UpdateEncryptionPasswordPolicies withCharacterRules(CharacterRules characterRules) {
        this.characterRules = characterRules;
        return this;
    }
    
    /**
     * Minimum number of characters a password must contain
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minLength")
    public Integer minLength;
    public UpdateEncryptionPasswordPolicies withMinLength(Integer minLength) {
        this.minLength = minLength;
        return this;
    }
    
    /**
     * Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
     * 
     * (min. 4 character pattern)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rejectKeyboardPatterns")
    public Boolean rejectKeyboardPatterns;
    public UpdateEncryptionPasswordPolicies withRejectKeyboardPatterns(Boolean rejectKeyboardPatterns) {
        this.rejectKeyboardPatterns = rejectKeyboardPatterns;
        return this;
    }
    
    /**
     * Determines whether a password must NOT contain user info (first name, last name, email, user name)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rejectUserInfo")
    public Boolean rejectUserInfo;
    public UpdateEncryptionPasswordPolicies withRejectUserInfo(Boolean rejectUserInfo) {
        this.rejectUserInfo = rejectUserInfo;
        return this;
    }
    
}
