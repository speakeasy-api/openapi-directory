// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateTaskHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateTaskRequestBodyCommand - The command given to the device to execute.
type CreateTaskRequestBodyCommand struct {
	Reboot map[string]interface{} `json:"reboot,omitempty"`
	Unlock map[string]interface{} `json:"unlock,omitempty"`
}

type CreateTaskRequestBody struct {
	// A token ensuring that the action is called only once with the specified details.
	ClientToken *string `json:"clientToken,omitempty"`
	// The command given to the device to execute.
	Command CreateTaskRequestBodyCommand `json:"command"`
	// A description of the task and its targets.
	Description *string `json:"description,omitempty"`
	// Optional metadata that you assign to a resource. You can use tags to categorize a resource in different ways, such as by purpose, owner, or environment.
	Tags map[string]string `json:"tags,omitempty"`
	// A list of managed device IDs.
	Targets []string `json:"targets"`
}

type CreateTaskRequest struct {
	Headers CreateTaskHeaders
	Request CreateTaskRequestBody `request:"mediaType=application/json"`
}

type CreateTaskResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	CreateTaskOutput *shared.CreateTaskOutput
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
