"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import importstatus_enum as shared_importstatus_enum
from ..shared import inputcompressiontype_enum as shared_inputcompressiontype_enum
from ..shared import inputformat_enum as shared_inputformat_enum
from ..shared import inputformatoptions as shared_inputformatoptions
from ..shared import s3bucketsource as shared_s3bucketsource
from ..shared import tablecreationparameters as shared_tablecreationparameters
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImportTableDescription:
    r"""Represents the properties of the table being imported into."""
    
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken'), 'exclude': lambda f: f is None }})  
    cloud_watch_log_group_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLogGroupArn'), 'exclude': lambda f: f is None }})  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    error_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ErrorCount'), 'exclude': lambda f: f is None }})  
    failure_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureCode'), 'exclude': lambda f: f is None }})  
    failure_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureMessage'), 'exclude': lambda f: f is None }})  
    import_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImportArn'), 'exclude': lambda f: f is None }})  
    imported_item_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImportedItemCount'), 'exclude': lambda f: f is None }})  
    import_status: Optional[shared_importstatus_enum.ImportStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImportStatus'), 'exclude': lambda f: f is None }})  
    input_compression_type: Optional[shared_inputcompressiontype_enum.InputCompressionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputCompressionType'), 'exclude': lambda f: f is None }})  
    input_format: Optional[shared_inputformat_enum.InputFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputFormat'), 'exclude': lambda f: f is None }})  
    input_format_options: Optional[shared_inputformatoptions.InputFormatOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputFormatOptions'), 'exclude': lambda f: f is None }})  
    processed_item_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessedItemCount'), 'exclude': lambda f: f is None }})  
    processed_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessedSizeBytes'), 'exclude': lambda f: f is None }})  
    s3_bucket_source: Optional[shared_s3bucketsource.S3BucketSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3BucketSource'), 'exclude': lambda f: f is None }})  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    table_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableArn'), 'exclude': lambda f: f is None }})  
    table_creation_parameters: Optional[shared_tablecreationparameters.TableCreationParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableCreationParameters'), 'exclude': lambda f: f is None }})  
    table_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableId'), 'exclude': lambda f: f is None }})  
    