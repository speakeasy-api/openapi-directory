/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A set of filters by which to return Recovery Snapshots.
 */
export class DescribeRecoverySnapshotsRequestBodyFilters extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "fromDateTime" })
  fromDateTime?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "toDateTime" })
  toDateTime?: string;
}

/**
 * The sorted ordering by which to return Recovery Snapshots.
 */
export enum DescribeRecoverySnapshotsRequestBodyOrderEnum {
  Asc = "ASC",
  Desc = "DESC",
}

export class DescribeRecoverySnapshotsRequestBody extends SpeakeasyBase {
  /**
   * A set of filters by which to return Recovery Snapshots.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filters" })
  @Type(() => DescribeRecoverySnapshotsRequestBodyFilters)
  filters?: DescribeRecoverySnapshotsRequestBodyFilters;

  /**
   * Maximum number of Recovery Snapshots to retrieve.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * The token of the next Recovery Snapshot to retrieve.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   * The sorted ordering by which to return Recovery Snapshots.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "order" })
  order?: DescribeRecoverySnapshotsRequestBodyOrderEnum;

  /**
   * Filter Recovery Snapshots by Source Server ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceServerID" })
  sourceServerID: string;
}

export class DescribeRecoverySnapshotsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: DescribeRecoverySnapshotsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class DescribeRecoverySnapshotsResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  describeRecoverySnapshotsResponse?: shared.DescribeRecoverySnapshotsResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * UninitializedAccountException
   */
  @SpeakeasyMetadata()
  uninitializedAccountException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
