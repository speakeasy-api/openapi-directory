// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NchscSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type NchscRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// NchscRequestBodyFormatEnum - The format of the certificate in response.
type NchscRequestBodyFormatEnum string

const (
	NchscRequestBodyFormatEnumPdf NchscRequestBodyFormatEnum = "pdf"
)

func (e NchscRequestBodyFormatEnum) ToPointer() *NchscRequestBodyFormatEnum {
	return &e
}

func (e *NchscRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = NchscRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NchscRequestBodyFormatEnum: %v", v)
	}
}

// NchscRequestBody - Request format
type NchscRequestBody struct {
	CertificateParameters *NchscRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NchscRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Nchsc504ApplicationJSONErrorEnum string

const (
	Nchsc504ApplicationJSONErrorEnumGatewayTimeout Nchsc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Nchsc504ApplicationJSONErrorEnum) ToPointer() *Nchsc504ApplicationJSONErrorEnum {
	return &e
}

func (e *Nchsc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Nchsc504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc504ApplicationJSONErrorEnum: %v", v)
	}
}

type Nchsc504ApplicationJSONErrorDescriptionEnum string

const (
	Nchsc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Nchsc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Nchsc504ApplicationJSONErrorDescriptionEnum) ToPointer() *Nchsc504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nchsc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Nchsc504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nchsc504ApplicationJSON - Gateway timeout
type Nchsc504ApplicationJSON struct {
	Error            *Nchsc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nchsc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nchsc503ApplicationJSONErrorEnum string

const (
	Nchsc503ApplicationJSONErrorEnumServiceUnavailable Nchsc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Nchsc503ApplicationJSONErrorEnum) ToPointer() *Nchsc503ApplicationJSONErrorEnum {
	return &e
}

func (e *Nchsc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Nchsc503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc503ApplicationJSONErrorEnum: %v", v)
	}
}

type Nchsc503ApplicationJSONErrorDescriptionEnum string

const (
	Nchsc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Nchsc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Nchsc503ApplicationJSONErrorDescriptionEnum) ToPointer() *Nchsc503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nchsc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Nchsc503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nchsc503ApplicationJSON - Service unavailable
type Nchsc503ApplicationJSON struct {
	Error            *Nchsc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nchsc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nchsc502ApplicationJSONErrorEnum string

const (
	Nchsc502ApplicationJSONErrorEnumBadGatewy Nchsc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Nchsc502ApplicationJSONErrorEnum) ToPointer() *Nchsc502ApplicationJSONErrorEnum {
	return &e
}

func (e *Nchsc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Nchsc502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc502ApplicationJSONErrorEnum: %v", v)
	}
}

type Nchsc502ApplicationJSONErrorDescriptionEnum string

const (
	Nchsc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Nchsc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Nchsc502ApplicationJSONErrorDescriptionEnum) ToPointer() *Nchsc502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nchsc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Nchsc502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nchsc502ApplicationJSON - Bad gateway
type Nchsc502ApplicationJSON struct {
	Error            *Nchsc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nchsc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nchsc500ApplicationJSONErrorEnum string

const (
	Nchsc500ApplicationJSONErrorEnumInternalServerError Nchsc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Nchsc500ApplicationJSONErrorEnum) ToPointer() *Nchsc500ApplicationJSONErrorEnum {
	return &e
}

func (e *Nchsc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Nchsc500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc500ApplicationJSONErrorEnum: %v", v)
	}
}

type Nchsc500ApplicationJSONErrorDescriptionEnum string

const (
	Nchsc500ApplicationJSONErrorDescriptionEnumInternalServerError Nchsc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Nchsc500ApplicationJSONErrorDescriptionEnum) ToPointer() *Nchsc500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nchsc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Nchsc500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nchsc500ApplicationJSON - Internal server error
type Nchsc500ApplicationJSON struct {
	Error            *Nchsc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nchsc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nchsc404ApplicationJSONErrorEnum string

const (
	Nchsc404ApplicationJSONErrorEnumRecordNotFound Nchsc404ApplicationJSONErrorEnum = "record_not_found"
	Nchsc404ApplicationJSONErrorEnumURLNotFound    Nchsc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Nchsc404ApplicationJSONErrorEnum) ToPointer() *Nchsc404ApplicationJSONErrorEnum {
	return &e
}

func (e *Nchsc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Nchsc404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc404ApplicationJSONErrorEnum: %v", v)
	}
}

type Nchsc404ApplicationJSONErrorDescriptionEnum string

const (
	Nchsc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Nchsc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Nchsc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Nchsc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Nchsc404ApplicationJSONErrorDescriptionEnum) ToPointer() *Nchsc404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nchsc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Nchsc404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nchsc404ApplicationJSON - No record found
type Nchsc404ApplicationJSON struct {
	Error            *Nchsc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nchsc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nchsc401ApplicationJSONErrorEnum string

const (
	Nchsc401ApplicationJSONErrorEnumInvalidAuthentication Nchsc401ApplicationJSONErrorEnum = "invalid_authentication"
	Nchsc401ApplicationJSONErrorEnumInvalidAuthorization  Nchsc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Nchsc401ApplicationJSONErrorEnum) ToPointer() *Nchsc401ApplicationJSONErrorEnum {
	return &e
}

func (e *Nchsc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Nchsc401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc401ApplicationJSONErrorEnum: %v", v)
	}
}

type Nchsc401ApplicationJSONErrorDescriptionEnum string

const (
	Nchsc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Nchsc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Nchsc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Nchsc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Nchsc401ApplicationJSONErrorDescriptionEnum) ToPointer() *Nchsc401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nchsc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Nchsc401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nchsc401ApplicationJSON - Unauthorized access
type Nchsc401ApplicationJSON struct {
	Error            *Nchsc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nchsc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nchsc400ApplicationJSONErrorEnum string

const (
	Nchsc400ApplicationJSONErrorEnumMissingParameter Nchsc400ApplicationJSONErrorEnum = "missing_parameter"
	Nchsc400ApplicationJSONErrorEnumInvalidParameter Nchsc400ApplicationJSONErrorEnum = "invalid_parameter"
	Nchsc400ApplicationJSONErrorEnumInvalidFormat    Nchsc400ApplicationJSONErrorEnum = "invalid_format"
	Nchsc400ApplicationJSONErrorEnumInvalidTxnid     Nchsc400ApplicationJSONErrorEnum = "invalid_txnid"
	Nchsc400ApplicationJSONErrorEnumInvalidConsentid Nchsc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Nchsc400ApplicationJSONErrorEnum) ToPointer() *Nchsc400ApplicationJSONErrorEnum {
	return &e
}

func (e *Nchsc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Nchsc400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc400ApplicationJSONErrorEnum: %v", v)
	}
}

type Nchsc400ApplicationJSONErrorDescriptionEnum string

const (
	Nchsc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Nchsc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Nchsc400ApplicationJSONErrorDescriptionEnumBadRequest                              Nchsc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Nchsc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Nchsc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Nchsc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Nchsc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Nchsc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Nchsc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Nchsc400ApplicationJSONErrorDescriptionEnum) ToPointer() *Nchsc400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nchsc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Nchsc400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nchsc400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nchsc400ApplicationJSON - Bad request
type Nchsc400ApplicationJSON struct {
	Error            *Nchsc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nchsc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NchscResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Nchsc400ApplicationJSONObject *Nchsc400ApplicationJSON
	// Unauthorized access
	Nchsc401ApplicationJSONObject *Nchsc401ApplicationJSON
	// No record found
	Nchsc404ApplicationJSONObject *Nchsc404ApplicationJSON
	// Internal server error
	Nchsc500ApplicationJSONObject *Nchsc500ApplicationJSON
	// Bad gateway
	Nchsc502ApplicationJSONObject *Nchsc502ApplicationJSON
	// Service unavailable
	Nchsc503ApplicationJSONObject *Nchsc503ApplicationJSON
	// Gateway timeout
	Nchsc504ApplicationJSONObject *Nchsc504ApplicationJSON
}
