<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ConsentFlow 
{
	
	public const POST_V05_CONSENT_REQUESTS_ON_INIT_JSON_SERVERS = [
		'https://dev.ndhm.gov.in/hiu',
	];
	
	public const POST_V05_CONSENT_REQUESTS_ON_INIT_RAW_SERVERS = [
		'https://dev.ndhm.gov.in/hiu',
	];
	
	public const POST_V05_CONSENT_REQUESTS_ON_STATUS_JSON_SERVERS = [
		'https://dev.ndhm.gov.in/hiu',
	];
	
	public const POST_V05_CONSENT_REQUESTS_ON_STATUS_RAW_SERVERS = [
		'https://dev.ndhm.gov.in/hiu',
	];
	
	public const POST_V05_CONSENTS_HIU_NOTIFY_SERVERS = [
		'https://dev.ndhm.gov.in/hiu',
	];
	
	public const POST_V05_CONSENTS_ON_FETCH_JSON_SERVERS = [
		'https://dev.ndhm.gov.in/hiu',
	];
	
	public const POST_V05_CONSENTS_ON_FETCH_RAW_SERVERS = [
		'https://dev.ndhm.gov.in/hiu',
	];

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Response to consent request
     * 
     * Result of consent request creation for a patient. **id** represents the consentrequest id created by CM. The result must contain either **id** or the **error** caused. <br/>
     *   Reasons for error may be
     *   * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnInitJsonRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnInitJsonResponse
     */
	public function postV05ConsentRequestsOnInitJson(
        \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnInitJsonRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnInitJsonResponse
    {
        $baseUrl = ConsentFlow::POST_V05_CONSENT_REQUESTS_ON_INIT_JSON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/consent-requests/on-init');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "consentRequestInitResponse", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnInitJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Response to consent request
     * 
     * Result of consent request creation for a patient. **id** represents the consentrequest id created by CM. The result must contain either **id** or the **error** caused. <br/>
     *   Reasons for error may be
     *   * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnInitRawRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnInitRawResponse
     */
	public function postV05ConsentRequestsOnInitRaw(
        \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnInitRawRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnInitRawResponse
    {
        $baseUrl = ConsentFlow::POST_V05_CONSENT_REQUESTS_ON_INIT_RAW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/consent-requests/on-init');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnInitRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Result of consent request status
     * 
     * Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnStatusJsonRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnStatusJsonResponse
     */
	public function postV05ConsentRequestsOnStatusJson(
        \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnStatusJsonRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnStatusJsonResponse
    {
        $baseUrl = ConsentFlow::POST_V05_CONSENT_REQUESTS_ON_STATUS_JSON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/consent-requests/on-status');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hiuConsentRequestStatus", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnStatusJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Result of consent request status
     * 
     * Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnStatusRawRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnStatusRawResponse
     */
	public function postV05ConsentRequestsOnStatusRaw(
        \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnStatusRawRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnStatusRawResponse
    {
        $baseUrl = ConsentFlow::POST_V05_CONSENT_REQUESTS_ON_STATUS_RAW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/consent-requests/on-status');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentRequestsOnStatusRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Consent notification
     * 
     * Health information user will get notified about the consent request granted or denied, consent revoked, consent expired. 
     * 1. For consent request grant, status=GRANTED, consentRequestId=<consent-request-id>, and consentArtefacts is an array of generated consent artefact Ids.
     * 2. For consent request expiry, status=EXPIRED, consentRequestId=<consent-request-id>
     * 3. For consent request denied, status=DENIED, consentRequestId=<consent-request-id>
     * 4. For consent revocation, status=REVOKED, consentArtefacts is an array of revoked consent artefact ids
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsHiuNotifyRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsHiuNotifyResponse
     */
	public function postV05ConsentsHiuNotify(
        \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsHiuNotifyRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsHiuNotifyResponse
    {
        $baseUrl = ConsentFlow::POST_V05_CONSENTS_HIU_NOTIFY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/consents/hiu/notify');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hiuConsentNotificationEvent", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsHiuNotifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Result of fetch request for a consent artefact
     * 
     * Must contain either consent or error. Possible reason of errors are 
     * 1. consentId passed through /fetch is invalid
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsOnFetchJsonRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsOnFetchJsonResponse
     */
	public function postV05ConsentsOnFetchJson(
        \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsOnFetchJsonRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsOnFetchJsonResponse
    {
        $baseUrl = ConsentFlow::POST_V05_CONSENTS_ON_FETCH_JSON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/consents/on-fetch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "consentArtefactResponse", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsOnFetchJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Result of fetch request for a consent artefact
     * 
     * Must contain either consent or error. Possible reason of errors are 
     * 1. consentId passed through /fetch is invalid
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsOnFetchRawRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsOnFetchRawResponse
     */
	public function postV05ConsentsOnFetchRaw(
        \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsOnFetchRawRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsOnFetchRawResponse
    {
        $baseUrl = ConsentFlow::POST_V05_CONSENTS_ON_FETCH_RAW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/consents/on-fetch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05ConsentsOnFetchRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}