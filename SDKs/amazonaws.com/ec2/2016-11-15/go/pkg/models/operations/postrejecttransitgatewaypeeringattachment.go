// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTRejectTransitGatewayPeeringAttachmentActionEnum
type POSTRejectTransitGatewayPeeringAttachmentActionEnum string

const (
	POSTRejectTransitGatewayPeeringAttachmentActionEnumRejectTransitGatewayPeeringAttachment POSTRejectTransitGatewayPeeringAttachmentActionEnum = "RejectTransitGatewayPeeringAttachment"
)

func (e *POSTRejectTransitGatewayPeeringAttachmentActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RejectTransitGatewayPeeringAttachment":
		*e = POSTRejectTransitGatewayPeeringAttachmentActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTRejectTransitGatewayPeeringAttachmentActionEnum: %s", s)
	}
}

// POSTRejectTransitGatewayPeeringAttachmentVersionEnum
type POSTRejectTransitGatewayPeeringAttachmentVersionEnum string

const (
	POSTRejectTransitGatewayPeeringAttachmentVersionEnumTwoThousandAndSixteen1115 POSTRejectTransitGatewayPeeringAttachmentVersionEnum = "2016-11-15"
)

func (e *POSTRejectTransitGatewayPeeringAttachmentVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = POSTRejectTransitGatewayPeeringAttachmentVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTRejectTransitGatewayPeeringAttachmentVersionEnum: %s", s)
	}
}

type POSTRejectTransitGatewayPeeringAttachmentQueryParams struct {
	Action  POSTRejectTransitGatewayPeeringAttachmentActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTRejectTransitGatewayPeeringAttachmentVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTRejectTransitGatewayPeeringAttachmentHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTRejectTransitGatewayPeeringAttachmentRequest struct {
	QueryParams POSTRejectTransitGatewayPeeringAttachmentQueryParams
	Headers     POSTRejectTransitGatewayPeeringAttachmentHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTRejectTransitGatewayPeeringAttachmentResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
