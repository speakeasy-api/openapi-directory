"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import instanceandroiddetails as shared_instanceandroiddetails
from ..shared import instanceiosdetails as shared_instanceiosdetails
from ..shared import instancewebdetails as shared_instancewebdetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InstancePlatformTypeEnum(str, Enum):
    r"""The platform type."""
    PLATFORM_TYPE_UNSPECIFIED = 'PLATFORM_TYPE_UNSPECIFIED'
    ANDROID = 'ANDROID'
    IOS = 'IOS'
    WEB_APP = 'WEB_APP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Instance:
    r"""The Instance resource."""
    
    acquisition_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acquisitionUri'), 'exclude': lambda f: f is None }})
    r"""URI which shows where a user can acquire this instance."""  
    android_instance: Optional[shared_instanceandroiddetails.InstanceAndroidDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidInstance'), 'exclude': lambda f: f is None }})
    r"""The Android instance details resource."""  
    ios_instance: Optional[shared_instanceiosdetails.InstanceIosDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iosInstance'), 'exclude': lambda f: f is None }})
    r"""The iOS details resource."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies the type of this resource. Value is always the fixed string `games#instance`."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Localized display name."""  
    platform_type: Optional[InstancePlatformTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platformType'), 'exclude': lambda f: f is None }})
    r"""The platform type."""  
    realtime_play: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('realtimePlay'), 'exclude': lambda f: f is None }})
    r"""Flag to show if this game instance supports realtime play."""  
    turn_based_play: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('turnBasedPlay'), 'exclude': lambda f: f is None }})
    r"""Flag to show if this game instance supports turn based play."""  
    web_instance: Optional[shared_instancewebdetails.InstanceWebDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webInstance'), 'exclude': lambda f: f is None }})
    r"""The Web details resource."""  
    