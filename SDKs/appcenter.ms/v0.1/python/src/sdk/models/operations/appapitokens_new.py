"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AppAPITokensNewSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class AppAPITokensNewRequestBodyScopeEnum(str, Enum):
    ALL = 'all'
    VIEWER = 'viewer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppAPITokensNewRequestBody:
    r"""Description of the token"""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the token"""  
    scope: Optional[list[AppAPITokensNewRequestBodyScopeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""The scope for this token."""  
    

@dataclasses.dataclass
class AppAPITokensNewRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: Optional[AppAPITokensNewRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""Description of the token"""  
    
class AppAPITokensNew401ApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppAPITokensNew401ApplicationJSONError:
    
    code: AppAPITokensNew401ApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppAPITokensNew401ApplicationJSON:
    r"""Unauthorized"""
    
    error: AppAPITokensNew401ApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    
class AppAPITokensNew400ApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppAPITokensNew400ApplicationJSONError:
    
    code: AppAPITokensNew400ApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppAPITokensNew400ApplicationJSON:
    r"""Error"""
    
    error: AppAPITokensNew400ApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    
class AppAPITokensNew201ApplicationJSONScopeEnum(str, Enum):
    ALL = 'all'
    VIEWER = 'viewer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppAPITokensNew201ApplicationJSON:
    r"""Success"""
    
    api_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_token') }})
    r"""The api token generated will not be accessible again"""  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    r"""The creation time"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique id (UUID) of the api token"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the token"""  
    scope: Optional[list[AppAPITokensNew201ApplicationJSONScopeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""The scope for this token."""  
    

@dataclasses.dataclass
class AppAPITokensNewResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    app_api_tokens_new_201_application_json_object: Optional[AppAPITokensNew201ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    app_api_tokens_new_400_application_json_object: Optional[AppAPITokensNew400ApplicationJSON] = dataclasses.field(default=None)
    r"""Error"""  
    app_api_tokens_new_401_application_json_object: Optional[AppAPITokensNew401ApplicationJSON] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    