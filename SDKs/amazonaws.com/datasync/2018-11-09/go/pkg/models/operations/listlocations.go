// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListLocationsQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListLocationsXAmzTargetEnum
type ListLocationsXAmzTargetEnum string

const (
	ListLocationsXAmzTargetEnumFmrsServiceListLocations ListLocationsXAmzTargetEnum = "FmrsService.ListLocations"
)

func (e *ListLocationsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FmrsService.ListLocations":
		*e = ListLocationsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLocationsXAmzTargetEnum: %s", s)
	}
}

type ListLocationsHeaders struct {
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListLocationsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListLocationsRequest struct {
	QueryParams ListLocationsQueryParams
	Headers     ListLocationsHeaders
	Request     shared.ListLocationsRequest `request:"mediaType=application/json"`
}

type ListLocationsResponse struct {
	ContentType string
	// InternalException
	InternalException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListLocationsResponse *shared.ListLocationsResponse
	StatusCode            int
	RawResponse           *http.Response
}
