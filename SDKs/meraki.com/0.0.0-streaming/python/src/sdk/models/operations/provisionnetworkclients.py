"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ProvisionNetworkClientsRequestBodyDevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Group policy', 'Whitelisted', 'Allowed', 'Blocked', 'Per connection' or 'Normal'. Required."""
    ALLOWED = 'Allowed'
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    PER_CONNECTION = 'Per connection'
    WHITELISTED = 'Whitelisted'

class ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked' or 'Normal'. Required."""
    BLOCKED = 'Blocked'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySecurityAppliance:
    r"""An object, describing what the policy-connection association is for the security appliance. (Only relevant if the security appliance is actually within the network)"""
    
    device_policy: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy'), 'exclude': lambda f: f is None }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked' or 'Normal'. Required."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid0:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid1:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid10:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid11:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid12:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid13:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid14:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid2:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid3:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid4:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid5:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid6:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid7:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid8:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    
class ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum(str, Enum):
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""
    BLOCKED = 'Blocked'
    GROUP_POLICY = 'Group policy'
    NORMAL = 'Normal'
    WHITELISTED = 'Whitelisted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid9:
    r"""The number for the SSID"""
    
    device_policy: ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Whitelisted', 'Blocked', 'Normal' or 'Group policy'. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBodyPoliciesBySsid:
    r"""An object, describing the policy-connection associations for each active SSID within the network. Keys should be the number of enabled SSIDs, mapping to an object describing the client's policy"""
    
    zero: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid0] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('0'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    one: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    ten: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid10] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('10'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    eleven: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid11] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('11'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    twelve: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid12] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('12'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    thirteen: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid13] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('13'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    fourteen: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid14] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('14'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    two: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('2'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    three: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('3'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    four: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('4'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    five: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid5] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('5'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    six: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('6'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    seven: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid7] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('7'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    eight: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid8] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('8'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    nine: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid9] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('9'), 'exclude': lambda f: f is None }})
    r"""The number for the SSID"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProvisionNetworkClientsRequestBody:
    
    device_policy: ProvisionNetworkClientsRequestBodyDevicePolicyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devicePolicy') }})
    r"""The policy to apply to the specified client. Can be 'Group policy', 'Whitelisted', 'Allowed', 'Blocked', 'Per connection' or 'Normal'. Required."""  
    mac: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac') }})
    r"""The MAC address of the client. Required."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to \\"Group policy\\". Otherwise this is ignored."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The display name for the client. Optional. Limited to 255 bytes."""  
    policies_by_security_appliance: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySecurityAppliance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policiesBySecurityAppliance'), 'exclude': lambda f: f is None }})
    r"""An object, describing what the policy-connection association is for the security appliance. (Only relevant if the security appliance is actually within the network)"""  
    policies_by_ssid: Optional[ProvisionNetworkClientsRequestBodyPoliciesBySsid] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policiesBySsid'), 'exclude': lambda f: f is None }})
    r"""An object, describing the policy-connection associations for each active SSID within the network. Keys should be the number of enabled SSIDs, mapping to an object describing the client's policy"""  
    

@dataclasses.dataclass
class ProvisionNetworkClientsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: ProvisionNetworkClientsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ProvisionNetworkClientsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    provision_network_clients_201_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    