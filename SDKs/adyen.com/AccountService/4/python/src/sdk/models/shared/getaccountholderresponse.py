"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import account as shared_account
from ..shared import accountholderdetails as shared_accountholderdetails
from ..shared import accountholderstatus as shared_accountholderstatus
from ..shared import kycverificationresult as shared_kycverificationresult
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetAccountHolderResponseLegalEntityEnum(str, Enum):
    r"""The legal entity of the account holder."""
    BUSINESS = 'Business'
    INDIVIDUAL = 'Individual'
    NON_PROFIT = 'NonProfit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountHolderResponse:
    r"""OK - the request has succeeded."""
    
    account_holder_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountHolderCode'), 'exclude': lambda f: f is None }})
    r"""The code of the account holder."""  
    account_holder_details: Optional[shared_accountholderdetails.AccountHolderDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountHolderDetails'), 'exclude': lambda f: f is None }})  
    account_holder_status: Optional[shared_accountholderstatus.AccountHolderStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountHolderStatus'), 'exclude': lambda f: f is None }})  
    accounts: Optional[list[shared_account.Account]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accounts'), 'exclude': lambda f: f is None }})
    r"""A list of the accounts under the account holder."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the account holder."""  
    legal_entity: Optional[GetAccountHolderResponseLegalEntityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalEntity'), 'exclude': lambda f: f is None }})
    r"""The legal entity of the account holder."""  
    primary_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryCurrency'), 'exclude': lambda f: f is None }})
    r"""The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), with which the prospective account holder primarily deals."""  
    psp_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pspReference'), 'exclude': lambda f: f is None }})
    r"""The reference of a request. Can be used to uniquely identify the request."""  
    result_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultCode'), 'exclude': lambda f: f is None }})
    r"""The result code."""  
    submitted_async: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submittedAsync'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied:
    * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received.
    * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
    """  
    verification: Optional[shared_kycverificationresult.KYCVerificationResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verification'), 'exclude': lambda f: f is None }})  
    