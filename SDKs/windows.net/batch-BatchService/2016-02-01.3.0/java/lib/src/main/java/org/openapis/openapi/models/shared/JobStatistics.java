/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * JobStatistics - Resource usage statistics for a job.
 */
public class JobStatistics {
    /**
     * The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in the job.
     */
    @JsonProperty("kernelCPUTime")
    public String kernelCPUTime;
    public JobStatistics withKernelCPUTime(String kernelCPUTime) {
        this.kernelCPUTime = kernelCPUTime;
        return this;
    }
    
    /**
     * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastUpdateTime")
    public OffsetDateTime lastUpdateTime;
    public JobStatistics withLastUpdateTime(OffsetDateTime lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }
    
    /**
     * The total number of tasks in the job that failed during the given time range.
     */
    @JsonProperty("numFailedTasks")
    public Long numFailedTasks;
    public JobStatistics withNumFailedTasks(Long numFailedTasks) {
        this.numFailedTasks = numFailedTasks;
        return this;
    }
    
    /**
     * The total number of tasks successfully completed in the job during the given time range.
     */
    @JsonProperty("numSucceededTasks")
    public Long numSucceededTasks;
    public JobStatistics withNumSucceededTasks(Long numSucceededTasks) {
        this.numSucceededTasks = numSucceededTasks;
        return this;
    }
    
    /**
     * The total number of retries on all the tasks in the job during the given time range.
     */
    @JsonProperty("numTaskRetries")
    public Long numTaskRetries;
    public JobStatistics withNumTaskRetries(Long numTaskRetries) {
        this.numTaskRetries = numTaskRetries;
        return this;
    }
    
    /**
     * The total gibibytes read from disk by all tasks in the job.
     */
    @JsonProperty("readIOGiB")
    public Double readIOGiB;
    public JobStatistics withReadIOGiB(Double readIOGiB) {
        this.readIOGiB = readIOGiB;
        return this;
    }
    
    /**
     * The total number of disk read operations made by all tasks in the job.
     */
    @JsonProperty("readIOps")
    public Long readIOps;
    public JobStatistics withReadIOps(Long readIOps) {
        this.readIOps = readIOps;
        return this;
    }
    
    /**
     * The start time of the time range covered by the statistics.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;
    public JobStatistics withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * The URL of the statistics.
     */
    @JsonProperty("url")
    public String url;
    public JobStatistics withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The total user mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in the job.
     */
    @JsonProperty("userCPUTime")
    public String userCPUTime;
    public JobStatistics withUserCPUTime(String userCPUTime) {
        this.userCPUTime = userCPUTime;
        return this;
    }
    
    /**
     * The total wait time of all tasks in the job. The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.)
     */
    @JsonProperty("waitTime")
    public String waitTime;
    public JobStatistics withWaitTime(String waitTime) {
        this.waitTime = waitTime;
        return this;
    }
    
    /**
     * The total wall clock time of all tasks in the job.
     */
    @JsonProperty("wallClockTime")
    public String wallClockTime;
    public JobStatistics withWallClockTime(String wallClockTime) {
        this.wallClockTime = wallClockTime;
        return this;
    }
    
    /**
     * The total gibibytes written to disk by all tasks in the job.
     */
    @JsonProperty("writeIOGiB")
    public Double writeIOGiB;
    public JobStatistics withWriteIOGiB(Double writeIOGiB) {
        this.writeIOGiB = writeIOGiB;
        return this;
    }
    
    /**
     * The total number of disk write operations made by all tasks in the job.
     */
    @JsonProperty("writeIOps")
    public Long writeIOps;
    public JobStatistics withWriteIOps(Long writeIOps) {
        this.writeIOps = writeIOps;
        return this;
    }
    
}
