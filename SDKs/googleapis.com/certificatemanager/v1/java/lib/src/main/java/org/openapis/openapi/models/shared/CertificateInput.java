/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CertificateInput - Defines TLS certificate.
 */
public class CertificateInput {
    /**
     * One or more paragraphs of text description of a certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public CertificateInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Set of labels associated with a Certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public CertificateInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managed")
    public ManagedCertificateInput managed;
    public CertificateInput withManaged(ManagedCertificateInput managed) {
        this.managed = managed;
        return this;
    }
    
    /**
     * A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/* /locations/* /certificates/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public CertificateInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Immutable. The scope of the certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public CertificateScopeEnum scope;
    public CertificateInput withScope(CertificateScopeEnum scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfManaged")
    public SelfManagedCertificate selfManaged;
    public CertificateInput withSelfManaged(SelfManagedCertificate selfManaged) {
        this.selfManaged = selfManaged;
        return this;
    }
    
}
