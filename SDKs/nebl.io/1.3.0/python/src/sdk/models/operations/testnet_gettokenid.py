"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import gettokenidresponse as shared_gettokenidresponse
from typing import Optional


@dataclasses.dataclass
class TestnetGetTokenIDRequest:
    
    tokensymbol: str = dataclasses.field(metadata={'path_param': { 'field_name': 'tokensymbol', 'style': 'simple', 'explode': False }})
    r"""Token symbol"""  
    

@dataclasses.dataclass
class TestnetGetTokenIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_token_id_response: Optional[shared_gettokenidresponse.GetTokenIDResponse] = dataclasses.field(default=None)
    r"""Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    