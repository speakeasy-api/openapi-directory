"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import barrier as shared_barrier
from ..shared import container as shared_container
from ..shared import environment as shared_environment
from ..shared import script as shared_script
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Runnable:
    r"""Runnable describes instructions for executing a specific script or container as part of a Task."""
    
    always_run: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alwaysRun'), 'exclude': lambda f: f is None }})
    r"""By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables."""  
    background: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('background'), 'exclude': lambda f: f is None }})
    r"""This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers)."""  
    barrier: Optional[shared_barrier.Barrier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('barrier'), 'exclude': lambda f: f is None }})
    r"""Barrier runnable blocks until all tasks in a taskgroup reach it."""  
    container: Optional[shared_container.Container] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('container'), 'exclude': lambda f: f is None }})
    r"""Container runnable."""  
    environment: Optional[shared_environment.Environment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment'), 'exclude': lambda f: f is None }})
    r"""An Environment describes a collection of environment variables to set when executing Tasks."""  
    ignore_exit_status: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreExitStatus'), 'exclude': lambda f: f is None }})
    r"""Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead."""  
    script: Optional[shared_script.Script] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script'), 'exclude': lambda f: f is None }})
    r"""Script runnable."""  
    timeout: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeout'), 'exclude': lambda f: f is None }})
    r"""Timeout for this Runnable."""  
    