"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var departures_1 = require("./departures");
var directions_1 = require("./directions");
var disruptions_1 = require("./disruptions");
var fareestimate_1 = require("./fareestimate");
var outlets_1 = require("./outlets");
var patterns_1 = require("./patterns");
var routes_1 = require("./routes");
var routetypes_1 = require("./routetypes");
var runs_1 = require("./runs");
var search_1 = require("./search");
var stops_1 = require("./stops");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "http://timetableapi.ptv.vic.gov.au",
    "https://timetableapi.ptv.vic.gov.au",
];
/**
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.
 *
 * @remarks
 *
 * The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).
 *
 * The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.
 *
 * This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.
 *
 * Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.
 *
 * You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:
 *
 *     base URL / version number / API name / query string
 * The base URL is either:
 *   *  http://timetableapi.ptv.vic.gov.au
 * or
 *   *  https://timetableapi.ptv.vic.gov.au
 *
 * The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3
 *
 * Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq
 *
 * Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/
 * * How to register for an API key and calculate a signature
 * * PTV Timetable API V2 to V3 Migration Guide
 * * Documentation for Version 2 of the PTV Timetable API
 * * PTV Timetable API Data Quality Statement
 *
 * All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.
 *
 * Credits: This page has been based on Steve Bennett's http://opentransportdata.org/, used with permission.
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.departures = new departures_1.Departures(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.directions = new directions_1.Directions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.disruptions = new disruptions_1.Disruptions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.fareEstimate = new fareestimate_1.FareEstimate(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.outlets = new outlets_1.Outlets(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.patterns = new patterns_1.Patterns(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.routeTypes = new routetypes_1.RouteTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.routes = new routes_1.Routes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.runs = new runs_1.Runs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.search = new search_1.Search(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.stops = new stops_1.Stops(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
