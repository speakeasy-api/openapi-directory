/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Datafeeds {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request.
   */
  contentDatafeedsCustombatch(
    req: operations.ContentDatafeedsCustombatchRequest,
    security: operations.ContentDatafeedsCustombatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentDatafeedsCustombatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentDatafeedsCustombatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/datafeeds/batch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "datafeedsCustomBatchRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentDatafeedsCustombatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentDatafeedsCustombatchResponse =
        new operations.ContentDatafeedsCustombatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.datafeedsCustomBatchResponse = utils.objectToClass(
              httpRes?.data,
              shared.DatafeedsCustomBatchResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a datafeed configuration from your Merchant Center account.
   */
  contentDatafeedsDelete(
    req: operations.ContentDatafeedsDeleteRequest,
    security: operations.ContentDatafeedsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentDatafeedsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentDatafeedsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/datafeeds/{datafeedId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentDatafeedsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentDatafeedsDeleteResponse =
        new operations.ContentDatafeedsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method more than once per day, we recommend you use the [Products service](https://developers.google.com/shopping-content/reference/rest/v2.1/products) to update your product data.
   */
  contentDatafeedsFetchnow(
    req: operations.ContentDatafeedsFetchnowRequest,
    security: operations.ContentDatafeedsFetchnowSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentDatafeedsFetchnowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentDatafeedsFetchnowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/datafeeds/{datafeedId}/fetchNow",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentDatafeedsFetchnowSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentDatafeedsFetchnowResponse =
        new operations.ContentDatafeedsFetchnowResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.datafeedsFetchNowResponse = utils.objectToClass(
              httpRes?.data,
              shared.DatafeedsFetchNowResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a datafeed configuration from your Merchant Center account.
   */
  contentDatafeedsGet(
    req: operations.ContentDatafeedsGetRequest,
    security: operations.ContentDatafeedsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentDatafeedsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentDatafeedsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/datafeeds/{datafeedId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentDatafeedsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentDatafeedsGetResponse =
        new operations.ContentDatafeedsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.datafeed = utils.objectToClass(httpRes?.data, shared.Datafeed);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Registers a datafeed configuration with your Merchant Center account.
   */
  contentDatafeedsInsert(
    req: operations.ContentDatafeedsInsertRequest,
    security: operations.ContentDatafeedsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentDatafeedsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentDatafeedsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/datafeeds",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "datafeed",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentDatafeedsInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentDatafeedsInsertResponse =
        new operations.ContentDatafeedsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.datafeed = utils.objectToClass(httpRes?.data, shared.Datafeed);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the configurations for datafeeds in your Merchant Center account.
   */
  contentDatafeedsList(
    req: operations.ContentDatafeedsListRequest,
    security: operations.ContentDatafeedsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentDatafeedsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentDatafeedsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/datafeeds",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentDatafeedsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentDatafeedsListResponse =
        new operations.ContentDatafeedsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.datafeedsListResponse = utils.objectToClass(
              httpRes?.data,
              shared.DatafeedsListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource.
   */
  contentDatafeedsUpdate(
    req: operations.ContentDatafeedsUpdateRequest,
    security: operations.ContentDatafeedsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentDatafeedsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentDatafeedsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/datafeeds/{datafeedId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "datafeed",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentDatafeedsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentDatafeedsUpdateResponse =
        new operations.ContentDatafeedsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.datafeed = utils.objectToClass(httpRes?.data, shared.Datafeed);
          }
          break;
      }

      return res;
    });
  }
}
