"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Content:
    r"""content"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def content_get_content_by_id(self, request: operations.ContentGetContentByIDRequest) -> operations.ContentGetContentByIDResponse:
        r"""Returns a content item referenced by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentGetContentByIDRequest, base_url, '/Content/GetContentById/{id}/{locale}/', request)
        
        query_params = utils.get_query_params(operations.ContentGetContentByIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentGetContentByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def content_get_content_by_tag_and_type(self, request: operations.ContentGetContentByTagAndTypeRequest) -> operations.ContentGetContentByTagAndTypeResponse:
        r"""Returns the newest item that matches a given tag and Content Type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentGetContentByTagAndTypeRequest, base_url, '/Content/GetContentByTagAndType/{tag}/{type}/{locale}/', request)
        
        query_params = utils.get_query_params(operations.ContentGetContentByTagAndTypeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentGetContentByTagAndTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def content_get_content_type(self, request: operations.ContentGetContentTypeRequest) -> operations.ContentGetContentTypeResponse:
        r"""Gets an object describing a particular variant of content."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentGetContentTypeRequest, base_url, '/Content/GetContentType/{type}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentGetContentTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def content_rss_news_articles(self, request: operations.ContentRssNewsArticlesRequest) -> operations.ContentRssNewsArticlesResponse:
        r"""Returns a JSON string response that is the RSS feed for news articles."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentRssNewsArticlesRequest, base_url, '/Content/Rss/NewsArticles/{pageToken}/', request)
        
        query_params = utils.get_query_params(operations.ContentRssNewsArticlesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentRssNewsArticlesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def content_search_content_by_tag_and_type(self, request: operations.ContentSearchContentByTagAndTypeRequest) -> operations.ContentSearchContentByTagAndTypeResponse:
        r"""Searches for Content Items that match the given Tag and Content Type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentSearchContentByTagAndTypeRequest, base_url, '/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/', request)
        
        query_params = utils.get_query_params(operations.ContentSearchContentByTagAndTypeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentSearchContentByTagAndTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def content_search_content_with_text(self, request: operations.ContentSearchContentWithTextRequest) -> operations.ContentSearchContentWithTextResponse:
        r"""Gets content based on querystring information passed in. Provides basic search and text search capabilities."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentSearchContentWithTextRequest, base_url, '/Content/Search/{locale}/', request)
        
        query_params = utils.get_query_params(operations.ContentSearchContentWithTextRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentSearchContentWithTextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def content_search_help_articles(self, request: operations.ContentSearchHelpArticlesRequest) -> operations.ContentSearchHelpArticlesResponse:
        r"""Search for Help Articles."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentSearchHelpArticlesRequest, base_url, '/Content/SearchHelpArticles/{searchtext}/{size}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentSearchHelpArticlesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    