/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Pieces define specific story or song level metadata within an episode and segment. For example, an 18 minute audio segment may be composed of multiple 2 or 3 minute pieces.
 */
export class Pieces {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes the piece with the given ID.
   */
  deleteApiV2PiecesId(
    req: operations.DeleteApiV2PiecesIdRequest,
    security: operations.DeleteApiV2PiecesIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteApiV2PiecesIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteApiV2PiecesIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/v2/pieces/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteApiV2PiecesIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteApiV2PiecesIdResponse =
        new operations.DeleteApiV2PiecesIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Returns the pieces matching the query parameters.
   */
  getApiV2Pieces(
    req: operations.GetApiV2PiecesRequest,
    security: operations.GetApiV2PiecesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV2PiecesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV2PiecesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v2/pieces";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV2PiecesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV2PiecesResponse =
        new operations.GetApiV2PiecesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pieces = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.pieces = utils.objectToClass(
              httpRes?.data,
              shared.Piece,
              resFieldDepth
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Returns the piece matching the given ID.
   */
  getApiV2PiecesId(
    req: operations.GetApiV2PiecesIdRequest,
    security: operations.GetApiV2PiecesIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiV2PiecesIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiV2PiecesIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/v2/pieces/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetApiV2PiecesIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiV2PiecesIdResponse =
        new operations.GetApiV2PiecesIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.piece = utils.objectToClass(httpRes?.data, shared.Piece);
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Create a new piece.
   */
  postApiV2Pieces(
    req: shared.PieceInput,
    security: operations.PostApiV2PiecesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostApiV2PiecesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.PieceInput(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v2/pieces";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostApiV2PiecesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostApiV2PiecesResponse =
        new operations.PostApiV2PiecesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.piece = utils.objectToClass(httpRes?.data, shared.Piece);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
        case httpRes?.status == 403:
          break;
      }

      return res;
    });
  }
}
