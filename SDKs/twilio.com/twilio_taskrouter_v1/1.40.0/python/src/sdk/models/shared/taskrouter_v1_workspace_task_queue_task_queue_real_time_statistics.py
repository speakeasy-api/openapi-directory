"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics:
    r"""OK"""
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskQueue resource."""  
    activity_statistics: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity_statistics'), 'exclude': lambda f: f is None }})
    r"""The number of current Workers by Activity."""  
    longest_relative_task_age_in_queue: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longest_relative_task_age_in_queue'), 'exclude': lambda f: f is None }})
    r"""The relative age in the TaskQueue for the longest waiting Task. Calculation is based on the time when the Task entered the TaskQueue."""  
    longest_relative_task_sid_in_queue: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longest_relative_task_sid_in_queue'), 'exclude': lambda f: f is None }})
    r"""The Task SID of the Task waiting in the TaskQueue the longest. Calculation is based on the time when the Task entered the TaskQueue."""  
    longest_task_waiting_age: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longest_task_waiting_age'), 'exclude': lambda f: f is None }})
    r"""The age of the longest waiting Task."""  
    longest_task_waiting_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longest_task_waiting_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the longest waiting Task."""  
    task_queue_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('task_queue_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the TaskQueue from which these statistics were calculated."""  
    tasks_by_priority: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks_by_priority'), 'exclude': lambda f: f is None }})
    r"""The number of Tasks by priority. For example: `{\\"0\\": \\"10\\", \\"99\\": \\"5\\"}` shows 10 Tasks at priority 0 and 5 at priority 99."""  
    tasks_by_status: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tasks_by_status'), 'exclude': lambda f: f is None }})
    r"""The number of Tasks by their current status. For example: `{\\"pending\\": \\"1\\", \\"reserved\\": \\"3\\", \\"assigned\\": \\"2\\", \\"completed\\": \\"5\\"}`."""  
    total_available_workers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_available_workers'), 'exclude': lambda f: f is None }})
    r"""The total number of Workers available for Tasks in the TaskQueue."""  
    total_eligible_workers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_eligible_workers'), 'exclude': lambda f: f is None }})
    r"""The total number of Workers eligible for Tasks in the TaskQueue, independent of their Activity state."""  
    total_tasks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_tasks'), 'exclude': lambda f: f is None }})
    r"""The total number of Tasks."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The absolute URL of the TaskQueue statistics resource."""  
    workspace_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workspace_sid'), 'exclude': lambda f: f is None }})
    r"""The SID of the Workspace that contains the TaskQueue."""  
    