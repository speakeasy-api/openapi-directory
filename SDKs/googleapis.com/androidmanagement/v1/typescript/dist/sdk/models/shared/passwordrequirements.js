"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordRequirements = exports.PasswordRequirementsUnifiedLockSettingsEnum = exports.PasswordRequirementsRequirePasswordUnlockEnum = exports.PasswordRequirementsPasswordScopeEnum = exports.PasswordRequirementsPasswordQualityEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The required password quality.
 */
var PasswordRequirementsPasswordQualityEnum;
(function (PasswordRequirementsPasswordQualityEnum) {
    PasswordRequirementsPasswordQualityEnum["PasswordQualityUnspecified"] = "PASSWORD_QUALITY_UNSPECIFIED";
    PasswordRequirementsPasswordQualityEnum["BiometricWeak"] = "BIOMETRIC_WEAK";
    PasswordRequirementsPasswordQualityEnum["Something"] = "SOMETHING";
    PasswordRequirementsPasswordQualityEnum["Numeric"] = "NUMERIC";
    PasswordRequirementsPasswordQualityEnum["NumericComplex"] = "NUMERIC_COMPLEX";
    PasswordRequirementsPasswordQualityEnum["Alphabetic"] = "ALPHABETIC";
    PasswordRequirementsPasswordQualityEnum["Alphanumeric"] = "ALPHANUMERIC";
    PasswordRequirementsPasswordQualityEnum["Complex"] = "COMPLEX";
    PasswordRequirementsPasswordQualityEnum["ComplexityLow"] = "COMPLEXITY_LOW";
    PasswordRequirementsPasswordQualityEnum["ComplexityMedium"] = "COMPLEXITY_MEDIUM";
    PasswordRequirementsPasswordQualityEnum["ComplexityHigh"] = "COMPLEXITY_HIGH";
})(PasswordRequirementsPasswordQualityEnum = exports.PasswordRequirementsPasswordQualityEnum || (exports.PasswordRequirementsPasswordQualityEnum = {}));
/**
 * The scope that the password requirement applies to.
 */
var PasswordRequirementsPasswordScopeEnum;
(function (PasswordRequirementsPasswordScopeEnum) {
    PasswordRequirementsPasswordScopeEnum["ScopeUnspecified"] = "SCOPE_UNSPECIFIED";
    PasswordRequirementsPasswordScopeEnum["ScopeDevice"] = "SCOPE_DEVICE";
    PasswordRequirementsPasswordScopeEnum["ScopeProfile"] = "SCOPE_PROFILE";
})(PasswordRequirementsPasswordScopeEnum = exports.PasswordRequirementsPasswordScopeEnum || (exports.PasswordRequirementsPasswordScopeEnum = {}));
/**
 * The length of time after a device or work profile is unlocked using a strong form of authentication (password, PIN, pattern) that it can be unlocked using any other authentication method (e.g. fingerprint, trust agents, face). After the specified time period elapses, only strong forms of authentication can be used to unlock the device or work profile.
 */
var PasswordRequirementsRequirePasswordUnlockEnum;
(function (PasswordRequirementsRequirePasswordUnlockEnum) {
    PasswordRequirementsRequirePasswordUnlockEnum["RequirePasswordUnlockUnspecified"] = "REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED";
    PasswordRequirementsRequirePasswordUnlockEnum["UseDefaultDeviceTimeout"] = "USE_DEFAULT_DEVICE_TIMEOUT";
    PasswordRequirementsRequirePasswordUnlockEnum["RequireEveryDay"] = "REQUIRE_EVERY_DAY";
})(PasswordRequirementsRequirePasswordUnlockEnum = exports.PasswordRequirementsRequirePasswordUnlockEnum || (exports.PasswordRequirementsRequirePasswordUnlockEnum = {}));
/**
 * Controls whether a unified lock is allowed for the device and the work profile, on devices running Android 9 and above with a work profile. This can be set only if password_scope is set to SCOPE_PROFILE, the policy will be rejected otherwise. If user has not set a separate work lock and this field is set to REQUIRE_SEPARATE_WORK_LOCK, a NonComplianceDetail is reported with nonComplianceReason set to USER_ACTION.
 */
var PasswordRequirementsUnifiedLockSettingsEnum;
(function (PasswordRequirementsUnifiedLockSettingsEnum) {
    PasswordRequirementsUnifiedLockSettingsEnum["UnifiedLockSettingsUnspecified"] = "UNIFIED_LOCK_SETTINGS_UNSPECIFIED";
    PasswordRequirementsUnifiedLockSettingsEnum["AllowUnifiedWorkAndPersonalLock"] = "ALLOW_UNIFIED_WORK_AND_PERSONAL_LOCK";
    PasswordRequirementsUnifiedLockSettingsEnum["RequireSeparateWorkLock"] = "REQUIRE_SEPARATE_WORK_LOCK";
})(PasswordRequirementsUnifiedLockSettingsEnum = exports.PasswordRequirementsUnifiedLockSettingsEnum || (exports.PasswordRequirementsUnifiedLockSettingsEnum = {}));
/**
 * Requirements for the password used to unlock a device.
 */
var PasswordRequirements = /** @class */ (function (_super) {
    __extends(PasswordRequirements, _super);
    function PasswordRequirements() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maximumFailedPasswordsForWipe" }),
        __metadata("design:type", Number)
    ], PasswordRequirements.prototype, "maximumFailedPasswordsForWipe", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordExpirationTimeout" }),
        __metadata("design:type", String)
    ], PasswordRequirements.prototype, "passwordExpirationTimeout", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordHistoryLength" }),
        __metadata("design:type", Number)
    ], PasswordRequirements.prototype, "passwordHistoryLength", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordMinimumLength" }),
        __metadata("design:type", Number)
    ], PasswordRequirements.prototype, "passwordMinimumLength", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordMinimumLetters" }),
        __metadata("design:type", Number)
    ], PasswordRequirements.prototype, "passwordMinimumLetters", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordMinimumLowerCase" }),
        __metadata("design:type", Number)
    ], PasswordRequirements.prototype, "passwordMinimumLowerCase", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordMinimumNonLetter" }),
        __metadata("design:type", Number)
    ], PasswordRequirements.prototype, "passwordMinimumNonLetter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordMinimumNumeric" }),
        __metadata("design:type", Number)
    ], PasswordRequirements.prototype, "passwordMinimumNumeric", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordMinimumSymbols" }),
        __metadata("design:type", Number)
    ], PasswordRequirements.prototype, "passwordMinimumSymbols", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordMinimumUpperCase" }),
        __metadata("design:type", Number)
    ], PasswordRequirements.prototype, "passwordMinimumUpperCase", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordQuality" }),
        __metadata("design:type", String)
    ], PasswordRequirements.prototype, "passwordQuality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "passwordScope" }),
        __metadata("design:type", String)
    ], PasswordRequirements.prototype, "passwordScope", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "requirePasswordUnlock" }),
        __metadata("design:type", String)
    ], PasswordRequirements.prototype, "requirePasswordUnlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "unifiedLockSettings" }),
        __metadata("design:type", String)
    ], PasswordRequirements.prototype, "unifiedLockSettings", void 0);
    return PasswordRequirements;
}(utils_1.SpeakeasyBase));
exports.PasswordRequirements = PasswordRequirements;
