/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * You can add labels to findings to help you keep track of you development.
 *
 * @remarks
 * Use these endpoints to manage your labels.
 *
 */
export class Labels {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete label
   */
  deleteLabelsId(
    req: operations.DeleteLabelsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteLabelsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteLabelsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/labels/{id}/", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteLabelsIdResponse =
        new operations.DeleteLabelsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteLabelsId401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteLabelsId401ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List labels
   */
  getLabels(
    req: operations.GetLabelsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLabelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLabelsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/labels/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLabelsResponse =
        new operations.GetLabelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLabels200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetLabels200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLabels401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetLabels401ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve framework
   */
  getLabelsId(
    req: operations.GetLabelsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLabelsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLabelsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/labels/{id}/", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLabelsIdResponse =
        new operations.GetLabelsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.label = utils.objectToClass(httpRes?.data, shared.Label);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLabelsId401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetLabelsId401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLabelsId404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetLabelsId404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Partial update
   */
  patchLabelsId(
    req: operations.PatchLabelsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchLabelsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchLabelsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/labels/{id}/", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "labelInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchLabelsIdResponse =
        new operations.PatchLabelsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.label = utils.objectToClass(httpRes?.data, shared.Label);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchLabelsId401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PatchLabelsId401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchLabelsId404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PatchLabelsId404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create label
   */
  postLabels(
    req: shared.LabelInput,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLabelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.LabelInput(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/labels/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLabelsResponse =
        new operations.PostLabelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.label = utils.objectToClass(httpRes?.data, shared.Label);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postLabels400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostLabels400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postLabels401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostLabels401ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update label
   */
  putLabelsId(
    req: operations.PutLabelsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutLabelsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutLabelsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/labels/{id}/", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "labelInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutLabelsIdResponse =
        new operations.PutLabelsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.label = utils.objectToClass(httpRes?.data, shared.Label);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putLabelsId400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PutLabelsId400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putLabelsId401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PutLabelsId401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putLabelsId404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PutLabelsId404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
