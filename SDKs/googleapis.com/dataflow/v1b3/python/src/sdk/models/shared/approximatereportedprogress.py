"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import position as shared_position
from ..shared import reportedparallelism as shared_reportedparallelism
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ApproximateReportedProgress:
    r"""A progress measurement of a WorkItem by a worker."""
    
    consumed_parallelism: Optional[shared_reportedparallelism.ReportedParallelism] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumedParallelism'), 'exclude': lambda f: f is None }})
    r"""Represents the level of parallelism in a WorkItem's input, reported by the worker."""  
    fraction_consumed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fractionConsumed'), 'exclude': lambda f: f is None }})
    r"""Completion as fraction of the input consumed, from 0.0 (beginning, nothing consumed), to 1.0 (end of the input, entire input consumed)."""  
    position: Optional[shared_position.Position] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index."""  
    remaining_parallelism: Optional[shared_reportedparallelism.ReportedParallelism] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remainingParallelism'), 'exclude': lambda f: f is None }})
    r"""Represents the level of parallelism in a WorkItem's input, reported by the worker."""  
    