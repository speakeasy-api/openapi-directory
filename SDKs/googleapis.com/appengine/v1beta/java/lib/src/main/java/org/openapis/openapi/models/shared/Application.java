/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Application - An Application resource contains the top-level configuration of an App Engine application.
 */
public class Application {
    /**
     * Google Apps authentication domain that controls which users can access this application.Defaults to open access for any Google Account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authDomain")
    public String authDomain;

    public Application withAuthDomain(String authDomain) {
        this.authDomain = authDomain;
        return this;
    }
    
    /**
     * Output only. Google Cloud Storage bucket that can be used for storing files associated with this application. This bucket is associated with the application and can be used by the gcloud deployment commands.@OutputOnly
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codeBucket")
    public String codeBucket;

    public Application withCodeBucket(String codeBucket) {
        this.codeBucket = codeBucket;
        return this;
    }
    
    /**
     * The type of the Cloud Firestore or Cloud Datastore database associated with this application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databaseType")
    public ApplicationDatabaseTypeEnum databaseType;

    public Application withDatabaseType(ApplicationDatabaseTypeEnum databaseType) {
        this.databaseType = databaseType;
        return this;
    }
    
    /**
     * Output only. Google Cloud Storage bucket that can be used by this application to store content.@OutputOnly
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultBucket")
    public String defaultBucket;

    public Application withDefaultBucket(String defaultBucket) {
        this.defaultBucket = defaultBucket;
        return this;
    }
    
    /**
     * Cookie expiration policy for this application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultCookieExpiration")
    public String defaultCookieExpiration;

    public Application withDefaultCookieExpiration(String defaultCookieExpiration) {
        this.defaultCookieExpiration = defaultCookieExpiration;
        return this;
    }
    
    /**
     * Output only. Hostname used to reach this application, as resolved by App Engine.@OutputOnly
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultHostname")
    public String defaultHostname;

    public Application withDefaultHostname(String defaultHostname) {
        this.defaultHostname = defaultHostname;
        return this;
    }
    
    /**
     * HTTP path dispatch rules for requests to the application that do not explicitly target a service or version. Rules are order-dependent. Up to 20 dispatch rules can be supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dispatchRules")
    public UrlDispatchRule[] dispatchRules;

    public Application withDispatchRules(UrlDispatchRule[] dispatchRules) {
        this.dispatchRules = dispatchRules;
        return this;
    }
    
    /**
     * The feature specific settings to be used in the application. These define behaviors that are user configurable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("featureSettings")
    public FeatureSettings featureSettings;

    public Application withFeatureSettings(FeatureSettings featureSettings) {
        this.featureSettings = featureSettings;
        return this;
    }
    
    /**
     * Output only. The Google Container Registry domain used for storing managed build docker images for this application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gcrDomain")
    public String gcrDomain;

    public Application withGcrDomain(String gcrDomain) {
        this.gcrDomain = gcrDomain;
        return this;
    }
    
    /**
     * Identity-Aware Proxy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iap")
    public IdentityAwareProxy iap;

    public Application withIap(IdentityAwareProxy iap) {
        this.iap = iap;
        return this;
    }
    
    /**
     * Identifier of the Application resource. This identifier is equivalent to the project ID of the Google Cloud Platform project where you want to deploy your application. Example: myapp.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Application withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Location from which this application runs. Application instances run out of the data centers in the specified location, which is also where all of the application's end user content is stored.Defaults to us-central.View the list of supported locations (https://cloud.google.com/appengine/docs/locations).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationId")
    public String locationId;

    public Application withLocationId(String locationId) {
        this.locationId = locationId;
        return this;
    }
    
    /**
     * Output only. Full path to the Application resource in the API. Example: apps/myapp.@OutputOnly
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Application withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The service account associated with the application. This is the app-level default identity. If no identity provided during create version, Admin API will fallback to this one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccount")
    public String serviceAccount;

    public Application withServiceAccount(String serviceAccount) {
        this.serviceAccount = serviceAccount;
        return this;
    }
    
    /**
     * Serving status of this application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("servingStatus")
    public ApplicationServingStatusEnum servingStatus;

    public Application withServingStatus(ApplicationServingStatusEnum servingStatus) {
        this.servingStatus = servingStatus;
        return this;
    }
    
    public Application(){}
}
