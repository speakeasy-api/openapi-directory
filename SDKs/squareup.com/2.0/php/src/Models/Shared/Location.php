<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class Location
{
    /**
     * Represents a postal address in a country. The address format is based 
     * 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Address $address
     */
	#[\JMS\Serializer\Annotation\SerializedName('address')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Address')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Address $address = null;
    
    /**
     * The email of the location.
     * 
     * This email is visible to the customers of the location.
     * For example, the email appears on customer receipts. 
     * For example, `help&#64;squareup.com`.
     * 
     * @var ?string $businessEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('business_email')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $businessEmail = null;
    
    /**
     * Represents the hours of operation for a business location.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BusinessHours $businessHours
     */
	#[\JMS\Serializer\Annotation\SerializedName('business_hours')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BusinessHours')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BusinessHours $businessHours = null;
    
    /**
     * The business name of the location
     * 
     * This is the name visible to the customers of the location.
     * For example, this name appears on customer receipts.
     * 
     * @var ?string $businessName
     */
	#[\JMS\Serializer\Annotation\SerializedName('business_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $businessName = null;
    
    /**
     * The Square features that are enabled for the location.
     * 
     * See [LocationCapability](https://developer.squareup.com/reference/square_2021-08-18/enums/LocationCapability) for possible values.
     * 
     * @var ?array<string> $capabilities
     */
	#[\JMS\Serializer\Annotation\SerializedName('capabilities')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $capabilities = null;
    
    /**
     * Latitude and longitude coordinates.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Coordinates $coordinates
     */
	#[\JMS\Serializer\Annotation\SerializedName('coordinates')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Coordinates')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Coordinates $coordinates = null;
    
    /**
     * The country of the location, in ISO 3166-1-alpha-2 format.
     * 
     * 
     * See [Country](https://developer.squareup.com/reference/square_2021-08-18/enums/Country) for possible values.
     * 
     * @var ?string $country
     */
	#[\JMS\Serializer\Annotation\SerializedName('country')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $country = null;
    
    /**
     * The time when the location was created, in RFC 3339 format.
     * 
     * For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).
     * 
     * @var ?string $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createdAt = null;
    
    /**
     * The currency used for all transactions at this location,
     * 
     * in ISO 4217 format.
     * See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.
     * 
     * @var ?string $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $currency = null;
    
    /**
     * The description of the location.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, `https://www.facebook.com/square`.
     * 
     * @var ?string $facebookUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('facebook_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $facebookUrl = null;
    
    /**
     * The URL of a full-format logo image for the location. The Seller must choose this logo in the
     * 
     * Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
     * that Square generates on behalf of the Seller. This image can have an aspect ratio of 2:1 or greater
     * and is recommended to be at least 1280x648 pixels.
     * 
     * @var ?string $fullFormatLogoUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('full_format_logo_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fullFormatLogoUrl = null;
    
    /**
     * The Square-issued ID of the location.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The Instagram username of the location without the '&#64;' symbol. For example, `square`.
     * 
     * @var ?string $instagramUsername
     */
	#[\JMS\Serializer\Annotation\SerializedName('instagram_username')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $instagramUsername = null;
    
    /**
     * The language associated with the location, in
     * 
     * [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A). 
     * For more information, see [Location language code](https://developer.squareup.com/docs/locations-api#location-language-code).
     * 
     * @var ?string $languageCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('language_code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $languageCode = null;
    
    /**
     * The URL of the logo image for the location. The Seller must choose this logo in the Seller
     * 
     * dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
     * that Square generates on behalf of the Seller. This image should have an aspect ratio
     * close to 1:1 and is recommended to be at least 200x200 pixels.
     * 
     * @var ?string $logoUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('logo_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $logoUrl = null;
    
    /**
     * The merchant category code (MCC) of the location, as standardized by ISO 18245.
     * 
     * The MCC describes the kind of goods or services sold at the location.
     * 
     * @var ?string $mcc
     */
	#[\JMS\Serializer\Annotation\SerializedName('mcc')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $mcc = null;
    
    /**
     * The ID of the merchant that owns the location.
     * 
     * @var ?string $merchantId
     */
	#[\JMS\Serializer\Annotation\SerializedName('merchant_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $merchantId = null;
    
    /**
     * The name of the location.
     * 
     * This information appears in the dashboard as the nickname.
     * A location name must be unique within a seller account.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * The phone number of the location in human readable format. For example, `+353 80 0 098 8099`.
     * 
     * @var ?string $phoneNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('phone_number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $phoneNumber = null;
    
    /**
     * The URL of the Point of Sale background image for the location.
     * 
     * @var ?string $posBackgroundUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('pos_background_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $posBackgroundUrl = null;
    
    /**
     * The status of the location, either active or inactive.
     * 
     * @var ?string $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $status = null;
    
    /**
     * The tax IDs that a Location is operating under.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TaxIds $taxIds
     */
	#[\JMS\Serializer\Annotation\SerializedName('tax_ids')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TaxIds')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TaxIds $taxIds = null;
    
    /**
     * The [IANA Timezone](https://www.iana.org/time-zones) identifier for
     * 
     * the timezone of the location.
     * 
     * @var ?string $timezone
     */
	#[\JMS\Serializer\Annotation\SerializedName('timezone')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $timezone = null;
    
    /**
     * The Twitter username of the location without the '&#64;' symbol. For example, `Square`.
     * 
     * @var ?string $twitterUsername
     */
	#[\JMS\Serializer\Annotation\SerializedName('twitter_username')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $twitterUsername = null;
    
    /**
     * The type of the location, either physical or mobile.
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
    /**
     * The website URL of the location.  For example, `https://squareup.com`.
     * 
     * @var ?string $websiteUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('website_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $websiteUrl = null;
    
	public function __construct()
	{
		$this->address = null;
		$this->businessEmail = null;
		$this->businessHours = null;
		$this->businessName = null;
		$this->capabilities = null;
		$this->coordinates = null;
		$this->country = null;
		$this->createdAt = null;
		$this->currency = null;
		$this->description = null;
		$this->facebookUrl = null;
		$this->fullFormatLogoUrl = null;
		$this->id = null;
		$this->instagramUsername = null;
		$this->languageCode = null;
		$this->logoUrl = null;
		$this->mcc = null;
		$this->merchantId = null;
		$this->name = null;
		$this->phoneNumber = null;
		$this->posBackgroundUrl = null;
		$this->status = null;
		$this->taxIds = null;
		$this->timezone = null;
		$this->twitterUsername = null;
		$this->type = null;
		$this->websiteUrl = null;
	}
}
