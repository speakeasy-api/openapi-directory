"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import closestatusfilter as shared_closestatusfilter
from ..shared import executiontimefilter as shared_executiontimefilter
from ..shared import tagfilter as shared_tagfilter
from ..shared import workflowexecutionfilter as shared_workflowexecutionfilter
from ..shared import workflowtypefilter as shared_workflowtypefilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CountClosedWorkflowExecutionsInput:
    
    domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain') }})  
    close_status_filter: Optional[shared_closestatusfilter.CloseStatusFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closeStatusFilter'), 'exclude': lambda f: f is None }})  
    close_time_filter: Optional[shared_executiontimefilter.ExecutionTimeFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closeTimeFilter'), 'exclude': lambda f: f is None }})  
    execution_filter: Optional[shared_workflowexecutionfilter.WorkflowExecutionFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionFilter'), 'exclude': lambda f: f is None }})  
    start_time_filter: Optional[shared_executiontimefilter.ExecutionTimeFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTimeFilter'), 'exclude': lambda f: f is None }})  
    tag_filter: Optional[shared_tagfilter.TagFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagFilter'), 'exclude': lambda f: f is None }})  
    type_filter: Optional[shared_workflowtypefilter.WorkflowTypeFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeFilter'), 'exclude': lambda f: f is None }})  
    