"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accountreference16_ch as shared_accountreference16_ch
from ..shared import additionalinformationstructured as shared_additionalinformationstructured
from ..shared import amount as shared_amount
from ..shared import balance as shared_balance
from ..shared import entrydetailselement as shared_entrydetailselement
from ..shared import hreftype as shared_hreftype
from ..shared import purposecode_enum as shared_purposecode_enum
from ..shared import remittanceinformationstructured as shared_remittanceinformationstructured
from ..shared import reportexchangerate as shared_reportexchangerate
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Transactions:
    r"""Transaction details."""
    
    transaction_amount: shared_amount.Amount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionAmount') }})  
    links: Optional[dict[str, shared_hreftype.HrefType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})  
    additional_information: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInformation'), 'exclude': lambda f: f is None }})
    r"""Might be used by the ASPSP to transport additional transaction related information to the PSU"""  
    additional_information_structured: Optional[shared_additionalinformationstructured.AdditionalInformationStructured] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalInformationStructured'), 'exclude': lambda f: f is None }})
    r"""Is used if and only if the bookingStatus entry equals \\"information\\".
    Every active standing order related to the dedicated payment account result into one entry.
    """  
    balance_after_transaction: Optional[shared_balance.Balance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balanceAfterTransaction'), 'exclude': lambda f: f is None }})
    r"""A single balance element."""  
    bank_transaction_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankTransactionCode'), 'exclude': lambda f: f is None }})
    r"""Bank transaction code as used by the ASPSP and using the sub elements of this structured code defined by ISO 20022.
    
    This code type is concatenating the three ISO20022 Codes
      * Domain Code,
      * Family Code, and
      * SubFamiliy Code
    by hyphens, resulting in 'DomainCode'-'FamilyCode'-'SubFamilyCode'.
    """  
    batch_indicator: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchIndicator'), 'exclude': lambda f: f is None }})
    r"""If this indicator equals true, then the related entry is a batch entry."""  
    batch_number_of_transactions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batchNumberOfTransactions'), 'exclude': lambda f: f is None }})
    r"""Shall be used if and only if the batchIndicator is contained and equals true."""  
    booking_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when an entry is posted to an account on the ASPSPs books."""  
    check_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkId'), 'exclude': lambda f: f is None }})
    r"""Identification of a Cheque."""  
    creditor_account: Optional[shared_accountreference16_ch.AccountReference16CH] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorAccount'), 'exclude': lambda f: f is None }})
    r"""Reference to an account by either
      * IBAN, of a payment accounts, or
      * otherAccountIdentification, for payment accounts if there is no IBAN
    adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
    """  
    creditor_agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorAgent'), 'exclude': lambda f: f is None }})
    r"""BICFI"""  
    creditor_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorId'), 'exclude': lambda f: f is None }})
    r"""Identification of Creditors, e.g. a SEPA Creditor ID."""  
    creditor_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorName'), 'exclude': lambda f: f is None }})
    r"""Creditor name."""  
    currency_exchange: Optional[list[shared_reportexchangerate.ReportExchangeRate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyExchange'), 'exclude': lambda f: f is None }})
    r"""Array of exchange rates."""  
    debtor_account: Optional[shared_accountreference16_ch.AccountReference16CH] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debtorAccount'), 'exclude': lambda f: f is None }})
    r"""Reference to an account by either
      * IBAN, of a payment accounts, or
      * otherAccountIdentification, for payment accounts if there is no IBAN
    adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
    """  
    debtor_agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debtorAgent'), 'exclude': lambda f: f is None }})
    r"""BICFI"""  
    debtor_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debtorName'), 'exclude': lambda f: f is None }})
    r"""Debtor name."""  
    end_to_end_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endToEndId'), 'exclude': lambda f: f is None }})
    r"""Unique end to end identity."""  
    entry_details: Optional[list[shared_entrydetailselement.EntryDetailsElement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entryDetails'), 'exclude': lambda f: f is None }})
    r"""Might be used by the ASPSP to transport details about transactions within a batch."""  
    entry_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entryReference'), 'exclude': lambda f: f is None }})
    r"""Is the identification of the transaction as used e.g. for reference for deltafunction on application level.
    The same identification as for example used within camt.05x messages.
    """  
    mandate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandateId'), 'exclude': lambda f: f is None }})
    r"""Identification of Mandates, e.g. a SEPA Mandate ID."""  
    proprietary_bank_transaction_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proprietaryBankTransactionCode'), 'exclude': lambda f: f is None }})
    r"""Proprietary bank transaction code as used within a community or within an ASPSP e.g.
    for MT94x based transaction reports.
    """  
    purpose_code: Optional[shared_purposecode_enum.PurposeCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purposeCode'), 'exclude': lambda f: f is None }})
    r"""ExternalPurpose1Code from ISO 20022.
    
    Values from ISO 20022 External Code List ExternalCodeSets_1Q2018 June 2018.
    """  
    remittance_information_structured: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remittanceInformationStructured'), 'exclude': lambda f: f is None }})
    r"""Structured remittance information Max"""  
    remittance_information_structured_array: Optional[list[shared_remittanceinformationstructured.RemittanceInformationStructured]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remittanceInformationStructuredArray'), 'exclude': lambda f: f is None }})
    r"""Array of structured remittance information."""  
    remittance_information_unstructured: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remittanceInformationUnstructured'), 'exclude': lambda f: f is None }})
    r"""Unstructured remittance information."""  
    remittance_information_unstructured_array: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remittanceInformationUnstructuredArray'), 'exclude': lambda f: f is None }})
    r"""Array of unstructured remittance information."""  
    transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionId'), 'exclude': lambda f: f is None }})
    r"""This identification is given by the attribute transactionId of the corresponding entry of a transaction list."""  
    ultimate_creditor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ultimateCreditor'), 'exclude': lambda f: f is None }})
    r"""Ultimate creditor."""  
    ultimate_debtor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ultimateDebtor'), 'exclude': lambda f: f is None }})
    r"""Ultimate debtor."""  
    value_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The Date at which assets become available to the account owner in case of a credit."""  
    