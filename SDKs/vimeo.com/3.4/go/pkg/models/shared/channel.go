// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ChannelMetadataConnectionsPrivacyUsers - Information provided to channel moderators about which users they have specifically permitted to access a private channel. This data requires a bearer token with the `private` scope.
type ChannelMetadataConnectionsPrivacyUsers struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// ChannelMetadataConnectionsUsers - Information about the users following or moderating this channel.
type ChannelMetadataConnectionsUsers struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// ChannelMetadataConnectionsVideos - Information about the videos that belong to this channel.
type ChannelMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// ChannelMetadataConnections - A collection of information that is connected to this resource.
type ChannelMetadataConnections struct {
	// Information provided to channel moderators about which users they have specifically permitted to access a private channel. This data requires a bearer token with the `private` scope.
	PrivacyUsers ChannelMetadataConnectionsPrivacyUsers `json:"privacy_users"`
	// Information about the users following or moderating this channel.
	Users ChannelMetadataConnectionsUsers `json:"users"`
	// Information about the videos that belong to this channel.
	Videos ChannelMetadataConnectionsVideos `json:"videos"`
}

// ChannelMetadataInteractionsAddModerators - An action indicating that the authenticated user is the owner of the channel and may therefore add other users as channel moderators. This data requires a bearer token with the `private` scope.
type ChannelMetadataInteractionsAddModerators struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// ChannelMetadataInteractionsAddTo - When a channel appears in the context of adding or removing a video from it (`/videos/{video_id}/available_channels`), include information about adding or removing the video. This data requires a bearer token with the `private` scope.
type ChannelMetadataInteractionsAddTo struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// ChannelMetadataInteractionsFollowTypeEnum - Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.
//
// Option descriptions:
//   - `moderator` - The authenticated user is a moderator.
//   - `subscriber` - The authenticated user is a subscriber.
type ChannelMetadataInteractionsFollowTypeEnum string

const (
	ChannelMetadataInteractionsFollowTypeEnumModerator  ChannelMetadataInteractionsFollowTypeEnum = "moderator"
	ChannelMetadataInteractionsFollowTypeEnumSubscriber ChannelMetadataInteractionsFollowTypeEnum = "subscriber"
)

func (e *ChannelMetadataInteractionsFollowTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "moderator":
		fallthrough
	case "subscriber":
		*e = ChannelMetadataInteractionsFollowTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChannelMetadataInteractionsFollowTypeEnum: %s", s)
	}
}

// ChannelMetadataInteractionsFollow - An action indicating if the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.
type ChannelMetadataInteractionsFollow struct {
	// Whether the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.
	Added bool `json:"added"`
	// The time in ISO 8601 format that the user followed this channel, or the null value if the user hasn't followed the channel. This data requires a bearer token with the `private` scope.
	AddedTime string `json:"added_time"`
	// Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.
	//
	// Option descriptions:
	//  * `moderator` - The authenticated user is a moderator.
	//  * `subscriber` - The authenticated user is a subscriber.
	//
	Type ChannelMetadataInteractionsFollowTypeEnum `json:"type"`
	// The URI for following or unfollowing this channel. PUT to this URI to follow the channel, or DELETE to this URI to unfollow the channel. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// ChannelMetadataInteractionsModerateVideos - An action indicating that the authenticated user is a moderator of the channel and may therefore add or remove videos from the channel. This data requires a bearer token with the `private` scope.
type ChannelMetadataInteractionsModerateVideos struct {
	// An array of HTTP methods allowed on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// ChannelMetadataInteractions - A list of resource URIs related to the channel.
type ChannelMetadataInteractions struct {
	// An action indicating that the authenticated user is the owner of the channel and may therefore add other users as channel moderators. This data requires a bearer token with the `private` scope.
	AddModerators ChannelMetadataInteractionsAddModerators `json:"add_moderators"`
	// When a channel appears in the context of adding or removing a video from it (`/videos/{video_id}/available_channels`), include information about adding or removing the video. This data requires a bearer token with the `private` scope.
	AddTo ChannelMetadataInteractionsAddTo `json:"add_to"`
	// An action indicating if the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.
	Follow ChannelMetadataInteractionsFollow `json:"follow"`
	// An action indicating that the authenticated user is a moderator of the channel and may therefore add or remove videos from the channel. This data requires a bearer token with the `private` scope.
	ModerateVideos ChannelMetadataInteractionsModerateVideos `json:"moderate_videos"`
}

// ChannelMetadata - Metadata about the channel.
type ChannelMetadata struct {
	// A collection of information that is connected to this resource.
	Connections ChannelMetadataConnections `json:"connections"`
	// A list of resource URIs related to the channel.
	Interactions ChannelMetadataInteractions `json:"interactions"`
}

// ChannelPrivacyViewEnum - Who can view the channel:
//
// Option descriptions:
//   - `anybody` - Anyone can view the channel.
//   - `moderators` - Only moderators can view the channel.
//   - `users` - Only registered users can view the channel.
type ChannelPrivacyViewEnum string

const (
	ChannelPrivacyViewEnumAnybody    ChannelPrivacyViewEnum = "anybody"
	ChannelPrivacyViewEnumModerators ChannelPrivacyViewEnum = "moderators"
	ChannelPrivacyViewEnumUsers      ChannelPrivacyViewEnum = "users"
)

func (e *ChannelPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "moderators":
		fallthrough
	case "users":
		*e = ChannelPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChannelPrivacyViewEnum: %s", s)
	}
}

// ChannelPrivacy - The privacy settings of the channel.
type ChannelPrivacy struct {
	// Who can view the channel:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the channel.
	//  * `moderators` - Only moderators can view the channel.
	//  * `users` - Only registered users can view the channel.
	//
	View ChannelPrivacyViewEnum `json:"view"`
}

// Channel - The channel was created.
type Channel struct {
	// The categories to which this channel belongs as specified by the channel moderators.
	Categories []Category `json:"categories"`
	// The time in ISO 8601 format when the channel was created.
	CreatedTime string `json:"created_time"`
	// A brief explanation of the channel's content.
	Description string `json:"description"`
	// The banner that appears by default at the top of the channel page.
	Header Picture `json:"header"`
	// The URL to access the channel in a browser.
	Link string `json:"link"`
	// Metadata about the channel.
	Metadata ChannelMetadata `json:"metadata"`
	// The time in ISO 8601 format when the album was last modified.
	ModifiedTime string `json:"modified_time"`
	// The display name that identifies the channel.
	Name string `json:"name"`
	// The active image for the channel; defaults to the thumbnail of the last video added to the channel.
	Pictures Picture `json:"pictures"`
	// The privacy settings of the channel.
	Privacy ChannelPrivacy `json:"privacy"`
	// The channel resource key.
	ResourceKey string `json:"resource_key"`
	// An array of all tags assigned to this channel.
	Tags []Tag `json:"tags"`
	// The unique identifier to access the channel resource.
	URI string `json:"uri"`
	// The Vimeo user who owns the channel.
	User User `json:"user"`
}
