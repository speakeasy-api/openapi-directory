/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Notifications are the actions taken to inform users or call third-party endpoints when a certain event happens. Typical actions include emails and callouts. Callouts typically refer to HTTP invocations, such as HTTP calls to REST services.
 *
 * @remarks
 *
 * **NOTE:** Notifications are processed asynchronously and may be delivered with a delay and out of order.
 *
 * Notifications are associated with Communication Profiles, which allow you to send specific event-driven notifications to targeted customers. Zuora provides the following Settings API to access the settings of Communication Profiles:
 *   * [Get all Communication Profiles](https://knowledgecenter.zuora.com/DC_Developers/BB_C_Settings_API/Settings_API_tutorials/Get_all_Communication_Profiles)
 *   * [Create a new Communication Profile](https://knowledgecenter.zuora.com/DC_Developers/BB_C_Settings_API/Settings_API_tutorials/Create_a_new_Communication_Profile)
 *   * [Modify a Communication Profile](https://knowledgecenter.zuora.com/DC_Developers/BB_C_Settings_API/Settings_API_tutorials/Modify_a_Communication_Profile)
 *   * [Get all Notifications under a particular Communication Profile](https://knowledgecenter.zuora.com/DC_Developers/BB_C_Settings_API/Settings_API_tutorials/Get_all_Notifications_under_a_particular_Communication_Profile)
 *
 */
export class Notifications {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete an email template
   *
   * @remarks
   * Deletes an email template.
   *
   * **Note**: This operation is only applicable to notifications for custom events.
   *
   */
  deleteDELETEEmailTemplate(
    req: operations.DELETEDELETEEmailTemplateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DELETEDELETEEmailTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DELETEDELETEEmailTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/notifications/email-templates/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DELETEDELETEEmailTemplateResponse =
        new operations.DELETEDELETEEmailTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 404, 405, 415, 500].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a notification definition
   *
   * @remarks
   * Deletes a notification definition.
   *
   * **Note**: This operation is only applicable to notifications for custom events.
   *
   */
  deleteDELETENotificationDefinition(
    req: operations.DELETEDELETENotificationDefinitionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DELETEDELETENotificationDefinitionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DELETEDELETENotificationDefinitionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/notifications/notification-definitions/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DELETEDELETENotificationDefinitionResponse =
        new operations.DELETEDELETENotificationDefinitionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 404, 405, 415, 500].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete notification histories for an account
   *
   * @remarks
   * Delete all notification histories for the given account. All email and callout notifications for this account will be deleted upon successful operation.
   *
   * **Note**: This operation is only available if you have the Notification and the Configurable Event features enabled.
   *
   */
  deleteDELETENotificationHistoryForAccount(
    req: operations.DELETEDELETENotificationHistoryForAccountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DELETEDELETENotificationHistoryForAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DELETEDELETENotificationHistoryForAccountRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/notifications/history";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DELETEDELETENotificationHistoryForAccountResponse =
        new operations.DELETEDELETENotificationHistoryForAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 202:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.notificationsHistoryDeletionTaskResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotificationsHistoryDeletionTaskResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.deleteDELETENotificationHistoryForAccount400ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List callout notification histories
   *
   * @remarks
   * Describes how to get a notification history for callouts.
   *
   */
  getCalloutHistory(
    req: operations.GETCalloutHistoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETCalloutHistoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETCalloutHistoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/notification-history/callout";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETCalloutHistoryResponse =
        new operations.GETCalloutHistoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getCalloutHistoryVOsType = utils.objectToClass(
              httpRes?.data,
              shared.GETCalloutHistoryVOsType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List email notification histories
   *
   * @remarks
   * Describes how to get a notification history for notification emails.
   *
   *
   * ## Notes
   * Request parameters and their values may be appended with a "?" following the HTTPS GET request.  Additional request parameter are separated by "&".
   *
   * For example:
   *
   * `GET https://rest.zuora.com/v1/notification-history/email?startTime=2015-01-12T00:00:00&endTime=2015-01-15T00:00:00&failedOnly=false&eventCategory=1000&pageSize=1`
   *
   */
  getEmailHistory(
    req: operations.GETEmailHistoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETEmailHistoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETEmailHistoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/notification-history/email";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETEmailHistoryResponse =
        new operations.GETEmailHistoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getEmailHistoryVOsType = utils.objectToClass(
              httpRes?.data,
              shared.GETEmailHistoryVOsType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve an email template
   *
   * @remarks
   * Queries the email template of the specified ID.
   *
   * **Note**: This operation is only applicable to email templates for custom events.
   *
   */
  getGETEmailTemplate(
    req: operations.GETGETEmailTemplateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETGETEmailTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETGETEmailTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/notifications/email-templates/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETGETEmailTemplateResponse =
        new operations.GETGETEmailTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getPublicEmailTemplateResponse = utils.objectToClass(
              httpRes?.data,
              shared.GETPublicEmailTemplateResponse
            );
          }
          break;
        case [400, 404, 405, 415, 500].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a notification definition
   *
   * @remarks
   * Queries the notification definition of the given ID.
   *
   * **Note**: This operation is only applicable to notifications for custom events.
   *
   */
  getGETNotificationDefinition(
    req: operations.GETGETNotificationDefinitionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETGETNotificationDefinitionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETGETNotificationDefinitionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/notifications/notification-definitions/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETGETNotificationDefinitionResponse =
        new operations.GETGETNotificationDefinitionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getPublicNotificationDefinitionResponse = utils.objectToClass(
              httpRes?.data,
              shared.GETPublicNotificationDefinitionResponse
            );
          }
          break;
        case [404, 405, 415, 500].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a notification history deletion task
   *
   * @remarks
   * Get the notification history deletion task by ID.
   *
   * **Note**: This operation is only available if you have the Notification and the Configurable Event features enabled.
   *
   */
  getGETNotificationHistoryDeletionTask(
    req: operations.GETGETNotificationHistoryDeletionTaskRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETGETNotificationHistoryDeletionTaskResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETGETNotificationHistoryDeletionTaskRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/notifications/history/tasks/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETGETNotificationHistoryDeletionTaskResponse =
        new operations.GETGETNotificationHistoryDeletionTaskResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.notificationsHistoryDeletionTaskResponse = utils.objectToClass(
              httpRes?.data,
              shared.NotificationsHistoryDeletionTaskResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List email templates
   *
   * @remarks
   * Queries email templates.
   *
   * **Note**: This operation is only applicable to email templates for custom events.
   *
   */
  getQueryEmailTemplates(
    req: operations.GETQueryEmailTemplatesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETQueryEmailTemplatesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETQueryEmailTemplatesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/notifications/email-templates";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETQueryEmailTemplatesResponse =
        new operations.GETQueryEmailTemplatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getQueryEmailTemplates200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETQueryEmailTemplates200ApplicationJSON
              );
          }
          break;
        case [404, 405, 415, 500].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List notification definitions
   *
   * @remarks
   * Queries notification definitions with the specified filters.
   *
   * **Note**: This operation is only applicable to notifications for custom events.
   *
   */
  getQueryNotificationDefinitions(
    req: operations.GETQueryNotificationDefinitionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETQueryNotificationDefinitionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETQueryNotificationDefinitionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/notifications/notification-definitions";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETQueryNotificationDefinitionsResponse =
        new operations.GETQueryNotificationDefinitionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getQueryNotificationDefinitions200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETQueryNotificationDefinitions200ApplicationJSON
              );
          }
          break;
        case [404, 405, 415, 500].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an email template
   *
   * @remarks
   * Creates an email template.
   *
   * **Note**: This operation is only applicable to email templates for custom events.
   *
   */
  postCreateEmailTemplate(
    req: operations.POSTCreateEmailTemplateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.POSTCreateEmailTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.POSTCreateEmailTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/notifications/email-templates";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "postPublicEmailTemplateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.POSTCreateEmailTemplateResponse =
        new operations.POSTCreateEmailTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getPublicEmailTemplateResponse = utils.objectToClass(
              httpRes?.data,
              shared.GETPublicEmailTemplateResponse
            );
          }
          break;
        case [400, 404, 405, 415, 500].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a notification definition
   *
   * @remarks
   * Creates a notification definition. If a filter rule is specified, it will be evaluated to
   * see if the notification definition is qualified to handle the incoming events
   * during runtime. If the notification is qualified, it will send the email and
   * invoke the callout if it has an email template or a callout. See a step-by-step guide for
   * [creating a custom notification](https://www.zuora.com/developer/api-guides/#Callout-to-external-system-for-provisioning-or-entitlements)
   * in [Zuora API Guides](https://www.zuora.com/developer/api-guides/).
   *
   * **Note**: This operation is only applicable to notifications for custom events.
   *
   */
  postCreateNotificationDefinition(
    req: operations.POSTCreateNotificationDefinitionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.POSTCreateNotificationDefinitionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.POSTCreateNotificationDefinitionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/notifications/notification-definitions";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "postPublicNotificationDefinitionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.POSTCreateNotificationDefinitionResponse =
        new operations.POSTCreateNotificationDefinitionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getPublicNotificationDefinitionResponse = utils.objectToClass(
              httpRes?.data,
              shared.GETPublicNotificationDefinitionResponse
            );
          }
          break;
        case [400, 404, 405, 415, 500].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an email template
   *
   * @remarks
   * Updates an email template.
   *
   * **Note**: This operation is only applicable to email templates for custom events.
   *
   */
  putUpdateEmailTemplate(
    req: operations.PUTUpdateEmailTemplateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTUpdateEmailTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTUpdateEmailTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/notifications/email-templates/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "putPublicEmailTemplateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTUpdateEmailTemplateResponse =
        new operations.PUTUpdateEmailTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getPublicEmailTemplateResponse = utils.objectToClass(
              httpRes?.data,
              shared.GETPublicEmailTemplateResponse
            );
          }
          break;
        case [400, 404, 405, 415, 500].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a notification definition
   *
   * @remarks
   * Updates a notification definition.
   *
   * **Note**: This operation is only applicable to notifications for custom events.
   *
   */
  putUpdateNotificationDefinition(
    req: operations.PUTUpdateNotificationDefinitionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTUpdateNotificationDefinitionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTUpdateNotificationDefinitionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/notifications/notification-definitions/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "putPublicNotificationDefinitionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTUpdateNotificationDefinitionResponse =
        new operations.PUTUpdateNotificationDefinitionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getPublicNotificationDefinitionResponse = utils.objectToClass(
              httpRes?.data,
              shared.GETPublicNotificationDefinitionResponse
            );
          }
          break;
        case [400, 404, 405, 415, 500].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
