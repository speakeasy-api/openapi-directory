// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// UserorderdetailsCancellationData - Information about order cancellation, when it applies.
type UserorderdetailsCancellationData struct {
	// The date when the order was cancelled.
	CancellationDate string `json:"CancellationDate"`
	// The reason why the order was cancelled.
	Reason string `json:"Reason"`
	// If the order cancellation was requested by the payment gateway (`true`) or not (`false`).
	RequestedByPaymentNotification bool `json:"RequestedByPaymentNotification"`
	// If the order cancellation was requested by the seller (`true`) or not (`false`).
	RequestedBySellerNotification bool `json:"RequestedBySellerNotification"`
	// If the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.
	RequestedBySystem bool `json:"RequestedBySystem"`
	// If the order cancellation was requested by the costumer (`true`) or not (`false`).
	RequestedByUser bool `json:"RequestedByUser"`
}

// UserorderdetailsClientPreferencesData - Information about customer's preferences.
type UserorderdetailsClientPreferencesData struct {
	// Customer's prefered language while accessing the store.
	Locale string `json:"locale"`
	// When set as `true`, this field indicates customers opted to receive the newsletters, and when set as `false`, it means they did not.
	OptinNewsLetter bool `json:"optinNewsLetter"`
}

type UserorderdetailsItemMetadataItemsAssemblyOptions struct {
	// Displays the attachment's composition.
	Composition map[string]interface{} `json:"Composition"`
	// ID of the attachment related to the order.
	ID string `json:"Id"`
	// Displays the attachment's content.
	InputValues map[string]interface{} `json:"InputValues"`
	// Name of the attachment related to the order.
	Name string `json:"Name"`
	// If this field is set as `true`, when the customer purchases the item sending the attachment is required, and when set as `false`, sending the attachment is optional.
	Required bool `json:"Required"`
}

type UserorderdetailsItemMetadataItems struct {
	// Displays information about [assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) related to the item, if there are any.
	AssemblyOptions []UserorderdetailsItemMetadataItemsAssemblyOptions `json:"AssemblyOptions"`
	// URL slug of the item.
	DetailURL string `json:"DetailUrl"`
	// EAN of the item.
	Ean string `json:"Ean"`
	// Item's SKU ID, which is a unique numerical identifier.
	ID string `json:"Id"`
	// Item's SKU image URL.
	ImageURL string `json:"ImageUrl"`
	// Name of the item as displayed to customers in the storefront.
	Name string `json:"Name"`
	// ID of the Product associated with the item.
	ProductID string `json:"ProductId"`
	// Item's reference ID.
	RefID string `json:"RefId"`
	// Seller ID that identifies the seller the item belongs to.
	Seller string `json:"Seller"`
	// Name of the SKU corresponding to the item.
	SkuName string `json:"SkuName"`
}

// UserorderdetailsItemMetadata - Metadata information about the order's items.
type UserorderdetailsItemMetadata struct {
	// Metadata items.
	Items []UserorderdetailsItemMetadataItems `json:"Items"`
}

// UserorderdetailsMarketingData - Information about promotions and marketing. For example, coupon tracking information and internal or external UTMs.
type UserorderdetailsMarketingData struct {
	// Coupon's code information.
	Coupon string `json:"coupon"`
	// Object ID which expected value is `marketingData`.
	ID string `json:"id"`
	// Marketing tags information. This field can be used to register campaign data or informative tags regarding promotions.
	MarketingTags []string `json:"marketingTags"`
	// Value of the `utm_campaign` parameter of the URL that led to the request.
	UtmCampaign string `json:"utmCampaign"`
	// Value of the `utm_medium` parameter of the URL that led to the request.
	UtmMedium string `json:"utmMedium"`
	// UTM Source Parameters.
	UtmPartner string `json:"utmPartner"`
	// Value of the `utm_source` parameter of the URL that led to the request.
	UtmSource string `json:"utmSource"`
	// Internal UTM value `utmi_cp`.
	UtmiCampaign string `json:"utmiCampaign"`
	// Internal UTM value `utmi_pc`.
	UtmiPart string `json:"utmiPart"`
	// Internal UTM value `utmi_p`.
	Utmipage string `json:"utmipage"`
}

// UserorderdetailsSubscriptionDataSubscriptionsPlanFrequency - Information about subscriptions' recurrence.
type UserorderdetailsSubscriptionDataSubscriptionsPlanFrequency struct {
	// Number of the time interval configured between subscription orders, which depends on the periodicity. For a `DAILY` periodicity, the field's value will correspond to days, for `MONTHLY` to months, and so on.
	Interval int64 `json:"interval"`
	// Defines the subscriptions recurrence period. The possible values are `DAILY`,`WEEKLY`, `MONTHLY` and `YEARLY`.
	Periodicity string `json:"periodicity"`
}

// UserorderdetailsSubscriptionDataSubscriptionsPlanValidity - Information about the period during which the subscription will be valid.
type UserorderdetailsSubscriptionDataSubscriptionsPlanValidity struct {
	// Subscriptions' beginning date with the format `yyyy-mm-ddThh:mm:ss`.
	Begin string `json:"begin"`
	// Subscriptions' ending date with the format `yyyy-mm-ddThh:mm:ss`.
	End string `json:"end"`
}

// UserorderdetailsSubscriptionDataSubscriptionsPlan - Information about the subscription's validility and frequency.
type UserorderdetailsSubscriptionDataSubscriptionsPlan struct {
	// Information about subscriptions' recurrence.
	Frequency UserorderdetailsSubscriptionDataSubscriptionsPlanFrequency `json:"frequency"`
	// Type of plan.
	Type string `json:"type"`
	// Information about the period during which the subscription will be valid.
	Validity UserorderdetailsSubscriptionDataSubscriptionsPlanValidity `json:"validity"`
}

type UserorderdetailsSubscriptionDataSubscriptions struct {
	// Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on.
	ExecutionCount int64 `json:"ExecutionCount"`
	// Each item in the subscriptions' order is identified by an index. The position starts in`0`, followed by `1`, `2`, and so on.
	ItemIndex int64 `json:"ItemIndex"`
	// Information about the subscription's validility and frequency.
	Plan UserorderdetailsSubscriptionDataSubscriptionsPlan `json:"Plan"`
	// Price of the order when the customer signed up for subscriptions. Subscriptions created from Admin UI or APIs do not have an original order, so the field returns `0.0`. This field was valid only for Subscriptions v2 and is deprecated in Subscriptions v3.
	PriceAtSubscriptionDate float64 `json:"PriceAtSubscriptionDate"`
}

// UserorderdetailsSubscriptionData - Information about [subscriptions](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
type UserorderdetailsSubscriptionData struct {
	// ID of the subscription's group. If this field returns `null` and the `executionCount` is `0`, the order is the first one with subscriptions.
	SubscriptionGroupID string `json:"SubscriptionGroupId"`
	// List with subscriptions and their details.
	Subscriptions []UserorderdetailsSubscriptionDataSubscriptions `json:"Subscriptions"`
}

type UserorderdetailsTaxDataTaxInfoCollectionPriceTags struct {
	// If the tax is a percentage (`true`) or note (`false`).
	IsPercentual bool `json:"isPercentual"`
	// Name that identifies the tax.
	Name string `json:"name"`
	// The amount that corresponds to the tax.
	RawValue string `json:"rawValue"`
}

type UserorderdetailsTaxDataTaxInfoCollection struct {
	// Item's indexing number.
	ItemIndex int64 `json:"itemIndex"`
	// Price tag information.
	PriceTags []UserorderdetailsTaxDataTaxInfoCollectionPriceTags `json:"priceTags"`
	// Alphanumeric sequence that identifies an SKU.
	Sku string `json:"sku"`
}

// UserorderdetailsTaxData - Order's tax information.
type UserorderdetailsTaxData struct {
	// If the taxes were designated by the marketplace (`true`), or not (`false`).
	AreTaxesDesignatedByMarketplace bool `json:"areTaxesDesignatedByMarketplace"`
	// Array with taxes' details.
	TaxInfoCollection []UserorderdetailsTaxDataTaxInfoCollection `json:"taxInfoCollection"`
}

// Userorderdetails - OK
type Userorderdetails struct {
	// Corresponds to the three-digit [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.
	AffiliateID string `json:"affiliateId"`
	// When set as `true`, the order can be canceled, and when set as `false`, it is no longer possible to cancel the order.
	AllowCancellation bool `json:"allowCancellation"`
	// When set as `true`, the order can be edited, and when set as `false`, it is no longer possible to edit the order.
	AllowEdition bool `json:"allowEdition"`
	// Authorized order date.
	AuthorizedDate string `json:"authorizedDate"`
	// Call center operator responsible for the order.
	CallCenterOperatorData string `json:"callCenterOperatorData"`
	// Reason for order cancellation.
	CancelReason string `json:"cancelReason"`
	// Information about order cancellation, when it applies.
	CancellationData UserorderdetailsCancellationData `json:"cancellationData"`
	// Information about changes in the order.
	ChangesAttachment ChangesAttachment `json:"changesAttachment"`
	// If the field `isCheckedIn` is set as `true`, the `checkedInPickupPointId` will retrieve the ID of the physical store where the order was made.
	CheckedInPickupPointID string `json:"checkedInPickupPointId"`
	// Information about customer's preferences.
	ClientPreferencesData UserorderdetailsClientPreferencesData `json:"clientPreferencesData"`
	// Object with information on the client's profile.
	ClientProfileData ClientProfileData `json:"clientProfileData"`
	// Information about commercial conditions.
	CommercialConditionData string `json:"commercialConditionData"`
	// Order's creation date.
	CreationDate string `json:"creationDate"`
	// Custom information in the order. This field is useful for storing data not included in other fields, for example, a message for a gift or a name to be printed in a shirt.
	CustomData string `json:"customData"`
	// Email of the store's employee responsible for managing the order.
	FollowUpEmail string `json:"followUpEmail"`
	// Information about gift list, when it applies.
	GiftRegistryData string `json:"giftRegistryData"`
	// Account Hostname registered in License Manager.
	Hostname string `json:"hostname"`
	// Information pertinent to the order's invoice.
	InvoiceData map[string]interface{} `json:"invoiceData"`
	// Order's invoice date.
	InvoicedDate string `json:"invoicedDate"`
	// This field is set `true` when the order was made via inStore and `false` when it was not.
	IsCheckedIn bool `json:"isCheckedIn"`
	// When set as `true`, the order's payment has been settled, and when set as `false`, it has not been settled yet.
	IsCompleted bool `json:"isCompleted"`
	// Metadata information about the order's items.
	ItemMetadata UserorderdetailsItemMetadata `json:"itemMetadata"`
	// Information about order's items.
	Items []Item `json:"items"`
	// Order's last change date.
	LastChange string `json:"lastChange"`
	// Last sent transactional message.
	LastMessage string `json:"lastMessage"`
	// Information about promotions and marketing. For example, coupon tracking information and internal or external UTMs.
	MarketingData UserorderdetailsMarketingData `json:"marketingData"`
	// Details about the marketplace related to the order.
	Marketplace Marketplace `json:"marketplace"`
	// Marketplace details object.
	MarketplaceItems []string `json:"marketplaceItems"`
	// Marketplace order ID.
	MarketplaceOrderID string `json:"marketplaceOrderId"`
	// Marketplace services endpoint.
	MarketplaceServicesEndpoint string `json:"marketplaceServicesEndpoint"`
	// Name of the merchant.
	MerchantName string `json:"merchantName"`
	// Optional field with order's additional information. This field must be filled in using the following format:
	// ```
	// {
	//     "fieldExample": "ValueExample"
	//   }
	// ```
	//
	OpenTextField string `json:"openTextField"`
	// [Order form](https://developers.vtex.com/docs/guides/orderform-fields) ID.
	OrderFormID string `json:"orderFormId"`
	// Order's group ID.
	OrderGroup string `json:"orderGroup"`
	// Order ID is a unique code that identifies an order.
	OrderID string `json:"orderId"`
	// Order Origin, if `Marketplace` or `Fulfillment`.
	Origin string `json:"origin"`
	// Package object populated after order invoiced.
	PackageAttachment PackageAttachment `json:"packageAttachment"`
	// Object with information about the payment.
	PaymentData PaymentData `json:"paymentData"`
	// Information on promotions and taxes that apply to the order.
	RatesAndBenefitsData RatesAndBenefitsData `json:"ratesAndBenefitsData"`
	// Rounding error total amount, if it applies. For example, in orders with a discount over non-integer multiplier items, the rounding price is performed per item, not after the sum of all items. That can cause a difference in the total discount amount, which is informed in this field.
	RoundingError int `json:"roundingError"`
	// Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
	SalesChannel string `json:"salesChannel"`
	// ID of the seller related to the order. It can be a VTEX seller or an external seller.
	SellerOrderID string `json:"sellerOrderId"`
	// List of all sellers associated with the order.
	Sellers []Seller `json:"sellers"`
	// Sequence is a six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`.
	Sequence string `json:"sequence"`
	// Object containing shipping data.
	ShippingData ShippingData `json:"shippingData"`
	// Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
	Status string `json:"status"`
	// `Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.
	StatusDescription string `json:"statusDescription"`
	// Object with data from the store's configuration - stored in VTEX's License Manager.
	StorePreferencesData StorePreferencesData `json:"storePreferencesData"`
	// Information about [subscriptions](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
	SubscriptionData UserorderdetailsSubscriptionData `json:"subscriptionData"`
	// Order's tax information.
	TaxData UserorderdetailsTaxData `json:"taxData"`
	// List with details about orders' totals.
	Totals []Total `json:"totals"`
	// Order's total amount.
	Value int `json:"value"`
}
