"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import file as shared_file
from ..shared import folder as shared_folder
from ..shared import submodule as shared_submodule
from ..shared import symboliclink as shared_symboliclink
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFolderOutput:
    r"""Success"""
    
    commit_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commitId') }})  
    folder_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folderPath') }})  
    files: Optional[list[shared_file.File]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files'), 'exclude': lambda f: f is None }})  
    sub_folders: Optional[list[shared_folder.Folder]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subFolders'), 'exclude': lambda f: f is None }})  
    sub_modules: Optional[list[shared_submodule.SubModule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subModules'), 'exclude': lambda f: f is None }})  
    symbolic_links: Optional[list[shared_symboliclink.SymbolicLink]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbolicLinks'), 'exclude': lambda f: f is None }})  
    tree_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treeId'), 'exclude': lambda f: f is None }})  
    