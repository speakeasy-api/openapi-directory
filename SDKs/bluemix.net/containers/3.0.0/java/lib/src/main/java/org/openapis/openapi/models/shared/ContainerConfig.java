/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ContainerConfig {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ArgsEscaped")
    public Boolean argsEscaped;
    public ContainerConfig withArgsEscaped(Boolean argsEscaped) {
        this.argsEscaped = argsEscaped;
        return this;
    }
    
    /**
     * Attaches the container to stderr.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AttachStderr")
    public String attachStderr;
    public ContainerConfig withAttachStderr(String attachStderr) {
        this.attachStderr = attachStderr;
        return this;
    }
    
    /**
     * Attaches the container to sdtin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AttachStdin")
    public String attachStdin;
    public ContainerConfig withAttachStdin(String attachStdin) {
        this.attachStdin = attachStdin;
        return this;
    }
    
    /**
     * Attaches the container to stdout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AttachStdout")
    public String attachStdout;
    public ContainerConfig withAttachStdout(String attachStdout) {
        this.attachStdout = attachStdout;
        return this;
    }
    
    /**
     * The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. &lt;br&gt;Sample long-running commands:&lt;br&gt;["ping","localhost"]&lt;br&gt;["tail","-f","/dev/null"]&lt;br&gt;["sh","-c","while true; do date; sleep 20; done"]
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Cmd")
    public String[] cmd;
    public ContainerConfig withCmd(String[] cmd) {
        this.cmd = cmd;
        return this;
    }
    
    /**
     * The domain name to be used for the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Domainname")
    public String domainname;
    public ContainerConfig withDomainname(String domainname) {
        this.domainname = domainname;
        return this;
    }
    
    /**
     * A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Env")
    public String[] env;
    public ContainerConfig withEnv(String[] env) {
        this.env = env;
        return this;
    }
    
    /**
     * List of public ports that were exposed during container creation. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExposedPorts")
    public String[] exposedPorts;
    public ContainerConfig withExposedPorts(String[] exposedPorts) {
        this.exposedPorts = exposedPorts;
        return this;
    }
    
    /**
     * The host name to be used for the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Hostname")
    public String hostname;
    public ContainerConfig withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * Full path to the image that the container is based on in your private Bluemix registry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Image")
    public String image;
    public ContainerConfig withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * The hardware architecture the image is based on. It can either be 'amd64' indicating an Intel-based architecture, or 'ppc64le' representing a Power-based architecture.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ImageArchitecture")
    public String imageArchitecture;
    public ContainerConfig withImageArchitecture(String imageArchitecture) {
        this.imageArchitecture = imageArchitecture;
        return this;
    }
    
    /**
     * List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Labels")
    public String[] labels;
    public ContainerConfig withLabels(String[] labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The amount of container memory that is assigned to the container in Megabyte.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Memory")
    public Integer memory;
    public ContainerConfig withMemory(Integer memory) {
        this.memory = memory;
        return this;
    }
    
    /**
     * The total container memory limit (memory + swap)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MemorySwap")
    public String memorySwap;
    public ContainerConfig withMemorySwap(String memorySwap) {
        this.memorySwap = memorySwap;
        return this;
    }
    
    /**
     * When set to true, it opens stdin. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OpenStdin")
    public String openStdin;
    public ContainerConfig withOpenStdin(String openStdin) {
        this.openStdin = openStdin;
        return this;
    }
    
    /**
     * Not supported by IBM Containers, empty string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PortSpecs")
    public String portSpecs;
    public ContainerConfig withPortSpecs(String portSpecs) {
        this.portSpecs = portSpecs;
        return this;
    }
    
    /**
     * When set to true it closes stdin after the attached client disconnects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StdinOnce")
    public String stdinOnce;
    public ContainerConfig withStdinOnce(String stdinOnce) {
        this.stdinOnce = stdinOnce;
        return this;
    }
    
    /**
     * When set to true, attach standard streams to a tty, including stdin if it is not closed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Tty")
    public String tty;
    public ContainerConfig withTty(String tty) {
        this.tty = tty;
        return this;
    }
    
    /**
     * User to be used inside the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("User")
    public String user;
    public ContainerConfig withUser(String user) {
        this.user = user;
        return this;
    }
    
    /**
     * Number of virtual CPUs that are assigned to the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VCPU")
    public Integer vcpu;
    public ContainerConfig withVcpu(Integer vcpu) {
        this.vcpu = vcpu;
        return this;
    }
    
    /**
     * List of volumes to inherit from another container. This feature is not supported in IBM Containers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VolumesFrom")
    public String volumesFrom;
    public ContainerConfig withVolumesFrom(String volumesFrom) {
        this.volumesFrom = volumesFrom;
        return this;
    }
    
    /**
     * The working directory inside the container where specified commands are executed. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WorkingDir")
    public String workingDir;
    public ContainerConfig withWorkingDir(String workingDir) {
        this.workingDir = workingDir;
        return this;
    }
    
}
