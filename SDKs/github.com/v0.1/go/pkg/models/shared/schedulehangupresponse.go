// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ScheduleHangupResponseMessageEnum - Response message
type ScheduleHangupResponseMessageEnum string

const (
	ScheduleHangupResponseMessageEnumScheduleHangupExecuted           ScheduleHangupResponseMessageEnum = "ScheduleHangup Executed"
	ScheduleHangupResponseMessageEnumCallUUIDParameterMustBePresent   ScheduleHangupResponseMessageEnum = "CallUUID Parameter must be present"
	ScheduleHangupResponseMessageEnumTimeParameterMustBePresent       ScheduleHangupResponseMessageEnum = "Time Parameter must be present"
	ScheduleHangupResponseMessageEnumTimeParameterMustBeGreaterThan0  ScheduleHangupResponseMessageEnum = "Time Parameter must be > 0!"
	ScheduleHangupResponseMessageEnumScheduleHangupFailedCallNotFound ScheduleHangupResponseMessageEnum = "ScheduleHangup Failed -- Call not found"
	ScheduleHangupResponseMessageEnumScheduleHangupFailed             ScheduleHangupResponseMessageEnum = "ScheduleHangup Failed"
)

func (e *ScheduleHangupResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ScheduleHangup Executed":
		fallthrough
	case "CallUUID Parameter must be present":
		fallthrough
	case "Time Parameter must be present":
		fallthrough
	case "Time Parameter must be > 0!":
		fallthrough
	case "ScheduleHangup Failed -- Call not found":
		fallthrough
	case "ScheduleHangup Failed":
		*e = ScheduleHangupResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduleHangupResponseMessageEnum: %s", s)
	}
}

// ScheduleHangupResponse - Response
type ScheduleHangupResponse struct {
	// Response message
	Message ScheduleHangupResponseMessageEnum `json:"Message"`
	// Unique identifier of the scheduled hangup request (UUIDv4)
	SchedHangupID string `json:"SchedHangupId"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
