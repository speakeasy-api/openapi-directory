/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Thing group properties.
 */
export class CreateThingGroupRequestBodyThingGroupProperties extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributePayload" })
  @Type(() => shared.AttributePayload)
  attributePayload?: shared.AttributePayload;

  @SpeakeasyMetadata()
  @Expose({ name: "thingGroupDescription" })
  thingGroupDescription?: string;
}

export class CreateThingGroupRequestBody extends SpeakeasyBase {
  /**
   * The name of the parent thing group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentGroupName" })
  parentGroupName?: string;

  /**
   * Metadata which can be used to manage the thing group.
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "tags" })
  @Type(() => shared.Tag)
  tags?: shared.Tag[];

  /**
   * Thing group properties.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thingGroupProperties" })
  @Type(() => CreateThingGroupRequestBodyThingGroupProperties)
  thingGroupProperties?: CreateThingGroupRequestBodyThingGroupProperties;
}

export class CreateThingGroupRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateThingGroupRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The thing group name to create.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=thingGroupName",
  })
  thingGroupName: string;
}

export class CreateThingGroupResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createThingGroupResponse?: shared.CreateThingGroupResponse;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
