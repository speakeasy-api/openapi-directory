/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Retargeting {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve count of retargeting scripts
   */
  retargetingCount(
    config?: AxiosRequestConfig
  ): Promise<operations.RetargetingCountResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/retargeting/count";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetargetingCountResponse =
        new operations.RetargetingCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesCountResponce = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesCountResponce
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesCountResponce = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesCountResponce
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a retargeting script (and remove associations)
   */
  retargetingDelete(
    req: operations.RetargetingDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetargetingDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetargetingDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/retargeting/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetargetingDeleteResponse =
        new operations.RetargetingDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List of all the retargeting scripts associated to the user
   */
  retargetingGet(
    req: operations.RetargetingGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetargetingGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetargetingGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/retargeting";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetargetingGetResponse =
        new operations.RetargetingGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List of all the datapoints associated to the retargeting script.
   */
  retargetingGetDatapoints(
    req: operations.RetargetingGetDatapointsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetargetingGetDatapointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetargetingGetDatapointsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/retargeting/{id}/datapoints",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetargetingGetDatapointsResponse =
        new operations.RetargetingGetDatapointsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count the datapoints associated to the retargeting script.
   */
  retargetingGetDatapointsCount(
    req: operations.RetargetingGetDatapointsCountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetargetingGetDatapointsCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetargetingGetDatapointsCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/retargeting/{id}/datapoints/count",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetargetingGetDatapointsCountResponse =
        new operations.RetargetingGetDatapointsCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesCountResponce = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesCountResponce
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesCountResponce = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesCountResponce
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Updates a retargeting script
   */
  retargetingPostForm(
    req: operations.RetargetingPostFormRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetargetingPostFormResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetargetingPostFormRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/retargeting/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiCoreDtoRetargetingRetargetingScript",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetargetingPostFormResponse =
        new operations.RetargetingPostFormResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Updates a retargeting script
   */
  retargetingPostJson(
    req: operations.RetargetingPostJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetargetingPostJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetargetingPostJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/retargeting/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiCoreDtoRetargetingRetargetingScript",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetargetingPostJsonResponse =
        new operations.RetargetingPostJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Updates a retargeting script
   */
  retargetingPostRaw(
    req: operations.RetargetingPostRawRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetargetingPostRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetargetingPostRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/retargeting/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetargetingPostRawResponse =
        new operations.RetargetingPostRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Creates a retargeting script
   */
  retargetingPutForm(
    req: shared.ApiCoreDtoRetargetingRetargetingScript,
    config?: AxiosRequestConfig
  ): Promise<operations.RetargetingPutFormResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ApiCoreDtoRetargetingRetargetingScript(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/retargeting";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetargetingPutFormResponse =
        new operations.RetargetingPutFormResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Creates a retargeting script
   */
  retargetingPutJson(
    req: shared.ApiCoreDtoRetargetingRetargetingScript,
    config?: AxiosRequestConfig
  ): Promise<operations.RetargetingPutJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ApiCoreDtoRetargetingRetargetingScript(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/retargeting";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetargetingPutJsonResponse =
        new operations.RetargetingPutJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Creates a retargeting script
   */
  retargetingPutRaw(
    req: Uint8Array,
    config?: AxiosRequestConfig
  ): Promise<operations.RetargetingPutRawResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/retargeting";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetargetingPutRawResponse =
        new operations.RetargetingPutRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get a retargeting script object
   */
  getRetargetingId(
    req: operations.GetRetargetingIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRetargetingIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRetargetingIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/retargeting/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRetargetingIdResponse =
        new operations.GetRetargetingIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreDtoRetargetingRetargetingScript = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoRetargetingRetargetingScript
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreDtoRetargetingRetargetingScript = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoRetargetingRetargetingScript
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
