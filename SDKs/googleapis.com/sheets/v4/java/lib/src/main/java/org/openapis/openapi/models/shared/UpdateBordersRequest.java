/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UpdateBordersRequest - Updates the borders of a range. If a field is not set in the request, that means the border remains as-is. For example, with two subsequent UpdateBordersRequest: 1. range: A1:A5 `{ top: RED, bottom: WHITE }` 2. range: A1:A5 `{ left: BLUE }` That would result in A1:A5 having a borders of `{ top: RED, bottom: WHITE, left: BLUE }`. If you want to clear a border, explicitly set the style to NONE.
 */
public class UpdateBordersRequest {
    /**
     * A border along a cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bottom")
    public Border bottom;

    public UpdateBordersRequest withBottom(Border bottom) {
        this.bottom = bottom;
        return this;
    }
    
    /**
     * A border along a cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innerHorizontal")
    public Border innerHorizontal;

    public UpdateBordersRequest withInnerHorizontal(Border innerHorizontal) {
        this.innerHorizontal = innerHorizontal;
        return this;
    }
    
    /**
     * A border along a cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("innerVertical")
    public Border innerVertical;

    public UpdateBordersRequest withInnerVertical(Border innerVertical) {
        this.innerVertical = innerVertical;
        return this;
    }
    
    /**
     * A border along a cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("left")
    public Border left;

    public UpdateBordersRequest withLeft(Border left) {
        this.left = left;
        return this;
    }
    
    /**
     * A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("range")
    public GridRange range;

    public UpdateBordersRequest withRange(GridRange range) {
        this.range = range;
        return this;
    }
    
    /**
     * A border along a cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("right")
    public Border right;

    public UpdateBordersRequest withRight(Border right) {
        this.right = right;
        return this;
    }
    
    /**
     * A border along a cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("top")
    public Border top;

    public UpdateBordersRequest withTop(Border top) {
        this.top = top;
        return this;
    }
    
    public UpdateBordersRequest(){}
}
