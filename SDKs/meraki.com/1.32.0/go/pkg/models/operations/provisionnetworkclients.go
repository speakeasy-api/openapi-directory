// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ProvisionNetworkClientsRequestBodyClients struct {
	// The MAC address of the client. Required.
	Mac string `json:"mac"`
	// The display name for the client. Optional. Limited to 255 bytes.
	Name *string `json:"name,omitempty"`
}

// ProvisionNetworkClientsRequestBodyDevicePolicyEnum - The policy to apply to the specified client. Can be 'Group policy', 'Allowed', 'Blocked', 'Per connection' or 'Normal'. Required.
type ProvisionNetworkClientsRequestBodyDevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyDevicePolicyEnumAllowed       ProvisionNetworkClientsRequestBodyDevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyDevicePolicyEnumBlocked       ProvisionNetworkClientsRequestBodyDevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyDevicePolicyEnumGroupPolicy   ProvisionNetworkClientsRequestBodyDevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyDevicePolicyEnumNormal        ProvisionNetworkClientsRequestBodyDevicePolicyEnum = "Normal"
	ProvisionNetworkClientsRequestBodyDevicePolicyEnumPerConnection ProvisionNetworkClientsRequestBodyDevicePolicyEnum = "Per connection"
)

func (e ProvisionNetworkClientsRequestBodyDevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyDevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyDevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		fallthrough
	case "Per connection":
		*e = ProvisionNetworkClientsRequestBodyDevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyDevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked' or 'Normal'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnumAllowed ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnumBlocked ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnumNormal  ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySecurityAppliance - An object, describing what the policy-connection association is for the security appliance. (Only relevant if the security appliance is actually within the network)
type ProvisionNetworkClientsRequestBodyPoliciesBySecurityAppliance struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked' or 'Normal'. Required.
	DevicePolicy *ProvisionNetworkClientsRequestBodyPoliciesBySecurityApplianceDevicePolicyEnum `json:"devicePolicy,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid0 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid0 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid0DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid1 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid1 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid1DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid10 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid10 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid10DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid11 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid11 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid11DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid12 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid12 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid12DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid13 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid13 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid13DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid14 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid14 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid14DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid2 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid2 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid2DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid3 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid3 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid3DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid4 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid4 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid4DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid5 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid5 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid5DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid6 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid6 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid6DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid7 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid7 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid7DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid8 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid8 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid8DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum - The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
type ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum string

const (
	ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnumAllowed     ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum = "Allowed"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnumBlocked     ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum = "Blocked"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnumGroupPolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum = "Group policy"
	ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnumNormal      ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum = "Normal"
)

func (e ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum) ToPointer() *ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum {
	return &e
}

func (e *ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Allowed":
		fallthrough
	case "Blocked":
		fallthrough
	case "Group policy":
		fallthrough
	case "Normal":
		*e = ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum: %v", v)
	}
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid9 - The number for the SSID
type ProvisionNetworkClientsRequestBodyPoliciesBySsid9 struct {
	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyPoliciesBySsid9DevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
}

// ProvisionNetworkClientsRequestBodyPoliciesBySsid - An object, describing the policy-connection associations for each active SSID within the network. Keys should be the number of enabled SSIDs, mapping to an object describing the client's policy
type ProvisionNetworkClientsRequestBodyPoliciesBySsid struct {
	// The number for the SSID
	Zero *ProvisionNetworkClientsRequestBodyPoliciesBySsid0 `json:"0,omitempty"`
	// The number for the SSID
	One *ProvisionNetworkClientsRequestBodyPoliciesBySsid1 `json:"1,omitempty"`
	// The number for the SSID
	Ten *ProvisionNetworkClientsRequestBodyPoliciesBySsid10 `json:"10,omitempty"`
	// The number for the SSID
	Eleven *ProvisionNetworkClientsRequestBodyPoliciesBySsid11 `json:"11,omitempty"`
	// The number for the SSID
	Twelve *ProvisionNetworkClientsRequestBodyPoliciesBySsid12 `json:"12,omitempty"`
	// The number for the SSID
	Thirteen *ProvisionNetworkClientsRequestBodyPoliciesBySsid13 `json:"13,omitempty"`
	// The number for the SSID
	Fourteen *ProvisionNetworkClientsRequestBodyPoliciesBySsid14 `json:"14,omitempty"`
	// The number for the SSID
	Two *ProvisionNetworkClientsRequestBodyPoliciesBySsid2 `json:"2,omitempty"`
	// The number for the SSID
	Three *ProvisionNetworkClientsRequestBodyPoliciesBySsid3 `json:"3,omitempty"`
	// The number for the SSID
	Four *ProvisionNetworkClientsRequestBodyPoliciesBySsid4 `json:"4,omitempty"`
	// The number for the SSID
	Five *ProvisionNetworkClientsRequestBodyPoliciesBySsid5 `json:"5,omitempty"`
	// The number for the SSID
	Six *ProvisionNetworkClientsRequestBodyPoliciesBySsid6 `json:"6,omitempty"`
	// The number for the SSID
	Seven *ProvisionNetworkClientsRequestBodyPoliciesBySsid7 `json:"7,omitempty"`
	// The number for the SSID
	Eight *ProvisionNetworkClientsRequestBodyPoliciesBySsid8 `json:"8,omitempty"`
	// The number for the SSID
	Nine *ProvisionNetworkClientsRequestBodyPoliciesBySsid9 `json:"9,omitempty"`
}

type ProvisionNetworkClientsRequestBody struct {
	// The array of clients to provision
	Clients []ProvisionNetworkClientsRequestBodyClients `json:"clients"`
	// The policy to apply to the specified client. Can be 'Group policy', 'Allowed', 'Blocked', 'Per connection' or 'Normal'. Required.
	DevicePolicy ProvisionNetworkClientsRequestBodyDevicePolicyEnum `json:"devicePolicy"`
	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
	// An object, describing what the policy-connection association is for the security appliance. (Only relevant if the security appliance is actually within the network)
	PoliciesBySecurityAppliance *ProvisionNetworkClientsRequestBodyPoliciesBySecurityAppliance `json:"policiesBySecurityAppliance,omitempty"`
	// An object, describing the policy-connection associations for each active SSID within the network. Keys should be the number of enabled SSIDs, mapping to an object describing the client's policy
	PoliciesBySsid *ProvisionNetworkClientsRequestBodyPoliciesBySsid `json:"policiesBySsid,omitempty"`
}

type ProvisionNetworkClientsRequest struct {
	RequestBody ProvisionNetworkClientsRequestBody `request:"mediaType=application/json"`
	NetworkID   string                             `pathParam:"style=simple,explode=false,name=networkId"`
}

type ProvisionNetworkClientsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	ProvisionNetworkClients201ApplicationJSONObject map[string]interface{}
}
