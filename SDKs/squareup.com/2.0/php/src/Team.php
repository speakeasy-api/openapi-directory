<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Team 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * BulkCreateTeamMembers
     * 
     * Creates multiple `TeamMember` objects. The created `TeamMember` objects are returned on successful creates.
     * This process is non-transactional and processes as much of the request as possible. If one of the creates in
     * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
     * contains explicit error information for the failed create.
     * 
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BulkCreateTeamMembersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BulkCreateTeamMembersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkCreateTeamMembersResponse
     */
	public function bulkCreateTeamMembers(
        \OpenAPI\OpenAPI\Models\Shared\BulkCreateTeamMembersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BulkCreateTeamMembersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkCreateTeamMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/team-members/bulk-create');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkCreateTeamMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkCreateTeamMembersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkCreateTeamMembersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * BulkUpdateTeamMembers
     * 
     * Updates multiple `TeamMember` objects. The updated `TeamMember` objects are returned on successful updates.
     * This process is non-transactional and processes as much of the request as possible. If one of the updates in
     * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
     * contains explicit error information for the failed update.
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BulkUpdateTeamMembersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BulkUpdateTeamMembersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkUpdateTeamMembersResponse
     */
	public function bulkUpdateTeamMembers(
        \OpenAPI\OpenAPI\Models\Shared\BulkUpdateTeamMembersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BulkUpdateTeamMembersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkUpdateTeamMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/team-members/bulk-update');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkUpdateTeamMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkUpdateTeamMembersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkUpdateTeamMembersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateTeamMember
     * 
     * Creates a single `TeamMember` object. The `TeamMember` object is returned on successful creates.
     * You must provide the following values in your request to this endpoint:
     * - `given_name`
     * - `family_name`
     * 
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#createteammember).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateTeamMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTeamMemberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTeamMemberResponse
     */
	public function createTeamMember(
        \OpenAPI\OpenAPI\Models\Shared\CreateTeamMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTeamMemberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTeamMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/team-members');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTeamMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createTeamMemberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateTeamMemberResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveTeamMember
     * 
     * Retrieves a `TeamMember` object for the given `TeamMember.id`.
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberResponse
     */
	public function retrieveTeamMember(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/team-members/{team_member_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveTeamMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveTeamMemberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveTeamMemberResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveWageSetting
     * 
     * Retrieves a `WageSetting` object for a team member specified
     * by `TeamMember.id`.
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrievewagesetting).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveWageSettingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveWageSettingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveWageSettingResponse
     */
	public function retrieveWageSetting(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveWageSettingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveWageSettingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveWageSettingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/team-members/{team_member_id}/wage-setting', \OpenAPI\OpenAPI\Models\Operations\RetrieveWageSettingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveWageSettingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveWageSettingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveWageSettingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SearchTeamMembers
     * 
     * Returns a paginated list of `TeamMember` objects for a business.
     * The list can be filtered by the following:
     * - location IDs
     * - `status`
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SearchTeamMembersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchTeamMembersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchTeamMembersResponse
     */
	public function searchTeamMembers(
        \OpenAPI\OpenAPI\Models\Shared\SearchTeamMembersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchTeamMembersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchTeamMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/team-members/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchTeamMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchTeamMembersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchTeamMembersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateTeamMember
     * 
     * Updates a single `TeamMember` object. The `TeamMember` object is returned on successful updates.
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTeamMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTeamMemberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTeamMemberResponse
     */
	public function updateTeamMember(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTeamMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTeamMemberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTeamMemberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/team-members/{team_member_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateTeamMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateTeamMemberRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTeamMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateTeamMemberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateTeamMemberResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateWageSetting
     * 
     * Creates or updates a `WageSetting` object. The object is created if a
     * `WageSetting` with the specified `team_member_id` does not exist. Otherwise,
     * it fully replaces the `WageSetting` object for the team member.
     * The `WageSetting` is returned on a successful update.
     * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#create-or-update-a-wage-setting).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWageSettingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWageSettingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWageSettingResponse
     */
	public function updateWageSetting(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWageSettingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWageSettingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWageSettingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/team-members/{team_member_id}/wage-setting', \OpenAPI\OpenAPI\Models\Operations\UpdateWageSettingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateWageSettingRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWageSettingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateWageSettingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateWageSettingResponse', 'json');
            }
        }

        return $response;
    }
}