// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type PostcodeResponseCodeEnum string

const (
	PostcodeResponseCodeEnumTwoThousand PostcodeResponseCodeEnum = "2000"
)

func (e *PostcodeResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = PostcodeResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostcodeResponseCodeEnum: %s", s)
	}
}

type PostcodeResponseMessageEnum string

const (
	PostcodeResponseMessageEnumSuccess PostcodeResponseMessageEnum = "Success"
)

func (e *PostcodeResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = PostcodeResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostcodeResponseMessageEnum: %s", s)
	}
}

type PostcodeResponseResultType string

const (
	PostcodeResponseResultTypePafAddress       PostcodeResponseResultType = "PafAddress"
	PostcodeResponseResultTypeMrAddress        PostcodeResponseResultType = "MrAddress"
	PostcodeResponseResultTypeNybAddress       PostcodeResponseResultType = "NybAddress"
	PostcodeResponseResultTypePafAliasAddress  PostcodeResponseResultType = "PafAliasAddress"
	PostcodeResponseResultTypeWelshPafAddress  PostcodeResponseResultType = "WelshPafAddress"
	PostcodeResponseResultTypeGbrGlobalAddress PostcodeResponseResultType = "GbrGlobalAddress"
)

type PostcodeResponseResult struct {
	PafAddress       *PafAddress
	MrAddress        *MrAddress
	NybAddress       *NybAddress
	PafAliasAddress  *PafAliasAddress
	WelshPafAddress  *WelshPafAddress
	GbrGlobalAddress *GbrGlobalAddress

	Type PostcodeResponseResultType
}

func CreatePostcodeResponseResultPafAddress(pafAddress PafAddress) PostcodeResponseResult {
	typ := PostcodeResponseResultTypePafAddress

	return PostcodeResponseResult{
		PafAddress: &pafAddress,
		Type:       typ,
	}
}

func CreatePostcodeResponseResultMrAddress(mrAddress MrAddress) PostcodeResponseResult {
	typ := PostcodeResponseResultTypeMrAddress

	return PostcodeResponseResult{
		MrAddress: &mrAddress,
		Type:      typ,
	}
}

func CreatePostcodeResponseResultNybAddress(nybAddress NybAddress) PostcodeResponseResult {
	typ := PostcodeResponseResultTypeNybAddress

	return PostcodeResponseResult{
		NybAddress: &nybAddress,
		Type:       typ,
	}
}

func CreatePostcodeResponseResultPafAliasAddress(pafAliasAddress PafAliasAddress) PostcodeResponseResult {
	typ := PostcodeResponseResultTypePafAliasAddress

	return PostcodeResponseResult{
		PafAliasAddress: &pafAliasAddress,
		Type:            typ,
	}
}

func CreatePostcodeResponseResultWelshPafAddress(welshPafAddress WelshPafAddress) PostcodeResponseResult {
	typ := PostcodeResponseResultTypeWelshPafAddress

	return PostcodeResponseResult{
		WelshPafAddress: &welshPafAddress,
		Type:            typ,
	}
}

func CreatePostcodeResponseResultGbrGlobalAddress(gbrGlobalAddress GbrGlobalAddress) PostcodeResponseResult {
	typ := PostcodeResponseResultTypeGbrGlobalAddress

	return PostcodeResponseResult{
		GbrGlobalAddress: &gbrGlobalAddress,
		Type:             typ,
	}
}

func (u *PostcodeResponseResult) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	pafAddress := new(PafAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&pafAddress); err == nil {
		u.PafAddress = pafAddress
		u.Type = PostcodeResponseResultTypePafAddress
		return nil
	}

	mrAddress := new(MrAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mrAddress); err == nil {
		u.MrAddress = mrAddress
		u.Type = PostcodeResponseResultTypeMrAddress
		return nil
	}

	nybAddress := new(NybAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&nybAddress); err == nil {
		u.NybAddress = nybAddress
		u.Type = PostcodeResponseResultTypeNybAddress
		return nil
	}

	pafAliasAddress := new(PafAliasAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&pafAliasAddress); err == nil {
		u.PafAliasAddress = pafAliasAddress
		u.Type = PostcodeResponseResultTypePafAliasAddress
		return nil
	}

	welshPafAddress := new(WelshPafAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&welshPafAddress); err == nil {
		u.WelshPafAddress = welshPafAddress
		u.Type = PostcodeResponseResultTypeWelshPafAddress
		return nil
	}

	gbrGlobalAddress := new(GbrGlobalAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&gbrGlobalAddress); err == nil {
		u.GbrGlobalAddress = gbrGlobalAddress
		u.Type = PostcodeResponseResultTypeGbrGlobalAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostcodeResponseResult) MarshalJSON() ([]byte, error) {
	if u.PafAddress != nil {
		return json.Marshal(u.PafAddress)
	}

	if u.MrAddress != nil {
		return json.Marshal(u.MrAddress)
	}

	if u.NybAddress != nil {
		return json.Marshal(u.NybAddress)
	}

	if u.PafAliasAddress != nil {
		return json.Marshal(u.PafAliasAddress)
	}

	if u.WelshPafAddress != nil {
		return json.Marshal(u.WelshPafAddress)
	}

	if u.GbrGlobalAddress != nil {
		return json.Marshal(u.GbrGlobalAddress)
	}

	return nil, nil
}

// PostcodeResponse - Success
type PostcodeResponse struct {
	Code    PostcodeResponseCodeEnum    `json:"code"`
	Message PostcodeResponseMessageEnum `json:"message"`
	// All addresses listed at the postcode.
	//
	// If Eircode is enabled, addreses for the Republic of Ireland will be returned in the English format.
	//
	Result []PostcodeResponseResult `json:"result"`
}
