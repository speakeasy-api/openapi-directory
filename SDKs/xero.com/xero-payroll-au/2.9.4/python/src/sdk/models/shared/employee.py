"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import bankaccount as shared_bankaccount
from ..shared import employeestatus_enum as shared_employeestatus_enum
from ..shared import homeaddress as shared_homeaddress
from ..shared import leavebalance as shared_leavebalance
from ..shared import leaveline as shared_leaveline
from ..shared import openingbalances as shared_openingbalances
from ..shared import paytemplate as shared_paytemplate
from ..shared import supermembership as shared_supermembership
from ..shared import taxdeclaration as shared_taxdeclaration
from ..shared import validationerror as shared_validationerror
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EmployeeGenderEnum(str, Enum):
    r"""The employee’s gender. See Employee Gender"""
    N = 'N'
    M = 'M'
    F = 'F'
    I = 'I'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmployeeInput:
    
    date_of_birth: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateOfBirth') }})
    r"""Date of birth of the employee (YYYY-MM-DD)"""  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstName') }})
    r"""First name of employee"""  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastName') }})
    r"""Last name of employee"""  
    bank_accounts: Optional[list[shared_bankaccount.BankAccount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankAccounts'), 'exclude': lambda f: f is None }})  
    classification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Classification'), 'exclude': lambda f: f is None }})
    r"""Employees classification"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Email'), 'exclude': lambda f: f is None }})
    r"""The email address for the employee"""  
    employee_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeGroupName'), 'exclude': lambda f: f is None }})
    r"""The Employee Group allows you to report on payroll expenses and liabilities for each group of employees"""  
    employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeID'), 'exclude': lambda f: f is None }})
    r"""Xero unique identifier for an Employee"""  
    gender: Optional[EmployeeGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Gender'), 'exclude': lambda f: f is None }})
    r"""The employee’s gender. See Employee Gender"""  
    home_address: Optional[shared_homeaddress.HomeAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeAddress'), 'exclude': lambda f: f is None }})  
    is_authorised_to_approve_leave: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAuthorisedToApproveLeave'), 'exclude': lambda f: f is None }})
    r"""Authorised to approve other employees' leave requests"""  
    is_authorised_to_approve_timesheets: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAuthorisedToApproveTimesheets'), 'exclude': lambda f: f is None }})
    r"""Authorised to approve timesheets"""  
    job_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobTitle'), 'exclude': lambda f: f is None }})
    r"""JobTitle of the employee"""  
    leave_balances: Optional[list[shared_leavebalance.LeaveBalance]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LeaveBalances'), 'exclude': lambda f: f is None }})  
    leave_lines: Optional[list[shared_leaveline.LeaveLine]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LeaveLines'), 'exclude': lambda f: f is None }})  
    middle_names: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MiddleNames'), 'exclude': lambda f: f is None }})
    r"""Middle name(s) of the employee"""  
    mobile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mobile'), 'exclude': lambda f: f is None }})
    r"""Employee mobile number"""  
    opening_balances: Optional[shared_openingbalances.OpeningBalances] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpeningBalances'), 'exclude': lambda f: f is None }})  
    ordinary_earnings_rate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrdinaryEarningsRateID'), 'exclude': lambda f: f is None }})
    r"""Xero unique identifier for earnings rate"""  
    payroll_calendar_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayrollCalendarID'), 'exclude': lambda f: f is None }})
    r"""Xero unique identifier for payroll calendar for the employee"""  
    pay_template: Optional[shared_paytemplate.PayTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayTemplate'), 'exclude': lambda f: f is None }})  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phone'), 'exclude': lambda f: f is None }})
    r"""Employee phone number"""  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartDate'), 'exclude': lambda f: f is None }})
    r"""Start date for an employee (YYYY-MM-DD)"""  
    status: Optional[shared_employeestatus_enum.EmployeeStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""Employee Status Types"""  
    super_memberships: Optional[list[shared_supermembership.SuperMembership]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SuperMemberships'), 'exclude': lambda f: f is None }})  
    tax_declaration: Optional[shared_taxdeclaration.TaxDeclarationInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxDeclaration'), 'exclude': lambda f: f is None }})  
    termination_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TerminationDate'), 'exclude': lambda f: f is None }})
    r"""Employee Termination Date (YYYY-MM-DD)"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title'), 'exclude': lambda f: f is None }})
    r"""Title of the employee"""  
    twitter_user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwitterUserName'), 'exclude': lambda f: f is None }})
    r"""Employee’s twitter name"""  
    validation_errors: Optional[list[shared_validationerror.ValidationError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValidationErrors'), 'exclude': lambda f: f is None }})
    r"""Displays array of validation error messages from the API"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Employee:
    
    date_of_birth: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateOfBirth') }})
    r"""Date of birth of the employee (YYYY-MM-DD)"""  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstName') }})
    r"""First name of employee"""  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastName') }})
    r"""Last name of employee"""  
    bank_accounts: Optional[list[shared_bankaccount.BankAccount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankAccounts'), 'exclude': lambda f: f is None }})  
    classification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Classification'), 'exclude': lambda f: f is None }})
    r"""Employees classification"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Email'), 'exclude': lambda f: f is None }})
    r"""The email address for the employee"""  
    employee_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeGroupName'), 'exclude': lambda f: f is None }})
    r"""The Employee Group allows you to report on payroll expenses and liabilities for each group of employees"""  
    employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeID'), 'exclude': lambda f: f is None }})
    r"""Xero unique identifier for an Employee"""  
    gender: Optional[EmployeeGenderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Gender'), 'exclude': lambda f: f is None }})
    r"""The employee’s gender. See Employee Gender"""  
    home_address: Optional[shared_homeaddress.HomeAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeAddress'), 'exclude': lambda f: f is None }})  
    is_authorised_to_approve_leave: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAuthorisedToApproveLeave'), 'exclude': lambda f: f is None }})
    r"""Authorised to approve other employees' leave requests"""  
    is_authorised_to_approve_timesheets: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAuthorisedToApproveTimesheets'), 'exclude': lambda f: f is None }})
    r"""Authorised to approve timesheets"""  
    job_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobTitle'), 'exclude': lambda f: f is None }})
    r"""JobTitle of the employee"""  
    leave_balances: Optional[list[shared_leavebalance.LeaveBalance]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LeaveBalances'), 'exclude': lambda f: f is None }})  
    leave_lines: Optional[list[shared_leaveline.LeaveLine]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LeaveLines'), 'exclude': lambda f: f is None }})  
    middle_names: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MiddleNames'), 'exclude': lambda f: f is None }})
    r"""Middle name(s) of the employee"""  
    mobile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mobile'), 'exclude': lambda f: f is None }})
    r"""Employee mobile number"""  
    opening_balances: Optional[shared_openingbalances.OpeningBalances] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpeningBalances'), 'exclude': lambda f: f is None }})  
    ordinary_earnings_rate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrdinaryEarningsRateID'), 'exclude': lambda f: f is None }})
    r"""Xero unique identifier for earnings rate"""  
    payroll_calendar_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayrollCalendarID'), 'exclude': lambda f: f is None }})
    r"""Xero unique identifier for payroll calendar for the employee"""  
    pay_template: Optional[shared_paytemplate.PayTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayTemplate'), 'exclude': lambda f: f is None }})  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phone'), 'exclude': lambda f: f is None }})
    r"""Employee phone number"""  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartDate'), 'exclude': lambda f: f is None }})
    r"""Start date for an employee (YYYY-MM-DD)"""  
    status: Optional[shared_employeestatus_enum.EmployeeStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""Employee Status Types"""  
    super_memberships: Optional[list[shared_supermembership.SuperMembership]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SuperMemberships'), 'exclude': lambda f: f is None }})  
    tax_declaration: Optional[shared_taxdeclaration.TaxDeclaration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxDeclaration'), 'exclude': lambda f: f is None }})  
    termination_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TerminationDate'), 'exclude': lambda f: f is None }})
    r"""Employee Termination Date (YYYY-MM-DD)"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title'), 'exclude': lambda f: f is None }})
    r"""Title of the employee"""  
    twitter_user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TwitterUserName'), 'exclude': lambda f: f is None }})
    r"""Employee’s twitter name"""  
    updated_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDateUTC'), 'exclude': lambda f: f is None }})
    r"""Last modified timestamp"""  
    validation_errors: Optional[list[shared_validationerror.ValidationError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValidationErrors'), 'exclude': lambda f: f is None }})
    r"""Displays array of validation error messages from the API"""  
    