// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type AssociateEncryptionConfigRequestBody struct {
	// The client request token you are using with the encryption configuration.
	ClientRequestToken *string `json:"clientRequestToken,omitempty"`
	// The configuration you are using for encryption.
	EncryptionConfig []shared.EncryptionConfig `json:"encryptionConfig"`
}

type AssociateEncryptionConfigRequest struct {
	RequestBody       AssociateEncryptionConfigRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The name of the cluster that you are associating with encryption configuration.
	Name string `pathParam:"style=simple,explode=false,name=name"`
}

type AssociateEncryptionConfigResponse struct {
	// Success
	AssociateEncryptionConfigResponse *shared.AssociateEncryptionConfigResponse
	// ClientException
	ClientException interface{}
	ContentType     string
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ServerException
	ServerException interface{}
}
