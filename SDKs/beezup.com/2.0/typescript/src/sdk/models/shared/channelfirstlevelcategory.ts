/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ChannelCategory } from "./channelcategory";
import { ChannelCategoryColumnOverride } from "./channelcategorycolumnoverride";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The first level category with his sub categories
 */
export class ChannelFirstLevelCategory extends SpeakeasyBase {
  /**
   * The channel category channel code identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelCategoryChannelCode" })
  channelCategoryChannelCode?: string;

  /**
   * The channel category column overrides
   */
  @SpeakeasyMetadata({ elemType: ChannelCategoryColumnOverride })
  @Expose({ name: "channelCategoryColumnOverrides" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ChannelCategoryColumnOverride> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ChannelCategoryColumnOverride);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  channelCategoryColumnOverrides?: Record<
    string,
    ChannelCategoryColumnOverride
  >;

  /**
   * The default cost on this channel category
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelCategoryDefaultCost" })
  channelCategoryDefaultCost?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "channelCategoryId" })
  channelCategoryId: string;

  /**
   * The channel category level starting from 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelCategoryLevel" })
  channelCategoryLevel: number;

  /**
   * The channel category name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelCategoryName" })
  channelCategoryName: string;

  @SpeakeasyMetadata({ elemType: ChannelCategory })
  @Expose({ name: "subCategories" })
  @Type(() => ChannelCategory)
  subCategories?: ChannelCategory[];
}
