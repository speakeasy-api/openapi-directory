// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GetPaymentInitiationStatusSecurity struct {
	BearerAuthOAuth *shared.SchemeBearerAuthOAuth `security:"scheme,type=http,subtype=bearer"`
}

type GetPaymentInitiationStatusPathParams struct {
	// The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT).
	// The ASPSP will publish which of the payment products/endpoints will be supported.
	//
	// The following payment products are supported:
	//   - domestic-swiss-credit-transfers-isr
	//   - domestic-swiss-credit-transfers
	//   - domestic-swiss-credit-transfers-qr
	//   - domestic-swiss-foreign-credit-transfers
	//   - swiss-sepa-credit-transfers
	//   - swiss-cross-border-credit-transfers
	//   - pain.001-sepa-credit-transfers
	//   - pain.001-cross-border-credit-transfers
	//   - pain.001-swiss-six-credit-transfers
	//
	// **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,
	// the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.
	// Further XML schemes might be supported by some communities.
	//
	// **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.
	// There are plenty of country specificic scheme variants.
	//
	PaymentProduct shared.PaymentProductEnum `pathParam:"style=simple,explode=false,name=payment-product"`
	// Payment service:
	//
	// Possible values are:
	// * payments
	// * bulk-payments
	// * periodic-payments
	//
	PaymentService shared.PaymentServiceEnum `pathParam:"style=simple,explode=false,name=payment-service"`
	// Resource identification of the generated payment initiation resource.
	PaymentID string `pathParam:"style=simple,explode=false,name=paymentId"`
}

type GetPaymentInitiationStatusHeaders struct {
	// Is contained if and only if the "Signature" element is contained in the header of the request.
	Digest *string `header:"style=simple,explode=false,name=Digest"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
	// UUID identifies either a device or a device dependant application installation.
	// In case of an installation identification this ID needs to be unaltered until removal from device.
	//
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
	//
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// HTTP method used at the PSU ? TPP interface, if available.
	// Valid values are:
	// * GET
	// * POST
	// * PUT
	// * PATCH
	// * DELETE
	//
	PSUHTTPMethod *shared.PSUHTTPMethodEnum `header:"style=simple,explode=false,name=PSU-Http-Method"`
	// The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.
	//
	PSUIPAddress *string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
	//
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
	//
	PSUUserAgent *string `header:"style=simple,explode=false,name=PSU-User-Agent"`
	// A signature of the request by the TPP on application level. This might be mandated by ASPSP.
	//
	Signature *string `header:"style=simple,explode=false,name=Signature"`
	// The certificate used for signing the request, in base64 encoding.
	// Must be contained if a signature is contained.
	//
	TPPSignatureCertificate *string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// ID of the request, unique to the call, as determined by the initiating party.
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
}

type GetPaymentInitiationStatusRequest struct {
	PathParams GetPaymentInitiationStatusPathParams
	Headers    GetPaymentInitiationStatusHeaders
	Security   GetPaymentInitiationStatusSecurity
}

type GetPaymentInitiationStatusResponse struct {
	ContentType string
	// Bad Request
	Error400NGPIS *shared.Error400NGPIS
	// Bad Request
	Error400PIS *shared.Error400PIS
	// Unauthorized
	Error401NGPIS *shared.Error401NGPIS
	// Unauthorized
	Error401PIS *shared.Error401PIS
	// Forbidden
	Error403NGPIS *shared.Error403NGPIS
	// Forbidden
	Error403PIS *shared.Error403PIS
	// Not found
	Error404NGPIS *shared.Error404NGPIS
	// Not found
	Error404PIS *shared.Error404PIS
	// Method Not Allowed
	Error405NGPIS *shared.Error405NGPIS
	// Method Not Allowed
	Error405PIS *shared.Error405PIS
	// Conflict
	Error409NGPIS *shared.Error409NGPIS
	// Conflict
	Error409PIS *shared.Error409PIS
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PaymentInitiationStatusResponse200JSON *shared.PaymentInitiationStatusResponse200JSON
	// OK
	PaymentInitiationStatusResponse200XML *string
}
