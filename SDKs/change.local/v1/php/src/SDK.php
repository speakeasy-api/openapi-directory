<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SDK
{
	public const SERVERS = [
		'http://change.local',
		'https://{defaultHost}',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Calculate shipping carbon offset
     * 
     * Calculates the donation amount (to CarbonFund 501\(c\)3) needed to offset a physical shipment. This calculation depends on the weight, primary transportation method, and distance of the shipment. Provide the distance of the shipment using the origin and destination address, or directly with the number of miles. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonCalculateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonCalculateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonCalculateResponse
     */
	public function getApiV1DonationsCarbonCalculate(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonCalculateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonCalculateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonCalculateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/donations/carbon_calculate');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonCalculateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonCalculateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve carbon offset stats
     * 
     * Measures your carbon offset impact in relatable terms. Provide the id of a donation to CarbonFund to see stats about that specific donation. If you omit the donation id, this endpoint returns aggregate stats for all of your CarbonFund donations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonStatsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonStatsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonStatsResponse
     */
	public function getApiV1DonationsCarbonStats(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonStatsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonStatsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/donations/carbon_stats');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonStatsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCarbonStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Calculate crypto carbon offset
     * 
     * Calculates the donation amount (to CarbonFund 501\(c\)3) needed to offset a cryptocurrency transaction. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCryptoCalculateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCryptoCalculateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCryptoCalculateResponse
     */
	public function getApiV1DonationsCryptoCalculate(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCryptoCalculateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCryptoCalculateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCryptoCalculateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/donations/crypto_calculate');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCryptoCalculateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsCryptoCalculateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List your donations
     * 
     * Retrieves a list of donations you've previously made. The donations are returned in order of creation, with the most recent donations appearing first. This endpoint is paginated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsIndexRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsIndexSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsIndexResponse
     */
	public function getApiV1DonationsIndex(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsIndexRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsIndexSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/donations/index');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsIndexRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve a donation
     * 
     * Retrieves the details of a donation you've previously made.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsShowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsShowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsShowResponse
     */
	public function getApiV1DonationsShow(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsShowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsShowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsShowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/donations/show');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsShowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1DonationsShowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Search a nonprofit
     * 
     * Retrieves a list of nonprofits whose names match the provided name. This endpoint is paginated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsListResponse
     */
	public function getApiV1NonprofitsList(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/nonprofits/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Show a nonprofit
     * 
     * Retrieves information for a nonprofit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsShowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsShowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsShowResponse
     */
	public function getApiV1NonprofitsShow(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsShowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsShowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsShowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/nonprofits/show');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsShowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1NonprofitsShowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Create a donation
     * 
     * Creates a donation to any nonprofit. CHANGE keeps track of your donations, bills you at the end of the month, and handles the nonprofit payouts for you.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1DonationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1DonationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1DonationsCreateResponse
     */
	public function postApiV1DonationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1DonationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1DonationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1DonationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/donations/create');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostApiV1DonationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1DonationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}