"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import autobranchcreationconfig as shared_autobranchcreationconfig
from ..shared import customrule as shared_customrule
from ..shared import platform_enum as shared_platform_enum
from ..shared import productionbranch as shared_productionbranch
from ..shared import repositoryclonemethod_enum as shared_repositoryclonemethod_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class App:
    r"""Represents the different branches of a repository for building, deploying, and hosting an Amplify app."""
    
    app_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appArn') }})  
    app_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appId') }})  
    create_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    default_domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultDomain') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    enable_basic_auth: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableBasicAuth') }})  
    enable_branch_auto_build: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableBranchAutoBuild') }})  
    environment_variables: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentVariables') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    platform: shared_platform_enum.PlatformEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform') }})  
    repository: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository') }})  
    update_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    auto_branch_creation_config: Optional[shared_autobranchcreationconfig.AutoBranchCreationConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoBranchCreationConfig'), 'exclude': lambda f: f is None }})  
    auto_branch_creation_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoBranchCreationPatterns'), 'exclude': lambda f: f is None }})  
    basic_auth_credentials: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicAuthCredentials'), 'exclude': lambda f: f is None }})  
    build_spec: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildSpec'), 'exclude': lambda f: f is None }})  
    custom_headers: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customHeaders'), 'exclude': lambda f: f is None }})  
    custom_rules: Optional[list[shared_customrule.CustomRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customRules'), 'exclude': lambda f: f is None }})  
    enable_auto_branch_creation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableAutoBranchCreation'), 'exclude': lambda f: f is None }})  
    enable_branch_auto_deletion: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableBranchAutoDeletion'), 'exclude': lambda f: f is None }})  
    iam_service_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iamServiceRoleArn'), 'exclude': lambda f: f is None }})  
    production_branch: Optional[shared_productionbranch.ProductionBranch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productionBranch'), 'exclude': lambda f: f is None }})  
    repository_clone_method: Optional[shared_repositoryclonemethod_enum.RepositoryCloneMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositoryCloneMethod'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    