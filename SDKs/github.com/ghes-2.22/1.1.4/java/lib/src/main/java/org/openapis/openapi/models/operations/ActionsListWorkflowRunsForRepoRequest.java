/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class ActionsListWorkflowRunsForRepoRequest {
    /**
     * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=actor")
    public String actor;
    public ActionsListWorkflowRunsForRepoRequest withActor(String actor) {
        this.actor = actor;
        return this;
    }
    
    /**
     * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=branch")
    public String branch;
    public ActionsListWorkflowRunsForRepoRequest withBranch(String branch) {
        this.branch = branch;
        return this;
    }
    
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=created")
    public OffsetDateTime created;
    public ActionsListWorkflowRunsForRepoRequest withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    /**
     * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=event")
    public String event;
    public ActionsListWorkflowRunsForRepoRequest withEvent(String event) {
        this.event = event;
        return this;
    }
    
    /**
     * If `true` pull requests are omitted from the response (empty array).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=exclude_pull_requests")
    public Boolean excludePullRequests;
    public ActionsListWorkflowRunsForRepoRequest withExcludePullRequests(Boolean excludePullRequests) {
        this.excludePullRequests = excludePullRequests;
        return this;
    }
    
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=owner")
    public String owner;
    public ActionsListWorkflowRunsForRepoRequest withOwner(String owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * Page number of the results to fetch.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;
    public ActionsListWorkflowRunsForRepoRequest withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * Results per page (max 100)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;
    public ActionsListWorkflowRunsForRepoRequest withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=repo")
    public String repo;
    public ActionsListWorkflowRunsForRepoRequest withRepo(String repo) {
        this.repo = repo;
        return this;
    }
    
    /**
     * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/enterprise-server@2.22/rest/reference/checks#create-a-check-run)."
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    public org.openapis.openapi.models.shared.WorkflowRunStatusEnum status;
    public ActionsListWorkflowRunsForRepoRequest withStatus(org.openapis.openapi.models.shared.WorkflowRunStatusEnum status) {
        this.status = status;
        return this;
    }
    
}
