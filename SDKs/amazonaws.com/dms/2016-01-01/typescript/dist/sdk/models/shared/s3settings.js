"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3Settings = void 0;
var utils_1 = require("../../../internal/utils");
var cannedaclforobjectsvalueenum_1 = require("./cannedaclforobjectsvalueenum");
var compressiontypevalueenum_1 = require("./compressiontypevalueenum");
var dataformatvalueenum_1 = require("./dataformatvalueenum");
var datepartitiondelimitervalueenum_1 = require("./datepartitiondelimitervalueenum");
var datepartitionsequencevalueenum_1 = require("./datepartitionsequencevalueenum");
var encodingtypevalueenum_1 = require("./encodingtypevalueenum");
var encryptionmodevalueenum_1 = require("./encryptionmodevalueenum");
var parquetversionvalueenum_1 = require("./parquetversionvalueenum");
var class_transformer_1 = require("class-transformer");
/**
 * Settings for exporting data to Amazon S3.
 */
var S3Settings = /** @class */ (function (_super) {
    __extends(S3Settings, _super);
    function S3Settings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "AddColumnName" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "addColumnName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "AddTrailingPaddingCharacter" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "addTrailingPaddingCharacter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "BucketFolder" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "bucketFolder", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "BucketName" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "bucketName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CannedAclForObjects" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "cannedAclForObjects", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CdcInsertsAndUpdates" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "cdcInsertsAndUpdates", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CdcInsertsOnly" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "cdcInsertsOnly", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CdcMaxBatchInterval" }),
        __metadata("design:type", Number)
    ], S3Settings.prototype, "cdcMaxBatchInterval", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CdcMinFileSize" }),
        __metadata("design:type", Number)
    ], S3Settings.prototype, "cdcMinFileSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CdcPath" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "cdcPath", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CompressionType" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "compressionType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CsvDelimiter" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "csvDelimiter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CsvNoSupValue" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "csvNoSupValue", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CsvNullValue" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "csvNullValue", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CsvRowDelimiter" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "csvRowDelimiter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "DataFormat" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "dataFormat", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "DataPageSize" }),
        __metadata("design:type", Number)
    ], S3Settings.prototype, "dataPageSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "DatePartitionDelimiter" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "datePartitionDelimiter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "DatePartitionEnabled" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "datePartitionEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "DatePartitionSequence" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "datePartitionSequence", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "DatePartitionTimezone" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "datePartitionTimezone", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "DictPageSizeLimit" }),
        __metadata("design:type", Number)
    ], S3Settings.prototype, "dictPageSizeLimit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EnableStatistics" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "enableStatistics", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EncodingType" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "encodingType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EncryptionMode" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "encryptionMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ExpectedBucketOwner" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "expectedBucketOwner", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ExternalTableDefinition" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "externalTableDefinition", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "GlueCatalogGeneration" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "glueCatalogGeneration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "IgnoreHeaderRows" }),
        __metadata("design:type", Number)
    ], S3Settings.prototype, "ignoreHeaderRows", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "IncludeOpForFullLoad" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "includeOpForFullLoad", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "MaxFileSize" }),
        __metadata("design:type", Number)
    ], S3Settings.prototype, "maxFileSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ParquetTimestampInMillisecond" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "parquetTimestampInMillisecond", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ParquetVersion" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "parquetVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "PreserveTransactions" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "preserveTransactions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Rfc4180" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "rfc4180", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "RowGroupLength" }),
        __metadata("design:type", Number)
    ], S3Settings.prototype, "rowGroupLength", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ServerSideEncryptionKmsKeyId" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "serverSideEncryptionKmsKeyId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ServiceAccessRoleArn" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "serviceAccessRoleArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "TimestampColumnName" }),
        __metadata("design:type", String)
    ], S3Settings.prototype, "timestampColumnName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "UseCsvNoSupValue" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "useCsvNoSupValue", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "UseTaskStartTimeForFullLoadTimestamp" }),
        __metadata("design:type", Boolean)
    ], S3Settings.prototype, "useTaskStartTimeForFullLoadTimestamp", void 0);
    return S3Settings;
}(utils_1.SpeakeasyBase));
exports.S3Settings = S3Settings;
