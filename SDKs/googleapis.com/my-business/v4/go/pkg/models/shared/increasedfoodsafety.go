// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum - Dining areas additional sanitation exception.
type IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum string

const (
	IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnumExceptionUnspecified IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum = "EXCEPTION_UNSPECIFIED"
	IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnumUnderConstruction    IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum = "UNDER_CONSTRUCTION"
	IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnumDependentOnSeason    IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum = "DEPENDENT_ON_SEASON"
	IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnumDependentOnDayOfWeek IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum) ToPointer() *IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum {
	return &e
}

func (e *IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum: %v", v)
	}
}

// IncreasedFoodSafetyDisposableFlatwareExceptionEnum - Disposable flatware exception.
type IncreasedFoodSafetyDisposableFlatwareExceptionEnum string

const (
	IncreasedFoodSafetyDisposableFlatwareExceptionEnumExceptionUnspecified IncreasedFoodSafetyDisposableFlatwareExceptionEnum = "EXCEPTION_UNSPECIFIED"
	IncreasedFoodSafetyDisposableFlatwareExceptionEnumUnderConstruction    IncreasedFoodSafetyDisposableFlatwareExceptionEnum = "UNDER_CONSTRUCTION"
	IncreasedFoodSafetyDisposableFlatwareExceptionEnumDependentOnSeason    IncreasedFoodSafetyDisposableFlatwareExceptionEnum = "DEPENDENT_ON_SEASON"
	IncreasedFoodSafetyDisposableFlatwareExceptionEnumDependentOnDayOfWeek IncreasedFoodSafetyDisposableFlatwareExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e IncreasedFoodSafetyDisposableFlatwareExceptionEnum) ToPointer() *IncreasedFoodSafetyDisposableFlatwareExceptionEnum {
	return &e
}

func (e *IncreasedFoodSafetyDisposableFlatwareExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = IncreasedFoodSafetyDisposableFlatwareExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IncreasedFoodSafetyDisposableFlatwareExceptionEnum: %v", v)
	}
}

// IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum - Food preparation and serving additional safety exception.
type IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum string

const (
	IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnumExceptionUnspecified IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum = "EXCEPTION_UNSPECIFIED"
	IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnumUnderConstruction    IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum = "UNDER_CONSTRUCTION"
	IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnumDependentOnSeason    IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum = "DEPENDENT_ON_SEASON"
	IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnumDependentOnDayOfWeek IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum) ToPointer() *IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum {
	return &e
}

func (e *IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum: %v", v)
	}
}

// IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum - Individual packaged meals exception.
type IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum string

const (
	IncreasedFoodSafetyIndividualPackagedMealsExceptionEnumExceptionUnspecified IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	IncreasedFoodSafetyIndividualPackagedMealsExceptionEnumUnderConstruction    IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum = "UNDER_CONSTRUCTION"
	IncreasedFoodSafetyIndividualPackagedMealsExceptionEnumDependentOnSeason    IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum = "DEPENDENT_ON_SEASON"
	IncreasedFoodSafetyIndividualPackagedMealsExceptionEnumDependentOnDayOfWeek IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum) ToPointer() *IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum {
	return &e
}

func (e *IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum: %v", v)
	}
}

// IncreasedFoodSafetySingleUseFoodMenusExceptionEnum - Single use food menus exception.
type IncreasedFoodSafetySingleUseFoodMenusExceptionEnum string

const (
	IncreasedFoodSafetySingleUseFoodMenusExceptionEnumExceptionUnspecified IncreasedFoodSafetySingleUseFoodMenusExceptionEnum = "EXCEPTION_UNSPECIFIED"
	IncreasedFoodSafetySingleUseFoodMenusExceptionEnumUnderConstruction    IncreasedFoodSafetySingleUseFoodMenusExceptionEnum = "UNDER_CONSTRUCTION"
	IncreasedFoodSafetySingleUseFoodMenusExceptionEnumDependentOnSeason    IncreasedFoodSafetySingleUseFoodMenusExceptionEnum = "DEPENDENT_ON_SEASON"
	IncreasedFoodSafetySingleUseFoodMenusExceptionEnumDependentOnDayOfWeek IncreasedFoodSafetySingleUseFoodMenusExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e IncreasedFoodSafetySingleUseFoodMenusExceptionEnum) ToPointer() *IncreasedFoodSafetySingleUseFoodMenusExceptionEnum {
	return &e
}

func (e *IncreasedFoodSafetySingleUseFoodMenusExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = IncreasedFoodSafetySingleUseFoodMenusExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IncreasedFoodSafetySingleUseFoodMenusExceptionEnum: %v", v)
	}
}

// IncreasedFoodSafety - Increased food safety measures implemented by the hotel during COVID-19.
type IncreasedFoodSafety struct {
	// Additional sanitation in dining areas.
	DiningAreasAdditionalSanitation *bool `json:"diningAreasAdditionalSanitation,omitempty"`
	// Dining areas additional sanitation exception.
	DiningAreasAdditionalSanitationException *IncreasedFoodSafetyDiningAreasAdditionalSanitationExceptionEnum `json:"diningAreasAdditionalSanitationException,omitempty"`
	// Disposable flatware.
	DisposableFlatware *bool `json:"disposableFlatware,omitempty"`
	// Disposable flatware exception.
	DisposableFlatwareException *IncreasedFoodSafetyDisposableFlatwareExceptionEnum `json:"disposableFlatwareException,omitempty"`
	// Additional safety measures during food prep and serving.
	FoodPreparationAndServingAdditionalSafety *bool `json:"foodPreparationAndServingAdditionalSafety,omitempty"`
	// Food preparation and serving additional safety exception.
	FoodPreparationAndServingAdditionalSafetyException *IncreasedFoodSafetyFoodPreparationAndServingAdditionalSafetyExceptionEnum `json:"foodPreparationAndServingAdditionalSafetyException,omitempty"`
	// Individually-packaged meals.
	IndividualPackagedMeals *bool `json:"individualPackagedMeals,omitempty"`
	// Individual packaged meals exception.
	IndividualPackagedMealsException *IncreasedFoodSafetyIndividualPackagedMealsExceptionEnum `json:"individualPackagedMealsException,omitempty"`
	// Single-use menus.
	SingleUseFoodMenus *bool `json:"singleUseFoodMenus,omitempty"`
	// Single use food menus exception.
	SingleUseFoodMenusException *IncreasedFoodSafetySingleUseFoodMenusExceptionEnum `json:"singleUseFoodMenusException,omitempty"`
}
