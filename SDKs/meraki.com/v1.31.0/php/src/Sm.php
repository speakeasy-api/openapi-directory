<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Sm 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Force check-in a set of devices
     * 
     * Force check-in a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse
     */
	public function checkinNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/checkin', \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkinNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CheckinNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bypass activation lock attempt
     * 
     * Bypass activation lock attempt
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptResponse
     */
	public function createNetworkSmBypassActivationLockAttempt(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/bypassActivationLockAttempts', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmBypassActivationLockAttemptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSmBypassActivationLockAttempt201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a target group
     * 
     * Add a target group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupResponse
     */
	public function createNetworkSmTargetGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/targetGroups', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSmTargetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSmTargetGroup201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a target group from a network
     * 
     * Delete a target group from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupResponse
     */
	public function deleteNetworkSmTargetGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/targetGroups/{targetGroupId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmTargetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a User Access Device
     * 
     * Delete a User Access Device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceResponse
     */
	public function deleteNetworkSmUserAccessDevice(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/userAccessDevices/{userAccessDeviceId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSmUserAccessDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Bypass activation lock attempt status
     * 
     * Bypass activation lock attempt status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptResponse
     */
	public function getNetworkSmBypassActivationLockAttempt(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/bypassActivationLockAttempts/{attemptId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmBypassActivationLockAttemptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmBypassActivationLockAttempt200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the client's daily cellular data usage history
     * 
     * Return the client's daily cellular data usage history. Usage data is in kilobytes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryResponse
     */
	public function getNetworkSmDeviceCellularUsageHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/cellularUsageHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceCellularUsageHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCellularUsageHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the certs on a device
     * 
     * List the certs on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsResponse
     */
	public function getNetworkSmDeviceCerts(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/certs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCertsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceCerts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceCerts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * 
     * Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityResponse
     */
	public function getNetworkSmDeviceConnectivity(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/connectivity', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceConnectivity200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceConnectivity200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * 
     * Return historical records of various Systems Manager network connection details for desktop devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsResponse
     */
	public function getNetworkSmDeviceDesktopLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/desktopLogs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceDesktopLogs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDesktopLogs200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of commands sent to Systems Manager devices
     * 
     * Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsResponse
     */
	public function getNetworkSmDeviceDeviceCommandLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/deviceCommandLogs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceDeviceCommandLogs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceCommandLogs200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the installed profiles associated with a device
     * 
     * Get the installed profiles associated with a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesResponse
     */
	public function getNetworkSmDeviceDeviceProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/deviceProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceDeviceProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceDeviceProfiles200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the network adapters of a device
     * 
     * List the network adapters of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersResponse
     */
	public function getNetworkSmDeviceNetworkAdapters(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/networkAdapters', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdaptersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceNetworkAdapters200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceNetworkAdapters200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * 
     * Return historical records of various Systems Manager client metrics for desktop devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryResponse
     */
	public function getNetworkSmDevicePerformanceHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/performanceHistory', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDevicePerformanceHistory200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicePerformanceHistory200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the restrictions on a device
     * 
     * List the restrictions on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsResponse
     */
	public function getNetworkSmDeviceRestrictions(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/restrictions', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceRestrictionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceRestrictions200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the security centers on a device
     * 
     * List the security centers on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersResponse
     */
	public function getNetworkSmDeviceSecurityCenters(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/securityCenters', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCentersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceSecurityCenters200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSecurityCenters200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of softwares associated with a device
     * 
     * Get a list of softwares associated with a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresResponse
     */
	public function getNetworkSmDeviceSoftwares(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/softwares', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwaresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceSoftwares200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceSoftwares200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the saved SSID names on a device
     * 
     * List the saved SSID names on a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsResponse
     */
	public function getNetworkSmDeviceWlanLists(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/wlanLists', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDeviceWlanLists200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDeviceWlanLists200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the devices enrolled in an SM network with various specified fields and filters
     * 
     * List the devices enrolled in an SM network with various specified fields and filters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse
     */
	public function getNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmDevices200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all profiles in a network
     * 
     * List all profiles in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse
     */
	public function getNetworkSmProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/profiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmProfiles200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a target group
     * 
     * Return a target group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupResponse
     */
	public function getNetworkSmTargetGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/targetGroups/{targetGroupId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmTargetGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the target groups in this network
     * 
     * List the target groups in this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsResponse
     */
	public function getNetworkSmTargetGroups(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/targetGroups', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTargetGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmTargetGroups200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Trusted Access Configs
     * 
     * List Trusted Access Configs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsResponse
     */
	public function getNetworkSmTrustedAccessConfigs(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/trustedAccessConfigs', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmTrustedAccessConfigs200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmTrustedAccessConfigs200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List User Access Devices and its Trusted Access Connections
     * 
     * List User Access Devices and its Trusted Access Connections
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesResponse
     */
	public function getNetworkSmUserAccessDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/userAccessDevices', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmUserAccessDevices200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserAccessDevices200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the profiles associated with a user
     * 
     * Get the profiles associated with a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesResponse
     */
	public function getNetworkSmUserDeviceProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/users/{userId}/deviceProfiles', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmUserDeviceProfiles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserDeviceProfiles200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of softwares associated with a user
     * 
     * Get a list of softwares associated with a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresResponse
     */
	public function getNetworkSmUserSoftwares(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/users/{userId}/softwares', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwaresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmUserSoftwares200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUserSoftwares200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the owners in an SM network with various specified fields and filters
     * 
     * List the owners in an SM network with various specified fields and filters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersResponse
     */
	public function getNetworkSmUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/users', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSmUsers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSmUsers200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the organization's APNS certificate
     * 
     * Get the organization's APNS certificate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertResponse
     */
	public function getOrganizationSmApnsCert(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/sm/apnsCert', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSmApnsCert200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmApnsCert200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * 
     * Get a hash containing the unparsed token of the VPP account with the given ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountResponse
     */
	public function getOrganizationSmVppAccount(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/sm/vppAccounts/{vppAccountId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSmVppAccount200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccount200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the VPP accounts in the organization
     * 
     * List the VPP accounts in the organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsResponse
     */
	public function getOrganizationSmVppAccounts(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/sm/vppAccounts', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSmVppAccounts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSmVppAccounts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lock a set of devices
     * 
     * Lock a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse
     */
	public function lockNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/lock', \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lockNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LockNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add, delete, or update the tags of a set of devices
     * 
     * Add, delete, or update the tags of a set of devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsResponse
     */
	public function modifyNetworkSmDevicesTags(
        \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/modifyTags', \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->modifyNetworkSmDevicesTags200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ModifyNetworkSmDevicesTags200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move a set of devices to a new network
     * 
     * Move a set of devices to a new network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesResponse
     */
	public function moveNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/move', \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->moveNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MoveNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Refresh the details of a device
     * 
     * Refresh the details of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse
     */
	public function refreshNetworkSmDeviceDetails(
        \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/refreshDetails', \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RefreshNetworkSmDeviceDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Unenroll a device
     * 
     * Unenroll a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse
     */
	public function unenrollNetworkSmDevice(
        \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/{deviceId}/unenroll', \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnenrollNetworkSmDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unenrollNetworkSmDevice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the fields of a device
     * 
     * Modify the fields of a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsResponse
     */
	public function updateNetworkSmDevicesFields(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/fields', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFieldsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSmDevicesFields200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmDevicesFields200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a target group
     * 
     * Update a target group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupResponse
     */
	public function updateNetworkSmTargetGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/targetGroups/{targetGroupId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSmTargetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSmTargetGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Wipe a device
     * 
     * Wipe a device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesResponse
     */
	public function wipeNetworkSmDevices(
        \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/sm/devices/wipe', \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wipeNetworkSmDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\WipeNetworkSmDevices200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}