/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Projects {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Projects(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Lists constraints that could be applied on the specified resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OrgpolicyProjectsConstraintsListResponse orgpolicyProjectsConstraintsList(org.openapis.openapi.models.operations.OrgpolicyProjectsConstraintsListRequest request, org.openapis.openapi.models.operations.OrgpolicyProjectsConstraintsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OrgpolicyProjectsConstraintsListRequest.class, baseUrl, "/v2/{parent}/constraints", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OrgpolicyProjectsConstraintsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OrgpolicyProjectsConstraintsListResponse res = new org.openapis.openapi.models.operations.OrgpolicyProjectsConstraintsListResponse(contentType, httpRes.statusCode()) {{
            googleCloudOrgpolicyV2ListConstraintsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2ListConstraintsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2ListConstraintsResponse.class);
                res.googleCloudOrgpolicyV2ListConstraintsResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Google Cloud resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesCreateResponse orgpolicyProjectsPoliciesCreate(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesCreateRequest request, org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesCreateRequest.class, baseUrl, "/v2/{parent}/policies", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudOrgpolicyV2PolicyInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesCreateResponse res = new org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesCreateResponse(contentType, httpRes.statusCode()) {{
            googleCloudOrgpolicyV2Policy = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2Policy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2Policy.class);
                res.googleCloudOrgpolicyV2Policy = out;
            }
        }

        return res;
    }

    /**
     * Deletes a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or organization policy does not exist.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesDeleteResponse orgpolicyProjectsPoliciesDelete(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesDeleteRequest request, org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesDeleteRequest.class, baseUrl, "/v2/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesDeleteResponse res = new org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesDeleteResponse(contentType, httpRes.statusCode()) {{
            googleProtobufEmpty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleProtobufEmpty = out;
            }
        }

        return res;
    }

    /**
     * Gets a policy on a resource. If no policy is set on the resource, `NOT_FOUND` is returned. The `etag` value can be used with `UpdatePolicy()` to update a policy during read-modify-write.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetResponse orgpolicyProjectsPoliciesGet(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetRequest request, org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetRequest.class, baseUrl, "/v2/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetResponse res = new org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetResponse(contentType, httpRes.statusCode()) {{
            googleCloudOrgpolicyV2Policy = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2Policy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2Policy.class);
                res.googleCloudOrgpolicyV2Policy = out;
            }
        }

        return res;
    }

    /**
     * Gets the effective policy on a resource. This is the result of merging policies in the resource hierarchy and evaluating conditions. The returned policy will not have an `etag` or `condition` set because it is an evaluated policy across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetEffectivePolicyResponse orgpolicyProjectsPoliciesGetEffectivePolicy(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetEffectivePolicyRequest request, org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetEffectivePolicySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetEffectivePolicyRequest.class, baseUrl, "/v2/{name}:getEffectivePolicy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetEffectivePolicyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetEffectivePolicyResponse res = new org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesGetEffectivePolicyResponse(contentType, httpRes.statusCode()) {{
            googleCloudOrgpolicyV2Policy = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2Policy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2Policy.class);
                res.googleCloudOrgpolicyV2Policy = out;
            }
        }

        return res;
    }

    /**
     * Retrieves all of the policies that exist on a particular resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesListResponse orgpolicyProjectsPoliciesList(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesListRequest request, org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesListRequest.class, baseUrl, "/v2/{parent}/policies", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesListResponse res = new org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesListResponse(contentType, httpRes.statusCode()) {{
            googleCloudOrgpolicyV2ListPoliciesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2ListPoliciesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2ListPoliciesResponse.class);
                res.googleCloudOrgpolicyV2ListPoliciesResponse = out;
            }
        }

        return res;
    }

    /**
     * Updates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesPatchResponse orgpolicyProjectsPoliciesPatch(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesPatchRequest request, org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesPatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesPatchRequest.class, baseUrl, "/v2/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudOrgpolicyV2PolicyInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesPatchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesPatchResponse res = new org.openapis.openapi.models.operations.OrgpolicyProjectsPoliciesPatchResponse(contentType, httpRes.statusCode()) {{
            googleCloudOrgpolicyV2Policy = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2Policy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudOrgpolicyV2Policy.class);
                res.googleCloudOrgpolicyV2Policy = out;
            }
        }

        return res;
    }
}