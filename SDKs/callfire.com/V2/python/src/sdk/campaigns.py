"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Campaigns:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_campaign_sound(self, request: operations.DeleteCampaignSoundRequest, security: operations.DeleteCampaignSoundSecurity) -> operations.DeleteCampaignSoundResponse:
        r"""Delete a specific sound
        Deletes a single campaign sound instance for a specific campaign sound id, this operation does not delete sound completely, it sets sound status to ARCHIVED which means that sound will no longer appear in 'find' operation results, but still accessible via 'get' operation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCampaignSoundRequest, base_url, '/campaigns/sounds/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCampaignSoundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_campaign_sounds(self, request: operations.FindCampaignSoundsRequest, security: operations.FindCampaignSoundsSecurity) -> operations.FindCampaignSoundsResponse:
        r"""Find sounds
        To find all campaign sounds which were created by user. Returns all sounds available to be used in campaigns
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/campaigns/sounds'
        
        query_params = utils.get_query_params(operations.FindCampaignSoundsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindCampaignSoundsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CampaignSoundPage])
                res.campaign_sound_page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_campaign_batch(self, request: operations.GetCampaignBatchRequest, security: operations.GetCampaignBatchSecurity) -> operations.GetCampaignBatchResponse:
        r"""Find a specific batch
        Returns a single Batch instance for a given batch id. This API is useful for determining the state of a validating batch
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCampaignBatchRequest, base_url, '/campaigns/batches/{id}', request)
        
        query_params = utils.get_query_params(operations.GetCampaignBatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCampaignBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Batch])
                res.batch = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_campaign_sound(self, request: operations.GetCampaignSoundRequest, security: operations.GetCampaignSoundSecurity) -> operations.GetCampaignSoundResponse:
        r"""Find a specific sound
        Returns a single CampaignSound instance for a given sound id in campaign. This is a meta data to the sounds. No audio data is returned from this API
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCampaignSoundRequest, base_url, '/campaigns/sounds/{id}', request)
        
        query_params = utils.get_query_params(operations.GetCampaignSoundRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCampaignSoundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CampaignSound])
                res.campaign_sound = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_campaign_sound_data_mp3(self, request: operations.GetCampaignSoundDataMp3Request, security: operations.GetCampaignSoundDataMp3Security) -> operations.GetCampaignSoundDataMp3Response:
        r"""Download a MP3 sound
        Download the MP3 version of a hosted file. This is an audio data endpoint. Returns binary response of the 'audio/mpeg' content type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCampaignSoundDataMp3Request, base_url, '/campaigns/sounds/{id}.mp3', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCampaignSoundDataMp3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'audio/mpeg'):
                res.body = http_res.content

        return res

    def get_campaign_sound_data_wav(self, request: operations.GetCampaignSoundDataWavRequest, security: operations.GetCampaignSoundDataWavSecurity) -> operations.GetCampaignSoundDataWavResponse:
        r"""Download a WAV sound
        Download the WAV version of the hosted file. This is an audio data endpoint. Returns binary response of the 'audio/mpeg' content type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCampaignSoundDataWavRequest, base_url, '/campaigns/sounds/{id}.wav', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCampaignSoundDataWavResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'audio/wav'):
                res.body = http_res.content

        return res

    def post_call_campaign_sound(self, request: operations.PostCallCampaignSoundRequest, security: operations.PostCallCampaignSoundSecurity) -> operations.PostCallCampaignSoundResponse:
        r"""Add sound via call
        Use this API to create a sound via a phone call. Provide the required phone number in the CallCreateSound object inside the request, and user will receive a call shortly after with instructions on how to record a sound over the phone.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/campaigns/sounds/calls'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "call_create_sound", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostCallCampaignSoundRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCallCampaignSoundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CampaignSound])
                res.campaign_sound = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def post_file_campaign_sound(self, request: operations.PostFileCampaignSoundRequest, security: operations.PostFileCampaignSoundSecurity) -> operations.PostFileCampaignSoundResponse:
        r"""Add sound via file
        Create a campaign sound file via a supplied .mp3 or .wav file
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/campaigns/sounds/files'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostFileCampaignSoundRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostFileCampaignSoundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CampaignSound])
                res.campaign_sound = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def post_tts_campaign_sound(self, request: operations.PostTTSCampaignSoundRequest, security: operations.PostTTSCampaignSoundSecurity) -> operations.PostTTSCampaignSoundResponse:
        r"""Add sound via text-to-speech
        Use this API to create a sound file via a supplied string of text. Add a text in the TextToSpeech.message field, and pick a voice in the TextToSpeech.voice field. Available voices are: MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/campaigns/sounds/tts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "text_to_speech", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostTTSCampaignSoundRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTTSCampaignSoundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CampaignSound])
                res.campaign_sound = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def update_campaign_batch(self, request: operations.UpdateCampaignBatchRequest, security: operations.UpdateCampaignBatchSecurity) -> operations.UpdateCampaignBatchResponse:
        r"""Update a batch
        Updates a single Batch instance, currently batch can only be turned \"on/off\" 
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCampaignBatchRequest, base_url, '/campaigns/batches/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "batch_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCampaignBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    