// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AnalyticsEventCountSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsEventCountRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format.
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// The id of the event.
	EventName string `pathParam:"style=simple,explode=false,name=event_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format.
	Start time.Time `queryParam:"style=form,explode=true,name=start"`
	// To select specific application versions
	Versions []string `queryParam:"style=pipeDelimited,explode=true,name=versions"`
}

// AnalyticsEventCountDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsEventCountDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsEventCountDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsEventCountDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsEventCountDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsEventCountDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsEventCountDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsEventCountDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsEventCountDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsEventCountDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsEventCountDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsEventCountDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsEventCountDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsEventCountDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsEventCountDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsEventCountDefaultApplicationJSON - Error
type AnalyticsEventCountDefaultApplicationJSON struct {
	Error *AnalyticsEventCountDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsEventCount200ApplicationJSONCount struct {
	// Count of the object.
	Count *int64 `json:"count,omitempty"`
	// The ISO 8601 datetime.
	Datetime *string `json:"datetime,omitempty"`
}

// AnalyticsEventCount200ApplicationJSON - Count of events by interval in the time range.
type AnalyticsEventCount200ApplicationJSON struct {
	Count              []AnalyticsEventCount200ApplicationJSONCount `json:"count,omitempty"`
	PreviousTotalCount *int64                                       `json:"previous_total_count,omitempty"`
	TotalCount         *int64                                       `json:"total_count,omitempty"`
}

type AnalyticsEventCountResponse struct {
	// Count of events by interval in the time range.
	AnalyticsEventCount200ApplicationJSONObject *AnalyticsEventCount200ApplicationJSON
	// Error code with reason.
	AnalyticsEventCountDefaultApplicationJSONObject *AnalyticsEventCountDefaultApplicationJSON
	ContentType                                     string
	StatusCode                                      int
	RawResponse                                     *http.Response
}
