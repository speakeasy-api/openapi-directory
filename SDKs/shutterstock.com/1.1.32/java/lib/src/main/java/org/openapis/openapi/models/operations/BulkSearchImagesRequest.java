/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class BulkSearchImagesRequest {
    /**
     * List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    public org.openapis.openapi.models.shared.SearchImage[] requestBody;

    public BulkSearchImagesRequest withRequestBody(org.openapis.openapi.models.shared.SearchImage[] requestBody) {
        this.requestBody = requestBody;
        return this;
    }
    
    /**
     * Show images added on the specified date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=added_date")
    public LocalDate addedDate;

    public BulkSearchImagesRequest withAddedDate(LocalDate addedDate) {
        this.addedDate = addedDate;
        return this;
    }
    
    /**
     * Show images added before the specified date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=added_date_end")
    public LocalDate addedDateEnd;

    public BulkSearchImagesRequest withAddedDateEnd(LocalDate addedDateEnd) {
        this.addedDateEnd = addedDateEnd;
        return this;
    }
    
    /**
     * Show images added on or after the specified date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=added_date_start")
    public LocalDate addedDateStart;

    public BulkSearchImagesRequest withAddedDateStart(LocalDate addedDateStart) {
        this.addedDateStart = addedDateStart;
        return this;
    }
    
    /**
     * Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=aspect_ratio")
    public Double aspectRatio;

    public BulkSearchImagesRequest withAspectRatio(Double aspectRatio) {
        this.aspectRatio = aspectRatio;
        return this;
    }
    
    /**
     * Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=aspect_ratio_max")
    public Double aspectRatioMax;

    public BulkSearchImagesRequest withAspectRatioMax(Double aspectRatioMax) {
        this.aspectRatioMax = aspectRatioMax;
        return this;
    }
    
    /**
     * Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=aspect_ratio_min")
    public Double aspectRatioMin;

    public BulkSearchImagesRequest withAspectRatioMin(Double aspectRatioMin) {
        this.aspectRatioMin = aspectRatioMin;
        return this;
    }
    
    /**
     * Show images with the specified Shutterstock-defined category; specify a category name or ID
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=category")
    public String category;

    public BulkSearchImagesRequest withCategory(String category) {
        this.category = category;
        return this;
    }
    
    /**
     * Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=color")
    public String color;

    public BulkSearchImagesRequest withColor(String color) {
        this.color = color;
        return this;
    }
    
    /**
     * Show images with the specified contributor names or IDs, allows multiple
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor")
    public String[] contributor;

    public BulkSearchImagesRequest withContributor(String[] contributor) {
        this.contributor = contributor;
        return this;
    }
    
    /**
     * Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor_country")
    public Object contributorCountry;

    public BulkSearchImagesRequest withContributorCountry(Object contributorCountry) {
        this.contributorCountry = contributorCountry;
        return this;
    }
    
    /**
     * Fields to display in the response; see the documentation for the fields parameter in the overview section
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;

    public BulkSearchImagesRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * (Deprecated; use height_from and height_to instead) Show images with the specified height
     * @deprecated this field will be removed in a future release, please migrate away from it as soon as possible
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=height")
    @Deprecated
    public Long height;

    @Deprecated
    public BulkSearchImagesRequest withHeight(Long height) {
        this.height = height;
        return this;
    }
    
    /**
     * Show images with the specified height or larger, in pixels
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=height_from")
    public Long heightFrom;

    public BulkSearchImagesRequest withHeightFrom(Long heightFrom) {
        this.heightFrom = heightFrom;
        return this;
    }
    
    /**
     * Show images with the specified height or smaller, in pixels
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=height_to")
    public Long heightTo;

    public BulkSearchImagesRequest withHeightTo(Long heightTo) {
        this.heightTo = heightTo;
        return this;
    }
    
    /**
     * Show images of the specified type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=image_type")
    public BulkSearchImagesImageTypeEnum[] imageType;

    public BulkSearchImagesRequest withImageType(BulkSearchImagesImageTypeEnum[] imageType) {
        this.imageType = imageType;
        return this;
    }
    
    /**
     * Hide results with potentially unsafe keywords
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=keyword_safe_search")
    public Boolean keywordSafeSearch;

    public BulkSearchImagesRequest withKeywordSafeSearch(Boolean keywordSafeSearch) {
        this.keywordSafeSearch = keywordSafeSearch;
        return this;
    }
    
    /**
     * Set query and result language (uses Accept-Language header if not set)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=language")
    public org.openapis.openapi.models.shared.LanguageEnum language;

    public BulkSearchImagesRequest withLanguage(org.openapis.openapi.models.shared.LanguageEnum language) {
        this.language = language;
        return this;
    }
    
    /**
     * Show only images with the specified license
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=license")
    public BulkSearchImagesLicenseEnum[] license;

    public BulkSearchImagesRequest withLicense(BulkSearchImagesLicenseEnum[] license) {
        this.license = license;
        return this;
    }
    
    /**
     * Show image results with the specified model IDs
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=model")
    public String[] model;

    public BulkSearchImagesRequest withModel(String[] model) {
        this.model = model;
        return this;
    }
    
    /**
     * Show image results with horizontal or vertical orientation
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=orientation")
    public BulkSearchImagesOrientationEnum orientation;

    public BulkSearchImagesRequest withOrientation(BulkSearchImagesOrientationEnum orientation) {
        this.orientation = orientation;
        return this;
    }
    
    /**
     * Page number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;

    public BulkSearchImagesRequest withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * Show images that feature people of the specified age category
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=people_age")
    public BulkSearchImagesPeopleAgeEnum peopleAge;

    public BulkSearchImagesRequest withPeopleAge(BulkSearchImagesPeopleAgeEnum peopleAge) {
        this.peopleAge = peopleAge;
        return this;
    }
    
    /**
     * Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=people_ethnicity")
    public BulkSearchImagesPeopleEthnicityEnum[] peopleEthnicity;

    public BulkSearchImagesRequest withPeopleEthnicity(BulkSearchImagesPeopleEthnicityEnum[] peopleEthnicity) {
        this.peopleEthnicity = peopleEthnicity;
        return this;
    }
    
    /**
     * Show images with people of the specified gender
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=people_gender")
    public BulkSearchImagesPeopleGenderEnum peopleGender;

    public BulkSearchImagesRequest withPeopleGender(BulkSearchImagesPeopleGenderEnum peopleGender) {
        this.peopleGender = peopleGender;
        return this;
    }
    
    /**
     * Show images of people with a signed model release
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=people_model_released")
    public Boolean peopleModelReleased;

    public BulkSearchImagesRequest withPeopleModelReleased(Boolean peopleModelReleased) {
        this.peopleModelReleased = peopleModelReleased;
        return this;
    }
    
    /**
     * Show images with the specified number of people
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=people_number")
    public Long peopleNumber;

    public BulkSearchImagesRequest withPeopleNumber(Long peopleNumber) {
        this.peopleNumber = peopleNumber;
        return this;
    }
    
    /**
     * Number of results per page
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;

    public BulkSearchImagesRequest withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=region")
    public Object region;

    public BulkSearchImagesRequest withRegion(Object region) {
        this.region = region;
        return this;
    }
    
    /**
     * Enable or disable safe search
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=safe")
    public Boolean safe;

    public BulkSearchImagesRequest withSafe(Boolean safe) {
        this.safe = safe;
        return this;
    }
    
    /**
     * Sort by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public BulkSearchImagesSortEnum sort;

    public BulkSearchImagesRequest withSort(BulkSearchImagesSortEnum sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Spellcheck the search query and return results on suggested spellings
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=spellcheck_query")
    public Boolean spellcheckQuery;

    public BulkSearchImagesRequest withSpellcheckQuery(Boolean spellcheckQuery) {
        this.spellcheckQuery = spellcheckQuery;
        return this;
    }
    
    /**
     * Amount of detail to render in the response
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=view")
    public BulkSearchImagesViewEnum view;

    public BulkSearchImagesRequest withView(BulkSearchImagesViewEnum view) {
        this.view = view;
        return this;
    }
    
    /**
     * (Deprecated; use width_from and width_to instead) Show images with the specified width
     * @deprecated this field will be removed in a future release, please migrate away from it as soon as possible
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=width")
    @Deprecated
    public Long width;

    @Deprecated
    public BulkSearchImagesRequest withWidth(Long width) {
        this.width = width;
        return this;
    }
    
    /**
     * Show images with the specified width or larger, in pixels
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=width_from")
    public Long widthFrom;

    public BulkSearchImagesRequest withWidthFrom(Long widthFrom) {
        this.widthFrom = widthFrom;
        return this;
    }
    
    /**
     * Show images with the specified width or smaller, in pixels
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=width_to")
    public Long widthTo;

    public BulkSearchImagesRequest withWidthTo(Long widthTo) {
        this.widthTo = widthTo;
        return this;
    }
    
    public BulkSearchImagesRequest(@JsonProperty("RequestBody") org.openapis.openapi.models.shared.SearchImage[] requestBody) {
        this.requestBody = requestBody;
  }
}
