"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import pricingschedulepricingperiod as shared_pricingschedulepricingperiod
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class PricingScheduleCapCostOptionEnum(str, Enum):
    r"""Placement cap cost option."""
    CAP_COST_NONE = 'CAP_COST_NONE'
    CAP_COST_MONTHLY = 'CAP_COST_MONTHLY'
    CAP_COST_CUMULATIVE = 'CAP_COST_CUMULATIVE'

class PricingSchedulePricingTypeEnum(str, Enum):
    r"""Placement pricing type. This field is required on insertion."""
    PRICING_TYPE_CPM = 'PRICING_TYPE_CPM'
    PRICING_TYPE_CPC = 'PRICING_TYPE_CPC'
    PRICING_TYPE_CPA = 'PRICING_TYPE_CPA'
    PRICING_TYPE_FLAT_RATE_IMPRESSIONS = 'PRICING_TYPE_FLAT_RATE_IMPRESSIONS'
    PRICING_TYPE_FLAT_RATE_CLICKS = 'PRICING_TYPE_FLAT_RATE_CLICKS'
    PRICING_TYPE_CPM_ACTIVEVIEW = 'PRICING_TYPE_CPM_ACTIVEVIEW'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PricingSchedule:
    r"""Pricing Schedule"""
    
    cap_cost_option: Optional[PricingScheduleCapCostOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capCostOption'), 'exclude': lambda f: f is None }})
    r"""Placement cap cost option."""  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    flighted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flighted'), 'exclude': lambda f: f is None }})
    r"""Whether this placement is flighted. If true, pricing periods will be computed automatically."""  
    floodlight_activity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floodlightActivityId'), 'exclude': lambda f: f is None }})
    r"""Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA."""  
    pricing_periods: Optional[list[shared_pricingschedulepricingperiod.PricingSchedulePricingPeriod]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricingPeriods'), 'exclude': lambda f: f is None }})
    r"""Pricing periods for this placement."""  
    pricing_type: Optional[PricingSchedulePricingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricingType'), 'exclude': lambda f: f is None }})
    r"""Placement pricing type. This field is required on insertion."""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    testing_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testingStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    