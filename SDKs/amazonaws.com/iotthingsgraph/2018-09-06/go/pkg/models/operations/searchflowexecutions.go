// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SearchFlowExecutionsXAmzTargetEnum
type SearchFlowExecutionsXAmzTargetEnum string

const (
	SearchFlowExecutionsXAmzTargetEnumIotThingsGraphFrontEndServiceSearchFlowExecutions SearchFlowExecutionsXAmzTargetEnum = "IotThingsGraphFrontEndService.SearchFlowExecutions"
)

func (e SearchFlowExecutionsXAmzTargetEnum) ToPointer() *SearchFlowExecutionsXAmzTargetEnum {
	return &e
}

func (e *SearchFlowExecutionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IotThingsGraphFrontEndService.SearchFlowExecutions":
		*e = SearchFlowExecutionsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchFlowExecutionsXAmzTargetEnum: %v", v)
	}
}

type SearchFlowExecutionsRequest struct {
	SearchFlowExecutionsRequest shared.SearchFlowExecutionsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  SearchFlowExecutionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type SearchFlowExecutionsResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	SearchFlowExecutionsResponse *shared.SearchFlowExecutionsResponse
	StatusCode                   int
	RawResponse                  *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
