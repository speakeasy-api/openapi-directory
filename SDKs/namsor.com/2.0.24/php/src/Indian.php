<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Indian 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullResponse
     */
	public function castegroupIndianFull(
        \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}', \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameCastegroupOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameCastegroupOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameSubdivisionIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullBatchResponse
     */
	public function castegroupIndianFullBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameSubdivisionIn $request,
        \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/castegroupIndianFullBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CastegroupIndianFullBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameCastegroupOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameCastegroupOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReligionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReligionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReligionResponse
     */
	public function religion(
        \OpenAPI\OpenAPI\Models\Operations\ReligionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReligionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReligionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}', \OpenAPI\OpenAPI\Models\Operations\ReligionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReligionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameReligionedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameReligionedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameSubdivisionIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReligionIndianFullBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReligionIndianFullBatchResponse
     */
	public function religionIndianFullBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameSubdivisionIn $request,
        \OpenAPI\OpenAPI\Models\Operations\ReligionIndianFullBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReligionIndianFullBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/religionIndianFullBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReligionIndianFullBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameReligionedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameReligionedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianResponse
     */
	public function subclassificationIndian(
        \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/subclassificationIndian/{firstName}/{lastName}', \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNameGeoSubclassificationOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNameGeoSubclassificationOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianBatchResponse
     */
	public function subclassificationIndianBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoIn $request,
        \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/subclassificationIndianBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNameGeoSubclassificationOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoSubclassificationOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullResponse
     */
	public function subclassificationIndianFull(
        \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/subclassificationIndianFull/{fullName}', \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameGeoSubclassificationOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameGeoSubclassificationOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGeoIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullBatchResponse
     */
	public function subclassificationIndianFullBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGeoIn $request,
        \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/subclassificationIndianFullBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubclassificationIndianFullBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameGeoSubclassificationOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGeoSubclassificationOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
}