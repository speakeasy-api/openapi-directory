"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class TrackingField:
    r"""Tracking Field operations"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def trackingfield_create(self, request: operations.TrackingfieldCreateTrackingField, security: operations.TrackingfieldCreateSecurity) -> operations.TrackingfieldCreateResponse:
        r"""Create a tracking field
        [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.<br> Use this API to create a new tracking field.<br><br>
        **Scope:** `trackingfield:write:admin`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
        **Prerequisites:**
        * Business, Education, API or higher plan
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tracking_fields'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TrackingfieldCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TrackingfieldCreateTrackingField1])
                res.tracking_field = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def trackingfield_delete(self, request: operations.TrackingfieldDeleteRequest, security: operations.TrackingfieldDeleteSecurity) -> operations.TrackingfieldDeleteResponse:
        r"""Delete a tracking field
        [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.<br> Use this API to delete a tracking field.<br><br>
        **Scope:** `trackingfield:write:admin`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
        **Prerequisites:**
        * Business, Education, API or higher plan
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TrackingfieldDeleteRequest, base_url, '/tracking_fields/{fieldId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TrackingfieldDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def trackingfield_get(self, request: operations.TrackingfieldGetRequest, security: operations.TrackingfieldGetSecurity) -> operations.TrackingfieldGetResponse:
        r"""Get a tracking field
        [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.<br><br> When scheduling a meeting, the tracking field will be included in the meeting options.<br>Use this API to get information on a tracking field.<br><br>
        **Scopes:** `trackingfield:read:admin`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
        **Prerequisites:**
        * Business, Education, API or higher plan
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TrackingfieldGetRequest, base_url, '/tracking_fields/{fieldId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TrackingfieldGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TrackingfieldGetTrackingField])
                res.tracking_field = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code == 404:
            pass

        return res

    def trackingfield_list(self) -> operations.TrackingfieldListResponse:
        r"""List tracking fields
        [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.<br> Use this API to list all the tracking fields on your Zoom account.<br><br>
        **Scopes:** `trackingfield:read:admin`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>
        **Prerequisites:**
        * Business, Education, API or higher plan
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tracking_fields'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TrackingfieldListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TrackingfieldListTrackingFieldList])
                res.tracking_field_list = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def trackingfield_update(self, request: operations.TrackingfieldUpdateRequest, security: operations.TrackingfieldUpdateSecurity) -> operations.TrackingfieldUpdateResponse:
        r"""Update a tracking field
        [Tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) allow you to analyze usage by various fields within an organization.<br> Use this API to update a tracking field.<br><br>
        **Scope:** `trackingfield:write:admin`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
        **Prerequisites:**
        * Business, Education, API or higher plan
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TrackingfieldUpdateRequest, base_url, '/tracking_fields/{fieldId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TrackingfieldUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    