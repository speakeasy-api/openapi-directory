"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class FullNameParsedSimilarityKey:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def getfullnameparsedmatch(self, request: operations.GetfullnameparsedmatchRequest) -> operations.GetfullnameparsedmatchResponse:
        r"""Gets a similarity key for matching purposes for parsed full name data
        Gets a similarity key for matching purposes for parsed full name data, where the first name and last name are split into separate fields in the source data rather than combined.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getfullnameparsedmatch'
        
        query_params = utils.get_query_params(operations.GetfullnameparsedmatchRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetfullnameparsedmatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Getfullnameparsedmatch200ApplicationJSON])
                res.getfullnameparsedmatch_200_application_json_object = out
        elif http_res.status_code in [400, 402, 403, 405, 500]:
            pass

        return res

    