/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Collection - Collection of scores
 */
public class Collection {
    /**
     * If this directory is dedicated to an app, the unique idenfier of this app
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app")
    public String app;
    public Collection withApp(String app) {
        this.app = app;
        return this;
    }
    
    /**
     * Capabilities the current user has on this collection. Each capability corresponds to a fine-grained action that a user may take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capabilities")
    public CollectionCapabilities capabilities;
    public Collection withCapabilities(CollectionCapabilities capabilities) {
        this.capabilities = capabilities;
        return this;
    }
    
    /**
     * The list of the collaborators of the collection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collaborators")
    public ResourceCollaborator[] collaborators;
    public Collection withCollaborators(ResourceCollaborator[] collaborators) {
        this.collaborators = collaborators;
        return this;
    }
    
    /**
     * The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections")
    public String[] collections;
    public Collection withCollections(String[] collections) {
        this.collections = collections;
        return this;
    }
    
    /**
     * The date when the collection was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationDate")
    public OffsetDateTime creationDate;
    public Collection withCreationDate(OffsetDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    /**
     * The url where the collection can be viewed in a web browser
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htmlUrl")
    public String htmlUrl;
    public Collection withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * Unique identifier of the collection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Collection withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The collection main privacy mode.
     * - `private`: The collection is private and can be only accessed, modified and administred by specified collaborators users.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privacy")
    public CollectionPrivacyEnum privacy;
    public Collection withPrivacy(CollectionPrivacyEnum privacy) {
        this.privacy = privacy;
        return this;
    }
    
    /**
     * The rights of the current user on a score or collection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rights")
    public ResourceRights rights;
    public Collection withRights(ResourceRights rights) {
        this.rights = rights;
        return this;
    }
    
    /**
     * The private sharing key of the collection (available when the `privacy` mode is set to `privateLink`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharingKey")
    public String sharingKey;
    public Collection withSharingKey(String sharingKey) {
        this.sharingKey = sharingKey;
        return this;
    }
    
    /**
     * The title of the collection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Collection withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Type of the collection.
     * The type will influence the capabilitied available on the collections and how this collection is/can be populated.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public CollectionTypeEnum type;
    public Collection withType(CollectionTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Public User details summary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public UserPublicSummary user;
    public Collection withUser(UserPublicSummary user) {
        this.user = user;
        return this;
    }
    
}
