"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connector = exports.ConnectorStateEnum = exports.ConnectorInput = void 0;
var utils_1 = require("../../../internal/utils");
var subnet_1 = require("./subnet");
var class_transformer_1 = require("class-transformer");
/**
 * Definition of a Serverless VPC Access connector.
 */
var ConnectorInput = /** @class */ (function (_super) {
    __extends(ConnectorInput, _super);
    function ConnectorInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipCidrRange" }),
        __metadata("design:type", String)
    ], ConnectorInput.prototype, "ipCidrRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "machineType" }),
        __metadata("design:type", String)
    ], ConnectorInput.prototype, "machineType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxInstances" }),
        __metadata("design:type", Number)
    ], ConnectorInput.prototype, "maxInstances", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxThroughput" }),
        __metadata("design:type", Number)
    ], ConnectorInput.prototype, "maxThroughput", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minInstances" }),
        __metadata("design:type", Number)
    ], ConnectorInput.prototype, "minInstances", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minThroughput" }),
        __metadata("design:type", Number)
    ], ConnectorInput.prototype, "minThroughput", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], ConnectorInput.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], ConnectorInput.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnet" }),
        (0, class_transformer_1.Type)(function () { return subnet_1.Subnet; }),
        __metadata("design:type", subnet_1.Subnet)
    ], ConnectorInput.prototype, "subnet", void 0);
    return ConnectorInput;
}(utils_1.SpeakeasyBase));
exports.ConnectorInput = ConnectorInput;
/**
 * Output only. State of the VPC access connector.
 */
var ConnectorStateEnum;
(function (ConnectorStateEnum) {
    ConnectorStateEnum["StateUnspecified"] = "STATE_UNSPECIFIED";
    ConnectorStateEnum["Ready"] = "READY";
    ConnectorStateEnum["Creating"] = "CREATING";
    ConnectorStateEnum["Deleting"] = "DELETING";
    ConnectorStateEnum["Error"] = "ERROR";
    ConnectorStateEnum["Updating"] = "UPDATING";
})(ConnectorStateEnum = exports.ConnectorStateEnum || (exports.ConnectorStateEnum = {}));
/**
 * Definition of a Serverless VPC Access connector.
 */
var Connector = /** @class */ (function (_super) {
    __extends(Connector, _super);
    function Connector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "connectedProjects" }),
        __metadata("design:type", Array)
    ], Connector.prototype, "connectedProjects", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipCidrRange" }),
        __metadata("design:type", String)
    ], Connector.prototype, "ipCidrRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "machineType" }),
        __metadata("design:type", String)
    ], Connector.prototype, "machineType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxInstances" }),
        __metadata("design:type", Number)
    ], Connector.prototype, "maxInstances", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxThroughput" }),
        __metadata("design:type", Number)
    ], Connector.prototype, "maxThroughput", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minInstances" }),
        __metadata("design:type", Number)
    ], Connector.prototype, "minInstances", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minThroughput" }),
        __metadata("design:type", Number)
    ], Connector.prototype, "minThroughput", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Connector.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], Connector.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], Connector.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnet" }),
        (0, class_transformer_1.Type)(function () { return subnet_1.Subnet; }),
        __metadata("design:type", subnet_1.Subnet)
    ], Connector.prototype, "subnet", void 0);
    return Connector;
}(utils_1.SpeakeasyBase));
exports.Connector = Connector;
