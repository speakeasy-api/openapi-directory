/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A structure for the resource.
 */
export class RemoveLFTagsFromResourceRequestBodyResource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Catalog" })
  catalog?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "DataCellsFilter" })
  @Type(() => shared.DataCellsFilterResource)
  dataCellsFilter?: shared.DataCellsFilterResource;

  @SpeakeasyMetadata()
  @Expose({ name: "DataLocation" })
  @Type(() => shared.DataLocationResource)
  dataLocation?: shared.DataLocationResource;

  @SpeakeasyMetadata()
  @Expose({ name: "Database" })
  @Type(() => shared.DatabaseResource)
  database?: shared.DatabaseResource;

  @SpeakeasyMetadata()
  @Expose({ name: "LFTag" })
  @Type(() => shared.LFTagKeyResource)
  lfTag?: shared.LFTagKeyResource;

  @SpeakeasyMetadata()
  @Expose({ name: "LFTagPolicy" })
  @Type(() => shared.LFTagPolicyResource)
  lfTagPolicy?: shared.LFTagPolicyResource;

  @SpeakeasyMetadata()
  @Expose({ name: "Table" })
  @Type(() => shared.TableResource)
  table?: shared.TableResource;

  @SpeakeasyMetadata()
  @Expose({ name: "TableWithColumns" })
  @Type(() => shared.TableWithColumnsResource)
  tableWithColumns?: shared.TableWithColumnsResource;
}

export class RemoveLFTagsFromResourceRequestBody extends SpeakeasyBase {
  /**
   * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CatalogId" })
  catalogId?: string;

  /**
   * The LF-tags to be removed from the resource.
   */
  @SpeakeasyMetadata({ elemType: shared.LFTagPair })
  @Expose({ name: "LFTags" })
  @Type(() => shared.LFTagPair)
  lfTags: shared.LFTagPair[];

  /**
   * A structure for the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Resource" })
  @Type(() => RemoveLFTagsFromResourceRequestBodyResource)
  resource: RemoveLFTagsFromResourceRequestBodyResource;
}

export class RemoveLFTagsFromResourceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: RemoveLFTagsFromResourceRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class RemoveLFTagsFromResourceResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * EntityNotFoundException
   */
  @SpeakeasyMetadata()
  entityNotFoundException?: any;

  /**
   * GlueEncryptionException
   */
  @SpeakeasyMetadata()
  glueEncryptionException?: any;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  /**
   * InvalidInputException
   */
  @SpeakeasyMetadata()
  invalidInputException?: any;

  /**
   * OperationTimeoutException
   */
  @SpeakeasyMetadata()
  operationTimeoutException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  removeLFTagsFromResourceResponse?: shared.RemoveLFTagsFromResourceResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
