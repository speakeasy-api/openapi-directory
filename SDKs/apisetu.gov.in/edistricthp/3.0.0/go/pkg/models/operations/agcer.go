// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AgcerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type AgcerRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// AgcerRequestBodyFormatEnum - The format of the certificate in response.
type AgcerRequestBodyFormatEnum string

const (
	AgcerRequestBodyFormatEnumPdf AgcerRequestBodyFormatEnum = "pdf"
)

func (e *AgcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = AgcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AgcerRequestBodyFormatEnum: %s", s)
	}
}

// AgcerRequestBody - Request format
type AgcerRequestBody struct {
	CertificateParameters *AgcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format AgcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type AgcerRequest struct {
	// Request format
	Request  *AgcerRequestBody `request:"mediaType=application/json"`
	Security AgcerSecurity
}

type Agcer504ApplicationJSONErrorEnum string

const (
	Agcer504ApplicationJSONErrorEnumGatewayTimeout Agcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Agcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Agcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Agcer504ApplicationJSONErrorDescriptionEnum string

const (
	Agcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Agcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Agcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Agcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Agcer504ApplicationJSON - Gateway timeout
type Agcer504ApplicationJSON struct {
	Error            *Agcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Agcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Agcer503ApplicationJSONErrorEnum string

const (
	Agcer503ApplicationJSONErrorEnumServiceUnavailable Agcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Agcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Agcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Agcer503ApplicationJSONErrorDescriptionEnum string

const (
	Agcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Agcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Agcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Agcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Agcer503ApplicationJSON - Service unavailable
type Agcer503ApplicationJSON struct {
	Error            *Agcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Agcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Agcer502ApplicationJSONErrorEnum string

const (
	Agcer502ApplicationJSONErrorEnumBadGatewy Agcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Agcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Agcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Agcer502ApplicationJSONErrorDescriptionEnum string

const (
	Agcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Agcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Agcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Agcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Agcer502ApplicationJSON - Bad gateway
type Agcer502ApplicationJSON struct {
	Error            *Agcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Agcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Agcer500ApplicationJSONErrorEnum string

const (
	Agcer500ApplicationJSONErrorEnumInternalServerError Agcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Agcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Agcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Agcer500ApplicationJSONErrorDescriptionEnum string

const (
	Agcer500ApplicationJSONErrorDescriptionEnumInternalServerError Agcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Agcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Agcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Agcer500ApplicationJSON - Internal server error
type Agcer500ApplicationJSON struct {
	Error            *Agcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Agcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Agcer404ApplicationJSONErrorEnum string

const (
	Agcer404ApplicationJSONErrorEnumRecordNotFound Agcer404ApplicationJSONErrorEnum = "record_not_found"
	Agcer404ApplicationJSONErrorEnumURLNotFound    Agcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Agcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Agcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Agcer404ApplicationJSONErrorDescriptionEnum string

const (
	Agcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Agcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Agcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Agcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Agcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Agcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Agcer404ApplicationJSON - No record found
type Agcer404ApplicationJSON struct {
	Error            *Agcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Agcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Agcer401ApplicationJSONErrorEnum string

const (
	Agcer401ApplicationJSONErrorEnumInvalidAuthentication Agcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Agcer401ApplicationJSONErrorEnumInvalidAuthorization  Agcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Agcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Agcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Agcer401ApplicationJSONErrorDescriptionEnum string

const (
	Agcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Agcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Agcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Agcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Agcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Agcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Agcer401ApplicationJSON - Unauthorized access
type Agcer401ApplicationJSON struct {
	Error            *Agcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Agcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Agcer400ApplicationJSONErrorEnum string

const (
	Agcer400ApplicationJSONErrorEnumMissingParameter Agcer400ApplicationJSONErrorEnum = "missing_parameter"
	Agcer400ApplicationJSONErrorEnumInvalidParameter Agcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Agcer400ApplicationJSONErrorEnumInvalidFormat    Agcer400ApplicationJSONErrorEnum = "invalid_format"
	Agcer400ApplicationJSONErrorEnumInvalidTxnid     Agcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Agcer400ApplicationJSONErrorEnumInvalidConsentid Agcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Agcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Agcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Agcer400ApplicationJSONErrorDescriptionEnum string

const (
	Agcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Agcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Agcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Agcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Agcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Agcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Agcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Agcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Agcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Agcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Agcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Agcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Agcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Agcer400ApplicationJSON - Bad request
type Agcer400ApplicationJSON struct {
	Error            *Agcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Agcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type AgcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Agcer400ApplicationJSONObject *Agcer400ApplicationJSON
	// Unauthorized access
	Agcer401ApplicationJSONObject *Agcer401ApplicationJSON
	// No record found
	Agcer404ApplicationJSONObject *Agcer404ApplicationJSON
	// Internal server error
	Agcer500ApplicationJSONObject *Agcer500ApplicationJSON
	// Bad gateway
	Agcer502ApplicationJSONObject *Agcer502ApplicationJSON
	// Service unavailable
	Agcer503ApplicationJSONObject *Agcer503ApplicationJSON
	// Gateway timeout
	Agcer504ApplicationJSONObject *Agcer504ApplicationJSON
}
