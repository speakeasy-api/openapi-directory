// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Activity31MetadataConnectionsRelated - Related content for this activity.
type Activity31MetadataConnectionsRelated struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// Activity31MetadataConnections - A list of resource URIs related to the activity.
type Activity31MetadataConnections struct {
	// Related content for this activity.
	Related Activity31MetadataConnectionsRelated `json:"related"`
}

// Activity31Metadata - The activity's metadata.
type Activity31Metadata struct {
	// A list of resource URIs related to the activity.
	Connections Activity31MetadataConnections `json:"connections"`
}

// Activity31TypeEnum - Activity type
type Activity31TypeEnum string

const (
	Activity31TypeEnumAppearance      Activity31TypeEnum = "appearance"
	Activity31TypeEnumCategory        Activity31TypeEnum = "category"
	Activity31TypeEnumChannel         Activity31TypeEnum = "channel"
	Activity31TypeEnumFacebookFeed    Activity31TypeEnum = "facebook_feed"
	Activity31TypeEnumGroup           Activity31TypeEnum = "group"
	Activity31TypeEnumLike            Activity31TypeEnum = "like"
	Activity31TypeEnumOndemand        Activity31TypeEnum = "ondemand"
	Activity31TypeEnumShare           Activity31TypeEnum = "share"
	Activity31TypeEnumTag             Activity31TypeEnum = "tag"
	Activity31TypeEnumTwitterTimeline Activity31TypeEnum = "twitter_timeline"
	Activity31TypeEnumUpload          Activity31TypeEnum = "upload"
)

func (e *Activity31TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appearance":
		fallthrough
	case "category":
		fallthrough
	case "channel":
		fallthrough
	case "facebook_feed":
		fallthrough
	case "group":
		fallthrough
	case "like":
		fallthrough
	case "ondemand":
		fallthrough
	case "share":
		fallthrough
	case "tag":
		fallthrough
	case "twitter_timeline":
		fallthrough
	case "upload":
		*e = Activity31TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Activity31TypeEnum: %s", s)
	}
}

type Activity31 struct {
	// The category that this event occurred for. This will be preset for only "category" activity types.
	Category *Category `json:"category,omitempty"`
	// The channel that this event occurred for. This will be present for only "channel" activity types.
	Channel *Channel `json:"channel,omitempty"`
	// Video associated with ths activity.
	Clip Video `json:"clip"`
	// The group that this event occurred for. This will be present for only "group" activity types.
	Group *Group `json:"group,omitempty"`
	// The activity's metadata.
	Metadata Activity31Metadata `json:"metadata"`
	// The tag that this event occurred for. This will be present for only "tag" activity types.
	Tag *Tag `json:"tag,omitempty"`
	// Time that the event occurred.
	Time string `json:"time"`
	// Activity type
	Type Activity31TypeEnum `json:"type"`
	// The user that this event occurred for. This will be present for "like", "appearance", and "share" activity types.
	User *User `json:"user,omitempty"`
}
