"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkSwitchAlternateManagementInterfaceRequestBodyProtocolsEnum(str, Enum):
    RADIUS = 'radius'
    SNMP = 'snmp'
    SYSLOG = 'syslog'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchAlternateManagementInterfaceRequestBodySwitches:
    
    alternate_management_ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateManagementIp') }})
    r"""Switch alternative management IP. To remove a prior IP setting, provide an empty string"""  
    serial: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial') }})
    r"""Switch serial number"""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""Switch gateway must be in IP format. Only and must be specified for Polaris switches"""  
    subnet_mask: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnetMask'), 'exclude': lambda f: f is None }})
    r"""Switch subnet mask must be in IP format. Only and must be specified for Polaris switches"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkSwitchAlternateManagementInterfaceRequestBody:
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Boolean value to enable or disable AMI configuration. If enabled, VLAN and protocols must be set"""  
    protocols: Optional[list[UpdateNetworkSwitchAlternateManagementInterfaceRequestBodyProtocolsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocols'), 'exclude': lambda f: f is None }})
    r"""Can be one or more of the following values: 'radius', 'snmp' or 'syslog'"""  
    switches: Optional[list[UpdateNetworkSwitchAlternateManagementInterfaceRequestBodySwitches]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switches'), 'exclude': lambda f: f is None }})
    r"""Array of switch serial number and IP assignment. If parameter is present, it cannot have empty body. Note: switches parameter is not applicable for template networks, in other words, do not put 'switches' in the body when updating template networks. Also, an empty 'switches' array will remove all previous assignments"""  
    vlan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanId'), 'exclude': lambda f: f is None }})
    r"""Alternate management VLAN, must be between 1 and 4094"""  
    

@dataclasses.dataclass
class UpdateNetworkSwitchAlternateManagementInterfaceRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkSwitchAlternateManagementInterfaceRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkSwitchAlternateManagementInterfaceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_switch_alternate_management_interface_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    