// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SoundtrackEffectEnum - The effect to apply to the audio file <ul>
//
//	<li>`fadeIn` - fade volume in only</li>
//	<li>`fadeOut` - fade volume out only</li>
//	<li>`fadeInFadeOut` - fade volume in and out</li>
//
// </ul>
type SoundtrackEffectEnum string

const (
	SoundtrackEffectEnumFadeIn        SoundtrackEffectEnum = "fadeIn"
	SoundtrackEffectEnumFadeOut       SoundtrackEffectEnum = "fadeOut"
	SoundtrackEffectEnumFadeInFadeOut SoundtrackEffectEnum = "fadeInFadeOut"
)

func (e *SoundtrackEffectEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fadeIn":
		fallthrough
	case "fadeOut":
		fallthrough
	case "fadeInFadeOut":
		*e = SoundtrackEffectEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SoundtrackEffectEnum: %s", s)
	}
}

// Soundtrack - A music or audio file in mp3 format that plays for the duration of the rendered video or the length of the audio file, which ever is shortest.
type Soundtrack struct {
	// The effect to apply to the audio file <ul>
	//   <li>`fadeIn` - fade volume in only</li>
	//   <li>`fadeOut` - fade volume out only</li>
	//   <li>`fadeInFadeOut` - fade volume in and out</li>
	// </ul>
	Effect *SoundtrackEffectEnum `json:"effect,omitempty"`
	// The URL of the mp3 audio file. The URL must be publicly accessible or include credentials.
	Src string `json:"src"`
	// Set the volume for the soundtrack between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
	Volume *float64 `json:"volume,omitempty"`
}
