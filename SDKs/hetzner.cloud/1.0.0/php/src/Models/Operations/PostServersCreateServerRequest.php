<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


/**
 * PostServersCreateServerRequest - Please note that Server names must be unique per Project and valid hostnames as per RFC 1123 (i.e. may only contain letters, digits, periods, and dashes).
 * 
 * 
 * For `server_type` you can either use the ID as listed in `/server_types` or its name.
 * 
 * For `image` you can either use the ID as listed in `/images` or its name.
 * 
 * If you want to create the Server in a Location, you must set `location` to the ID or name as listed in `/locations`. This is the recommended way. You can be even more specific by setting `datacenter` to the ID or name as listed in `/datacenters`. However we only recommend this if you want to assign a specific Primary IP to the Server which is located in the specified Datacenter.
 * 
 * Some properties like `start_after_create` or `automount` will trigger Actions after the Server is created. Those Actions are listed in the `next_actions` field in the response.
 * 
 * For accessing your Server we strongly recommend to use SSH keys by passing the respective key IDs in `ssh_keys`. If you do not specify any `ssh_keys` we will generate a root password for you and return it in the response.
 * 
 * Please note that provided user-data is stored in our systems. While we take measures to protect it we highly recommend that you donâ€™t use it to store passwords or other sensitive information.
 * 
 * #### Call specific error codes
 * 
 * | Code                             | Description                                                |
 * |----------------------------------|------------------------------------------------------------|
 * | `placement_error`                | An error during the placement occurred                     |
 * | `primary_ip_assigned`            | The specified Primary IP is already assigned to a server   |
 * | `primary_ip_datacenter_mismatch` | The specified Primary IP is in a different datacenter      |
 * | `primary_ip_version_mismatch`    | The specified Primary IP has the wrong IP Version          |
 * 
 * 
 * @package OpenAPI\OpenAPI\Models\Operations
 * @access public
 */
class PostServersCreateServerRequest
{
    /**
     * Auto-mount Volumes after attach
     * 
     * @var ?bool $automount
     */
	#[\JMS\Serializer\Annotation\SerializedName('automount')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $automount = null;
    
    /**
     * ID or name of Datacenter to create Server in (must not be used together with location)
     * 
     * @var ?string $datacenter
     */
	#[\JMS\Serializer\Annotation\SerializedName('datacenter')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $datacenter = null;
    
    /**
     * Firewalls which should be applied on the Server's public network interface at creation time
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Operations\PostServersCreateServerRequestFirewalls> $firewalls
     */
	#[\JMS\Serializer\Annotation\SerializedName('firewalls')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Operations\PostServersCreateServerRequestFirewalls>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $firewalls = null;
    
    /**
     * ID or name of the Image the Server is created from
     * 
     * @var string $image
     */
	#[\JMS\Serializer\Annotation\SerializedName('image')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $image;
    
    /**
     * User-defined labels (key-value pairs)
     * 
     * @var ?array<string, mixed> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $labels = null;
    
    /**
     * ID or name of Location to create Server in (must not be used together with datacenter)
     * 
     * @var ?string $location
     */
	#[\JMS\Serializer\Annotation\SerializedName('location')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $location = null;
    
    /**
     * Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * Network IDs which should be attached to the Server private network interface at the creation time
     * 
     * @var ?array<int> $networks
     */
	#[\JMS\Serializer\Annotation\SerializedName('networks')]
    #[\JMS\Serializer\Annotation\Type('array<int>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $networks = null;
    
    /**
     * ID of the Placement Group the server should be in
     * 
     * @var ?int $placementGroup
     */
	#[\JMS\Serializer\Annotation\SerializedName('placement_group')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $placementGroup = null;
    
    /**
     * Public Network options
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\PostServersCreateServerRequestPublicNet $publicNet
     */
	#[\JMS\Serializer\Annotation\SerializedName('public_net')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\PostServersCreateServerRequestPublicNet')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PostServersCreateServerRequestPublicNet $publicNet = null;
    
    /**
     * ID or name of the Server type this Server should be created with
     * 
     * @var string $serverType
     */
	#[\JMS\Serializer\Annotation\SerializedName('server_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $serverType;
    
    /**
     * SSH key IDs (`integer`) or names (`string`) which should be injected into the Server at creation time
     * 
     * @var ?array<string> $sshKeys
     */
	#[\JMS\Serializer\Annotation\SerializedName('ssh_keys')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $sshKeys = null;
    
    /**
     * Start Server right after creation. Defaults to true.
     * 
     * @var ?bool $startAfterCreate
     */
	#[\JMS\Serializer\Annotation\SerializedName('start_after_create')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $startAfterCreate = null;
    
    /**
     * Cloud-Init user data to use during Server creation. This field is limited to 32KiB.
     * 
     * @var ?string $userData
     */
	#[\JMS\Serializer\Annotation\SerializedName('user_data')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userData = null;
    
    /**
     * Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.
     * 
     * @var ?array<int> $volumes
     */
	#[\JMS\Serializer\Annotation\SerializedName('volumes')]
    #[\JMS\Serializer\Annotation\Type('array<int>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $volumes = null;
    
	public function __construct()
	{
		$this->automount = null;
		$this->datacenter = null;
		$this->firewalls = null;
		$this->image = "";
		$this->labels = null;
		$this->location = null;
		$this->name = "";
		$this->networks = null;
		$this->placementGroup = null;
		$this->publicNet = null;
		$this->serverType = "";
		$this->sshKeys = null;
		$this->startAfterCreate = null;
		$this->userData = null;
		$this->volumes = null;
	}
}
