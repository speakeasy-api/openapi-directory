// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NdcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type NdcerRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Appid string `json:"appid"`
}

// NdcerRequestBodyFormatEnum - The format of the certificate in response.
type NdcerRequestBodyFormatEnum string

const (
	NdcerRequestBodyFormatEnumPdf NdcerRequestBodyFormatEnum = "pdf"
)

func (e NdcerRequestBodyFormatEnum) ToPointer() *NdcerRequestBodyFormatEnum {
	return &e
}

func (e *NdcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = NdcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NdcerRequestBodyFormatEnum: %v", v)
	}
}

// NdcerRequestBody - Request format
type NdcerRequestBody struct {
	CertificateParameters *NdcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NdcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ndcer504ApplicationJSONErrorEnum string

const (
	Ndcer504ApplicationJSONErrorEnumGatewayTimeout Ndcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Ndcer504ApplicationJSONErrorEnum) ToPointer() *Ndcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Ndcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Ndcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Ndcer504ApplicationJSONErrorDescriptionEnum string

const (
	Ndcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ndcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Ndcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Ndcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ndcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Ndcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ndcer504ApplicationJSON - Gateway timeout
type Ndcer504ApplicationJSON struct {
	Error            *Ndcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ndcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ndcer503ApplicationJSONErrorEnum string

const (
	Ndcer503ApplicationJSONErrorEnumServiceUnavailable Ndcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Ndcer503ApplicationJSONErrorEnum) ToPointer() *Ndcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Ndcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Ndcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Ndcer503ApplicationJSONErrorDescriptionEnum string

const (
	Ndcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ndcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Ndcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Ndcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ndcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Ndcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ndcer503ApplicationJSON - Service unavailable
type Ndcer503ApplicationJSON struct {
	Error            *Ndcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ndcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ndcer502ApplicationJSONErrorEnum string

const (
	Ndcer502ApplicationJSONErrorEnumBadGatewy Ndcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Ndcer502ApplicationJSONErrorEnum) ToPointer() *Ndcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Ndcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Ndcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Ndcer502ApplicationJSONErrorDescriptionEnum string

const (
	Ndcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ndcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Ndcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Ndcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ndcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Ndcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ndcer502ApplicationJSON - Bad gateway
type Ndcer502ApplicationJSON struct {
	Error            *Ndcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ndcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ndcer500ApplicationJSONErrorEnum string

const (
	Ndcer500ApplicationJSONErrorEnumInternalServerError Ndcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Ndcer500ApplicationJSONErrorEnum) ToPointer() *Ndcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Ndcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Ndcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Ndcer500ApplicationJSONErrorDescriptionEnum string

const (
	Ndcer500ApplicationJSONErrorDescriptionEnumInternalServerError Ndcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Ndcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Ndcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ndcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Ndcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ndcer500ApplicationJSON - Internal server error
type Ndcer500ApplicationJSON struct {
	Error            *Ndcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ndcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ndcer404ApplicationJSONErrorEnum string

const (
	Ndcer404ApplicationJSONErrorEnumRecordNotFound Ndcer404ApplicationJSONErrorEnum = "record_not_found"
	Ndcer404ApplicationJSONErrorEnumURLNotFound    Ndcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Ndcer404ApplicationJSONErrorEnum) ToPointer() *Ndcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Ndcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ndcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Ndcer404ApplicationJSONErrorDescriptionEnum string

const (
	Ndcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ndcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ndcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ndcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Ndcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Ndcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ndcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ndcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ndcer404ApplicationJSON - No record found
type Ndcer404ApplicationJSON struct {
	Error            *Ndcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ndcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ndcer401ApplicationJSONErrorEnum string

const (
	Ndcer401ApplicationJSONErrorEnumInvalidAuthentication Ndcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Ndcer401ApplicationJSONErrorEnumInvalidAuthorization  Ndcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Ndcer401ApplicationJSONErrorEnum) ToPointer() *Ndcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Ndcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ndcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Ndcer401ApplicationJSONErrorDescriptionEnum string

const (
	Ndcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ndcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ndcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ndcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Ndcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Ndcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ndcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ndcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ndcer401ApplicationJSON - Unauthorized access
type Ndcer401ApplicationJSON struct {
	Error            *Ndcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ndcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ndcer400ApplicationJSONErrorEnum string

const (
	Ndcer400ApplicationJSONErrorEnumMissingParameter Ndcer400ApplicationJSONErrorEnum = "missing_parameter"
	Ndcer400ApplicationJSONErrorEnumInvalidParameter Ndcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Ndcer400ApplicationJSONErrorEnumInvalidFormat    Ndcer400ApplicationJSONErrorEnum = "invalid_format"
	Ndcer400ApplicationJSONErrorEnumInvalidTxnid     Ndcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Ndcer400ApplicationJSONErrorEnumInvalidConsentid Ndcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Ndcer400ApplicationJSONErrorEnum) ToPointer() *Ndcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Ndcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ndcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Ndcer400ApplicationJSONErrorDescriptionEnum string

const (
	Ndcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ndcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ndcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Ndcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ndcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ndcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ndcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ndcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ndcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ndcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Ndcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Ndcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ndcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ndcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ndcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ndcer400ApplicationJSON - Bad request
type Ndcer400ApplicationJSON struct {
	Error            *Ndcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ndcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NdcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ndcer400ApplicationJSONObject *Ndcer400ApplicationJSON
	// Unauthorized access
	Ndcer401ApplicationJSONObject *Ndcer401ApplicationJSON
	// No record found
	Ndcer404ApplicationJSONObject *Ndcer404ApplicationJSON
	// Internal server error
	Ndcer500ApplicationJSONObject *Ndcer500ApplicationJSON
	// Bad gateway
	Ndcer502ApplicationJSONObject *Ndcer502ApplicationJSON
	// Service unavailable
	Ndcer503ApplicationJSONObject *Ndcer503ApplicationJSON
	// Gateway timeout
	Ndcer504ApplicationJSONObject *Ndcer504ApplicationJSON
}
