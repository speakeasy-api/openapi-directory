/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Metric - &lt;p&gt;Contains an asset metric property. With metrics, you can calculate aggregate functions, such as an average, maximum, or minimum, as specified through an expression. A metric maps several values to a single value (such as a sum).&lt;/p&gt; &lt;p&gt;The maximum number of dependent/cascading variables used in any one metric calculation is 10. Therefore, a &lt;i&gt;root&lt;/i&gt; metric can have up to 10 cascading metrics in its computational dependency tree. Additionally, a metric can only have a data type of &lt;code&gt;DOUBLE&lt;/code&gt; and consume properties with data types of &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;DOUBLE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html#metrics"&gt;Metrics&lt;/a&gt; in the &lt;i&gt;IoT SiteWise User Guide&lt;/i&gt;.&lt;/p&gt;
 */
public class Metric {
    @JsonProperty("expression")
    public String expression;
    public Metric withExpression(String expression) {
        this.expression = expression;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processingConfig")
    public MetricProcessingConfig processingConfig;
    public Metric withProcessingConfig(MetricProcessingConfig processingConfig) {
        this.processingConfig = processingConfig;
        return this;
    }
    
    @JsonProperty("variables")
    public ExpressionVariable[] variables;
    public Metric withVariables(ExpressionVariable[] variables) {
        this.variables = variables;
        return this;
    }
    
    @JsonProperty("window")
    public MetricWindow window;
    public Metric withWindow(MetricWindow window) {
        this.window = window;
        return this;
    }
    
}
