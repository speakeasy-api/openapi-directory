/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class EtcerSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-APIKEY",
  })
  apiKey: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-CLIENTID",
  })
  clientId: string;
}

export class EtcerRequestBodyCertificateParameters extends SpeakeasyBase {
  /**
   * Unique Code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "_unique_code" })
  uniqueCode: string;
}

/**
 * The format of the certificate in response.
 */
export enum EtcerRequestBodyFormatEnum {
  Pdf = "pdf",
}

/**
 * Request format
 */
export class EtcerRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "certificateParameters" })
  @Type(() => EtcerRequestBodyCertificateParameters)
  certificateParameters?: EtcerRequestBodyCertificateParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "consentArtifact" })
  @Type(() => shared.ConsentArtifactSchema)
  consentArtifact?: shared.ConsentArtifactSchema;

  /**
   * The format of the certificate in response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format: EtcerRequestBodyFormatEnum;

  /**
   * A unique transaction id for this request in UUID format. It is used for tracking the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "txnId" })
  txnId: string;
}

export enum Etcer504ApplicationJSONErrorEnum {
  GatewayTimeout = "gateway_timeout",
}

export enum Etcer504ApplicationJSONErrorDescriptionEnum {
  PublisherServiceDidNotRespondInTime = "Publisher service did not respond in time",
}

/**
 * Gateway timeout
 */
export class Etcer504ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Etcer504ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Etcer504ApplicationJSONErrorDescriptionEnum;
}

export enum Etcer503ApplicationJSONErrorEnum {
  ServiceUnavailable = "service_unavailable",
}

export enum Etcer503ApplicationJSONErrorDescriptionEnum {
  PublisherServiceIsTemporarilyUnavailable = "Publisher service is temporarily unavailable",
}

/**
 * Service unavailable
 */
export class Etcer503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Etcer503ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Etcer503ApplicationJSONErrorDescriptionEnum;
}

export enum Etcer502ApplicationJSONErrorEnum {
  BadGatewy = "bad_gatewy",
}

export enum Etcer502ApplicationJSONErrorDescriptionEnum {
  PublisherServiceReturnedAnInvalidResponse = "Publisher service returned an invalid response",
}

/**
 * Bad gateway
 */
export class Etcer502ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Etcer502ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Etcer502ApplicationJSONErrorDescriptionEnum;
}

export enum Etcer500ApplicationJSONErrorEnum {
  InternalServerError = "internal_server_error",
}

export enum Etcer500ApplicationJSONErrorDescriptionEnum {
  InternalServerError = "Internal server error",
}

/**
 * Internal server error
 */
export class Etcer500ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Etcer500ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Etcer500ApplicationJSONErrorDescriptionEnum;
}

export enum Etcer404ApplicationJSONErrorEnum {
  RecordNotFound = "record_not_found",
  UrlNotFound = "url_not_found",
}

export enum Etcer404ApplicationJSONErrorDescriptionEnum {
  NoRecordFound = "No record found",
  YourAPIUrlOrPathIsIncorrect = "Your API url or path is incorrect",
}

/**
 * No record found
 */
export class Etcer404ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Etcer404ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Etcer404ApplicationJSONErrorDescriptionEnum;
}

export enum Etcer401ApplicationJSONErrorEnum {
  InvalidAuthentication = "invalid_authentication",
  InvalidAuthorization = "invalid_authorization",
}

export enum Etcer401ApplicationJSONErrorDescriptionEnum {
  AuthenticationFailed = "Authentication failed",
  YouAreNotAuthorizedToUseThisAPI = "You are not authorized to use this API",
}

/**
 * Unauthorized access
 */
export class Etcer401ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Etcer401ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Etcer401ApplicationJSONErrorDescriptionEnum;
}

export enum Etcer400ApplicationJSONErrorEnum {
  MissingParameter = "missing_parameter",
  InvalidParameter = "invalid_parameter",
  InvalidFormat = "invalid_format",
  InvalidTxnid = "invalid_txnid",
  InvalidConsentid = "invalid_consentid",
}

export enum Etcer400ApplicationJSONErrorDescriptionEnum {
  PleaseProvideAllMandatoryParameters = "Please provide all mandatory parameters",
  BadRequest = "Bad request",
  TheFormatParameterIsInvalid = "The format parameter is invalid",
  TheTxnIdParameterMustBeInUUIDFormat = "The txnId parameter must be in UUID format",
  TheConsentIdParameterMustBeInUUIDFormat = "The consentId parameter must be in UUID format",
}

/**
 * Bad request
 */
export class Etcer400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Etcer400ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Etcer400ApplicationJSONErrorDescriptionEnum;
}

export class EtcerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Bad request
   */
  @SpeakeasyMetadata()
  etcer400ApplicationJSONObject?: Etcer400ApplicationJSON;

  /**
   * Unauthorized access
   */
  @SpeakeasyMetadata()
  etcer401ApplicationJSONObject?: Etcer401ApplicationJSON;

  /**
   * No record found
   */
  @SpeakeasyMetadata()
  etcer404ApplicationJSONObject?: Etcer404ApplicationJSON;

  /**
   * Internal server error
   */
  @SpeakeasyMetadata()
  etcer500ApplicationJSONObject?: Etcer500ApplicationJSON;

  /**
   * Bad gateway
   */
  @SpeakeasyMetadata()
  etcer502ApplicationJSONObject?: Etcer502ApplicationJSON;

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  etcer503ApplicationJSONObject?: Etcer503ApplicationJSON;

  /**
   * Gateway timeout
   */
  @SpeakeasyMetadata()
  etcer504ApplicationJSONObject?: Etcer504ApplicationJSON;
}
