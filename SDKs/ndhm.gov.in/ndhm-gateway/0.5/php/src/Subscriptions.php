<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Subscriptions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Request for subscription
     * 
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmInitJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmInitJsonResponse
     */
	public function postV05SubscriptionRequestsCmInitJson(
        \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmInitJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmInitJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/subscription-requests/cm/init');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscriptionRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmInitJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Request for subscription
     * 
     * creates a request for subscription. The subscription categories can be for care-contexts linkages or availability of data against existing care-contexts. Note that the requester must have HIU role
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmInitRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmInitRawResponse
     */
	public function postV05SubscriptionRequestsCmInitRaw(
        \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmInitRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmInitRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/subscription-requests/cm/init');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmInitRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * callback API for the /subscription-requests/cm/init to notify a HIU on acceptance/acknowledgement of the request for subscription.
     * 
     * This callback API acknowledges the request for subscription from a HIU, and sends back a "id" that will be used when the patient/user approves or denies the subscription. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmOnInitRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmOnInitResponse
     */
	public function postV05SubscriptionRequestsCmOnInit(
        \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmOnInitRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmOnInitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/subscription-requests/cm/on-init');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hiuSubscriptionRequestReceipt", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsCmOnInitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Notification for subscription grant/deny/revoke
     * 
     * This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuNotifyJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuNotifyJsonResponse
     */
	public function postV05SubscriptionRequestsHiuNotifyJson(
        \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuNotifyJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuNotifyJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/subscription-requests/hiu/notify');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscriptionApprovalNotification", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuNotifyJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Notification for subscription grant/deny/revoke
     * 
     * This API is used by CM to notify a HIU to grant or deny a request for subscription, and also to notify that in case an existing subscription is revoked or expired. For notifying that a particular subscription request was GRANTED or DENIED, the **subscriptionRequestId** is passed. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuNotifyRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuNotifyRawResponse
     */
	public function postV05SubscriptionRequestsHiuNotifyRaw(
        \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuNotifyRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuNotifyRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/subscription-requests/hiu/notify');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuNotifyRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Callback API for /subscription-requests/hiu/notify to acknowledge receipt of notification.
     * 
     * This API is called by HIU as acknowledgement to subscription request relevant notifications. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuOnNotifyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuOnNotifyResponse
     */
	public function postV05SubscriptionRequestsHiuOnNotify(
        \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuOnNotifyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuOnNotifyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/subscription-requests/hiu/on-notify');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hiuSubscriptionRequestNotificationAcknowledgement", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionRequestsHiuOnNotifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Notification to HIU on basis of a granted subscription
     * 
     * This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context. 
     * 1. if event.category = LINK, then only care-contexts are passed when new care-contexts are linked for patient. 
     * 2. If event.category = DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuNotifyJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuNotifyJsonResponse
     */
	public function postV05SubscriptionsHiuNotifyJson(
        \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuNotifyJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuNotifyJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/subscriptions/hiu/notify');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hiuSubscriptionNotification", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuNotifyJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Notification to HIU on basis of a granted subscription
     * 
     * This API is used by CM to notify a HIU for notification relevant to subscription. Notifications are sent to subscribed HIUs whenever a new care-context is linked or new data is available on an existing linked care-context. 
     * 1. if event.category = LINK, then only care-contexts are passed when new care-contexts are linked for patient. 
     * 2. If event.category = DATA, then hiTypes are passed. Care-context is passed only if the subscribed HIU has any valid consent for that care-context
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuNotifyRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuNotifyRawResponse
     */
	public function postV05SubscriptionsHiuNotifyRaw(
        \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuNotifyRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuNotifyRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/subscriptions/hiu/notify');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuNotifyRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification.
     * 
     * This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuOnNotifyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuOnNotifyResponse
     */
	public function postV05SubscriptionsHiuOnNotify(
        \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuOnNotifyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuOnNotifyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.5/subscriptions/hiu/on-notify');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hiuSubscriptionNotificationAcknowledgment", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV05SubscriptionsHiuOnNotifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}