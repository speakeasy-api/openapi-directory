/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Service that performs image detection and annotation for a batch of files. Now only "application/pdf", "image/tiff" and "image/gif" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.
   */
  visionProjectsLocationsFilesAnnotate(
    req: operations.VisionProjectsLocationsFilesAnnotateRequest,
    security: operations.VisionProjectsLocationsFilesAnnotateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VisionProjectsLocationsFilesAnnotateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VisionProjectsLocationsFilesAnnotateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1p1beta1/{parent}/files:annotate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudVisionV1p1beta1BatchAnnotateFilesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.VisionProjectsLocationsFilesAnnotateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VisionProjectsLocationsFilesAnnotateResponse =
        new operations.VisionProjectsLocationsFilesAnnotateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudVisionV1p1beta1BatchAnnotateFilesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudVisionV1p1beta1BatchAnnotateFilesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
   */
  visionProjectsLocationsFilesAsyncBatchAnnotate(
    req: operations.VisionProjectsLocationsFilesAsyncBatchAnnotateRequest,
    security: operations.VisionProjectsLocationsFilesAsyncBatchAnnotateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VisionProjectsLocationsFilesAsyncBatchAnnotateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VisionProjectsLocationsFilesAsyncBatchAnnotateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1p1beta1/{parent}/files:asyncBatchAnnotate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VisionProjectsLocationsFilesAsyncBatchAnnotateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VisionProjectsLocationsFilesAsyncBatchAnnotateResponse =
        new operations.VisionProjectsLocationsFilesAsyncBatchAnnotateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Run image detection and annotation for a batch of images.
   */
  visionProjectsLocationsImagesAnnotate(
    req: operations.VisionProjectsLocationsImagesAnnotateRequest,
    security: operations.VisionProjectsLocationsImagesAnnotateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VisionProjectsLocationsImagesAnnotateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VisionProjectsLocationsImagesAnnotateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1p1beta1/{parent}/images:annotate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudVisionV1p1beta1BatchAnnotateImagesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.VisionProjectsLocationsImagesAnnotateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VisionProjectsLocationsImagesAnnotateResponse =
        new operations.VisionProjectsLocationsImagesAnnotateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudVisionV1p1beta1BatchAnnotateImagesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudVisionV1p1beta1BatchAnnotateImagesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
   */
  visionProjectsLocationsImagesAsyncBatchAnnotate(
    req: operations.VisionProjectsLocationsImagesAsyncBatchAnnotateRequest,
    security: operations.VisionProjectsLocationsImagesAsyncBatchAnnotateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VisionProjectsLocationsImagesAsyncBatchAnnotateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VisionProjectsLocationsImagesAsyncBatchAnnotateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1p1beta1/{parent}/images:asyncBatchAnnotate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudVisionV1p1beta1AsyncBatchAnnotateImagesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VisionProjectsLocationsImagesAsyncBatchAnnotateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VisionProjectsLocationsImagesAsyncBatchAnnotateResponse =
        new operations.VisionProjectsLocationsImagesAsyncBatchAnnotateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
