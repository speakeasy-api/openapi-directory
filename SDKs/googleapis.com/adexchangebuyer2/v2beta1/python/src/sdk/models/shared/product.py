"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contactinformation as shared_contactinformation
from ..shared import dealterms as shared_dealterms
from ..shared import seller as shared_seller
from ..shared import targetingcriteria as shared_targetingcriteria
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProductSyndicationProductEnum(str, Enum):
    r"""The syndication product associated with the deal."""
    SYNDICATION_PRODUCT_UNSPECIFIED = 'SYNDICATION_PRODUCT_UNSPECIFIED'
    CONTENT = 'CONTENT'
    MOBILE = 'MOBILE'
    VIDEO = 'VIDEO'
    GAMES = 'GAMES'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Product:
    r"""A product is a segment of inventory that a seller wants to sell. It is associated with certain terms and targeting information which helps the buyer know more about the inventory."""
    
    available_end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableEndTime'), 'exclude': lambda f: f is None }})
    r"""The proposed end time for the deal. The field will be truncated to the order of seconds during serving."""  
    available_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableStartTime'), 'exclude': lambda f: f is None }})
    r"""Inventory availability dates. The start time will be truncated to seconds during serving. Thus, a field specified as 3:23:34.456 (HH:mm:ss.SSS) will be truncated to 3:23:34 when serving."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Creation time."""  
    creator_contacts: Optional[list[shared_contactinformation.ContactInformation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorContacts'), 'exclude': lambda f: f is None }})
    r"""Optional contact information for the creator of this product."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name for this product as set by the seller."""  
    has_creator_signed_off: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasCreatorSignedOff'), 'exclude': lambda f: f is None }})
    r"""If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false."""  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId'), 'exclude': lambda f: f is None }})
    r"""The unique ID for the product."""  
    product_revision: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productRevision'), 'exclude': lambda f: f is None }})
    r"""The revision number of the product (auto-assigned by Marketplace)."""  
    publisher_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherProfileId'), 'exclude': lambda f: f is None }})
    r"""An ID which can be used by the Publisher Profile API to get more information about the seller that created this product."""  
    seller: Optional[shared_seller.Seller] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller'), 'exclude': lambda f: f is None }})
    r"""Represents a seller of inventory. Each seller is identified by a unique Ad Manager account ID."""  
    syndication_product: Optional[ProductSyndicationProductEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syndicationProduct'), 'exclude': lambda f: f is None }})
    r"""The syndication product associated with the deal."""  
    targeting_criterion: Optional[list[shared_targetingcriteria.TargetingCriteria]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetingCriterion'), 'exclude': lambda f: f is None }})
    r"""Targeting that is shared between the buyer and the seller. Each targeting criterion has a specified key and for each key there is a list of inclusion value or exclusion values."""  
    terms: Optional[shared_dealterms.DealTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('terms'), 'exclude': lambda f: f is None }})
    r"""The deal terms specify the details of a Product/deal. They specify things like price per buyer, the type of pricing model (for example, fixed price, auction) and expected impressions from the publisher."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Time of last update."""  
    web_property_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webPropertyCode'), 'exclude': lambda f: f is None }})
    r"""The web-property code for the seller. This needs to be copied as is when adding a new deal to a proposal."""  
    