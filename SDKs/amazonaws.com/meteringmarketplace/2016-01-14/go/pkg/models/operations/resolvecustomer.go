// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ResolveCustomerXAmzTargetEnum
type ResolveCustomerXAmzTargetEnum string

const (
	ResolveCustomerXAmzTargetEnumAwsmpMeteringServiceResolveCustomer ResolveCustomerXAmzTargetEnum = "AWSMPMeteringService.ResolveCustomer"
)

func (e *ResolveCustomerXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSMPMeteringService.ResolveCustomer":
		*e = ResolveCustomerXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ResolveCustomerXAmzTargetEnum: %s", s)
	}
}

type ResolveCustomerHeaders struct {
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ResolveCustomerXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ResolveCustomerRequest struct {
	Headers ResolveCustomerHeaders
	Request shared.ResolveCustomerRequest `request:"mediaType=application/json"`
}

type ResolveCustomerResponse struct {
	ContentType string
	// DisabledApiException
	DisabledAPIException interface{}
	// ExpiredTokenException
	ExpiredTokenException interface{}
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidTokenException
	InvalidTokenException interface{}
	// Success
	ResolveCustomerResult *shared.ResolveCustomerResult
	StatusCode            int
	RawResponse           *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
