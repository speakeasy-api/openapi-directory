/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NonComplianceDetailCondition - A compliance rule condition which is satisfied if there exists any matching NonComplianceDetail for the device. A NonComplianceDetail matches a NonComplianceDetailCondition if all the fields which are set within the NonComplianceDetailCondition match the corresponding NonComplianceDetail fields.
 */
public class NonComplianceDetailCondition {
    /**
     * The reason the device is not in compliance with the setting. If not set, then this condition matches any reason.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonComplianceReason")
    public NonComplianceDetailConditionNonComplianceReasonEnum nonComplianceReason;

    public NonComplianceDetailCondition withNonComplianceReason(NonComplianceDetailConditionNonComplianceReasonEnum nonComplianceReason) {
        this.nonComplianceReason = nonComplianceReason;
        return this;
    }
    
    /**
     * The package name of the app that's out of compliance. If not set, then this condition matches any package name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("packageName")
    public String packageName;

    public NonComplianceDetailCondition withPackageName(String packageName) {
        this.packageName = packageName;
        return this;
    }
    
    /**
     * The name of the policy setting. This is the JSON field name of a top-level Policy field. If not set, then this condition matches any setting name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settingName")
    public String settingName;

    public NonComplianceDetailCondition withSettingName(String settingName) {
        this.settingName = settingName;
        return this;
    }
    
    public NonComplianceDetailCondition(){}
}
