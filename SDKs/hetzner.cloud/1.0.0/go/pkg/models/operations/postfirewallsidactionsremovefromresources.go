// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostFirewallsIDActionsRemoveFromResourcesPathParams struct {
	// ID of the Firewall
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesLabelSelector - Configuration for type label_selector, required if type is `label_selector`
type PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

// PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesServer - Configuration for type server, required if type is `server`
type PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

// PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesTypeEnum - Type of the resource
type PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesTypeEnum string

const (
	PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesTypeEnumServer        PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesTypeEnum = "server"
	PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesTypeEnumLabelSelector PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesTypeEnum = "label_selector"
)

func (e *PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		fallthrough
	case "label_selector":
		*e = PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesTypeEnum: %s", s)
	}
}

type PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResources struct {
	// Configuration for type label_selector, required if type is `label_selector`
	LabelSelector *PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesLabelSelector `json:"label_selector,omitempty"`
	// Configuration for type server, required if type is `server`
	Server *PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesServer `json:"server,omitempty"`
	// Type of the resource
	Type *PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResourcesTypeEnum `json:"type,omitempty"`
}

type PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequest struct {
	// Resources the Firewall should be removed from
	RemoveFrom []PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequestFirewallRemoveFromResources `json:"remove_from"`
}

type PostFirewallsIDActionsRemoveFromResourcesRequest struct {
	PathParams PostFirewallsIDActionsRemoveFromResourcesPathParams
	Request    *PostFirewallsIDActionsRemoveFromResourcesRemoveFromResourcesRequest `request:"mediaType=application/json"`
}

// PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionError - Error message for the Action if error occurred, otherwise null
type PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnum - Status of the Action
type PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnum string

const (
	PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnumSuccess PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnum = "success"
	PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnumRunning PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnum = "running"
	PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnumError   PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnum = "error"
)

func (e *PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnum: %s", s)
	}
}

type PostFirewallsIDActionsRemoveFromResourcesActionsResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostFirewallsIDActionsRemoveFromResourcesActionsResponseActionStatusEnum `json:"status"`
}

type PostFirewallsIDActionsRemoveFromResourcesActionsResponseMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type PostFirewallsIDActionsRemoveFromResourcesActionsResponseMeta struct {
	Pagination PostFirewallsIDActionsRemoveFromResourcesActionsResponseMetaPagination `json:"pagination"`
}

// PostFirewallsIDActionsRemoveFromResourcesActionsResponse - The `actions` key contains multiple `remove_firewall` Actions
type PostFirewallsIDActionsRemoveFromResourcesActionsResponse struct {
	Actions []PostFirewallsIDActionsRemoveFromResourcesActionsResponseAction `json:"actions"`
	Meta    *PostFirewallsIDActionsRemoveFromResourcesActionsResponseMeta    `json:"meta,omitempty"`
}

type PostFirewallsIDActionsRemoveFromResourcesResponse struct {
	// The `actions` key contains multiple `remove_firewall` Actions
	ActionsResponse *PostFirewallsIDActionsRemoveFromResourcesActionsResponse
	ContentType     string
	StatusCode      int
	RawResponse     *http.Response
}
