// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDVatDeclarationsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum) ToPointer() *PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum {
	return &e
}

func (e *PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum: %v", v)
	}
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2Accounting struct {
	AccountedOn *string                                                                          `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                          `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2 struct {
	Accounting      *PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2Accounting `json:"Accounting,omitempty"`
	Author          *string                                                              `json:"Author,omitempty"`
	Begin           *string                                                              `json:"Begin,omitempty"`
	Code            *string                                                              `json:"Code,omitempty"`
	CollectedVAT    *float32                                                             `json:"CollectedVAT,omitempty"`
	Comment         *string                                                              `json:"Comment,omitempty"`
	CreditVAT       *float32                                                             `json:"CreditVAT,omitempty"`
	Date            *string                                                              `json:"Date,omitempty"`
	DeductibleVAT   *float32                                                             `json:"DeductibleVAT,omitempty"`
	End             string                                                               `json:"End"`
	ExemptTurnover  *float32                                                             `json:"ExemptTurnover,omitempty"`
	File            PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2File        `json:"File"`
	Number          *string                                                              `json:"Number,omitempty"`
	PayableVAT      *float32                                                             `json:"PayableVAT,omitempty"`
	TaxableTurnover *float32                                                             `json:"TaxableTurnover,omitempty"`
	Title           string                                                               `json:"Title"`
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1 struct {
	Begin           *string  `json:"Begin,omitempty"`
	CollectedVAT    *float32 `json:"CollectedVAT,omitempty"`
	CreditVAT       *float32 `json:"CreditVAT,omitempty"`
	DeductibleVAT   *float32 `json:"DeductibleVAT,omitempty"`
	DocumentID      string   `json:"DocumentId"`
	End             string   `json:"End"`
	ExemptTurnover  *float32 `json:"ExemptTurnover,omitempty"`
	Number          *string  `json:"Number,omitempty"`
	PayableVAT      *float32 `json:"PayableVAT,omitempty"`
	TaxableTurnover *float32 `json:"TaxableTurnover,omitempty"`
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1 PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/vat-declarations_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2 PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/vat-declarations_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1 *PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1
	PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2 *PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONPostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1(postSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1 PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1) PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1

	return PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON{
		PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1: &postSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONPostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2(postSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2 PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2) PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2

	return PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON{
		PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2: &postSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1 = postSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2 = postSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSONTypePostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsJSONRequest struct {
	// VATDeclaration to add (either (DocumentId,End) either (File,Name,Content64Encoded,Title,End) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDVatDeclarationsApplicationJSON `request:"mediaType=application/json"`
	// Id of the folder result and taxation
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDVatDeclarationsJSON201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDVatDeclarationsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDVatDeclarationsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDVatDeclarationsJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDVatDeclarationsJSON201ApplicationJSON
}
