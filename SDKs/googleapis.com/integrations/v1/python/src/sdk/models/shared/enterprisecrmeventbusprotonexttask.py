"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enterprisecrmeventbusprotocombinedcondition as shared_enterprisecrmeventbusprotocombinedcondition
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmEventbusProtoNextTask:
    r"""The task that is next in line to be executed, if the condition specified evaluated to true."""
    
    combined_conditions: Optional[list[shared_enterprisecrmeventbusprotocombinedcondition.EnterpriseCrmEventbusProtoCombinedCondition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('combinedConditions'), 'exclude': lambda f: f is None }})
    r"""Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`"""  
    condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('condition'), 'exclude': lambda f: f is None }})
    r"""Standard filter expression for this task to become an eligible next task."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""User-provided description intended to give more business context about the next task edge or condition."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""User-provided label that is attached to this edge in the UI."""  
    task_config_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskConfigId'), 'exclude': lambda f: f is None }})
    r"""ID of the next task."""  
    task_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskNumber'), 'exclude': lambda f: f is None }})
    r"""Task number of the next task."""  
    