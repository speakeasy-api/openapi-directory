// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ParkingElectricCarChargingStationsExceptionEnum - Electric car charging stations exception.
type ParkingElectricCarChargingStationsExceptionEnum string

const (
	ParkingElectricCarChargingStationsExceptionEnumExceptionUnspecified ParkingElectricCarChargingStationsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ParkingElectricCarChargingStationsExceptionEnumUnderConstruction    ParkingElectricCarChargingStationsExceptionEnum = "UNDER_CONSTRUCTION"
	ParkingElectricCarChargingStationsExceptionEnumDependentOnSeason    ParkingElectricCarChargingStationsExceptionEnum = "DEPENDENT_ON_SEASON"
	ParkingElectricCarChargingStationsExceptionEnumDependentOnDayOfWeek ParkingElectricCarChargingStationsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ParkingElectricCarChargingStationsExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ParkingElectricCarChargingStationsExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParkingElectricCarChargingStationsExceptionEnum: %s", s)
	}
}

// ParkingFreeParkingExceptionEnum - Free parking exception.
type ParkingFreeParkingExceptionEnum string

const (
	ParkingFreeParkingExceptionEnumExceptionUnspecified ParkingFreeParkingExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ParkingFreeParkingExceptionEnumUnderConstruction    ParkingFreeParkingExceptionEnum = "UNDER_CONSTRUCTION"
	ParkingFreeParkingExceptionEnumDependentOnSeason    ParkingFreeParkingExceptionEnum = "DEPENDENT_ON_SEASON"
	ParkingFreeParkingExceptionEnumDependentOnDayOfWeek ParkingFreeParkingExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ParkingFreeParkingExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ParkingFreeParkingExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParkingFreeParkingExceptionEnum: %s", s)
	}
}

// ParkingFreeSelfParkingExceptionEnum - Free self parking exception.
type ParkingFreeSelfParkingExceptionEnum string

const (
	ParkingFreeSelfParkingExceptionEnumExceptionUnspecified ParkingFreeSelfParkingExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ParkingFreeSelfParkingExceptionEnumUnderConstruction    ParkingFreeSelfParkingExceptionEnum = "UNDER_CONSTRUCTION"
	ParkingFreeSelfParkingExceptionEnumDependentOnSeason    ParkingFreeSelfParkingExceptionEnum = "DEPENDENT_ON_SEASON"
	ParkingFreeSelfParkingExceptionEnumDependentOnDayOfWeek ParkingFreeSelfParkingExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ParkingFreeSelfParkingExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ParkingFreeSelfParkingExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParkingFreeSelfParkingExceptionEnum: %s", s)
	}
}

// ParkingFreeValetParkingExceptionEnum - Free valet parking exception.
type ParkingFreeValetParkingExceptionEnum string

const (
	ParkingFreeValetParkingExceptionEnumExceptionUnspecified ParkingFreeValetParkingExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ParkingFreeValetParkingExceptionEnumUnderConstruction    ParkingFreeValetParkingExceptionEnum = "UNDER_CONSTRUCTION"
	ParkingFreeValetParkingExceptionEnumDependentOnSeason    ParkingFreeValetParkingExceptionEnum = "DEPENDENT_ON_SEASON"
	ParkingFreeValetParkingExceptionEnumDependentOnDayOfWeek ParkingFreeValetParkingExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ParkingFreeValetParkingExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ParkingFreeValetParkingExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParkingFreeValetParkingExceptionEnum: %s", s)
	}
}

// ParkingParkingAvailableExceptionEnum - Parking available exception.
type ParkingParkingAvailableExceptionEnum string

const (
	ParkingParkingAvailableExceptionEnumExceptionUnspecified ParkingParkingAvailableExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ParkingParkingAvailableExceptionEnumUnderConstruction    ParkingParkingAvailableExceptionEnum = "UNDER_CONSTRUCTION"
	ParkingParkingAvailableExceptionEnumDependentOnSeason    ParkingParkingAvailableExceptionEnum = "DEPENDENT_ON_SEASON"
	ParkingParkingAvailableExceptionEnumDependentOnDayOfWeek ParkingParkingAvailableExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ParkingParkingAvailableExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ParkingParkingAvailableExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParkingParkingAvailableExceptionEnum: %s", s)
	}
}

// ParkingSelfParkingAvailableExceptionEnum - Self parking available exception.
type ParkingSelfParkingAvailableExceptionEnum string

const (
	ParkingSelfParkingAvailableExceptionEnumExceptionUnspecified ParkingSelfParkingAvailableExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ParkingSelfParkingAvailableExceptionEnumUnderConstruction    ParkingSelfParkingAvailableExceptionEnum = "UNDER_CONSTRUCTION"
	ParkingSelfParkingAvailableExceptionEnumDependentOnSeason    ParkingSelfParkingAvailableExceptionEnum = "DEPENDENT_ON_SEASON"
	ParkingSelfParkingAvailableExceptionEnumDependentOnDayOfWeek ParkingSelfParkingAvailableExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ParkingSelfParkingAvailableExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ParkingSelfParkingAvailableExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParkingSelfParkingAvailableExceptionEnum: %s", s)
	}
}

// ParkingValetParkingAvailableExceptionEnum - Valet parking available exception.
type ParkingValetParkingAvailableExceptionEnum string

const (
	ParkingValetParkingAvailableExceptionEnumExceptionUnspecified ParkingValetParkingAvailableExceptionEnum = "EXCEPTION_UNSPECIFIED"
	ParkingValetParkingAvailableExceptionEnumUnderConstruction    ParkingValetParkingAvailableExceptionEnum = "UNDER_CONSTRUCTION"
	ParkingValetParkingAvailableExceptionEnumDependentOnSeason    ParkingValetParkingAvailableExceptionEnum = "DEPENDENT_ON_SEASON"
	ParkingValetParkingAvailableExceptionEnumDependentOnDayOfWeek ParkingValetParkingAvailableExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *ParkingValetParkingAvailableExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = ParkingValetParkingAvailableExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParkingValetParkingAvailableExceptionEnum: %s", s)
	}
}

// Parking - Parking options at the property.
type Parking struct {
	// Electric car charging stations. Electric power stations, usually located outdoors, into which guests plug their electric cars to receive a charge.
	ElectricCarChargingStations *bool `json:"electricCarChargingStations,omitempty"`
	// Electric car charging stations exception.
	ElectricCarChargingStationsException *ParkingElectricCarChargingStationsExceptionEnum `json:"electricCarChargingStationsException,omitempty"`
	// Free parking. The hotel allows the cars of guests to be parked for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff. Free parking must be available to all guests (limited conditions does not apply).
	FreeParking *bool `json:"freeParking,omitempty"`
	// Free parking exception.
	FreeParkingException *ParkingFreeParkingExceptionEnum `json:"freeParkingException,omitempty"`
	// Free self parking. Guests park their own cars for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply.
	FreeSelfParking *bool `json:"freeSelfParking,omitempty"`
	// Free self parking exception.
	FreeSelfParkingException *ParkingFreeSelfParkingExceptionEnum `json:"freeSelfParkingException,omitempty"`
	// Free valet parking. Hotel staff member parks the cars of guests. Parking with this service is free.
	FreeValetParking *bool `json:"freeValetParking,omitempty"`
	// Free valet parking exception.
	FreeValetParkingException *ParkingFreeValetParkingExceptionEnum `json:"freeValetParkingException,omitempty"`
	// Parking available. The hotel allows the cars of guests to be parked. Can be free or for a fee. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff.
	ParkingAvailable *bool `json:"parkingAvailable,omitempty"`
	// Parking available exception.
	ParkingAvailableException *ParkingParkingAvailableExceptionEnum `json:"parkingAvailableException,omitempty"`
	// Self parking available. Guests park their own cars. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Can be free or for a fee.
	SelfParkingAvailable *bool `json:"selfParkingAvailable,omitempty"`
	// Self parking available exception.
	SelfParkingAvailableException *ParkingSelfParkingAvailableExceptionEnum `json:"selfParkingAvailableException,omitempty"`
	// Valet parking available. Hotel staff member parks the cars of guests. Parking with this service can be free or for a fee.
	ValetParkingAvailable *bool `json:"valetParkingAvailable,omitempty"`
	// Valet parking available exception.
	ValetParkingAvailableException *ParkingValetParkingAvailableExceptionEnum `json:"valetParkingAvailableException,omitempty"`
}
