// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateDirectoryConfigXAmzTargetEnum
type UpdateDirectoryConfigXAmzTargetEnum string

const (
	UpdateDirectoryConfigXAmzTargetEnumPhotonAdminProxyServiceUpdateDirectoryConfig UpdateDirectoryConfigXAmzTargetEnum = "PhotonAdminProxyService.UpdateDirectoryConfig"
)

func (e UpdateDirectoryConfigXAmzTargetEnum) ToPointer() *UpdateDirectoryConfigXAmzTargetEnum {
	return &e
}

func (e *UpdateDirectoryConfigXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PhotonAdminProxyService.UpdateDirectoryConfig":
		*e = UpdateDirectoryConfigXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDirectoryConfigXAmzTargetEnum: %v", v)
	}
}

type UpdateDirectoryConfigRequest struct {
	UpdateDirectoryConfigRequest shared.UpdateDirectoryConfigRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256            *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential               *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                     *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken            *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders            *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                   UpdateDirectoryConfigXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateDirectoryConfigResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// InvalidRoleException
	InvalidRoleException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	UpdateDirectoryConfigResult *shared.UpdateDirectoryConfigResult
}
