/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Instance - A Filestore instance.
 */
public class Instance {
    /**
     * The storage capacity of the instance in gigabytes (GB = 1024^3 bytes). This capacity can be increased up to `max_capacity_gb` GB in multipliers of `capacity_step_size_gb` GB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capacityGb")
    public String capacityGb;

    public Instance withCapacityGb(String capacityGb) {
        this.capacityGb = capacityGb;
        return this;
    }
    
    /**
     * Output only. The increase/decrease capacity step size.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capacityStepSizeGb")
    public String capacityStepSizeGb;

    public Instance withCapacityStepSizeGb(String capacityStepSizeGb) {
        this.capacityStepSizeGb = capacityStepSizeGb;
        return this;
    }
    
    /**
     * Output only. The time when the instance was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public Instance withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * The description of the instance (2048 characters or less).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Instance withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Directory Services configuration for Kerberos-based authentication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directoryServices")
    public DirectoryServicesConfig directoryServices;

    public Instance withDirectoryServices(DirectoryServicesConfig directoryServices) {
        this.directoryServices = directoryServices;
        return this;
    }
    
    /**
     * Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public Instance withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * File system shares on the instance. For this version, only a single file share is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileShares")
    public FileShareConfig[] fileShares;

    public Instance withFileShares(FileShareConfig[] fileShares) {
        this.fileShares = fileShares;
        return this;
    }
    
    /**
     * KMS key name used for data encryption.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kmsKeyName")
    public String kmsKeyName;

    public Instance withKmsKeyName(String kmsKeyName) {
        this.kmsKeyName = kmsKeyName;
        return this;
    }
    
    /**
     * Resource labels to represent user provided metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public Instance withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Output only. The max capacity of the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxCapacityGb")
    public String maxCapacityGb;

    public Instance withMaxCapacityGb(String maxCapacityGb) {
        this.maxCapacityGb = maxCapacityGb;
        return this;
    }
    
    /**
     * The max number of shares allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxShareCount")
    public String maxShareCount;

    public Instance withMaxShareCount(String maxShareCount) {
        this.maxShareCount = maxShareCount;
        return this;
    }
    
    /**
     * Indicates whether this instance uses a multi-share configuration with which it can have more than one file-share or none at all. File-shares are added, updated and removed through the separate file-share APIs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multiShareEnabled")
    public Boolean multiShareEnabled;

    public Instance withMultiShareEnabled(Boolean multiShareEnabled) {
        this.multiShareEnabled = multiShareEnabled;
        return this;
    }
    
    /**
     * Output only. The resource name of the instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Instance withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * VPC networks to which the instance is connected. For this version, only a single network is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networks")
    public NetworkConfig[] networks;

    public Instance withNetworks(NetworkConfig[] networks) {
        this.networks = networks;
        return this;
    }
    
    /**
     * Immutable. The protocol indicates the access protocol for all shares in the instance. This field is immutable and it cannot be changed after the instance has been created. Default value: `NFS_V3`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public InstanceProtocolEnum protocol;

    public Instance withProtocol(InstanceProtocolEnum protocol) {
        this.protocol = protocol;
        return this;
    }
    
    /**
     * Output only. Reserved for future use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("satisfiesPzs")
    public Boolean satisfiesPzs;

    public Instance withSatisfiesPzs(Boolean satisfiesPzs) {
        this.satisfiesPzs = satisfiesPzs;
        return this;
    }
    
    /**
     * Output only. The instance state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public InstanceStateEnum state;

    public Instance withState(InstanceStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Additional information about the instance state, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusMessage")
    public String statusMessage;

    public Instance withStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
        return this;
    }
    
    /**
     * Output only. Field indicates all the reasons the instance is in "SUSPENDED" state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suspensionReasons")
    public InstanceSuspensionReasonsEnum[] suspensionReasons;

    public Instance withSuspensionReasons(InstanceSuspensionReasonsEnum[] suspensionReasons) {
        this.suspensionReasons = suspensionReasons;
        return this;
    }
    
    /**
     * The service tier of the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tier")
    public InstanceTierEnum tier;

    public Instance withTier(InstanceTierEnum tier) {
        this.tier = tier;
        return this;
    }
    
    public Instance(){}
}
