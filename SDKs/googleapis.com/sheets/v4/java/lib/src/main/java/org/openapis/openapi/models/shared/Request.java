/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Request - A single kind of update to apply to a spreadsheet.
 */
public class Request {
    /**
     * Adds a new banded range to the spreadsheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addBanding")
    public AddBandingRequest addBanding;

    public Request withAddBanding(AddBandingRequest addBanding) {
        this.addBanding = addBanding;
        return this;
    }
    
    /**
     * Adds a chart to a sheet in the spreadsheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addChart")
    public AddChartRequest addChart;

    public Request withAddChart(AddChartRequest addChart) {
        this.addChart = addChart;
        return this;
    }
    
    /**
     * Adds a new conditional format rule at the given index. All subsequent rules' indexes are incremented.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addConditionalFormatRule")
    public AddConditionalFormatRuleRequest addConditionalFormatRule;

    public Request withAddConditionalFormatRule(AddConditionalFormatRuleRequest addConditionalFormatRule) {
        this.addConditionalFormatRule = addConditionalFormatRule;
        return this;
    }
    
    /**
     * Adds a data source. After the data source is added successfully, an associated DATA_SOURCE sheet is created and an execution is triggered to refresh the sheet to read data from the data source. The request requires an additional `bigquery.readonly` OAuth scope.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addDataSource")
    public AddDataSourceRequest addDataSource;

    public Request withAddDataSource(AddDataSourceRequest addDataSource) {
        this.addDataSource = addDataSource;
        return this;
    }
    
    /**
     * Creates a group over the specified range. If the requested range is a superset of the range of an existing group G, then the depth of G is incremented and this new group G' has the depth of that group. For example, a group [C:D, depth 1] + [B:E] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range is a subset of the range of an existing group G, then the depth of the new group G' becomes one greater than the depth of G. For example, a group [B:E, depth 1] + [C:D] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range starts before and ends within, or starts within and ends after, the range of an existing group G, then the range of the existing group G becomes the union of the ranges, and the new group G' has depth one greater than the depth of G and range as the intersection of the ranges. For example, a group [B:D, depth 1] + [C:E] results in groups [B:E, depth 1] and [C:D, depth 2].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addDimensionGroup")
    public AddDimensionGroupRequest addDimensionGroup;

    public Request withAddDimensionGroup(AddDimensionGroupRequest addDimensionGroup) {
        this.addDimensionGroup = addDimensionGroup;
        return this;
    }
    
    /**
     * Adds a filter view.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addFilterView")
    public AddFilterViewRequest addFilterView;

    public Request withAddFilterView(AddFilterViewRequest addFilterView) {
        this.addFilterView = addFilterView;
        return this;
    }
    
    /**
     * Adds a named range to the spreadsheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addNamedRange")
    public AddNamedRangeRequest addNamedRange;

    public Request withAddNamedRange(AddNamedRangeRequest addNamedRange) {
        this.addNamedRange = addNamedRange;
        return this;
    }
    
    /**
     * Adds a new protected range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addProtectedRange")
    public AddProtectedRangeRequest addProtectedRange;

    public Request withAddProtectedRange(AddProtectedRangeRequest addProtectedRange) {
        this.addProtectedRange = addProtectedRange;
        return this;
    }
    
    /**
     * Adds a new sheet. When a sheet is added at a given index, all subsequent sheets' indexes are incremented. To add an object sheet, use AddChartRequest instead and specify EmbeddedObjectPosition.sheetId or EmbeddedObjectPosition.newSheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addSheet")
    public AddSheetRequest addSheet;

    public Request withAddSheet(AddSheetRequest addSheet) {
        this.addSheet = addSheet;
        return this;
    }
    
    /**
     * Adds a slicer to a sheet in the spreadsheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addSlicer")
    public AddSlicerRequest addSlicer;

    public Request withAddSlicer(AddSlicerRequest addSlicer) {
        this.addSlicer = addSlicer;
        return this;
    }
    
    /**
     * Adds new cells after the last row with data in a sheet, inserting new rows into the sheet if necessary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appendCells")
    public AppendCellsRequest appendCells;

    public Request withAppendCells(AppendCellsRequest appendCells) {
        this.appendCells = appendCells;
        return this;
    }
    
    /**
     * Appends rows or columns to the end of a sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appendDimension")
    public AppendDimensionRequest appendDimension;

    public Request withAppendDimension(AppendDimensionRequest appendDimension) {
        this.appendDimension = appendDimension;
        return this;
    }
    
    /**
     * Fills in more data based on existing data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoFill")
    public AutoFillRequest autoFill;

    public Request withAutoFill(AutoFillRequest autoFill) {
        this.autoFill = autoFill;
        return this;
    }
    
    /**
     * Automatically resizes one or more dimensions based on the contents of the cells in that dimension.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoResizeDimensions")
    public AutoResizeDimensionsRequest autoResizeDimensions;

    public Request withAutoResizeDimensions(AutoResizeDimensionsRequest autoResizeDimensions) {
        this.autoResizeDimensions = autoResizeDimensions;
        return this;
    }
    
    /**
     * Clears the basic filter, if any exists on the sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clearBasicFilter")
    public ClearBasicFilterRequest clearBasicFilter;

    public Request withClearBasicFilter(ClearBasicFilterRequest clearBasicFilter) {
        this.clearBasicFilter = clearBasicFilter;
        return this;
    }
    
    /**
     * Copies data from the source to the destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("copyPaste")
    public CopyPasteRequest copyPaste;

    public Request withCopyPaste(CopyPasteRequest copyPaste) {
        this.copyPaste = copyPaste;
        return this;
    }
    
    /**
     * A request to create developer metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createDeveloperMetadata")
    public CreateDeveloperMetadataRequest createDeveloperMetadata;

    public Request withCreateDeveloperMetadata(CreateDeveloperMetadataRequest createDeveloperMetadata) {
        this.createDeveloperMetadata = createDeveloperMetadata;
        return this;
    }
    
    /**
     * Moves data from the source to the destination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cutPaste")
    public CutPasteRequest cutPaste;

    public Request withCutPaste(CutPasteRequest cutPaste) {
        this.cutPaste = cutPaste;
        return this;
    }
    
    /**
     * Removes the banded range with the given ID from the spreadsheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteBanding")
    public DeleteBandingRequest deleteBanding;

    public Request withDeleteBanding(DeleteBandingRequest deleteBanding) {
        this.deleteBanding = deleteBanding;
        return this;
    }
    
    /**
     * Deletes a conditional format rule at the given index. All subsequent rules' indexes are decremented.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteConditionalFormatRule")
    public DeleteConditionalFormatRuleRequest deleteConditionalFormatRule;

    public Request withDeleteConditionalFormatRule(DeleteConditionalFormatRuleRequest deleteConditionalFormatRule) {
        this.deleteConditionalFormatRule = deleteConditionalFormatRule;
        return this;
    }
    
    /**
     * Deletes a data source. The request also deletes the associated data source sheet, and unlinks all associated data source objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteDataSource")
    public DeleteDataSourceRequest deleteDataSource;

    public Request withDeleteDataSource(DeleteDataSourceRequest deleteDataSource) {
        this.deleteDataSource = deleteDataSource;
        return this;
    }
    
    /**
     * A request to delete developer metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteDeveloperMetadata")
    public DeleteDeveloperMetadataRequest deleteDeveloperMetadata;

    public Request withDeleteDeveloperMetadata(DeleteDeveloperMetadataRequest deleteDeveloperMetadata) {
        this.deleteDeveloperMetadata = deleteDeveloperMetadata;
        return this;
    }
    
    /**
     * Deletes the dimensions from the sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteDimension")
    public DeleteDimensionRequest deleteDimension;

    public Request withDeleteDimension(DeleteDimensionRequest deleteDimension) {
        this.deleteDimension = deleteDimension;
        return this;
    }
    
    /**
     * Deletes a group over the specified range by decrementing the depth of the dimensions in the range. For example, assume the sheet has a depth-1 group over B:E and a depth-2 group over C:D. Deleting a group over D:E leaves the sheet with a depth-1 group over B:D and a depth-2 group over C:C.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteDimensionGroup")
    public DeleteDimensionGroupRequest deleteDimensionGroup;

    public Request withDeleteDimensionGroup(DeleteDimensionGroupRequest deleteDimensionGroup) {
        this.deleteDimensionGroup = deleteDimensionGroup;
        return this;
    }
    
    /**
     * Removes rows within this range that contain values in the specified columns that are duplicates of values in any previous row. Rows with identical values but different letter cases, formatting, or formulas are considered to be duplicates. This request also removes duplicate rows hidden from view (for example, due to a filter). When removing duplicates, the first instance of each duplicate row scanning from the top downwards is kept in the resulting range. Content outside of the specified range isn't removed, and rows considered duplicates do not have to be adjacent to each other in the range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteDuplicates")
    public DeleteDuplicatesRequest deleteDuplicates;

    public Request withDeleteDuplicates(DeleteDuplicatesRequest deleteDuplicates) {
        this.deleteDuplicates = deleteDuplicates;
        return this;
    }
    
    /**
     * Deletes the embedded object with the given ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteEmbeddedObject")
    public DeleteEmbeddedObjectRequest deleteEmbeddedObject;

    public Request withDeleteEmbeddedObject(DeleteEmbeddedObjectRequest deleteEmbeddedObject) {
        this.deleteEmbeddedObject = deleteEmbeddedObject;
        return this;
    }
    
    /**
     * Deletes a particular filter view.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteFilterView")
    public DeleteFilterViewRequest deleteFilterView;

    public Request withDeleteFilterView(DeleteFilterViewRequest deleteFilterView) {
        this.deleteFilterView = deleteFilterView;
        return this;
    }
    
    /**
     * Removes the named range with the given ID from the spreadsheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteNamedRange")
    public DeleteNamedRangeRequest deleteNamedRange;

    public Request withDeleteNamedRange(DeleteNamedRangeRequest deleteNamedRange) {
        this.deleteNamedRange = deleteNamedRange;
        return this;
    }
    
    /**
     * Deletes the protected range with the given ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteProtectedRange")
    public DeleteProtectedRangeRequest deleteProtectedRange;

    public Request withDeleteProtectedRange(DeleteProtectedRangeRequest deleteProtectedRange) {
        this.deleteProtectedRange = deleteProtectedRange;
        return this;
    }
    
    /**
     * Deletes a range of cells, shifting other cells into the deleted area.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteRange")
    public DeleteRangeRequest deleteRange;

    public Request withDeleteRange(DeleteRangeRequest deleteRange) {
        this.deleteRange = deleteRange;
        return this;
    }
    
    /**
     * Deletes the requested sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteSheet")
    public DeleteSheetRequest deleteSheet;

    public Request withDeleteSheet(DeleteSheetRequest deleteSheet) {
        this.deleteSheet = deleteSheet;
        return this;
    }
    
    /**
     * Duplicates a particular filter view.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duplicateFilterView")
    public DuplicateFilterViewRequest duplicateFilterView;

    public Request withDuplicateFilterView(DuplicateFilterViewRequest duplicateFilterView) {
        this.duplicateFilterView = duplicateFilterView;
        return this;
    }
    
    /**
     * Duplicates the contents of a sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duplicateSheet")
    public DuplicateSheetRequest duplicateSheet;

    public Request withDuplicateSheet(DuplicateSheetRequest duplicateSheet) {
        this.duplicateSheet = duplicateSheet;
        return this;
    }
    
    /**
     * Finds and replaces data in cells over a range, sheet, or all sheets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("findReplace")
    public FindReplaceRequest findReplace;

    public Request withFindReplace(FindReplaceRequest findReplace) {
        this.findReplace = findReplace;
        return this;
    }
    
    /**
     * Inserts rows or columns in a sheet at a particular index.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertDimension")
    public InsertDimensionRequest insertDimension;

    public Request withInsertDimension(InsertDimensionRequest insertDimension) {
        this.insertDimension = insertDimension;
        return this;
    }
    
    /**
     * Inserts cells into a range, shifting the existing cells over or down.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertRange")
    public InsertRangeRequest insertRange;

    public Request withInsertRange(InsertRangeRequest insertRange) {
        this.insertRange = insertRange;
        return this;
    }
    
    /**
     * Merges all cells in the range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mergeCells")
    public MergeCellsRequest mergeCells;

    public Request withMergeCells(MergeCellsRequest mergeCells) {
        this.mergeCells = mergeCells;
        return this;
    }
    
    /**
     * Moves one or more rows or columns.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moveDimension")
    public MoveDimensionRequest moveDimension;

    public Request withMoveDimension(MoveDimensionRequest moveDimension) {
        this.moveDimension = moveDimension;
        return this;
    }
    
    /**
     * Inserts data into the spreadsheet starting at the specified coordinate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pasteData")
    public PasteDataRequest pasteData;

    public Request withPasteData(PasteDataRequest pasteData) {
        this.pasteData = pasteData;
        return this;
    }
    
    /**
     * Randomizes the order of the rows in a range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("randomizeRange")
    public RandomizeRangeRequest randomizeRange;

    public Request withRandomizeRange(RandomizeRangeRequest randomizeRange) {
        this.randomizeRange = randomizeRange;
        return this;
    }
    
    /**
     * Refreshes one or multiple data source objects in the spreadsheet by the specified references. The request requires an additional `bigquery.readonly` OAuth scope. If there are multiple refresh requests referencing the same data source objects in one batch, only the last refresh request is processed, and all those requests will have the same response accordingly.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshDataSource")
    public RefreshDataSourceRequest refreshDataSource;

    public Request withRefreshDataSource(RefreshDataSourceRequest refreshDataSource) {
        this.refreshDataSource = refreshDataSource;
        return this;
    }
    
    /**
     * Updates all cells in the range to the values in the given Cell object. Only the fields listed in the fields field are updated; others are unchanged. If writing a cell with a formula, the formula's ranges will automatically increment for each field in the range. For example, if writing a cell with formula `=A1` into range B2:C4, B2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`, C2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`. To keep the formula's ranges static, use the `$` indicator. For example, use the formula `=$A$1` to prevent both the row and the column from incrementing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repeatCell")
    public RepeatCellRequest repeatCell;

    public Request withRepeatCell(RepeatCellRequest repeatCell) {
        this.repeatCell = repeatCell;
        return this;
    }
    
    /**
     * Sets the basic filter associated with a sheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("setBasicFilter")
    public SetBasicFilterRequest setBasicFilter;

    public Request withSetBasicFilter(SetBasicFilterRequest setBasicFilter) {
        this.setBasicFilter = setBasicFilter;
        return this;
    }
    
    /**
     * Sets a data validation rule to every cell in the range. To clear validation in a range, call this with no rule specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("setDataValidation")
    public SetDataValidationRequest setDataValidation;

    public Request withSetDataValidation(SetDataValidationRequest setDataValidation) {
        this.setDataValidation = setDataValidation;
        return this;
    }
    
    /**
     * Sorts data in rows based on a sort order per column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortRange")
    public SortRangeRequest sortRange;

    public Request withSortRange(SortRangeRequest sortRange) {
        this.sortRange = sortRange;
        return this;
    }
    
    /**
     * Splits a column of text into multiple columns, based on a delimiter in each cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textToColumns")
    public TextToColumnsRequest textToColumns;

    public Request withTextToColumns(TextToColumnsRequest textToColumns) {
        this.textToColumns = textToColumns;
        return this;
    }
    
    /**
     * Trims the whitespace (such as spaces, tabs, or new lines) in every cell in the specified range. This request removes all whitespace from the start and end of each cell's text, and reduces any subsequence of remaining whitespace characters to a single space. If the resulting trimmed text starts with a '+' or '=' character, the text remains as a string value and isn't interpreted as a formula.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trimWhitespace")
    public TrimWhitespaceRequest trimWhitespace;

    public Request withTrimWhitespace(TrimWhitespaceRequest trimWhitespace) {
        this.trimWhitespace = trimWhitespace;
        return this;
    }
    
    /**
     * Unmerges cells in the given range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unmergeCells")
    public UnmergeCellsRequest unmergeCells;

    public Request withUnmergeCells(UnmergeCellsRequest unmergeCells) {
        this.unmergeCells = unmergeCells;
        return this;
    }
    
    /**
     * Updates properties of the supplied banded range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateBanding")
    public UpdateBandingRequest updateBanding;

    public Request withUpdateBanding(UpdateBandingRequest updateBanding) {
        this.updateBanding = updateBanding;
        return this;
    }
    
    /**
     * Updates the borders of a range. If a field is not set in the request, that means the border remains as-is. For example, with two subsequent UpdateBordersRequest: 1. range: A1:A5 `{ top: RED, bottom: WHITE }` 2. range: A1:A5 `{ left: BLUE }` That would result in A1:A5 having a borders of `{ top: RED, bottom: WHITE, left: BLUE }`. If you want to clear a border, explicitly set the style to NONE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateBorders")
    public UpdateBordersRequest updateBorders;

    public Request withUpdateBorders(UpdateBordersRequest updateBorders) {
        this.updateBorders = updateBorders;
        return this;
    }
    
    /**
     * Updates all cells in a range with new data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateCells")
    public UpdateCellsRequest updateCells;

    public Request withUpdateCells(UpdateCellsRequest updateCells) {
        this.updateCells = updateCells;
        return this;
    }
    
    /**
     * Updates a chart's specifications. (This does not move or resize a chart. To move or resize a chart, use UpdateEmbeddedObjectPositionRequest.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateChartSpec")
    public UpdateChartSpecRequest updateChartSpec;

    public Request withUpdateChartSpec(UpdateChartSpecRequest updateChartSpec) {
        this.updateChartSpec = updateChartSpec;
        return this;
    }
    
    /**
     * Updates a conditional format rule at the given index, or moves a conditional format rule to another index.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateConditionalFormatRule")
    public UpdateConditionalFormatRuleRequest updateConditionalFormatRule;

    public Request withUpdateConditionalFormatRule(UpdateConditionalFormatRuleRequest updateConditionalFormatRule) {
        this.updateConditionalFormatRule = updateConditionalFormatRule;
        return this;
    }
    
    /**
     * Updates a data source. After the data source is updated successfully, an execution is triggered to refresh the associated DATA_SOURCE sheet to read data from the updated data source. The request requires an additional `bigquery.readonly` OAuth scope.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateDataSource")
    public UpdateDataSourceRequest updateDataSource;

    public Request withUpdateDataSource(UpdateDataSourceRequest updateDataSource) {
        this.updateDataSource = updateDataSource;
        return this;
    }
    
    /**
     * A request to update properties of developer metadata. Updates the properties of the developer metadata selected by the filters to the values provided in the DeveloperMetadata resource. Callers must specify the properties they wish to update in the fields parameter, as well as specify at least one DataFilter matching the metadata they wish to update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateDeveloperMetadata")
    public UpdateDeveloperMetadataRequest updateDeveloperMetadata;

    public Request withUpdateDeveloperMetadata(UpdateDeveloperMetadataRequest updateDeveloperMetadata) {
        this.updateDeveloperMetadata = updateDeveloperMetadata;
        return this;
    }
    
    /**
     * Updates the state of the specified group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateDimensionGroup")
    public UpdateDimensionGroupRequest updateDimensionGroup;

    public Request withUpdateDimensionGroup(UpdateDimensionGroupRequest updateDimensionGroup) {
        this.updateDimensionGroup = updateDimensionGroup;
        return this;
    }
    
    /**
     * Updates properties of dimensions within the specified range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateDimensionProperties")
    public UpdateDimensionPropertiesRequest updateDimensionProperties;

    public Request withUpdateDimensionProperties(UpdateDimensionPropertiesRequest updateDimensionProperties) {
        this.updateDimensionProperties = updateDimensionProperties;
        return this;
    }
    
    /**
     * Updates an embedded object's border property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateEmbeddedObjectBorder")
    public UpdateEmbeddedObjectBorderRequest updateEmbeddedObjectBorder;

    public Request withUpdateEmbeddedObjectBorder(UpdateEmbeddedObjectBorderRequest updateEmbeddedObjectBorder) {
        this.updateEmbeddedObjectBorder = updateEmbeddedObjectBorder;
        return this;
    }
    
    /**
     * Update an embedded object's position (such as a moving or resizing a chart or image).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateEmbeddedObjectPosition")
    public UpdateEmbeddedObjectPositionRequest updateEmbeddedObjectPosition;

    public Request withUpdateEmbeddedObjectPosition(UpdateEmbeddedObjectPositionRequest updateEmbeddedObjectPosition) {
        this.updateEmbeddedObjectPosition = updateEmbeddedObjectPosition;
        return this;
    }
    
    /**
     * Updates properties of the filter view.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateFilterView")
    public UpdateFilterViewRequest updateFilterView;

    public Request withUpdateFilterView(UpdateFilterViewRequest updateFilterView) {
        this.updateFilterView = updateFilterView;
        return this;
    }
    
    /**
     * Updates properties of the named range with the specified namedRangeId.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateNamedRange")
    public UpdateNamedRangeRequest updateNamedRange;

    public Request withUpdateNamedRange(UpdateNamedRangeRequest updateNamedRange) {
        this.updateNamedRange = updateNamedRange;
        return this;
    }
    
    /**
     * Updates an existing protected range with the specified protectedRangeId.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateProtectedRange")
    public UpdateProtectedRangeRequest updateProtectedRange;

    public Request withUpdateProtectedRange(UpdateProtectedRangeRequest updateProtectedRange) {
        this.updateProtectedRange = updateProtectedRange;
        return this;
    }
    
    /**
     * Updates properties of the sheet with the specified sheetId.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateSheetProperties")
    public UpdateSheetPropertiesRequest updateSheetProperties;

    public Request withUpdateSheetProperties(UpdateSheetPropertiesRequest updateSheetProperties) {
        this.updateSheetProperties = updateSheetProperties;
        return this;
    }
    
    /**
     * Updates a slicer's specifications. (This does not move or resize a slicer. To move or resize a slicer use UpdateEmbeddedObjectPositionRequest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateSlicerSpec")
    public UpdateSlicerSpecRequest updateSlicerSpec;

    public Request withUpdateSlicerSpec(UpdateSlicerSpecRequest updateSlicerSpec) {
        this.updateSlicerSpec = updateSlicerSpec;
        return this;
    }
    
    /**
     * Updates properties of a spreadsheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateSpreadsheetProperties")
    public UpdateSpreadsheetPropertiesRequest updateSpreadsheetProperties;

    public Request withUpdateSpreadsheetProperties(UpdateSpreadsheetPropertiesRequest updateSpreadsheetProperties) {
        this.updateSpreadsheetProperties = updateSpreadsheetProperties;
        return this;
    }
    
    public Request(){}
}
