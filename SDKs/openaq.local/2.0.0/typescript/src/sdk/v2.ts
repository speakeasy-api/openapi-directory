/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class V2 {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Averages V2 Get
   */
  averagesV2GetV2AveragesGet(
    req: operations.AveragesV2GetV2AveragesGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AveragesV2GetV2AveragesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AveragesV2GetV2AveragesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/averages";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AveragesV2GetV2AveragesGetResponse =
        new operations.AveragesV2GetV2AveragesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Provides a simple listing of cities within the platform
   */
  citiesGetV2CitiesGet(
    req: operations.CitiesGetV2CitiesGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CitiesGetV2CitiesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CitiesGetV2CitiesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/cities";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CitiesGetV2CitiesGetResponse =
        new operations.CitiesGetV2CitiesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQCitiesResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQCitiesResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Countries Get
   */
  countriesGetV2CountriesCountryIdGet(
    req: operations.CountriesGetV2CountriesCountryIdGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CountriesGetV2CountriesCountryIdGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CountriesGetV2CountriesCountryIdGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/countries/{country_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CountriesGetV2CountriesCountryIdGetResponse =
        new operations.CountriesGetV2CountriesCountryIdGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQCountriesResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQCountriesResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Countries Get
   */
  countriesGetV2CountriesGet(
    req: operations.CountriesGetV2CountriesGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CountriesGetV2CountriesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CountriesGetV2CountriesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/countries";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CountriesGetV2CountriesGetResponse =
        new operations.CountriesGetV2CountriesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQCountriesResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQCountriesResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Demo
   */
  demoV2LocationsTilesViewerGet(
    config?: AxiosRequestConfig
  ): Promise<operations.DemoV2LocationsTilesViewerGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/locations/tiles/viewer";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DemoV2LocationsTilesViewerGetResponse =
        new operations.DemoV2LocationsTilesViewerGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `text/html`)) {
            res.demoV2LocationsTilesViewerGet200TextHTMLString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Mobilegentile
   */
  getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet(
    req: operations.GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/locations/tiles/mobile-generalized/{z}/{x}/{y}.pbf",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetResponse =
        new operations.GetMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Mobiletile
   */
  getMobiletileV2LocationsTilesMobileZXYPbfGet(
    req: operations.GetMobiletileV2LocationsTilesMobileZXYPbfGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMobiletileV2LocationsTilesMobileZXYPbfGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMobiletileV2LocationsTilesMobileZXYPbfGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/locations/tiles/mobile/{z}/{x}/{y}.pbf",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMobiletileV2LocationsTilesMobileZXYPbfGetResponse =
        new operations.GetMobiletileV2LocationsTilesMobileZXYPbfGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Tile
   */
  getTileV2LocationsTilesZXYPbfGet(
    req: operations.GetTileV2LocationsTilesZXYPbfGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTileV2LocationsTilesZXYPbfGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTileV2LocationsTilesZXYPbfGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/locations/tiles/{z}/{x}/{y}.pbf",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTileV2LocationsTilesZXYPbfGetResponse =
        new operations.GetTileV2LocationsTilesZXYPbfGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Latest Get
   */
  latestGetV2LatestLocationIdGet(
    req: operations.LatestGetV2LatestLocationIdGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LatestGetV2LatestLocationIdGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LatestGetV2LatestLocationIdGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/latest/{location_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LatestGetV2LatestLocationIdGetResponse =
        new operations.LatestGetV2LatestLocationIdGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Latest Get
   */
  latestGetV2LatestGet(
    req: operations.LatestGetV2LatestGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LatestGetV2LatestGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LatestGetV2LatestGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/latest";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LatestGetV2LatestGetResponse =
        new operations.LatestGetV2LatestGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Locations Get
   */
  locationsGetV2LocationsLocationIdGet(
    req: operations.LocationsGetV2LocationsLocationIdGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LocationsGetV2LocationsLocationIdGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LocationsGetV2LocationsLocationIdGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/locations/{location_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocationsGetV2LocationsLocationIdGetResponse =
        new operations.LocationsGetV2LocationsLocationIdGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Locations Get
   */
  locationsGetV2LocationsGet(
    req: operations.LocationsGetV2LocationsGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LocationsGetV2LocationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LocationsGetV2LocationsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/locations";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LocationsGetV2LocationsGetResponse =
        new operations.LocationsGetV2LocationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Measurements Get
   */
  measurementsGetV2MeasurementsGet(
    req: operations.MeasurementsGetV2MeasurementsGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MeasurementsGetV2MeasurementsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeasurementsGetV2MeasurementsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/measurements";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeasurementsGetV2MeasurementsGetResponse =
        new operations.MeasurementsGetV2MeasurementsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.measurementsGetV2MeasurementsGet200ApplicationJSONAny =
              httpRes?.data;
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Mfr Get
   */
  mfrGetV2ManufacturersGet(
    config?: AxiosRequestConfig
  ): Promise<operations.MfrGetV2ManufacturersGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/manufacturers";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MfrGetV2ManufacturersGetResponse =
        new operations.MfrGetV2ManufacturersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Mobilegentilejson
   */
  mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGet(
    config?: AxiosRequestConfig
  ): Promise<operations.MobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/v2/locations/tiles/mobile-generalized/tiles.json";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetResponse =
        new operations.MobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tileJSON = utils.objectToClass(httpRes?.data, shared.TileJSON);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Mobiletilejson
   */
  mobiletilejsonV2LocationsTilesMobileTilesJsonGet(
    config?: AxiosRequestConfig
  ): Promise<operations.MobiletilejsonV2LocationsTilesMobileTilesJsonGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/locations/tiles/mobile/tiles.json";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MobiletilejsonV2LocationsTilesMobileTilesJsonGetResponse =
        new operations.MobiletilejsonV2LocationsTilesMobileTilesJsonGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tileJSON = utils.objectToClass(httpRes?.data, shared.TileJSON);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Model Get
   */
  modelGetV2ModelsGet(
    config?: AxiosRequestConfig
  ): Promise<operations.ModelGetV2ModelsGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/models";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ModelGetV2ModelsGetResponse =
        new operations.ModelGetV2ModelsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Parameters Get
   */
  parametersGetV2ParametersGet(
    req: operations.ParametersGetV2ParametersGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ParametersGetV2ParametersGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ParametersGetV2ParametersGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/parameters";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ParametersGetV2ParametersGetResponse =
        new operations.ParametersGetV2ParametersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQParametersResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQParametersResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projects Get
   */
  projectsGetV2ProjectsProjectIdGet(
    req: operations.ProjectsGetV2ProjectsProjectIdGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsGetV2ProjectsProjectIdGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsGetV2ProjectsProjectIdGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/projects/{project_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsGetV2ProjectsProjectIdGetResponse =
        new operations.ProjectsGetV2ProjectsProjectIdGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQProjectsResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQProjectsResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Projects Get
   */
  projectsGetV2ProjectsGet(
    req: operations.ProjectsGetV2ProjectsGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsGetV2ProjectsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsGetV2ProjectsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/projects";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsGetV2ProjectsGetResponse =
        new operations.ProjectsGetV2ProjectsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQProjectsResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQProjectsResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Readme Get
   */
  readmeGetV2SourcesReadmeSlugGet(
    req: operations.ReadmeGetV2SourcesReadmeSlugGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ReadmeGetV2SourcesReadmeSlugGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReadmeGetV2SourcesReadmeSlugGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/sources/readme/{slug}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReadmeGetV2SourcesReadmeSlugGetResponse =
        new operations.ReadmeGetV2SourcesReadmeSlugGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.readmeGetV2SourcesReadmeSlugGet200ApplicationJSONAny =
              httpRes?.data;
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sources Get
   */
  sourcesGetV2SourcesGet(
    req: operations.SourcesGetV2SourcesGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SourcesGetV2SourcesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SourcesGetV2SourcesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/sources";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SourcesGetV2SourcesGetResponse =
        new operations.SourcesGetV2SourcesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQResult
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Summary Get
   */
  summaryGetV2SummaryGet(
    config?: AxiosRequestConfig
  ): Promise<operations.SummaryGetV2SummaryGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/summary";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SummaryGetV2SummaryGetResponse =
        new operations.SummaryGetV2SummaryGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.openAQResult = utils.objectToClass(
              httpRes?.data,
              shared.OpenAQResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Tilejson
   */
  tilejsonV2LocationsTilesTilesJsonGet(
    config?: AxiosRequestConfig
  ): Promise<operations.TilejsonV2LocationsTilesTilesJsonGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/locations/tiles/tiles.json";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TilejsonV2LocationsTilesTilesJsonGetResponse =
        new operations.TilejsonV2LocationsTilesTilesJsonGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tileJSON = utils.objectToClass(httpRes?.data, shared.TileJSON);
          }
          break;
      }

      return res;
    });
  }
}
