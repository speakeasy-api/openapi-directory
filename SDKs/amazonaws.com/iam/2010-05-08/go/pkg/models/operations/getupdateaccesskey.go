// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETUpdateAccessKeyActionEnum
type GETUpdateAccessKeyActionEnum string

const (
	GETUpdateAccessKeyActionEnumUpdateAccessKey GETUpdateAccessKeyActionEnum = "UpdateAccessKey"
)

func (e GETUpdateAccessKeyActionEnum) ToPointer() *GETUpdateAccessKeyActionEnum {
	return &e
}

func (e *GETUpdateAccessKeyActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UpdateAccessKey":
		*e = GETUpdateAccessKeyActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateAccessKeyActionEnum: %v", v)
	}
}

// GETUpdateAccessKeyStatusEnum -  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for programmatic calls to Amazon Web Services, while <code>Inactive</code> means that the key cannot be used.
type GETUpdateAccessKeyStatusEnum string

const (
	GETUpdateAccessKeyStatusEnumActive   GETUpdateAccessKeyStatusEnum = "Active"
	GETUpdateAccessKeyStatusEnumInactive GETUpdateAccessKeyStatusEnum = "Inactive"
)

func (e GETUpdateAccessKeyStatusEnum) ToPointer() *GETUpdateAccessKeyStatusEnum {
	return &e
}

func (e *GETUpdateAccessKeyStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Inactive":
		*e = GETUpdateAccessKeyStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateAccessKeyStatusEnum: %v", v)
	}
}

// GETUpdateAccessKeyVersionEnum
type GETUpdateAccessKeyVersionEnum string

const (
	GETUpdateAccessKeyVersionEnumTwoThousandAndTen0508 GETUpdateAccessKeyVersionEnum = "2010-05-08"
)

func (e GETUpdateAccessKeyVersionEnum) ToPointer() *GETUpdateAccessKeyVersionEnum {
	return &e
}

func (e *GETUpdateAccessKeyVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-08":
		*e = GETUpdateAccessKeyVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateAccessKeyVersionEnum: %v", v)
	}
}

type GETUpdateAccessKeyRequest struct {
	// <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
	AccessKeyID string                       `queryParam:"style=form,explode=true,name=AccessKeyId"`
	Action      GETUpdateAccessKeyActionEnum `queryParam:"style=form,explode=true,name=Action"`
	//  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for programmatic calls to Amazon Web Services, while <code>Inactive</code> means that the key cannot be used.
	Status GETUpdateAccessKeyStatusEnum `queryParam:"style=form,explode=true,name=Status"`
	// <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	UserName          *string                       `queryParam:"style=form,explode=true,name=UserName"`
	Version           GETUpdateAccessKeyVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETUpdateAccessKeyResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
