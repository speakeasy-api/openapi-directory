/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class TextEventLinksSelf extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class TextEventLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => TextEventLinksSelf)
  self?: TextEventLinksSelf;
}

/**
 * The body of the `text` event
 */
export class TextEventBody extends SpeakeasyBase {
  /**
   * The text sent in this event
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;
}

/**
 * Text
 */
export class TextEvent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => TextEventLinks)
  links?: TextEventLinks;

  /**
   * The body of the `text` event
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  @Type(() => TextEventBody)
  body?: TextEventBody;

  /**
   * The ID of the Conversation that the member belongs to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conversation_id" })
  conversationId?: string;

  /**
   * The member ID of the sender
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from?: string;

  /**
   * The ID of the event
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * The time that the event happened
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  timestamp?: string;

  /**
   * The event type (`text`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
