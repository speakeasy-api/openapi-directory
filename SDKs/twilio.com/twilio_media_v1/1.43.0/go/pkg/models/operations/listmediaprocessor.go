// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

var ListMediaProcessorServerList = []string{
	"https://media.twilio.com",
}

type ListMediaProcessorSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

type ListMediaProcessorRequest struct {
	// The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.
	Order *shared.MediaProcessorEnumOrderEnum `queryParam:"style=form,explode=true,name=Order"`
	// The page index. This value is simply for client state.
	Page *int64 `queryParam:"style=form,explode=true,name=Page"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int64 `queryParam:"style=form,explode=true,name=PageSize"`
	// The page token. This is provided by the API.
	PageToken *string `queryParam:"style=form,explode=true,name=PageToken"`
	// Status to filter by, with possible values `started`, `ended` or `failed`.
	Status *shared.MediaProcessorEnumStatusEnum `queryParam:"style=form,explode=true,name=Status"`
}

type ListMediaProcessorListMediaProcessorResponseMeta struct {
	FirstPageURL    *string `json:"first_page_url,omitempty"`
	Key             *string `json:"key,omitempty"`
	NextPageURL     *string `json:"next_page_url,omitempty"`
	Page            *int64  `json:"page,omitempty"`
	PageSize        *int64  `json:"page_size,omitempty"`
	PreviousPageURL *string `json:"previous_page_url,omitempty"`
	URL             *string `json:"url,omitempty"`
}

// ListMediaProcessorListMediaProcessorResponse - OK
type ListMediaProcessorListMediaProcessorResponse struct {
	MediaProcessors []shared.MediaV1MediaProcessor                    `json:"media_processors,omitempty"`
	Meta            *ListMediaProcessorListMediaProcessorResponseMeta `json:"meta,omitempty"`
}

type ListMediaProcessorResponse struct {
	ContentType string
	// OK
	ListMediaProcessorResponse *ListMediaProcessorListMediaProcessorResponse
	StatusCode                 int
	RawResponse                *http.Response
}
