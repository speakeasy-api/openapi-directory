"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkSensorAlertsCurrentOverviewByMetricRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCountsNoise:
    r"""Object containing the number of sensors that are currently alerting due to noise readings"""
    
    ambient: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ambient'), 'exclude': lambda f: f is None }})
    r"""Number of sensors that are currently alerting due to ambient noise readings"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCounts:
    r"""Counts of currently alerting sensors, aggregated by alerting metric"""
    
    door: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('door'), 'exclude': lambda f: f is None }})
    r"""Number of sensors that are currently alerting due to an open door"""  
    humidity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('humidity'), 'exclude': lambda f: f is None }})
    r"""Number of sensors that are currently alerting due to humidity readings"""  
    indoor_air_quality: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indoorAirQuality'), 'exclude': lambda f: f is None }})
    r"""Number of sensors that are currently alerting due to indoor air quality readings"""  
    noise: Optional[GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCountsNoise] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noise'), 'exclude': lambda f: f is None }})
    r"""Object containing the number of sensors that are currently alerting due to noise readings"""  
    pm25: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pm25'), 'exclude': lambda f: f is None }})
    r"""Number of sensors that are currently alerting due to PM2.5 readings"""  
    temperature: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature'), 'exclude': lambda f: f is None }})
    r"""Number of sensors that are currently alerting due to temperature readings"""  
    tvoc: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tvoc'), 'exclude': lambda f: f is None }})
    r"""Number of sensors that are currently alerting due to TVOC readings"""  
    water: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('water'), 'exclude': lambda f: f is None }})
    r"""Number of sensors that are currently alerting due to the presence of water"""  
    
class GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum(str, Enum):
    DOOR = 'door'
    HUMIDITY = 'humidity'
    INDOOR_AIR_QUALITY = 'indoorAirQuality'
    NOISE = 'noise'
    PM25 = 'pm25'
    TEMPERATURE = 'temperature'
    TVOC = 'tvoc'
    WATER = 'water'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSON:
    r"""Successful operation"""
    
    counts: Optional[GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONCounts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counts'), 'exclude': lambda f: f is None }})
    r"""Counts of currently alerting sensors, aggregated by alerting metric"""  
    supported_metrics: Optional[list[GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSONSupportedMetricsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedMetrics'), 'exclude': lambda f: f is None }})
    r"""List of metrics that are supported for alerts, based on available sensor devices in the network"""  
    

@dataclasses.dataclass
class GetNetworkSensorAlertsCurrentOverviewByMetricResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_sensor_alerts_current_overview_by_metric_200_application_json_object: Optional[GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    