"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VpnTunnelInfoRoutingTypeEnum(str, Enum):
    r"""Type of the routing policy."""
    ROUTING_TYPE_UNSPECIFIED = 'ROUTING_TYPE_UNSPECIFIED'
    ROUTE_BASED = 'ROUTE_BASED'
    POLICY_BASED = 'POLICY_BASED'
    DYNAMIC = 'DYNAMIC'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VpnTunnelInfo:
    r"""For display only. Metadata associated with a Compute Engine VPN tunnel."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Name of a VPN tunnel."""  
    network_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkUri'), 'exclude': lambda f: f is None }})
    r"""URI of a Compute Engine network where the VPN tunnel is configured."""  
    region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})
    r"""Name of a Google Cloud region where this VPN tunnel is configured."""  
    remote_gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteGateway'), 'exclude': lambda f: f is None }})
    r"""URI of a VPN gateway at remote end of the tunnel."""  
    remote_gateway_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteGatewayIp'), 'exclude': lambda f: f is None }})
    r"""Remote VPN gateway's IP address."""  
    routing_type: Optional[VpnTunnelInfoRoutingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routingType'), 'exclude': lambda f: f is None }})
    r"""Type of the routing policy."""  
    source_gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceGateway'), 'exclude': lambda f: f is None }})
    r"""URI of the VPN gateway at local end of the tunnel."""  
    source_gateway_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceGatewayIp'), 'exclude': lambda f: f is None }})
    r"""Local VPN gateway's IP address."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""URI of a VPN tunnel."""  
    