// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeDBEngineVersionsActionEnum
type POSTDescribeDBEngineVersionsActionEnum string

const (
	POSTDescribeDBEngineVersionsActionEnumDescribeDbEngineVersions POSTDescribeDBEngineVersionsActionEnum = "DescribeDBEngineVersions"
)

func (e *POSTDescribeDBEngineVersionsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeDBEngineVersions":
		*e = POSTDescribeDBEngineVersionsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeDBEngineVersionsActionEnum: %s", s)
	}
}

// POSTDescribeDBEngineVersionsVersionEnum
type POSTDescribeDBEngineVersionsVersionEnum string

const (
	POSTDescribeDBEngineVersionsVersionEnumTwoThousandAndThirteen0110 POSTDescribeDBEngineVersionsVersionEnum = "2013-01-10"
)

func (e *POSTDescribeDBEngineVersionsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2013-01-10":
		*e = POSTDescribeDBEngineVersionsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeDBEngineVersionsVersionEnum: %s", s)
	}
}

type POSTDescribeDBEngineVersionsQueryParams struct {
	Action POSTDescribeDBEngineVersionsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxRecords *string                                 `queryParam:"style=form,explode=true,name=MaxRecords"`
	Version    POSTDescribeDBEngineVersionsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribeDBEngineVersionsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeDBEngineVersionsRequest struct {
	QueryParams POSTDescribeDBEngineVersionsQueryParams
	Headers     POSTDescribeDBEngineVersionsHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribeDBEngineVersionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
