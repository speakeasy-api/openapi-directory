/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * #### Locations where all UAS flight operations are prohibited unless prior FAA authorization has been obtained, and coordination with the controlling agency has taken place.
 *
 * @remarks
 * Through agreements with the Department of Defense and other U.S. security and intelligence agencies, the FAA published these restrictions as [FDC NOTAM 1/0488](https://tfr.faa.gov/save_pages/detail_1_0488.html) (and it's predecessors). Unlike other NOTAMs designated as [Temporary Flight Restrictions](https://dflight-api.ljaero.com/#/Flight%20Restrictions), these remain in effect 24 hours a day, 7 days a week, until further announcement.
 */
export class SpecialSecurityAreas {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve all special security areas located within given distance of location.
   *
   * @remarks
   * Retrieve special security areas existing within given distance from a point. Request body parameters are:
   * * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
   * * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
   * * distance:  distance in meters (max allowed value is 25000)
   */
  ssaByDistanceUsV1SsaDistanceQueryPost(
    req: operations.SsaByDistanceUsV1SsaDistanceQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SsaByDistanceUsV1SsaDistanceQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SsaByDistanceUsV1SsaDistanceQueryPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/us/v1/ssa/distance-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "ssaByDistance",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SsaByDistanceUsV1SsaDistanceQueryPostResponse =
        new operations.SsaByDistanceUsV1SsaDistanceQueryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssaDistanceResponse = utils.objectToClass(
              httpRes?.data,
              shared.SSADistanceResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve all special security areas located within given GeoJSON Polygon.
   *
   * @remarks
   * Retrieve all special security areas located within given area. Request body parameters are:
   * * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
   */
  ssaByPolyUsV1SsaPolygonQueryPost(
    req: operations.SsaByPolyUsV1SsaPolygonQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SsaByPolyUsV1SsaPolygonQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SsaByPolyUsV1SsaPolygonQueryPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/us/v1/ssa/polygon-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "ssaByPolygon",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SsaByPolyUsV1SsaPolygonQueryPostResponse =
        new operations.SsaByPolyUsV1SsaPolygonQueryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssaPolyResponse = utils.objectToClass(
              httpRes?.data,
              shared.SSAPolyResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve all special security areas traversed by route.
   *
   * @remarks
   * Retrieve all special security areas intersected by route. Request body parameters are:
   * * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
   */
  ssaByRouteUsV1SsaRouteQueryPost(
    req: operations.SsaByRouteUsV1SsaRouteQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SsaByRouteUsV1SsaRouteQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SsaByRouteUsV1SsaRouteQueryPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/us/v1/ssa/route-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "ssaByRoute",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SsaByRouteUsV1SsaRouteQueryPostResponse =
        new operations.SsaByRouteUsV1SsaRouteQueryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ssaRouteResponse = utils.objectToClass(
              httpRes?.data,
              shared.SSARouteResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }
}
