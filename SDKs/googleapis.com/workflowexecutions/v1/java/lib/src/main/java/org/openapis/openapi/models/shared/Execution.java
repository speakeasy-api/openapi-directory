/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Execution - A running instance of a [Workflow](/workflows/docs/reference/rest/v1/projects.locations.workflows).
 */
public class Execution {
    /**
     * Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{"argument":"{\"firstName\":\"FIRST\",\"lastName\":\"LAST\"}"}'`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("argument")
    public String argument;
    public Execution withArgument(String argument) {
        this.argument = argument;
        return this;
    }
    
    /**
     * The call logging level associated to this execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callLogLevel")
    public ExecutionCallLogLevelEnum callLogLevel;
    public Execution withCallLogLevel(ExecutionCallLogLevelEnum callLogLevel) {
        this.callLogLevel = callLogLevel;
        return this;
    }
    
    /**
     * Output only. Measures the duration of the execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public String duration;
    public Execution withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Output only. Marks the end of execution, successful or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    public String endTime;
    public Execution withEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Error describes why the execution was abnormally terminated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    public Error error;
    public Execution withError(Error error) {
        this.error = error;
        return this;
    }
    
    /**
     * Labels associated with this execution. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. By default, labels are inherited from the workflow but are overridden by any labels associated with the execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Execution withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Execution withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("result")
    public String result;
    public Execution withResult(String result) {
        this.result = result;
        return this;
    }
    
    /**
     * Output only. Marks the beginning of execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    public String startTime;
    public Execution withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Output only. Current state of the execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public ExecutionStateEnum state;
    public Execution withState(ExecutionStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Represents the current status of this execution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public Status status;
    public Execution withStatus(Status status) {
        this.status = status;
        return this;
    }
    
    /**
     * Output only. Revision of the workflow this execution is using.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflowRevisionId")
    public String workflowRevisionId;
    public Execution withWorkflowRevisionId(String workflowRevisionId) {
        this.workflowRevisionId = workflowRevisionId;
        return this;
    }
    
}
