// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DatabaseEncryptionStateEnum - The desired state of etcd encryption.
type DatabaseEncryptionStateEnum string

const (
	DatabaseEncryptionStateEnumUnknown   DatabaseEncryptionStateEnum = "UNKNOWN"
	DatabaseEncryptionStateEnumEncrypted DatabaseEncryptionStateEnum = "ENCRYPTED"
	DatabaseEncryptionStateEnumDecrypted DatabaseEncryptionStateEnum = "DECRYPTED"
)

func (e DatabaseEncryptionStateEnum) ToPointer() *DatabaseEncryptionStateEnum {
	return &e
}

func (e *DatabaseEncryptionStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "ENCRYPTED":
		fallthrough
	case "DECRYPTED":
		*e = DatabaseEncryptionStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatabaseEncryptionStateEnum: %v", v)
	}
}

// DatabaseEncryption - Configuration of etcd encryption.
type DatabaseEncryption struct {
	// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
	KeyName *string `json:"keyName,omitempty"`
	// The desired state of etcd encryption.
	State *DatabaseEncryptionStateEnum `json:"state,omitempty"`
}
