"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IdentitytoolkitRelyingpartyCreateAuthURIRequest:
    r"""Request to get the IDP authentication URL."""
    
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appId'), 'exclude': lambda f: f is None }})
    r"""The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS."""  
    auth_flow_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authFlowType'), 'exclude': lambda f: f is None }})
    r"""Explicitly specify the auth flow type. Currently only support \\"CODE_FLOW\\" type. The field is only used for Google provider."""  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""The relying party OAuth client ID."""  
    context: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is None }})
    r"""The opaque value used by the client to maintain context info between the authentication request and the IDP callback."""  
    continue_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('continueUri'), 'exclude': lambda f: f is None }})
    r"""The URI to which the IDP redirects the user after the federated login flow."""  
    custom_parameter: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customParameter'), 'exclude': lambda f: f is None }})
    r"""The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token."""  
    hosted_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostedDomain'), 'exclude': lambda f: f is None }})
    r"""The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts."""  
    identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier'), 'exclude': lambda f: f is None }})
    r"""The email or federated ID of the user."""  
    oauth_consumer_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauthConsumerKey'), 'exclude': lambda f: f is None }})
    r"""The developer's consumer key for OpenId OAuth Extension"""  
    oauth_scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauthScope'), 'exclude': lambda f: f is None }})
    r"""Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant"""  
    openid_realm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openidRealm'), 'exclude': lambda f: f is None }})
    r"""Optional realm for OpenID protocol. The sub string \\"scheme://domain:port\\" of the param \\"continueUri\\" is used if this is not set."""  
    ota_app: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otaApp'), 'exclude': lambda f: f is None }})
    r"""The native app package for OTA installation."""  
    provider_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('providerId'), 'exclude': lambda f: f is None }})
    r"""The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."""  
    session_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionId'), 'exclude': lambda f: f is None }})
    r"""The session_id passed by client."""  
    tenant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenantId'), 'exclude': lambda f: f is None }})
    r"""For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."""  
    tenant_project_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenantProjectNumber'), 'exclude': lambda f: f is None }})
    r"""Tenant project number to be used for idp discovery."""  
    