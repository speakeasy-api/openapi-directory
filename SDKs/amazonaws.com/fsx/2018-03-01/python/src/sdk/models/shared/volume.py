"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import administrativeaction as shared_administrativeaction
from ..shared import lifecycletransitionreason as shared_lifecycletransitionreason
from ..shared import ontapvolumeconfiguration as shared_ontapvolumeconfiguration
from ..shared import openzfsvolumeconfiguration as shared_openzfsvolumeconfiguration
from ..shared import tag as shared_tag
from ..shared import volumelifecycle_enum as shared_volumelifecycle_enum
from ..shared import volumetype_enum as shared_volumetype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Volume:
    r"""Describes an Amazon FSx for NetApp ONTAP or Amazon FSx for OpenZFS volume."""
    
    administrative_actions: Optional[list[shared_administrativeaction.AdministrativeAction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdministrativeActions'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time."""  
    file_system_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemId'), 'exclude': lambda f: f is None }})
    r"""The globally unique ID of the file system, assigned by Amazon FSx."""  
    lifecycle: Optional[shared_volumelifecycle_enum.VolumeLifecycleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Lifecycle'), 'exclude': lambda f: f is None }})  
    lifecycle_transition_reason: Optional[shared_lifecycletransitionreason.LifecycleTransitionReason] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LifecycleTransitionReason'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    ontap_configuration: Optional[shared_ontapvolumeconfiguration.OntapVolumeConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OntapConfiguration'), 'exclude': lambda f: f is None }})
    r"""The configuration of an Amazon FSx for NetApp ONTAP volume."""  
    open_zfs_configuration: Optional[shared_openzfsvolumeconfiguration.OpenZFSVolumeConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenZFSConfiguration'), 'exclude': lambda f: f is None }})  
    resource_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceARN'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""A list of <code>Tag</code> values, with a maximum of 50 elements."""  
    volume_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeId'), 'exclude': lambda f: f is None }})  
    volume_type: Optional[shared_volumetype_enum.VolumeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeType'), 'exclude': lambda f: f is None }})  
    