"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Registrierkasse:
    r"""resources concerning a \\"Registrierkasse\\" """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_dep(self, request: operations.GetDEPRequest) -> operations.GetDEPResponse:
        r"""Generates a DEP file."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDEPRequest, base_url, '/registrierkassen/{registrierkasseUuid}/dep', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDEPResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_registrierkasse(self, request: operations.GetRegistrierkasseRequest) -> operations.GetRegistrierkasseResponse:
        r"""Returns information about a particular `Registrierkasse`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRegistrierkasseRequest, base_url, '/registrierkassen/{registrierkasseUuid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRegistrierkasseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Registrierkasse])
                res.registrierkasse = out
        elif http_res.status_code == 404:
            pass

        return res

    