/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EndpointPolicyInput - EndpointPolicy is a resource that helps apply desired configuration on the endpoints that match specific criteria. For example, this resource can be used to apply "authentication config" an all endpoints that serve on port 8080.
 */
public class EndpointPolicyInput {
    /**
     * Optional. This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic at the matched endpoints. Refer to Authorization. If this field is not specified, authorization is disabled(no authz checks) for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationPolicy")
    public String authorizationPolicy;

    public EndpointPolicyInput withAuthorizationPolicy(String authorizationPolicy) {
        this.authorizationPolicy = authorizationPolicy;
        return this;
    }
    
    /**
     * Optional. A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from the proxy to the actual endpoints. More specifically, it is applied to the outgoing traffic from the proxy to the endpoint. This is typically used for sidecar model where the proxy identifies itself as endpoint to the control plane, with the connection between sidecar and endpoint requiring authentication. If this field is not set, authentication is disabled(open). Applicable only when EndpointPolicyType is SIDECAR_PROXY.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientTlsPolicy")
    public String clientTlsPolicy;

    public EndpointPolicyInput withClientTlsPolicy(String clientTlsPolicy) {
        this.clientTlsPolicy = clientTlsPolicy;
        return this;
    }
    
    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public EndpointPolicyInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * A definition of a matcher that selects endpoints to which the policies should be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpointMatcher")
    public EndpointMatcher endpointMatcher;

    public EndpointPolicyInput withEndpointMatcher(EndpointMatcher endpointMatcher) {
        this.endpointMatcher = endpointMatcher;
        return this;
    }
    
    /**
     * Optional. Set of label tags associated with the EndpointPolicy resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public EndpointPolicyInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Required. Name of the EndpointPolicy resource. It matches pattern `projects/{project}/locations/global/endpointPolicies/{endpoint_policy}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public EndpointPolicyInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Optional. A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be applied to terminate the inbound traffic at the identified backends. If this field is not set, authentication is disabled(open) for this endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serverTlsPolicy")
    public String serverTlsPolicy;

    public EndpointPolicyInput withServerTlsPolicy(String serverTlsPolicy) {
        this.serverTlsPolicy = serverTlsPolicy;
        return this;
    }
    
    /**
     * Specification of a port-based selector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trafficPortSelector")
    public TrafficPortSelector trafficPortSelector;

    public EndpointPolicyInput withTrafficPortSelector(TrafficPortSelector trafficPortSelector) {
        this.trafficPortSelector = trafficPortSelector;
        return this;
    }
    
    /**
     * Required. The type of endpoint policy. This is primarily used to validate the configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public EndpointPolicyTypeEnum type;

    public EndpointPolicyInput withType(EndpointPolicyTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public EndpointPolicyInput(){}
}
