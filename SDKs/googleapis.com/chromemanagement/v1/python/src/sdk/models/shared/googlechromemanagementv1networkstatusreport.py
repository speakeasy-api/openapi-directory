"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum(str, Enum):
    r"""Output only. Current connection state of the network."""
    NETWORK_CONNECTION_STATE_UNSPECIFIED = 'NETWORK_CONNECTION_STATE_UNSPECIFIED'
    ONLINE = 'ONLINE'
    CONNECTED = 'CONNECTED'
    PORTAL = 'PORTAL'
    CONNECTING = 'CONNECTING'
    NOT_CONNECTED = 'NOT_CONNECTED'

class GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum(str, Enum):
    r"""Output only. Network connection type."""
    NETWORK_TYPE_UNSPECIFIED = 'NETWORK_TYPE_UNSPECIFIED'
    CELLULAR = 'CELLULAR'
    ETHERNET = 'ETHERNET'
    TETHER = 'TETHER'
    VPN = 'VPN'
    WIFI = 'WIFI'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleChromeManagementV1NetworkStatusReport:
    r"""State of visible/configured networks. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportNetworkStatus](https://chromeenterprise.google/policies/#ReportNetworkStatus) * Data Collection Frequency: 60 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: Yes"""
    
    connection_state: Optional[GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectionState'), 'exclude': lambda f: f is None }})
    r"""Output only. Current connection state of the network."""  
    connection_type: Optional[GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectionType'), 'exclude': lambda f: f is None }})
    r"""Output only. Network connection type."""  
    encryption_on: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionOn'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether the wifi encryption key is turned off."""  
    gateway_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gatewayIpAddress'), 'exclude': lambda f: f is None }})
    r"""Output only. Gateway IP address."""  
    guid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guid'), 'exclude': lambda f: f is None }})
    r"""Output only. Network connection guid."""  
    lan_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lanIpAddress'), 'exclude': lambda f: f is None }})
    r"""Output only. LAN IP address."""  
    receiving_bit_rate_mbps: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receivingBitRateMbps'), 'exclude': lambda f: f is None }})
    r"""Output only. Receiving bit rate measured in Megabits per second."""  
    report_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Time at which the network state was reported."""  
    sample_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleFrequency'), 'exclude': lambda f: f is None }})
    r"""Output only. Frequency the report is sampled."""  
    signal_strength_dbm: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signalStrengthDbm'), 'exclude': lambda f: f is None }})
    r"""Output only. Signal strength for wireless networks measured in decibels."""  
    transmission_bit_rate_mbps: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transmissionBitRateMbps'), 'exclude': lambda f: f is None }})
    r"""Output only. Transmission bit rate measured in Megabits per second."""  
    transmission_power_dbm: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transmissionPowerDbm'), 'exclude': lambda f: f is None }})
    r"""Output only. Transmission power measured in decibels."""  
    wifi_link_quality: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifiLinkQuality'), 'exclude': lambda f: f is None }})
    r"""Output only. Wifi link quality. Value ranges from [0, 70]. 0 indicates no signal and 70 indicates a strong signal."""  
    wifi_power_management_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifiPowerManagementEnabled'), 'exclude': lambda f: f is None }})
    r"""Output only. Wifi power management enabled"""  
    