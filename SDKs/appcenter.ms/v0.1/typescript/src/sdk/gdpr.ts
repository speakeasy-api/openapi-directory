/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Gdpr {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  dataSubjectRightCancelDeleteRequest(
    req: operations.DataSubjectRightCancelDeleteRequestRequest,
    security: operations.DataSubjectRightCancelDeleteRequestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataSubjectRightCancelDeleteRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataSubjectRightCancelDeleteRequestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/user/dsr/delete/{token}/cancel",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataSubjectRightCancelDeleteRequestSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataSubjectRightCancelDeleteRequestResponse =
        new operations.DataSubjectRightCancelDeleteRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightCancelDeleteRequest202ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightCancelDeleteRequest202ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightCancelDeleteRequest503ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightCancelDeleteRequest503ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightCancelDeleteRequestDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightCancelDeleteRequestDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  dataSubjectRightCancelExportRequest(
    req: operations.DataSubjectRightCancelExportRequestRequest,
    security: operations.DataSubjectRightCancelExportRequestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataSubjectRightCancelExportRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataSubjectRightCancelExportRequestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/user/dsr/export/{token}/cancel",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataSubjectRightCancelExportRequestSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataSubjectRightCancelExportRequestResponse =
        new operations.DataSubjectRightCancelExportRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightCancelExportRequest202ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightCancelExportRequest202ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightCancelExportRequest503ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightCancelExportRequest503ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightCancelExportRequestDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightCancelExportRequestDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  dataSubjectRightDeleteRequest(
    config?: AxiosRequestConfig
  ): Promise<operations.DataSubjectRightDeleteRequestResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v0.1/user/dsr/delete";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataSubjectRightDeleteRequestResponse =
        new operations.DataSubjectRightDeleteRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightDeleteRequest202ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightDeleteRequest202ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightDeleteRequestDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightDeleteRequestDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  dataSubjectRightDeleteStatusRequest(
    req: operations.DataSubjectRightDeleteStatusRequestRequest,
    security: operations.DataSubjectRightDeleteStatusRequestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataSubjectRightDeleteStatusRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataSubjectRightDeleteStatusRequestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/user/dsr/delete/{token}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataSubjectRightDeleteStatusRequestSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataSubjectRightDeleteStatusRequestResponse =
        new operations.DataSubjectRightDeleteStatusRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightDeleteStatusRequest200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightDeleteStatusRequest200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightDeleteStatusRequestDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightDeleteStatusRequestDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  dataSubjectRightExportRequest(
    config?: AxiosRequestConfig
  ): Promise<operations.DataSubjectRightExportRequestResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v0.1/user/dsr/export";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataSubjectRightExportRequestResponse =
        new operations.DataSubjectRightExportRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightExportRequest202ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightExportRequest202ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightExportRequestDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightExportRequestDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  dataSubjectRightExportStatusRequest(
    req: operations.DataSubjectRightExportStatusRequestRequest,
    security: operations.DataSubjectRightExportStatusRequestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataSubjectRightExportStatusRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataSubjectRightExportStatusRequestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/user/dsr/export/{token}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataSubjectRightExportStatusRequestSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataSubjectRightExportStatusRequestResponse =
        new operations.DataSubjectRightExportStatusRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightExportStatusRequest200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightExportStatusRequest200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataSubjectRightExportStatusRequestDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DataSubjectRightExportStatusRequestDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
