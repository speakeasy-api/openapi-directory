/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * StreamingConfigTask - A task that carries configuration information for streaming computations.
 */
public class StreamingConfigTask {
    /**
     * Chunk size for commit streams from the harness to windmill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commitStreamChunkSizeBytes")
    public String commitStreamChunkSizeBytes;

    public StreamingConfigTask withCommitStreamChunkSizeBytes(String commitStreamChunkSizeBytes) {
        this.commitStreamChunkSizeBytes = commitStreamChunkSizeBytes;
        return this;
    }
    
    /**
     * Chunk size for get data streams from the harness to windmill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("getDataStreamChunkSizeBytes")
    public String getDataStreamChunkSizeBytes;

    public StreamingConfigTask withGetDataStreamChunkSizeBytes(String getDataStreamChunkSizeBytes) {
        this.getDataStreamChunkSizeBytes = getDataStreamChunkSizeBytes;
        return this;
    }
    
    /**
     * Maximum size for work item commit supported windmill storage layer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxWorkItemCommitBytes")
    public String maxWorkItemCommitBytes;

    public StreamingConfigTask withMaxWorkItemCommitBytes(String maxWorkItemCommitBytes) {
        this.maxWorkItemCommitBytes = maxWorkItemCommitBytes;
        return this;
    }
    
    /**
     * Set of computation configuration information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamingComputationConfigs")
    public StreamingComputationConfig[] streamingComputationConfigs;

    public StreamingConfigTask withStreamingComputationConfigs(StreamingComputationConfig[] streamingComputationConfigs) {
        this.streamingComputationConfigs = streamingComputationConfigs;
        return this;
    }
    
    /**
     * Map from user step names to state families.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userStepToStateFamilyNameMap")
    public java.util.Map<String, String> userStepToStateFamilyNameMap;

    public StreamingConfigTask withUserStepToStateFamilyNameMap(java.util.Map<String, String> userStepToStateFamilyNameMap) {
        this.userStepToStateFamilyNameMap = userStepToStateFamilyNameMap;
        return this;
    }
    
    /**
     * If present, the worker must use this endpoint to communicate with Windmill Service dispatchers, otherwise the worker must continue to use whatever endpoint it had been using.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("windmillServiceEndpoint")
    public String windmillServiceEndpoint;

    public StreamingConfigTask withWindmillServiceEndpoint(String windmillServiceEndpoint) {
        this.windmillServiceEndpoint = windmillServiceEndpoint;
        return this;
    }
    
    /**
     * If present, the worker must use this port to communicate with Windmill Service dispatchers. Only applicable when windmill_service_endpoint is specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("windmillServicePort")
    public String windmillServicePort;

    public StreamingConfigTask withWindmillServicePort(String windmillServicePort) {
        this.windmillServicePort = windmillServicePort;
        return this;
    }
    
    public StreamingConfigTask(){}
}
