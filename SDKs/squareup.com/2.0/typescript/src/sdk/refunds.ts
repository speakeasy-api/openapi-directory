/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Refunds {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * GetPaymentRefund
   *
   * @remarks
   * Retrieves a specific refund using the `refund_id`.
   */
  getPaymentRefund(
    req: operations.GetPaymentRefundRequest,
    security: operations.GetPaymentRefundSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPaymentRefundResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPaymentRefundRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/refunds/{refund_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetPaymentRefundSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPaymentRefundResponse =
        new operations.GetPaymentRefundResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPaymentRefundResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetPaymentRefundResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListPaymentRefunds
   *
   * @remarks
   * Retrieves a list of refunds for the account making the request.
   *
   * Results are eventually consistent, and new refunds or changes to refunds might take several
   * seconds to appear.
   *
   * The maximum results per page is 100.
   */
  listPaymentRefunds(
    req: operations.ListPaymentRefundsRequest,
    security: operations.ListPaymentRefundsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPaymentRefundsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPaymentRefundsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/refunds";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListPaymentRefundsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPaymentRefundsResponse =
        new operations.ListPaymentRefundsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPaymentRefundsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPaymentRefundsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RefundPayment
   *
   * @remarks
   * Refunds a payment. You can refund the entire payment amount or a
   * portion of it. You can use this endpoint to refund a card payment or record a
   * refund of a cash or external payment. For more information, see
   * [Refund Payment](https://developer.squareup.com/docs/payments-api/refund-payments).
   */
  refundPayment(
    req: shared.RefundPaymentRequest,
    security: operations.RefundPaymentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RefundPaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.RefundPaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/refunds";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RefundPaymentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RefundPaymentResponse =
        new operations.RefundPaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.refundPaymentResponse = utils.objectToClass(
              httpRes?.data,
              shared.RefundPaymentResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
