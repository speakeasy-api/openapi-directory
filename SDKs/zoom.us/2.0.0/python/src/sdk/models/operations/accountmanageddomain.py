"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AccountManagedDomainSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class AccountManagedDomainRequest:
    
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accountId', 'style': 'simple', 'explode': False }})
    r"""Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \\"me\\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."""  
    

@dataclasses.dataclass
class AccountManagedDomain200ApplicationXMLDomains:
    
    domain: Optional[str] = dataclasses.field(default=None)
    r"""Domain name."""  
    status: Optional[str] = dataclasses.field(default=None)
    r"""Domain status."""  
    

@dataclasses.dataclass
class AccountManagedDomain200ApplicationXML:
    r"""List of managed domains."""
    
    domains: Optional[list[AccountManagedDomain200ApplicationXMLDomains]] = dataclasses.field(default=None)
    r"""List of managed domain objects."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""Total records."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountManagedDomain200ApplicationJSONDomains:
    
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""Domain name."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Domain status."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountManagedDomain200ApplicationJSON:
    r"""List of managed domains."""
    
    domains: Optional[list[AccountManagedDomain200ApplicationJSONDomains]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domains'), 'exclude': lambda f: f is None }})
    r"""List of managed domain objects."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""Total records."""  
    

@dataclasses.dataclass
class AccountManagedDomainResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account_managed_domain_200_application_json_object: Optional[AccountManagedDomain200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Account managed domains returned.
    **Error Code:** `200`<br>
    Only available for paid account.
    """  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    