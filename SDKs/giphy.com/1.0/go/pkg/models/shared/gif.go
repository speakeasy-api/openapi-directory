// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// GifImages - An object containing data for various available formats and sizes of this GIF.
type GifImages struct {
	Downsized              *Image `json:"downsized,omitempty"`
	DownsizedLarge         *Image `json:"downsized_large,omitempty"`
	DownsizedMedium        *Image `json:"downsized_medium,omitempty"`
	DownsizedSmall         *Image `json:"downsized_small,omitempty"`
	DownsizedStill         *Image `json:"downsized_still,omitempty"`
	FixedHeight            *Image `json:"fixed_height,omitempty"`
	FixedHeightDownsampled *Image `json:"fixed_height_downsampled,omitempty"`
	FixedHeightSmall       *Image `json:"fixed_height_small,omitempty"`
	FixedHeightSmallStill  *Image `json:"fixed_height_small_still,omitempty"`
	FixedHeightStill       *Image `json:"fixed_height_still,omitempty"`
	FixedWidth             *Image `json:"fixed_width,omitempty"`
	FixedWidthDownsampled  *Image `json:"fixed_width_downsampled,omitempty"`
	FixedWidthSmall        *Image `json:"fixed_width_small,omitempty"`
	FixedWidthSmallStill   *Image `json:"fixed_width_small_still,omitempty"`
	FixedWidthStill        *Image `json:"fixed_width_still,omitempty"`
	Looping                *Image `json:"looping,omitempty"`
	Original               *Image `json:"original,omitempty"`
	OriginalStill          *Image `json:"original_still,omitempty"`
	Preview                *Image `json:"preview,omitempty"`
	PreviewGif             *Image `json:"preview_gif,omitempty"`
}

// GifTypeEnum - Type of the gif. By default, this is almost always gif
type GifTypeEnum string

const (
	GifTypeEnumGif GifTypeEnum = "gif"
)

func (e *GifTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gif":
		*e = GifTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GifTypeEnum: %s", s)
	}
}

type Gif struct {
	// The unique bit.ly URL for this GIF
	BitlyURL *string `json:"bitly_url,omitempty"`
	// Currently unused
	ContentURL *string `json:"content_url,omitempty"`
	// The date this GIF was added to the GIPHY database.
	CreateDatetime *time.Time `json:"create_datetime,omitempty"`
	// A URL used for embedding this GIF
	EmbdedURL *string `json:"embded_url,omitempty"`
	// An array of featured tags for this GIF (Note: Not available when using the Public Beta Key)
	//
	FeaturedTags []string `json:"featured_tags,omitempty"`
	// This GIF's unique ID
	ID *string `json:"id,omitempty"`
	// An object containing data for various available formats and sizes of this GIF.
	Images *GifImages `json:"images,omitempty"`
	// The creation or upload date from this GIF's source.
	ImportDatetime *time.Time `json:"import_datetime,omitempty"`
	// The MPAA-style rating for this content. Examples include Y, G, PG, PG-13 and R
	Rating *string `json:"rating,omitempty"`
	// The unique slug used in this GIF's URL
	Slug *string `json:"slug,omitempty"`
	// The page on which this GIF was found
	Source *string `json:"source,omitempty"`
	// The URL of the webpage on which this GIF was found.
	SourcePostURL *string `json:"source_post_url,omitempty"`
	// The top level domain of the source URL.
	SourceTld *string `json:"source_tld,omitempty"`
	// An array of tags for this GIF (Note: Not available when using the Public Beta Key)
	//
	Tags []string `json:"tags,omitempty"`
	// The date on which this gif was marked trending, if applicable.
	TrendingDatetime *time.Time `json:"trending_datetime,omitempty"`
	// Type of the gif. By default, this is almost always gif
	Type *GifTypeEnum `json:"type,omitempty"`
	// The date on which this GIF was last updated.
	UpdateDatetime *time.Time `json:"update_datetime,omitempty"`
	// The unique URL for this GIF
	URL *string `json:"url,omitempty"`
	// The User Object contains information about the user associated with a GIF and URLs to assets such as that user's avatar image, profile, and more.
	User *User `json:"user,omitempty"`
	// The username this GIF is attached to, if applicable
	Username *string `json:"username,omitempty"`
}
