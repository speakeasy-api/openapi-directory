"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Order:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def order_api_all(self, request: operations.OrderAPIAllRequest) -> operations.OrderAPIAllResponse:
        r"""Return all orders for the account"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/all'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.OrderAPIAllRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPIAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListResultOrderDetailsAPIModel])
                res.list_result_order_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListResultOrderDetailsAPIModel])
                res.list_result_order_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def order_api_change_shipping_details_form(self, request: operations.OrderAPIChangeShippingDetailsFormRequest) -> operations.OrderAPIChangeShippingDetailsFormResponse:
        r"""Change order shipping details"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/changeshippingdetails'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "order_shipping_details_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.OrderAPIChangeShippingDetailsFormRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPIChangeShippingDetailsFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def order_api_change_shipping_details_json(self, request: operations.OrderAPIChangeShippingDetailsJSONRequest) -> operations.OrderAPIChangeShippingDetailsJSONResponse:
        r"""Change order shipping details"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/changeshippingdetails'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "order_shipping_details_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.OrderAPIChangeShippingDetailsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPIChangeShippingDetailsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def order_api_change_shipping_details_raw(self, request: operations.OrderAPIChangeShippingDetailsRawRequest) -> operations.OrderAPIChangeShippingDetailsRawResponse:
        r"""Change order shipping details"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/changeshippingdetails'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.OrderAPIChangeShippingDetailsRawRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPIChangeShippingDetailsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def order_api_change_status_form(self, request: operations.OrderAPIChangeStatusFormRequest) -> operations.OrderAPIChangeStatusFormResponse:
        r"""Change order status"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/changestatus'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "change_order_status_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPIChangeStatusFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def order_api_change_status_json(self, request: operations.OrderAPIChangeStatusJSONRequest) -> operations.OrderAPIChangeStatusJSONResponse:
        r"""Change order status"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/changestatus'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "change_order_status_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPIChangeStatusJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def order_api_change_status_raw(self, request: operations.OrderAPIChangeStatusRawRequest) -> operations.OrderAPIChangeStatusRawResponse:
        r"""Change order status"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/changestatus'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPIChangeStatusRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def order_api_delete_form(self, request: operations.OrderAPIDeleteFormRequest) -> operations.OrderAPIDeleteFormResponse:
        r"""Delete an existing order"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "order_delete_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPIDeleteFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_delete_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_delete_form_200_text_json_int32_integer = out

        return res

    def order_api_delete_json(self, request: operations.OrderAPIDeleteJSONRequest) -> operations.OrderAPIDeleteJSONResponse:
        r"""Delete an existing order"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "order_delete_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPIDeleteJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_delete_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_delete_json_200_text_json_int32_integer = out

        return res

    def order_api_delete_raw(self, request: operations.OrderAPIDeleteRawRequest) -> operations.OrderAPIDeleteRawResponse:
        r"""Delete an existing order"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPIDeleteRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_delete_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_delete_raw_200_text_json_int32_integer = out

        return res

    def order_api_details(self, request: operations.OrderAPIDetailsRequest) -> operations.OrderAPIDetailsResponse:
        r"""Return order details"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/details'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.OrderAPIDetailsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPIDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrderFullDetailsAPIModel])
                res.order_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrderFullDetailsAPIModel])
                res.order_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def order_api_new_form(self, request: operations.OrderAPINewFormRequest) -> operations.OrderAPINewFormResponse:
        r"""Create an order"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "order_create_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPINewFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_new_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_new_form_200_text_json_int32_integer = out

        return res

    def order_api_new_json(self, request: operations.OrderAPINewJSONRequest) -> operations.OrderAPINewJSONResponse:
        r"""Create an order"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "order_create_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPINewJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_new_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_new_json_200_text_json_int32_integer = out

        return res

    def order_api_new_raw(self, request: operations.OrderAPINewRawRequest) -> operations.OrderAPINewRawResponse:
        r"""Create an order"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/order/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrderAPINewRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_new_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.order_api_new_raw_200_text_json_int32_integer = out

        return res

    