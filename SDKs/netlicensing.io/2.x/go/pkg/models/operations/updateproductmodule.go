// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateProductModuleSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

type UpdateProductModuleRequestBodyLicenseTemplateEnum string

const (
	UpdateProductModuleRequestBodyLicenseTemplateEnumTimevolume UpdateProductModuleRequestBodyLicenseTemplateEnum = "TIMEVOLUME"
	UpdateProductModuleRequestBodyLicenseTemplateEnumFeature    UpdateProductModuleRequestBodyLicenseTemplateEnum = "FEATURE"
)

func (e *UpdateProductModuleRequestBodyLicenseTemplateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TIMEVOLUME":
		fallthrough
	case "FEATURE":
		*e = UpdateProductModuleRequestBodyLicenseTemplateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProductModuleRequestBodyLicenseTemplateEnum: %s", s)
	}
}

type UpdateProductModuleRequestBodyNodeSecretModeEnum string

const (
	UpdateProductModuleRequestBodyNodeSecretModeEnumPredefined UpdateProductModuleRequestBodyNodeSecretModeEnum = "PREDEFINED"
	UpdateProductModuleRequestBodyNodeSecretModeEnumClient     UpdateProductModuleRequestBodyNodeSecretModeEnum = "CLIENT"
)

func (e *UpdateProductModuleRequestBodyNodeSecretModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PREDEFINED":
		fallthrough
	case "CLIENT":
		*e = UpdateProductModuleRequestBodyNodeSecretModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProductModuleRequestBodyNodeSecretModeEnum: %s", s)
	}
}

type UpdateProductModuleRequestBody struct {
	// If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.
	Active *bool `form:"name=active"`
	// License Template. Mandatory for 'Try &amp; Buy' licensing model.
	LicenseTemplate []UpdateProductModuleRequestBodyLicenseTemplateEnum `form:"name=licenseTemplate"`
	// Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.
	LicensingModel *string `form:"name=licensingModel"`
	// Maximum checkout validity (days). Mandatory for 'Floating' licensing model.
	MaxCheckoutValidity *int `form:"name=maxCheckoutValidity"`
	// Product Module name that is visible to the end customers in NetLicensing Shop.
	Name *string `form:"name=name"`
	// Secret Mode. Mandatory for 'Node-Locked' licensing model.
	NodeSecretMode []UpdateProductModuleRequestBodyNodeSecretModeEnum `form:"name=nodeSecretMode"`
	// New Product Module number (update).
	Number *string `form:"name=number"`
	// Remaining time volume for red level. Mandatory for 'Rental' licensing model.
	RedThreshold *int `form:"name=redThreshold"`
	// Remaining time volume for yellow level. Mandatory for 'Rental' licensing model.
	YellowThreshold *int `form:"name=yellowThreshold"`
}

type UpdateProductModuleRequest struct {
	RequestBody *UpdateProductModuleRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
	// Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.
	ProductModuleNumber string `pathParam:"style=simple,explode=false,name=productModuleNumber"`
}

type UpdateProductModuleResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful request
	Netlicensing *shared.Netlicensing
}
