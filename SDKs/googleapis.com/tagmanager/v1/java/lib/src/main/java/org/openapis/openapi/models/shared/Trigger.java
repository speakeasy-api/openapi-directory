/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Trigger - Represents a Google Tag Manager Trigger
 */
public class Trigger {
    /**
     * GTM Account ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;

    public Trigger withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Used in the case of auto event tracking. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoEventFilter")
    public Condition[] autoEventFilter;

    public Trigger withAutoEventFilter(Condition[] autoEventFilter) {
        this.autoEventFilter = autoEventFilter;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkValidation")
    public Parameter checkValidation;

    public Trigger withCheckValidation(Parameter checkValidation) {
        this.checkValidation = checkValidation;
        return this;
    }
    
    /**
     * GTM Container ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerId")
    public String containerId;

    public Trigger withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("continuousTimeMinMilliseconds")
    public Parameter continuousTimeMinMilliseconds;

    public Trigger withContinuousTimeMinMilliseconds(Parameter continuousTimeMinMilliseconds) {
        this.continuousTimeMinMilliseconds = continuousTimeMinMilliseconds;
        return this;
    }
    
    /**
     * Used in the case of custom event, which is fired iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customEventFilter")
    public Condition[] customEventFilter;

    public Trigger withCustomEventFilter(Condition[] customEventFilter) {
        this.customEventFilter = customEventFilter;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventName")
    public Parameter eventName;

    public Trigger withEventName(Parameter eventName) {
        this.eventName = eventName;
        return this;
    }
    
    /**
     * The trigger will only fire iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    public Condition[] filter;

    public Trigger withFilter(Condition[] filter) {
        this.filter = filter;
        return this;
    }
    
    /**
     * The fingerprint of the GTM Trigger as computed at storage time. This value is recomputed whenever the trigger is modified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;

    public Trigger withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("horizontalScrollPercentageList")
    public Parameter horizontalScrollPercentageList;

    public Trigger withHorizontalScrollPercentageList(Parameter horizontalScrollPercentageList) {
        this.horizontalScrollPercentageList = horizontalScrollPercentageList;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    public Parameter interval;

    public Trigger withInterval(Parameter interval) {
        this.interval = interval;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("intervalSeconds")
    public Parameter intervalSeconds;

    public Trigger withIntervalSeconds(Parameter intervalSeconds) {
        this.intervalSeconds = intervalSeconds;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Parameter limit;

    public Trigger withLimit(Parameter limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxTimerLengthSeconds")
    public Parameter maxTimerLengthSeconds;

    public Trigger withMaxTimerLengthSeconds(Parameter maxTimerLengthSeconds) {
        this.maxTimerLengthSeconds = maxTimerLengthSeconds;
        return this;
    }
    
    /**
     * Trigger display name. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Trigger withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Additional parameters. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameter")
    public Parameter[] parameter;

    public Trigger withParameter(Parameter[] parameter) {
        this.parameter = parameter;
        return this;
    }
    
    /**
     * Parent folder id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentFolderId")
    public String parentFolderId;

    public Trigger withParentFolderId(String parentFolderId) {
        this.parentFolderId = parentFolderId;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selector")
    public Parameter selector;

    public Trigger withSelector(Parameter selector) {
        this.selector = selector;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalTimeMinMilliseconds")
    public Parameter totalTimeMinMilliseconds;

    public Trigger withTotalTimeMinMilliseconds(Parameter totalTimeMinMilliseconds) {
        this.totalTimeMinMilliseconds = totalTimeMinMilliseconds;
        return this;
    }
    
    /**
     * The Trigger ID uniquely identifies the GTM Trigger.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggerId")
    public String triggerId;

    public Trigger withTriggerId(String triggerId) {
        this.triggerId = triggerId;
        return this;
    }
    
    /**
     * Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public TriggerTypeEnum type;

    public Trigger withType(TriggerTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uniqueTriggerId")
    public Parameter uniqueTriggerId;

    public Trigger withUniqueTriggerId(Parameter uniqueTriggerId) {
        this.uniqueTriggerId = uniqueTriggerId;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verticalScrollPercentageList")
    public Parameter verticalScrollPercentageList;

    public Trigger withVerticalScrollPercentageList(Parameter verticalScrollPercentageList) {
        this.verticalScrollPercentageList = verticalScrollPercentageList;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibilitySelector")
    public Parameter visibilitySelector;

    public Trigger withVisibilitySelector(Parameter visibilitySelector) {
        this.visibilitySelector = visibilitySelector;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visiblePercentageMax")
    public Parameter visiblePercentageMax;

    public Trigger withVisiblePercentageMax(Parameter visiblePercentageMax) {
        this.visiblePercentageMax = visiblePercentageMax;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visiblePercentageMin")
    public Parameter visiblePercentageMin;

    public Trigger withVisiblePercentageMin(Parameter visiblePercentageMin) {
        this.visiblePercentageMin = visiblePercentageMin;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waitForTags")
    public Parameter waitForTags;

    public Trigger withWaitForTags(Parameter waitForTags) {
        this.waitForTags = waitForTags;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waitForTagsTimeout")
    public Parameter waitForTagsTimeout;

    public Trigger withWaitForTagsTimeout(Parameter waitForTagsTimeout) {
        this.waitForTagsTimeout = waitForTagsTimeout;
        return this;
    }
    
    public Trigger(){}
}
