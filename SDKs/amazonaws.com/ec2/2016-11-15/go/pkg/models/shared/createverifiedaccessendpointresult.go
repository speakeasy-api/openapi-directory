// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum - The type of attachment used to provide connectivity between the Amazon Web Services Verified Access endpoint and the application.
type CreateVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum string

const (
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnumVpc CreateVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum = "vpc"
)

func (e CreateVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum) ToPointer() *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum {
	return &e
}

func (e *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vpc":
		*e = CreateVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum: %v", v)
	}
}

// CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum - The type of Amazon Web Services Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.
type CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum string

const (
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnumLoadBalancer     CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum = "load-balancer"
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnumNetworkInterface CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum = "network-interface"
)

func (e CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum) ToPointer() *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum {
	return &e
}

func (e *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "load-balancer":
		fallthrough
	case "network-interface":
		*e = CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum: %v", v)
	}
}

// CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum - The IP protocol.
type CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum string

const (
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnumHTTP  CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum = "http"
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnumHTTPS CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum = "https"
)

func (e CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum) ToPointer() *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum {
	return &e
}

func (e *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum: %v", v)
	}
}

// CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptions - The load balancer details if creating the Amazon Web Services Verified Access endpoint as <code>load-balancer</code>type.
type CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptions struct {
	LoadBalancerArn *string
	Port            *int64
	Protocol        *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptionsProtocolEnum
	SubnetIds       []string
}

// CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum - The IP protocol.
type CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum string

const (
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnumHTTP  CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum = "http"
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnumHTTPS CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum = "https"
)

func (e CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum) ToPointer() *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum {
	return &e
}

func (e *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum: %v", v)
	}
}

// CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptions - The options for network-interface type endpoint.
type CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptions struct {
	NetworkInterfaceID *string
	Port               *int64
	Protocol           *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptionsProtocolEnum
}

// CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum - The status code of the Verified Access endpoint.
type CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum string

const (
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnumPending  CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum = "pending"
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnumActive   CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum = "active"
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnumUpdating CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum = "updating"
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnumDeleting CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum = "deleting"
	CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnumDeleted  CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum = "deleted"
)

func (e CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum) ToPointer() *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum {
	return &e
}

func (e *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "active":
		fallthrough
	case "updating":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		*e = CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum: %v", v)
	}
}

// CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatus - The endpoint status.
type CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatus struct {
	Code    *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatusCodeEnum
	Message *string
}

// CreateVerifiedAccessEndpointResultVerifiedAccessEndpointTags - Describes a tag.
type CreateVerifiedAccessEndpointResultVerifiedAccessEndpointTags struct {
	Key   *string
	Value *string
}

// CreateVerifiedAccessEndpointResultVerifiedAccessEndpoint - The ID of the Verified Access endpoint.
type CreateVerifiedAccessEndpointResultVerifiedAccessEndpoint struct {
	ApplicationDomain        *string
	AttachmentType           *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointAttachmentTypeEnum
	CreationTime             *string
	DeletionTime             *string
	Description              *string
	DeviceValidationDomain   *string
	DomainCertificateArn     *string
	EndpointDomain           *string
	EndpointType             *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointEndpointTypeEnum
	LastUpdatedTime          *string
	LoadBalancerOptions      *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointLoadBalancerOptions
	NetworkInterfaceOptions  *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointNetworkInterfaceOptions
	SecurityGroupIds         []string
	Status                   *CreateVerifiedAccessEndpointResultVerifiedAccessEndpointStatus
	Tags                     []CreateVerifiedAccessEndpointResultVerifiedAccessEndpointTags
	VerifiedAccessEndpointID *string
	VerifiedAccessGroupID    *string
	VerifiedAccessInstanceID *string
}

// CreateVerifiedAccessEndpointResult - Success
type CreateVerifiedAccessEndpointResult struct {
	VerifiedAccessEndpoint *CreateVerifiedAccessEndpointResultVerifiedAccessEndpoint
}
