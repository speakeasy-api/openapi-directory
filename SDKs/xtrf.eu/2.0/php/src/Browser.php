<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Browser 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * 
     * Searches for data (ie. customer, task, etc) and returns it in a CSV form.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BrowseCSVRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BrowseCSVResponse
     */
	public function browseCSV(
        \OpenAPI\OpenAPI\Models\Operations\BrowseCSVRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BrowseCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/csv');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BrowseCSVRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BrowseCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->browseCSVDefaultApplicationVndXtrfV1PlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * 
     * Searches for data (ie. customer, task, etc) and returns it in a tabular form.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BrowseJSONRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BrowseJSONResponse
     */
	public function browseJSON(
        \OpenAPI\OpenAPI\Models\Operations\BrowseJSONRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BrowseJSONResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BrowseJSONRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BrowseJSONResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->browseJSONDefaultApplicationVndXtrfV1PlusJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates view for given class.
     * 
     * Creates view for given class.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateResponse
     */
	public function create(
        \OpenAPI\OpenAPI\Models\Operations\CreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/for/{className}', \OpenAPI\OpenAPI\Models\Operations\CreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "viewDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->viewWithIdDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ViewWithIdDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a view.
     * 
     * Removes a view. No content is returned upon success (204).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteResponse
     */
	public function delete(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}', \OpenAPI\OpenAPI\Models\Operations\DeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a single column from view.
     * 
     * Deletes a single column from view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteColumnResponse
     */
	public function deleteColumn(
        \OpenAPI\OpenAPI\Models\Operations\DeleteColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/columns/{columnName}', \OpenAPI\OpenAPI\Models\Operations\DeleteColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->columnDTOS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ColumnDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all view's information.
     * 
     * Returns all view's information (ie. name, columns, filters, etc).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResponse
     */
	public function get(
        \OpenAPI\OpenAPI\Models\Operations\GetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}', \OpenAPI\OpenAPI\Models\Operations\GetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->viewDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ViewDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns column's specific settings.
     * 
     * Returns column's specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetColumnSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetColumnSettingsResponse
     */
	public function getColumnSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetColumnSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetColumnSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/columns/{columnName}/settings', \OpenAPI\OpenAPI\Models\Operations\GetColumnSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetColumnSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getColumnSettingsDefaultApplicationVndXtrfV1PlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns columns defined in view.
     * 
     * Returns columns defined in view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetColumnsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetColumnsResponse
     */
	public function getColumns(
        \OpenAPI\OpenAPI\Models\Operations\GetColumnsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetColumnsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/columns', \OpenAPI\OpenAPI\Models\Operations\GetColumnsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetColumnsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->columnDTOS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ColumnDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns current view's detailed information, suitable for browser.
     * 
     * Returns current view's detailed information, suitable for browser.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCurrentViewDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCurrentViewDetailsResponse
     */
	public function getCurrentViewDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetCurrentViewDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCurrentViewDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/details/for/{className}', \OpenAPI\OpenAPI\Models\Operations\GetCurrentViewDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCurrentViewDetailsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCurrentViewDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->viewDetailsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ViewDetailsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns view's filter.
     * 
     * Returns view's filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFilterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFilterResponse
     */
	public function getFilter(
        \OpenAPI\OpenAPI\Models\Operations\GetFilterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFilterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/filter', \OpenAPI\OpenAPI\Models\Operations\GetFilterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFilterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filterDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilterDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns view's local settings (for current user).
     * 
     * Returns view's local settings (for current user).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLocalSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLocalSettingsResponse
     */
	public function getLocalSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetLocalSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLocalSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/settings/local', \OpenAPI\OpenAPI\Models\Operations\GetLocalSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLocalSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->localSettingsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocalSettingsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns view's order settings.
     * 
     * Returns view's order settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrderResponse
     */
	public function getOrder(
        \OpenAPI\OpenAPI\Models\Operations\GetOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/order', \OpenAPI\OpenAPI\Models\Operations\GetOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrderDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns view's permissions.
     * 
     * Returns view's permissions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPermissionsResponse
     */
	public function getPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GetPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/permissions', \OpenAPI\OpenAPI\Models\Operations\GetPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permissionsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PermissionsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns view's settings.
     * 
     * Returns view's settings (ie. name).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingsResponse
     */
	public function getSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/settings', \OpenAPI\OpenAPI\Models\Operations\GetSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->settingsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SettingsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns view's detailed information, suitable for browser.
     * 
     * Returns view's detailed information, suitable for browser.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetViewDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetViewDetailsResponse
     */
	public function getViewDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetViewDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetViewDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/details/for/{className}/{viewId}', \OpenAPI\OpenAPI\Models\Operations\GetViewDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetViewDetailsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetViewDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->viewDetailsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ViewDetailsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns views' brief.
     * 
     * Returns views' brief.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetViewsBriefRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetViewsBriefResponse
     */
	public function getViewsBrief(
        \OpenAPI\OpenAPI\Models\Operations\GetViewsBriefRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetViewsBriefResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/for/{className}', \OpenAPI\OpenAPI\Models\Operations\GetViewsBriefRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetViewsBriefRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetViewsBriefResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->viewsBriefDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ViewsBriefDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Selects given view as current and returns its detailed information, suitable for browser.
     * 
     * Selects given view as current and returns its detailed information, suitable for browser.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SelectViewAndGetItsDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SelectViewAndGetItsDetailsResponse
     */
	public function selectViewAndGetItsDetails(
        \OpenAPI\OpenAPI\Models\Operations\SelectViewAndGetItsDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SelectViewAndGetItsDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/details/for/{className}/{viewId}', \OpenAPI\OpenAPI\Models\Operations\SelectViewAndGetItsDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SelectViewAndGetItsDetailsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SelectViewAndGetItsDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->viewDetailsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ViewDetailsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates all view's information.
     * 
     * Updates all view's information (ie. name, columns, filters, etc).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateResponse
     */
	public function update(
        \OpenAPI\OpenAPI\Models\Operations\UpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}', \OpenAPI\OpenAPI\Models\Operations\UpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "viewDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->viewDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ViewDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates column's specific settings.
     * 
     * Updates column's specific settings. For example when column describes money amount we can decide whether it should display currency or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateColumnSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateColumnSettingsResponse
     */
	public function updateColumnSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateColumnSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateColumnSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/columns/{columnName}/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateColumnSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateColumnSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateColumnSettingsDefaultApplicationVndXtrfV1PlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates columns in view.
     * 
     * Updates columns in view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateColumnsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateColumnsResponse
     */
	public function updateColumns(
        \OpenAPI\OpenAPI\Models\Operations\UpdateColumnsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateColumnsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/columns', \OpenAPI\OpenAPI\Models\Operations\UpdateColumnsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateColumnsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->columnDTOS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ColumnDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates view's filter.
     * 
     * Updates view's filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFilterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFilterResponse
     */
	public function updateFilter(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFilterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFilterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/filter', \OpenAPI\OpenAPI\Models\Operations\UpdateFilterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFilterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filterDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilterDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates view's filter property.
     * 
     * Updates view's filter property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFilterPropertyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFilterPropertyResponse
     */
	public function updateFilterProperty(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFilterPropertyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFilterPropertyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/filter/{filterProperty}', \OpenAPI\OpenAPI\Models\Operations\UpdateFilterPropertyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "filterPropertyDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFilterPropertyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateFilterPropertyDefaultApplicationVndXtrfV1PlusJsonObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates view's local settings (for current user).
     * 
     * Updates view's local settings (for current user).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateLocalSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateLocalSettingsResponse
     */
	public function updateLocalSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateLocalSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateLocalSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/settings/local', \OpenAPI\OpenAPI\Models\Operations\UpdateLocalSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "localSettingsDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateLocalSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->localSettingsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocalSettingsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates view's order settings.
     * 
     * Updates view's order settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrderResponse
     */
	public function updateOrder(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/order', \OpenAPI\OpenAPI\Models\Operations\UpdateOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "orderDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrderDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates view's permissions.
     * 
     * Updates view's permissions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePermissionsResponse
     */
	public function updatePermissions(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/permissions', \OpenAPI\OpenAPI\Models\Operations\UpdatePermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "permissionsDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permissionsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PermissionsDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates view's settings.
     * 
     * Updates view's settings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSettingsResponse
     */
	public function updateSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/browser/views/{viewId}/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "settingsDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->settingsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SettingsDTO', 'json');
            }
        }

        return $response;
    }
}