"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import viasaddress as shared_viasaddress
from ..shared import viasphonenumber as shared_viasphonenumber
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class StoreDetailShopperInteractionEnum(str, Enum):
    r"""The sales channel. Possible values: **Ecommerce**, **POS**."""
    ECOMMERCE = 'Ecommerce'
    POS = 'POS'

class StoreDetailStatusEnum(str, Enum):
    r"""The status of the store. Possible values: **Pending**, **Active**, **Inactive**, **InactiveWithModifications**, **Closed**."""
    ACTIVE = 'Active'
    CLOSED = 'Closed'
    INACTIVE = 'Inactive'
    INACTIVE_WITH_MODIFICATIONS = 'InactiveWithModifications'
    PENDING = 'Pending'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreDetail:
    
    address: shared_viasaddress.ViasAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})  
    merchant_account: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantAccount') }})
    r"""The merchant account to which the store belongs."""  
    merchant_category_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantCategoryCode') }})
    r"""The merchant category code (MCC) that classifies the business of the account holder."""  
    full_phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullPhoneNumber'), 'exclude': lambda f: f is None }})
    r"""The phone number of the store provided as a single string.  It will be handled as a landline phone.
    
    Examples: \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\" 
    """  
    logo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo'), 'exclude': lambda f: f is None }})
    r"""Store logo for payment method setup."""  
    merchant_house_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantHouseNumber'), 'exclude': lambda f: f is None }})
    r"""Merchant house number for payment method setup."""  
    phone_number: Optional[shared_viasphonenumber.ViasPhoneNumber] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumber'), 'exclude': lambda f: f is None }})  
    shopper_interaction: Optional[StoreDetailShopperInteractionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperInteraction'), 'exclude': lambda f: f is None }})
    r"""The sales channel. Possible values: **Ecommerce**, **POS**."""  
    split_configuration_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('splitConfigurationUUID'), 'exclude': lambda f: f is None }})
    r"""The unique reference for the split configuration, returned when you configure splits in your Customer Area. When this is provided, the `virtualAccount` is also required. Adyen uses the configuration and the `virtualAccount` to split funds between accounts in your platform."""  
    status: Optional[StoreDetailStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the store. Possible values: **Pending**, **Active**, **Inactive**, **InactiveWithModifications**, **Closed**."""  
    store: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('store'), 'exclude': lambda f: f is None }})
    r"""Adyen-generated unique alphanumeric identifier (UUID) for the store, returned in the response when you create a store. Required when updating an existing store in an `/updateAccountHolder` request."""  
    store_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeName'), 'exclude': lambda f: f is None }})
    r"""The name of the account holder's store. This value is shown in shopper statements.
    
    * Length: Between 3 to 22 characters 
    
    * The following characters are *not* supported: **:;}{$#@!|<>%^*+=\\**
    """  
    store_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storeReference'), 'exclude': lambda f: f is None }})
    r"""Your unique identifier for the store. The Customer Area also uses this value for the store description.
    
     * Length: Between 3 to 128 characters
    
    * The following characters are *not* supported: **:;}{$#@!|<>%^*+=\\**
    """  
    virtual_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualAccount'), 'exclude': lambda f: f is None }})
    r"""The account holder's `accountCode` where the split amount will be sent. Required when you provide the `splitConfigurationUUID`."""  
    web_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAddress'), 'exclude': lambda f: f is None }})
    r"""URL of the ecommerce store."""  
    