// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyIdentityIDFormatActionEnum
type GETModifyIdentityIDFormatActionEnum string

const (
	GETModifyIdentityIDFormatActionEnumModifyIdentityIDFormat GETModifyIdentityIDFormatActionEnum = "ModifyIdentityIdFormat"
)

func (e *GETModifyIdentityIDFormatActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyIdentityIdFormat":
		*e = GETModifyIdentityIDFormatActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyIdentityIDFormatActionEnum: %s", s)
	}
}

// GETModifyIdentityIDFormatVersionEnum
type GETModifyIdentityIDFormatVersionEnum string

const (
	GETModifyIdentityIDFormatVersionEnumTwoThousandAndSixteen1115 GETModifyIdentityIDFormatVersionEnum = "2016-11-15"
)

func (e *GETModifyIdentityIDFormatVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETModifyIdentityIDFormatVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyIdentityIDFormatVersionEnum: %s", s)
	}
}

type GETModifyIdentityIDFormatQueryParams struct {
	Action GETModifyIdentityIDFormatActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify <code>all</code> to modify the ID format for all IAM users, IAM roles, and the root user of the account.
	PrincipalArn string `queryParam:"style=form,explode=true,name=PrincipalArn"`
	// <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>Alternatively, use the <code>all-current</code> option to include all resource types that are currently within their opt-in period for longer IDs.</p>
	Resource string `queryParam:"style=form,explode=true,name=Resource"`
	// Indicates whether the resource should use longer IDs (17-character IDs)
	UseLongIds bool                                 `queryParam:"style=form,explode=true,name=UseLongIds"`
	Version    GETModifyIdentityIDFormatVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETModifyIdentityIDFormatHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyIdentityIDFormatRequest struct {
	QueryParams GETModifyIdentityIDFormatQueryParams
	Headers     GETModifyIdentityIDFormatHeaders
}

type GETModifyIdentityIDFormatResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
