/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Financial Products are the tax wrapper investment vehicles offered by the Wealth Manager (e.g. General Investment Accounts, Stocks and Shares ISAs, SIPPs, LISAs etc.). Currently WealthOS supports General Investment Accounts (GIAs).
 *
 * @remarks
 *
 * The Financial Products endpoint returns all financial products and their configurations setup by the Wealth Manager via the WealthOS Admin UI.
 */
export class FinancialProducts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get All Financial Products
   *
   * @remarks
   * Returns all the financial products setup for the tenant in an array
   */
  getAllFinancialProducts(
    req: operations.GetAllFinancialProductsRequest,
    security: operations.GetAllFinancialProductsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllFinancialProductsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAllFinancialProductsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/tenant/financial-products/v1";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAllFinancialProductsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllFinancialProductsResponse =
        new operations.GetAllFinancialProductsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllFinancialProducts200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllFinancialProducts200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllFinancialProducts400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllFinancialProducts400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllFinancialProducts401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllFinancialProducts401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllFinancialProducts403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllFinancialProducts403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllFinancialProducts404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllFinancialProducts404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllFinancialProducts429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllFinancialProducts429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllFinancialProducts500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllFinancialProducts500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
