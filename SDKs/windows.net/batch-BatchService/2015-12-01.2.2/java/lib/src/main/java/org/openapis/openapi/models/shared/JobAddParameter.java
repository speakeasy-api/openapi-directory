/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * JobAddParameter - An Azure Batch job to add.
 */
public class JobAddParameter {
    /**
     * Gets or sets the list of common environment variable settings.  These environment variables are set for all tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commonEnvironmentSettings")
    public EnvironmentSetting[] commonEnvironmentSettings;

    public JobAddParameter withCommonEnvironmentSettings(EnvironmentSetting[] commonEnvironmentSettings) {
        this.commonEnvironmentSettings = commonEnvironmentSettings;
        return this;
    }
    
    /**
     * Specifies the execution constraints for jobs created on a schedule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("constraints")
    public JobConstraints constraints;

    public JobAddParameter withConstraints(JobConstraints constraints) {
        this.constraints = constraints;
        return this;
    }
    
    /**
     * Gets or sets the display name for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public JobAddParameter withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Gets or sets a string that uniquely identifies the job within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.
     */
    @JsonProperty("id")
    public String id;

    public JobAddParameter withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Specifies details of a Job Manager task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobManagerTask")
    public JobManagerTask jobManagerTask;

    public JobAddParameter withJobManagerTask(JobManagerTask jobManagerTask) {
        this.jobManagerTask = jobManagerTask;
        return this;
    }
    
    /**
     * A Job Preparation task to run before any tasks of the job on any given compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobPreparationTask")
    public JobPreparationTask jobPreparationTask;

    public JobAddParameter withJobPreparationTask(JobPreparationTask jobPreparationTask) {
        this.jobPreparationTask = jobPreparationTask;
        return this;
    }
    
    /**
     * A Job Release task to run on job completion on any compute node where the job has run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobReleaseTask")
    public JobReleaseTask jobReleaseTask;

    public JobAddParameter withJobReleaseTask(JobReleaseTask jobReleaseTask) {
        this.jobReleaseTask = jobReleaseTask;
        return this;
    }
    
    /**
     * Gets or sets a list of name-value pairs associated with the job as metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public MetadataItem[] metadata;

    public JobAddParameter withMetadata(MetadataItem[] metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Specifies how a job should be assigned to a pool.
     */
    @JsonProperty("poolInfo")
    public PoolInformation poolInfo;

    public JobAddParameter withPoolInfo(PoolInformation poolInfo) {
        this.poolInfo = poolInfo;
        return this;
    }
    
    /**
     * Gets or sets the priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public Integer priority;

    public JobAddParameter withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * Gets or sets the flag that determines if this job will use tasks with dependencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usesTaskDependencies")
    public Boolean usesTaskDependencies;

    public JobAddParameter withUsesTaskDependencies(Boolean usesTaskDependencies) {
        this.usesTaskDependencies = usesTaskDependencies;
        return this;
    }
    
    public JobAddParameter(@JsonProperty("id") String id, @JsonProperty("poolInfo") PoolInformation poolInfo) {
        this.id = id;
        this.poolInfo = poolInfo;
  }
}
