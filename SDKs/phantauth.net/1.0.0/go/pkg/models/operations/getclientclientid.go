// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetClientClientIDPathParams struct {
	// A client ID or email.
	ClientID string `pathParam:"style=simple,explode=false,name=client_id"`
}

type GetClientClientIDRequest struct {
	PathParams GetClientClientIDPathParams
}

// GetClientClientID200ApplicationJSON - OK
type GetClientClientID200ApplicationJSON struct {
	// URL of the Client's JSON representation.
	AtID *string `json:"@id,omitempty"`
	// OAuth 2.0 client identifier string.
	ClientID string `json:"client_id"`
	// Human-readable string name of the client to be presented to the end-user during authorization.
	ClientName *string `json:"client_name,omitempty"`
	// OAuth 2.0 client secret string.
	ClientSecret *string `json:"client_secret,omitempty"`
	// URL string of a web page providing information about the client.
	ClientURI *string `json:"client_uri,omitempty"`
	// Array of strings representing ways to contact people responsible for this client, typically email addresses.
	Contacts []interface{} `json:"contacts,omitempty"`
	// Array of OAuth 2.0 grant type strings that the client can use at the token endpoint.
	GrantTypes []interface{} `json:"grant_types,omitempty"`
	// Client's JSON Web Key Set [RFC7517] document value, which contains the client's public keys.  The value of this field MUST be a JSON object containing a valid JWK Set.
	Jwks []interface{} `json:"jwks,omitempty"`
	// URL string referencing the client's JSON Web Key (JWK) Set [RFC7517] document, which contains the client's public keys.
	JwksURI *string `json:"jwks_uri,omitempty"`
	// An email address used to generate a gravatar.com logo_uri.
	LogoEmail *string `json:"logo_email,omitempty"`
	// URL string that references a logo for the client.
	LogoURI *string `json:"logo_uri,omitempty"`
	// URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
	PolicyURI *string `json:"policy_uri,omitempty"`
	// Array of redirection URI strings for use in redirect-based flows such as the authorization code and implicit flows.
	RedirectUris []interface{} `json:"redirect_uris,omitempty"`
	// Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.
	ResponseTypes []interface{} `json:"response_types,omitempty"`
	// String containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
	Scope *string `json:"scope,omitempty"`
	// A unique identifier string (e.g., a Universally Unique Identifier (UUID)) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.
	SoftwareID *string `json:"software_id,omitempty"`
	// A version identifier string for the client software identified by software_id.
	SoftwareVersion *string `json:"software_version,omitempty"`
	// String indicator of the requested authentication method for the token endpoint.
	TokenEndpointAuthMethod *string `json:"token_endpoint_auth_method,omitempty"`
	// URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
	TosURI *string `json:"tos_uri,omitempty"`
}

type GetClientClientIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	GetClientClientID200ApplicationJSONObject *GetClientClientID200ApplicationJSON
}
