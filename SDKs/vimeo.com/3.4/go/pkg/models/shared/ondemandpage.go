// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OnDemandPagePictureSizes struct {
	// The height of the image.
	Height float64 `json:"height"`
	// The direct link to the image.
	Link string `json:"link"`
	// The direct link to the image with a play button overlay.
	LinkWithPlayButton *string `json:"link_with_play_button,omitempty"`
	// The width of the image.
	Width float64 `json:"width"`
}

// OnDemandPagePictureTypeEnum - The type of the picture:
//
// Option descriptions:
//   - `caution` - An image that is appropriate for all ages.
//   - `custom` - A custom image for the video.
//   - `default` - The default image for the video.
type OnDemandPagePictureTypeEnum string

const (
	OnDemandPagePictureTypeEnumCaution OnDemandPagePictureTypeEnum = "caution"
	OnDemandPagePictureTypeEnumCustom  OnDemandPagePictureTypeEnum = "custom"
	OnDemandPagePictureTypeEnumDefault OnDemandPagePictureTypeEnum = "default"
)

func (e *OnDemandPagePictureTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "caution":
		fallthrough
	case "custom":
		fallthrough
	case "default":
		*e = OnDemandPagePictureTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPagePictureTypeEnum: %s", s)
	}
}

// OnDemandPagePicture - The background image for the On Demand page on Vimeo.
type OnDemandPagePicture struct {
	// Whether this picture is the active picture for its parent resource.
	Active bool `json:"active"`
	// The upload URL for the picture. This field appears when you create the picture resource for the first time.
	Link *string `json:"link,omitempty"`
	// The picture's resource key string.
	ResourceKey string `json:"resource_key"`
	// An array containing reference information about all available image files.
	Sizes []OnDemandPagePictureSizes `json:"sizes"`
	// The type of the picture:
	//
	// Option descriptions:
	//  * `caution` - An image that is appropriate for all ages.
	//  * `custom` - A custom image for the video.
	//  * `default` - The default image for the video.
	//
	Type OnDemandPagePictureTypeEnum `json:"type"`
	// The picture's URI.
	URI string `json:"uri"`
}

// OnDemandPageColors - The primary and secondary colors used for rendering this On Demand page.
type OnDemandPageColors struct {
	// The hexadecimal color code for the page's primary color.
	Primary string `json:"primary"`
	// The hexadecimal color code for the page's secondary color.
	Secondary string `json:"secondary"`
}

type OnDemandPageEpisodesBuy struct {
	// Whether all the videos on this On Demand page can be purchased as a whole.
	Active bool `json:"active"`
	// The default price to buy an episode.
	Price float64 `json:"price"`
}

// OnDemandPageEpisodesRentPeriodEnum - The rental period for the video:
//
// Option descriptions:
//   - `1 day` - The rental period is one day.
//   - `1 month` - The rental period is one month.
//   - `1 week` - The rental period is one week.
//   - `1 year` - The rental period is one year.
//   - `2 day` - The rental period is two days.
//   - `24 hour` - The rental period is 24 hours.
//   - `3 day` - The rental period is three days.
//   - `3 month` - The rental period is three months.
//   - `30 day` - The rental period is 30 days.
//   - `48 hour` - The rental period is 48 hours.
//   - `6 month` - The rental period is six months.
//   - `60 day` - The rental period is 60 days.
//   - `7 day` - The rental period is 7 days.
//   - `72 hour` - The rental period is 72 hours.
type OnDemandPageEpisodesRentPeriodEnum string

const (
	OnDemandPageEpisodesRentPeriodEnumOneDay         OnDemandPageEpisodesRentPeriodEnum = "1 day"
	OnDemandPageEpisodesRentPeriodEnumOneMonth       OnDemandPageEpisodesRentPeriodEnum = "1 month"
	OnDemandPageEpisodesRentPeriodEnumOneWeek        OnDemandPageEpisodesRentPeriodEnum = "1 week"
	OnDemandPageEpisodesRentPeriodEnumOneYear        OnDemandPageEpisodesRentPeriodEnum = "1 year"
	OnDemandPageEpisodesRentPeriodEnumTwoDay         OnDemandPageEpisodesRentPeriodEnum = "2 day"
	OnDemandPageEpisodesRentPeriodEnumTwentyFourHour OnDemandPageEpisodesRentPeriodEnum = "24 hour"
	OnDemandPageEpisodesRentPeriodEnumThreeDay       OnDemandPageEpisodesRentPeriodEnum = "3 day"
	OnDemandPageEpisodesRentPeriodEnumThreeMonth     OnDemandPageEpisodesRentPeriodEnum = "3 month"
	OnDemandPageEpisodesRentPeriodEnumThirtyDay      OnDemandPageEpisodesRentPeriodEnum = "30 day"
	OnDemandPageEpisodesRentPeriodEnumFortyEightHour OnDemandPageEpisodesRentPeriodEnum = "48 hour"
	OnDemandPageEpisodesRentPeriodEnumSixMonth       OnDemandPageEpisodesRentPeriodEnum = "6 month"
	OnDemandPageEpisodesRentPeriodEnumSixtyDay       OnDemandPageEpisodesRentPeriodEnum = "60 day"
	OnDemandPageEpisodesRentPeriodEnumSevenDay       OnDemandPageEpisodesRentPeriodEnum = "7 day"
	OnDemandPageEpisodesRentPeriodEnumSeventyTwoHour OnDemandPageEpisodesRentPeriodEnum = "72 hour"
)

func (e *OnDemandPageEpisodesRentPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1 day":
		fallthrough
	case "1 month":
		fallthrough
	case "1 week":
		fallthrough
	case "1 year":
		fallthrough
	case "2 day":
		fallthrough
	case "24 hour":
		fallthrough
	case "3 day":
		fallthrough
	case "3 month":
		fallthrough
	case "30 day":
		fallthrough
	case "48 hour":
		fallthrough
	case "6 month":
		fallthrough
	case "60 day":
		fallthrough
	case "7 day":
		fallthrough
	case "72 hour":
		*e = OnDemandPageEpisodesRentPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageEpisodesRentPeriodEnum: %s", s)
	}
}

type OnDemandPageEpisodesRent struct {
	// Whether all the videos on this On Demand page can be rented as a whole.
	Active bool `json:"active"`
	// The rental period for the video:
	//
	// Option descriptions:
	//  * `1 day` - The rental period is one day.
	//  * `1 month` - The rental period is one month.
	//  * `1 week` - The rental period is one week.
	//  * `1 year` - The rental period is one year.
	//  * `2 day` - The rental period is two days.
	//  * `24 hour` - The rental period is 24 hours.
	//  * `3 day` - The rental period is three days.
	//  * `3 month` - The rental period is three months.
	//  * `30 day` - The rental period is 30 days.
	//  * `48 hour` - The rental period is 48 hours.
	//  * `6 month` - The rental period is six months.
	//  * `60 day` - The rental period is 60 days.
	//  * `7 day` - The rental period is 7 days.
	//  * `72 hour` - The rental period is 72 hours.
	//
	Period OnDemandPageEpisodesRentPeriodEnum `json:"period"`
	// The default price to rent an episode.
	Price float64 `json:"price"`
}

// OnDemandPageEpisodes - Information about this On Demand page's episodes, if the page is for a series.
type OnDemandPageEpisodes struct {
	Buy  OnDemandPageEpisodesBuy  `json:"buy"`
	Rent OnDemandPageEpisodesRent `json:"rent"`
}

// OnDemandPageMetadataConnectionsMetadataConnectionsComments - Information about the comments associated with this page.
type OnDemandPageMetadataConnectionsMetadataConnectionsComments struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of comments on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageMetadataConnectionsMetadataConnectionsGenres - Information about the genres associated with this page.
type OnDemandPageMetadataConnectionsMetadataConnectionsGenres struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of genres on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageMetadataConnectionsMetadataConnectionsLikes - Information about the likes associated with this page.
type OnDemandPageMetadataConnectionsMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageMetadataConnectionsMetadataConnectionsPictures - Information about the pictures associated with this page.
type OnDemandPageMetadataConnectionsMetadataConnectionsPictures struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of pictures on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageMetadataConnectionsMetadataConnectionsSeasons - Information about the seasons associated with this page.
type OnDemandPageMetadataConnectionsMetadataConnectionsSeasons struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of seasons on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageMetadataConnectionsMetadataConnectionsVideos - Information about the videos associated with this page.
type OnDemandPageMetadataConnectionsMetadataConnectionsVideos struct {
	// The total number of extra videos.
	ExtraTotal float64 `json:"extra_total"`
	// The total number of main videos.
	MainTotal float64 `json:"main_total"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
	// The total number of viewable videos.
	ViewableTotal float64 `json:"viewable_total"`
}

type OnDemandPageMetadataConnectionsMetadataConnections struct {
	// Information about the comments associated with this page.
	Comments OnDemandPageMetadataConnectionsMetadataConnectionsComments `json:"comments"`
	// Information about the genres associated with this page.
	Genres OnDemandPageMetadataConnectionsMetadataConnectionsGenres `json:"genres"`
	// Information about the likes associated with this page.
	Likes OnDemandPageMetadataConnectionsMetadataConnectionsLikes `json:"likes"`
	// Information about the pictures associated with this page.
	Pictures OnDemandPageMetadataConnectionsMetadataConnectionsPictures `json:"pictures"`
	// Information about the seasons associated with this page.
	Seasons OnDemandPageMetadataConnectionsMetadataConnectionsSeasons `json:"seasons"`
	// Information about the videos associated with this page.
	Videos OnDemandPageMetadataConnectionsMetadataConnectionsVideos `json:"videos"`
}

type OnDemandPageMetadataConnectionsMetadata struct {
	Connections OnDemandPageMetadataConnectionsMetadataConnections `json:"connections"`
}

// OnDemandPageMetadataConnections - A collection of information that is connected to this resource, including videos, genres, and pictures connections.
type OnDemandPageMetadataConnections struct {
	Metadata OnDemandPageMetadataConnectionsMetadata `json:"metadata"`
}

// OnDemandPageMetadata - Metadata about the On Demand page.
type OnDemandPageMetadata struct {
	// A collection of information that is connected to this resource, including videos, genres, and pictures connections.
	Connections OnDemandPageMetadataConnections `json:"connections"`
	// The user's available purchase interactions.
	Interactions PurchaseInteraction `json:"interactions"`
}

type OnDemandPagePreorder struct {
	// Whether this page is available for preorder.
	Active bool `json:"active"`
	// The time in ISO 8601 format when the preorder was cancelled.
	CancelTime string `json:"cancel_time"`
	// The time in ISO 8601 format when the preorder was released to the public.
	PublishTime string `json:"publish_time"`
	// The time in ISO 8601 format when the preorder started.
	Time string `json:"time"`
}

type OnDemandPagePublished struct {
	// Whether this On Demand page has been published.
	Enabled bool `json:"enabled"`
	// The time in IS 8601 format when this page was published.
	Time string `json:"time"`
}

// OnDemandPageSubscription - Information about subscribing to this On Demand page, if enabled.
type OnDemandPageSubscription struct {
	// Whether this product is active.
	Active bool `json:"active"`
	// The link to this product on Vimeo.
	Link string `json:"link"`
	// The product's rental period.
	Period *string `json:"period,omitempty"`
	// The accepted currencies and respective pricing for this product.
	Price map[string]interface{} `json:"price"`
}

// OnDemandPageVideoContextActionEnum - The contextual action:
//
// Option descriptions:
//   - `Added to` - An Added To action.
//   - `Appearance by` - An Appearance By action.
//   - `Liked by` - A Liked By action.
//   - `Uploaded by` - An Unloaded By action.
type OnDemandPageVideoContextActionEnum string

const (
	OnDemandPageVideoContextActionEnumAddedTo      OnDemandPageVideoContextActionEnum = "Added to"
	OnDemandPageVideoContextActionEnumAppearanceBy OnDemandPageVideoContextActionEnum = "Appearance by"
	OnDemandPageVideoContextActionEnumLikedBy      OnDemandPageVideoContextActionEnum = "Liked by"
	OnDemandPageVideoContextActionEnumUploadedBy   OnDemandPageVideoContextActionEnum = "Uploaded by"
)

func (e *OnDemandPageVideoContextActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Added to":
		fallthrough
	case "Appearance by":
		fallthrough
	case "Liked by":
		fallthrough
	case "Uploaded by":
		*e = OnDemandPageVideoContextActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoContextActionEnum: %s", s)
	}
}

// OnDemandPageVideoContext - The context of the video's subscription, if this video is part of a subscription.
type OnDemandPageVideoContext struct {
	// The contextual action:
	//
	// Option descriptions:
	//  * `Added to` - An Added To action.
	//  * `Appearance by` - An Appearance By action.
	//  * `Liked by` - A Liked By action.
	//  * `Uploaded by` - An Unloaded By action.
	//
	Action OnDemandPageVideoContextActionEnum `json:"action"`
	// The contextual resource: a user, group, or channel representation, or an object of a tag.
	Resource map[string]interface{} `json:"resource"`
	// The contextual resource type.
	ResourceType string `json:"resource_type"`
}

// OnDemandPageVideoLicenseEnum - The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
//
// Option descriptions:
//   - `by` - Attribution
//   - `by-nc` - Attribution Non-Commercial
//   - `by-nc-nd` - Attribution Non-Commercial No Derivatives
//   - `by-nc-sa` - Attribution Non-Commercial Share Alike
//   - `by-nd` - Attribution No Derivatives
//   - `by-sa` - Attribution Share Alike
//   - `cc0` - Public Domain Dedication
type OnDemandPageVideoLicenseEnum string

const (
	OnDemandPageVideoLicenseEnumBy     OnDemandPageVideoLicenseEnum = "by"
	OnDemandPageVideoLicenseEnumByNc   OnDemandPageVideoLicenseEnum = "by-nc"
	OnDemandPageVideoLicenseEnumByNcNd OnDemandPageVideoLicenseEnum = "by-nc-nd"
	OnDemandPageVideoLicenseEnumByNcSa OnDemandPageVideoLicenseEnum = "by-nc-sa"
	OnDemandPageVideoLicenseEnumByNd   OnDemandPageVideoLicenseEnum = "by-nd"
	OnDemandPageVideoLicenseEnumBySa   OnDemandPageVideoLicenseEnum = "by-sa"
	OnDemandPageVideoLicenseEnumCc0    OnDemandPageVideoLicenseEnum = "cc0"
)

func (e *OnDemandPageVideoLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "by":
		fallthrough
	case "by-nc":
		fallthrough
	case "by-nc-nd":
		fallthrough
	case "by-nc-sa":
		fallthrough
	case "by-nd":
		fallthrough
	case "by-sa":
		fallthrough
	case "cc0":
		*e = OnDemandPageVideoLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoLicenseEnum: %s", s)
	}
}

// OnDemandPageVideoMetadataConnectionsComments - Information about the comments on this video.
type OnDemandPageVideoMetadataConnectionsComments struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of comments on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataConnectionsCredits - Information about the users credited in this video.
type OnDemandPageVideoMetadataConnectionsCredits struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options,omitempty"`
	// The total number of users on this connection.
	Total *float64 `json:"total,omitempty"`
	// The API URI that resolves to the connection data.
	URI *string `json:"uri,omitempty"`
}

// OnDemandPageVideoMetadataConnectionsLikes - Information about the users who have liked this video.
type OnDemandPageVideoMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataConnectionsOndemand - Information about this video's ondemand data.
type OnDemandPageVideoMetadataConnectionsOndemand struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The On Demand connection resource key.
	ResourceKey string `json:"resource_key"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataConnectionsPictures - Information about this video's thumbnails.
type OnDemandPageVideoMetadataConnectionsPictures struct {
	// An array of HTTP methods allowed on this URI.
	Options []string `json:"options"`
	// Total number of thumbnails on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataConnectionsPlayback - The DRM playback status connection for this video.
type OnDemandPageVideoMetadataConnectionsPlayback struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataConnectionsRecommendations - The recommendations for this video.
type OnDemandPageVideoMetadataConnectionsRecommendations struct {
	// An array of HTTP methods allowed on this URI.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data.
	URI *string `json:"uri,omitempty"`
}

// OnDemandPageVideoMetadataConnectionsRelated - Related content for this video.
type OnDemandPageVideoMetadataConnectionsRelated struct {
	// An array of HTTP methods allowed on this URI.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data.
	URI *string `json:"uri,omitempty"`
}

// OnDemandPageVideoMetadataConnectionsSeason - Information about the video's season.
type OnDemandPageVideoMetadataConnectionsSeason struct {
	// The name of this season.
	Name string `json:"name"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataConnectionsTexttracks - Information about this video's text tracks.
type OnDemandPageVideoMetadataConnectionsTexttracks struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of text tracks on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataConnectionsTrailer - Information about this video's VOD trailer.
type OnDemandPageVideoMetadataConnectionsTrailer struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The trailer connection resource key.
	ResourceKey string `json:"resource_key"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataConnectionsUsersWithAccess - Information about the user privacy of this video, if the video privacy is `users`.
type OnDemandPageVideoMetadataConnectionsUsersWithAccess struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataConnectionsVersions - Information about the versions of this video.
type OnDemandPageVideoMetadataConnectionsVersions struct {
	// The URI of the current version of the video.
	CurrentURI *string `json:"current_uri,omitempty"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of versions on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataConnections - A list of resource URIs related to the video.
type OnDemandPageVideoMetadataConnections struct {
	// Information about the comments on this video.
	Comments OnDemandPageVideoMetadataConnectionsComments `json:"comments"`
	// Information about the users credited in this video.
	Credits OnDemandPageVideoMetadataConnectionsCredits `json:"credits"`
	// Information about the users who have liked this video.
	Likes OnDemandPageVideoMetadataConnectionsLikes `json:"likes"`
	// Information about this video's ondemand data.
	Ondemand OnDemandPageVideoMetadataConnectionsOndemand `json:"ondemand"`
	// Information about this video's thumbnails.
	Pictures OnDemandPageVideoMetadataConnectionsPictures `json:"pictures"`
	// The DRM playback status connection for this video.
	Playback OnDemandPageVideoMetadataConnectionsPlayback `json:"playback"`
	// The recommendations for this video.
	Recommendations OnDemandPageVideoMetadataConnectionsRecommendations `json:"recommendations"`
	// Related content for this video.
	Related OnDemandPageVideoMetadataConnectionsRelated `json:"related"`
	// Information about the video's season.
	Season OnDemandPageVideoMetadataConnectionsSeason `json:"season"`
	// Information about this video's text tracks.
	Texttracks OnDemandPageVideoMetadataConnectionsTexttracks `json:"texttracks"`
	// Information about this video's VOD trailer.
	Trailer OnDemandPageVideoMetadataConnectionsTrailer `json:"trailer"`
	// Information about the user privacy of this video, if the video privacy is `users`.
	UsersWithAccess OnDemandPageVideoMetadataConnectionsUsersWithAccess `json:"users_with_access"`
	// Information about the versions of this video.
	Versions OnDemandPageVideoMetadataConnectionsVersions `json:"versions"`
}

// OnDemandPageVideoMetadataInteractionsBuyDownloadEnum - The user's download access to this On Demand video:
//
// Option descriptions:
//   - `available` - The video is available for download.
//   - `purchased` - The user has purchased the video.
//   - `restricted` - The user isn't permitted to download the video.
//   - `unavailable` - The video isn't available for download.
type OnDemandPageVideoMetadataInteractionsBuyDownloadEnum string

const (
	OnDemandPageVideoMetadataInteractionsBuyDownloadEnumAvailable   OnDemandPageVideoMetadataInteractionsBuyDownloadEnum = "available"
	OnDemandPageVideoMetadataInteractionsBuyDownloadEnumPurchased   OnDemandPageVideoMetadataInteractionsBuyDownloadEnum = "purchased"
	OnDemandPageVideoMetadataInteractionsBuyDownloadEnumRestricted  OnDemandPageVideoMetadataInteractionsBuyDownloadEnum = "restricted"
	OnDemandPageVideoMetadataInteractionsBuyDownloadEnumUnavailable OnDemandPageVideoMetadataInteractionsBuyDownloadEnum = "unavailable"
)

func (e *OnDemandPageVideoMetadataInteractionsBuyDownloadEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "purchased":
		fallthrough
	case "restricted":
		fallthrough
	case "unavailable":
		*e = OnDemandPageVideoMetadataInteractionsBuyDownloadEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoMetadataInteractionsBuyDownloadEnum: %s", s)
	}
}

// OnDemandPageVideoMetadataInteractionsBuyStreamEnum - The user's streaming access to this On Demand video:
//
// Option descriptions:
//   - `available` - The video is available for streaming.
//   - `purchased` - The user has purchased the video.
//   - `restricted` - The user isn't permitted to stream the video.
//   - `unavailable` - The video isn't available for streaming
type OnDemandPageVideoMetadataInteractionsBuyStreamEnum string

const (
	OnDemandPageVideoMetadataInteractionsBuyStreamEnumAvailable   OnDemandPageVideoMetadataInteractionsBuyStreamEnum = "available"
	OnDemandPageVideoMetadataInteractionsBuyStreamEnumPurchased   OnDemandPageVideoMetadataInteractionsBuyStreamEnum = "purchased"
	OnDemandPageVideoMetadataInteractionsBuyStreamEnumRestricted  OnDemandPageVideoMetadataInteractionsBuyStreamEnum = "restricted"
	OnDemandPageVideoMetadataInteractionsBuyStreamEnumUnavailable OnDemandPageVideoMetadataInteractionsBuyStreamEnum = "unavailable"
)

func (e *OnDemandPageVideoMetadataInteractionsBuyStreamEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "purchased":
		fallthrough
	case "restricted":
		fallthrough
	case "unavailable":
		*e = OnDemandPageVideoMetadataInteractionsBuyStreamEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoMetadataInteractionsBuyStreamEnum: %s", s)
	}
}

// OnDemandPageVideoMetadataInteractionsBuy - The Buy interaction for a On Demand video.
type OnDemandPageVideoMetadataInteractionsBuy struct {
	// The currency code for the current user's region.
	Currency string `json:"currency"`
	// Formatted price to display to buy an On Demand video.
	DisplayPrice string `json:"display_price"`
	// The user's download access to this On Demand video:
	//
	// Option descriptions:
	//  * `available` - The video is available for download.
	//  * `purchased` - The user has purchased the video.
	//  * `restricted` - The user isn't permitted to download the video.
	//  * `unavailable` - The video isn't available for download.
	//
	Download OnDemandPageVideoMetadataInteractionsBuyDownloadEnum `json:"download"`
	// Whether the video has DRM.
	Drm bool `json:"drm"`
	// The URL to buy the On Demand video on Vimeo.
	Link string `json:"link"`
	// The numeric value of the price for buying the On Demand video.
	Price float64 `json:"price"`
	// The time in ISO 8601 format when the On Demand video was purchased.
	PurchaseTime string `json:"purchase_time"`
	// The user's streaming access to this On Demand video:
	//
	// Option descriptions:
	//  * `available` - The video is available for streaming.
	//  * `purchased` - The user has purchased the video.
	//  * `restricted` - The user isn't permitted to stream the video.
	//  * `unavailable` - The video isn't available for streaming
	//
	Stream OnDemandPageVideoMetadataInteractionsBuyStreamEnum `json:"stream"`
	// The product URI to purchase the On Demand video.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataInteractionsChannel - When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel.
type OnDemandPageVideoMetadataInteractionsChannel struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataInteractionsLike - Information about whether the authenticated user has liked this video.
type OnDemandPageVideoMetadataInteractionsLike struct {
	// Whether the user has liked the video.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the user liked the video.
	AddedTime string `json:"added_time"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataInteractionsRentStreamEnum - The user's streaming access to this On Demand video:
//
// Option descriptions:
//   - `available` - The video is available for streaming.
//   - `purchased` - The user has purchased the video.
//   - `restricted` - The user isn't permitted to stream the video.
//   - `unavailable` - The video isn't available for streaming.
type OnDemandPageVideoMetadataInteractionsRentStreamEnum string

const (
	OnDemandPageVideoMetadataInteractionsRentStreamEnumAvailable   OnDemandPageVideoMetadataInteractionsRentStreamEnum = "available"
	OnDemandPageVideoMetadataInteractionsRentStreamEnumPurchased   OnDemandPageVideoMetadataInteractionsRentStreamEnum = "purchased"
	OnDemandPageVideoMetadataInteractionsRentStreamEnumRestricted  OnDemandPageVideoMetadataInteractionsRentStreamEnum = "restricted"
	OnDemandPageVideoMetadataInteractionsRentStreamEnumUnavailable OnDemandPageVideoMetadataInteractionsRentStreamEnum = "unavailable"
)

func (e *OnDemandPageVideoMetadataInteractionsRentStreamEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "purchased":
		fallthrough
	case "restricted":
		fallthrough
	case "unavailable":
		*e = OnDemandPageVideoMetadataInteractionsRentStreamEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoMetadataInteractionsRentStreamEnum: %s", s)
	}
}

// OnDemandPageVideoMetadataInteractionsRent - The Rent interaction for an On Demand video.
type OnDemandPageVideoMetadataInteractionsRent struct {
	// The currency code for the current user's region.
	Currency string `json:"currency"`
	// Formatted price to display to rent an On Demand video.
	DisplayPrice string `json:"display_price"`
	// Whether the video has DRM.
	Drm bool `json:"drm"`
	// The time in ISO 8601 format when the rental period for the video expires.
	ExpiresTime string `json:"expires_time"`
	// The URL to rent the On Demand video on Vimeo.
	Link string `json:"link"`
	// The numeric value of the price for buying the On Demand video.
	Price float64 `json:"price"`
	// The time in ISO 8601 format when the On Demand video was rented.
	PurchaseTime string `json:"purchase_time"`
	// The user's streaming access to this On Demand video:
	//
	// Option descriptions:
	//  * `available` - The video is available for streaming.
	//  * `purchased` - The user has purchased the video.
	//  * `restricted` - The user isn't permitted to stream the video.
	//  * `unavailable` - The video isn't available for streaming.
	//
	Stream OnDemandPageVideoMetadataInteractionsRentStreamEnum `json:"stream"`
	// The product URI to rent the On Demand video.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataInteractionsReport - Information about where and how to report a video.
type OnDemandPageVideoMetadataInteractionsReport struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// A list of valid reasons for reporting a video.
	Reason []string `json:"reason"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataInteractionsSubscribe - Subscription information for an On Demand video.
type OnDemandPageVideoMetadataInteractionsSubscribe struct {
	// Whether the video has DRM.
	Drm *bool `json:"drm,omitempty"`
	// The time in ISO 8601 format when the subscription expires.
	ExpiresTime *string `json:"expires_time,omitempty"`
	// The tine in ISO 8601 format when the subscription was purchased.
	PurchaseTime *string `json:"purchase_time,omitempty"`
	// The stream type.
	Stream *string `json:"stream,omitempty"`
}

// OnDemandPageVideoMetadataInteractionsWatched - Information about removing this video from the user's list of watched videos.
type OnDemandPageVideoMetadataInteractionsWatched struct {
	// Whether the user has watched the video.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the user watched the video.
	AddedTime string `json:"added_time"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataInteractionsWatchlater - Information about whether this video appears on the authenticated user's Watch Later list.
type OnDemandPageVideoMetadataInteractionsWatchlater struct {
	// Whether the user has added the video to their Watch later list.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the user added the video to their Watch Later list.
	AddedTime string `json:"added_time"`
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoMetadataInteractions - A list of resource URIs related to the video.
type OnDemandPageVideoMetadataInteractions struct {
	// The Buy interaction for a On Demand video.
	Buy OnDemandPageVideoMetadataInteractionsBuy `json:"buy"`
	// When a video is referenced by a channel URI, if the user is a moderator of the channel, include information about removing the video from the channel.
	Channel OnDemandPageVideoMetadataInteractionsChannel `json:"channel"`
	// Information about whether the authenticated user has liked this video.
	Like OnDemandPageVideoMetadataInteractionsLike `json:"like"`
	// The Rent interaction for an On Demand video.
	Rent OnDemandPageVideoMetadataInteractionsRent `json:"rent"`
	// Information about where and how to report a video.
	Report OnDemandPageVideoMetadataInteractionsReport `json:"report"`
	// Subscription information for an On Demand video.
	Subscribe *OnDemandPageVideoMetadataInteractionsSubscribe `json:"subscribe,omitempty"`
	// Information about removing this video from the user's list of watched videos.
	Watched OnDemandPageVideoMetadataInteractionsWatched `json:"watched"`
	// Information about whether this video appears on the authenticated user's Watch Later list.
	Watchlater OnDemandPageVideoMetadataInteractionsWatchlater `json:"watchlater"`
}

// OnDemandPageVideoMetadata - The video's metadata.
type OnDemandPageVideoMetadata struct {
	// A list of resource URIs related to the video.
	Connections OnDemandPageVideoMetadataConnections `json:"connections"`
	// A list of resource URIs related to the video.
	Interactions OnDemandPageVideoMetadataInteractions `json:"interactions"`
}

// OnDemandPageVideoProjectMetadataConnectionsVideos - A standard connection object indicating how to get all the videos in this project.
type OnDemandPageVideoProjectMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoProjectMetadataConnections - A list of resource URIs related to the project.
type OnDemandPageVideoProjectMetadataConnections struct {
	// A standard connection object indicating how to get all the videos in this project.
	Videos OnDemandPageVideoProjectMetadataConnectionsVideos `json:"videos"`
}

// OnDemandPageVideoProjectMetadata - The project's metadata.
type OnDemandPageVideoProjectMetadata struct {
	// A list of resource URIs related to the project.
	Connections OnDemandPageVideoProjectMetadataConnections `json:"connections"`
}

// OnDemandPageVideoProject - Information about the folder that contains this video.
type OnDemandPageVideoProject struct {
	// The time in ISO 8601 format when the project was created.
	CreatedTime string `json:"created_time"`
	// The project's metadata.
	Metadata OnDemandPageVideoProjectMetadata `json:"metadata"`
	// The time in ISO 8601 format when the project was last modified.
	ModifiedTime string `json:"modified_time"`
	// The name of the folder.
	Name string `json:"name"`
	// The resource key string of the project.
	ResourceKey string `json:"resource_key"`
	// The URI of the project.
	URI string `json:"uri"`
	// The owner of the project.
	User User `json:"user"`
}

// OnDemandPageVideoPrivacyCommentsEnum - Who can comment on the video:
//
// Option descriptions:
//   - `anybody` - Anyone can comment on the video.
//   - `contacts` - Only contacts can comment on the video.
//   - `nobody` - No one can comment on the video.
type OnDemandPageVideoPrivacyCommentsEnum string

const (
	OnDemandPageVideoPrivacyCommentsEnumAnybody  OnDemandPageVideoPrivacyCommentsEnum = "anybody"
	OnDemandPageVideoPrivacyCommentsEnumContacts OnDemandPageVideoPrivacyCommentsEnum = "contacts"
	OnDemandPageVideoPrivacyCommentsEnumNobody   OnDemandPageVideoPrivacyCommentsEnum = "nobody"
)

func (e *OnDemandPageVideoPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = OnDemandPageVideoPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoPrivacyCommentsEnum: %s", s)
	}
}

// OnDemandPageVideoPrivacyEmbedEnum - The video's embed permission setting:
//
// Option descriptions:
//   - `private` - The video is private.
//   - `public` - Anyone can embed the video.
type OnDemandPageVideoPrivacyEmbedEnum string

const (
	OnDemandPageVideoPrivacyEmbedEnumPrivate OnDemandPageVideoPrivacyEmbedEnum = "private"
	OnDemandPageVideoPrivacyEmbedEnumPublic  OnDemandPageVideoPrivacyEmbedEnum = "public"
)

func (e *OnDemandPageVideoPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		*e = OnDemandPageVideoPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoPrivacyEmbedEnum: %s", s)
	}
}

// OnDemandPageVideoPrivacyViewEnum - The general privacy setting for the video:
//
// Option descriptions:
//   - `anybody` - Anyone can view the video.
//   - `contacts` - Only contacts can view the video.
//   - `disable` - Hide from vimeo
//   - `nobody` - No one besides the owner can view the video.
//   - `password` - Anyone with the video's password can view the video.
//   - `unlisted` - Not searchable from vimeo.com
//   - `users` - Only people with a Vimeo account can view the video.
type OnDemandPageVideoPrivacyViewEnum string

const (
	OnDemandPageVideoPrivacyViewEnumAnybody  OnDemandPageVideoPrivacyViewEnum = "anybody"
	OnDemandPageVideoPrivacyViewEnumContacts OnDemandPageVideoPrivacyViewEnum = "contacts"
	OnDemandPageVideoPrivacyViewEnumDisable  OnDemandPageVideoPrivacyViewEnum = "disable"
	OnDemandPageVideoPrivacyViewEnumNobody   OnDemandPageVideoPrivacyViewEnum = "nobody"
	OnDemandPageVideoPrivacyViewEnumPassword OnDemandPageVideoPrivacyViewEnum = "password"
	OnDemandPageVideoPrivacyViewEnumUnlisted OnDemandPageVideoPrivacyViewEnum = "unlisted"
	OnDemandPageVideoPrivacyViewEnumUsers    OnDemandPageVideoPrivacyViewEnum = "users"
)

func (e *OnDemandPageVideoPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = OnDemandPageVideoPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoPrivacyViewEnum: %s", s)
	}
}

// OnDemandPageVideoPrivacy - The video's privacy setting.
type OnDemandPageVideoPrivacy struct {
	// Whether the video can be added to collections.
	Add bool `json:"add"`
	// Who can comment on the video:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can comment on the video.
	//  * `contacts` - Only contacts can comment on the video.
	//  * `nobody` - No one can comment on the video.
	//
	Comments OnDemandPageVideoPrivacyCommentsEnum `json:"comments"`
	// The video's download permission setting.
	Download bool `json:"download"`
	// The video's embed permission setting:
	//
	// Option descriptions:
	//  * `private` - The video is private.
	//  * `public` - Anyone can embed the video.
	//
	Embed OnDemandPageVideoPrivacyEmbedEnum `json:"embed"`
	// The general privacy setting for the video:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the video.
	//  * `contacts` - Only contacts can view the video.
	//  * `disable` - Hide from vimeo
	//  * `nobody` - No one besides the owner can view the video.
	//  * `password` - Anyone with the video's password can view the video.
	//  * `unlisted` - Not searchable from vimeo.com
	//  * `users` - Only people with a Vimeo account can view the video.
	//
	View OnDemandPageVideoPrivacyViewEnum `json:"view"`
}

type OnDemandPageVideoSpatialDirectorTimeline struct {
	// The director timeline pitch, from -90 (minimum) to 90 (maximum).
	Pitch *float64 `json:"pitch,omitempty"`
	// The director timeline roll.
	Roll *float64 `json:"roll,omitempty"`
	// The director timeline time code.
	TimeCode *float64 `json:"time_code,omitempty"`
	// The director timeline yaw, from 0 (minimum) to 360 (maximum).
	Yaw *float64 `json:"yaw,omitempty"`
}

// OnDemandPageVideoSpatialProjectionEnum - The 360 spatial projection:
//
// Option descriptions:
//   - `cubical` - The spatial projection is cubical.
//   - `cylindrical` - The spatial projection is cylindrical.
//   - `dome` - The spatial projection is dome-shaped.
//   - `equirectangular` - The spatial projection is equirectangular.
//   - `pyramid` - The spatial projection is pyramid-shaped.
type OnDemandPageVideoSpatialProjectionEnum string

const (
	OnDemandPageVideoSpatialProjectionEnumCubical         OnDemandPageVideoSpatialProjectionEnum = "cubical"
	OnDemandPageVideoSpatialProjectionEnumCylindrical     OnDemandPageVideoSpatialProjectionEnum = "cylindrical"
	OnDemandPageVideoSpatialProjectionEnumDome            OnDemandPageVideoSpatialProjectionEnum = "dome"
	OnDemandPageVideoSpatialProjectionEnumEquirectangular OnDemandPageVideoSpatialProjectionEnum = "equirectangular"
	OnDemandPageVideoSpatialProjectionEnumPyramid         OnDemandPageVideoSpatialProjectionEnum = "pyramid"
)

func (e *OnDemandPageVideoSpatialProjectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cubical":
		fallthrough
	case "cylindrical":
		fallthrough
	case "dome":
		fallthrough
	case "equirectangular":
		fallthrough
	case "pyramid":
		*e = OnDemandPageVideoSpatialProjectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoSpatialProjectionEnum: %s", s)
	}
}

// OnDemandPageVideoSpatialStereoFormatEnum - The 360 stereo format:
//
// Option descriptions:
//   - `left-right` - The stereo format is left-right.
//   - `mono` - The audio is monaural.
//   - `top-bottom` - The stereo format is top-bottom.
type OnDemandPageVideoSpatialStereoFormatEnum string

const (
	OnDemandPageVideoSpatialStereoFormatEnumLeftRight OnDemandPageVideoSpatialStereoFormatEnum = "left-right"
	OnDemandPageVideoSpatialStereoFormatEnumMono      OnDemandPageVideoSpatialStereoFormatEnum = "mono"
	OnDemandPageVideoSpatialStereoFormatEnumTopBottom OnDemandPageVideoSpatialStereoFormatEnum = "top-bottom"
)

func (e *OnDemandPageVideoSpatialStereoFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "left-right":
		fallthrough
	case "mono":
		fallthrough
	case "top-bottom":
		*e = OnDemandPageVideoSpatialStereoFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoSpatialStereoFormatEnum: %s", s)
	}
}

// OnDemandPageVideoSpatial - 360 spatial data.
type OnDemandPageVideoSpatial struct {
	// 360 director timeline.
	DirectorTimeline []OnDemandPageVideoSpatialDirectorTimeline `json:"director_timeline"`
	// The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.
	FieldOfView float64 `json:"field_of_view"`
	// The 360 spatial projection:
	//
	// Option descriptions:
	//  * `cubical` - The spatial projection is cubical.
	//  * `cylindrical` - The spatial projection is cylindrical.
	//  * `dome` - The spatial projection is dome-shaped.
	//  * `equirectangular` - The spatial projection is equirectangular.
	//  * `pyramid` - The spatial projection is pyramid-shaped.
	//
	Projection OnDemandPageVideoSpatialProjectionEnum `json:"projection"`
	// The 360 stereo format:
	//
	// Option descriptions:
	//  * `left-right` - The stereo format is left-right.
	//  * `mono` - The audio is monaural.
	//  * `top-bottom` - The stereo format is top-bottom.
	//
	StereoFormat OnDemandPageVideoSpatialStereoFormatEnum `json:"stereo_format"`
}

// OnDemandPageVideoStats - A collection of stats associated with this video.
type OnDemandPageVideoStats struct {
	// The current total number of times that the video has been played.
	Plays float64 `json:"plays"`
}

// OnDemandPageVideoStatusEnum - The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
//
// Option descriptions:
//   - `available` - The video is available.
//   - `quota_exceeded` - The user's quota is exceeded with this video.
//   - `total_cap_exceeded` - The user has exceeded their total cap with this video.
//   - `transcode_starting` - Transcoding is beginning for the video.
//   - `transcoding` - Transcoding is underway for the video.
//   - `transcoding_error` - There was an error in transcoding the video.
//   - `unavailable` - The video is unavailable.
//   - `uploading` - The video is being uploaded.
//   - `uploading_error` - There was an error in uploading the video.
type OnDemandPageVideoStatusEnum string

const (
	OnDemandPageVideoStatusEnumAvailable         OnDemandPageVideoStatusEnum = "available"
	OnDemandPageVideoStatusEnumQuotaExceeded     OnDemandPageVideoStatusEnum = "quota_exceeded"
	OnDemandPageVideoStatusEnumTotalCapExceeded  OnDemandPageVideoStatusEnum = "total_cap_exceeded"
	OnDemandPageVideoStatusEnumTranscodeStarting OnDemandPageVideoStatusEnum = "transcode_starting"
	OnDemandPageVideoStatusEnumTranscoding       OnDemandPageVideoStatusEnum = "transcoding"
	OnDemandPageVideoStatusEnumTranscodingError  OnDemandPageVideoStatusEnum = "transcoding_error"
	OnDemandPageVideoStatusEnumUnavailable       OnDemandPageVideoStatusEnum = "unavailable"
	OnDemandPageVideoStatusEnumUploading         OnDemandPageVideoStatusEnum = "uploading"
	OnDemandPageVideoStatusEnumUploadingError    OnDemandPageVideoStatusEnum = "uploading_error"
)

func (e *OnDemandPageVideoStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "quota_exceeded":
		fallthrough
	case "total_cap_exceeded":
		fallthrough
	case "transcode_starting":
		fallthrough
	case "transcoding":
		fallthrough
	case "transcoding_error":
		fallthrough
	case "unavailable":
		fallthrough
	case "uploading":
		fallthrough
	case "uploading_error":
		*e = OnDemandPageVideoStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoStatusEnum: %s", s)
	}
}

// OnDemandPageVideoTranscodeStatusEnum - Status code for this video's availability.
type OnDemandPageVideoTranscodeStatusEnum string

const (
	OnDemandPageVideoTranscodeStatusEnumComplete   OnDemandPageVideoTranscodeStatusEnum = "complete"
	OnDemandPageVideoTranscodeStatusEnumError      OnDemandPageVideoTranscodeStatusEnum = "error"
	OnDemandPageVideoTranscodeStatusEnumInProgress OnDemandPageVideoTranscodeStatusEnum = "in_progress"
)

func (e *OnDemandPageVideoTranscodeStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "complete":
		fallthrough
	case "error":
		fallthrough
	case "in_progress":
		*e = OnDemandPageVideoTranscodeStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoTranscodeStatusEnum: %s", s)
	}
}

// OnDemandPageVideoTranscode - The transcode information for a video upload.
type OnDemandPageVideoTranscode struct {
	// Status code for this video's availability.
	Status *OnDemandPageVideoTranscodeStatusEnum `json:"status,omitempty"`
}

// OnDemandPageVideoUploadApproachEnum - The approach for uploading the video.
type OnDemandPageVideoUploadApproachEnum string

const (
	OnDemandPageVideoUploadApproachEnumPost      OnDemandPageVideoUploadApproachEnum = "post"
	OnDemandPageVideoUploadApproachEnumPull      OnDemandPageVideoUploadApproachEnum = "pull"
	OnDemandPageVideoUploadApproachEnumStreaming OnDemandPageVideoUploadApproachEnum = "streaming"
	OnDemandPageVideoUploadApproachEnumTus       OnDemandPageVideoUploadApproachEnum = "tus"
)

func (e *OnDemandPageVideoUploadApproachEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "post":
		fallthrough
	case "pull":
		fallthrough
	case "streaming":
		fallthrough
	case "tus":
		*e = OnDemandPageVideoUploadApproachEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoUploadApproachEnum: %s", s)
	}
}

// OnDemandPageVideoUploadStatusEnum - The status code for the availability of the uploaded video:
//
// Option descriptions:
//   - `complete` - The upload is complete.
//   - `error` - The upload ended with an error.
//   - `in_progress` - The upload is underway.
type OnDemandPageVideoUploadStatusEnum string

const (
	OnDemandPageVideoUploadStatusEnumComplete   OnDemandPageVideoUploadStatusEnum = "complete"
	OnDemandPageVideoUploadStatusEnumError      OnDemandPageVideoUploadStatusEnum = "error"
	OnDemandPageVideoUploadStatusEnumInProgress OnDemandPageVideoUploadStatusEnum = "in_progress"
)

func (e *OnDemandPageVideoUploadStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "complete":
		fallthrough
	case "error":
		fallthrough
	case "in_progress":
		*e = OnDemandPageVideoUploadStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoUploadStatusEnum: %s", s)
	}
}

// OnDemandPageVideoUpload - The upload information for this video.
type OnDemandPageVideoUpload struct {
	// The approach for uploading the video.
	Approach *OnDemandPageVideoUploadApproachEnum `json:"approach,omitempty"`
	// The URI for completing the upload.
	CompleteURI *string `json:"complete_uri,omitempty"`
	// The HTML form for uploading a video through the post approach.
	Form *string `json:"form,omitempty"`
	// The link of the video to capture through the pull approach.
	Link *string `json:"link,omitempty"`
	// The redirect URL for the upload app.
	RedirectURL *string `json:"redirect_url,omitempty"`
	// The file size in bytes of the uploaded video.
	Size *float64 `json:"size,omitempty"`
	// The status code for the availability of the uploaded video:
	//
	// Option descriptions:
	//  * `complete` - The upload is complete.
	//  * `error` - The upload ended with an error.
	//  * `in_progress` - The upload is underway.
	//
	Status OnDemandPageVideoUploadStatusEnum `json:"status"`
	// The link for sending video file data.
	UploadLink *string `json:"upload_link,omitempty"`
}

// OnDemandPageVideoUserAccountEnum - The user's account type:
//
// Option descriptions:
//   - `basic` - The user has a Vimeo Basic subscription.
//   - `business` - The user has a Vimeo Business subscription.
//   - `live_business` - The user has a Vimeo Business Live subscription.
//   - `live_premium` - The user has a Vimeo Premium subscription.
//   - `live_pro` - The user has a Vimeo PRO Live subscription.
//   - `plus` - The user has a Vimeo Plus subscription.
//   - `pro` - The user has a Vimeo Pro subscription.
//   - `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
//   - `producer` - The user has a Vimeo Producer subscription.
type OnDemandPageVideoUserAccountEnum string

const (
	OnDemandPageVideoUserAccountEnumBasic        OnDemandPageVideoUserAccountEnum = "basic"
	OnDemandPageVideoUserAccountEnumBusiness     OnDemandPageVideoUserAccountEnum = "business"
	OnDemandPageVideoUserAccountEnumLiveBusiness OnDemandPageVideoUserAccountEnum = "live_business"
	OnDemandPageVideoUserAccountEnumLivePremium  OnDemandPageVideoUserAccountEnum = "live_premium"
	OnDemandPageVideoUserAccountEnumLivePro      OnDemandPageVideoUserAccountEnum = "live_pro"
	OnDemandPageVideoUserAccountEnumPlus         OnDemandPageVideoUserAccountEnum = "plus"
	OnDemandPageVideoUserAccountEnumPro          OnDemandPageVideoUserAccountEnum = "pro"
	OnDemandPageVideoUserAccountEnumProUnlimited OnDemandPageVideoUserAccountEnum = "pro_unlimited"
	OnDemandPageVideoUserAccountEnumProducer     OnDemandPageVideoUserAccountEnum = "producer"
)

func (e *OnDemandPageVideoUserAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "basic":
		fallthrough
	case "business":
		fallthrough
	case "live_business":
		fallthrough
	case "live_premium":
		fallthrough
	case "live_pro":
		fallthrough
	case "plus":
		fallthrough
	case "pro":
		fallthrough
	case "pro_unlimited":
		fallthrough
	case "producer":
		*e = OnDemandPageVideoUserAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoUserAccountEnum: %s", s)
	}
}

// OnDemandPageVideoUserContentFilterEnum - The user's content filters:
//
// Option descriptions:
//   - `drugs` - Drugs or alcohol use.
//   - `language` - Profanity or sexually suggestive content.
//   - `nudity` - Nudity.
//   - `safe` - Suitable for all audiences.
//   - `unrated` - No rating.
//   - `violence` - Violent or graphic content.
type OnDemandPageVideoUserContentFilterEnum string

const (
	OnDemandPageVideoUserContentFilterEnumDrugs    OnDemandPageVideoUserContentFilterEnum = "drugs"
	OnDemandPageVideoUserContentFilterEnumLanguage OnDemandPageVideoUserContentFilterEnum = "language"
	OnDemandPageVideoUserContentFilterEnumNudity   OnDemandPageVideoUserContentFilterEnum = "nudity"
	OnDemandPageVideoUserContentFilterEnumSafe     OnDemandPageVideoUserContentFilterEnum = "safe"
	OnDemandPageVideoUserContentFilterEnumUnrated  OnDemandPageVideoUserContentFilterEnum = "unrated"
	OnDemandPageVideoUserContentFilterEnumViolence OnDemandPageVideoUserContentFilterEnum = "violence"
)

func (e *OnDemandPageVideoUserContentFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "drugs":
		fallthrough
	case "language":
		fallthrough
	case "nudity":
		fallthrough
	case "safe":
		fallthrough
	case "unrated":
		fallthrough
	case "violence":
		*e = OnDemandPageVideoUserContentFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoUserContentFilterEnum: %s", s)
	}
}

// OnDemandPageVideoUserMetadataConnectionsAlbums - Information about the albums created by this user.
type OnDemandPageVideoUserMetadataConnectionsAlbums struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of albums on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsAppearances - Information about the appearances of this user in other videos.
type OnDemandPageVideoUserMetadataConnectionsAppearances struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of appearances on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsBlock - Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
type OnDemandPageVideoUserMetadataConnectionsBlock struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsCategories - Information about this user's followed categories.
type OnDemandPageVideoUserMetadataConnectionsCategories struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of categories on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsChannels - Information about this user's subscribed channels.
type OnDemandPageVideoUserMetadataConnectionsChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsFeed - Information about this user's feed.
type OnDemandPageVideoUserMetadataConnectionsFeed struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsFolders - Information about this user's folders.
type OnDemandPageVideoUserMetadataConnectionsFolders struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of folders on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsFollowers - Information about the user's followers.
type OnDemandPageVideoUserMetadataConnectionsFollowers struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of followers on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsFollowing - Information about the users that the current user is following.
type OnDemandPageVideoUserMetadataConnectionsFollowing struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsGroups - Information about the groups created by this user.
type OnDemandPageVideoUserMetadataConnectionsGroups struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of groups on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsLikes - Information about the videos that this user has liked.
type OnDemandPageVideoUserMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsModeratedChannels - Information about the channels that this user moderates.
type OnDemandPageVideoUserMetadataConnectionsModeratedChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsPictures - Information about this user's portraits.
type OnDemandPageVideoUserMetadataConnectionsPictures struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of pictures on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsPortfolios - Information about this user's portfolios.
type OnDemandPageVideoUserMetadataConnectionsPortfolios struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of portfolios on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsRecommendedChannels - A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
type OnDemandPageVideoUserMetadataConnectionsRecommendedChannels struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of channels on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsRecommendedUsers - A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
type OnDemandPageVideoUserMetadataConnectionsRecommendedUsers struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsShared - Information about the videos that have been shared with this user.
type OnDemandPageVideoUserMetadataConnectionsShared struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsVideos - Information about the videos uploaded by this user.
type OnDemandPageVideoUserMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsWatchedVideos - Information about the videos that this user has watched.
type OnDemandPageVideoUserMetadataConnectionsWatchedVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnectionsWatchlater - Information about the videos that this user wants to watch later.
type OnDemandPageVideoUserMetadataConnectionsWatchlater struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataConnections - The list of resource URIs related to the user.
type OnDemandPageVideoUserMetadataConnections struct {
	// Information about the albums created by this user.
	Albums OnDemandPageVideoUserMetadataConnectionsAlbums `json:"albums"`
	// Information about the appearances of this user in other videos.
	Appearances OnDemandPageVideoUserMetadataConnectionsAppearances `json:"appearances"`
	// Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
	Block OnDemandPageVideoUserMetadataConnectionsBlock `json:"block"`
	// Information about this user's followed categories.
	Categories OnDemandPageVideoUserMetadataConnectionsCategories `json:"categories"`
	// Information about this user's subscribed channels.
	Channels OnDemandPageVideoUserMetadataConnectionsChannels `json:"channels"`
	// Information about this user's feed.
	Feed OnDemandPageVideoUserMetadataConnectionsFeed `json:"feed"`
	// Information about this user's folders.
	Folders OnDemandPageVideoUserMetadataConnectionsFolders `json:"folders"`
	// Information about the user's followers.
	Followers OnDemandPageVideoUserMetadataConnectionsFollowers `json:"followers"`
	// Information about the users that the current user is following.
	Following OnDemandPageVideoUserMetadataConnectionsFollowing `json:"following"`
	// Information about the groups created by this user.
	Groups OnDemandPageVideoUserMetadataConnectionsGroups `json:"groups"`
	// Information about the videos that this user has liked.
	Likes OnDemandPageVideoUserMetadataConnectionsLikes `json:"likes"`
	// Information about the channels that this user moderates.
	ModeratedChannels OnDemandPageVideoUserMetadataConnectionsModeratedChannels `json:"moderated_channels"`
	// Information about this user's portraits.
	Pictures OnDemandPageVideoUserMetadataConnectionsPictures `json:"pictures"`
	// Information about this user's portfolios.
	Portfolios OnDemandPageVideoUserMetadataConnectionsPortfolios `json:"portfolios"`
	// A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedChannels OnDemandPageVideoUserMetadataConnectionsRecommendedChannels `json:"recommended_channels"`
	// A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedUsers OnDemandPageVideoUserMetadataConnectionsRecommendedUsers `json:"recommended_users"`
	// Information about the videos that have been shared with this user.
	Shared OnDemandPageVideoUserMetadataConnectionsShared `json:"shared"`
	// Information about the videos uploaded by this user.
	Videos OnDemandPageVideoUserMetadataConnectionsVideos `json:"videos"`
	// Information about the videos that this user has watched.
	WatchedVideos OnDemandPageVideoUserMetadataConnectionsWatchedVideos `json:"watched_videos"`
	// Information about the videos that this user wants to watch later.
	Watchlater OnDemandPageVideoUserMetadataConnectionsWatchlater `json:"watchlater"`
}

type OnDemandPageVideoUserMetadataInteractionsAddPrivacyUser struct {
	// An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI *string `json:"uri,omitempty"`
}

// OnDemandPageVideoUserMetadataInteractionsBlock - Information related to the block status of this user.
type OnDemandPageVideoUserMetadataInteractionsBlock struct {
	// Whether a user is blocking the current user.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the block occurred, or the null value if no block exists.
	AddedTime string `json:"added_time"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to block or unblock the user.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataInteractionsFollow - Information related to the followed status of this user.
type OnDemandPageVideoUserMetadataInteractionsFollow struct {
	// Whether a user is following the current user.
	Added bool `json:"added"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to follow the user.
	URI string `json:"uri"`
}

// OnDemandPageVideoUserMetadataInteractionsReport - Information regarding where and how to report a user.
type OnDemandPageVideoUserMetadataInteractionsReport struct {
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// List of valid reasons for reporting a video.
	Reason []string `json:"reason"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

type OnDemandPageVideoUserMetadataInteractions struct {
	AddPrivacyUser *OnDemandPageVideoUserMetadataInteractionsAddPrivacyUser `json:"add_privacy_user,omitempty"`
	// Information related to the block status of this user.
	Block OnDemandPageVideoUserMetadataInteractionsBlock `json:"block"`
	// Information related to the followed status of this user.
	Follow OnDemandPageVideoUserMetadataInteractionsFollow `json:"follow"`
	// Information regarding where and how to report a user.
	Report OnDemandPageVideoUserMetadataInteractionsReport `json:"report"`
}

// OnDemandPageVideoUserMetadata - The user's metadata.
type OnDemandPageVideoUserMetadata struct {
	// The list of resource URIs related to the user.
	Connections  OnDemandPageVideoUserMetadataConnections  `json:"connections"`
	Interactions OnDemandPageVideoUserMetadataInteractions `json:"interactions"`
}

// OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum - The user's privacy preference for comments:
//
// Option descriptions:
//   - `anybody` - Anyone can comment on the user's videos.
//   - `contacts` - Only contacts can comment on the user's videos.
//   - `nobody` - No one can comment on the user's videos.
type OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum string

const (
	OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnumAnybody  OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum = "anybody"
	OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnumContacts OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum = "contacts"
	OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnumNobody   OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum = "nobody"
)

func (e *OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum: %s", s)
	}
}

// OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum - The user's privacy preference for embeds:
//
// Option descriptions:
//   - `private` - Only the user can embed their own videos.
//   - `public` - Anyone can embed the user's videos.
//   - `whitelist` - Only those on the whitelist can embed the user's videos.
type OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum string

const (
	OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnumPrivate   OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum = "private"
	OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnumPublic    OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum = "public"
	OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnumWhitelist OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum = "whitelist"
)

func (e *OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum: %s", s)
	}
}

// OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum - The user's privacy preference for views:
//
// Option descriptions:
//   - `anybody` - Anyone can view the user's videos.
//   - `contacts` - Only contacts can view the user's videos.
//   - `disable` - Views are disabled for the user's videos.
//   - `nobody` - No one except the user can view the user's videos.
//   - `password` - Only those with the password can view the user's videos.
//   - `unlisted` - Anybody can view the user's videos if they have a link.
//   - `users` - Only other Vimeo members can view the user's videos.
type OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum string

const (
	OnDemandPageVideoUserPreferencesVideosPrivacyViewEnumAnybody  OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum = "anybody"
	OnDemandPageVideoUserPreferencesVideosPrivacyViewEnumContacts OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum = "contacts"
	OnDemandPageVideoUserPreferencesVideosPrivacyViewEnumDisable  OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum = "disable"
	OnDemandPageVideoUserPreferencesVideosPrivacyViewEnumNobody   OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum = "nobody"
	OnDemandPageVideoUserPreferencesVideosPrivacyViewEnumPassword OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum = "password"
	OnDemandPageVideoUserPreferencesVideosPrivacyViewEnumUnlisted OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum = "unlisted"
	OnDemandPageVideoUserPreferencesVideosPrivacyViewEnumUsers    OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum = "users"
)

func (e *OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum: %s", s)
	}
}

type OnDemandPageVideoUserPreferencesVideosPrivacy struct {
	// Whether other users can add the user's videos.
	Add *bool `json:"add,omitempty"`
	// The user's privacy preference for comments:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can comment on the user's videos.
	//  * `contacts` - Only contacts can comment on the user's videos.
	//  * `nobody` - No one can comment on the user's videos.
	//
	Comments *OnDemandPageVideoUserPreferencesVideosPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether other users can download the user's videos.
	Download *bool `json:"download,omitempty"`
	// The user's privacy preference for embeds:
	//
	// Option descriptions:
	//  * `private` - Only the user can embed their own videos.
	//  * `public` - Anyone can embed the user's videos.
	//  * `whitelist` - Only those on the whitelist can embed the user's videos.
	//
	Embed *OnDemandPageVideoUserPreferencesVideosPrivacyEmbedEnum `json:"embed,omitempty"`
	// The user's privacy preference for views:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the user's videos.
	//  * `contacts` - Only contacts can view the user's videos.
	//  * `disable` - Views are disabled for the user's videos.
	//  * `nobody` - No one except the user can view the user's videos.
	//  * `password` - Only those with the password can view the user's videos.
	//  * `unlisted` - Anybody can view the user's videos if they have a link.
	//  * `users` - Only other Vimeo members can view the user's videos.
	//
	View *OnDemandPageVideoUserPreferencesVideosPrivacyViewEnum `json:"view,omitempty"`
}

type OnDemandPageVideoUserPreferencesVideos struct {
	Privacy *OnDemandPageVideoUserPreferencesVideosPrivacy `json:"privacy,omitempty"`
}

type OnDemandPageVideoUserPreferences struct {
	Videos *OnDemandPageVideoUserPreferencesVideos `json:"videos,omitempty"`
}

// OnDemandPageVideoUserUploadQuotaLifetime - Information about the user's lifetime upload usage.
type OnDemandPageVideoUserUploadQuotaLifetime struct {
	// The number of bytes remaining in your lifetime maximum.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload across the lifetime of your account.
	Max float64 `json:"max"`
	// The number of bytes that you've already uploaded against your lifetime limit.
	Used float64 `json:"used"`
}

// OnDemandPageVideoUserUploadQuotaPeriodic - Information about the user's usage for the current period.
type OnDemandPageVideoUserUploadQuotaPeriodic struct {
	// The number of bytes remaining in your upload quota for the current period.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload per period.
	Max float64 `json:"max"`
	// The time in ISO 8601 format when your upload quota resets.
	ResetDate string `json:"reset_date"`
	// The number of bytes that you've already uploaded against your quota in the current period.
	Used float64 `json:"used"`
}

// OnDemandPageVideoUserUploadQuotaSpaceShowingEnum - Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
type OnDemandPageVideoUserUploadQuotaSpaceShowingEnum string

const (
	OnDemandPageVideoUserUploadQuotaSpaceShowingEnumLifetime OnDemandPageVideoUserUploadQuotaSpaceShowingEnum = "lifetime"
	OnDemandPageVideoUserUploadQuotaSpaceShowingEnumPeriodic OnDemandPageVideoUserUploadQuotaSpaceShowingEnum = "periodic"
)

func (e *OnDemandPageVideoUserUploadQuotaSpaceShowingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lifetime":
		fallthrough
	case "periodic":
		*e = OnDemandPageVideoUserUploadQuotaSpaceShowingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageVideoUserUploadQuotaSpaceShowingEnum: %s", s)
	}
}

// OnDemandPageVideoUserUploadQuotaSpace - Information about the user's upload space remaining for the current period.
type OnDemandPageVideoUserUploadQuotaSpace struct {
	// The number of bytes remaining in your upload quota.
	Free float64 `json:"free"`
	// The maximum number of bytes allotted to your upload quota.
	Max float64 `json:"max"`
	// Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
	Showing OnDemandPageVideoUserUploadQuotaSpaceShowingEnum `json:"showing"`
	// The number of bytes that you've already uploaded against your quota.
	Used float64 `json:"used"`
}

// OnDemandPageVideoUserUploadQuota - Appears only when the user has upload access and is looking at their own user record.
type OnDemandPageVideoUserUploadQuota struct {
	// Information about the user's lifetime upload usage.
	Lifetime OnDemandPageVideoUserUploadQuotaLifetime `json:"lifetime"`
	// Information about the user's usage for the current period.
	Periodic OnDemandPageVideoUserUploadQuotaPeriodic `json:"periodic"`
	// Information about the user's upload space remaining for the current period.
	Space OnDemandPageVideoUserUploadQuotaSpace `json:"space"`
}

type OnDemandPageVideoUserWebsites struct {
	// The website's description.
	Description string `json:"description"`
	// The URL of the website.
	Link string `json:"link"`
	// The name of the website.
	Name string `json:"name"`
}

// OnDemandPageVideoUser - The video owner.
type OnDemandPageVideoUser struct {
	// The user's account type:
	//
	// Option descriptions:
	//  * `basic` - The user has a Vimeo Basic subscription.
	//  * `business` - The user has a Vimeo Business subscription.
	//  * `live_business` - The user has a Vimeo Business Live subscription.
	//  * `live_premium` - The user has a Vimeo Premium subscription.
	//  * `live_pro` - The user has a Vimeo PRO Live subscription.
	//  * `plus` - The user has a Vimeo Plus subscription.
	//  * `pro` - The user has a Vimeo Pro subscription.
	//  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
	//  * `producer` - The user has a Vimeo Producer subscription.
	//
	Account OnDemandPageVideoUserAccountEnum `json:"account"`
	// The user's bio.
	Bio string `json:"bio"`
	// The user's content filters:
	//
	// Option descriptions:
	//  * `drugs` - Drugs or alcohol use.
	//  * `language` - Profanity or sexually suggestive content.
	//  * `nudity` - Nudity.
	//  * `safe` - Suitable for all audiences.
	//  * `unrated` - No rating.
	//  * `violence` - Violent or graphic content.
	//
	ContentFilter *OnDemandPageVideoUserContentFilterEnum `json:"content_filter,omitempty"`
	// The time in ISO 8601 format when the user account was created.
	CreatedTime string `json:"created_time"`
	// The user's email address. This data requires a bearer token with the `email` scope.
	Email *string `json:"email,omitempty"`
	// The absolute URL of this user's profile page.
	Link string `json:"link"`
	// The user's location.
	Location string `json:"location"`
	// The user's metadata.
	Metadata OnDemandPageVideoUserMetadata `json:"metadata"`
	// The user's display name.
	Name string `json:"name"`
	// The active portrait of this user.
	Pictures    Picture                           `json:"pictures"`
	Preferences *OnDemandPageVideoUserPreferences `json:"preferences,omitempty"`
	// The user's resource key string.
	ResourceKey string `json:"resource_key"`
	// Appears only when the user has upload access and is looking at their own user record.
	UploadQuota OnDemandPageVideoUserUploadQuota `json:"upload_quota"`
	// The user's canonical relative URI.
	URI string `json:"uri"`
	// The user's websites.
	Websites []OnDemandPageVideoUserWebsites `json:"websites"`
}

// OnDemandPageVideo - The trailer for this On Demand page.
type OnDemandPageVideo struct {
	// The categories to which this video belongs.
	Categories []Category `json:"categories"`
	// The content ratings of this video.
	ContentRating []string `json:"content_rating"`
	// The context of the video's subscription, if this video is part of a subscription.
	Context OnDemandPageVideoContext `json:"context"`
	// The time in ISO 8601 format when the video was created.
	CreatedTime string `json:"created_time"`
	// A brief explanation of the video's content.
	Description string `json:"description"`
	// The video's duration in seconds.
	Duration float64 `json:"duration"`
	// Information about embedding this video.
	Embed EmbedSettings `json:"embed"`
	// The video's height in pixels.
	Height float64 `json:"height"`
	// The video's primary language.
	Language string `json:"language"`
	// The time in ISO 8601 format when the user last modified the video.
	LastUserActionEventDate *string `json:"last_user_action_event_date,omitempty"`
	// The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:
	//
	// Option descriptions:
	//  * `by` - Attribution
	//  * `by-nc` - Attribution Non-Commercial
	//  * `by-nc-nd` - Attribution Non-Commercial No Derivatives
	//  * `by-nc-sa` - Attribution Non-Commercial Share Alike
	//  * `by-nd` - Attribution No Derivatives
	//  * `by-sa` - Attribution Share Alike
	//  * `cc0` - Public Domain Dedication
	//
	License OnDemandPageVideoLicenseEnum `json:"license"`
	// The link to the video.
	Link string `json:"link"`
	// The video's metadata.
	Metadata OnDemandPageVideoMetadata `json:"metadata"`
	// The time in ISO 8601 format when the video metadata was last modified.
	ModifiedTime string `json:"modified_time"`
	// The video's title.
	Name string `json:"name"`
	// Information about the folder that contains this video.
	ParentFolder *OnDemandPageVideoProject `json:"parent_folder,omitempty"`
	// The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope.
	Password *string `json:"password,omitempty"`
	// The active picture for this video.
	Pictures Picture `json:"pictures"`
	// The video's privacy setting.
	Privacy OnDemandPageVideoPrivacy `json:"privacy"`
	// The time in ISO 8601 format when the video was released.
	ReleaseTime string `json:"release_time"`
	// The resource key string of the video.
	ResourceKey string `json:"resource_key"`
	// 360 spatial data.
	Spatial OnDemandPageVideoSpatial `json:"spatial"`
	// A collection of stats associated with this video.
	Stats OnDemandPageVideoStats `json:"stats"`
	// The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.
	//
	// Option descriptions:
	//  * `available` - The video is available.
	//  * `quota_exceeded` - The user's quota is exceeded with this video.
	//  * `total_cap_exceeded` - The user has exceeded their total cap with this video.
	//  * `transcode_starting` - Transcoding is beginning for the video.
	//  * `transcoding` - Transcoding is underway for the video.
	//  * `transcoding_error` - There was an error in transcoding the video.
	//  * `unavailable` - The video is unavailable.
	//  * `uploading` - The video is being uploaded.
	//  * `uploading_error` - There was an error in uploading the video.
	//
	Status OnDemandPageVideoStatusEnum `json:"status"`
	// An array of all tags assigned to this video.
	Tags []Tag `json:"tags"`
	// The transcode information for a video upload.
	Transcode OnDemandPageVideoTranscode `json:"transcode"`
	// The upload information for this video.
	Upload OnDemandPageVideoUpload `json:"upload"`
	// The video's canonical relative URI.
	URI string `json:"uri"`
	// The video owner.
	User OnDemandPageVideoUser `json:"user"`
	// The video's width in pixels.
	Width float64 `json:"width"`
}

// OnDemandPageTypeEnum - Whether this On Demand page is for a film or a series.
//
// Option descriptions:
//   - `film` - The On Demand page is for a film.
//   - `series` - The On Demand page is for a series.
type OnDemandPageTypeEnum string

const (
	OnDemandPageTypeEnumFilm   OnDemandPageTypeEnum = "film"
	OnDemandPageTypeEnumSeries OnDemandPageTypeEnum = "series"
)

func (e *OnDemandPageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "film":
		fallthrough
	case "series":
		*e = OnDemandPageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageTypeEnum: %s", s)
	}
}

// OnDemandPageUserAccountEnum - The user's account type:
//
// Option descriptions:
//   - `basic` - The user has a Vimeo Basic subscription.
//   - `business` - The user has a Vimeo Business subscription.
//   - `live_business` - The user has a Vimeo Business Live subscription.
//   - `live_premium` - The user has a Vimeo Premium subscription.
//   - `live_pro` - The user has a Vimeo PRO Live subscription.
//   - `plus` - The user has a Vimeo Plus subscription.
//   - `pro` - The user has a Vimeo Pro subscription.
//   - `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
//   - `producer` - The user has a Vimeo Producer subscription.
type OnDemandPageUserAccountEnum string

const (
	OnDemandPageUserAccountEnumBasic        OnDemandPageUserAccountEnum = "basic"
	OnDemandPageUserAccountEnumBusiness     OnDemandPageUserAccountEnum = "business"
	OnDemandPageUserAccountEnumLiveBusiness OnDemandPageUserAccountEnum = "live_business"
	OnDemandPageUserAccountEnumLivePremium  OnDemandPageUserAccountEnum = "live_premium"
	OnDemandPageUserAccountEnumLivePro      OnDemandPageUserAccountEnum = "live_pro"
	OnDemandPageUserAccountEnumPlus         OnDemandPageUserAccountEnum = "plus"
	OnDemandPageUserAccountEnumPro          OnDemandPageUserAccountEnum = "pro"
	OnDemandPageUserAccountEnumProUnlimited OnDemandPageUserAccountEnum = "pro_unlimited"
	OnDemandPageUserAccountEnumProducer     OnDemandPageUserAccountEnum = "producer"
)

func (e *OnDemandPageUserAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "basic":
		fallthrough
	case "business":
		fallthrough
	case "live_business":
		fallthrough
	case "live_premium":
		fallthrough
	case "live_pro":
		fallthrough
	case "plus":
		fallthrough
	case "pro":
		fallthrough
	case "pro_unlimited":
		fallthrough
	case "producer":
		*e = OnDemandPageUserAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageUserAccountEnum: %s", s)
	}
}

// OnDemandPageUserContentFilterEnum - The user's content filters:
//
// Option descriptions:
//   - `drugs` - Drugs or alcohol use.
//   - `language` - Profanity or sexually suggestive content.
//   - `nudity` - Nudity.
//   - `safe` - Suitable for all audiences.
//   - `unrated` - No rating.
//   - `violence` - Violent or graphic content.
type OnDemandPageUserContentFilterEnum string

const (
	OnDemandPageUserContentFilterEnumDrugs    OnDemandPageUserContentFilterEnum = "drugs"
	OnDemandPageUserContentFilterEnumLanguage OnDemandPageUserContentFilterEnum = "language"
	OnDemandPageUserContentFilterEnumNudity   OnDemandPageUserContentFilterEnum = "nudity"
	OnDemandPageUserContentFilterEnumSafe     OnDemandPageUserContentFilterEnum = "safe"
	OnDemandPageUserContentFilterEnumUnrated  OnDemandPageUserContentFilterEnum = "unrated"
	OnDemandPageUserContentFilterEnumViolence OnDemandPageUserContentFilterEnum = "violence"
)

func (e *OnDemandPageUserContentFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "drugs":
		fallthrough
	case "language":
		fallthrough
	case "nudity":
		fallthrough
	case "safe":
		fallthrough
	case "unrated":
		fallthrough
	case "violence":
		*e = OnDemandPageUserContentFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageUserContentFilterEnum: %s", s)
	}
}

// OnDemandPageUserMetadataConnectionsAlbums - Information about the albums created by this user.
type OnDemandPageUserMetadataConnectionsAlbums struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of albums on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsAppearances - Information about the appearances of this user in other videos.
type OnDemandPageUserMetadataConnectionsAppearances struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of appearances on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsBlock - Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
type OnDemandPageUserMetadataConnectionsBlock struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsCategories - Information about this user's followed categories.
type OnDemandPageUserMetadataConnectionsCategories struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of categories on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsChannels - Information about this user's subscribed channels.
type OnDemandPageUserMetadataConnectionsChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsFeed - Information about this user's feed.
type OnDemandPageUserMetadataConnectionsFeed struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsFolders - Information about this user's folders.
type OnDemandPageUserMetadataConnectionsFolders struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of folders on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsFollowers - Information about the user's followers.
type OnDemandPageUserMetadataConnectionsFollowers struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of followers on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsFollowing - Information about the users that the current user is following.
type OnDemandPageUserMetadataConnectionsFollowing struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsGroups - Information about the groups created by this user.
type OnDemandPageUserMetadataConnectionsGroups struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of groups on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsLikes - Information about the videos that this user has liked.
type OnDemandPageUserMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsModeratedChannels - Information about the channels that this user moderates.
type OnDemandPageUserMetadataConnectionsModeratedChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsPictures - Information about this user's portraits.
type OnDemandPageUserMetadataConnectionsPictures struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of pictures on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsPortfolios - Information about this user's portfolios.
type OnDemandPageUserMetadataConnectionsPortfolios struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of portfolios on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsRecommendedChannels - A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
type OnDemandPageUserMetadataConnectionsRecommendedChannels struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of channels on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsRecommendedUsers - A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
type OnDemandPageUserMetadataConnectionsRecommendedUsers struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsShared - Information about the videos that have been shared with this user.
type OnDemandPageUserMetadataConnectionsShared struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsVideos - Information about the videos uploaded by this user.
type OnDemandPageUserMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsWatchedVideos - Information about the videos that this user has watched.
type OnDemandPageUserMetadataConnectionsWatchedVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnectionsWatchlater - Information about the videos that this user wants to watch later.
type OnDemandPageUserMetadataConnectionsWatchlater struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataConnections - The list of resource URIs related to the user.
type OnDemandPageUserMetadataConnections struct {
	// Information about the albums created by this user.
	Albums OnDemandPageUserMetadataConnectionsAlbums `json:"albums"`
	// Information about the appearances of this user in other videos.
	Appearances OnDemandPageUserMetadataConnectionsAppearances `json:"appearances"`
	// Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
	Block OnDemandPageUserMetadataConnectionsBlock `json:"block"`
	// Information about this user's followed categories.
	Categories OnDemandPageUserMetadataConnectionsCategories `json:"categories"`
	// Information about this user's subscribed channels.
	Channels OnDemandPageUserMetadataConnectionsChannels `json:"channels"`
	// Information about this user's feed.
	Feed OnDemandPageUserMetadataConnectionsFeed `json:"feed"`
	// Information about this user's folders.
	Folders OnDemandPageUserMetadataConnectionsFolders `json:"folders"`
	// Information about the user's followers.
	Followers OnDemandPageUserMetadataConnectionsFollowers `json:"followers"`
	// Information about the users that the current user is following.
	Following OnDemandPageUserMetadataConnectionsFollowing `json:"following"`
	// Information about the groups created by this user.
	Groups OnDemandPageUserMetadataConnectionsGroups `json:"groups"`
	// Information about the videos that this user has liked.
	Likes OnDemandPageUserMetadataConnectionsLikes `json:"likes"`
	// Information about the channels that this user moderates.
	ModeratedChannels OnDemandPageUserMetadataConnectionsModeratedChannels `json:"moderated_channels"`
	// Information about this user's portraits.
	Pictures OnDemandPageUserMetadataConnectionsPictures `json:"pictures"`
	// Information about this user's portfolios.
	Portfolios OnDemandPageUserMetadataConnectionsPortfolios `json:"portfolios"`
	// A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedChannels OnDemandPageUserMetadataConnectionsRecommendedChannels `json:"recommended_channels"`
	// A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedUsers OnDemandPageUserMetadataConnectionsRecommendedUsers `json:"recommended_users"`
	// Information about the videos that have been shared with this user.
	Shared OnDemandPageUserMetadataConnectionsShared `json:"shared"`
	// Information about the videos uploaded by this user.
	Videos OnDemandPageUserMetadataConnectionsVideos `json:"videos"`
	// Information about the videos that this user has watched.
	WatchedVideos OnDemandPageUserMetadataConnectionsWatchedVideos `json:"watched_videos"`
	// Information about the videos that this user wants to watch later.
	Watchlater OnDemandPageUserMetadataConnectionsWatchlater `json:"watchlater"`
}

type OnDemandPageUserMetadataInteractionsAddPrivacyUser struct {
	// An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI *string `json:"uri,omitempty"`
}

// OnDemandPageUserMetadataInteractionsBlock - Information related to the block status of this user.
type OnDemandPageUserMetadataInteractionsBlock struct {
	// Whether a user is blocking the current user.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the block occurred, or the null value if no block exists.
	AddedTime string `json:"added_time"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to block or unblock the user.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataInteractionsFollow - Information related to the followed status of this user.
type OnDemandPageUserMetadataInteractionsFollow struct {
	// Whether a user is following the current user.
	Added bool `json:"added"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to follow the user.
	URI string `json:"uri"`
}

// OnDemandPageUserMetadataInteractionsReport - Information regarding where and how to report a user.
type OnDemandPageUserMetadataInteractionsReport struct {
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// List of valid reasons for reporting a video.
	Reason []string `json:"reason"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

type OnDemandPageUserMetadataInteractions struct {
	AddPrivacyUser *OnDemandPageUserMetadataInteractionsAddPrivacyUser `json:"add_privacy_user,omitempty"`
	// Information related to the block status of this user.
	Block OnDemandPageUserMetadataInteractionsBlock `json:"block"`
	// Information related to the followed status of this user.
	Follow OnDemandPageUserMetadataInteractionsFollow `json:"follow"`
	// Information regarding where and how to report a user.
	Report OnDemandPageUserMetadataInteractionsReport `json:"report"`
}

// OnDemandPageUserMetadata - The user's metadata.
type OnDemandPageUserMetadata struct {
	// The list of resource URIs related to the user.
	Connections  OnDemandPageUserMetadataConnections  `json:"connections"`
	Interactions OnDemandPageUserMetadataInteractions `json:"interactions"`
}

// OnDemandPageUserPreferencesVideosPrivacyCommentsEnum - The user's privacy preference for comments:
//
// Option descriptions:
//   - `anybody` - Anyone can comment on the user's videos.
//   - `contacts` - Only contacts can comment on the user's videos.
//   - `nobody` - No one can comment on the user's videos.
type OnDemandPageUserPreferencesVideosPrivacyCommentsEnum string

const (
	OnDemandPageUserPreferencesVideosPrivacyCommentsEnumAnybody  OnDemandPageUserPreferencesVideosPrivacyCommentsEnum = "anybody"
	OnDemandPageUserPreferencesVideosPrivacyCommentsEnumContacts OnDemandPageUserPreferencesVideosPrivacyCommentsEnum = "contacts"
	OnDemandPageUserPreferencesVideosPrivacyCommentsEnumNobody   OnDemandPageUserPreferencesVideosPrivacyCommentsEnum = "nobody"
)

func (e *OnDemandPageUserPreferencesVideosPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = OnDemandPageUserPreferencesVideosPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageUserPreferencesVideosPrivacyCommentsEnum: %s", s)
	}
}

// OnDemandPageUserPreferencesVideosPrivacyEmbedEnum - The user's privacy preference for embeds:
//
// Option descriptions:
//   - `private` - Only the user can embed their own videos.
//   - `public` - Anyone can embed the user's videos.
//   - `whitelist` - Only those on the whitelist can embed the user's videos.
type OnDemandPageUserPreferencesVideosPrivacyEmbedEnum string

const (
	OnDemandPageUserPreferencesVideosPrivacyEmbedEnumPrivate   OnDemandPageUserPreferencesVideosPrivacyEmbedEnum = "private"
	OnDemandPageUserPreferencesVideosPrivacyEmbedEnumPublic    OnDemandPageUserPreferencesVideosPrivacyEmbedEnum = "public"
	OnDemandPageUserPreferencesVideosPrivacyEmbedEnumWhitelist OnDemandPageUserPreferencesVideosPrivacyEmbedEnum = "whitelist"
)

func (e *OnDemandPageUserPreferencesVideosPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = OnDemandPageUserPreferencesVideosPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageUserPreferencesVideosPrivacyEmbedEnum: %s", s)
	}
}

// OnDemandPageUserPreferencesVideosPrivacyViewEnum - The user's privacy preference for views:
//
// Option descriptions:
//   - `anybody` - Anyone can view the user's videos.
//   - `contacts` - Only contacts can view the user's videos.
//   - `disable` - Views are disabled for the user's videos.
//   - `nobody` - No one except the user can view the user's videos.
//   - `password` - Only those with the password can view the user's videos.
//   - `unlisted` - Anybody can view the user's videos if they have a link.
//   - `users` - Only other Vimeo members can view the user's videos.
type OnDemandPageUserPreferencesVideosPrivacyViewEnum string

const (
	OnDemandPageUserPreferencesVideosPrivacyViewEnumAnybody  OnDemandPageUserPreferencesVideosPrivacyViewEnum = "anybody"
	OnDemandPageUserPreferencesVideosPrivacyViewEnumContacts OnDemandPageUserPreferencesVideosPrivacyViewEnum = "contacts"
	OnDemandPageUserPreferencesVideosPrivacyViewEnumDisable  OnDemandPageUserPreferencesVideosPrivacyViewEnum = "disable"
	OnDemandPageUserPreferencesVideosPrivacyViewEnumNobody   OnDemandPageUserPreferencesVideosPrivacyViewEnum = "nobody"
	OnDemandPageUserPreferencesVideosPrivacyViewEnumPassword OnDemandPageUserPreferencesVideosPrivacyViewEnum = "password"
	OnDemandPageUserPreferencesVideosPrivacyViewEnumUnlisted OnDemandPageUserPreferencesVideosPrivacyViewEnum = "unlisted"
	OnDemandPageUserPreferencesVideosPrivacyViewEnumUsers    OnDemandPageUserPreferencesVideosPrivacyViewEnum = "users"
)

func (e *OnDemandPageUserPreferencesVideosPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = OnDemandPageUserPreferencesVideosPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageUserPreferencesVideosPrivacyViewEnum: %s", s)
	}
}

type OnDemandPageUserPreferencesVideosPrivacy struct {
	// Whether other users can add the user's videos.
	Add *bool `json:"add,omitempty"`
	// The user's privacy preference for comments:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can comment on the user's videos.
	//  * `contacts` - Only contacts can comment on the user's videos.
	//  * `nobody` - No one can comment on the user's videos.
	//
	Comments *OnDemandPageUserPreferencesVideosPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether other users can download the user's videos.
	Download *bool `json:"download,omitempty"`
	// The user's privacy preference for embeds:
	//
	// Option descriptions:
	//  * `private` - Only the user can embed their own videos.
	//  * `public` - Anyone can embed the user's videos.
	//  * `whitelist` - Only those on the whitelist can embed the user's videos.
	//
	Embed *OnDemandPageUserPreferencesVideosPrivacyEmbedEnum `json:"embed,omitempty"`
	// The user's privacy preference for views:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the user's videos.
	//  * `contacts` - Only contacts can view the user's videos.
	//  * `disable` - Views are disabled for the user's videos.
	//  * `nobody` - No one except the user can view the user's videos.
	//  * `password` - Only those with the password can view the user's videos.
	//  * `unlisted` - Anybody can view the user's videos if they have a link.
	//  * `users` - Only other Vimeo members can view the user's videos.
	//
	View *OnDemandPageUserPreferencesVideosPrivacyViewEnum `json:"view,omitempty"`
}

type OnDemandPageUserPreferencesVideos struct {
	Privacy *OnDemandPageUserPreferencesVideosPrivacy `json:"privacy,omitempty"`
}

type OnDemandPageUserPreferences struct {
	Videos *OnDemandPageUserPreferencesVideos `json:"videos,omitempty"`
}

// OnDemandPageUserUploadQuotaLifetime - Information about the user's lifetime upload usage.
type OnDemandPageUserUploadQuotaLifetime struct {
	// The number of bytes remaining in your lifetime maximum.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload across the lifetime of your account.
	Max float64 `json:"max"`
	// The number of bytes that you've already uploaded against your lifetime limit.
	Used float64 `json:"used"`
}

// OnDemandPageUserUploadQuotaPeriodic - Information about the user's usage for the current period.
type OnDemandPageUserUploadQuotaPeriodic struct {
	// The number of bytes remaining in your upload quota for the current period.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload per period.
	Max float64 `json:"max"`
	// The time in ISO 8601 format when your upload quota resets.
	ResetDate string `json:"reset_date"`
	// The number of bytes that you've already uploaded against your quota in the current period.
	Used float64 `json:"used"`
}

// OnDemandPageUserUploadQuotaSpaceShowingEnum - Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
type OnDemandPageUserUploadQuotaSpaceShowingEnum string

const (
	OnDemandPageUserUploadQuotaSpaceShowingEnumLifetime OnDemandPageUserUploadQuotaSpaceShowingEnum = "lifetime"
	OnDemandPageUserUploadQuotaSpaceShowingEnumPeriodic OnDemandPageUserUploadQuotaSpaceShowingEnum = "periodic"
)

func (e *OnDemandPageUserUploadQuotaSpaceShowingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lifetime":
		fallthrough
	case "periodic":
		*e = OnDemandPageUserUploadQuotaSpaceShowingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OnDemandPageUserUploadQuotaSpaceShowingEnum: %s", s)
	}
}

// OnDemandPageUserUploadQuotaSpace - Information about the user's upload space remaining for the current period.
type OnDemandPageUserUploadQuotaSpace struct {
	// The number of bytes remaining in your upload quota.
	Free float64 `json:"free"`
	// The maximum number of bytes allotted to your upload quota.
	Max float64 `json:"max"`
	// Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
	Showing OnDemandPageUserUploadQuotaSpaceShowingEnum `json:"showing"`
	// The number of bytes that you've already uploaded against your quota.
	Used float64 `json:"used"`
}

// OnDemandPageUserUploadQuota - Appears only when the user has upload access and is looking at their own user record.
type OnDemandPageUserUploadQuota struct {
	// Information about the user's lifetime upload usage.
	Lifetime OnDemandPageUserUploadQuotaLifetime `json:"lifetime"`
	// Information about the user's usage for the current period.
	Periodic OnDemandPageUserUploadQuotaPeriodic `json:"periodic"`
	// Information about the user's upload space remaining for the current period.
	Space OnDemandPageUserUploadQuotaSpace `json:"space"`
}

type OnDemandPageUserWebsites struct {
	// The website's description.
	Description string `json:"description"`
	// The URL of the website.
	Link string `json:"link"`
	// The name of the website.
	Name string `json:"name"`
}

// OnDemandPageUser - The user who created this On Demand page.
type OnDemandPageUser struct {
	// The user's account type:
	//
	// Option descriptions:
	//  * `basic` - The user has a Vimeo Basic subscription.
	//  * `business` - The user has a Vimeo Business subscription.
	//  * `live_business` - The user has a Vimeo Business Live subscription.
	//  * `live_premium` - The user has a Vimeo Premium subscription.
	//  * `live_pro` - The user has a Vimeo PRO Live subscription.
	//  * `plus` - The user has a Vimeo Plus subscription.
	//  * `pro` - The user has a Vimeo Pro subscription.
	//  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
	//  * `producer` - The user has a Vimeo Producer subscription.
	//
	Account OnDemandPageUserAccountEnum `json:"account"`
	// The user's bio.
	Bio string `json:"bio"`
	// The user's content filters:
	//
	// Option descriptions:
	//  * `drugs` - Drugs or alcohol use.
	//  * `language` - Profanity or sexually suggestive content.
	//  * `nudity` - Nudity.
	//  * `safe` - Suitable for all audiences.
	//  * `unrated` - No rating.
	//  * `violence` - Violent or graphic content.
	//
	ContentFilter *OnDemandPageUserContentFilterEnum `json:"content_filter,omitempty"`
	// The time in ISO 8601 format when the user account was created.
	CreatedTime string `json:"created_time"`
	// The user's email address. This data requires a bearer token with the `email` scope.
	Email *string `json:"email,omitempty"`
	// The absolute URL of this user's profile page.
	Link string `json:"link"`
	// The user's location.
	Location string `json:"location"`
	// The user's metadata.
	Metadata OnDemandPageUserMetadata `json:"metadata"`
	// The user's display name.
	Name string `json:"name"`
	// The active portrait of this user.
	Pictures    Picture                      `json:"pictures"`
	Preferences *OnDemandPageUserPreferences `json:"preferences,omitempty"`
	// The user's resource key string.
	ResourceKey string `json:"resource_key"`
	// Appears only when the user has upload access and is looking at their own user record.
	UploadQuota OnDemandPageUserUploadQuota `json:"upload_quota"`
	// The user's canonical relative URI.
	URI string `json:"uri"`
	// The user's websites.
	Websites []OnDemandPageUserWebsites `json:"websites"`
}

// OnDemandPage - The On Demand page was created.
type OnDemandPage struct {
	// The background image for the On Demand page on Vimeo.
	Background OnDemandPagePicture `json:"background"`
	// The primary and secondary colors used for rendering this On Demand page.
	Colors OnDemandPageColors `json:"colors"`
	// An array of the page's content ratings.
	ContentRating []string `json:"content_rating"`
	// The time in ISO 8601 format when the page was created.
	CreatedTime *string `json:"created_time,omitempty"`
	// The description of this On Demand page.
	Description string `json:"description"`
	// The link to this page on its own domain.
	DomainLink string `json:"domain_link"`
	// Information about this On Demand page's episodes, if the page is for a series.
	Episodes OnDemandPageEpisodes `json:"episodes"`
	// This On Demand page's film, if it is a film.
	Film *Video `json:"film,omitempty"`
	// All the genres assigned to this page.
	Genres []OnDemandGenre `json:"genres"`
	// The link to the page on Vimeo.
	Link string `json:"link"`
	// Metadata about the On Demand page.
	Metadata OnDemandPageMetadata `json:"metadata"`
	// he time in ISO 8601 format when the page was last modified.
	ModifiedTime *string `json:"modified_time,omitempty"`
	// A descriptive title of this On Demand page.
	Name string `json:"name"`
	// The active poster for this On Demand page.
	Pictures  OnDemandPagePicture   `json:"pictures"`
	Preorder  OnDemandPagePreorder  `json:"preorder"`
	Published OnDemandPagePublished `json:"published"`
	// The rating of this page.
	Rating float64 `json:"rating"`
	// The VOD resource key.
	ResourceKey string `json:"resource_key"`
	// The creator-designated SKU for this On Demand page.
	Sku *string `json:"sku,omitempty"`
	// Information about subscribing to this On Demand page, if enabled.
	Subscription OnDemandPageSubscription `json:"subscription"`
	// The graphical theme for this On Demand page.
	Theme string `json:"theme"`
	// The thumbnail image for the On Demand page on Vimeo.
	Thumbnail OnDemandPagePicture `json:"thumbnail"`
	// The trailer for this On Demand page.
	Trailer OnDemandPageVideo `json:"trailer"`
	// Whether this On Demand page is for a film or a series.
	//
	// Option descriptions:
	//  * `film` - The On Demand page is for a film.
	//  * `series` - The On Demand page is for a series.
	//
	Type OnDemandPageTypeEnum `json:"type"`
	// The relative URI of the On Demand page.
	URI string `json:"uri"`
	// The user who created this On Demand page.
	User OnDemandPageUser `json:"user"`
}
