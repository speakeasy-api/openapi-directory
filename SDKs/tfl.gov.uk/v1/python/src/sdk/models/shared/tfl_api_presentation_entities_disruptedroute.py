"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import tfl_api_presentation_entities_routesectionnaptanentrysequence as shared_tfl_api_presentation_entities_routesectionnaptanentrysequence
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesDisruptedRoute:
    r"""keep old RouteSection name so as not to break contract"""
    
    destination_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationName'), 'exclude': lambda f: f is None }})
    r"""The name of the Destination StopPoint"""  
    direction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""Inbound or Outbound"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The Id of the route"""  
    is_entire_route_section: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEntireRouteSection'), 'exclude': lambda f: f is None }})
    r"""Whether this represents the entire route section"""  
    line_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineId'), 'exclude': lambda f: f is None }})
    r"""The Id of the Line"""  
    line_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineString'), 'exclude': lambda f: f is None }})
    r"""The co-ordinates of the route's path as a geoJSON lineString"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name such as \\"72\\" """  
    origination_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originationName'), 'exclude': lambda f: f is None }})
    r"""The name of the Origin StopPoint"""  
    route_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routeCode'), 'exclude': lambda f: f is None }})
    r"""The route code"""  
    route_section_naptan_entry_sequence: Optional[list[shared_tfl_api_presentation_entities_routesectionnaptanentrysequence.TflAPIPresentationEntitiesRouteSectionNaptanEntrySequence]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routeSectionNaptanEntrySequence'), 'exclude': lambda f: f is None }})  
    valid_from: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validFrom'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The DateTime that the Service containing this Route is valid from."""  
    valid_to: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validTo'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The DateTime that the Service containing this Route is valid until."""  
    via: Optional[shared_tfl_api_presentation_entities_routesectionnaptanentrysequence.TflAPIPresentationEntitiesRouteSectionNaptanEntrySequence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('via'), 'exclude': lambda f: f is None }})  
    