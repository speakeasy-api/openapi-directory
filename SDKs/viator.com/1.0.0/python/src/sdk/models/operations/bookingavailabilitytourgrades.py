"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgradesRequestBodyAgeBands:
    
    band_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** for the age band
    - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
    """  
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""**numeric count** of number of travelers in *this* age band"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgradesRequestBody:
    
    age_bands: Optional[list[BookingAvailabilityTourgradesRequestBodyAgeBands]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageBands'), 'exclude': lambda f: f is None }})
    r"""**array** of ageBand objects"""  
    booking_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingDate'), 'exclude': lambda f: f is None }})
    r"""**date** to enquire about available tour grades for *this* product (must be in the future)"""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""**currency code** for the currency in which to display pricing information"""  
    product_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCode'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class BookingAvailabilityTourgradesRequest:
    
    accept_language: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Language', 'style': 'simple', 'explode': False }})
    r"""Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)"""  
    request_body: Optional[BookingAvailabilityTourgradesRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgrades200ApplicationJSONDataAgeBandsRequired:
    
    band_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** for the age band
    - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
    """  
    maximum_count_required: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumCountRequired'), 'exclude': lambda f: f is None }})
    r"""**maximum number** of passengers from *this* age band allowable for *this* tour grade"""  
    minimum_count_required: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumCountRequired'), 'exclude': lambda f: f is None }})
    r"""**minimum number** of passengers from *this* age band required for *this* tour grade"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgrades200ApplicationJSONData:
    
    age_bands: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageBands'), 'exclude': lambda f: f is None }})
    r"""**array** of age band objects describing the age bands and respective passenger counts allowed to book *this* tour grade; `null` if `ageBandsRequired` is filled and `available` is `false`"""  
    age_bands_required: Optional[list[list[BookingAvailabilityTourgrades200ApplicationJSONDataAgeBandsRequired]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageBandsRequired'), 'exclude': lambda f: f is None }})
    r"""**array of arrays** of age band objects describing the traveler mixes eligible to book *this* tour grade; `null` if `ageBands` is filled and `available` is `true`
    - **note**: multiple objects; structure will depend on available tour grades â€“ see response sample for an example, but the exact result you receive will differ
    """  
    available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available'), 'exclude': lambda f: f is None }})
    r"""**indicator** - `true` if this tour grade is available to be booked according to the traveler mix specified"""  
    booking_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingDate'), 'exclude': lambda f: f is None }})
    r"""**date** on which *this* tour grade operates"""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""**currency code for the specified currency** (will be `'ERROR'` if `available` is `false`)"""  
    default_language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultLanguageCode'), 'exclude': lambda f: f is None }})
    r"""**language code for standard langauge** for *this* product"""  
    grade_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gradeCode'), 'exclude': lambda f: f is None }})
    r"""**alphanumeric identifier** of *this* tour grade"""  
    grade_departure_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gradeDepartureTime'), 'exclude': lambda f: f is None }})
    r"""**time** of *this* product"""  
    grade_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gradeDescription'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of the tour grade"""  
    grade_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gradeTitle'), 'exclude': lambda f: f is None }})
    r"""**natural-language title** of the tour grade"""  
    lang_services: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('langServices'), 'exclude': lambda f: f is None }})
    r"""**object** detailing language services available for *this* product** (will be `null` if `available` is `false`)"""  
    merchant_net_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantNetPrice'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant net rate** for *this* tour grade
    **Note**: will be `0` if `available` is `false`
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    merchant_net_price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantNetPriceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted merchant net rate** for *this* tour grade
    **Note**: will be empty if `available` is `false`
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    retail_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retailPrice'), 'exclude': lambda f: f is None }})
    r"""**numeric suggested retail price** for *this* tour grade
    **Note**: will be `0` if `available` is `false`
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    retail_price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retailPriceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted suggested retail price** for *this* tour grade
    **Note**: (will be '' if `available` is `false`)
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** for *this* tour grade availability object"""  
    unavailable_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unavailableReason'), 'exclude': lambda f: f is None }})
    r"""**enum specifier of reason for product unavailability** (will be `null` if `available` is `true`)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgrades200ApplicationJSON:
    r"""Success"""
    
    data: Optional[list[BookingAvailabilityTourgrades200ApplicationJSONData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    date_stamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateStamp'), 'exclude': lambda f: f is None }})
    r"""**timestamp** of *this* response"""  
    error_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCodes'), 'exclude': lambda f: f is None }})
    r"""**array** of error codes pertaining to *this* error
    - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
    """  
    error_message: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings"""  
    error_message_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessageText'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings in plain text"""  
    error_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorName'), 'exclude': lambda f: f is None }})
    r"""**name** of *this* type of error"""  
    error_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorReference'), 'exclude': lambda f: f is None }})
    r"""**reference number** of *this* error"""  
    error_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorType'), 'exclude': lambda f: f is None }})
    r"""**code** specifying the type of error"""  
    extra_info: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraInfo'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    extra_object: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraObject'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""**boolean indicator** of *this* request's outcome
    - `true`: the request was successful with no errors
    - `false`: an error was encountered
    """  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})
    r"""**number** of results available for *this* service"""  
    vmid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmid'), 'exclude': lambda f: f is None }})
    r"""**unique numeric id** of the server that processed *this* request"""  
    

@dataclasses.dataclass
class BookingAvailabilityTourgradesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    booking_availability_tourgrades_200_application_json_object: Optional[BookingAvailabilityTourgrades200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    