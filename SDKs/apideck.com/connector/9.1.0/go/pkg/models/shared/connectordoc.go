// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConnectorDocAudienceEnum - Audience for the doc.
type ConnectorDocAudienceEnum string

const (
	ConnectorDocAudienceEnumApplicationOwner ConnectorDocAudienceEnum = "application_owner"
	ConnectorDocAudienceEnumConsumer         ConnectorDocAudienceEnum = "consumer"
)

func (e *ConnectorDocAudienceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "application_owner":
		fallthrough
	case "consumer":
		*e = ConnectorDocAudienceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectorDocAudienceEnum: %s", s)
	}
}

// ConnectorDocFormatEnum - Format of the doc.
type ConnectorDocFormatEnum string

const (
	ConnectorDocFormatEnumMarkdown ConnectorDocFormatEnum = "markdown"
)

func (e *ConnectorDocFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "markdown":
		*e = ConnectorDocFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectorDocFormatEnum: %s", s)
	}
}

type ConnectorDoc struct {
	// Audience for the doc.
	Audience *ConnectorDocAudienceEnum `json:"audience,omitempty"`
	// Format of the doc.
	Format *ConnectorDocFormatEnum `json:"format,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Name of the doc.
	Name *string `json:"name,omitempty"`
	// Link to fetch the content of the doc.
	URL *string `json:"url,omitempty"`
}
