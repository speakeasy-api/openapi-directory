/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class Users200ApplicationJSONUsers {
    /**
     * The time when user's account was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Users200ApplicationJSONUsers withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Custom attributes. This field is only returned if users have been assigned custom attributes and if you provided `custom_attributes` as the value of `include_fields` query parameter in the API request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_attributes")
    public Users200ApplicationJSONUsersCustomAttributes[] customAttributes;
    public Users200ApplicationJSONUsers withCustomAttributes(Users200ApplicationJSONUsersCustomAttributes[] customAttributes) {
        this.customAttributes = customAttributes;
        return this;
    }
    
    /**
     * Department, if provided by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dept")
    public String dept;
    public Users200ApplicationJSONUsers withDept(String dept) {
        this.dept = dept;
        return this;
    }
    
    /**
     * User's email address.
     */
    @JsonProperty("email")
    public String email;
    public Users200ApplicationJSONUsers withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * User's first name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    public String firstName;
    public Users200ApplicationJSONUsers withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * IDs of groups where the user is a member.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_ids")
    public String[] groupIds;
    public Users200ApplicationJSONUsers withGroupIds(String[] groupIds) {
        this.groupIds = groupIds;
        return this;
    }
    
    /**
     * The [host key](https://support.zoom.us/hc/en-us/articles/205172555-Using-your-host-key) of the user. This field is only returned if users have been assigned a host key and if you provided `host_key` as the value of `include_fields` query parameter in the API request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_key")
    public String hostKey;
    public Users200ApplicationJSONUsers withHostKey(String hostKey) {
        this.hostKey = hostKey;
        return this;
    }
    
    /**
     * User ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Users200ApplicationJSONUsers withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * IDs of IM directory groups where the user is a member.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("im_group_ids")
    public String[] imGroupIds;
    public Users200ApplicationJSONUsers withImGroupIds(String[] imGroupIds) {
        this.imGroupIds = imGroupIds;
        return this;
    }
    
    /**
     * The last client version that user used to login.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_client_version")
    public String lastClientVersion;
    public Users200ApplicationJSONUsers withLastClientVersion(String lastClientVersion) {
        this.lastClientVersion = lastClientVersion;
        return this;
    }
    
    /**
     * User's last login time. There is a three-days buffer period for this field. For example, if user first logged in on 2020-01-01 and then logged out and logged in on 2020-01-02, the value of this field will still reflect the login time of 2020-01-01. However, if the user logs in on 2020-01-04, the value of this field will reflect the corresponding login time since it exceeds the three-day buffer period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_login_time")
    public OffsetDateTime lastLoginTime;
    public Users200ApplicationJSONUsers withLastLoginTime(OffsetDateTime lastLoginTime) {
        this.lastLoginTime = lastLoginTime;
        return this;
    }
    
    /**
     * User's last name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    public String lastName;
    public Users200ApplicationJSONUsers withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * This field is returned if the user is enrolled in the [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("plan_united_type")
    public String planUnitedType;
    public Users200ApplicationJSONUsers withPlanUnitedType(String planUnitedType) {
        this.planUnitedType = planUnitedType;
        return this;
    }
    
    /**
     * Personal meeting ID of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pmi")
    public Long pmi;
    public Users200ApplicationJSONUsers withPmi(Long pmi) {
        this.pmi = pmi;
        return this;
    }
    
    /**
     * Unique identifier of the [role](https://marketplace.zoom.us/docs/api-reference/zoom-api/roles/roles) assigned to the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role_id")
    public String roleId;
    public Users200ApplicationJSONUsers withRoleId(String roleId) {
        this.roleId = roleId;
        return this;
    }
    
    /**
     * User's status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public Users200ApplicationJSONUsers withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The time zone of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public Users200ApplicationJSONUsers withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * User's plan type.&lt;br&gt;
     * `1` - Basic.&lt;br&gt;
     * `2` - Licensed.&lt;br&gt;
     * `3` - On-prem.&lt;br&gt;
     * `99` - None (this can only be set with `ssoCreate`).
     * 
     */
    @JsonProperty("type")
    public Long type;
    public Users200ApplicationJSONUsers withType(Long type) {
        this.type = type;
        return this;
    }
    
    /**
     * Display whether the user's email address for the Zoom account is verified or not. &lt;br&gt;
     * `1` - Verified user email.&lt;br&gt;
     * `0` - User's email not verified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verified")
    public Long verified;
    public Users200ApplicationJSONUsers withVerified(Long verified) {
        this.verified = verified;
        return this;
    }
    
}
