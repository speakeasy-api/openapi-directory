"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enterprise_comment_overview as shared_enterprise_comment_overview
from ..shared import enterprise_gist_overview as shared_enterprise_gist_overview
from ..shared import enterprise_hook_overview as shared_enterprise_hook_overview
from ..shared import enterprise_issue_overview as shared_enterprise_issue_overview
from ..shared import enterprise_milestone_overview as shared_enterprise_milestone_overview
from ..shared import enterprise_organization_overview as shared_enterprise_organization_overview
from ..shared import enterprise_page_overview as shared_enterprise_page_overview
from ..shared import enterprise_pull_request_overview as shared_enterprise_pull_request_overview
from ..shared import enterprise_repository_overview as shared_enterprise_repository_overview
from ..shared import enterprise_user_overview as shared_enterprise_user_overview
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseOverview:
    r"""Response"""
    
    comments: Optional[shared_enterprise_comment_overview.EnterpriseCommentOverview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    gists: Optional[shared_enterprise_gist_overview.EnterpriseGistOverview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gists'), 'exclude': lambda f: f is None }})  
    hooks: Optional[shared_enterprise_hook_overview.EnterpriseHookOverview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hooks'), 'exclude': lambda f: f is None }})  
    issues: Optional[shared_enterprise_issue_overview.EnterpriseIssueOverview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues'), 'exclude': lambda f: f is None }})  
    milestones: Optional[shared_enterprise_milestone_overview.EnterpriseMilestoneOverview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('milestones'), 'exclude': lambda f: f is None }})  
    orgs: Optional[shared_enterprise_organization_overview.EnterpriseOrganizationOverview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orgs'), 'exclude': lambda f: f is None }})  
    pages: Optional[shared_enterprise_page_overview.EnterprisePageOverview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pages'), 'exclude': lambda f: f is None }})  
    pulls: Optional[shared_enterprise_pull_request_overview.EnterprisePullRequestOverview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pulls'), 'exclude': lambda f: f is None }})  
    repos: Optional[shared_enterprise_repository_overview.EnterpriseRepositoryOverview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repos'), 'exclude': lambda f: f is None }})  
    users: Optional[shared_enterprise_user_overview.EnterpriseUserOverview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})  
    