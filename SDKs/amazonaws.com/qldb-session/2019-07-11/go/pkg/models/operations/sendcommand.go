// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SendCommandXAmzTargetEnum
type SendCommandXAmzTargetEnum string

const (
	SendCommandXAmzTargetEnumQldbSessionSendCommand SendCommandXAmzTargetEnum = "QLDBSession.SendCommand"
)

func (e *SendCommandXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "QLDBSession.SendCommand":
		*e = SendCommandXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SendCommandXAmzTargetEnum: %s", s)
	}
}

type SendCommandHeaders struct {
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        SendCommandXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type SendCommandRequest struct {
	Headers SendCommandHeaders
	Request shared.SendCommandRequest `request:"mediaType=application/json"`
}

type SendCommandResponse struct {
	// BadRequestException
	BadRequestException interface{}
	// CapacityExceededException
	CapacityExceededException interface{}
	ContentType               string
	// InvalidSessionException
	InvalidSessionException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// OccConflictException
	OccConflictException interface{}
	// RateExceededException
	RateExceededException interface{}
	// Success
	SendCommandResult *shared.SendCommandResult
	StatusCode        int
	RawResponse       *http.Response
}
