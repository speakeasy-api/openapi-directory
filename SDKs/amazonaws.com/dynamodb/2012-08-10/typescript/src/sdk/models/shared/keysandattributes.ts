/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AttributeValue } from "./attributevalue";
import { Expose, Transform } from "class-transformer";

/**
 * <p>Represents a set of primary keys and, for each key, the attributes to retrieve from the table.</p> <p>For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key. For a composite primary key, you must provide <i>both</i> the partition key and the sort key.</p>
 */
export class KeysAndAttributes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AttributesToGet" })
  attributesToGet?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "ConsistentRead" })
  consistentRead?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ExpressionAttributeNames" })
  expressionAttributeNames?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: AttributeValue, elemDepth: 2 })
  @Expose({ name: "Keys" })
  @Transform(
    ({ value }) => {
      const arr: Record<string, AttributeValue>[] = [];
      for (const item of value) {
        arr.push(objectToClass(item, AttributeValue));
      }
      return arr;
    },
    { toClassOnly: true }
  )
  keys: Record<string, AttributeValue>[];

  @SpeakeasyMetadata()
  @Expose({ name: "ProjectionExpression" })
  projectionExpression?: string;
}
