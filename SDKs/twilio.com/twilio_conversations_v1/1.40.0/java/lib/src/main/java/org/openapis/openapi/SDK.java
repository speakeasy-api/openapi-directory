/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://conversations.twilio.com",
	};
    /**
	 * CREATE_CONFIGURATION_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONFIGURATION_ADDRESS_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CREDENTIAL_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * CREATE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CONFIGURATION_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONFIGURATION_ADDRESS_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CREDENTIAL_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_BINDING_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * DELETE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONFIGURATION_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONFIGURATION_ADDRESS_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONFIGURATION_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONFIGURATION_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONVERSATION_MESSAGE_RECEIPT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONVERSATION_MESSAGE_RECEIPT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CREDENTIAL_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_BINDING_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_NOTIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_NOTIFICATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_WEBHOOK_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_WEBHOOK_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * FETCH_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONFIGURATION_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONFIGURATION_ADDRESS_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONVERSATION_MESSAGE_RECEIPT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONVERSATION_MESSAGE_RECEIPT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CREDENTIAL_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_PARTICIPANT_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_PARTICIPANT_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_BINDING_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_PARTICIPANT_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_PARTICIPANT_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * LIST_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONFIGURATION_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONFIGURATION_ADDRESS_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONFIGURATION_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONFIGURATION_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CREDENTIAL_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_CONVERSATION_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_CONVERSATION_MESSAGE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_NOTIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_NOTIFICATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_ROLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_ROLE_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_WEBHOOK_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_WEBHOOK_CONFIGURATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_USER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_USER_SERVERS = {
        "https://conversations.twilio.com",
    };
	
    /**
	 * UPDATE_USER_CONVERSATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_USER_CONVERSATION_SERVERS = {
        "https://conversations.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Create a new address configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConfigurationAddressResponse createConfigurationAddress(org.openapis.openapi.models.operations.CreateConfigurationAddressRequest request) throws Exception {
        String baseUrl = CREATE_CONFIGURATION_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration/Addresses");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConfigurationAddressResponse res = new org.openapis.openapi.models.operations.CreateConfigurationAddressResponse() {{
            conversationsV1ConfigurationAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress.class);
                res.conversationsV1ConfigurationAddress = out;
            }
        }

        return res;
    }

    /**
     * Create a new conversation in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationResponse createConversation(org.openapis.openapi.models.operations.CreateConversationRequest request) throws Exception {
        String baseUrl = CREATE_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Conversations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConversationResponse res = new org.openapis.openapi.models.operations.CreateConversationResponse() {{
            conversationsV1Conversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Conversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Conversation.class);
                res.conversationsV1Conversation = out;
            }
        }

        return res;
    }

    /**
     * Add a new message to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationMessageResponse createConversationMessage(org.openapis.openapi.models.operations.CreateConversationMessageRequest request) throws Exception {
        String baseUrl = CREATE_CONVERSATION_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateConversationMessagePathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConversationMessageResponse res = new org.openapis.openapi.models.operations.CreateConversationMessageResponse() {{
            conversationsV1ConversationConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage.class);
                res.conversationsV1ConversationConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Add a new participant to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationParticipantResponse createConversationParticipant(org.openapis.openapi.models.operations.CreateConversationParticipantRequest request) throws Exception {
        String baseUrl = CREATE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateConversationParticipantPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Participants", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConversationParticipantResponse res = new org.openapis.openapi.models.operations.CreateConversationParticipantResponse() {{
            conversationsV1ConversationConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant.class);
                res.conversationsV1ConversationConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Create a new webhook scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateConversationScopedWebhookResponse createConversationScopedWebhook(org.openapis.openapi.models.operations.CreateConversationScopedWebhookRequest request) throws Exception {
        String baseUrl = CREATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateConversationScopedWebhookPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Webhooks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.CreateConversationScopedWebhookResponse() {{
            conversationsV1ConversationConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook.class);
                res.conversationsV1ConversationConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Add a new push notification credential to your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateCredentialResponse createCredential(org.openapis.openapi.models.operations.CreateCredentialRequest request) throws Exception {
        String baseUrl = CREATE_CREDENTIAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Credentials");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCredentialResponse res = new org.openapis.openapi.models.operations.CreateCredentialResponse() {{
            conversationsV1Credential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Credential.class);
                res.conversationsV1Credential = out;
            }
        }

        return res;
    }

    /**
     * Create a new user role in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateRoleResponse createRole(org.openapis.openapi.models.operations.CreateRoleRequest request) throws Exception {
        String baseUrl = CREATE_ROLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Roles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateRoleResponse res = new org.openapis.openapi.models.operations.CreateRoleResponse() {{
            conversationsV1Role = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Role out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Role.class);
                res.conversationsV1Role = out;
            }
        }

        return res;
    }

    /**
     * Create a new conversation service on your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceRequest request) throws Exception {
        String baseUrl = CREATE_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceResponse res = new org.openapis.openapi.models.operations.CreateServiceResponse() {{
            conversationsV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Service.class);
                res.conversationsV1Service = out;
            }
        }

        return res;
    }

    /**
     * Create a new conversation in your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationResponse createServiceConversation(org.openapis.openapi.models.operations.CreateServiceConversationRequest request) throws Exception {
        String baseUrl = CREATE_SERVICE_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceConversationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceConversationResponse res = new org.openapis.openapi.models.operations.CreateServiceConversationResponse() {{
            conversationsV1ServiceServiceConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation.class);
                res.conversationsV1ServiceServiceConversation = out;
            }
        }

        return res;
    }

    /**
     * Add a new message to the conversation in a specific service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationMessageResponse createServiceConversationMessage(org.openapis.openapi.models.operations.CreateServiceConversationMessageRequest request) throws Exception {
        String baseUrl = CREATE_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceConversationMessagePathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceConversationMessageResponse res = new org.openapis.openapi.models.operations.CreateServiceConversationMessageResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage.class);
                res.conversationsV1ServiceServiceConversationServiceConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Add a new participant to the conversation in a specific service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationParticipantResponse createServiceConversationParticipant(org.openapis.openapi.models.operations.CreateServiceConversationParticipantRequest request) throws Exception {
        String baseUrl = CREATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceConversationParticipantPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceConversationParticipantResponse res = new org.openapis.openapi.models.operations.CreateServiceConversationParticipantResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant.class);
                res.conversationsV1ServiceServiceConversationServiceConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Create a new webhook scoped to the conversation in a specific service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookResponse createServiceConversationScopedWebhook(org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookRequest request) throws Exception {
        String baseUrl = CREATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.CreateServiceConversationScopedWebhookResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook.class);
                res.conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Create a new user role in your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceRoleResponse createServiceRole(org.openapis.openapi.models.operations.CreateServiceRoleRequest request) throws Exception {
        String baseUrl = CREATE_SERVICE_ROLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceRolePathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Roles", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceRoleResponse res = new org.openapis.openapi.models.operations.CreateServiceRoleResponse() {{
            conversationsV1ServiceServiceRole = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole.class);
                res.conversationsV1ServiceServiceRole = out;
            }
        }

        return res;
    }

    /**
     * Add a new conversation user to your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceUserResponse createServiceUser(org.openapis.openapi.models.operations.CreateServiceUserRequest request) throws Exception {
        String baseUrl = CREATE_SERVICE_USER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateServiceUserPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceUserResponse res = new org.openapis.openapi.models.operations.CreateServiceUserResponse() {{
            conversationsV1ServiceServiceUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser.class);
                res.conversationsV1ServiceServiceUser = out;
            }
        }

        return res;
    }

    /**
     * Add a new conversation user to your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateUserResponse createUser(org.openapis.openapi.models.operations.CreateUserRequest request) throws Exception {
        String baseUrl = CREATE_USER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Users");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUserResponse res = new org.openapis.openapi.models.operations.CreateUserResponse() {{
            conversationsV1User = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1User out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1User.class);
                res.conversationsV1User = out;
            }
        }

        return res;
    }

    /**
     * Remove an existing address configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConfigurationAddressResponse deleteConfigurationAddress(org.openapis.openapi.models.operations.DeleteConfigurationAddressRequest request) throws Exception {
        String baseUrl = DELETE_CONFIGURATION_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConfigurationAddressPathParams.class, baseUrl, "/v1/Configuration/Addresses/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConfigurationAddressResponse res = new org.openapis.openapi.models.operations.DeleteConfigurationAddressResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a conversation from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationResponse deleteConversation(org.openapis.openapi.models.operations.DeleteConversationRequest request) throws Exception {
        String baseUrl = DELETE_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConversationPathParams.class, baseUrl, "/v1/Conversations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConversationResponse res = new org.openapis.openapi.models.operations.DeleteConversationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationMessageResponse deleteConversationMessage(org.openapis.openapi.models.operations.DeleteConversationMessageRequest request) throws Exception {
        String baseUrl = DELETE_CONVERSATION_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConversationMessagePathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConversationMessageResponse res = new org.openapis.openapi.models.operations.DeleteConversationMessageResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a participant from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationParticipantResponse deleteConversationParticipant(org.openapis.openapi.models.operations.DeleteConversationParticipantRequest request) throws Exception {
        String baseUrl = DELETE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConversationParticipantPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Participants/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConversationParticipantResponse res = new org.openapis.openapi.models.operations.DeleteConversationParticipantResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove an existing webhook scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConversationScopedWebhookResponse deleteConversationScopedWebhook(org.openapis.openapi.models.operations.DeleteConversationScopedWebhookRequest request) throws Exception {
        String baseUrl = DELETE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConversationScopedWebhookPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.DeleteConversationScopedWebhookResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a push notification credential from your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCredentialResponse deleteCredential(org.openapis.openapi.models.operations.DeleteCredentialRequest request) throws Exception {
        String baseUrl = DELETE_CREDENTIAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCredentialPathParams.class, baseUrl, "/v1/Credentials/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCredentialResponse res = new org.openapis.openapi.models.operations.DeleteCredentialResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a user role from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRoleResponse deleteRole(org.openapis.openapi.models.operations.DeleteRoleRequest request) throws Exception {
        String baseUrl = DELETE_ROLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRolePathParams.class, baseUrl, "/v1/Roles/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRoleResponse res = new org.openapis.openapi.models.operations.DeleteRoleResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a conversation service with all its nested resources from your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServicePathParams.class, baseUrl, "/v1/Services/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceResponse res = new org.openapis.openapi.models.operations.DeleteServiceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a push notification binding from the conversation service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceBindingResponse deleteServiceBinding(org.openapis.openapi.models.operations.DeleteServiceBindingRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_BINDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceBindingPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Bindings/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceBindingResponse res = new org.openapis.openapi.models.operations.DeleteServiceBindingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a conversation from your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationResponse deleteServiceConversation(org.openapis.openapi.models.operations.DeleteServiceConversationRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceConversationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceConversationResponse res = new org.openapis.openapi.models.operations.DeleteServiceConversationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationMessageResponse deleteServiceConversationMessage(org.openapis.openapi.models.operations.DeleteServiceConversationMessageRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceConversationMessagePathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceConversationMessageResponse res = new org.openapis.openapi.models.operations.DeleteServiceConversationMessageResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a participant from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationParticipantResponse deleteServiceConversationParticipant(org.openapis.openapi.models.operations.DeleteServiceConversationParticipantRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceConversationParticipantPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceConversationParticipantResponse res = new org.openapis.openapi.models.operations.DeleteServiceConversationParticipantResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove an existing webhook scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookResponse deleteServiceConversationScopedWebhook(org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.DeleteServiceConversationScopedWebhookResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a user role from your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceRoleResponse deleteServiceRole(org.openapis.openapi.models.operations.DeleteServiceRoleRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_ROLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceRolePathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Roles/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceRoleResponse res = new org.openapis.openapi.models.operations.DeleteServiceRoleResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a conversation user from your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceUserResponse deleteServiceUser(org.openapis.openapi.models.operations.DeleteServiceUserRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_USER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceUserPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceUserResponse res = new org.openapis.openapi.models.operations.DeleteServiceUserResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceUserConversationResponse deleteServiceUserConversation(org.openapis.openapi.models.operations.DeleteServiceUserConversationRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceUserConversationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceUserConversationResponse res = new org.openapis.openapi.models.operations.DeleteServiceUserConversationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a conversation user from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteUserResponse deleteUser(org.openapis.openapi.models.operations.DeleteUserRequest request) throws Exception {
        String baseUrl = DELETE_USER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUserPathParams.class, baseUrl, "/v1/Users/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUserResponse res = new org.openapis.openapi.models.operations.DeleteUserResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteUserConversationResponse deleteUserConversation(org.openapis.openapi.models.operations.DeleteUserConversationRequest request) throws Exception {
        String baseUrl = DELETE_USER_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUserConversationPathParams.class, baseUrl, "/v1/Users/{UserSid}/Conversations/{ConversationSid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUserConversationResponse res = new org.openapis.openapi.models.operations.DeleteUserConversationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Fetch the global configuration of conversations on your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConfigurationResponse fetchConfiguration(org.openapis.openapi.models.operations.FetchConfigurationRequest request) throws Exception {
        String baseUrl = FETCH_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConfigurationResponse res = new org.openapis.openapi.models.operations.FetchConfigurationResponse() {{
            conversationsV1Configuration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Configuration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Configuration.class);
                res.conversationsV1Configuration = out;
            }
        }

        return res;
    }

    /**
     * Fetch an address configuration 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConfigurationAddressResponse fetchConfigurationAddress(org.openapis.openapi.models.operations.FetchConfigurationAddressRequest request) throws Exception {
        String baseUrl = FETCH_CONFIGURATION_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConfigurationAddressPathParams.class, baseUrl, "/v1/Configuration/Addresses/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConfigurationAddressResponse res = new org.openapis.openapi.models.operations.FetchConfigurationAddressResponse() {{
            conversationsV1ConfigurationAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress.class);
                res.conversationsV1ConfigurationAddress = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchConfigurationWebhookResponse fetchConfigurationWebhook(org.openapis.openapi.models.operations.FetchConfigurationWebhookRequest request) throws Exception {
        String baseUrl = FETCH_CONFIGURATION_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration/Webhooks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConfigurationWebhookResponse res = new org.openapis.openapi.models.operations.FetchConfigurationWebhookResponse() {{
            conversationsV1ConfigurationConfigurationWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConfigurationConfigurationWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConfigurationConfigurationWebhook.class);
                res.conversationsV1ConfigurationConfigurationWebhook = out;
            }
        }

        return res;
    }

    /**
     * Fetch a conversation from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationResponse fetchConversation(org.openapis.openapi.models.operations.FetchConversationRequest request) throws Exception {
        String baseUrl = FETCH_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConversationPathParams.class, baseUrl, "/v1/Conversations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConversationResponse res = new org.openapis.openapi.models.operations.FetchConversationResponse() {{
            conversationsV1Conversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Conversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Conversation.class);
                res.conversationsV1Conversation = out;
            }
        }

        return res;
    }

    /**
     * Fetch a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationMessageResponse fetchConversationMessage(org.openapis.openapi.models.operations.FetchConversationMessageRequest request) throws Exception {
        String baseUrl = FETCH_CONVERSATION_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConversationMessagePathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConversationMessageResponse res = new org.openapis.openapi.models.operations.FetchConversationMessageResponse() {{
            conversationsV1ConversationConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage.class);
                res.conversationsV1ConversationConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Fetch the delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationMessageReceiptResponse fetchConversationMessageReceipt(org.openapis.openapi.models.operations.FetchConversationMessageReceiptRequest request) throws Exception {
        String baseUrl = FETCH_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConversationMessageReceiptPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConversationMessageReceiptResponse res = new org.openapis.openapi.models.operations.FetchConversationMessageReceiptResponse() {{
            conversationsV1ConversationConversationMessageConversationMessageReceipt = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessageConversationMessageReceipt out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessageConversationMessageReceipt.class);
                res.conversationsV1ConversationConversationMessageConversationMessageReceipt = out;
            }
        }

        return res;
    }

    /**
     * Fetch a participant of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationParticipantResponse fetchConversationParticipant(org.openapis.openapi.models.operations.FetchConversationParticipantRequest request) throws Exception {
        String baseUrl = FETCH_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConversationParticipantPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Participants/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConversationParticipantResponse res = new org.openapis.openapi.models.operations.FetchConversationParticipantResponse() {{
            conversationsV1ConversationConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant.class);
                res.conversationsV1ConversationConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Fetch the configuration of a conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConversationScopedWebhookResponse fetchConversationScopedWebhook(org.openapis.openapi.models.operations.FetchConversationScopedWebhookRequest request) throws Exception {
        String baseUrl = FETCH_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConversationScopedWebhookPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.FetchConversationScopedWebhookResponse() {{
            conversationsV1ConversationConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook.class);
                res.conversationsV1ConversationConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Fetch a push notification credential from your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCredentialResponse fetchCredential(org.openapis.openapi.models.operations.FetchCredentialRequest request) throws Exception {
        String baseUrl = FETCH_CREDENTIAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCredentialPathParams.class, baseUrl, "/v1/Credentials/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCredentialResponse res = new org.openapis.openapi.models.operations.FetchCredentialResponse() {{
            conversationsV1Credential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Credential.class);
                res.conversationsV1Credential = out;
            }
        }

        return res;
    }

    /**
     * Fetch a user role from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRoleResponse fetchRole(org.openapis.openapi.models.operations.FetchRoleRequest request) throws Exception {
        String baseUrl = FETCH_ROLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRolePathParams.class, baseUrl, "/v1/Roles/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRoleResponse res = new org.openapis.openapi.models.operations.FetchRoleResponse() {{
            conversationsV1Role = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Role out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Role.class);
                res.conversationsV1Role = out;
            }
        }

        return res;
    }

    /**
     * Fetch a conversation service from your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServicePathParams.class, baseUrl, "/v1/Services/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceResponse res = new org.openapis.openapi.models.operations.FetchServiceResponse() {{
            conversationsV1Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Service.class);
                res.conversationsV1Service = out;
            }
        }

        return res;
    }

    /**
     * Fetch a push notification binding from the conversation service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceBindingResponse fetchServiceBinding(org.openapis.openapi.models.operations.FetchServiceBindingRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_BINDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceBindingPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Bindings/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceBindingResponse res = new org.openapis.openapi.models.operations.FetchServiceBindingResponse() {{
            conversationsV1ServiceServiceBinding = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceBinding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceBinding.class);
                res.conversationsV1ServiceServiceBinding = out;
            }
        }

        return res;
    }

    /**
     * Fetch the configuration of a conversation service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConfigurationResponse fetchServiceConfiguration(org.openapis.openapi.models.operations.FetchServiceConfigurationRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConfigurationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConfigurationResponse res = new org.openapis.openapi.models.operations.FetchServiceConfigurationResponse() {{
            conversationsV1ServiceServiceConfiguration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfiguration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfiguration.class);
                res.conversationsV1ServiceServiceConfiguration = out;
            }
        }

        return res;
    }

    /**
     * Fetch a conversation from your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationResponse fetchServiceConversation(org.openapis.openapi.models.operations.FetchServiceConversationRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConversationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConversationResponse res = new org.openapis.openapi.models.operations.FetchServiceConversationResponse() {{
            conversationsV1ServiceServiceConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation.class);
                res.conversationsV1ServiceServiceConversation = out;
            }
        }

        return res;
    }

    /**
     * Fetch a message from the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationMessageResponse fetchServiceConversationMessage(org.openapis.openapi.models.operations.FetchServiceConversationMessageRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConversationMessagePathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConversationMessageResponse res = new org.openapis.openapi.models.operations.FetchServiceConversationMessageResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage.class);
                res.conversationsV1ServiceServiceConversationServiceConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Fetch the delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptResponse fetchServiceConversationMessageReceipt(org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptResponse res = new org.openapis.openapi.models.operations.FetchServiceConversationMessageReceiptResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt.class);
                res.conversationsV1ServiceServiceConversationServiceConversationMessageServiceConversationMessageReceipt = out;
            }
        }

        return res;
    }

    /**
     * Fetch a participant of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationParticipantResponse fetchServiceConversationParticipant(org.openapis.openapi.models.operations.FetchServiceConversationParticipantRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConversationParticipantPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConversationParticipantResponse res = new org.openapis.openapi.models.operations.FetchServiceConversationParticipantResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant.class);
                res.conversationsV1ServiceServiceConversationServiceConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Fetch the configuration of a conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookResponse fetchServiceConversationScopedWebhook(org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.FetchServiceConversationScopedWebhookResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook.class);
                res.conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Fetch push notification service settings
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceNotificationResponse fetchServiceNotification(org.openapis.openapi.models.operations.FetchServiceNotificationRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_NOTIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceNotificationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration/Notifications", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceNotificationResponse res = new org.openapis.openapi.models.operations.FetchServiceNotificationResponse() {{
            conversationsV1ServiceServiceConfigurationServiceNotification = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceNotification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceNotification.class);
                res.conversationsV1ServiceServiceConfigurationServiceNotification = out;
            }
        }

        return res;
    }

    /**
     * Fetch a user role from your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceRoleResponse fetchServiceRole(org.openapis.openapi.models.operations.FetchServiceRoleRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_ROLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceRolePathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Roles/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceRoleResponse res = new org.openapis.openapi.models.operations.FetchServiceRoleResponse() {{
            conversationsV1ServiceServiceRole = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole.class);
                res.conversationsV1ServiceServiceRole = out;
            }
        }

        return res;
    }

    /**
     * Fetch a conversation user from your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceUserResponse fetchServiceUser(org.openapis.openapi.models.operations.FetchServiceUserRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_USER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceUserPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceUserResponse res = new org.openapis.openapi.models.operations.FetchServiceUserResponse() {{
            conversationsV1ServiceServiceUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser.class);
                res.conversationsV1ServiceServiceUser = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceUserConversationResponse fetchServiceUserConversation(org.openapis.openapi.models.operations.FetchServiceUserConversationRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceUserConversationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceUserConversationResponse res = new org.openapis.openapi.models.operations.FetchServiceUserConversationResponse() {{
            conversationsV1ServiceServiceUserServiceUserConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUserServiceUserConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUserServiceUserConversation.class);
                res.conversationsV1ServiceServiceUserServiceUserConversation = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific service webhook configuration.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationResponse fetchServiceWebhookConfiguration(org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_WEBHOOK_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration/Webhooks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationResponse res = new org.openapis.openapi.models.operations.FetchServiceWebhookConfigurationResponse() {{
            conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.class);
                res.conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration = out;
            }
        }

        return res;
    }

    /**
     * Fetch a conversation user from your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUserResponse fetchUser(org.openapis.openapi.models.operations.FetchUserRequest request) throws Exception {
        String baseUrl = FETCH_USER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUserPathParams.class, baseUrl, "/v1/Users/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUserResponse res = new org.openapis.openapi.models.operations.FetchUserResponse() {{
            conversationsV1User = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1User out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1User.class);
                res.conversationsV1User = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUserConversationResponse fetchUserConversation(org.openapis.openapi.models.operations.FetchUserConversationRequest request) throws Exception {
        String baseUrl = FETCH_USER_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUserConversationPathParams.class, baseUrl, "/v1/Users/{UserSid}/Conversations/{ConversationSid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUserConversationResponse res = new org.openapis.openapi.models.operations.FetchUserConversationResponse() {{
            conversationsV1UserUserConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1UserUserConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1UserUserConversation.class);
                res.conversationsV1UserUserConversation = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of address configurations for an account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConfigurationAddressResponse listConfigurationAddress(org.openapis.openapi.models.operations.ListConfigurationAddressRequest request) throws Exception {
        String baseUrl = LIST_CONFIGURATION_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration/Addresses");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConfigurationAddressQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConfigurationAddressResponse res = new org.openapis.openapi.models.operations.ListConfigurationAddressResponse() {{
            listConfigurationAddressResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConfigurationAddressListConfigurationAddressResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConfigurationAddressListConfigurationAddressResponse.class);
                res.listConfigurationAddressResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of conversations in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationResponse listConversation(org.openapis.openapi.models.operations.ListConversationRequest request) throws Exception {
        String baseUrl = LIST_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Conversations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConversationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConversationResponse res = new org.openapis.openapi.models.operations.ListConversationResponse() {{
            listConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConversationListConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConversationListConversationResponse.class);
                res.listConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all messages in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationMessageResponse listConversationMessage(org.openapis.openapi.models.operations.ListConversationMessageRequest request) throws Exception {
        String baseUrl = LIST_CONVERSATION_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConversationMessagePathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConversationMessageQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConversationMessageResponse res = new org.openapis.openapi.models.operations.ListConversationMessageResponse() {{
            listConversationMessageResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConversationMessageListConversationMessageResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConversationMessageListConversationMessageResponse.class);
                res.listConversationMessageResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationMessageReceiptResponse listConversationMessageReceipt(org.openapis.openapi.models.operations.ListConversationMessageReceiptRequest request) throws Exception {
        String baseUrl = LIST_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConversationMessageReceiptPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConversationMessageReceiptQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConversationMessageReceiptResponse res = new org.openapis.openapi.models.operations.ListConversationMessageReceiptResponse() {{
            listConversationMessageReceiptResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConversationMessageReceiptListConversationMessageReceiptResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConversationMessageReceiptListConversationMessageReceiptResponse.class);
                res.listConversationMessageReceiptResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all participants of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationParticipantResponse listConversationParticipant(org.openapis.openapi.models.operations.ListConversationParticipantRequest request) throws Exception {
        String baseUrl = LIST_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConversationParticipantPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Participants", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConversationParticipantQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConversationParticipantResponse res = new org.openapis.openapi.models.operations.ListConversationParticipantResponse() {{
            listConversationParticipantResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConversationParticipantListConversationParticipantResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConversationParticipantListConversationParticipantResponse.class);
                res.listConversationParticipantResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all webhooks scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConversationScopedWebhookResponse listConversationScopedWebhook(org.openapis.openapi.models.operations.ListConversationScopedWebhookRequest request) throws Exception {
        String baseUrl = LIST_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConversationScopedWebhookPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Webhooks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConversationScopedWebhookQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.ListConversationScopedWebhookResponse() {{
            listConversationScopedWebhookResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConversationScopedWebhookListConversationScopedWebhookResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConversationScopedWebhookListConversationScopedWebhookResponse.class);
                res.listConversationScopedWebhookResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all push notification credentials on your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCredentialResponse listCredential(org.openapis.openapi.models.operations.ListCredentialRequest request) throws Exception {
        String baseUrl = LIST_CREDENTIAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Credentials");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCredentialQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCredentialResponse res = new org.openapis.openapi.models.operations.ListCredentialResponse() {{
            listCredentialResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCredentialListCredentialResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCredentialListCredentialResponse.class);
                res.listCredentialResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Conversations that this Participant belongs to by identity or by address. Only one parameter should be specified.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListParticipantConversationResponse listParticipantConversation(org.openapis.openapi.models.operations.ListParticipantConversationRequest request) throws Exception {
        String baseUrl = LIST_PARTICIPANT_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/ParticipantConversations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListParticipantConversationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListParticipantConversationResponse res = new org.openapis.openapi.models.operations.ListParticipantConversationResponse() {{
            listParticipantConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListParticipantConversationListParticipantConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListParticipantConversationListParticipantConversationResponse.class);
                res.listParticipantConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all user roles in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRoleResponse listRole(org.openapis.openapi.models.operations.ListRoleRequest request) throws Exception {
        String baseUrl = LIST_ROLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Roles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRoleQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRoleResponse res = new org.openapis.openapi.models.operations.ListRoleResponse() {{
            listRoleResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRoleListRoleResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRoleListRoleResponse.class);
                res.listRoleResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all conversation services on your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceResponse res = new org.openapis.openapi.models.operations.ListServiceResponse() {{
            listServiceResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceListServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceListServiceResponse.class);
                res.listServiceResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all push notification bindings in the conversation service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceBindingResponse listServiceBinding(org.openapis.openapi.models.operations.ListServiceBindingRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_BINDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceBindingPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Bindings", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceBindingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceBindingResponse res = new org.openapis.openapi.models.operations.ListServiceBindingResponse() {{
            listServiceBindingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceBindingListServiceBindingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceBindingListServiceBindingResponse.class);
                res.listServiceBindingResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of conversations in your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationResponse listServiceConversation(org.openapis.openapi.models.operations.ListServiceConversationRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceConversationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceConversationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceConversationResponse res = new org.openapis.openapi.models.operations.ListServiceConversationResponse() {{
            listServiceConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceConversationListServiceConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceConversationListServiceConversationResponse.class);
                res.listServiceConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all messages in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationMessageResponse listServiceConversationMessage(org.openapis.openapi.models.operations.ListServiceConversationMessageRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceConversationMessagePathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceConversationMessageQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceConversationMessageResponse res = new org.openapis.openapi.models.operations.ListServiceConversationMessageResponse() {{
            listServiceConversationMessageResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceConversationMessageListServiceConversationMessageResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceConversationMessageListServiceConversationMessageResponse.class);
                res.listServiceConversationMessageResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all delivery and read receipts of the conversation message
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptResponse listServiceConversationMessageReceipt(org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_CONVERSATION_MESSAGE_RECEIPT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{MessageSid}/Receipts", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptResponse res = new org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptResponse() {{
            listServiceConversationMessageReceiptResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptListServiceConversationMessageReceiptResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceConversationMessageReceiptListServiceConversationMessageReceiptResponse.class);
                res.listServiceConversationMessageReceiptResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all participants of the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationParticipantResponse listServiceConversationParticipant(org.openapis.openapi.models.operations.ListServiceConversationParticipantRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceConversationParticipantPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceConversationParticipantQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceConversationParticipantResponse res = new org.openapis.openapi.models.operations.ListServiceConversationParticipantResponse() {{
            listServiceConversationParticipantResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceConversationParticipantListServiceConversationParticipantResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceConversationParticipantListServiceConversationParticipantResponse.class);
                res.listServiceConversationParticipantResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all webhooks scoped to the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookResponse listServiceConversationScopedWebhook(org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookResponse() {{
            listServiceConversationScopedWebhookResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookListServiceConversationScopedWebhookResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceConversationScopedWebhookListServiceConversationScopedWebhookResponse.class);
                res.listServiceConversationScopedWebhookResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Conversations that this Participant belongs to by identity or by address. Only one parameter should be specified.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceParticipantConversationResponse listServiceParticipantConversation(org.openapis.openapi.models.operations.ListServiceParticipantConversationRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_PARTICIPANT_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceParticipantConversationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/ParticipantConversations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceParticipantConversationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceParticipantConversationResponse res = new org.openapis.openapi.models.operations.ListServiceParticipantConversationResponse() {{
            listServiceParticipantConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceParticipantConversationListServiceParticipantConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceParticipantConversationListServiceParticipantConversationResponse.class);
                res.listServiceParticipantConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all user roles in your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceRoleResponse listServiceRole(org.openapis.openapi.models.operations.ListServiceRoleRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_ROLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceRolePathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Roles", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceRoleQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceRoleResponse res = new org.openapis.openapi.models.operations.ListServiceRoleResponse() {{
            listServiceRoleResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceRoleListServiceRoleResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceRoleListServiceRoleResponse.class);
                res.listServiceRoleResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all conversation users in your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceUserResponse listServiceUser(org.openapis.openapi.models.operations.ListServiceUserRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_USER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceUserPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceUserQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceUserResponse res = new org.openapis.openapi.models.operations.ListServiceUserResponse() {{
            listServiceUserResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceUserListServiceUserResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceUserListServiceUserResponse.class);
                res.listServiceUserResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all User Conversations for the User.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceUserConversationResponse listServiceUserConversation(org.openapis.openapi.models.operations.ListServiceUserConversationRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListServiceUserConversationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceUserConversationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceUserConversationResponse res = new org.openapis.openapi.models.operations.ListServiceUserConversationResponse() {{
            listServiceUserConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceUserConversationListServiceUserConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceUserConversationListServiceUserConversationResponse.class);
                res.listServiceUserConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all conversation users in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListUserResponse listUser(org.openapis.openapi.models.operations.ListUserRequest request) throws Exception {
        String baseUrl = LIST_USER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Users");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUserQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUserResponse res = new org.openapis.openapi.models.operations.ListUserResponse() {{
            listUserResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUserListUserResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUserListUserResponse.class);
                res.listUserResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all User Conversations for the User.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListUserConversationResponse listUserConversation(org.openapis.openapi.models.operations.ListUserConversationRequest request) throws Exception {
        String baseUrl = LIST_USER_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUserConversationPathParams.class, baseUrl, "/v1/Users/{UserSid}/Conversations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUserConversationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUserConversationResponse res = new org.openapis.openapi.models.operations.ListUserConversationResponse() {{
            listUserConversationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUserConversationListUserConversationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUserConversationListUserConversationResponse.class);
                res.listUserConversationResponse = out;
            }
        }

        return res;
    }

    /**
     * Update the global configuration of conversations on your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConfigurationResponse updateConfiguration(org.openapis.openapi.models.operations.UpdateConfigurationRequest request) throws Exception {
        String baseUrl = UPDATE_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConfigurationResponse res = new org.openapis.openapi.models.operations.UpdateConfigurationResponse() {{
            conversationsV1Configuration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Configuration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Configuration.class);
                res.conversationsV1Configuration = out;
            }
        }

        return res;
    }

    /**
     * Update an existing address configuration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConfigurationAddressResponse updateConfigurationAddress(org.openapis.openapi.models.operations.UpdateConfigurationAddressRequest request) throws Exception {
        String baseUrl = UPDATE_CONFIGURATION_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConfigurationAddressPathParams.class, baseUrl, "/v1/Configuration/Addresses/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConfigurationAddressResponse res = new org.openapis.openapi.models.operations.UpdateConfigurationAddressResponse() {{
            conversationsV1ConfigurationAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConfigurationAddress.class);
                res.conversationsV1ConfigurationAddress = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateConfigurationWebhookResponse updateConfigurationWebhook(org.openapis.openapi.models.operations.UpdateConfigurationWebhookRequest request) throws Exception {
        String baseUrl = UPDATE_CONFIGURATION_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Configuration/Webhooks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConfigurationWebhookResponse res = new org.openapis.openapi.models.operations.UpdateConfigurationWebhookResponse() {{
            conversationsV1ConfigurationConfigurationWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConfigurationConfigurationWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConfigurationConfigurationWebhook.class);
                res.conversationsV1ConfigurationConfigurationWebhook = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationResponse updateConversation(org.openapis.openapi.models.operations.UpdateConversationRequest request) throws Exception {
        String baseUrl = UPDATE_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConversationPathParams.class, baseUrl, "/v1/Conversations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConversationResponse res = new org.openapis.openapi.models.operations.UpdateConversationResponse() {{
            conversationsV1Conversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Conversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Conversation.class);
                res.conversationsV1Conversation = out;
            }
        }

        return res;
    }

    /**
     * Update an existing message in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationMessageResponse updateConversationMessage(org.openapis.openapi.models.operations.UpdateConversationMessageRequest request) throws Exception {
        String baseUrl = UPDATE_CONVERSATION_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConversationMessagePathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Messages/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConversationMessageResponse res = new org.openapis.openapi.models.operations.UpdateConversationMessageResponse() {{
            conversationsV1ConversationConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationMessage.class);
                res.conversationsV1ConversationConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Update an existing participant in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationParticipantResponse updateConversationParticipant(org.openapis.openapi.models.operations.UpdateConversationParticipantRequest request) throws Exception {
        String baseUrl = UPDATE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConversationParticipantPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Participants/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConversationParticipantResponse res = new org.openapis.openapi.models.operations.UpdateConversationParticipantResponse() {{
            conversationsV1ConversationConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationParticipant.class);
                res.conversationsV1ConversationConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConversationScopedWebhookResponse updateConversationScopedWebhook(org.openapis.openapi.models.operations.UpdateConversationScopedWebhookRequest request) throws Exception {
        String baseUrl = UPDATE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConversationScopedWebhookPathParams.class, baseUrl, "/v1/Conversations/{ConversationSid}/Webhooks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.UpdateConversationScopedWebhookResponse() {{
            conversationsV1ConversationConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ConversationConversationScopedWebhook.class);
                res.conversationsV1ConversationConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Update an existing push notification credential on your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCredentialResponse updateCredential(org.openapis.openapi.models.operations.UpdateCredentialRequest request) throws Exception {
        String baseUrl = UPDATE_CREDENTIAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCredentialPathParams.class, baseUrl, "/v1/Credentials/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCredentialResponse res = new org.openapis.openapi.models.operations.UpdateCredentialResponse() {{
            conversationsV1Credential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Credential.class);
                res.conversationsV1Credential = out;
            }
        }

        return res;
    }

    /**
     * Update an existing user role in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateRoleResponse updateRole(org.openapis.openapi.models.operations.UpdateRoleRequest request) throws Exception {
        String baseUrl = UPDATE_ROLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateRolePathParams.class, baseUrl, "/v1/Roles/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateRoleResponse res = new org.openapis.openapi.models.operations.UpdateRoleResponse() {{
            conversationsV1Role = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1Role out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1Role.class);
                res.conversationsV1Role = out;
            }
        }

        return res;
    }

    /**
     * Update configuration settings of a conversation service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConfigurationResponse updateServiceConfiguration(org.openapis.openapi.models.operations.UpdateServiceConfigurationRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceConfigurationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceConfigurationResponse res = new org.openapis.openapi.models.operations.UpdateServiceConfigurationResponse() {{
            conversationsV1ServiceServiceConfiguration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfiguration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfiguration.class);
                res.conversationsV1ServiceServiceConfiguration = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation in your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationResponse updateServiceConversation(org.openapis.openapi.models.operations.UpdateServiceConversationRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceConversationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceConversationResponse res = new org.openapis.openapi.models.operations.UpdateServiceConversationResponse() {{
            conversationsV1ServiceServiceConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversation.class);
                res.conversationsV1ServiceServiceConversation = out;
            }
        }

        return res;
    }

    /**
     * Update an existing message in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationMessageResponse updateServiceConversationMessage(org.openapis.openapi.models.operations.UpdateServiceConversationMessageRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_CONVERSATION_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceConversationMessagePathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Messages/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceConversationMessageResponse res = new org.openapis.openapi.models.operations.UpdateServiceConversationMessageResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationMessage.class);
                res.conversationsV1ServiceServiceConversationServiceConversationMessage = out;
            }
        }

        return res;
    }

    /**
     * Update an existing participant in the conversation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationParticipantResponse updateServiceConversationParticipant(org.openapis.openapi.models.operations.UpdateServiceConversationParticipantRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_CONVERSATION_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceConversationParticipantPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Participants/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceConversationParticipantResponse res = new org.openapis.openapi.models.operations.UpdateServiceConversationParticipantResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationParticipant.class);
                res.conversationsV1ServiceServiceConversationServiceConversationParticipant = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation-scoped webhook
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookResponse updateServiceConversationScopedWebhook(org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_CONVERSATION_SCOPED_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Conversations/{ConversationSid}/Webhooks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookResponse res = new org.openapis.openapi.models.operations.UpdateServiceConversationScopedWebhookResponse() {{
            conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConversationServiceConversationScopedWebhook.class);
                res.conversationsV1ServiceServiceConversationServiceConversationScopedWebhook = out;
            }
        }

        return res;
    }

    /**
     * Update push notification service settings
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceNotificationResponse updateServiceNotification(org.openapis.openapi.models.operations.UpdateServiceNotificationRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_NOTIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceNotificationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration/Notifications", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceNotificationResponse res = new org.openapis.openapi.models.operations.UpdateServiceNotificationResponse() {{
            conversationsV1ServiceServiceConfigurationServiceNotification = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceNotification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceNotification.class);
                res.conversationsV1ServiceServiceConfigurationServiceNotification = out;
            }
        }

        return res;
    }

    /**
     * Update an existing user role in your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceRoleResponse updateServiceRole(org.openapis.openapi.models.operations.UpdateServiceRoleRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_ROLE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceRolePathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Roles/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceRoleResponse res = new org.openapis.openapi.models.operations.UpdateServiceRoleResponse() {{
            conversationsV1ServiceServiceRole = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceRole.class);
                res.conversationsV1ServiceServiceRole = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation user in your service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceUserResponse updateServiceUser(org.openapis.openapi.models.operations.UpdateServiceUserRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_USER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceUserPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceUserResponse res = new org.openapis.openapi.models.operations.UpdateServiceUserResponse() {{
            conversationsV1ServiceServiceUser = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUser.class);
                res.conversationsV1ServiceServiceUser = out;
            }
        }

        return res;
    }

    /**
     * Update a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceUserConversationResponse updateServiceUserConversation(org.openapis.openapi.models.operations.UpdateServiceUserConversationRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_USER_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceUserConversationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Users/{UserSid}/Conversations/{ConversationSid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceUserConversationResponse res = new org.openapis.openapi.models.operations.UpdateServiceUserConversationResponse() {{
            conversationsV1ServiceServiceUserServiceUserConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUserServiceUserConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceUserServiceUserConversation.class);
                res.conversationsV1ServiceServiceUserServiceUserConversation = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Webhook.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationResponse updateServiceWebhookConfiguration(org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_WEBHOOK_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationPathParams.class, baseUrl, "/v1/Services/{ChatServiceSid}/Configuration/Webhooks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationResponse res = new org.openapis.openapi.models.operations.UpdateServiceWebhookConfigurationResponse() {{
            conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration.class);
                res.conversationsV1ServiceServiceConfigurationServiceWebhookConfiguration = out;
            }
        }

        return res;
    }

    /**
     * Update an existing conversation user in your account's default service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUserResponse updateUser(org.openapis.openapi.models.operations.UpdateUserRequest request) throws Exception {
        String baseUrl = UPDATE_USER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUserPathParams.class, baseUrl, "/v1/Users/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUserResponse res = new org.openapis.openapi.models.operations.UpdateUserResponse() {{
            conversationsV1User = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1User out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1User.class);
                res.conversationsV1User = out;
            }
        }

        return res;
    }

    /**
     * Update a specific User Conversation.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUserConversationResponse updateUserConversation(org.openapis.openapi.models.operations.UpdateUserConversationRequest request) throws Exception {
        String baseUrl = UPDATE_USER_CONVERSATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUserConversationPathParams.class, baseUrl, "/v1/Users/{UserSid}/Conversations/{ConversationSid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUserConversationResponse res = new org.openapis.openapi.models.operations.UpdateUserConversationResponse() {{
            conversationsV1UserUserConversation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConversationsV1UserUserConversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConversationsV1UserUserConversation.class);
                res.conversationsV1UserUserConversation = out;
            }
        }

        return res;
    }
}