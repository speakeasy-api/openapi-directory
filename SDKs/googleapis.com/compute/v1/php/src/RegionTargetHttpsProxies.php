<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionTargetHttpsProxies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified TargetHttpsProxy resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesDeleteResponse
     */
	public function computeRegionTargetHttpsProxiesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified TargetHttpsProxy resource in the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesGetResponse
     */
	public function computeRegionTargetHttpsProxiesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetHttpsProxy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetHttpsProxy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesInsertResponse
     */
	public function computeRegionTargetHttpsProxiesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpsProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetHttpsProxy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesListResponse
     */
	public function computeRegionTargetHttpsProxiesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpsProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetHttpsProxyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetHttpsProxyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified regional TargetHttpsProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesPatchResponse
     */
	public function computeRegionTargetHttpsProxiesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetHttpsProxy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces SslCertificates for TargetHttpsProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetSslCertificatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetSslCertificatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetSslCertificatesResponse
     */
	public function computeRegionTargetHttpsProxiesSetSslCertificates(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetSslCertificatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetSslCertificatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetSslCertificatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetSslCertificatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionTargetHttpsProxiesSetSslCertificatesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetSslCertificatesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetSslCertificatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the URL map for TargetHttpsProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetUrlMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetUrlMapSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetUrlMapResponse
     */
	public function computeRegionTargetHttpsProxiesSetUrlMap(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetUrlMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetUrlMapSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetUrlMapResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetUrlMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "urlMapReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetUrlMapRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionTargetHttpsProxiesSetUrlMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}