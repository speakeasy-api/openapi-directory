<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Disks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAddResourcePoliciesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAddResourcePoliciesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAddResourcePoliciesResponse
     */
	public function computeDisksAddResourcePolicies(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAddResourcePoliciesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAddResourcePoliciesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAddResourcePoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAddResourcePoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disksAddResourcePoliciesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksAddResourcePoliciesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAddResourcePoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an aggregated list of persistent disks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAggregatedListResponse
     */
	public function computeDisksAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/disks', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diskAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiskAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bulk create a set of disks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksBulkInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksBulkInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksBulkInsertResponse
     */
	public function computeDisksBulkInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksBulkInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksBulkInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksBulkInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/bulkInsert', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksBulkInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkInsertDiskResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksBulkInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksBulkInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a snapshot of a specified persistent disk. For regular snapshot creation, consider using snapshots.insert instead, as that method supports more features, such as creating snapshots in a project different from the source disk project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksCreateSnapshotRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksCreateSnapshotSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksCreateSnapshotResponse
     */
	public function computeDisksCreateSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksCreateSnapshotRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksCreateSnapshotSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksCreateSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksCreateSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snapshot", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksCreateSnapshotRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksCreateSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksDeleteResponse
     */
	public function computeDisksDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{disk}', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified persistent disk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetResponse
     */
	public function computeDisksGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{disk}', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->disk = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Disk', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetIamPolicyResponse
     */
	public function computeDisksGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a persistent disk in the specified project using the data in the request. You can create a disk from a source (sourceImage, sourceSnapshot, or sourceDisk) or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksInsertResponse
     */
	public function computeDisksInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disk", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of persistent disks contained within the specified zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksListResponse
     */
	public function computeDisksList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diskList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiskList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes resource policies from a disk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksRemoveResourcePoliciesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksRemoveResourcePoliciesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksRemoveResourcePoliciesResponse
     */
	public function computeDisksRemoveResourcePolicies(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksRemoveResourcePoliciesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksRemoveResourcePoliciesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksRemoveResourcePoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksRemoveResourcePoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disksRemoveResourcePoliciesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksRemoveResourcePoliciesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksRemoveResourcePoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resizes the specified persistent disk. You can only increase the size of the disk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksResizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksResizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksResizeResponse
     */
	public function computeDisksResize(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksResizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksResizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksResizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{disk}/resize', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksResizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disksResizeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksResizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksResizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetIamPolicyResponse
     */
	public function computeDisksSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "zoneSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetLabelsResponse
     */
	public function computeDisksSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "zoneSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous replication. Must be invoked on the primary disk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStartAsyncReplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStartAsyncReplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStartAsyncReplicationResponse
     */
	public function computeDisksStartAsyncReplication(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStartAsyncReplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStartAsyncReplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStartAsyncReplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{disk}/startAsyncReplication', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStartAsyncReplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disksStartAsyncReplicationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksStartAsyncReplicationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStartAsyncReplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops asynchronous replication. Can be invoked either on the primary or on the secondary disk.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopAsyncReplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopAsyncReplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopAsyncReplicationResponse
     */
	public function computeDisksStopAsyncReplication(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopAsyncReplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopAsyncReplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopAsyncReplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{disk}/stopAsyncReplication', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopAsyncReplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopAsyncReplicationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopAsyncReplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops asynchronous replication for a consistency group of disks. Can be invoked either in the primary or secondary scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopGroupAsyncReplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopGroupAsyncReplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopGroupAsyncReplicationResponse
     */
	public function computeDisksStopGroupAsyncReplication(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopGroupAsyncReplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopGroupAsyncReplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopGroupAsyncReplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/stopGroupAsyncReplication', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopGroupAsyncReplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disksStopGroupAsyncReplicationResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopGroupAsyncReplicationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksStopGroupAsyncReplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksTestIamPermissionsResponse
     */
	public function computeDisksTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified disk with the data included in the request. The update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: user_license.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeDisksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeDisksUpdateResponse
     */
	public function computeDisksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeDisksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeDisksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/disks/{disk}', \OpenAPI\OpenAPI\Models\Operations\ComputeDisksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "disk1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeDisksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeDisksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}