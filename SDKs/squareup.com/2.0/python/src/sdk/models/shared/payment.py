"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from ..shared import bankaccountpaymentdetails as shared_bankaccountpaymentdetails
from ..shared import cardpaymentdetails as shared_cardpaymentdetails
from ..shared import cashpaymentdetails as shared_cashpaymentdetails
from ..shared import digitalwalletdetails as shared_digitalwalletdetails
from ..shared import externalpaymentdetails as shared_externalpaymentdetails
from ..shared import money as shared_money
from ..shared import processingfee as shared_processingfee
from ..shared import riskevaluation as shared_riskevaluation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Payment:
    r"""Represents a payment processed by the Square API."""
    
    amount_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    app_fee_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_fee_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    approved_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    bank_account_details: Optional[shared_bankaccountpaymentdetails.BankAccountPaymentDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_account_details'), 'exclude': lambda f: f is None }})
    r"""Additional details about BANK_ACCOUNT type payments."""  
    billing_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_address'), 'exclude': lambda f: f is None }})
    r"""Represents a postal address in a country. The address format is based
    on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
    see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
    This format has dedicated fields for four address components: postal code, 
    locality (city), administrative district (state, prefecture, or province), and 
    sublocality (town or village). These components have dedicated fields in the 
    `Address` object because software sometimes behaves differently based on them. 
    For example, sales tax software may charge different amounts of sales tax 
    based on the postal code, and some software is only available in 
    certain states due to compliance reasons.
    
    For the remaining address components, the `Address` type provides the 
    `address_line_1` and `address_line_2` fields for free-form data entry. 
    These fields are free-form because the remaining address components have 
    too many variations around the world and typical software does not parse 
    these components. These fields enable users to enter anything they want. 
    
    Note that, in the current implementation, all other `Address` type fields are blank. 
    These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
    `administrative_district_level_2`, `administrative_district_level_3`, 
    `first_name`, `last_name`, and `organization`. 
    
    When it comes to localization, the seller's language preferences 
    (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
    are ignored for addresses. Even though Square products (such as Square Point of Sale 
    and the Seller Dashboard) mostly use a seller's language preference in 
    communication, when it comes to addresses, they will use English for a US address, 
    Japanese for an address in Japan, and so on.
    """  
    buyer_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyer_email_address'), 'exclude': lambda f: f is None }})
    r"""The buyer's email address."""  
    capabilities: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capabilities'), 'exclude': lambda f: f is None }})
    r"""Actions that can be performed on this payment:
    - `EDIT_AMOUNT_UP` - The payment amount can be edited up.
    - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down.
    - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up.
    - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.
    """  
    card_details: Optional[shared_cardpaymentdetails.CardPaymentDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_details'), 'exclude': lambda f: f is None }})
    r"""Reflects the current status of a card payment. Contains only non-confidential information."""  
    cash_details: Optional[shared_cashpaymentdetails.CashPaymentDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cash_details'), 'exclude': lambda f: f is None }})
    r"""Stores details about a cash payment. Contains only non-confidential information. For more information, see
    [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
    """  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp of when the payment was created, in RFC 3339 format."""  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id'), 'exclude': lambda f: f is None }})
    r"""The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment."""  
    delay_action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delay_action'), 'exclude': lambda f: f is None }})
    r"""The action to be applied to the payment when the `delay_duration` has elapsed. This field
    is read-only.
    
    Current values include `CANCEL`.
    """  
    delay_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delay_duration'), 'exclude': lambda f: f is None }})
    r"""The duration of time after the payment's creation when Square automatically applies the
    `delay_action` to the payment. This automatic `delay_action` applies only to payments that
    do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration`
    time period.
    
    This field is specified as a time duration, in RFC 3339 format.
    
    Notes:
    This feature is only supported for card payments.
    
    Default:
    
    - Card-present payments: \"PT36H\" (36 hours) from the creation time.
    - Card-not-present payments: \"P7D\" (7 days) from the creation time.
    """  
    delayed_until: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delayed_until'), 'exclude': lambda f: f is None }})
    r"""The read-only timestamp of when the `delay_action` is automatically applied,
    in RFC 3339 format.
    
    Note that this field is calculated by summing the payment's `delay_duration` and `created_at`
    fields. The `created_at` field is generated by Square and might not exactly match the
    time on your local machine.
    """  
    employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employee_id'), 'exclude': lambda f: f is None }})
    r"""An optional ID of the employee associated with taking the payment."""  
    external_details: Optional[shared_externalpaymentdetails.ExternalPaymentDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_details'), 'exclude': lambda f: f is None }})
    r"""Stores details about an external payment. Contains only non-confidential information.
    For more information, see 
    [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A unique ID for the payment."""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the location associated with the payment."""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""An optional note to include when creating a payment."""  
    order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the order associated with the payment."""  
    processing_fee: Optional[list[shared_processingfee.ProcessingFee]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_fee'), 'exclude': lambda f: f is None }})
    r"""The processing fees and fee adjustments assessed by Square for this payment."""  
    receipt_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receipt_number'), 'exclude': lambda f: f is None }})
    r"""The payment's receipt number.
    The field is missing if a payment is canceled.
    """  
    receipt_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receipt_url'), 'exclude': lambda f: f is None }})
    r"""The URL for the payment's receipt.
    The field is only populated for COMPLETED payments.
    """  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference_id'), 'exclude': lambda f: f is None }})
    r"""An optional ID that associates the payment with an entity in
    another system.
    """  
    refund_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refund_ids'), 'exclude': lambda f: f is None }})
    r"""A list of `refund_id`s identifying refunds for the payment."""  
    refunded_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    risk_evaluation: Optional[shared_riskevaluation.RiskEvaluation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('risk_evaluation'), 'exclude': lambda f: f is None }})
    r"""Represents fraud risk information for the associated payment.
    
    When you take a payment through Square's Payments API (using the `CreatePayment`
    endpoint), Square evaluates it and assigns a risk level to the payment. Sellers
    can use this information to determine the course of action (for example,
    provide the goods/services or refund the payment).
    """  
    shipping_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_address'), 'exclude': lambda f: f is None }})
    r"""Represents a postal address in a country. The address format is based
    on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
    see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
    This format has dedicated fields for four address components: postal code, 
    locality (city), administrative district (state, prefecture, or province), and 
    sublocality (town or village). These components have dedicated fields in the 
    `Address` object because software sometimes behaves differently based on them. 
    For example, sales tax software may charge different amounts of sales tax 
    based on the postal code, and some software is only available in 
    certain states due to compliance reasons.
    
    For the remaining address components, the `Address` type provides the 
    `address_line_1` and `address_line_2` fields for free-form data entry. 
    These fields are free-form because the remaining address components have 
    too many variations around the world and typical software does not parse 
    these components. These fields enable users to enter anything they want. 
    
    Note that, in the current implementation, all other `Address` type fields are blank. 
    These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
    `administrative_district_level_2`, `administrative_district_level_3`, 
    `first_name`, `last_name`, and `organization`. 
    
    When it comes to localization, the seller's language preferences 
    (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
    are ignored for addresses. Even though Square products (such as Square Point of Sale 
    and the Seller Dashboard) mostly use a seller's language preference in 
    communication, when it comes to addresses, they will use English for a US address, 
    Japanese for an address in Japan, and so on.
    """  
    source_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_type'), 'exclude': lambda f: f is None }})
    r"""The source type for this payment.
    
    Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `CASH`, or `EXTERNAL`.
    """  
    statement_description_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statement_description_identifier'), 'exclude': lambda f: f is None }})
    r"""Additional payment information that gets added to the customer's card statement
    as part of the statement description.
    
    Note that the `statement_description_identifier` might get truncated on the statement description
    to fit the required information including the Square identifier (SQ *) and the name of the
    seller taking the payment.
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED."""  
    tip_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tip_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    total_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp of when the payment was last updated, in RFC 3339 format."""  
    version_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version_token'), 'exclude': lambda f: f is None }})
    r"""Used for optimistic concurrency. This opaque token identifies a specific version of the
    `Payment` object.
    """  
    wallet_details: Optional[shared_digitalwalletdetails.DigitalWalletDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wallet_details'), 'exclude': lambda f: f is None }})
    r"""Additional details about `WALLET` type payments. Contains only non-confidential information."""  
    