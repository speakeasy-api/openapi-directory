"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import releasechannelconfig as shared_releasechannelconfig
from ..shared import windowsversions as shared_windowsversions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServerConfig:
    r"""Kubernetes Engine service configuration."""
    
    channels: Optional[list[shared_releasechannelconfig.ReleaseChannelConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channels'), 'exclude': lambda f: f is None }})
    r"""List of release channel configurations."""  
    default_cluster_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultClusterVersion'), 'exclude': lambda f: f is None }})
    r"""Version of Kubernetes the service deploys by default."""  
    default_image_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultImageType'), 'exclude': lambda f: f is None }})
    r"""Default image type."""  
    valid_image_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validImageTypes'), 'exclude': lambda f: f is None }})
    r"""List of valid image types."""  
    valid_master_versions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validMasterVersions'), 'exclude': lambda f: f is None }})
    r"""List of valid master versions, in descending order."""  
    valid_node_versions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validNodeVersions'), 'exclude': lambda f: f is None }})
    r"""List of valid node upgrade target versions, in descending order."""  
    windows_version_maps: Optional[dict[str, shared_windowsversions.WindowsVersions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('windowsVersionMaps'), 'exclude': lambda f: f is None }})
    r"""Maps of Kubernetes version and supported Windows server versions."""  
    