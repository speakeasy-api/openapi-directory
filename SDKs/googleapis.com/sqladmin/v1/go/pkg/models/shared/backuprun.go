// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BackupRunBackupKindEnum - Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
type BackupRunBackupKindEnum string

const (
	BackupRunBackupKindEnumSQLBackupKindUnspecified BackupRunBackupKindEnum = "SQL_BACKUP_KIND_UNSPECIFIED"
	BackupRunBackupKindEnumSnapshot                 BackupRunBackupKindEnum = "SNAPSHOT"
	BackupRunBackupKindEnumPhysical                 BackupRunBackupKindEnum = "PHYSICAL"
)

func (e *BackupRunBackupKindEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SQL_BACKUP_KIND_UNSPECIFIED":
		fallthrough
	case "SNAPSHOT":
		fallthrough
	case "PHYSICAL":
		*e = BackupRunBackupKindEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BackupRunBackupKindEnum: %s", s)
	}
}

// BackupRunStatusEnum - The status of this run.
type BackupRunStatusEnum string

const (
	BackupRunStatusEnumSQLBackupRunStatusUnspecified BackupRunStatusEnum = "SQL_BACKUP_RUN_STATUS_UNSPECIFIED"
	BackupRunStatusEnumEnqueued                      BackupRunStatusEnum = "ENQUEUED"
	BackupRunStatusEnumOverdue                       BackupRunStatusEnum = "OVERDUE"
	BackupRunStatusEnumRunning                       BackupRunStatusEnum = "RUNNING"
	BackupRunStatusEnumFailed                        BackupRunStatusEnum = "FAILED"
	BackupRunStatusEnumSuccessful                    BackupRunStatusEnum = "SUCCESSFUL"
	BackupRunStatusEnumSkipped                       BackupRunStatusEnum = "SKIPPED"
	BackupRunStatusEnumDeletionPending               BackupRunStatusEnum = "DELETION_PENDING"
	BackupRunStatusEnumDeletionFailed                BackupRunStatusEnum = "DELETION_FAILED"
	BackupRunStatusEnumDeleted                       BackupRunStatusEnum = "DELETED"
)

func (e *BackupRunStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SQL_BACKUP_RUN_STATUS_UNSPECIFIED":
		fallthrough
	case "ENQUEUED":
		fallthrough
	case "OVERDUE":
		fallthrough
	case "RUNNING":
		fallthrough
	case "FAILED":
		fallthrough
	case "SUCCESSFUL":
		fallthrough
	case "SKIPPED":
		fallthrough
	case "DELETION_PENDING":
		fallthrough
	case "DELETION_FAILED":
		fallthrough
	case "DELETED":
		*e = BackupRunStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BackupRunStatusEnum: %s", s)
	}
}

// BackupRunTypeEnum - The type of this run; can be either "AUTOMATED" or "ON_DEMAND" or "FINAL". This field defaults to "ON_DEMAND" and is ignored, when specified for insert requests.
type BackupRunTypeEnum string

const (
	BackupRunTypeEnumSQLBackupRunTypeUnspecified BackupRunTypeEnum = "SQL_BACKUP_RUN_TYPE_UNSPECIFIED"
	BackupRunTypeEnumAutomated                   BackupRunTypeEnum = "AUTOMATED"
	BackupRunTypeEnumOnDemand                    BackupRunTypeEnum = "ON_DEMAND"
)

func (e *BackupRunTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SQL_BACKUP_RUN_TYPE_UNSPECIFIED":
		fallthrough
	case "AUTOMATED":
		fallthrough
	case "ON_DEMAND":
		*e = BackupRunTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BackupRunTypeEnum: %s", s)
	}
}

// BackupRun - A BackupRun resource.
type BackupRun struct {
	// Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
	BackupKind *BackupRunBackupKindEnum `json:"backupKind,omitempty"`
	// The description of this run, only applicable to on-demand backups.
	Description *string `json:"description,omitempty"`
	// Disk encryption configuration for an instance.
	DiskEncryptionConfiguration *DiskEncryptionConfiguration `json:"diskEncryptionConfiguration,omitempty"`
	// Disk encryption status for an instance.
	DiskEncryptionStatus *DiskEncryptionStatus `json:"diskEncryptionStatus,omitempty"`
	// The time the backup operation completed in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	EndTime *string `json:"endTime,omitempty"`
	// The time the run was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	EnqueuedTime *string `json:"enqueuedTime,omitempty"`
	// Database instance operation error.
	Error *OperationError `json:"error,omitempty"`
	// The identifier for this backup run. Unique only for a specific Cloud SQL instance.
	ID *string `json:"id,omitempty"`
	// Name of the database instance.
	Instance *string `json:"instance,omitempty"`
	// This is always `sql#backupRun`.
	Kind *string `json:"kind,omitempty"`
	// Location of the backups.
	Location *string `json:"location,omitempty"`
	// The URI of this resource.
	SelfLink *string `json:"selfLink,omitempty"`
	// The time the backup operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	StartTime *string `json:"startTime,omitempty"`
	// The status of this run.
	Status *BackupRunStatusEnum `json:"status,omitempty"`
	// Backup time zone to prevent restores to an instance with a different time zone. Now relevant only for SQL Server.
	TimeZone *string `json:"timeZone,omitempty"`
	// The type of this run; can be either "AUTOMATED" or "ON_DEMAND" or "FINAL". This field defaults to "ON_DEMAND" and is ignored, when specified for insert requests.
	Type *BackupRunTypeEnum `json:"type,omitempty"`
	// The start time of the backup window during which this the backup was attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	WindowStartTime *string `json:"windowStartTime,omitempty"`
}
