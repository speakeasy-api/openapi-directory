// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OsNameEnum - For Linux, a distribution, for Windows, the commercial name
type OsNameEnum string

const (
	OsNameEnumDebian                 OsNameEnum = "debian"
	OsNameEnumKali                   OsNameEnum = "kali"
	OsNameEnumUbuntu                 OsNameEnum = "ubuntu"
	OsNameEnumRedhat                 OsNameEnum = "redhat"
	OsNameEnumCentos                 OsNameEnum = "centos"
	OsNameEnumFedora                 OsNameEnum = "fedora"
	OsNameEnumSuse                   OsNameEnum = "suse"
	OsNameEnumOracle                 OsNameEnum = "oracle"
	OsNameEnumScientific             OsNameEnum = "scientific"
	OsNameEnumSlackware              OsNameEnum = "slackware"
	OsNameEnumXp                     OsNameEnum = "xp"
	OsNameEnumVista                  OsNameEnum = "vista"
	OsNameEnumSeven                  OsNameEnum = "seven"
	OsNameEnumTen                    OsNameEnum = "10"
	OsNameEnumTwoThousand            OsNameEnum = "2000"
	OsNameEnumTwoThousandAndThree    OsNameEnum = "2003"
	OsNameEnumTwoThousandAndEightR2  OsNameEnum = "2008 r2"
	OsNameEnumTwoThousandAndTwelve   OsNameEnum = "2012"
	OsNameEnumTwoThousandAndTwelveR2 OsNameEnum = "2012 r2"
	OsNameEnumTwoThousandAndSixteen  OsNameEnum = "2016"
)

func (e *OsNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "debian":
		fallthrough
	case "kali":
		fallthrough
	case "ubuntu":
		fallthrough
	case "redhat":
		fallthrough
	case "centos":
		fallthrough
	case "fedora":
		fallthrough
	case "suse":
		fallthrough
	case "oracle":
		fallthrough
	case "scientific":
		fallthrough
	case "slackware":
		fallthrough
	case "xp":
		fallthrough
	case "vista":
		fallthrough
	case "seven":
		fallthrough
	case "10":
		fallthrough
	case "2000":
		fallthrough
	case "2003":
		fallthrough
	case "2008 r2":
		fallthrough
	case "2012":
		fallthrough
	case "2012 r2":
		fallthrough
	case "2016":
		*e = OsNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OsNameEnum: %s", s)
	}
}

type OsTypeEnum string

const (
	OsTypeEnumLinux   OsTypeEnum = "linux"
	OsTypeEnumWindows OsTypeEnum = "windows"
	OsTypeEnumSolaris OsTypeEnum = "solaris"
	OsTypeEnumAix     OsTypeEnum = "aix"
	OsTypeEnumFreebsd OsTypeEnum = "freebsd"
	OsTypeEnumUnknown OsTypeEnum = "unknown"
)

func (e *OsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "linux":
		fallthrough
	case "windows":
		fallthrough
	case "solaris":
		fallthrough
	case "aix":
		fallthrough
	case "freebsd":
		fallthrough
	case "unknown":
		*e = OsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OsTypeEnum: %s", s)
	}
}

type Os struct {
	// The long description name of the os
	FullName string `json:"fullName"`
	// For Linux, a distribution, for Windows, the commercial name
	Name OsNameEnum `json:"name"`
	// a service pack informationnal string
	ServicePack *string    `json:"servicePack,omitempty"`
	Type        OsTypeEnum `json:"type"`
	// A string representation of the version
	Version string `json:"version"`
}
