/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DataLabel } from "./datalabel";
import { LineStyle } from "./linestyle";
import { WaterfallChartDomain } from "./waterfallchartdomain";
import { WaterfallChartSeries } from "./waterfallchartseries";
import { Expose, Type } from "class-transformer";

/**
 * The stacked type.
 */
export enum WaterfallChartSpecStackedTypeEnum {
  WaterfallStackedTypeUnspecified = "WATERFALL_STACKED_TYPE_UNSPECIFIED",
  Stacked = "STACKED",
  Sequential = "SEQUENTIAL",
}

/**
 * A waterfall chart.
 */
export class WaterfallChartSpec extends SpeakeasyBase {
  /**
   * Properties that describe the style of a line.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectorLineStyle" })
  @Type(() => LineStyle)
  connectorLineStyle?: LineStyle;

  /**
   * The domain of a waterfall chart.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain" })
  @Type(() => WaterfallChartDomain)
  domain?: WaterfallChartDomain;

  /**
   * True to interpret the first value as a total.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firstValueIsTotal" })
  firstValueIsTotal?: boolean;

  /**
   * True to hide connector lines between columns.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hideConnectorLines" })
  hideConnectorLines?: boolean;

  /**
   * The data this waterfall chart is visualizing.
   */
  @SpeakeasyMetadata({ elemType: WaterfallChartSeries })
  @Expose({ name: "series" })
  @Type(() => WaterfallChartSeries)
  series?: WaterfallChartSeries[];

  /**
   * The stacked type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stackedType" })
  stackedType?: WaterfallChartSpecStackedTypeEnum;

  /**
   * Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalDataLabel" })
  @Type(() => DataLabel)
  totalDataLabel?: DataLabel;
}
