/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class DomesticStandingOrders {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Domestic Standing Order Consents
   */
  createDomesticStandingOrderConsentsJson(
    req: operations.CreateDomesticStandingOrderConsentsJsonRequest,
    security: operations.CreateDomesticStandingOrderConsentsJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDomesticStandingOrderConsentsJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateDomesticStandingOrderConsentsJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/domestic-standing-order-consents";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "obWriteDomesticStandingOrderConsent5",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateDomesticStandingOrderConsentsJsonSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDomesticStandingOrderConsentsJsonResponse =
        new operations.CreateDomesticStandingOrderConsentsJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteDomesticStandingOrderConsentResponse6 =
              utils.objectToClass(
                httpRes?.data,
                shared.OBWriteDomesticStandingOrderConsentResponse6
              );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteDomesticStandingOrderConsentResponse6 =
              utils.objectToClass(
                httpRes?.data,
                shared.OBWriteDomesticStandingOrderConsentResponse6
              );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406, 415].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Create Domestic Standing Order Consents
   */
  createDomesticStandingOrderConsentsRaw(
    req: operations.CreateDomesticStandingOrderConsentsRawRequest,
    security: operations.CreateDomesticStandingOrderConsentsRawSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDomesticStandingOrderConsentsRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateDomesticStandingOrderConsentsRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/domestic-standing-order-consents";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateDomesticStandingOrderConsentsRawSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDomesticStandingOrderConsentsRawResponse =
        new operations.CreateDomesticStandingOrderConsentsRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteDomesticStandingOrderConsentResponse6 =
              utils.objectToClass(
                httpRes?.data,
                shared.OBWriteDomesticStandingOrderConsentResponse6
              );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteDomesticStandingOrderConsentResponse6 =
              utils.objectToClass(
                httpRes?.data,
                shared.OBWriteDomesticStandingOrderConsentResponse6
              );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406, 415].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Create Domestic Standing Orders
   */
  createDomesticStandingOrdersJson(
    req: operations.CreateDomesticStandingOrdersJsonRequest,
    security: operations.CreateDomesticStandingOrdersJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDomesticStandingOrdersJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateDomesticStandingOrdersJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/domestic-standing-orders";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "obWriteDomesticStandingOrder3",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateDomesticStandingOrdersJsonSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDomesticStandingOrdersJsonResponse =
        new operations.CreateDomesticStandingOrdersJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteDomesticStandingOrderResponse6 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteDomesticStandingOrderResponse6
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteDomesticStandingOrderResponse6 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteDomesticStandingOrderResponse6
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406, 415].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Create Domestic Standing Orders
   */
  createDomesticStandingOrdersRaw(
    req: operations.CreateDomesticStandingOrdersRawRequest,
    security: operations.CreateDomesticStandingOrdersRawSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDomesticStandingOrdersRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateDomesticStandingOrdersRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/domestic-standing-orders";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateDomesticStandingOrdersRawSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDomesticStandingOrdersRawResponse =
        new operations.CreateDomesticStandingOrdersRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteDomesticStandingOrderResponse6 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteDomesticStandingOrderResponse6
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteDomesticStandingOrderResponse6 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteDomesticStandingOrderResponse6
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406, 415].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get Domestic Standing Order Consents
   */
  getDomesticStandingOrderConsentsConsentId(
    req: operations.GetDomesticStandingOrderConsentsConsentIdRequest,
    security: operations.GetDomesticStandingOrderConsentsConsentIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDomesticStandingOrderConsentsConsentIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDomesticStandingOrderConsentsConsentIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/domestic-standing-order-consents/{ConsentId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetDomesticStandingOrderConsentsConsentIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDomesticStandingOrderConsentsConsentIdResponse =
        new operations.GetDomesticStandingOrderConsentsConsentIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteDomesticStandingOrderConsentResponse6 =
              utils.objectToClass(
                httpRes?.data,
                shared.OBWriteDomesticStandingOrderConsentResponse6
              );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteDomesticStandingOrderConsentResponse6 =
              utils.objectToClass(
                httpRes?.data,
                shared.OBWriteDomesticStandingOrderConsentResponse6
              );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get Domestic Standing Orders
   */
  getDomesticStandingOrdersDomesticStandingOrderId(
    req: operations.GetDomesticStandingOrdersDomesticStandingOrderIdRequest,
    security: operations.GetDomesticStandingOrdersDomesticStandingOrderIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDomesticStandingOrdersDomesticStandingOrderIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetDomesticStandingOrdersDomesticStandingOrderIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/domestic-standing-orders/{DomesticStandingOrderId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetDomesticStandingOrdersDomesticStandingOrderIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDomesticStandingOrdersDomesticStandingOrderIdResponse =
        new operations.GetDomesticStandingOrdersDomesticStandingOrderIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteDomesticStandingOrderResponse6 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteDomesticStandingOrderResponse6
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteDomesticStandingOrderResponse6 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteDomesticStandingOrderResponse6
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }
}
