"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetClientProfileByEmailRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    email: str = dataclasses.field(metadata={'query_param': { 'field_name': 'email', 'style': 'form', 'explode': True }})
    r"""Client's email address to be searched."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetClientProfileByEmail200ApplicationJSONAvailableAddresses:
    
    address_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressId'), 'exclude': lambda f: f is None }})
    r"""Address ID."""  
    address_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressType'), 'exclude': lambda f: f is None }})
    r"""Address type."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of the address."""  
    complement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complement'), 'exclude': lambda f: f is None }})
    r"""Complement to the address."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Country of the address. ISO three-letter code."""  
    geo_coordinates: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoCoordinates'), 'exclude': lambda f: f is None }})
    r"""Array containing two floats with geocoordinates, first longitude, then latitude."""  
    is_disposable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDisposable'), 'exclude': lambda f: f is None }})
    r"""Indicates whether address is disposable."""  
    neighborhood: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('neighborhood'), 'exclude': lambda f: f is None }})
    r"""Neighborhood of the address."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Number of the address."""  
    receiver_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverName'), 'exclude': lambda f: f is None }})
    r"""Name of the receiver."""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Reference that may help in the location of the address."""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the address."""  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street'), 'exclude': lambda f: f is None }})
    r"""Street of the address."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetClientProfileByEmail200ApplicationJSONUserProfile:
    r"""Customer profile information."""
    
    corporate_document: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corporateDocument'), 'exclude': lambda f: f is None }})
    r"""Document. Used for corporate clients."""  
    corporate_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corporateName'), 'exclude': lambda f: f is None }})
    r"""Name of the company. Used for corporate clients."""  
    corporate_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corporatePhone'), 'exclude': lambda f: f is None }})
    r"""Telephone number. Used for corporate clients."""  
    customer_class: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerClass'), 'exclude': lambda f: f is None }})
    r"""Customer class."""  
    document: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('document'), 'exclude': lambda f: f is None }})
    r"""Document."""  
    document_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentType'), 'exclude': lambda f: f is None }})
    r"""Document type."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address."""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName'), 'exclude': lambda f: f is None }})
    r"""First name."""  
    is_corporate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCorporate'), 'exclude': lambda f: f is None }})
    r"""Indicates whether client is corporate."""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName'), 'exclude': lambda f: f is None }})
    r"""Last name."""  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})
    r"""Telephone number."""  
    profile_complete_on_loading: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileCompleteOnLoading'), 'exclude': lambda f: f is None }})
    r"""Profile complete when loading."""  
    profile_error_on_loading: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileErrorOnLoading'), 'exclude': lambda f: f is None }})
    r"""Profile error when loading."""  
    state_inscription: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateInscription'), 'exclude': lambda f: f is None }})
    r"""State inscription. Used for corporate clients."""  
    trade_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tradeName'), 'exclude': lambda f: f is None }})
    r"""Trade name. Used for corporate clients."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetClientProfileByEmail200ApplicationJSON:
    r"""OK"""
    
    available_accounts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableAccounts'), 'exclude': lambda f: f is None }})
    r"""Available accounts."""  
    available_addresses: Optional[list[GetClientProfileByEmail200ApplicationJSONAvailableAddresses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableAddresses'), 'exclude': lambda f: f is None }})
    r"""Information on each available address."""  
    is_complete: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isComplete'), 'exclude': lambda f: f is None }})
    r"""Indicates whether customer profile is complete."""  
    profile_provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileProvider'), 'exclude': lambda f: f is None }})
    r"""Profile provider."""  
    user_profile: Optional[GetClientProfileByEmail200ApplicationJSONUserProfile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userProfile'), 'exclude': lambda f: f is None }})
    r"""Customer profile information."""  
    user_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userProfileId'), 'exclude': lambda f: f is None }})
    r"""Unique ID associated with the customer profile."""  
    

@dataclasses.dataclass
class GetClientProfileByEmailResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_client_profile_by_email_200_application_json_object: Optional[GetClientProfileByEmail200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    