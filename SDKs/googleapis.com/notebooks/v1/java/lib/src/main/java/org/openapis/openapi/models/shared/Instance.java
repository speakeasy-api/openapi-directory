/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Instance - The definition of a notebook instance.
 */
public class Instance {
    /**
     * Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceleratorConfig")
    public AcceleratorConfig acceleratorConfig;
    public Instance withAcceleratorConfig(AcceleratorConfig acceleratorConfig) {
        this.acceleratorConfig = acceleratorConfig;
        return this;
    }
    
    /**
     * Input only. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB. If not specified, this defaults to 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bootDiskSizeGb")
    public String bootDiskSizeGb;
    public Instance withBootDiskSizeGb(String bootDiskSizeGb) {
        this.bootDiskSizeGb = bootDiskSizeGb;
        return this;
    }
    
    /**
     * Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bootDiskType")
    public InstanceBootDiskTypeEnum bootDiskType;
    public Instance withBootDiskType(InstanceBootDiskTypeEnum bootDiskType) {
        this.bootDiskType = bootDiskType;
        return this;
    }
    
    /**
     * Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canIpForward")
    public Boolean canIpForward;
    public Instance withCanIpForward(Boolean canIpForward) {
        this.canIpForward = canIpForward;
        return this;
    }
    
    /**
     * Definition of a container image for starting a notebook instance with the environment installed in a container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerImage")
    public ContainerImage containerImage;
    public Instance withContainerImage(ContainerImage containerImage) {
        this.containerImage = containerImage;
        return this;
    }
    
    /**
     * Output only. Instance creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Instance withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. Email address of entity that sent original CreateInstance request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator")
    public String creator;
    public Instance withCreator(String creator) {
        this.creator = creator;
        return this;
    }
    
    /**
     * Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customGpuDriverPath")
    public String customGpuDriverPath;
    public Instance withCustomGpuDriverPath(String customGpuDriverPath) {
        this.customGpuDriverPath = customGpuDriverPath;
        return this;
    }
    
    /**
     * Input only. The size of the data disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). You can choose the size of the data disk based on how big your notebooks and data are. If not specified, this defaults to 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataDiskSizeGb")
    public String dataDiskSizeGb;
    public Instance withDataDiskSizeGb(String dataDiskSizeGb) {
        this.dataDiskSizeGb = dataDiskSizeGb;
        return this;
    }
    
    /**
     * Input only. The type of the data disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataDiskType")
    public InstanceDataDiskTypeEnum dataDiskType;
    public Instance withDataDiskType(InstanceDataDiskTypeEnum dataDiskType) {
        this.dataDiskType = dataDiskType;
        return this;
    }
    
    /**
     * Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskEncryption")
    public InstanceDiskEncryptionEnum diskEncryption;
    public Instance withDiskEncryption(InstanceDiskEncryptionEnum diskEncryption) {
        this.diskEncryption = diskEncryption;
        return this;
    }
    
    /**
     * Output only. Attached disks to notebook instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disks")
    public Disk[] disks;
    public Instance withDisks(Disk[] disks) {
        this.disks = disks;
        return this;
    }
    
    /**
     * Whether the end user authorizes Google Cloud to install GPU driver on this instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installGpuDriver")
    public Boolean installGpuDriver;
    public Instance withInstallGpuDriver(Boolean installGpuDriver) {
        this.installGpuDriver = installGpuDriver;
        return this;
    }
    
    /**
     * Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceOwners")
    public String[] instanceOwners;
    public Instance withInstanceOwners(String[] instanceOwners) {
        this.instanceOwners = instanceOwners;
        return this;
    }
    
    /**
     * Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about [using your own encryption keys](/kms/docs/quickstart).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kmsKey")
    public String kmsKey;
    public Instance withKmsKey(String kmsKey) {
        this.kmsKey = kmsKey;
        return this;
    }
    
    /**
     * Labels to apply to this instance. These can be later modified by the setLabels method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Instance withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Required. The [Compute Engine machine type](https://cloud.google.com/compute/docs/machine-types) of this instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineType")
    public String machineType;
    public Instance withMachineType(String machineType) {
        this.machineType = machineType;
        return this;
    }
    
    /**
     * Custom metadata to apply to this instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;
    public Instance withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Output only. The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Instance withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The name of the VPC that this instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;
    public Instance withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nicType")
    public InstanceNicTypeEnum nicType;
    public Instance withNicType(InstanceNicTypeEnum nicType) {
        this.nicType = nicType;
        return this;
    }
    
    /**
     * If true, the notebook instance will not register with the proxy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("noProxyAccess")
    public Boolean noProxyAccess;
    public Instance withNoProxyAccess(Boolean noProxyAccess) {
        this.noProxyAccess = noProxyAccess;
        return this;
    }
    
    /**
     * If true, no public IP will be assigned to this instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("noPublicIp")
    public Boolean noPublicIp;
    public Instance withNoPublicIp(Boolean noPublicIp) {
        this.noPublicIp = noPublicIp;
        return this;
    }
    
    /**
     * Input only. If true, the data disk will not be auto deleted when deleting the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("noRemoveDataDisk")
    public Boolean noRemoveDataDisk;
    public Instance withNoRemoveDataDisk(Boolean noRemoveDataDisk) {
        this.noRemoveDataDisk = noRemoveDataDisk;
        return this;
    }
    
    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postStartupScript")
    public String postStartupScript;
    public Instance withPostStartupScript(String postStartupScript) {
        this.postStartupScript = postStartupScript;
        return this;
    }
    
    /**
     * Output only. The proxy endpoint that is used to access the Jupyter notebook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxyUri")
    public String proxyUri;
    public Instance withProxyUri(String proxyUri) {
        this.proxyUri = proxyUri;
        return this;
    }
    
    /**
     * Reservation Affinity for consuming Zonal reservation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservationAffinity")
    public ReservationAffinity reservationAffinity;
    public Instance withReservationAffinity(ReservationAffinity reservationAffinity) {
        this.reservationAffinity = reservationAffinity;
        return this;
    }
    
    /**
     * The service account on this instance, giving access to other Google Cloud services. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccount")
    public String serviceAccount;
    public Instance withServiceAccount(String serviceAccount) {
        this.serviceAccount = serviceAccount;
        return this;
    }
    
    /**
     * Optional. The URIs of service account scopes to be included in Compute Engine instances. If not specified, the following [scopes](https://cloud.google.com/compute/docs/access/service-accounts#accesscopesiam) are defined: - https://www.googleapis.com/auth/cloud-platform - https://www.googleapis.com/auth/userinfo.email If not using default scopes, you need at least: https://www.googleapis.com/auth/compute
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccountScopes")
    public String[] serviceAccountScopes;
    public Instance withServiceAccountScopes(String[] serviceAccountScopes) {
        this.serviceAccountScopes = serviceAccountScopes;
        return this;
    }
    
    /**
     * A set of Shielded Instance options. Check [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shieldedInstanceConfig")
    public ShieldedInstanceConfig shieldedInstanceConfig;
    public Instance withShieldedInstanceConfig(ShieldedInstanceConfig shieldedInstanceConfig) {
        this.shieldedInstanceConfig = shieldedInstanceConfig;
        return this;
    }
    
    /**
     * Output only. The state of this instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public InstanceStateEnum state;
    public Instance withState(InstanceStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The name of the subnet that this instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnet")
    public String subnet;
    public Instance withSubnet(String subnet) {
        this.subnet = subnet;
        return this;
    }
    
    /**
     * Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String[] tags;
    public Instance withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * Output only. Instance update time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Instance withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * The upgrade history of this instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upgradeHistory")
    public UpgradeHistoryEntry[] upgradeHistory;
    public Instance withUpgradeHistory(UpgradeHistoryEntry[] upgradeHistory) {
        this.upgradeHistory = upgradeHistory;
        return this;
    }
    
    /**
     * Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmImage")
    public VmImage vmImage;
    public Instance withVmImage(VmImage vmImage) {
        this.vmImage = vmImage;
        return this;
    }
    
}
