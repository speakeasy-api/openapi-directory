<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Users 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdResponse
     */
	public function getUsersUserId(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->completeUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompleteUser', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of user's comments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCommentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCommentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCommentsResponse
     */
	public function getUsersUserIdComments(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCommentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCommentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCommentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/comments', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCommentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCommentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdCommentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commentsList = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Comment>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of user's favorited or liked tracks. (use /users/:userId/likes/tracks instead, to fetch a user's likes)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFavoritesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFavoritesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFavoritesResponse
     */
	public function getUsersUserIdFavorites(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFavoritesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFavoritesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFavoritesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/favorites', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFavoritesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFavoritesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFavoritesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersUserIdFavorites200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of userâ€™s followers.
     * 
     * Returns a list of users that follows (user_id).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowersResponse
     */
	public function getUsersUserIdFollowers(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/followers', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersUserIdFollowers200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of userâ€™s followings.
     * 
     * Returns list of users that (user_id) follows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsResponse
     */
	public function getUsersUserIdFollowings(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/followings', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersUserIdFollowings200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a user's following. (use /users/{user_id} instead, to fetch the user details)
     * 
     * Returns (following_id) that is followed by (user_id).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsFollowingIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsFollowingIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsFollowingIdResponse
     */
	public function getUsersUserIdFollowingsFollowingId(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsFollowingIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsFollowingIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsFollowingIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/followings/{following_id}', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsFollowingIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdFollowingsFollowingIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->completeUser = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompleteUser', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of user's liked tracks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdLikesTracksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdLikesTracksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdLikesTracksResponse
     */
	public function getUsersUserIdLikesTracks(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdLikesTracksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdLikesTracksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdLikesTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/likes/tracks', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdLikesTracksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdLikesTracksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdLikesTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersUserIdLikesTracks200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of user's playlists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPlaylistsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPlaylistsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPlaylistsResponse
     */
	public function getUsersUserIdPlaylists(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPlaylistsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPlaylistsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPlaylistsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/playlists', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPlaylistsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPlaylistsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdPlaylistsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersUserIdPlaylists200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of user's tracks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdTracksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdTracksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdTracksResponse
     */
	public function getUsersUserIdTracks(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdTracksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdTracksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/tracks', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdTracksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdTracksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUsersUserIdTracks200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of user's links added to their profile (website, facebook, instagram).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdWebProfilesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdWebProfilesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdWebProfilesResponse
     */
	public function getUsersUserIdWebProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdWebProfilesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdWebProfilesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdWebProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/web-profiles', \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdWebProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdWebProfilesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUsersUserIdWebProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webProfiles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\WebProfiles>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}