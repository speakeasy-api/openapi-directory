<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CreateTokenRequestBody
{
    /**
     * The unique identifier string for each client. This value should come from the persisted result of the <a>RegisterClient</a> API.
     * 
     * @var string $clientId
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientId;
    
    /**
     * A secret string generated for the client. This value should come from the persisted result of the <a>RegisterClient</a> API.
     * 
     * @var string $clientSecret
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientSecret')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientSecret;
    
    /**
     * The authorization code received from the authorization service. This parameter is required to perform an authorization grant request to get access to a token.
     * 
     * @var ?string $code
     */
	#[\JMS\Serializer\Annotation\SerializedName('code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $code = null;
    
    /**
     * Used only when calling this API for the device code grant type. This short-term code is used to identify this authentication attempt. This should come from an in-memory reference to the result of the <a>StartDeviceAuthorization</a> API.
     * 
     * @var ?string $deviceCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('deviceCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $deviceCode = null;
    
    /**
     * <p>Supports grant types for the authorization code, refresh token, and device code request. For device code requests, specify the following value:</p> <p> <code>urn:ietf:params:oauth:grant-type:<i>device_code</i> </code> </p> <p>For information about how to obtain the device code, see the <a>StartDeviceAuthorization</a> topic.</p>
     * 
     * @var string $grantType
     */
	#[\JMS\Serializer\Annotation\SerializedName('grantType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $grantType;
    
    /**
     * The location of the application that will receive the authorization code. Users authorize the service to send the request to this location.
     * 
     * @var ?string $redirectUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('redirectUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $redirectUri = null;
    
    /**
     * <p>Currently, <code>refreshToken</code> is not yet implemented and is not supported. For more information about the features and limitations of the current IAM Identity Center OIDC implementation, see <i>Considerations for Using this Guide</i> in the <a href="https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/Welcome.html">IAM Identity Center OIDC API Reference</a>.</p> <p>The token used to obtain an access token in the event that the access token is invalid or expired.</p>
     * 
     * @var ?string $refreshToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('refreshToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $refreshToken = null;
    
    /**
     * The list of scopes that is defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token.
     * 
     * @var ?array<string> $scope
     */
	#[\JMS\Serializer\Annotation\SerializedName('scope')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $scope = null;
    
	public function __construct()
	{
		$this->clientId = "";
		$this->clientSecret = "";
		$this->code = null;
		$this->deviceCode = null;
		$this->grantType = "";
		$this->redirectUri = null;
		$this->refreshToken = null;
		$this->scope = null;
	}
}
