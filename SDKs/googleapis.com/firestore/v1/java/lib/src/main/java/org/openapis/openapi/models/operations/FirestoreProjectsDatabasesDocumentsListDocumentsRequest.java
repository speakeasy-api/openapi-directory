/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class FirestoreProjectsDatabasesDocumentsListDocumentsRequest {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`. This is optional, and when not provided, Firestore will list documents from all collections under the provided `parent`.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=collectionId")
    public String collectionId;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withCollectionId(String collectionId) {
        this.collectionId = collectionId;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * The list of field paths in the mask. See Document.fields for a field path syntax reference.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=mask.fieldPaths")
    public String[] maskFieldPaths;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withMaskFieldPaths(String[] maskFieldPaths) {
        this.maskFieldPaths = maskFieldPaths;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Optional. The optional ordering of the documents to return. For example: `priority desc, __name__ desc`. This mirrors the `ORDER BY` used in Firestore queries but in a string representation. When absent, documents are ordered based on `__name__ ASC`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=orderBy")
    public String orderBy;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withOrderBy(String orderBy) {
        this.orderBy = orderBy;
        return this;
    }
    
    /**
     * Optional. The maximum number of documents to return in a single response. Firestore may return fewer than this value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    public Long pageSize;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withPageSize(Long pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * Optional. A page token, received from a previous `ListDocuments` response. Provide this to retrieve the subsequent page. When paginating, all other parameters (with the exception of `page_size`) must match the values set in the request that generated the page token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageToken")
    public String pageToken;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=parent")
    public String parent;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withParent(String parent) {
        this.parent = parent;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Perform the read at the provided time. This may not be older than 270 seconds.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=readTime")
    public String readTime;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withReadTime(String readTime) {
        this.readTime = readTime;
        return this;
    }
    
    /**
     * If the list should show missing documents. A document is missing if it does not exist, but there are sub-documents nested underneath it. When true, such missing documents will be returned with a key but will not have fields, `create_time`, or `update_time` set. Requests with `show_missing` may not specify `where` or `order_by`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=showMissing")
    public Boolean showMissing;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withShowMissing(Boolean showMissing) {
        this.showMissing = showMissing;
        return this;
    }
    
    /**
     * Perform the read as part of an already active transaction.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=transaction")
    public String transaction;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withTransaction(String transaction) {
        this.transaction = transaction;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;
    public FirestoreProjectsDatabasesDocumentsListDocumentsRequest withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
}
