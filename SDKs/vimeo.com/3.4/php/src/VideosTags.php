<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VideosTags 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a specific tag to a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoTagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoTagResponse
     */
	public function addVideoTag(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoTagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/tags/{word}', \OpenAPI\OpenAPI\Models\Operations\AddVideoTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.tag+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.tag+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a list of tags to a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoTagsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoTagsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoTagsResponse
     */
	public function addVideoTags(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoTagsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoTagsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/tags', \OpenAPI\OpenAPI\Models\Operations\AddVideoTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.tag+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tags = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Tag>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.tag+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if a tag has been added to a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckVideoForTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckVideoForTagResponse
     */
	public function checkVideoForTag(
        \OpenAPI\OpenAPI\Models\Operations\CheckVideoForTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckVideoForTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/tags/{word}', \OpenAPI\OpenAPI\Models\Operations\CheckVideoForTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckVideoForTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.tag+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.tag+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a tag from a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoTagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVideoTagResponse
     */
	public function deleteVideoTag(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoTagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVideoTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/tags/{word}', \OpenAPI\OpenAPI\Models\Operations\DeleteVideoTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVideoTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.tag+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the tags of a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideoTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideoTagsResponse
     */
	public function getVideoTags(
        \OpenAPI\OpenAPI\Models\Operations\GetVideoTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideoTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/tags', \OpenAPI\OpenAPI\Models\Operations\GetVideoTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideoTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.tag+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tags = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Tag>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos with a specific tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideosWithTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideosWithTagResponse
     */
	public function getVideosWithTag(
        \OpenAPI\OpenAPI\Models\Operations\GetVideosWithTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideosWithTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tags/{word}/videos', \OpenAPI\OpenAPI\Models\Operations\GetVideosWithTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVideosWithTagRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideosWithTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}