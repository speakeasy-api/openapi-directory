/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class EcommerceCustomer {
    /**
     * An array of addresses for the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    public EcommerceCustomerAddresses[] addresses;
    public EcommerceCustomer withAddresses(EcommerceCustomerAddresses[] addresses) {
        this.addresses = addresses;
        return this;
    }
    
    /**
     * Company name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    public String companyName;
    public EcommerceCustomer withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public EcommerceCustomer withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public CurrencyEnum currency;
    public EcommerceCustomer withCurrency(CurrencyEnum currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * An array of email addresses for the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    public Email[] emails;
    public EcommerceCustomer withEmails(Email[] emails) {
        this.emails = emails;
        return this;
    }
    
    /**
     * First name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    public String firstName;
    public EcommerceCustomer withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    public String id;
    public EcommerceCustomer withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Last name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    public String lastName;
    public EcommerceCustomer withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * Full name of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public EcommerceCustomer withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orders")
    public LinkedEcommerceOrder[] orders;
    public EcommerceCustomer withOrders(LinkedEcommerceOrder[] orders) {
        this.orders = orders;
        return this;
    }
    
    /**
     * An array of phone numbers for the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    public PhoneNumber[] phoneNumbers;
    public EcommerceCustomer withPhoneNumbers(PhoneNumber[] phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }
    
    /**
     * The current status of the customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public EcommerceCustomerCustomerStatusEnum status;
    public EcommerceCustomer withStatus(EcommerceCustomerCustomerStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public EcommerceCustomer withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
