<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TargetVpnGateways 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of target VPN gateways.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysAggregatedListResponse
     */
	public function computeTargetVpnGatewaysAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/targetVpnGateways', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetVpnGatewayAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetVpnGatewayAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified target VPN gateway.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysDeleteResponse
     */
	public function computeTargetVpnGatewaysDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified target VPN gateway.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysGetResponse
     */
	public function computeTargetVpnGatewaysGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetVpnGateway = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetVpnGateway', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a target VPN gateway in the specified project and region using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysInsertResponse
     */
	public function computeTargetVpnGatewaysInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetVpnGateways', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetVpnGateway", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of target VPN gateways available to the specified project and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysListResponse
     */
	public function computeTargetVpnGatewaysList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetVpnGateways', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetVpnGatewayList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetVpnGatewayList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on a TargetVpnGateway. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysSetLabelsResponse
     */
	public function computeTargetVpnGatewaysSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetVpnGatewaysSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}