<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Describe 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Describe an object
     * 
     * Provides a reference listing of each object that is available in your Zuora tenant.
     * 
     * The information returned by this call is useful if you are using [CRUD: Create Export](https://www.zuora.com/developer/api-reference/#operation/Object_POSTExport) or the [AQuA API](https://knowledgecenter.zuora.com/DC_Developers/T_Aggregate_Query_API) to create a data source export. See [Export ZOQL](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL) for more information.
     * 
     * ## Response
     * The response contains an XML document that lists the fields of the specified object. Each of the object's fields is represented by a `<field>` element in the XML document.
     *     
     * Each `<field>` element contains the following elements:
     * 
     * | Element      | Description                                                                                                                                                                                                                                                                                  |
     * |--------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | `<name>`     | API name of the field.                                                                                                                                                                                                                                                                       |
     * | `<label>`    | Name of the field in the Zuora user interface.                                                                                                                                                                                                                                               |
     * | `<type>`     | Data type of the field. The possible data types are: `boolean`, `date`, `datetime`, `decimal`, `integer`, `picklist`, `text`, `timestamp`, and `ZOQL`. If the data type is `picklist`, the `<field>` element contains an `<options>` element that lists the possible values of the field.    |
     * | `<contexts>` | Specifies the availability of the field. If the `<contexts>` element lists the `export` context, the field is available for use in data source exports.                                                                                                                                                |
     * 
     * The `<field>` element contains other elements that provide legacy information about the field. This information is not directly related to the REST API.
     * 
     * Response sample:
     * ```xml
     * <?xml version="1.0" encoding="UTF-8"?>
     * <object>
     *   <name>ProductRatePlanCharge</name>
     *   <label>Product Rate Plan Charge</label>
     *   <fields>
     *     ...
     *     <field>
     *       <name>TaxMode</name>
     *       <label>Tax Mode</label>
     *       <type>picklist</type>
     *       <options>
     *         <option>TaxExclusive</option>
     *         <option>TaxInclusive</option>
     *       </options>
     *       <contexts>
     *         <context>export</context>
     *       </contexts>
     *       ...
     *     </field>
     *     ...
     *   </fields>
     * </object>
     * ```
     * 
     * It is strongly recommended that your integration checks `<contexts>` elements in the response. If your integration does not check `<contexts>` elements, your integration may process fields that are not available for use in data source exports. See [Changes to the Describe API](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL/Changes_to_the_Describe_API) for more information.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETDescribeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETDescribeResponse
     */
	public function getDescribe(
        \OpenAPI\OpenAPI\Models\Operations\GETDescribeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETDescribeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/describe/{object}', \OpenAPI\OpenAPI\Models\Operations\GETDescribeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETDescribeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'text/xml; charset=utf-8')) {
                $response->getDescribe200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'text/xml; charset=utf-8')) {
                $response->getDescribe404TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}