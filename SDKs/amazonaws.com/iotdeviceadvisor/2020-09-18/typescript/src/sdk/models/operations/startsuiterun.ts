/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Gets suite run configuration.
 */
export class StartSuiteRunRequestBodySuiteRunConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "parallelRun" })
  parallelRun?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "primaryDevice" })
  @Type(() => shared.DeviceUnderTest)
  primaryDevice?: shared.DeviceUnderTest;

  @SpeakeasyMetadata()
  @Expose({ name: "selectedTestList" })
  selectedTestList?: string[];
}

export class StartSuiteRunRequestBody extends SpeakeasyBase {
  /**
   * Suite definition version of the test suite.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suiteDefinitionVersion" })
  suiteDefinitionVersion?: string;

  /**
   * Gets suite run configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suiteRunConfiguration" })
  @Type(() => StartSuiteRunRequestBodySuiteRunConfiguration)
  suiteRunConfiguration: StartSuiteRunRequestBodySuiteRunConfiguration;

  /**
   * The tags to be attached to the suite run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class StartSuiteRunRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartSuiteRunRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Suite definition ID of the test suite.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=suiteDefinitionId",
  })
  suiteDefinitionId: string;
}

export class StartSuiteRunResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startSuiteRunResponse?: shared.StartSuiteRunResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
