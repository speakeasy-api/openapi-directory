// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetSpacesSpaceIDFoldersRootFoldersEnum - only root folders
type GetSpacesSpaceIDFoldersRootFoldersEnum string

const (
	GetSpacesSpaceIDFoldersRootFoldersEnumAll GetSpacesSpaceIDFoldersRootFoldersEnum = "all"
)

func (e GetSpacesSpaceIDFoldersRootFoldersEnum) ToPointer() *GetSpacesSpaceIDFoldersRootFoldersEnum {
	return &e
}

func (e *GetSpacesSpaceIDFoldersRootFoldersEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		*e = GetSpacesSpaceIDFoldersRootFoldersEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDFoldersRootFoldersEnum: %v", v)
	}
}

type GetSpacesSpaceIDFoldersRequest struct {
	// class of the folder
	Class *string `queryParam:"style=form,explode=true,name=Class"`
	// keywords attached to the folder
	Keywords *string `queryParam:"style=form,explode=true,name=Keywords"`
	// Name of the folder
	Name *string `queryParam:"style=form,explode=true,name=Name"`
	// index range of the results
	Range *string `queryParam:"style=form,explode=true,name=Range"`
	// only root folders
	RootFolders *GetSpacesSpaceIDFoldersRootFoldersEnum `queryParam:"style=form,explode=true,name=RootFolders"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type GetSpacesSpaceIDFoldersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A list of folders
	GetSpacesSpaceIDFolders200ApplicationJSONAllOfs []shared.Folder
}
