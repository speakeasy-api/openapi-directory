"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PasswordErrorCodeEnum(str, Enum):
    r"""Short identifier for the error, suitable for indicating the specific error within client code"""
    PW_BLACK_LIST = 'PW_BLACK_LIST'
    PW_TOO_SHORT = 'PW_TOO_SHORT'
    PW_TOO_LONG = 'PW_TOO_LONG'
    PW_MISSING_UC = 'PW_MISSING_UC'
    PW_MISSING_NUM = 'PW_MISSING_NUM'
    PW_RECENTLY_USED = 'PW_RECENTLY_USED'
    PW_NOT_UNIQUE = 'PW_NOT_UNIQUE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PasswordError:
    r"""Request was not successful"""
    
    code: Optional[PasswordErrorCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Short identifier for the error, suitable for indicating the specific error within client code"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""Human-readable, English description of the error"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Response type, always 'error'"""  
    