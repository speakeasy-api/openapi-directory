"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://events.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_sink(self, request: operations.CreateSinkCreateSinkRequest, security: operations.CreateSinkSecurity, server_url: Optional[str] = None) -> operations.CreateSinkResponse:
        r"""Create a new Sink"""
        base_url = operations.CREATE_SINK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Sinks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1Sink])
                res.events_v1_sink = out

        return res

    def create_sink_test(self, request: operations.CreateSinkTestRequest, security: operations.CreateSinkTestSecurity, server_url: Optional[str] = None) -> operations.CreateSinkTestResponse:
        r"""Create a new Sink Test Event for the given Sink."""
        base_url = operations.CREATE_SINK_TEST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateSinkTestRequest, base_url, '/v1/Sinks/{Sid}/Test', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSinkTestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1SinkSinkTest])
                res.events_v1_sink_sink_test = out

        return res

    def create_sink_validate(self, request: operations.CreateSinkValidateRequest, security: operations.CreateSinkValidateSecurity, server_url: Optional[str] = None) -> operations.CreateSinkValidateResponse:
        r"""Validate that a test event for a Sink was received."""
        base_url = operations.CREATE_SINK_VALIDATE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateSinkValidateRequest, base_url, '/v1/Sinks/{Sid}/Validate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSinkValidateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1SinkSinkValidate])
                res.events_v1_sink_sink_validate = out

        return res

    def create_subscribed_event(self, request: operations.CreateSubscribedEventRequest, security: operations.CreateSubscribedEventSecurity, server_url: Optional[str] = None) -> operations.CreateSubscribedEventResponse:
        r"""Create a new Subscribed Event type for the subscription"""
        base_url = operations.CREATE_SUBSCRIBED_EVENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateSubscribedEventRequest, base_url, '/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSubscribedEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1SubscriptionSubscribedEvent])
                res.events_v1_subscription_subscribed_event = out

        return res

    def create_subscription(self, request: operations.CreateSubscriptionCreateSubscriptionRequest, security: operations.CreateSubscriptionSecurity, server_url: Optional[str] = None) -> operations.CreateSubscriptionResponse:
        r"""Create a new Subscription."""
        base_url = operations.CREATE_SUBSCRIPTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Subscriptions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1Subscription])
                res.events_v1_subscription = out

        return res

    def delete_sink(self, request: operations.DeleteSinkRequest, security: operations.DeleteSinkSecurity, server_url: Optional[str] = None) -> operations.DeleteSinkResponse:
        r"""Delete a specific Sink."""
        base_url = operations.DELETE_SINK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSinkRequest, base_url, '/v1/Sinks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_subscribed_event(self, request: operations.DeleteSubscribedEventRequest, security: operations.DeleteSubscribedEventSecurity, server_url: Optional[str] = None) -> operations.DeleteSubscribedEventResponse:
        r"""Remove an event type from a subscription."""
        base_url = operations.DELETE_SUBSCRIBED_EVENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSubscribedEventRequest, base_url, '/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSubscribedEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_subscription(self, request: operations.DeleteSubscriptionRequest, security: operations.DeleteSubscriptionSecurity, server_url: Optional[str] = None) -> operations.DeleteSubscriptionResponse:
        r"""Delete a specific Subscription."""
        base_url = operations.DELETE_SUBSCRIPTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSubscriptionRequest, base_url, '/v1/Subscriptions/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_event_type(self, request: operations.FetchEventTypeRequest, security: operations.FetchEventTypeSecurity, server_url: Optional[str] = None) -> operations.FetchEventTypeResponse:
        r"""Fetch a specific Event Type."""
        base_url = operations.FETCH_EVENT_TYPE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchEventTypeRequest, base_url, '/v1/Types/{Type}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchEventTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1EventType])
                res.events_v1_event_type = out

        return res

    def fetch_schema(self, request: operations.FetchSchemaRequest, security: operations.FetchSchemaSecurity, server_url: Optional[str] = None) -> operations.FetchSchemaResponse:
        r"""Fetch a specific schema with its nested versions."""
        base_url = operations.FETCH_SCHEMA_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSchemaRequest, base_url, '/v1/Schemas/{Id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSchemaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1Schema])
                res.events_v1_schema = out

        return res

    def fetch_schema_version(self, request: operations.FetchSchemaVersionRequest, security: operations.FetchSchemaVersionSecurity, server_url: Optional[str] = None) -> operations.FetchSchemaVersionResponse:
        r"""Fetch a specific schema and version."""
        base_url = operations.FETCH_SCHEMA_VERSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSchemaVersionRequest, base_url, '/v1/Schemas/{Id}/Versions/{SchemaVersion}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSchemaVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1SchemaSchemaVersion])
                res.events_v1_schema_schema_version = out

        return res

    def fetch_sink(self, request: operations.FetchSinkRequest, security: operations.FetchSinkSecurity, server_url: Optional[str] = None) -> operations.FetchSinkResponse:
        r"""Fetch a specific Sink."""
        base_url = operations.FETCH_SINK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSinkRequest, base_url, '/v1/Sinks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1Sink])
                res.events_v1_sink = out

        return res

    def fetch_subscribed_event(self, request: operations.FetchSubscribedEventRequest, security: operations.FetchSubscribedEventSecurity, server_url: Optional[str] = None) -> operations.FetchSubscribedEventResponse:
        r"""Read an Event for a Subscription."""
        base_url = operations.FETCH_SUBSCRIBED_EVENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSubscribedEventRequest, base_url, '/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSubscribedEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1SubscriptionSubscribedEvent])
                res.events_v1_subscription_subscribed_event = out

        return res

    def fetch_subscription(self, request: operations.FetchSubscriptionRequest, security: operations.FetchSubscriptionSecurity, server_url: Optional[str] = None) -> operations.FetchSubscriptionResponse:
        r"""Fetch a specific Subscription."""
        base_url = operations.FETCH_SUBSCRIPTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSubscriptionRequest, base_url, '/v1/Subscriptions/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1Subscription])
                res.events_v1_subscription = out

        return res

    def list_event_type(self, request: operations.ListEventTypeRequest, security: operations.ListEventTypeSecurity, server_url: Optional[str] = None) -> operations.ListEventTypeResponse:
        r"""Retrieve a paginated list of all the available Event Types."""
        base_url = operations.LIST_EVENT_TYPE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Types'
        
        query_params = utils.get_query_params(operations.ListEventTypeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListEventTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListEventTypeListEventTypeResponse])
                res.list_event_type_response = out

        return res

    def list_schema_version(self, request: operations.ListSchemaVersionRequest, security: operations.ListSchemaVersionSecurity, server_url: Optional[str] = None) -> operations.ListSchemaVersionResponse:
        r"""Retrieve a paginated list of versions of the schema."""
        base_url = operations.LIST_SCHEMA_VERSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSchemaVersionRequest, base_url, '/v1/Schemas/{Id}/Versions', request)
        
        query_params = utils.get_query_params(operations.ListSchemaVersionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSchemaVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSchemaVersionListSchemaVersionResponse])
                res.list_schema_version_response = out

        return res

    def list_sink(self, request: operations.ListSinkRequest, security: operations.ListSinkSecurity, server_url: Optional[str] = None) -> operations.ListSinkResponse:
        r"""Retrieve a paginated list of Sinks belonging to the account used to make the request."""
        base_url = operations.LIST_SINK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Sinks'
        
        query_params = utils.get_query_params(operations.ListSinkRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSinkListSinkResponse])
                res.list_sink_response = out

        return res

    def list_subscribed_event(self, request: operations.ListSubscribedEventRequest, security: operations.ListSubscribedEventSecurity, server_url: Optional[str] = None) -> operations.ListSubscribedEventResponse:
        r"""Retrieve a list of all Subscribed Event types for a Subscription."""
        base_url = operations.LIST_SUBSCRIBED_EVENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSubscribedEventRequest, base_url, '/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents', request)
        
        query_params = utils.get_query_params(operations.ListSubscribedEventRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSubscribedEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSubscribedEventListSubscribedEventResponse])
                res.list_subscribed_event_response = out

        return res

    def list_subscription(self, request: operations.ListSubscriptionRequest, security: operations.ListSubscriptionSecurity, server_url: Optional[str] = None) -> operations.ListSubscriptionResponse:
        r"""Retrieve a paginated list of Subscriptions belonging to the account used to make the request."""
        base_url = operations.LIST_SUBSCRIPTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Subscriptions'
        
        query_params = utils.get_query_params(operations.ListSubscriptionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSubscriptionListSubscriptionResponse])
                res.list_subscription_response = out

        return res

    def update_sink(self, request: operations.UpdateSinkRequest, security: operations.UpdateSinkSecurity, server_url: Optional[str] = None) -> operations.UpdateSinkResponse:
        r"""Update a specific Sink"""
        base_url = operations.UPDATE_SINK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSinkRequest, base_url, '/v1/Sinks/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSinkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1Sink])
                res.events_v1_sink = out

        return res

    def update_subscribed_event(self, request: operations.UpdateSubscribedEventRequest, security: operations.UpdateSubscribedEventSecurity, server_url: Optional[str] = None) -> operations.UpdateSubscribedEventResponse:
        r"""Update an Event for a Subscription."""
        base_url = operations.UPDATE_SUBSCRIBED_EVENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSubscribedEventRequest, base_url, '/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSubscribedEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1SubscriptionSubscribedEvent])
                res.events_v1_subscription_subscribed_event = out

        return res

    def update_subscription(self, request: operations.UpdateSubscriptionRequest, security: operations.UpdateSubscriptionSecurity, server_url: Optional[str] = None) -> operations.UpdateSubscriptionResponse:
        r"""Update a Subscription."""
        base_url = operations.UPDATE_SUBSCRIPTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSubscriptionRequest, base_url, '/v1/Subscriptions/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventsV1Subscription])
                res.events_v1_subscription = out

        return res

    