<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PersonalNameParsedOut - A origined name.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PersonalNameParsedOut
{
    /**
     * First / last name structure corresponding to the most likely parsing.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\FirstLastNameOut $firstLastName
     */
	#[\JMS\Serializer\Annotation\SerializedName('firstLastName')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\FirstLastNameOut')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?FirstLastNameOut $firstLastName = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The input name
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PersonalNameParsedOutNameParserTypeEnum $nameParserType
     */
	#[\JMS\Serializer\Annotation\SerializedName('nameParserType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PersonalNameParsedOutNameParserTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PersonalNameParsedOutNameParserTypeEnum $nameParserType = null;
    
    /**
     * Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PersonalNameParsedOutNameParserTypeAltEnum $nameParserTypeAlt
     */
	#[\JMS\Serializer\Annotation\SerializedName('nameParserTypeAlt')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PersonalNameParsedOutNameParserTypeAltEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PersonalNameParsedOutNameParserTypeAltEnum $nameParserTypeAlt = null;
    
    /**
     * Higher score is better, but score is not normalized. Use calibratedProbability if available. 
     * 
     * @var ?float $score
     */
	#[\JMS\Serializer\Annotation\SerializedName('score')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $score = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('script')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $script = null;
    
	public function __construct()
	{
		$this->firstLastName = null;
		$this->id = null;
		$this->name = null;
		$this->nameParserType = null;
		$this->nameParserTypeAlt = null;
		$this->score = null;
		$this->script = null;
	}
}
