/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Submit, moderate and retrieve user contributions
 */
export class Contribution {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete this contribution
   */
  deleteContributionsId(
    req: operations.DeleteContributionsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteContributionsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteContributionsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/contributions/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteContributionsIdResponse =
        new operations.DeleteContributionsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contribution = utils.objectToClass(
              httpRes?.data,
              shared.Contribution
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List valid contribution refinement types
   */
  getContributionRefinementTypes(
    config?: AxiosRequestConfig
  ): Promise<operations.GetContributionRefinementTypesResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/contribution-refinement-types";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContributionRefinementTypesResponse =
        new operations.GetContributionRefinementTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getContributionRefinementTypes200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List contribution refinement options
   *
   * @remarks
   * Given a contribution list query determine the available filter options. Can be used to generate the UI to refinement a filter.
   */
  getContributionRefinements(
    req: operations.GetContributionRefinementsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContributionRefinementsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContributionRefinementsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/contribution-refinements";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContributionRefinementsResponse =
        new operations.GetContributionRefinementsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getContributionRefinements200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List contributions
   *
   * @remarks
   * Retrieve contributions.
   */
  getContributions(
    req: operations.GetContributionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContributionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContributionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/contributions";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContributionsResponse =
        new operations.GetContributionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contributions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.contributions = utils.objectToClass(
              httpRes?.data,
              shared.Contribution,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a single contribution by id
   */
  getContributionsId(
    req: operations.GetContributionsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContributionsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContributionsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/contributions/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContributionsIdResponse =
        new operations.GetContributionsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contribution = utils.objectToClass(
              httpRes?.data,
              shared.Contribution
            );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * List users who have liked this contributions
   *
   * @remarks
   * Returns a list of user ids of users who have liked this conribution
   */
  getContributionsIdLikes(
    req: operations.GetContributionsIdLikesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContributionsIdLikesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContributionsIdLikesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/contributions/{id}/likes",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContributionsIdLikesResponse =
        new operations.GetContributionsIdLikesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getContributionsIdLikes200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a single export job; poll to follow export progress.
   */
  getExportsId(
    req: operations.GetExportsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetExportsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetExportsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/exports/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetExportsIdResponse =
        new operations.GetExportsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.export = utils.objectToClass(httpRes?.data, shared.Export);
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Create a new contribution
   */
  postContributions(
    req: shared.Contribution,
    security: operations.PostContributionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostContributionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Contribution(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/contributions";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostContributionsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostContributionsResponse =
        new operations.PostContributionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.contribution = utils.objectToClass(
              httpRes?.data,
              shared.Contribution
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Raise a flag against this contribution
   *
   * @remarks
   * Allows end users to bring potential issues with publicly visible content to the attention of moderators.
   */
  postContributionsIdFlag(
    req: operations.PostContributionsIdFlagRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostContributionsIdFlagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostContributionsIdFlagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/contributions/{id}/flag",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "flag",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostContributionsIdFlagResponse =
        new operations.PostContributionsIdFlagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.flag = utils.objectToClass(httpRes?.data, shared.Flag);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Allows a user to mark a contribution as liked
   */
  postContributionsIdLike(
    req: operations.PostContributionsIdLikeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostContributionsIdLikeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostContributionsIdLikeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/contributions/{id}/like",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostContributionsIdLikeResponse =
        new operations.PostContributionsIdLikeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postContributionsIdLike200ApplicationJSONNumber = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Perform a moderation action on this contribution
   *
   * @remarks
   * Allows the contribution to approved of rejected.
   */
  postContributionsIdModerate(
    req: operations.PostContributionsIdModerateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostContributionsIdModerateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostContributionsIdModerateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/contributions/{id}/moderate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "moderationHistoryItemSubmission",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostContributionsIdModerateResponse =
        new operations.PostContributionsIdModerateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postContributionsIdModerate200ApplicationJSONString =
              JSON.stringify(httpRes?.data);
          }
          break;
        case [400, 401, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Export contributions.
   *
   * @remarks
   * Begin an export job. Returns a export job which can be polled to follow the progress of an export.
   */
  postExport(
    req: operations.PostExportRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostExportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostExportRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/export";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostExportResponse =
        new operations.PostExportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.export = utils.objectToClass(httpRes?.data, shared.Export);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Export contributions preflight summary.
   *
   * @remarks
   * Provide a preflight summary of an export request.
   */
  postExportSummary(
    req: operations.PostExportSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostExportSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostExportSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/export-summary";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostExportSummaryResponse =
        new operations.PostExportSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.exportSummary = utils.objectToClass(
              httpRes?.data,
              shared.ExportSummary
            );
          }
          break;
      }

      return res;
    });
  }
}
