/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class EmployerEmployer {
    /**
     * The employers' address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Address")
    public EmployerEmployerAddress address;

    public EmployerEmployer withAddress(EmployerEmployerAddress address) {
        this.address = address;
        return this;
    }
    
    /**
     * The employers' apprenticeship levy allowance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ApprenticeshipLevyAllowance")
    public Double apprenticeshipLevyAllowance;

    public EmployerEmployer withApprenticeshipLevyAllowance(Double apprenticeshipLevyAllowance) {
        this.apprenticeshipLevyAllowance = apprenticeshipLevyAllowance;
        return this;
    }
    
    /**
     * The employers' auto enrolment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AutoEnrolment")
    public EmployerEmployerAutoEnrolment autoEnrolment;

    public EmployerEmployer withAutoEnrolment(EmployerEmployerAutoEnrolment autoEnrolment) {
        this.autoEnrolment = autoEnrolment;
        return this;
    }
    
    /**
     * The employers' bacs service user number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BacsServiceUserNumber")
    public String bacsServiceUserNumber;

    public EmployerEmployer withBacsServiceUserNumber(String bacsServiceUserNumber) {
        this.bacsServiceUserNumber = bacsServiceUserNumber;
        return this;
    }
    
    /**
     * The employers' bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BankAccount")
    public EmployerEmployerBankAccount bankAccount;

    public EmployerEmployer withBankAccount(EmployerEmployerBankAccount bankAccount) {
        this.bankAccount = bankAccount;
        return this;
    }
    
    /**
     * The employers' calculate apprenticeship levy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CalculateApprenticeshipLevy")
    public Boolean calculateApprenticeshipLevy;

    public EmployerEmployer withCalculateApprenticeshipLevy(Boolean calculateApprenticeshipLevy) {
        this.calculateApprenticeshipLevy = calculateApprenticeshipLevy;
        return this;
    }
    
    /**
     * The employers' claim employment allowance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ClaimEmploymentAllowance")
    public Boolean claimEmploymentAllowance;

    public EmployerEmployer withClaimEmploymentAllowance(Boolean claimEmploymentAllowance) {
        this.claimEmploymentAllowance = claimEmploymentAllowance;
        return this;
    }
    
    /**
     * The employers' claim small employer relief
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ClaimSmallEmployerRelief")
    public Boolean claimSmallEmployerRelief;

    public EmployerEmployer withClaimSmallEmployerRelief(Boolean claimSmallEmployerRelief) {
        this.claimSmallEmployerRelief = claimSmallEmployerRelief;
        return this;
    }
    
    /**
     * The employers' effective date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("EffectiveDate")
    public LocalDate effectiveDate;

    public EmployerEmployer withEffectiveDate(LocalDate effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }
    
    /**
     * The employers' hmrc settings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HmrcSettings")
    public EmployerEmployerHmrcSettings hmrcSettings;

    public EmployerEmployer withHmrcSettings(EmployerEmployerHmrcSettings hmrcSettings) {
        this.hmrcSettings = hmrcSettings;
        return this;
    }
    
    /**
     * The employers' meta data
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MetaData")
    public java.util.Map<String, Object> metaData;

    public EmployerEmployer withMetaData(java.util.Map<String, Object> metaData) {
        this.metaData = metaData;
        return this;
    }
    
    /**
     * The employers' name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;

    public EmployerEmployer withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The employers' next revision date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("NextRevisionDate")
    public LocalDate nextRevisionDate;

    public EmployerEmployer withNextRevisionDate(LocalDate nextRevisionDate) {
        this.nextRevisionDate = nextRevisionDate;
        return this;
    }
    
    /**
     * The employers' region
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Region")
    public EmployerEmployerRegionEnum region;

    public EmployerEmployer withRegion(EmployerEmployerRegionEnum region) {
        this.region = region;
        return this;
    }
    
    /**
     * The employers' revision
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Revision")
    public Integer revision;

    public EmployerEmployer withRevision(Integer revision) {
        this.revision = revision;
        return this;
    }
    
    /**
     * The employers' rule exclusions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RuleExclusions")
    public EmployerEmployerRuleExclusionsEnum ruleExclusions;

    public EmployerEmployer withRuleExclusions(EmployerEmployerRuleExclusionsEnum ruleExclusions) {
        this.ruleExclusions = ruleExclusions;
        return this;
    }
    
    /**
     * The employers' territory
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Territory")
    public EmployerEmployerTerritoryEnum territory;

    public EmployerEmployer withTerritory(EmployerEmployerTerritoryEnum territory) {
        this.territory = territory;
        return this;
    }
    
    public EmployerEmployer(){}
}
