"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import interpolationpoint as shared_interpolationpoint
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GradientRule:
    r"""A rule that applies a gradient color scale format, based on the interpolation points listed. The format of a cell will vary based on its contents as compared to the values of the interpolation points."""
    
    maxpoint: Optional[shared_interpolationpoint.InterpolationPoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxpoint'), 'exclude': lambda f: f is None }})
    r"""A single interpolation point on a gradient conditional format. These pin the gradient color scale according to the color, type and value chosen."""  
    midpoint: Optional[shared_interpolationpoint.InterpolationPoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('midpoint'), 'exclude': lambda f: f is None }})
    r"""A single interpolation point on a gradient conditional format. These pin the gradient color scale according to the color, type and value chosen."""  
    minpoint: Optional[shared_interpolationpoint.InterpolationPoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minpoint'), 'exclude': lambda f: f is None }})
    r"""A single interpolation point on a gradient conditional format. These pin the gradient color scale according to the color, type and value chosen."""  
    