// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// TagResponseColorEnum - Color of the tag.
type TagResponseColorEnum string

const (
	TagResponseColorEnumDarkPink      TagResponseColorEnum = "dark-pink"
	TagResponseColorEnumDarkGreen     TagResponseColorEnum = "dark-green"
	TagResponseColorEnumDarkBlue      TagResponseColorEnum = "dark-blue"
	TagResponseColorEnumDarkRed       TagResponseColorEnum = "dark-red"
	TagResponseColorEnumDarkTeal      TagResponseColorEnum = "dark-teal"
	TagResponseColorEnumDarkBrown     TagResponseColorEnum = "dark-brown"
	TagResponseColorEnumDarkOrange    TagResponseColorEnum = "dark-orange"
	TagResponseColorEnumDarkPurple    TagResponseColorEnum = "dark-purple"
	TagResponseColorEnumDarkWarmGray  TagResponseColorEnum = "dark-warm-gray"
	TagResponseColorEnumLightPink     TagResponseColorEnum = "light-pink"
	TagResponseColorEnumLightGreen    TagResponseColorEnum = "light-green"
	TagResponseColorEnumLightBlue     TagResponseColorEnum = "light-blue"
	TagResponseColorEnumLightRed      TagResponseColorEnum = "light-red"
	TagResponseColorEnumLightTeal     TagResponseColorEnum = "light-teal"
	TagResponseColorEnumLightBrown    TagResponseColorEnum = "light-brown"
	TagResponseColorEnumLightOrange   TagResponseColorEnum = "light-orange"
	TagResponseColorEnumLightPurple   TagResponseColorEnum = "light-purple"
	TagResponseColorEnumLightWarmGray TagResponseColorEnum = "light-warm-gray"
)

func (e TagResponseColorEnum) ToPointer() *TagResponseColorEnum {
	return &e
}

func (e *TagResponseColorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dark-pink":
		fallthrough
	case "dark-green":
		fallthrough
	case "dark-blue":
		fallthrough
	case "dark-red":
		fallthrough
	case "dark-teal":
		fallthrough
	case "dark-brown":
		fallthrough
	case "dark-orange":
		fallthrough
	case "dark-purple":
		fallthrough
	case "dark-warm-gray":
		fallthrough
	case "light-pink":
		fallthrough
	case "light-green":
		fallthrough
	case "light-blue":
		fallthrough
	case "light-red":
		fallthrough
	case "light-teal":
		fallthrough
	case "light-brown":
		fallthrough
	case "light-orange":
		fallthrough
	case "light-purple":
		fallthrough
	case "light-warm-gray":
		*e = TagResponseColorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TagResponseColorEnum: %v", v)
	}
}

// TagResponse - A *tag* is a label that can be attached to any task in Asana. It exists in a single workspace or organization.
type TagResponse struct {
	// Color of the tag.
	Color *TagResponseColorEnum `json:"color,omitempty"`
	// The time at which this resource was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Array of users following this tag.
	Followers []UserCompact `json:"followers,omitempty"`
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
	Name *string `json:"name,omitempty"`
	// Free-form textual information associated with the tag (i.e. its description).
	Notes *string `json:"notes,omitempty"`
	// A url that points directly to the object within Asana.
	PermalinkURL *string `json:"permalink_url,omitempty"`
	// The base type of this resource.
	ResourceType *string           `json:"resource_type,omitempty"`
	Workspace    *WorkspaceCompact `json:"workspace,omitempty"`
}

// TagResponseInput - A *tag* is a label that can be attached to any task in Asana. It exists in a single workspace or organization.
type TagResponseInput struct {
	// Color of the tag.
	Color *TagResponseColorEnum `json:"color,omitempty"`
	// Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
	Name *string `json:"name,omitempty"`
	// Free-form textual information associated with the tag (i.e. its description).
	Notes     *string                `json:"notes,omitempty"`
	Workspace *WorkspaceCompactInput `json:"workspace,omitempty"`
}
