/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The locale to use for localizing the findings.
 */
export enum ValidatePolicyRequestBodyLocaleEnum {
  De = "DE",
  En = "EN",
  Es = "ES",
  Fr = "FR",
  It = "IT",
  Ja = "JA",
  Ko = "KO",
  PtBr = "PT_BR",
  ZhCn = "ZH_CN",
  ZhTw = "ZH_TW",
}

/**
 * <p>The type of policy to validate. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups. They also include service-control policies (SCPs) that are attached to an Amazon Web Services organization, organizational unit (OU), or an account.</p> <p>Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy. </p>
 */
export enum ValidatePolicyRequestBodyPolicyTypeEnum {
  IdentityPolicy = "IDENTITY_POLICY",
  ResourcePolicy = "RESOURCE_POLICY",
  ServiceControlPolicy = "SERVICE_CONTROL_POLICY",
}

/**
 * <p>The type of resource to attach to your resource policy. Specify a value for the policy validation resource type only if the policy type is <code>RESOURCE_POLICY</code>. For example, to validate a resource policy to attach to an Amazon S3 bucket, you can choose <code>AWS::S3::Bucket</code> for the policy validation resource type.</p> <p>For resource types not supported as valid values, IAM Access Analyzer runs policy checks that apply to all resource policies. For example, to validate a resource policy to attach to a KMS key, do not specify a value for the policy validation resource type and IAM Access Analyzer will run policy checks that apply to all resource policies.</p>
 */
export enum ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum {
  AWSS3Bucket = "AWS::S3::Bucket",
  AWSS3AccessPoint = "AWS::S3::AccessPoint",
  AWSS3MultiRegionAccessPoint = "AWS::S3::MultiRegionAccessPoint",
  AWSS3ObjectLambdaAccessPoint = "AWS::S3ObjectLambda::AccessPoint",
  AWSIAMAssumeRolePolicyDocument = "AWS::IAM::AssumeRolePolicyDocument",
}

export class ValidatePolicyRequestBody extends SpeakeasyBase {
  /**
   * The locale to use for localizing the findings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locale" })
  locale?: ValidatePolicyRequestBodyLocaleEnum;

  /**
   * The JSON policy document to use as the content for the policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyDocument" })
  policyDocument: string;

  /**
   * <p>The type of policy to validate. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups. They also include service-control policies (SCPs) that are attached to an Amazon Web Services organization, organizational unit (OU), or an account.</p> <p>Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy. </p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "policyType" })
  policyType: ValidatePolicyRequestBodyPolicyTypeEnum;

  /**
   * <p>The type of resource to attach to your resource policy. Specify a value for the policy validation resource type only if the policy type is <code>RESOURCE_POLICY</code>. For example, to validate a resource policy to attach to an Amazon S3 bucket, you can choose <code>AWS::S3::Bucket</code> for the policy validation resource type.</p> <p>For resource types not supported as valid values, IAM Access Analyzer runs policy checks that apply to all resource policies. For example, to validate a resource policy to attach to a KMS key, do not specify a value for the policy validation resource type and IAM Access Analyzer will run policy checks that apply to all resource policies.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "validatePolicyResourceType" })
  validatePolicyResourceType?: ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum;
}

export class ValidatePolicyRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ValidatePolicyRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The maximum number of results to return in the response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * A token used for pagination of results returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class ValidatePolicyResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  validatePolicyResponse?: shared.ValidatePolicyResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
