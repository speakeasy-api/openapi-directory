/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * This object determines if a user is a member of a workspace.
 */
export class WorkspaceMemberships {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a workspace membership
   *
   * @remarks
   * Returns the complete workspace record for a single workspace membership.
   */
  getWorkspaceMembership(
    req: operations.GetWorkspaceMembershipRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWorkspaceMembershipResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWorkspaceMembershipRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/workspace_memberships/{workspace_membership_gid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWorkspaceMembershipResponse =
        new operations.GetWorkspaceMembershipResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getWorkspaceMembership200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetWorkspaceMembership200ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get workspace memberships for a user
   *
   * @remarks
   * Returns the compact workspace membership records for the user.
   */
  getWorkspaceMembershipsForUser(
    req: operations.GetWorkspaceMembershipsForUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWorkspaceMembershipsForUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWorkspaceMembershipsForUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_gid}/workspace_memberships",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWorkspaceMembershipsForUserResponse =
        new operations.GetWorkspaceMembershipsForUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getWorkspaceMembershipsForUser200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetWorkspaceMembershipsForUser200ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the workspace memberships for a workspace
   *
   * @remarks
   * Returns the compact workspace membership records for the workspace.
   */
  getWorkspaceMembershipsForWorkspace(
    req: operations.GetWorkspaceMembershipsForWorkspaceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWorkspaceMembershipsForWorkspaceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWorkspaceMembershipsForWorkspaceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/workspaces/{workspace_gid}/workspace_memberships",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWorkspaceMembershipsForWorkspaceResponse =
        new operations.GetWorkspaceMembershipsForWorkspaceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getWorkspaceMembershipsForWorkspace200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetWorkspaceMembershipsForWorkspace200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
