"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Indexes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_index_with_primary_key(self, request: operations.CreateIndexWithPrimaryKeyRequestBody) -> operations.CreateIndexWithPrimaryKeyResponse:
        r"""Create index with primary key
        Create index with primary key
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateIndexWithPrimaryKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_an_index(self) -> operations.DeleteAnIndexResponse:
        r"""Delete an index
        Delete an index
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAnIndexResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_indexes(self, request: operations.GetIndexesRequest) -> operations.GetIndexesResponse:
        r"""Get indexes
        Get indexes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes'
        
        query_params = utils.get_query_params(operations.GetIndexesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIndexesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def show_index(self) -> operations.ShowIndexResponse:
        r"""Show index
        Show index
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ShowIndexResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def swap_indexes(self, request: list[operations.SwapIndexesRequestBody]) -> operations.SwapIndexesResponse:
        r"""Swap indexes
        Swap indexes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/swap-indexes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SwapIndexesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def udpate_index(self, request: operations.UdpateIndexRequestBody) -> operations.UdpateIndexResponse:
        r"""Udpate index
        Can only change the document identifier if it has not already been added before.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UdpateIndexResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    