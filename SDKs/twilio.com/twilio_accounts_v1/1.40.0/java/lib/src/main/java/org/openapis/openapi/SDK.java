/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://accounts.twilio.com",
	};
    /**
	 * CREATE_CREDENTIAL_AWS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CREDENTIAL_AWS_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * CREATE_CREDENTIAL_PUBLIC_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CREDENTIAL_PUBLIC_KEY_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * CREATE_SECONDARY_AUTH_TOKEN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SECONDARY_AUTH_TOKEN_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * DELETE_CREDENTIAL_AWS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CREDENTIAL_AWS_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * DELETE_CREDENTIAL_PUBLIC_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CREDENTIAL_PUBLIC_KEY_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * DELETE_SECONDARY_AUTH_TOKEN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SECONDARY_AUTH_TOKEN_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * FETCH_CREDENTIAL_AWS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CREDENTIAL_AWS_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * FETCH_CREDENTIAL_PUBLIC_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CREDENTIAL_PUBLIC_KEY_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * LIST_CREDENTIAL_AWS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CREDENTIAL_AWS_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * LIST_CREDENTIAL_PUBLIC_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CREDENTIAL_PUBLIC_KEY_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * UPDATE_AUTH_TOKEN_PROMOTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_AUTH_TOKEN_PROMOTION_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * UPDATE_CREDENTIAL_AWS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CREDENTIAL_AWS_SERVERS = {
        "https://accounts.twilio.com",
    };
	
    /**
	 * UPDATE_CREDENTIAL_PUBLIC_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CREDENTIAL_PUBLIC_KEY_SERVERS = {
        "https://accounts.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Create a new AWS Credential
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateCredentialAwsResponse createCredentialAws(org.openapis.openapi.models.operations.CreateCredentialAwsCreateCredentialAwsRequest request, org.openapis.openapi.models.operations.CreateCredentialAwsSecurity security) throws Exception {
        return this.createCredentialAws(request, security, null);
    }

    /**
     * Create a new AWS Credential
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateCredentialAwsResponse createCredentialAws(org.openapis.openapi.models.operations.CreateCredentialAwsCreateCredentialAwsRequest request, org.openapis.openapi.models.operations.CreateCredentialAwsSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CREDENTIAL_AWS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Credentials/AWS");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCredentialAwsResponse res = new org.openapis.openapi.models.operations.CreateCredentialAwsResponse() {{
            accountsV1CredentialCredentialAws = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AccountsV1CredentialCredentialAws out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AccountsV1CredentialCredentialAws.class);
                res.accountsV1CredentialCredentialAws = out;
            }
        }

        return res;
    }

    /**
     * Create a new Public Key Credential
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateCredentialPublicKeyResponse createCredentialPublicKey(org.openapis.openapi.models.operations.CreateCredentialPublicKeyCreateCredentialPublicKeyRequest request, org.openapis.openapi.models.operations.CreateCredentialPublicKeySecurity security) throws Exception {
        return this.createCredentialPublicKey(request, security, null);
    }

    /**
     * Create a new Public Key Credential
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateCredentialPublicKeyResponse createCredentialPublicKey(org.openapis.openapi.models.operations.CreateCredentialPublicKeyCreateCredentialPublicKeyRequest request, org.openapis.openapi.models.operations.CreateCredentialPublicKeySecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CREDENTIAL_PUBLIC_KEY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Credentials/PublicKeys");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCredentialPublicKeyResponse res = new org.openapis.openapi.models.operations.CreateCredentialPublicKeyResponse() {{
            accountsV1CredentialCredentialPublicKey = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AccountsV1CredentialCredentialPublicKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AccountsV1CredentialCredentialPublicKey.class);
                res.accountsV1CredentialCredentialPublicKey = out;
            }
        }

        return res;
    }

    /**
     * Create a new secondary Auth Token
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSecondaryAuthTokenResponse createSecondaryAuthToken() throws Exception {
        return this.createSecondaryAuthToken(null);
    }

    /**
     * Create a new secondary Auth Token
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSecondaryAuthTokenResponse createSecondaryAuthToken(String serverURL) throws Exception {
        String baseUrl = CREATE_SECONDARY_AUTH_TOKEN_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/AuthTokens/Secondary");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSecondaryAuthTokenResponse res = new org.openapis.openapi.models.operations.CreateSecondaryAuthTokenResponse() {{
            accountsV1SecondaryAuthToken = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AccountsV1SecondaryAuthToken out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AccountsV1SecondaryAuthToken.class);
                res.accountsV1SecondaryAuthToken = out;
            }
        }

        return res;
    }

    /**
     * Delete a Credential from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCredentialAwsResponse deleteCredentialAws(org.openapis.openapi.models.operations.DeleteCredentialAwsRequest request, org.openapis.openapi.models.operations.DeleteCredentialAwsSecurity security) throws Exception {
        return this.deleteCredentialAws(request, security, null);
    }

    /**
     * Delete a Credential from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCredentialAwsResponse deleteCredentialAws(org.openapis.openapi.models.operations.DeleteCredentialAwsRequest request, org.openapis.openapi.models.operations.DeleteCredentialAwsSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CREDENTIAL_AWS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCredentialAwsRequest.class, baseUrl, "/v1/Credentials/AWS/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCredentialAwsResponse res = new org.openapis.openapi.models.operations.DeleteCredentialAwsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Credential from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCredentialPublicKeyResponse deleteCredentialPublicKey(org.openapis.openapi.models.operations.DeleteCredentialPublicKeyRequest request, org.openapis.openapi.models.operations.DeleteCredentialPublicKeySecurity security) throws Exception {
        return this.deleteCredentialPublicKey(request, security, null);
    }

    /**
     * Delete a Credential from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCredentialPublicKeyResponse deleteCredentialPublicKey(org.openapis.openapi.models.operations.DeleteCredentialPublicKeyRequest request, org.openapis.openapi.models.operations.DeleteCredentialPublicKeySecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CREDENTIAL_PUBLIC_KEY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCredentialPublicKeyRequest.class, baseUrl, "/v1/Credentials/PublicKeys/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCredentialPublicKeyResponse res = new org.openapis.openapi.models.operations.DeleteCredentialPublicKeyResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete the secondary Auth Token from your account
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSecondaryAuthTokenResponse deleteSecondaryAuthToken() throws Exception {
        return this.deleteSecondaryAuthToken(null);
    }

    /**
     * Delete the secondary Auth Token from your account
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSecondaryAuthTokenResponse deleteSecondaryAuthToken(String serverURL) throws Exception {
        String baseUrl = DELETE_SECONDARY_AUTH_TOKEN_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/AuthTokens/Secondary");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSecondaryAuthTokenResponse res = new org.openapis.openapi.models.operations.DeleteSecondaryAuthTokenResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Fetch the AWS credentials specified by the provided Credential Sid
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCredentialAwsResponse fetchCredentialAws(org.openapis.openapi.models.operations.FetchCredentialAwsRequest request, org.openapis.openapi.models.operations.FetchCredentialAwsSecurity security) throws Exception {
        return this.fetchCredentialAws(request, security, null);
    }

    /**
     * Fetch the AWS credentials specified by the provided Credential Sid
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCredentialAwsResponse fetchCredentialAws(org.openapis.openapi.models.operations.FetchCredentialAwsRequest request, org.openapis.openapi.models.operations.FetchCredentialAwsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CREDENTIAL_AWS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCredentialAwsRequest.class, baseUrl, "/v1/Credentials/AWS/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCredentialAwsResponse res = new org.openapis.openapi.models.operations.FetchCredentialAwsResponse() {{
            accountsV1CredentialCredentialAws = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AccountsV1CredentialCredentialAws out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AccountsV1CredentialCredentialAws.class);
                res.accountsV1CredentialCredentialAws = out;
            }
        }

        return res;
    }

    /**
     * Fetch the public key specified by the provided Credential Sid
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCredentialPublicKeyResponse fetchCredentialPublicKey(org.openapis.openapi.models.operations.FetchCredentialPublicKeyRequest request, org.openapis.openapi.models.operations.FetchCredentialPublicKeySecurity security) throws Exception {
        return this.fetchCredentialPublicKey(request, security, null);
    }

    /**
     * Fetch the public key specified by the provided Credential Sid
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCredentialPublicKeyResponse fetchCredentialPublicKey(org.openapis.openapi.models.operations.FetchCredentialPublicKeyRequest request, org.openapis.openapi.models.operations.FetchCredentialPublicKeySecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CREDENTIAL_PUBLIC_KEY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCredentialPublicKeyRequest.class, baseUrl, "/v1/Credentials/PublicKeys/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCredentialPublicKeyResponse res = new org.openapis.openapi.models.operations.FetchCredentialPublicKeyResponse() {{
            accountsV1CredentialCredentialPublicKey = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AccountsV1CredentialCredentialPublicKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AccountsV1CredentialCredentialPublicKey.class);
                res.accountsV1CredentialCredentialPublicKey = out;
            }
        }

        return res;
    }

    /**
     * Retrieves a collection of AWS Credentials belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCredentialAwsResponse listCredentialAws(org.openapis.openapi.models.operations.ListCredentialAwsRequest request, org.openapis.openapi.models.operations.ListCredentialAwsSecurity security) throws Exception {
        return this.listCredentialAws(request, security, null);
    }

    /**
     * Retrieves a collection of AWS Credentials belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCredentialAwsResponse listCredentialAws(org.openapis.openapi.models.operations.ListCredentialAwsRequest request, org.openapis.openapi.models.operations.ListCredentialAwsSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CREDENTIAL_AWS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Credentials/AWS");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCredentialAwsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCredentialAwsResponse res = new org.openapis.openapi.models.operations.ListCredentialAwsResponse() {{
            listCredentialAwsResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCredentialAwsListCredentialAwsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCredentialAwsListCredentialAwsResponse.class);
                res.listCredentialAwsResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieves a collection of Public Key Credentials belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCredentialPublicKeyResponse listCredentialPublicKey(org.openapis.openapi.models.operations.ListCredentialPublicKeyRequest request, org.openapis.openapi.models.operations.ListCredentialPublicKeySecurity security) throws Exception {
        return this.listCredentialPublicKey(request, security, null);
    }

    /**
     * Retrieves a collection of Public Key Credentials belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCredentialPublicKeyResponse listCredentialPublicKey(org.openapis.openapi.models.operations.ListCredentialPublicKeyRequest request, org.openapis.openapi.models.operations.ListCredentialPublicKeySecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CREDENTIAL_PUBLIC_KEY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Credentials/PublicKeys");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCredentialPublicKeyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCredentialPublicKeyResponse res = new org.openapis.openapi.models.operations.ListCredentialPublicKeyResponse() {{
            listCredentialPublicKeyResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCredentialPublicKeyListCredentialPublicKeyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCredentialPublicKeyListCredentialPublicKeyResponse.class);
                res.listCredentialPublicKeyResponse = out;
            }
        }

        return res;
    }

    /**
     * Promote the secondary Auth Token to primary. After promoting the new token, all requests to Twilio using your old primary Auth Token will result in an error.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAuthTokenPromotionResponse updateAuthTokenPromotion() throws Exception {
        return this.updateAuthTokenPromotion(null);
    }

    /**
     * Promote the secondary Auth Token to primary. After promoting the new token, all requests to Twilio using your old primary Auth Token will result in an error.
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAuthTokenPromotionResponse updateAuthTokenPromotion(String serverURL) throws Exception {
        String baseUrl = UPDATE_AUTH_TOKEN_PROMOTION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/AuthTokens/Promote");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAuthTokenPromotionResponse res = new org.openapis.openapi.models.operations.UpdateAuthTokenPromotionResponse() {{
            accountsV1AuthTokenPromotion = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AccountsV1AuthTokenPromotion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AccountsV1AuthTokenPromotion.class);
                res.accountsV1AuthTokenPromotion = out;
            }
        }

        return res;
    }

    /**
     * Modify the properties of a given Account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCredentialAwsResponse updateCredentialAws(org.openapis.openapi.models.operations.UpdateCredentialAwsRequest request, org.openapis.openapi.models.operations.UpdateCredentialAwsSecurity security) throws Exception {
        return this.updateCredentialAws(request, security, null);
    }

    /**
     * Modify the properties of a given Account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCredentialAwsResponse updateCredentialAws(org.openapis.openapi.models.operations.UpdateCredentialAwsRequest request, org.openapis.openapi.models.operations.UpdateCredentialAwsSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CREDENTIAL_AWS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCredentialAwsRequest.class, baseUrl, "/v1/Credentials/AWS/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCredentialAwsResponse res = new org.openapis.openapi.models.operations.UpdateCredentialAwsResponse() {{
            accountsV1CredentialCredentialAws = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AccountsV1CredentialCredentialAws out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AccountsV1CredentialCredentialAws.class);
                res.accountsV1CredentialCredentialAws = out;
            }
        }

        return res;
    }

    /**
     * Modify the properties of a given Account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCredentialPublicKeyResponse updateCredentialPublicKey(org.openapis.openapi.models.operations.UpdateCredentialPublicKeyRequest request, org.openapis.openapi.models.operations.UpdateCredentialPublicKeySecurity security) throws Exception {
        return this.updateCredentialPublicKey(request, security, null);
    }

    /**
     * Modify the properties of a given Account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCredentialPublicKeyResponse updateCredentialPublicKey(org.openapis.openapi.models.operations.UpdateCredentialPublicKeyRequest request, org.openapis.openapi.models.operations.UpdateCredentialPublicKeySecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CREDENTIAL_PUBLIC_KEY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCredentialPublicKeyRequest.class, baseUrl, "/v1/Credentials/PublicKeys/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCredentialPublicKeyResponse res = new org.openapis.openapi.models.operations.UpdateCredentialPublicKeyResponse() {{
            accountsV1CredentialCredentialPublicKey = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AccountsV1CredentialCredentialPublicKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AccountsV1CredentialCredentialPublicKey.class);
                res.accountsV1CredentialCredentialPublicKey = out;
            }
        }

        return res;
    }
}