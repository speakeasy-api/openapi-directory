"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attributetype as shared_attributetype
from ..shared import deliverymediumtype_enum as shared_deliverymediumtype_enum
from ..shared import messageactiontype_enum as shared_messageactiontype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminCreateUserRequest:
    r"""Represents the request to create a user in the specified user pool."""
    
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Username') }})  
    user_pool_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserPoolId') }})  
    client_metadata: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientMetadata'), 'exclude': lambda f: f is None }})  
    desired_delivery_mediums: Optional[list[shared_deliverymediumtype_enum.DeliveryMediumTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DesiredDeliveryMediums'), 'exclude': lambda f: f is None }})  
    force_alias_creation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForceAliasCreation'), 'exclude': lambda f: f is None }})  
    message_action: Optional[shared_messageactiontype_enum.MessageActionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageAction'), 'exclude': lambda f: f is None }})  
    temporary_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TemporaryPassword'), 'exclude': lambda f: f is None }})  
    user_attributes: Optional[list[shared_attributetype.AttributeType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserAttributes'), 'exclude': lambda f: f is None }})  
    validation_data: Optional[list[shared_attributetype.AttributeType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValidationData'), 'exclude': lambda f: f is None }})  
    