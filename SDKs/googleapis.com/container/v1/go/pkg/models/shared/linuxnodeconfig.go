// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LinuxNodeConfigCgroupModeEnum - cgroup_mode specifies the cgroup mode to be used on the node.
type LinuxNodeConfigCgroupModeEnum string

const (
	LinuxNodeConfigCgroupModeEnumCgroupModeUnspecified LinuxNodeConfigCgroupModeEnum = "CGROUP_MODE_UNSPECIFIED"
	LinuxNodeConfigCgroupModeEnumCgroupModeV1          LinuxNodeConfigCgroupModeEnum = "CGROUP_MODE_V1"
	LinuxNodeConfigCgroupModeEnumCgroupModeV2          LinuxNodeConfigCgroupModeEnum = "CGROUP_MODE_V2"
)

func (e LinuxNodeConfigCgroupModeEnum) ToPointer() *LinuxNodeConfigCgroupModeEnum {
	return &e
}

func (e *LinuxNodeConfigCgroupModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CGROUP_MODE_UNSPECIFIED":
		fallthrough
	case "CGROUP_MODE_V1":
		fallthrough
	case "CGROUP_MODE_V2":
		*e = LinuxNodeConfigCgroupModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LinuxNodeConfigCgroupModeEnum: %v", v)
	}
}

// LinuxNodeConfig - Parameters that can be configured on Linux nodes.
type LinuxNodeConfig struct {
	// cgroup_mode specifies the cgroup mode to be used on the node.
	CgroupMode *LinuxNodeConfigCgroupModeEnum `json:"cgroupMode,omitempty"`
	// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
	Sysctls map[string]string `json:"sysctls,omitempty"`
}
