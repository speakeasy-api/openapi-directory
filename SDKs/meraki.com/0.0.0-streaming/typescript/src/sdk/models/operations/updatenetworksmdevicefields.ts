/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The new fields of the device. Each field of this object is optional.
 */
export class UpdateNetworkSmDeviceFieldsRequestBodyDeviceFields extends SpeakeasyBase {
  /**
   * New name for the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * New notes for the device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;
}

export class UpdateNetworkSmDeviceFieldsRequestBody extends SpeakeasyBase {
  /**
   * The new fields of the device. Each field of this object is optional.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deviceFields" })
  @Type(() => UpdateNetworkSmDeviceFieldsRequestBodyDeviceFields)
  deviceFields: UpdateNetworkSmDeviceFieldsRequestBodyDeviceFields;

  /**
   * The id of the device to be modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The serial of the device to be modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serial" })
  serial?: string;

  /**
   * The wifiMac of the device to be modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wifiMac" })
  wifiMac?: string;
}

export class UpdateNetworkSmDeviceFieldsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateNetworkSmDeviceFieldsRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class UpdateNetworkSmDeviceFieldsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkSmDeviceFields200ApplicationJSONObject?: Record<string, any>;
}
