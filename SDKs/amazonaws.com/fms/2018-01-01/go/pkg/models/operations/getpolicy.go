// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetPolicyXAmzTargetEnum
type GetPolicyXAmzTargetEnum string

const (
	GetPolicyXAmzTargetEnumAwsfms20180101GetPolicy GetPolicyXAmzTargetEnum = "AWSFMS_20180101.GetPolicy"
)

func (e GetPolicyXAmzTargetEnum) ToPointer() *GetPolicyXAmzTargetEnum {
	return &e
}

func (e *GetPolicyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSFMS_20180101.GetPolicy":
		*e = GetPolicyXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPolicyXAmzTargetEnum: %v", v)
	}
}

type GetPolicyRequest struct {
	GetPolicyRequest  shared.GetPolicyRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetPolicyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetPolicyResponse struct {
	ContentType string
	// Success
	GetPolicyResponse *shared.GetPolicyResponse
	// InternalErrorException
	InternalErrorException interface{}
	// InvalidOperationException
	InvalidOperationException interface{}
	// InvalidTypeException
	InvalidTypeException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
