<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GlobalConfig - The global config object of Otoroshi, used to customize settings of the current Otoroshi instance
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GlobalConfig
{
    /**
     * Email addresses that will receive all Otoroshi alert events
     * 
     * @var array<string> $alertsEmails
     */
	#[\JMS\Serializer\Annotation\SerializedName('alertsEmails')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $alertsEmails;
    
    /**
     * Webhook that will receive all Otoroshi alert events
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\Webhook> $alertsWebhooks
     */
	#[\JMS\Serializer\Annotation\SerializedName('alertsWebhooks')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Webhook>')]
    public array $alertsWebhooks;
    
    /**
     * Webhook that will receive all internal Otoroshi events
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\Webhook> $analyticsWebhooks
     */
	#[\JMS\Serializer\Annotation\SerializedName('analyticsWebhooks')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Webhook>')]
    public array $analyticsWebhooks;
    
    /**
     * If enabled, Admin API won't be able to write/update/delete entities
     * 
     * @var bool $apiReadOnly
     */
	#[\JMS\Serializer\Annotation\SerializedName('apiReadOnly')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $apiReadOnly;
    
    /**
     * If not defined, every new service descriptor will be added to the default group
     * 
     * @var bool $autoLinkToDefaultGroup
     */
	#[\JMS\Serializer\Annotation\SerializedName('autoLinkToDefaultGroup')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $autoLinkToDefaultGroup;
    
    /**
     * Configuration for Auth0 domain
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Auth0Config $backofficeAuth0Config
     */
	#[\JMS\Serializer\Annotation\SerializedName('backofficeAuth0Config')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Auth0Config')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Auth0Config $backofficeAuth0Config = null;
    
    /**
     * Configuration for CleverCloud client
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CleverSettings $cleverSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('cleverSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CleverSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CleverSettings $cleverSettings = null;
    
    /**
     * The configuration for elastic access
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ElasticConfig $elasticReadsConfig
     */
	#[\JMS\Serializer\Annotation\SerializedName('elasticReadsConfig')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ElasticConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ElasticConfig $elasticReadsConfig = null;
    
    /**
     * Configs. for Elastic writes
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ElasticConfig> $elasticWritesConfigs
     */
	#[\JMS\Serializer\Annotation\SerializedName('elasticWritesConfigs')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ElasticConfig>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $elasticWritesConfigs = null;
    
    /**
     * IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros
     * 
     * @var array<string> $endlessIpAddresses
     */
	#[\JMS\Serializer\Annotation\SerializedName('endlessIpAddresses')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    public array $endlessIpAddresses;
    
    /**
     * The filtering configuration block for a service of globally.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\IpFiltering $ipFiltering
     */
	#[\JMS\Serializer\Annotation\SerializedName('ipFiltering')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\IpFiltering')]
    public IpFiltering $ipFiltering;
    
    /**
     * If enabled, Otoroshi will reject new request if too much at the same time
     * 
     * @var bool $limitConcurrentRequests
     */
	#[\JMS\Serializer\Annotation\SerializedName('limitConcurrentRequests')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $limitConcurrentRequests;
    
    /**
     * Possibles lines for Otoroshi
     * 
     * @var ?array<string> $lines
     */
	#[\JMS\Serializer\Annotation\SerializedName('lines')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $lines = null;
    
    /**
     * Configuration for mailgun api client
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\MailerSettings $mailerSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('mailerSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\MailerSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?MailerSettings $mailerSettings = null;
    
    /**
     * The number of authorized request processed at the same time
     * 
     * @var int $maxConcurrentRequests
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxConcurrentRequests')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $maxConcurrentRequests;
    
    /**
     * The max size in bytes of an HTTP 1.0 response
     * 
     * @var ?int $maxHttp10ResponseSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxHttp10ResponseSize')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxHttp10ResponseSize = null;
    
    /**
     * Number of events kept locally
     * 
     * @var ?int $maxLogsSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxLogsSize')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxLogsSize = null;
    
    /**
     * Use middle finger emoji as a response character for endless HTTP responses
     * 
     * @var ?bool $middleFingers
     */
	#[\JMS\Serializer\Annotation\SerializedName('middleFingers')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $middleFingers = null;
    
    /**
     * Authorized number of calls per second globally per IP address, measured on 10 seconds
     * 
     * @var int $perIpThrottlingQuota
     */
	#[\JMS\Serializer\Annotation\SerializedName('perIpThrottlingQuota')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $perIpThrottlingQuota;
    
    /**
     * Configuration for Auth0 domain
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Auth0Config $privateAppsAuth0Config
     */
	#[\JMS\Serializer\Annotation\SerializedName('privateAppsAuth0Config')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Auth0Config')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Auth0Config $privateAppsAuth0Config = null;
    
    /**
     * HTTP will be streamed only. Doesn't work with old browsers
     * 
     * @var bool $streamEntityOnly
     */
	#[\JMS\Serializer\Annotation\SerializedName('streamEntityOnly')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $streamEntityOnly;
    
    /**
     * Authorized number of calls per second globally, measured on 10 seconds
     * 
     * @var int $throttlingQuota
     */
	#[\JMS\Serializer\Annotation\SerializedName('throttlingQuota')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $throttlingQuota;
    
    /**
     * If enabled, login to backoffice through Auth0 will be disabled
     * 
     * @var bool $u2fLoginOnly
     */
	#[\JMS\Serializer\Annotation\SerializedName('u2fLoginOnly')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $u2fLoginOnly;
    
    /**
     * If enabled, services will be authorized to use circuit breakers
     * 
     * @var bool $useCircuitBreakers
     */
	#[\JMS\Serializer\Annotation\SerializedName('useCircuitBreakers')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $useCircuitBreakers;
    
	public function __construct()
	{
		$this->alertsEmails = [];
		$this->alertsWebhooks = [];
		$this->analyticsWebhooks = [];
		$this->apiReadOnly = false;
		$this->autoLinkToDefaultGroup = false;
		$this->backofficeAuth0Config = null;
		$this->cleverSettings = null;
		$this->elasticReadsConfig = null;
		$this->elasticWritesConfigs = null;
		$this->endlessIpAddresses = [];
		$this->ipFiltering = new \OpenAPI\OpenAPI\Models\Shared\IpFiltering();
		$this->limitConcurrentRequests = false;
		$this->lines = null;
		$this->mailerSettings = null;
		$this->maxConcurrentRequests = 0;
		$this->maxHttp10ResponseSize = null;
		$this->maxLogsSize = null;
		$this->middleFingers = null;
		$this->perIpThrottlingQuota = 0;
		$this->privateAppsAuth0Config = null;
		$this->streamEntityOnly = false;
		$this->throttlingQuota = 0;
		$this->u2fLoginOnly = false;
		$this->useCircuitBreakers = false;
	}
}
