// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeListenerXAmzTargetEnum
type DescribeListenerXAmzTargetEnum string

const (
	DescribeListenerXAmzTargetEnumGlobalAcceleratorV20180706DescribeListener DescribeListenerXAmzTargetEnum = "GlobalAccelerator_V20180706.DescribeListener"
)

func (e DescribeListenerXAmzTargetEnum) ToPointer() *DescribeListenerXAmzTargetEnum {
	return &e
}

func (e *DescribeListenerXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GlobalAccelerator_V20180706.DescribeListener":
		*e = DescribeListenerXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeListenerXAmzTargetEnum: %v", v)
	}
}

type DescribeListenerRequest struct {
	DescribeListenerRequest shared.DescribeListenerRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              DescribeListenerXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeListenerResponse struct {
	ContentType string
	// Success
	DescribeListenerResponse *shared.DescribeListenerResponse
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// ListenerNotFoundException
	ListenerNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
