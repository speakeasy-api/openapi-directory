// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DrvlcSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type DrvlcRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// DL No
	Dlno string `json:"dlno"`
}

// DrvlcRequestBodyFormatEnum - The format of the certificate in response.
type DrvlcRequestBodyFormatEnum string

const (
	DrvlcRequestBodyFormatEnumXML DrvlcRequestBodyFormatEnum = "xml"
	DrvlcRequestBodyFormatEnumPdf DrvlcRequestBodyFormatEnum = "pdf"
)

func (e *DrvlcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "xml":
		fallthrough
	case "pdf":
		*e = DrvlcRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DrvlcRequestBodyFormatEnum: %s", s)
	}
}

// DrvlcRequestBody - Request format
type DrvlcRequestBody struct {
	CertificateParameters *DrvlcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DrvlcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Drvlc504ApplicationJSONErrorEnum string

const (
	Drvlc504ApplicationJSONErrorEnumGatewayTimeout Drvlc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Drvlc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Drvlc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Drvlc504ApplicationJSONErrorDescriptionEnum string

const (
	Drvlc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Drvlc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Drvlc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Drvlc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Drvlc504ApplicationJSON - Gateway timeout
type Drvlc504ApplicationJSON struct {
	Error            *Drvlc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Drvlc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Drvlc503ApplicationJSONErrorEnum string

const (
	Drvlc503ApplicationJSONErrorEnumServiceUnavailable Drvlc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Drvlc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Drvlc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Drvlc503ApplicationJSONErrorDescriptionEnum string

const (
	Drvlc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Drvlc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Drvlc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Drvlc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Drvlc503ApplicationJSON - Service unavailable
type Drvlc503ApplicationJSON struct {
	Error            *Drvlc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Drvlc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Drvlc502ApplicationJSONErrorEnum string

const (
	Drvlc502ApplicationJSONErrorEnumBadGatewy Drvlc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Drvlc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Drvlc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Drvlc502ApplicationJSONErrorDescriptionEnum string

const (
	Drvlc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Drvlc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Drvlc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Drvlc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Drvlc502ApplicationJSON - Bad gateway
type Drvlc502ApplicationJSON struct {
	Error            *Drvlc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Drvlc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Drvlc500ApplicationJSONErrorEnum string

const (
	Drvlc500ApplicationJSONErrorEnumInternalServerError Drvlc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Drvlc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Drvlc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Drvlc500ApplicationJSONErrorDescriptionEnum string

const (
	Drvlc500ApplicationJSONErrorDescriptionEnumInternalServerError Drvlc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Drvlc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Drvlc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Drvlc500ApplicationJSON - Internal server error
type Drvlc500ApplicationJSON struct {
	Error            *Drvlc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Drvlc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Drvlc404ApplicationJSONErrorEnum string

const (
	Drvlc404ApplicationJSONErrorEnumRecordNotFound Drvlc404ApplicationJSONErrorEnum = "record_not_found"
	Drvlc404ApplicationJSONErrorEnumURLNotFound    Drvlc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Drvlc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Drvlc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Drvlc404ApplicationJSONErrorDescriptionEnum string

const (
	Drvlc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Drvlc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Drvlc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Drvlc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Drvlc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Drvlc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Drvlc404ApplicationJSON - No record found
type Drvlc404ApplicationJSON struct {
	Error            *Drvlc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Drvlc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Drvlc401ApplicationJSONErrorEnum string

const (
	Drvlc401ApplicationJSONErrorEnumInvalidAuthentication Drvlc401ApplicationJSONErrorEnum = "invalid_authentication"
	Drvlc401ApplicationJSONErrorEnumInvalidAuthorization  Drvlc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Drvlc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Drvlc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Drvlc401ApplicationJSONErrorDescriptionEnum string

const (
	Drvlc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Drvlc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Drvlc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Drvlc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Drvlc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Drvlc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Drvlc401ApplicationJSON - Unauthorized access
type Drvlc401ApplicationJSON struct {
	Error            *Drvlc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Drvlc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Drvlc400ApplicationJSONErrorEnum string

const (
	Drvlc400ApplicationJSONErrorEnumMissingParameter Drvlc400ApplicationJSONErrorEnum = "missing_parameter"
	Drvlc400ApplicationJSONErrorEnumInvalidParameter Drvlc400ApplicationJSONErrorEnum = "invalid_parameter"
	Drvlc400ApplicationJSONErrorEnumInvalidFormat    Drvlc400ApplicationJSONErrorEnum = "invalid_format"
	Drvlc400ApplicationJSONErrorEnumInvalidTxnid     Drvlc400ApplicationJSONErrorEnum = "invalid_txnid"
	Drvlc400ApplicationJSONErrorEnumInvalidConsentid Drvlc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Drvlc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Drvlc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Drvlc400ApplicationJSONErrorDescriptionEnum string

const (
	Drvlc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Drvlc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Drvlc400ApplicationJSONErrorDescriptionEnumBadRequest                              Drvlc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Drvlc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Drvlc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Drvlc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Drvlc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Drvlc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Drvlc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Drvlc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Drvlc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Drvlc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Drvlc400ApplicationJSON - Bad request
type Drvlc400ApplicationJSON struct {
	Error            *Drvlc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Drvlc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DrvlcResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Drvlc400ApplicationJSONObject *Drvlc400ApplicationJSON
	// Unauthorized access
	Drvlc401ApplicationJSONObject *Drvlc401ApplicationJSON
	// No record found
	Drvlc404ApplicationJSONObject *Drvlc404ApplicationJSON
	// Internal server error
	Drvlc500ApplicationJSONObject *Drvlc500ApplicationJSON
	// Bad gateway
	Drvlc502ApplicationJSONObject *Drvlc502ApplicationJSON
	// Service unavailable
	Drvlc503ApplicationJSONObject *Drvlc503ApplicationJSON
	// Gateway timeout
	Drvlc504ApplicationJSONObject *Drvlc504ApplicationJSON
}
