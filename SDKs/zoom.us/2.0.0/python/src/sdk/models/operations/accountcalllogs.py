"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AccountCallLogsSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class AccountCallLogsTimeTypeEnum(str, Enum):
    r"""Enables you to sort call logs by start or end time. Choose the sort time value. Values include `startTime` or `endTime`."""
    START_TIME = 'startTime'
    END_TIME = 'endTime'


@dataclasses.dataclass
class AccountCallLogsRequest:
    
    from_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date from which you would like to get the call logs. The start date should be within past six months. <br>
    
    The API only returns data pertaining to a month. Thus, the date range(defined using \"from\" and \"to\" fields) for which the call logs are to be returned must not exceed a month.
    """  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'path', 'style': 'form', 'explode': True }})
    r"""Filter the API response by [path](https://support.zoom.us/hc/en-us/articles/360021114452-Viewing-and-identifying-logs#h_646b46c6-0623-4ab1-8b8b-ea5b8bcef679) of the call. The value of this field can be one of the following: `voiceMail`, `message`, `forward`, `extension`, `callQueue`, `ivrMenu`, `companyDirectory`, `autoReceptionist`, `contactCenter`, `disconnected`, `commonAreaPhone`,
    `pstn`, `transfer`, `sharedLines`, `sharedLineGroup`, `tollFreeBilling`, `meetingService`, `parkPickup`,
    `parkTimeout`, `monitor`, `takeover`, `sipGroup`
    """  
    site_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'site_id', 'style': 'form', 'explode': True }})
    r"""Unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites). Use this query parameter if you have enabled multiple sites and would like to filter the response of this API call by call logs of a specific phone site."""  
    time_type: Optional[AccountCallLogsTimeTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'time_type', 'style': 'form', 'explode': True }})
    r"""Enables you to sort call logs by start or end time. Choose the sort time value. Values include `startTime` or `endTime`."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""The end date upto which you would like to get the call logs for. The end date should be within past six months."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""The type of the call logs. The value can be either \\"all\\" or \\"missed\\"."""  
    
class AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum(str, Enum):
    r"""The type of call:
    *`voip` (Voice over IP)
    *`pstn` (Public Switched Telephone Network)
    *`tollfree`
    *`international`
    *`contactCenter`
    """
    VOIP = 'voip'
    PSTN = 'pstn'
    TOLLFREE = 'tollfree'
    INTERNATIONAL = 'international'
    CONTACT_CENTER = 'contactCenter'

class AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum(str, Enum):
    r"""The owner type:
    *`user`
    *`callQueue`
    *`autoReceptionist`
    *`commonAreaPhone`
    *`sharedLineGroup`
    """
    USER = 'user'
    CALL_QUEUE = 'callQueue'
    AUTO_RECEPTIONIST = 'autoReceptionist'
    COMMON_AREA_PHONE = 'commonAreaPhone'
    SHARED_LINE_GROUP = 'sharedLineGroup'


@dataclasses.dataclass
class AccountCallLogs200ApplicationXMLCallLogsOwner:
    
    extension_number: Optional[int] = dataclasses.field(default=None)
    r"""The owner's extension number."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""The owner ID."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""The owner name."""  
    type: Optional[AccountCallLogs200ApplicationXMLCallLogsOwnerTypeEnum] = dataclasses.field(default=None)
    r"""The owner type:
    *`user`
    *`callQueue`
    *`autoReceptionist`
    *`commonAreaPhone`
    *`sharedLineGroup`
    """  
    
class AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnum(str, Enum):
    r"""Type of call recording:<br>
    `1` OnDemand<br>
    `2` Automatic
    """
    ONE = '1'
    TWO = '2'


@dataclasses.dataclass
class AccountCallLogs200ApplicationXMLCallLogsSite:
    
    id: Optional[str] = dataclasses.field(default=None)
    r"""Target [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) in which the phone number was assigned. Sites allow you to organize the phone users in your organization. For example, you sites could be created based on different office locations."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the site where the phone number is assigned."""  
    

@dataclasses.dataclass
class AccountCallLogs200ApplicationXMLCallLogs:
    
    answer_start_time: Optional[datetime] = dataclasses.field(default=None)
    r"""GMT date and time at which the inbound call was answered. The value of this field is in `yyyy-MM-dd'T'HH:mm:ss'Z'` format."""  
    call_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the phone call."""  
    call_type: Optional[AccountCallLogs200ApplicationXMLCallLogsCallTypeEnum] = dataclasses.field(default=None)
    r"""The type of call:
    *`voip` (Voice over IP)
    *`pstn` (Public Switched Telephone Network)
    *`tollfree`
    *`international`
    *`contactCenter`
    """  
    callee_name: Optional[str] = dataclasses.field(default=None)
    r"""Contact name of callee"""  
    callee_number: Optional[str] = dataclasses.field(default=None)
    r"""Number of callee"""  
    callee_number_type: Optional[str] = dataclasses.field(default=None)
    r"""Type of callee's number. 1 - internal | 2 - external"""  
    caller_name: Optional[str] = dataclasses.field(default=None)
    r"""Contact name of caller"""  
    caller_number: Optional[str] = dataclasses.field(default=None)
    r"""Number of caller"""  
    caller_number_type: Optional[str] = dataclasses.field(default=None)
    r"""Type of caller's number. 1 - internal | 2 - external"""  
    charge: Optional[str] = dataclasses.field(default=None)
    r"""Billing charge for the call."""  
    client_code: Optional[str] = dataclasses.field(default=None)
    r"""Client code."""  
    date_time: Optional[str] = dataclasses.field(default=None)
    r"""Start time of the call"""  
    direction: Optional[str] = dataclasses.field(default=None)
    r"""Direction of the call. \\"inbound\\" | \\"outbound\\" """  
    duration: Optional[int] = dataclasses.field(default=None)
    r"""Duration of the call in seconds."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Call Log ID"""  
    owner: Optional[AccountCallLogs200ApplicationXMLCallLogsOwner] = dataclasses.field(default=None)  
    path: Optional[str] = dataclasses.field(default=None)
    r"""Path of the call."""  
    rate: Optional[str] = dataclasses.field(default=None)
    r"""Billing rate for the call."""  
    recording_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the call recording."""  
    recording_type: Optional[AccountCallLogs200ApplicationXMLCallLogsRecordingTypeEnum] = dataclasses.field(default=None)
    r"""Type of call recording:<br>
    `1` OnDemand<br>
    `2` Automatic
    """  
    result: Optional[str] = dataclasses.field(default=None)
    r"""Result of the call. \\"call_connected\\" | \\"recorded\\" | \\"no_answer\\" """  
    site: Optional[AccountCallLogs200ApplicationXMLCallLogsSite] = dataclasses.field(default=None)  
    user_id: Optional[str] = dataclasses.field(default=None)
    r"""User ID of the call log owner."""  
    waiting_time: Optional[str] = dataclasses.field(default=None)
    r"""Duration that a  **call queue member** takes to answer a call from the time it started ringing. The value of the duration is in seconds."""  
    

@dataclasses.dataclass
class AccountCallLogs200ApplicationXML:
    r"""Account Call Logs"""
    
    call_logs: Optional[list[AccountCallLogs200ApplicationXMLCallLogs]] = dataclasses.field(default=None)
    r"""Call Log"""  
    from_: Optional[str] = dataclasses.field(default=None)
    r"""Date from which you would like to view the logs."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""Total number of pages"""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call for each page."""  
    to: Optional[str] = dataclasses.field(default=None)
    r"""Date up to which you would like to view the phone log."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of records returned."""  
    
class AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum(str, Enum):
    r"""The type of call:
    *`voip` (Voice over IP)
    *`pstn` (Public Switched Telephone Network)
    *`tollfree`
    *`international`
    *`contactCenter`
    """
    VOIP = 'voip'
    PSTN = 'pstn'
    TOLLFREE = 'tollfree'
    INTERNATIONAL = 'international'
    CONTACT_CENTER = 'contactCenter'

class AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum(str, Enum):
    r"""The owner type:
    *`user`
    *`callQueue`
    *`autoReceptionist`
    *`commonAreaPhone`
    *`sharedLineGroup`
    """
    USER = 'user'
    CALL_QUEUE = 'callQueue'
    AUTO_RECEPTIONIST = 'autoReceptionist'
    COMMON_AREA_PHONE = 'commonAreaPhone'
    SHARED_LINE_GROUP = 'sharedLineGroup'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountCallLogs200ApplicationJSONCallLogsOwner:
    
    extension_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})
    r"""The owner's extension number."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The owner ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The owner name."""  
    type: Optional[AccountCallLogs200ApplicationJSONCallLogsOwnerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The owner type:
    *`user`
    *`callQueue`
    *`autoReceptionist`
    *`commonAreaPhone`
    *`sharedLineGroup`
    """  
    
class AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnum(str, Enum):
    r"""Type of call recording:<br>
    `1` OnDemand<br>
    `2` Automatic
    """
    ONE = '1'
    TWO = '2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountCallLogs200ApplicationJSONCallLogsSite:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Target [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) in which the phone number was assigned. Sites allow you to organize the phone users in your organization. For example, you sites could be created based on different office locations."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the site where the phone number is assigned."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountCallLogs200ApplicationJSONCallLogs:
    
    answer_start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answer_start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""GMT date and time at which the inbound call was answered. The value of this field is in `yyyy-MM-dd'T'HH:mm:ss'Z'` format."""  
    call_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the phone call."""  
    call_type: Optional[AccountCallLogs200ApplicationJSONCallLogsCallTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_type'), 'exclude': lambda f: f is None }})
    r"""The type of call:
    *`voip` (Voice over IP)
    *`pstn` (Public Switched Telephone Network)
    *`tollfree`
    *`international`
    *`contactCenter`
    """  
    callee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_name'), 'exclude': lambda f: f is None }})
    r"""Contact name of callee"""  
    callee_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_number'), 'exclude': lambda f: f is None }})
    r"""Number of callee"""  
    callee_number_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_number_type'), 'exclude': lambda f: f is None }})
    r"""Type of callee's number. 1 - internal | 2 - external"""  
    caller_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_name'), 'exclude': lambda f: f is None }})
    r"""Contact name of caller"""  
    caller_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_number'), 'exclude': lambda f: f is None }})
    r"""Number of caller"""  
    caller_number_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_number_type'), 'exclude': lambda f: f is None }})
    r"""Type of caller's number. 1 - internal | 2 - external"""  
    charge: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charge'), 'exclude': lambda f: f is None }})
    r"""Billing charge for the call."""  
    client_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_code'), 'exclude': lambda f: f is None }})
    r"""Client code."""  
    date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_time'), 'exclude': lambda f: f is None }})
    r"""Start time of the call"""  
    direction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""Direction of the call. \\"inbound\\" | \\"outbound\\" """  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Duration of the call in seconds."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Call Log ID"""  
    owner: Optional[AccountCallLogs200ApplicationJSONCallLogsOwner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""Path of the call."""  
    rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate'), 'exclude': lambda f: f is None }})
    r"""Billing rate for the call."""  
    recording_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the call recording."""  
    recording_type: Optional[AccountCallLogs200ApplicationJSONCallLogsRecordingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_type'), 'exclude': lambda f: f is None }})
    r"""Type of call recording:<br>
    `1` OnDemand<br>
    `2` Automatic
    """  
    result: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})
    r"""Result of the call. \\"call_connected\\" | \\"recorded\\" | \\"no_answer\\" """  
    site: Optional[AccountCallLogs200ApplicationJSONCallLogsSite] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site'), 'exclude': lambda f: f is None }})  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""User ID of the call log owner."""  
    waiting_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waiting_time'), 'exclude': lambda f: f is None }})
    r"""Duration that a  **call queue member** takes to answer a call from the time it started ringing. The value of the duration is in seconds."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountCallLogs200ApplicationJSON:
    r"""Account Call Logs"""
    
    call_logs: Optional[list[AccountCallLogs200ApplicationJSONCallLogs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_logs'), 'exclude': lambda f: f is None }})
    r"""Call Log"""  
    from_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})
    r"""Date from which you would like to view the logs."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""Total number of pages"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call for each page."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})
    r"""Date up to which you would like to view the phone log."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of records returned."""  
    

@dataclasses.dataclass
class AccountCallLogsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account_call_logs_200_application_json_object: Optional[AccountCallLogs200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Account's call logs returned.
    """  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    