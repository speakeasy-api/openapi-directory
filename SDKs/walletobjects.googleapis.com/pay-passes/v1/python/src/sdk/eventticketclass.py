"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Eventticketclass:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def walletobjects_eventticketclass_addmessage(self, request: operations.WalletobjectsEventticketclassAddmessageRequest, security: operations.WalletobjectsEventticketclassAddmessageSecurity) -> operations.WalletobjectsEventticketclassAddmessageResponse:
        r"""Adds a message to the event ticket class referenced by the given class ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsEventticketclassAddmessageRequest, base_url, '/walletobjects/v1/eventTicketClass/{resourceId}/addMessage', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_message_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsEventticketclassAddmessageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketclassAddmessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketClassAddMessageResponse])
                res.event_ticket_class_add_message_response = out

        return res

    def walletobjects_eventticketclass_get(self, request: operations.WalletobjectsEventticketclassGetRequest, security: operations.WalletobjectsEventticketclassGetSecurity) -> operations.WalletobjectsEventticketclassGetResponse:
        r"""Returns the event ticket class with the given class ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsEventticketclassGetRequest, base_url, '/walletobjects/v1/eventTicketClass/{resourceId}', request)
        
        query_params = utils.get_query_params(operations.WalletobjectsEventticketclassGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketclassGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketClass])
                res.event_ticket_class = out

        return res

    def walletobjects_eventticketclass_insert(self, request: operations.WalletobjectsEventticketclassInsertRequest, security: operations.WalletobjectsEventticketclassInsertSecurity) -> operations.WalletobjectsEventticketclassInsertResponse:
        r"""Inserts an event ticket class with the given ID and properties."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/eventTicketClass'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event_ticket_class", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsEventticketclassInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketclassInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketClass])
                res.event_ticket_class = out

        return res

    def walletobjects_eventticketclass_list(self, request: operations.WalletobjectsEventticketclassListRequest, security: operations.WalletobjectsEventticketclassListSecurity) -> operations.WalletobjectsEventticketclassListResponse:
        r"""Returns a list of all event ticket classes for a given issuer ID."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/eventTicketClass'
        
        query_params = utils.get_query_params(operations.WalletobjectsEventticketclassListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketclassListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketClassListResponse])
                res.event_ticket_class_list_response = out

        return res

    def walletobjects_eventticketclass_patch(self, request: operations.WalletobjectsEventticketclassPatchRequest, security: operations.WalletobjectsEventticketclassPatchSecurity) -> operations.WalletobjectsEventticketclassPatchResponse:
        r"""Updates the event ticket class referenced by the given class ID. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsEventticketclassPatchRequest, base_url, '/walletobjects/v1/eventTicketClass/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event_ticket_class", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsEventticketclassPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketclassPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketClass])
                res.event_ticket_class = out

        return res

    def walletobjects_eventticketclass_update(self, request: operations.WalletobjectsEventticketclassUpdateRequest, security: operations.WalletobjectsEventticketclassUpdateSecurity) -> operations.WalletobjectsEventticketclassUpdateResponse:
        r"""Updates the event ticket class referenced by the given class ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsEventticketclassUpdateRequest, base_url, '/walletobjects/v1/eventTicketClass/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event_ticket_class", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsEventticketclassUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketclassUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketClass])
                res.event_ticket_class = out

        return res

    