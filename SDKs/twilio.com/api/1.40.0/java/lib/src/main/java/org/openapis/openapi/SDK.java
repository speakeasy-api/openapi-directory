/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://api.twilio.com",
	};
    /**
	 * CREATE_ACCOUNT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ACCOUNT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ADDRESS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_APPLICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_APPLICATION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_CALL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CALL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_CALL_FEEDBACK_SUMMARY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CALL_FEEDBACK_SUMMARY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_CALL_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CALL_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_INCOMING_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INCOMING_PHONE_NUMBER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_INCOMING_PHONE_NUMBER_LOCAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INCOMING_PHONE_NUMBER_LOCAL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_INCOMING_PHONE_NUMBER_MOBILE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INCOMING_PHONE_NUMBER_MOBILE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_MESSAGE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_MESSAGE_FEEDBACK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_MESSAGE_FEEDBACK_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_NEW_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_NEW_KEY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_NEW_SIGNING_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_NEW_SIGNING_KEY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_PARTICIPANT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_PAYMENTS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_PAYMENTS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_QUEUE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_SIP_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIP_CREDENTIAL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_SIP_CREDENTIAL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIP_CREDENTIAL_LIST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_SIP_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIP_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_SIP_DOMAIN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIP_DOMAIN_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_SIP_IP_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIP_IP_ADDRESS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_SIPREC_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SIPREC_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_STREAM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_STREAM_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_TOKEN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_TOKEN_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_USAGE_TRIGGER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_USAGE_TRIGGER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_USER_DEFINED_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_USER_DEFINED_MESSAGE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * CREATE_VALIDATION_REQUEST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_VALIDATION_REQUEST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ADDRESS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_APPLICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_APPLICATION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_CALL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CALL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_CALL_FEEDBACK_SUMMARY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CALL_FEEDBACK_SUMMARY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_CALL_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CALL_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_CONFERENCE_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONFERENCE_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_CONNECT_APP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONNECT_APP_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_INCOMING_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_INCOMING_PHONE_NUMBER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_KEY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_MEDIA_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_MEDIA_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_MESSAGE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_OUTGOING_CALLER_ID_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_OUTGOING_CALLER_ID_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_PARTICIPANT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_QUEUE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_RECORDING_ADD_ON_RESULT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_RECORDING_ADD_ON_RESULT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_RECORDING_TRANSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_RECORDING_TRANSCRIPTION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_SIGNING_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SIGNING_KEY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_SIP_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SIP_CREDENTIAL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_SIP_CREDENTIAL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SIP_CREDENTIAL_LIST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_SIP_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SIP_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_SIP_DOMAIN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SIP_DOMAIN_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_SIP_IP_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SIP_IP_ADDRESS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_TRANSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_TRANSCRIPTION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_USAGE_TRIGGER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_USAGE_TRIGGER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_ACCOUNT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ACCOUNT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ADDRESS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_APPLICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_APPLICATION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_AUTHORIZED_CONNECT_APP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_AUTHORIZED_CONNECT_APP_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_AVAILABLE_PHONE_NUMBER_COUNTRY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_AVAILABLE_PHONE_NUMBER_COUNTRY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_BALANCE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BALANCE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_CALL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CALL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_CALL_FEEDBACK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CALL_FEEDBACK_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_CALL_FEEDBACK_SUMMARY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CALL_FEEDBACK_SUMMARY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_CALL_NOTIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CALL_NOTIFICATION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_CALL_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CALL_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_CONFERENCE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONFERENCE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_CONFERENCE_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONFERENCE_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_CONNECT_APP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONNECT_APP_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_INCOMING_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INCOMING_PHONE_NUMBER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_KEY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_MEDIA_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MEDIA_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_MEMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MEMBER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MESSAGE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_NOTIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_NOTIFICATION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_OUTGOING_CALLER_ID_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_OUTGOING_CALLER_ID_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_PARTICIPANT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_QUEUE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_RECORDING_ADD_ON_RESULT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_RECORDING_ADD_ON_RESULT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_RECORDING_TRANSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_RECORDING_TRANSCRIPTION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SHORT_CODE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SIGNING_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIGNING_KEY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SIP_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIP_CREDENTIAL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SIP_CREDENTIAL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIP_CREDENTIAL_LIST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SIP_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIP_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SIP_DOMAIN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIP_DOMAIN_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SIP_IP_ACCESS_CONTROL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIP_IP_ACCESS_CONTROL_LIST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_SIP_IP_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SIP_IP_ADDRESS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_TRANSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TRANSCRIPTION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * FETCH_USAGE_TRIGGER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_USAGE_TRIGGER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_ACCOUNT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ACCOUNT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ADDRESS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_APPLICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_APPLICATION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_AUTHORIZED_CONNECT_APP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_AUTHORIZED_CONNECT_APP_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_AVAILABLE_PHONE_NUMBER_LOCAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_AVAILABLE_PHONE_NUMBER_LOCAL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_AVAILABLE_PHONE_NUMBER_MOBILE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_AVAILABLE_PHONE_NUMBER_MOBILE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_AVAILABLE_PHONE_NUMBER_VOIP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_AVAILABLE_PHONE_NUMBER_VOIP_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_CALL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CALL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_CALL_EVENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CALL_EVENT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_CALL_NOTIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CALL_NOTIFICATION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_CALL_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CALL_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_CONFERENCE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONFERENCE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_CONFERENCE_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONFERENCE_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_CONNECT_APP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONNECT_APP_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_DEPENDENT_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DEPENDENT_PHONE_NUMBER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_INCOMING_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INCOMING_PHONE_NUMBER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_INCOMING_PHONE_NUMBER_LOCAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INCOMING_PHONE_NUMBER_LOCAL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_INCOMING_PHONE_NUMBER_MOBILE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INCOMING_PHONE_NUMBER_MOBILE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_KEY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_MEDIA_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MEDIA_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_MEMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MEMBER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MESSAGE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_NOTIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_NOTIFICATION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_OUTGOING_CALLER_ID_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_OUTGOING_CALLER_ID_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_PARTICIPANT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_QUEUE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_RECORDING_ADD_ON_RESULT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_RECORDING_ADD_ON_RESULT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_RECORDING_TRANSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_RECORDING_TRANSCRIPTION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SHORT_CODE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SIGNING_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIGNING_KEY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SIP_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIP_CREDENTIAL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SIP_CREDENTIAL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIP_CREDENTIAL_LIST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SIP_CREDENTIAL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIP_CREDENTIAL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SIP_DOMAIN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIP_DOMAIN_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SIP_IP_ACCESS_CONTROL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIP_IP_ACCESS_CONTROL_LIST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_SIP_IP_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SIP_IP_ADDRESS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_TRANSCRIPTION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TRANSCRIPTION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_USAGE_RECORD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USAGE_RECORD_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_USAGE_RECORD_ALL_TIME_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USAGE_RECORD_ALL_TIME_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_USAGE_RECORD_DAILY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USAGE_RECORD_DAILY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_USAGE_RECORD_LAST_MONTH_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USAGE_RECORD_LAST_MONTH_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_USAGE_RECORD_MONTHLY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USAGE_RECORD_MONTHLY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_USAGE_RECORD_THIS_MONTH_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USAGE_RECORD_THIS_MONTH_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_USAGE_RECORD_TODAY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USAGE_RECORD_TODAY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_USAGE_RECORD_YEARLY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USAGE_RECORD_YEARLY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_USAGE_RECORD_YESTERDAY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USAGE_RECORD_YESTERDAY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * LIST_USAGE_TRIGGER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_USAGE_TRIGGER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_ACCOUNT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ACCOUNT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ADDRESS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_APPLICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_APPLICATION_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_CALL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CALL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_CALL_FEEDBACK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CALL_FEEDBACK_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_CALL_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CALL_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_CONFERENCE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONFERENCE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_CONFERENCE_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONFERENCE_RECORDING_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_CONNECT_APP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONNECT_APP_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_INCOMING_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_INCOMING_PHONE_NUMBER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_KEY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_MEMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_MEMBER_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_MESSAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_MESSAGE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_OUTGOING_CALLER_ID_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_OUTGOING_CALLER_ID_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_PARTICIPANT_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_PAYMENTS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_PAYMENTS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_QUEUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_QUEUE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SHORT_CODE_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_SIGNING_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SIGNING_KEY_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_SIP_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SIP_CREDENTIAL_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_SIP_CREDENTIAL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SIP_CREDENTIAL_LIST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_SIP_DOMAIN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SIP_DOMAIN_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_SIP_IP_ADDRESS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SIP_IP_ADDRESS_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_SIPREC_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SIPREC_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_STREAM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_STREAM_SERVERS = {
        "https://api.twilio.com",
    };
	
    /**
	 * UPDATE_USAGE_TRIGGER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_USAGE_TRIGGER_SERVERS = {
        "https://api.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Create a new Twilio Subaccount from the account making the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateAccountResponse createAccount(org.openapis.openapi.models.operations.CreateAccountRequest request) throws Exception {
        String baseUrl = CREATE_ACCOUNT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/2010-04-01/Accounts.json");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateAccountResponse res = new org.openapis.openapi.models.operations.CreateAccountResponse() {{
            apiV2010Account = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010Account out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010Account.class);
                res.apiV2010Account = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateAddressResponse createAddress(org.openapis.openapi.models.operations.CreateAddressRequest request) throws Exception {
        String baseUrl = CREATE_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateAddressPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Addresses.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateAddressResponse res = new org.openapis.openapi.models.operations.CreateAddressResponse() {{
            apiV2010AccountAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountAddress.class);
                res.apiV2010AccountAddress = out;
            }
        }

        return res;
    }

    /**
     * Create a new application within your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateApplicationResponse createApplication(org.openapis.openapi.models.operations.CreateApplicationRequest request) throws Exception {
        String baseUrl = CREATE_APPLICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateApplicationPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Applications.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateApplicationResponse res = new org.openapis.openapi.models.operations.CreateApplicationResponse() {{
            apiV2010AccountApplication = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountApplication out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountApplication.class);
                res.apiV2010AccountApplication = out;
            }
        }

        return res;
    }

    /**
     * Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateCallResponse createCall(org.openapis.openapi.models.operations.CreateCallRequest request) throws Exception {
        String baseUrl = CREATE_CALL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateCallPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCallResponse res = new org.openapis.openapi.models.operations.CreateCallResponse() {{
            apiV2010AccountCall = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCall out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCall.class);
                res.apiV2010AccountCall = out;
            }
        }

        return res;
    }

    /**
     * Create a FeedbackSummary resource for a call
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateCallFeedbackSummaryResponse createCallFeedbackSummary(org.openapis.openapi.models.operations.CreateCallFeedbackSummaryRequest request) throws Exception {
        String baseUrl = CREATE_CALL_FEEDBACK_SUMMARY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateCallFeedbackSummaryPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCallFeedbackSummaryResponse res = new org.openapis.openapi.models.operations.CreateCallFeedbackSummaryResponse() {{
            apiV2010AccountCallCallFeedbackSummary = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallCallFeedbackSummary out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallCallFeedbackSummary.class);
                res.apiV2010AccountCallCallFeedbackSummary = out;
            }
        }

        return res;
    }

    /**
     * Create a recording for the call
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateCallRecordingResponse createCallRecording(org.openapis.openapi.models.operations.CreateCallRecordingRequest request) throws Exception {
        String baseUrl = CREATE_CALL_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateCallRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCallRecordingResponse res = new org.openapis.openapi.models.operations.CreateCallRecordingResponse() {{
            apiV2010AccountCallCallRecording = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallCallRecording out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallCallRecording.class);
                res.apiV2010AccountCallCallRecording = out;
            }
        }

        return res;
    }

    /**
     * Purchase a phone-number for the account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateIncomingPhoneNumberResponse createIncomingPhoneNumber(org.openapis.openapi.models.operations.CreateIncomingPhoneNumberRequest request) throws Exception {
        String baseUrl = CREATE_INCOMING_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateIncomingPhoneNumberPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateIncomingPhoneNumberResponse res = new org.openapis.openapi.models.operations.CreateIncomingPhoneNumberResponse() {{
            apiV2010AccountIncomingPhoneNumber = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumber.class);
                res.apiV2010AccountIncomingPhoneNumber = out;
            }
        }

        return res;
    }

    /**
     * Assign an Add-on installation to the Number specified.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateIncomingPhoneNumberAssignedAddOnResponse createIncomingPhoneNumberAssignedAddOn(org.openapis.openapi.models.operations.CreateIncomingPhoneNumberAssignedAddOnRequest request) throws Exception {
        String baseUrl = CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateIncomingPhoneNumberAssignedAddOnPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateIncomingPhoneNumberAssignedAddOnResponse res = new org.openapis.openapi.models.operations.CreateIncomingPhoneNumberAssignedAddOnResponse() {{
            apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn.class);
                res.apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateIncomingPhoneNumberLocalResponse createIncomingPhoneNumberLocal(org.openapis.openapi.models.operations.CreateIncomingPhoneNumberLocalRequest request) throws Exception {
        String baseUrl = CREATE_INCOMING_PHONE_NUMBER_LOCAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateIncomingPhoneNumberLocalPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateIncomingPhoneNumberLocalResponse res = new org.openapis.openapi.models.operations.CreateIncomingPhoneNumberLocalResponse() {{
            apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal.class);
                res.apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateIncomingPhoneNumberMobileResponse createIncomingPhoneNumberMobile(org.openapis.openapi.models.operations.CreateIncomingPhoneNumberMobileRequest request) throws Exception {
        String baseUrl = CREATE_INCOMING_PHONE_NUMBER_MOBILE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateIncomingPhoneNumberMobilePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateIncomingPhoneNumberMobileResponse res = new org.openapis.openapi.models.operations.CreateIncomingPhoneNumberMobileResponse() {{
            apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile.class);
                res.apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateIncomingPhoneNumberTollFreeResponse createIncomingPhoneNumberTollFree(org.openapis.openapi.models.operations.CreateIncomingPhoneNumberTollFreeRequest request) throws Exception {
        String baseUrl = CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateIncomingPhoneNumberTollFreePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateIncomingPhoneNumberTollFreeResponse res = new org.openapis.openapi.models.operations.CreateIncomingPhoneNumberTollFreeResponse() {{
            apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree.class);
                res.apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree = out;
            }
        }

        return res;
    }

    /**
     * Send a message from the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateMessageResponse createMessage(org.openapis.openapi.models.operations.CreateMessageRequest request) throws Exception {
        String baseUrl = CREATE_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateMessagePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Messages.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateMessageResponse res = new org.openapis.openapi.models.operations.CreateMessageResponse() {{
            apiV2010AccountMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountMessage.class);
                res.apiV2010AccountMessage = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateMessageFeedbackResponse createMessageFeedback(org.openapis.openapi.models.operations.CreateMessageFeedbackRequest request) throws Exception {
        String baseUrl = CREATE_MESSAGE_FEEDBACK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateMessageFeedbackPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Feedback.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateMessageFeedbackResponse res = new org.openapis.openapi.models.operations.CreateMessageFeedbackResponse() {{
            apiV2010AccountMessageMessageFeedback = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountMessageMessageFeedback out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountMessageMessageFeedback.class);
                res.apiV2010AccountMessageMessageFeedback = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateNewKeyResponse createNewKey(org.openapis.openapi.models.operations.CreateNewKeyRequest request) throws Exception {
        String baseUrl = CREATE_NEW_KEY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNewKeyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Keys.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNewKeyResponse res = new org.openapis.openapi.models.operations.CreateNewKeyResponse() {{
            apiV2010AccountNewKey = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountNewKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountNewKey.class);
                res.apiV2010AccountNewKey = out;
            }
        }

        return res;
    }

    /**
     * Create a new Signing Key for the account making the request.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateNewSigningKeyResponse createNewSigningKey(org.openapis.openapi.models.operations.CreateNewSigningKeyRequest request) throws Exception {
        String baseUrl = CREATE_NEW_SIGNING_KEY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNewSigningKeyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SigningKeys.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNewSigningKeyResponse res = new org.openapis.openapi.models.operations.CreateNewSigningKeyResponse() {{
            apiV2010AccountNewSigningKey = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountNewSigningKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountNewSigningKey.class);
                res.apiV2010AccountNewSigningKey = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateParticipantResponse createParticipant(org.openapis.openapi.models.operations.CreateParticipantRequest request) throws Exception {
        String baseUrl = CREATE_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateParticipantPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateParticipantResponse res = new org.openapis.openapi.models.operations.CreateParticipantResponse() {{
            apiV2010AccountConferenceParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountConferenceParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountConferenceParticipant.class);
                res.apiV2010AccountConferenceParticipant = out;
            }
        }

        return res;
    }

    /**
     * create an instance of payments. This will start a new payments session
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreatePaymentsResponse createPayments(org.openapis.openapi.models.operations.CreatePaymentsRequest request) throws Exception {
        String baseUrl = CREATE_PAYMENTS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreatePaymentsPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreatePaymentsResponse res = new org.openapis.openapi.models.operations.CreatePaymentsResponse() {{
            apiV2010AccountCallPayments = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallPayments out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallPayments.class);
                res.apiV2010AccountCallPayments = out;
            }
        }

        return res;
    }

    /**
     * Create a queue
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateQueueResponse createQueue(org.openapis.openapi.models.operations.CreateQueueRequest request) throws Exception {
        String baseUrl = CREATE_QUEUE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateQueuePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Queues.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateQueueResponse res = new org.openapis.openapi.models.operations.CreateQueueResponse() {{
            apiV2010AccountQueue = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountQueue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountQueue.class);
                res.apiV2010AccountQueue = out;
            }
        }

        return res;
    }

    /**
     * Create a new credential list mapping resource
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSipAuthCallsCredentialListMappingResponse createSipAuthCallsCredentialListMapping(org.openapis.openapi.models.operations.CreateSipAuthCallsCredentialListMappingRequest request) throws Exception {
        String baseUrl = CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSipAuthCallsCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSipAuthCallsCredentialListMappingResponse res = new org.openapis.openapi.models.operations.CreateSipAuthCallsCredentialListMappingResponse() {{
            apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping.class);
                res.apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping = out;
            }
        }

        return res;
    }

    /**
     * Create a new IP Access Control List mapping
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSipAuthCallsIpAccessControlListMappingResponse createSipAuthCallsIpAccessControlListMapping(org.openapis.openapi.models.operations.CreateSipAuthCallsIpAccessControlListMappingRequest request) throws Exception {
        String baseUrl = CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSipAuthCallsIpAccessControlListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSipAuthCallsIpAccessControlListMappingResponse res = new org.openapis.openapi.models.operations.CreateSipAuthCallsIpAccessControlListMappingResponse() {{
            apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping.class);
                res.apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping = out;
            }
        }

        return res;
    }

    /**
     * Create a new credential list mapping resource
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSipAuthRegistrationsCredentialListMappingResponse createSipAuthRegistrationsCredentialListMapping(org.openapis.openapi.models.operations.CreateSipAuthRegistrationsCredentialListMappingRequest request) throws Exception {
        String baseUrl = CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSipAuthRegistrationsCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSipAuthRegistrationsCredentialListMappingResponse res = new org.openapis.openapi.models.operations.CreateSipAuthRegistrationsCredentialListMappingResponse() {{
            apiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping.class);
                res.apiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping = out;
            }
        }

        return res;
    }

    /**
     * Create a new credential resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSipCredentialResponse createSipCredential(org.openapis.openapi.models.operations.CreateSipCredentialRequest request) throws Exception {
        String baseUrl = CREATE_SIP_CREDENTIAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSipCredentialPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSipCredentialResponse res = new org.openapis.openapi.models.operations.CreateSipCredentialResponse() {{
            apiV2010AccountSipSipCredentialListSipCredential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialListSipCredential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialListSipCredential.class);
                res.apiV2010AccountSipSipCredentialListSipCredential = out;
            }
        }

        return res;
    }

    /**
     * Create a Credential List
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSipCredentialListResponse createSipCredentialList(org.openapis.openapi.models.operations.CreateSipCredentialListRequest request) throws Exception {
        String baseUrl = CREATE_SIP_CREDENTIAL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSipCredentialListPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSipCredentialListResponse res = new org.openapis.openapi.models.operations.CreateSipCredentialListResponse() {{
            apiV2010AccountSipSipCredentialList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialList.class);
                res.apiV2010AccountSipSipCredentialList = out;
            }
        }

        return res;
    }

    /**
     * Create a CredentialListMapping resource for an account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSipCredentialListMappingResponse createSipCredentialListMapping(org.openapis.openapi.models.operations.CreateSipCredentialListMappingRequest request) throws Exception {
        String baseUrl = CREATE_SIP_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSipCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSipCredentialListMappingResponse res = new org.openapis.openapi.models.operations.CreateSipCredentialListMappingResponse() {{
            apiV2010AccountSipSipDomainSipCredentialListMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipCredentialListMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipCredentialListMapping.class);
                res.apiV2010AccountSipSipDomainSipCredentialListMapping = out;
            }
        }

        return res;
    }

    /**
     * Create a new Domain
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSipDomainResponse createSipDomain(org.openapis.openapi.models.operations.CreateSipDomainRequest request) throws Exception {
        String baseUrl = CREATE_SIP_DOMAIN_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSipDomainPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSipDomainResponse res = new org.openapis.openapi.models.operations.CreateSipDomainResponse() {{
            apiV2010AccountSipSipDomain = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomain out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomain.class);
                res.apiV2010AccountSipSipDomain = out;
            }
        }

        return res;
    }

    /**
     * Create a new IpAccessControlList resource
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSipIpAccessControlListResponse createSipIpAccessControlList(org.openapis.openapi.models.operations.CreateSipIpAccessControlListRequest request) throws Exception {
        String baseUrl = CREATE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSipIpAccessControlListPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSipIpAccessControlListResponse res = new org.openapis.openapi.models.operations.CreateSipIpAccessControlListResponse() {{
            apiV2010AccountSipSipIpAccessControlList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlList.class);
                res.apiV2010AccountSipSipIpAccessControlList = out;
            }
        }

        return res;
    }

    /**
     * Create a new IpAccessControlListMapping resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSipIpAccessControlListMappingResponse createSipIpAccessControlListMapping(org.openapis.openapi.models.operations.CreateSipIpAccessControlListMappingRequest request) throws Exception {
        String baseUrl = CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSipIpAccessControlListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSipIpAccessControlListMappingResponse res = new org.openapis.openapi.models.operations.CreateSipIpAccessControlListMappingResponse() {{
            apiV2010AccountSipSipDomainSipIpAccessControlListMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipIpAccessControlListMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipIpAccessControlListMapping.class);
                res.apiV2010AccountSipSipDomainSipIpAccessControlListMapping = out;
            }
        }

        return res;
    }

    /**
     * Create a new IpAddress resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSipIpAddressResponse createSipIpAddress(org.openapis.openapi.models.operations.CreateSipIpAddressRequest request) throws Exception {
        String baseUrl = CREATE_SIP_IP_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSipIpAddressPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSipIpAddressResponse res = new org.openapis.openapi.models.operations.CreateSipIpAddressResponse() {{
            apiV2010AccountSipSipIpAccessControlListSipIpAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlListSipIpAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlListSipIpAddress.class);
                res.apiV2010AccountSipSipIpAccessControlListSipIpAddress = out;
            }
        }

        return res;
    }

    /**
     * Create a Siprec
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSiprecResponse createSiprec(org.openapis.openapi.models.operations.CreateSiprecRequest request) throws Exception {
        String baseUrl = CREATE_SIPREC_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSiprecPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSiprecResponse res = new org.openapis.openapi.models.operations.CreateSiprecResponse() {{
            apiV2010AccountCallSiprec = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallSiprec out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallSiprec.class);
                res.apiV2010AccountCallSiprec = out;
            }
        }

        return res;
    }

    /**
     * Create a Stream
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateStreamResponse createStream(org.openapis.openapi.models.operations.CreateStreamRequest request) throws Exception {
        String baseUrl = CREATE_STREAM_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateStreamPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Streams.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateStreamResponse res = new org.openapis.openapi.models.operations.CreateStreamResponse() {{
            apiV2010AccountCallStream = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallStream out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallStream.class);
                res.apiV2010AccountCallStream = out;
            }
        }

        return res;
    }

    /**
     * Create a new token for ICE servers
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateTokenResponse createToken(org.openapis.openapi.models.operations.CreateTokenRequest request) throws Exception {
        String baseUrl = CREATE_TOKEN_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateTokenPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Tokens.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTokenResponse res = new org.openapis.openapi.models.operations.CreateTokenResponse() {{
            apiV2010AccountToken = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountToken out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountToken.class);
                res.apiV2010AccountToken = out;
            }
        }

        return res;
    }

    /**
     * Create a new UsageTrigger
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateUsageTriggerResponse createUsageTrigger(org.openapis.openapi.models.operations.CreateUsageTriggerRequest request) throws Exception {
        String baseUrl = CREATE_USAGE_TRIGGER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUsageTriggerPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUsageTriggerResponse res = new org.openapis.openapi.models.operations.CreateUsageTriggerResponse() {{
            apiV2010AccountUsageUsageTrigger = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountUsageUsageTrigger out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountUsageUsageTrigger.class);
                res.apiV2010AccountUsageUsageTrigger = out;
            }
        }

        return res;
    }

    /**
     * Create a new User Defined Message for the given Call SID.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateUserDefinedMessageResponse createUserDefinedMessage(org.openapis.openapi.models.operations.CreateUserDefinedMessageRequest request) throws Exception {
        String baseUrl = CREATE_USER_DEFINED_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUserDefinedMessagePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessages.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUserDefinedMessageResponse res = new org.openapis.openapi.models.operations.CreateUserDefinedMessageResponse() {{
            apiV2010AccountCallUserDefinedMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallUserDefinedMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallUserDefinedMessage.class);
                res.apiV2010AccountCallUserDefinedMessage = out;
            }
        }

        return res;
    }

    /**
     * Subscribe to User Defined Messages for a given Call SID.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateUserDefinedMessageSubscriptionResponse createUserDefinedMessageSubscription(org.openapis.openapi.models.operations.CreateUserDefinedMessageSubscriptionRequest request) throws Exception {
        String baseUrl = CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUserDefinedMessageSubscriptionPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUserDefinedMessageSubscriptionResponse res = new org.openapis.openapi.models.operations.CreateUserDefinedMessageSubscriptionResponse() {{
            apiV2010AccountCallUserDefinedMessageSubscription = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallUserDefinedMessageSubscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallUserDefinedMessageSubscription.class);
                res.apiV2010AccountCallUserDefinedMessageSubscription = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateValidationRequestResponse createValidationRequest(org.openapis.openapi.models.operations.CreateValidationRequestRequest request) throws Exception {
        String baseUrl = CREATE_VALIDATION_REQUEST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateValidationRequestPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateValidationRequestResponse res = new org.openapis.openapi.models.operations.CreateValidationRequestResponse() {{
            apiV2010AccountValidationRequest = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountValidationRequest out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountValidationRequest.class);
                res.apiV2010AccountValidationRequest = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteAddressResponse deleteAddress(org.openapis.openapi.models.operations.DeleteAddressRequest request) throws Exception {
        String baseUrl = DELETE_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteAddressPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteAddressResponse res = new org.openapis.openapi.models.operations.DeleteAddressResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete the application by the specified application sid
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteApplicationResponse deleteApplication(org.openapis.openapi.models.operations.DeleteApplicationRequest request) throws Exception {
        String baseUrl = DELETE_APPLICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteApplicationPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteApplicationResponse res = new org.openapis.openapi.models.operations.DeleteApplicationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCallResponse deleteCall(org.openapis.openapi.models.operations.DeleteCallRequest request) throws Exception {
        String baseUrl = DELETE_CALL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCallPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCallResponse res = new org.openapis.openapi.models.operations.DeleteCallResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a FeedbackSummary resource from a call
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCallFeedbackSummaryResponse deleteCallFeedbackSummary(org.openapis.openapi.models.operations.DeleteCallFeedbackSummaryRequest request) throws Exception {
        String baseUrl = DELETE_CALL_FEEDBACK_SUMMARY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCallFeedbackSummaryPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCallFeedbackSummaryResponse res = new org.openapis.openapi.models.operations.DeleteCallFeedbackSummaryResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a recording from your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCallRecordingResponse deleteCallRecording(org.openapis.openapi.models.operations.DeleteCallRecordingRequest request) throws Exception {
        String baseUrl = DELETE_CALL_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCallRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCallRecordingResponse res = new org.openapis.openapi.models.operations.DeleteCallRecordingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a recording from your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConferenceRecordingResponse deleteConferenceRecording(org.openapis.openapi.models.operations.DeleteConferenceRecordingRequest request) throws Exception {
        String baseUrl = DELETE_CONFERENCE_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConferenceRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConferenceRecordingResponse res = new org.openapis.openapi.models.operations.DeleteConferenceRecordingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete an instance of a connect-app
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteConnectAppResponse deleteConnectApp(org.openapis.openapi.models.operations.DeleteConnectAppRequest request) throws Exception {
        String baseUrl = DELETE_CONNECT_APP_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConnectAppPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConnectAppResponse res = new org.openapis.openapi.models.operations.DeleteConnectAppResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a phone-numbers belonging to the account used to make the request.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteIncomingPhoneNumberResponse deleteIncomingPhoneNumber(org.openapis.openapi.models.operations.DeleteIncomingPhoneNumberRequest request) throws Exception {
        String baseUrl = DELETE_INCOMING_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteIncomingPhoneNumberPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteIncomingPhoneNumberResponse res = new org.openapis.openapi.models.operations.DeleteIncomingPhoneNumberResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove the assignment of an Add-on installation from the Number specified.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteIncomingPhoneNumberAssignedAddOnResponse deleteIncomingPhoneNumberAssignedAddOn(org.openapis.openapi.models.operations.DeleteIncomingPhoneNumberAssignedAddOnRequest request) throws Exception {
        String baseUrl = DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteIncomingPhoneNumberAssignedAddOnPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteIncomingPhoneNumberAssignedAddOnResponse res = new org.openapis.openapi.models.operations.DeleteIncomingPhoneNumberAssignedAddOnResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteKeyResponse deleteKey(org.openapis.openapi.models.operations.DeleteKeyRequest request) throws Exception {
        String baseUrl = DELETE_KEY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteKeyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteKeyResponse res = new org.openapis.openapi.models.operations.DeleteKeyResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete media from your account. Once delete, you will no longer be billed
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteMediaResponse deleteMedia(org.openapis.openapi.models.operations.DeleteMediaRequest request) throws Exception {
        String baseUrl = DELETE_MEDIA_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteMediaPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteMediaResponse res = new org.openapis.openapi.models.operations.DeleteMediaResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Deletes a message record from your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteMessageResponse deleteMessage(org.openapis.openapi.models.operations.DeleteMessageRequest request) throws Exception {
        String baseUrl = DELETE_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteMessagePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteMessageResponse res = new org.openapis.openapi.models.operations.DeleteMessageResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete the caller-id specified from the account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteOutgoingCallerIdResponse deleteOutgoingCallerId(org.openapis.openapi.models.operations.DeleteOutgoingCallerIdRequest request) throws Exception {
        String baseUrl = DELETE_OUTGOING_CALLER_ID_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteOutgoingCallerIdPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteOutgoingCallerIdResponse res = new org.openapis.openapi.models.operations.DeleteOutgoingCallerIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Kick a participant from a given conference
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteParticipantResponse deleteParticipant(org.openapis.openapi.models.operations.DeleteParticipantRequest request) throws Exception {
        String baseUrl = DELETE_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteParticipantPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteParticipantResponse res = new org.openapis.openapi.models.operations.DeleteParticipantResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove an empty queue
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteQueueResponse deleteQueue(org.openapis.openapi.models.operations.DeleteQueueRequest request) throws Exception {
        String baseUrl = DELETE_QUEUE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteQueuePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteQueueResponse res = new org.openapis.openapi.models.operations.DeleteQueueResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a recording from your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRecordingResponse deleteRecording(org.openapis.openapi.models.operations.DeleteRecordingRequest request) throws Exception {
        String baseUrl = DELETE_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRecordingResponse res = new org.openapis.openapi.models.operations.DeleteRecordingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a result and purge all associated Payloads
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRecordingAddOnResultResponse deleteRecordingAddOnResult(org.openapis.openapi.models.operations.DeleteRecordingAddOnResultRequest request) throws Exception {
        String baseUrl = DELETE_RECORDING_ADD_ON_RESULT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRecordingAddOnResultPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRecordingAddOnResultResponse res = new org.openapis.openapi.models.operations.DeleteRecordingAddOnResultResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a payload from the result along with all associated Data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRecordingAddOnResultPayloadResponse deleteRecordingAddOnResultPayload(org.openapis.openapi.models.operations.DeleteRecordingAddOnResultPayloadRequest request) throws Exception {
        String baseUrl = DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRecordingAddOnResultPayloadPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRecordingAddOnResultPayloadResponse res = new org.openapis.openapi.models.operations.DeleteRecordingAddOnResultPayloadResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteRecordingTranscriptionResponse deleteRecordingTranscription(org.openapis.openapi.models.operations.DeleteRecordingTranscriptionRequest request) throws Exception {
        String baseUrl = DELETE_RECORDING_TRANSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRecordingTranscriptionPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRecordingTranscriptionResponse res = new org.openapis.openapi.models.operations.DeleteRecordingTranscriptionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSigningKeyResponse deleteSigningKey(org.openapis.openapi.models.operations.DeleteSigningKeyRequest request) throws Exception {
        String baseUrl = DELETE_SIGNING_KEY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSigningKeyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSigningKeyResponse res = new org.openapis.openapi.models.operations.DeleteSigningKeyResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a credential list mapping from the requested domain
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSipAuthCallsCredentialListMappingResponse deleteSipAuthCallsCredentialListMapping(org.openapis.openapi.models.operations.DeleteSipAuthCallsCredentialListMappingRequest request) throws Exception {
        String baseUrl = DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSipAuthCallsCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSipAuthCallsCredentialListMappingResponse res = new org.openapis.openapi.models.operations.DeleteSipAuthCallsCredentialListMappingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete an IP Access Control List mapping from the requested domain
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSipAuthCallsIpAccessControlListMappingResponse deleteSipAuthCallsIpAccessControlListMapping(org.openapis.openapi.models.operations.DeleteSipAuthCallsIpAccessControlListMappingRequest request) throws Exception {
        String baseUrl = DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSipAuthCallsIpAccessControlListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSipAuthCallsIpAccessControlListMappingResponse res = new org.openapis.openapi.models.operations.DeleteSipAuthCallsIpAccessControlListMappingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a credential list mapping from the requested domain
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSipAuthRegistrationsCredentialListMappingResponse deleteSipAuthRegistrationsCredentialListMapping(org.openapis.openapi.models.operations.DeleteSipAuthRegistrationsCredentialListMappingRequest request) throws Exception {
        String baseUrl = DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSipAuthRegistrationsCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSipAuthRegistrationsCredentialListMappingResponse res = new org.openapis.openapi.models.operations.DeleteSipAuthRegistrationsCredentialListMappingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a credential resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSipCredentialResponse deleteSipCredential(org.openapis.openapi.models.operations.DeleteSipCredentialRequest request) throws Exception {
        String baseUrl = DELETE_SIP_CREDENTIAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSipCredentialPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSipCredentialResponse res = new org.openapis.openapi.models.operations.DeleteSipCredentialResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Credential List
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSipCredentialListResponse deleteSipCredentialList(org.openapis.openapi.models.operations.DeleteSipCredentialListRequest request) throws Exception {
        String baseUrl = DELETE_SIP_CREDENTIAL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSipCredentialListPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSipCredentialListResponse res = new org.openapis.openapi.models.operations.DeleteSipCredentialListResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a CredentialListMapping resource from an account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSipCredentialListMappingResponse deleteSipCredentialListMapping(org.openapis.openapi.models.operations.DeleteSipCredentialListMappingRequest request) throws Exception {
        String baseUrl = DELETE_SIP_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSipCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSipCredentialListMappingResponse res = new org.openapis.openapi.models.operations.DeleteSipCredentialListMappingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete an instance of a Domain
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSipDomainResponse deleteSipDomain(org.openapis.openapi.models.operations.DeleteSipDomainRequest request) throws Exception {
        String baseUrl = DELETE_SIP_DOMAIN_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSipDomainPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSipDomainResponse res = new org.openapis.openapi.models.operations.DeleteSipDomainResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete an IpAccessControlList from the requested account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSipIpAccessControlListResponse deleteSipIpAccessControlList(org.openapis.openapi.models.operations.DeleteSipIpAccessControlListRequest request) throws Exception {
        String baseUrl = DELETE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSipIpAccessControlListPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSipIpAccessControlListResponse res = new org.openapis.openapi.models.operations.DeleteSipIpAccessControlListResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete an IpAccessControlListMapping resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSipIpAccessControlListMappingResponse deleteSipIpAccessControlListMapping(org.openapis.openapi.models.operations.DeleteSipIpAccessControlListMappingRequest request) throws Exception {
        String baseUrl = DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSipIpAccessControlListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSipIpAccessControlListMappingResponse res = new org.openapis.openapi.models.operations.DeleteSipIpAccessControlListMappingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete an IpAddress resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSipIpAddressResponse deleteSipIpAddress(org.openapis.openapi.models.operations.DeleteSipIpAddressRequest request) throws Exception {
        String baseUrl = DELETE_SIP_IP_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSipIpAddressPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSipIpAddressResponse res = new org.openapis.openapi.models.operations.DeleteSipIpAddressResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a transcription from the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteTranscriptionResponse deleteTranscription(org.openapis.openapi.models.operations.DeleteTranscriptionRequest request) throws Exception {
        String baseUrl = DELETE_TRANSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteTranscriptionPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteTranscriptionResponse res = new org.openapis.openapi.models.operations.DeleteTranscriptionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUsageTriggerResponse deleteUsageTrigger(org.openapis.openapi.models.operations.DeleteUsageTriggerRequest request) throws Exception {
        String baseUrl = DELETE_USAGE_TRIGGER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUsageTriggerPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUsageTriggerResponse res = new org.openapis.openapi.models.operations.DeleteUsageTriggerResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific User Defined Message Subscription.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteUserDefinedMessageSubscriptionResponse deleteUserDefinedMessageSubscription(org.openapis.openapi.models.operations.DeleteUserDefinedMessageSubscriptionRequest request) throws Exception {
        String baseUrl = DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUserDefinedMessageSubscriptionPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUserDefinedMessageSubscriptionResponse res = new org.openapis.openapi.models.operations.DeleteUserDefinedMessageSubscriptionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Fetch the account specified by the provided Account Sid
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAccountResponse fetchAccount(org.openapis.openapi.models.operations.FetchAccountRequest request) throws Exception {
        String baseUrl = FETCH_ACCOUNT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAccountPathParams.class, baseUrl, "/2010-04-01/Accounts/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAccountResponse res = new org.openapis.openapi.models.operations.FetchAccountResponse() {{
            apiV2010Account = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010Account out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010Account.class);
                res.apiV2010Account = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchAddressResponse fetchAddress(org.openapis.openapi.models.operations.FetchAddressRequest request) throws Exception {
        String baseUrl = FETCH_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAddressPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAddressResponse res = new org.openapis.openapi.models.operations.FetchAddressResponse() {{
            apiV2010AccountAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountAddress.class);
                res.apiV2010AccountAddress = out;
            }
        }

        return res;
    }

    /**
     * Fetch the application specified by the provided sid
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchApplicationResponse fetchApplication(org.openapis.openapi.models.operations.FetchApplicationRequest request) throws Exception {
        String baseUrl = FETCH_APPLICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchApplicationPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchApplicationResponse res = new org.openapis.openapi.models.operations.FetchApplicationResponse() {{
            apiV2010AccountApplication = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountApplication out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountApplication.class);
                res.apiV2010AccountApplication = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of an authorized-connect-app
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAuthorizedConnectAppResponse fetchAuthorizedConnectApp(org.openapis.openapi.models.operations.FetchAuthorizedConnectAppRequest request) throws Exception {
        String baseUrl = FETCH_AUTHORIZED_CONNECT_APP_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAuthorizedConnectAppPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps/{ConnectAppSid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAuthorizedConnectAppResponse res = new org.openapis.openapi.models.operations.FetchAuthorizedConnectAppResponse() {{
            apiV2010AccountAuthorizedConnectApp = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountAuthorizedConnectApp out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountAuthorizedConnectApp.class);
                res.apiV2010AccountAuthorizedConnectApp = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchAvailablePhoneNumberCountryResponse fetchAvailablePhoneNumberCountry(org.openapis.openapi.models.operations.FetchAvailablePhoneNumberCountryRequest request) throws Exception {
        String baseUrl = FETCH_AVAILABLE_PHONE_NUMBER_COUNTRY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAvailablePhoneNumberCountryPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAvailablePhoneNumberCountryResponse res = new org.openapis.openapi.models.operations.FetchAvailablePhoneNumberCountryResponse() {{
            apiV2010AccountAvailablePhoneNumberCountry = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountAvailablePhoneNumberCountry out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountAvailablePhoneNumberCountry.class);
                res.apiV2010AccountAvailablePhoneNumberCountry = out;
            }
        }

        return res;
    }

    /**
     * Fetch the balance for an Account based on Account Sid. Balance changes may not be reflected immediately. Child accounts do not contain balance information
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchBalanceResponse fetchBalance(org.openapis.openapi.models.operations.FetchBalanceRequest request) throws Exception {
        String baseUrl = FETCH_BALANCE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchBalancePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Balance.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchBalanceResponse res = new org.openapis.openapi.models.operations.FetchBalanceResponse() {{
            apiV2010AccountBalance = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountBalance out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountBalance.class);
                res.apiV2010AccountBalance = out;
            }
        }

        return res;
    }

    /**
     * Fetch the call specified by the provided Call SID
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCallResponse fetchCall(org.openapis.openapi.models.operations.FetchCallRequest request) throws Exception {
        String baseUrl = FETCH_CALL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCallPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCallResponse res = new org.openapis.openapi.models.operations.FetchCallResponse() {{
            apiV2010AccountCall = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCall out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCall.class);
                res.apiV2010AccountCall = out;
            }
        }

        return res;
    }

    /**
     * Fetch a Feedback resource from a call
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCallFeedbackResponse fetchCallFeedback(org.openapis.openapi.models.operations.FetchCallFeedbackRequest request) throws Exception {
        String baseUrl = FETCH_CALL_FEEDBACK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCallFeedbackPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCallFeedbackResponse res = new org.openapis.openapi.models.operations.FetchCallFeedbackResponse() {{
            apiV2010AccountCallCallFeedback = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallCallFeedback out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallCallFeedback.class);
                res.apiV2010AccountCallCallFeedback = out;
            }
        }

        return res;
    }

    /**
     * Fetch a FeedbackSummary resource from a call
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCallFeedbackSummaryResponse fetchCallFeedbackSummary(org.openapis.openapi.models.operations.FetchCallFeedbackSummaryRequest request) throws Exception {
        String baseUrl = FETCH_CALL_FEEDBACK_SUMMARY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCallFeedbackSummaryPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCallFeedbackSummaryResponse res = new org.openapis.openapi.models.operations.FetchCallFeedbackSummaryResponse() {{
            apiV2010AccountCallCallFeedbackSummary = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallCallFeedbackSummary out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallCallFeedbackSummary.class);
                res.apiV2010AccountCallCallFeedbackSummary = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchCallNotificationResponse fetchCallNotification(org.openapis.openapi.models.operations.FetchCallNotificationRequest request) throws Exception {
        String baseUrl = FETCH_CALL_NOTIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCallNotificationPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCallNotificationResponse res = new org.openapis.openapi.models.operations.FetchCallNotificationResponse() {{
            apiV2010AccountCallCallNotificationInstance = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallCallNotificationInstance out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallCallNotificationInstance.class);
                res.apiV2010AccountCallCallNotificationInstance = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of a recording for a call
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCallRecordingResponse fetchCallRecording(org.openapis.openapi.models.operations.FetchCallRecordingRequest request) throws Exception {
        String baseUrl = FETCH_CALL_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCallRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCallRecordingResponse res = new org.openapis.openapi.models.operations.FetchCallRecordingResponse() {{
            apiV2010AccountCallCallRecording = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallCallRecording out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallCallRecording.class);
                res.apiV2010AccountCallCallRecording = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of a conference
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConferenceResponse fetchConference(org.openapis.openapi.models.operations.FetchConferenceRequest request) throws Exception {
        String baseUrl = FETCH_CONFERENCE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConferencePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConferenceResponse res = new org.openapis.openapi.models.operations.FetchConferenceResponse() {{
            apiV2010AccountConference = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountConference out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountConference.class);
                res.apiV2010AccountConference = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of a recording for a call
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConferenceRecordingResponse fetchConferenceRecording(org.openapis.openapi.models.operations.FetchConferenceRecordingRequest request) throws Exception {
        String baseUrl = FETCH_CONFERENCE_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConferenceRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConferenceRecordingResponse res = new org.openapis.openapi.models.operations.FetchConferenceRecordingResponse() {{
            apiV2010AccountConferenceConferenceRecording = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountConferenceConferenceRecording out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountConferenceConferenceRecording.class);
                res.apiV2010AccountConferenceConferenceRecording = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of a connect-app
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchConnectAppResponse fetchConnectApp(org.openapis.openapi.models.operations.FetchConnectAppRequest request) throws Exception {
        String baseUrl = FETCH_CONNECT_APP_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConnectAppPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConnectAppResponse res = new org.openapis.openapi.models.operations.FetchConnectAppResponse() {{
            apiV2010AccountConnectApp = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountConnectApp out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountConnectApp.class);
                res.apiV2010AccountConnectApp = out;
            }
        }

        return res;
    }

    /**
     * Fetch an incoming-phone-number belonging to the account used to make the request.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchIncomingPhoneNumberResponse fetchIncomingPhoneNumber(org.openapis.openapi.models.operations.FetchIncomingPhoneNumberRequest request) throws Exception {
        String baseUrl = FETCH_INCOMING_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchIncomingPhoneNumberPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchIncomingPhoneNumberResponse res = new org.openapis.openapi.models.operations.FetchIncomingPhoneNumberResponse() {{
            apiV2010AccountIncomingPhoneNumber = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumber.class);
                res.apiV2010AccountIncomingPhoneNumber = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of an Add-on installation currently assigned to this Number.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchIncomingPhoneNumberAssignedAddOnResponse fetchIncomingPhoneNumberAssignedAddOn(org.openapis.openapi.models.operations.FetchIncomingPhoneNumberAssignedAddOnRequest request) throws Exception {
        String baseUrl = FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchIncomingPhoneNumberAssignedAddOnPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchIncomingPhoneNumberAssignedAddOnResponse res = new org.openapis.openapi.models.operations.FetchIncomingPhoneNumberAssignedAddOnResponse() {{
            apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn.class);
                res.apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of an Extension for the Assigned Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchIncomingPhoneNumberAssignedAddOnExtensionResponse fetchIncomingPhoneNumberAssignedAddOnExtension(org.openapis.openapi.models.operations.FetchIncomingPhoneNumberAssignedAddOnExtensionRequest request) throws Exception {
        String baseUrl = FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchIncomingPhoneNumberAssignedAddOnExtensionPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchIncomingPhoneNumberAssignedAddOnExtensionResponse res = new org.openapis.openapi.models.operations.FetchIncomingPhoneNumberAssignedAddOnExtensionResponse() {{
            apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension.class);
                res.apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchKeyResponse fetchKey(org.openapis.openapi.models.operations.FetchKeyRequest request) throws Exception {
        String baseUrl = FETCH_KEY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchKeyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchKeyResponse res = new org.openapis.openapi.models.operations.FetchKeyResponse() {{
            apiV2010AccountKey = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountKey.class);
                res.apiV2010AccountKey = out;
            }
        }

        return res;
    }

    /**
     * Fetch a single media instance belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMediaResponse fetchMedia(org.openapis.openapi.models.operations.FetchMediaRequest request) throws Exception {
        String baseUrl = FETCH_MEDIA_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMediaPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMediaResponse res = new org.openapis.openapi.models.operations.FetchMediaResponse() {{
            apiV2010AccountMessageMedia = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountMessageMedia out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountMessageMedia.class);
                res.apiV2010AccountMessageMedia = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific member from the queue
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMemberResponse fetchMember(org.openapis.openapi.models.operations.FetchMemberRequest request) throws Exception {
        String baseUrl = FETCH_MEMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMemberPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMemberResponse res = new org.openapis.openapi.models.operations.FetchMemberResponse() {{
            apiV2010AccountQueueMember = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountQueueMember out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountQueueMember.class);
                res.apiV2010AccountQueueMember = out;
            }
        }

        return res;
    }

    /**
     * Fetch a message belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMessageResponse fetchMessage(org.openapis.openapi.models.operations.FetchMessageRequest request) throws Exception {
        String baseUrl = FETCH_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMessagePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMessageResponse res = new org.openapis.openapi.models.operations.FetchMessageResponse() {{
            apiV2010AccountMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountMessage.class);
                res.apiV2010AccountMessage = out;
            }
        }

        return res;
    }

    /**
     * Fetch a notification belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchNotificationResponse fetchNotification(org.openapis.openapi.models.operations.FetchNotificationRequest request) throws Exception {
        String baseUrl = FETCH_NOTIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchNotificationPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Notifications/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchNotificationResponse res = new org.openapis.openapi.models.operations.FetchNotificationResponse() {{
            apiV2010AccountNotificationInstance = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountNotificationInstance out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountNotificationInstance.class);
                res.apiV2010AccountNotificationInstance = out;
            }
        }

        return res;
    }

    /**
     * Fetch an outgoing-caller-id belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchOutgoingCallerIdResponse fetchOutgoingCallerId(org.openapis.openapi.models.operations.FetchOutgoingCallerIdRequest request) throws Exception {
        String baseUrl = FETCH_OUTGOING_CALLER_ID_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchOutgoingCallerIdPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchOutgoingCallerIdResponse res = new org.openapis.openapi.models.operations.FetchOutgoingCallerIdResponse() {{
            apiV2010AccountOutgoingCallerId = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountOutgoingCallerId out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountOutgoingCallerId.class);
                res.apiV2010AccountOutgoingCallerId = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of a participant
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchParticipantResponse fetchParticipant(org.openapis.openapi.models.operations.FetchParticipantRequest request) throws Exception {
        String baseUrl = FETCH_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchParticipantPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchParticipantResponse res = new org.openapis.openapi.models.operations.FetchParticipantResponse() {{
            apiV2010AccountConferenceParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountConferenceParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountConferenceParticipant.class);
                res.apiV2010AccountConferenceParticipant = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of a queue identified by the QueueSid
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchQueueResponse fetchQueue(org.openapis.openapi.models.operations.FetchQueueRequest request) throws Exception {
        String baseUrl = FETCH_QUEUE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchQueuePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchQueueResponse res = new org.openapis.openapi.models.operations.FetchQueueResponse() {{
            apiV2010AccountQueue = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountQueue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountQueue.class);
                res.apiV2010AccountQueue = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of a recording
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRecordingResponse fetchRecording(org.openapis.openapi.models.operations.FetchRecordingRequest request) throws Exception {
        String baseUrl = FETCH_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchRecordingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRecordingResponse res = new org.openapis.openapi.models.operations.FetchRecordingResponse() {{
            apiV2010AccountRecording = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountRecording out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountRecording.class);
                res.apiV2010AccountRecording = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of an AddOnResult
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRecordingAddOnResultResponse fetchRecordingAddOnResult(org.openapis.openapi.models.operations.FetchRecordingAddOnResultRequest request) throws Exception {
        String baseUrl = FETCH_RECORDING_ADD_ON_RESULT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRecordingAddOnResultPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRecordingAddOnResultResponse res = new org.openapis.openapi.models.operations.FetchRecordingAddOnResultResponse() {{
            apiV2010AccountRecordingRecordingAddOnResult = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountRecordingRecordingAddOnResult out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountRecordingRecordingAddOnResult.class);
                res.apiV2010AccountRecordingRecordingAddOnResult = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of a result payload
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRecordingAddOnResultPayloadResponse fetchRecordingAddOnResultPayload(org.openapis.openapi.models.operations.FetchRecordingAddOnResultPayloadRequest request) throws Exception {
        String baseUrl = FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRecordingAddOnResultPayloadPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRecordingAddOnResultPayloadResponse res = new org.openapis.openapi.models.operations.FetchRecordingAddOnResultPayloadResponse() {{
            apiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload.class);
                res.apiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchRecordingTranscriptionResponse fetchRecordingTranscription(org.openapis.openapi.models.operations.FetchRecordingTranscriptionRequest request) throws Exception {
        String baseUrl = FETCH_RECORDING_TRANSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRecordingTranscriptionPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRecordingTranscriptionResponse res = new org.openapis.openapi.models.operations.FetchRecordingTranscriptionResponse() {{
            apiV2010AccountRecordingRecordingTranscription = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountRecordingRecordingTranscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountRecordingRecordingTranscription.class);
                res.apiV2010AccountRecordingRecordingTranscription = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of a short code
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchShortCodeResponse fetchShortCode(org.openapis.openapi.models.operations.FetchShortCodeRequest request) throws Exception {
        String baseUrl = FETCH_SHORT_CODE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchShortCodePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchShortCodeResponse res = new org.openapis.openapi.models.operations.FetchShortCodeResponse() {{
            apiV2010AccountShortCode = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountShortCode out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountShortCode.class);
                res.apiV2010AccountShortCode = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSigningKeyResponse fetchSigningKey(org.openapis.openapi.models.operations.FetchSigningKeyRequest request) throws Exception {
        String baseUrl = FETCH_SIGNING_KEY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSigningKeyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSigningKeyResponse res = new org.openapis.openapi.models.operations.FetchSigningKeyResponse() {{
            apiV2010AccountSigningKey = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSigningKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSigningKey.class);
                res.apiV2010AccountSigningKey = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific instance of a credential list mapping
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSipAuthCallsCredentialListMappingResponse fetchSipAuthCallsCredentialListMapping(org.openapis.openapi.models.operations.FetchSipAuthCallsCredentialListMappingRequest request) throws Exception {
        String baseUrl = FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSipAuthCallsCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSipAuthCallsCredentialListMappingResponse res = new org.openapis.openapi.models.operations.FetchSipAuthCallsCredentialListMappingResponse() {{
            apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping.class);
                res.apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific instance of an IP Access Control List mapping
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSipAuthCallsIpAccessControlListMappingResponse fetchSipAuthCallsIpAccessControlListMapping(org.openapis.openapi.models.operations.FetchSipAuthCallsIpAccessControlListMappingRequest request) throws Exception {
        String baseUrl = FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSipAuthCallsIpAccessControlListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSipAuthCallsIpAccessControlListMappingResponse res = new org.openapis.openapi.models.operations.FetchSipAuthCallsIpAccessControlListMappingResponse() {{
            apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping.class);
                res.apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific instance of a credential list mapping
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSipAuthRegistrationsCredentialListMappingResponse fetchSipAuthRegistrationsCredentialListMapping(org.openapis.openapi.models.operations.FetchSipAuthRegistrationsCredentialListMappingRequest request) throws Exception {
        String baseUrl = FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSipAuthRegistrationsCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSipAuthRegistrationsCredentialListMappingResponse res = new org.openapis.openapi.models.operations.FetchSipAuthRegistrationsCredentialListMappingResponse() {{
            apiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping.class);
                res.apiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping = out;
            }
        }

        return res;
    }

    /**
     * Fetch a single credential.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSipCredentialResponse fetchSipCredential(org.openapis.openapi.models.operations.FetchSipCredentialRequest request) throws Exception {
        String baseUrl = FETCH_SIP_CREDENTIAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSipCredentialPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSipCredentialResponse res = new org.openapis.openapi.models.operations.FetchSipCredentialResponse() {{
            apiV2010AccountSipSipCredentialListSipCredential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialListSipCredential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialListSipCredential.class);
                res.apiV2010AccountSipSipCredentialListSipCredential = out;
            }
        }

        return res;
    }

    /**
     * Get a Credential List
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSipCredentialListResponse fetchSipCredentialList(org.openapis.openapi.models.operations.FetchSipCredentialListRequest request) throws Exception {
        String baseUrl = FETCH_SIP_CREDENTIAL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSipCredentialListPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSipCredentialListResponse res = new org.openapis.openapi.models.operations.FetchSipCredentialListResponse() {{
            apiV2010AccountSipSipCredentialList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialList.class);
                res.apiV2010AccountSipSipCredentialList = out;
            }
        }

        return res;
    }

    /**
     * Fetch a single CredentialListMapping resource from an account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSipCredentialListMappingResponse fetchSipCredentialListMapping(org.openapis.openapi.models.operations.FetchSipCredentialListMappingRequest request) throws Exception {
        String baseUrl = FETCH_SIP_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSipCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSipCredentialListMappingResponse res = new org.openapis.openapi.models.operations.FetchSipCredentialListMappingResponse() {{
            apiV2010AccountSipSipDomainSipCredentialListMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipCredentialListMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipCredentialListMapping.class);
                res.apiV2010AccountSipSipDomainSipCredentialListMapping = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of a Domain
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSipDomainResponse fetchSipDomain(org.openapis.openapi.models.operations.FetchSipDomainRequest request) throws Exception {
        String baseUrl = FETCH_SIP_DOMAIN_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSipDomainPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSipDomainResponse res = new org.openapis.openapi.models.operations.FetchSipDomainResponse() {{
            apiV2010AccountSipSipDomain = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomain out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomain.class);
                res.apiV2010AccountSipSipDomain = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific instance of an IpAccessControlList
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSipIpAccessControlListResponse fetchSipIpAccessControlList(org.openapis.openapi.models.operations.FetchSipIpAccessControlListRequest request) throws Exception {
        String baseUrl = FETCH_SIP_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSipIpAccessControlListPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSipIpAccessControlListResponse res = new org.openapis.openapi.models.operations.FetchSipIpAccessControlListResponse() {{
            apiV2010AccountSipSipIpAccessControlList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlList.class);
                res.apiV2010AccountSipSipIpAccessControlList = out;
            }
        }

        return res;
    }

    /**
     * Fetch an IpAccessControlListMapping resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSipIpAccessControlListMappingResponse fetchSipIpAccessControlListMapping(org.openapis.openapi.models.operations.FetchSipIpAccessControlListMappingRequest request) throws Exception {
        String baseUrl = FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSipIpAccessControlListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSipIpAccessControlListMappingResponse res = new org.openapis.openapi.models.operations.FetchSipIpAccessControlListMappingResponse() {{
            apiV2010AccountSipSipDomainSipIpAccessControlListMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipIpAccessControlListMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomainSipIpAccessControlListMapping.class);
                res.apiV2010AccountSipSipDomainSipIpAccessControlListMapping = out;
            }
        }

        return res;
    }

    /**
     * Read one IpAddress resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSipIpAddressResponse fetchSipIpAddress(org.openapis.openapi.models.operations.FetchSipIpAddressRequest request) throws Exception {
        String baseUrl = FETCH_SIP_IP_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSipIpAddressPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSipIpAddressResponse res = new org.openapis.openapi.models.operations.FetchSipIpAddressResponse() {{
            apiV2010AccountSipSipIpAccessControlListSipIpAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlListSipIpAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlListSipIpAddress.class);
                res.apiV2010AccountSipSipIpAccessControlListSipIpAddress = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of a Transcription
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchTranscriptionResponse fetchTranscription(org.openapis.openapi.models.operations.FetchTranscriptionRequest request) throws Exception {
        String baseUrl = FETCH_TRANSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTranscriptionPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTranscriptionResponse res = new org.openapis.openapi.models.operations.FetchTranscriptionResponse() {{
            apiV2010AccountTranscription = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountTranscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountTranscription.class);
                res.apiV2010AccountTranscription = out;
            }
        }

        return res;
    }

    /**
     * Fetch and instance of a usage-trigger
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUsageTriggerResponse fetchUsageTrigger(org.openapis.openapi.models.operations.FetchUsageTriggerRequest request) throws Exception {
        String baseUrl = FETCH_USAGE_TRIGGER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUsageTriggerPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUsageTriggerResponse res = new org.openapis.openapi.models.operations.FetchUsageTriggerResponse() {{
            apiV2010AccountUsageUsageTrigger = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountUsageUsageTrigger out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountUsageUsageTrigger.class);
                res.apiV2010AccountUsageUsageTrigger = out;
            }
        }

        return res;
    }

    /**
     * Retrieves a collection of Accounts belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAccountResponse listAccount(org.openapis.openapi.models.operations.ListAccountRequest request) throws Exception {
        String baseUrl = LIST_ACCOUNT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/2010-04-01/Accounts.json");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAccountQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAccountResponse res = new org.openapis.openapi.models.operations.ListAccountResponse() {{
            listAccountResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAccountListAccountResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAccountListAccountResponse.class);
                res.listAccountResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListAddressResponse listAddress(org.openapis.openapi.models.operations.ListAddressRequest request) throws Exception {
        String baseUrl = LIST_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAddressPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Addresses.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAddressQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAddressResponse res = new org.openapis.openapi.models.operations.ListAddressResponse() {{
            listAddressResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAddressListAddressResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAddressListAddressResponse.class);
                res.listAddressResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of applications representing an application within the requesting account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListApplicationResponse listApplication(org.openapis.openapi.models.operations.ListApplicationRequest request) throws Exception {
        String baseUrl = LIST_APPLICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListApplicationPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Applications.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListApplicationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListApplicationResponse res = new org.openapis.openapi.models.operations.ListApplicationResponse() {{
            listApplicationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListApplicationListApplicationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListApplicationListApplicationResponse.class);
                res.listApplicationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of authorized-connect-apps belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListAuthorizedConnectAppResponse listAuthorizedConnectApp(org.openapis.openapi.models.operations.ListAuthorizedConnectAppRequest request) throws Exception {
        String baseUrl = LIST_AUTHORIZED_CONNECT_APP_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAuthorizedConnectAppPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAuthorizedConnectAppQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAuthorizedConnectAppResponse res = new org.openapis.openapi.models.operations.ListAuthorizedConnectAppResponse() {{
            listAuthorizedConnectAppResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAuthorizedConnectAppListAuthorizedConnectAppResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAuthorizedConnectAppListAuthorizedConnectAppResponse.class);
                res.listAuthorizedConnectAppResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListAvailablePhoneNumberCountryResponse listAvailablePhoneNumberCountry(org.openapis.openapi.models.operations.ListAvailablePhoneNumberCountryRequest request) throws Exception {
        String baseUrl = LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAvailablePhoneNumberCountryPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAvailablePhoneNumberCountryQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAvailablePhoneNumberCountryResponse res = new org.openapis.openapi.models.operations.ListAvailablePhoneNumberCountryResponse() {{
            listAvailablePhoneNumberCountryResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAvailablePhoneNumberCountryListAvailablePhoneNumberCountryResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAvailablePhoneNumberCountryListAvailablePhoneNumberCountryResponse.class);
                res.listAvailablePhoneNumberCountryResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListAvailablePhoneNumberLocalResponse listAvailablePhoneNumberLocal(org.openapis.openapi.models.operations.ListAvailablePhoneNumberLocalRequest request) throws Exception {
        String baseUrl = LIST_AVAILABLE_PHONE_NUMBER_LOCAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAvailablePhoneNumberLocalPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Local.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAvailablePhoneNumberLocalQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAvailablePhoneNumberLocalResponse res = new org.openapis.openapi.models.operations.ListAvailablePhoneNumberLocalResponse() {{
            listAvailablePhoneNumberLocalResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAvailablePhoneNumberLocalListAvailablePhoneNumberLocalResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAvailablePhoneNumberLocalListAvailablePhoneNumberLocalResponse.class);
                res.listAvailablePhoneNumberLocalResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListAvailablePhoneNumberMachineToMachineResponse listAvailablePhoneNumberMachineToMachine(org.openapis.openapi.models.operations.ListAvailablePhoneNumberMachineToMachineRequest request) throws Exception {
        String baseUrl = LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAvailablePhoneNumberMachineToMachinePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/MachineToMachine.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAvailablePhoneNumberMachineToMachineQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAvailablePhoneNumberMachineToMachineResponse res = new org.openapis.openapi.models.operations.ListAvailablePhoneNumberMachineToMachineResponse() {{
            listAvailablePhoneNumberMachineToMachineResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAvailablePhoneNumberMachineToMachineListAvailablePhoneNumberMachineToMachineResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAvailablePhoneNumberMachineToMachineListAvailablePhoneNumberMachineToMachineResponse.class);
                res.listAvailablePhoneNumberMachineToMachineResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListAvailablePhoneNumberMobileResponse listAvailablePhoneNumberMobile(org.openapis.openapi.models.operations.ListAvailablePhoneNumberMobileRequest request) throws Exception {
        String baseUrl = LIST_AVAILABLE_PHONE_NUMBER_MOBILE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAvailablePhoneNumberMobilePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Mobile.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAvailablePhoneNumberMobileQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAvailablePhoneNumberMobileResponse res = new org.openapis.openapi.models.operations.ListAvailablePhoneNumberMobileResponse() {{
            listAvailablePhoneNumberMobileResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAvailablePhoneNumberMobileListAvailablePhoneNumberMobileResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAvailablePhoneNumberMobileListAvailablePhoneNumberMobileResponse.class);
                res.listAvailablePhoneNumberMobileResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListAvailablePhoneNumberNationalResponse listAvailablePhoneNumberNational(org.openapis.openapi.models.operations.ListAvailablePhoneNumberNationalRequest request) throws Exception {
        String baseUrl = LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAvailablePhoneNumberNationalPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/National.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAvailablePhoneNumberNationalQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAvailablePhoneNumberNationalResponse res = new org.openapis.openapi.models.operations.ListAvailablePhoneNumberNationalResponse() {{
            listAvailablePhoneNumberNationalResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAvailablePhoneNumberNationalListAvailablePhoneNumberNationalResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAvailablePhoneNumberNationalListAvailablePhoneNumberNationalResponse.class);
                res.listAvailablePhoneNumberNationalResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListAvailablePhoneNumberSharedCostResponse listAvailablePhoneNumberSharedCost(org.openapis.openapi.models.operations.ListAvailablePhoneNumberSharedCostRequest request) throws Exception {
        String baseUrl = LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAvailablePhoneNumberSharedCostPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/SharedCost.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAvailablePhoneNumberSharedCostQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAvailablePhoneNumberSharedCostResponse res = new org.openapis.openapi.models.operations.ListAvailablePhoneNumberSharedCostResponse() {{
            listAvailablePhoneNumberSharedCostResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAvailablePhoneNumberSharedCostListAvailablePhoneNumberSharedCostResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAvailablePhoneNumberSharedCostListAvailablePhoneNumberSharedCostResponse.class);
                res.listAvailablePhoneNumberSharedCostResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListAvailablePhoneNumberTollFreeResponse listAvailablePhoneNumberTollFree(org.openapis.openapi.models.operations.ListAvailablePhoneNumberTollFreeRequest request) throws Exception {
        String baseUrl = LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAvailablePhoneNumberTollFreePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/TollFree.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAvailablePhoneNumberTollFreeQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAvailablePhoneNumberTollFreeResponse res = new org.openapis.openapi.models.operations.ListAvailablePhoneNumberTollFreeResponse() {{
            listAvailablePhoneNumberTollFreeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAvailablePhoneNumberTollFreeListAvailablePhoneNumberTollFreeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAvailablePhoneNumberTollFreeListAvailablePhoneNumberTollFreeResponse.class);
                res.listAvailablePhoneNumberTollFreeResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListAvailablePhoneNumberVoipResponse listAvailablePhoneNumberVoip(org.openapis.openapi.models.operations.ListAvailablePhoneNumberVoipRequest request) throws Exception {
        String baseUrl = LIST_AVAILABLE_PHONE_NUMBER_VOIP_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListAvailablePhoneNumberVoipPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Voip.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAvailablePhoneNumberVoipQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAvailablePhoneNumberVoipResponse res = new org.openapis.openapi.models.operations.ListAvailablePhoneNumberVoipResponse() {{
            listAvailablePhoneNumberVoipResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAvailablePhoneNumberVoipListAvailablePhoneNumberVoipResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAvailablePhoneNumberVoipListAvailablePhoneNumberVoipResponse.class);
                res.listAvailablePhoneNumberVoipResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieves a collection of calls made to and from your account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCallResponse listCall(org.openapis.openapi.models.operations.ListCallRequest request) throws Exception {
        String baseUrl = LIST_CALL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListCallPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCallQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCallResponse res = new org.openapis.openapi.models.operations.ListCallResponse() {{
            listCallResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCallListCallResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCallListCallResponse.class);
                res.listCallResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all events for a call.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCallEventResponse listCallEvent(org.openapis.openapi.models.operations.ListCallEventRequest request) throws Exception {
        String baseUrl = LIST_CALL_EVENT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListCallEventPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Events.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCallEventQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCallEventResponse res = new org.openapis.openapi.models.operations.ListCallEventResponse() {{
            listCallEventResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCallEventListCallEventResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCallEventListCallEventResponse.class);
                res.listCallEventResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListCallNotificationResponse listCallNotification(org.openapis.openapi.models.operations.ListCallNotificationRequest request) throws Exception {
        String baseUrl = LIST_CALL_NOTIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListCallNotificationPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCallNotificationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCallNotificationResponse res = new org.openapis.openapi.models.operations.ListCallNotificationResponse() {{
            listCallNotificationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCallNotificationListCallNotificationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCallNotificationListCallNotificationResponse.class);
                res.listCallNotificationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of recordings belonging to the call used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCallRecordingResponse listCallRecording(org.openapis.openapi.models.operations.ListCallRecordingRequest request) throws Exception {
        String baseUrl = LIST_CALL_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListCallRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCallRecordingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCallRecordingResponse res = new org.openapis.openapi.models.operations.ListCallRecordingResponse() {{
            listCallRecordingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCallRecordingListCallRecordingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCallRecordingListCallRecordingResponse.class);
                res.listCallRecordingResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of conferences belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConferenceResponse listConference(org.openapis.openapi.models.operations.ListConferenceRequest request) throws Exception {
        String baseUrl = LIST_CONFERENCE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConferencePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConferenceQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConferenceResponse res = new org.openapis.openapi.models.operations.ListConferenceResponse() {{
            listConferenceResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConferenceListConferenceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConferenceListConferenceResponse.class);
                res.listConferenceResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of recordings belonging to the call used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConferenceRecordingResponse listConferenceRecording(org.openapis.openapi.models.operations.ListConferenceRecordingRequest request) throws Exception {
        String baseUrl = LIST_CONFERENCE_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConferenceRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConferenceRecordingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConferenceRecordingResponse res = new org.openapis.openapi.models.operations.ListConferenceRecordingResponse() {{
            listConferenceRecordingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConferenceRecordingListConferenceRecordingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConferenceRecordingListConferenceRecordingResponse.class);
                res.listConferenceRecordingResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of connect-apps belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListConnectAppResponse listConnectApp(org.openapis.openapi.models.operations.ListConnectAppRequest request) throws Exception {
        String baseUrl = LIST_CONNECT_APP_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConnectAppPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/ConnectApps.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConnectAppQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConnectAppResponse res = new org.openapis.openapi.models.operations.ListConnectAppResponse() {{
            listConnectAppResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConnectAppListConnectAppResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConnectAppListConnectAppResponse.class);
                res.listConnectAppResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListDependentPhoneNumberResponse listDependentPhoneNumber(org.openapis.openapi.models.operations.ListDependentPhoneNumberRequest request) throws Exception {
        String baseUrl = LIST_DEPENDENT_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDependentPhoneNumberPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Addresses/{AddressSid}/DependentPhoneNumbers.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDependentPhoneNumberQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDependentPhoneNumberResponse res = new org.openapis.openapi.models.operations.ListDependentPhoneNumberResponse() {{
            listDependentPhoneNumberResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDependentPhoneNumberListDependentPhoneNumberResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDependentPhoneNumberListDependentPhoneNumberResponse.class);
                res.listDependentPhoneNumberResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of incoming-phone-numbers belonging to the account used to make the request.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListIncomingPhoneNumberResponse listIncomingPhoneNumber(org.openapis.openapi.models.operations.ListIncomingPhoneNumberRequest request) throws Exception {
        String baseUrl = LIST_INCOMING_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListIncomingPhoneNumberPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListIncomingPhoneNumberQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListIncomingPhoneNumberResponse res = new org.openapis.openapi.models.operations.ListIncomingPhoneNumberResponse() {{
            listIncomingPhoneNumberResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListIncomingPhoneNumberListIncomingPhoneNumberResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListIncomingPhoneNumberListIncomingPhoneNumberResponse.class);
                res.listIncomingPhoneNumberResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Add-on installations currently assigned to this Number.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnResponse listIncomingPhoneNumberAssignedAddOn(org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnRequest request) throws Exception {
        String baseUrl = LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnResponse res = new org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnResponse() {{
            listIncomingPhoneNumberAssignedAddOnResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnListIncomingPhoneNumberAssignedAddOnResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnListIncomingPhoneNumberAssignedAddOnResponse.class);
                res.listIncomingPhoneNumberAssignedAddOnResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Extensions for the Assigned Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnExtensionResponse listIncomingPhoneNumberAssignedAddOnExtension(org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnExtensionRequest request) throws Exception {
        String baseUrl = LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnExtensionPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnExtensionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnExtensionResponse res = new org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnExtensionResponse() {{
            listIncomingPhoneNumberAssignedAddOnExtensionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnExtensionListIncomingPhoneNumberAssignedAddOnExtensionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListIncomingPhoneNumberAssignedAddOnExtensionListIncomingPhoneNumberAssignedAddOnExtensionResponse.class);
                res.listIncomingPhoneNumberAssignedAddOnExtensionResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListIncomingPhoneNumberLocalResponse listIncomingPhoneNumberLocal(org.openapis.openapi.models.operations.ListIncomingPhoneNumberLocalRequest request) throws Exception {
        String baseUrl = LIST_INCOMING_PHONE_NUMBER_LOCAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListIncomingPhoneNumberLocalPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListIncomingPhoneNumberLocalQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListIncomingPhoneNumberLocalResponse res = new org.openapis.openapi.models.operations.ListIncomingPhoneNumberLocalResponse() {{
            listIncomingPhoneNumberLocalResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListIncomingPhoneNumberLocalListIncomingPhoneNumberLocalResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListIncomingPhoneNumberLocalListIncomingPhoneNumberLocalResponse.class);
                res.listIncomingPhoneNumberLocalResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListIncomingPhoneNumberMobileResponse listIncomingPhoneNumberMobile(org.openapis.openapi.models.operations.ListIncomingPhoneNumberMobileRequest request) throws Exception {
        String baseUrl = LIST_INCOMING_PHONE_NUMBER_MOBILE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListIncomingPhoneNumberMobilePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListIncomingPhoneNumberMobileQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListIncomingPhoneNumberMobileResponse res = new org.openapis.openapi.models.operations.ListIncomingPhoneNumberMobileResponse() {{
            listIncomingPhoneNumberMobileResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListIncomingPhoneNumberMobileListIncomingPhoneNumberMobileResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListIncomingPhoneNumberMobileListIncomingPhoneNumberMobileResponse.class);
                res.listIncomingPhoneNumberMobileResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListIncomingPhoneNumberTollFreeResponse listIncomingPhoneNumberTollFree(org.openapis.openapi.models.operations.ListIncomingPhoneNumberTollFreeRequest request) throws Exception {
        String baseUrl = LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListIncomingPhoneNumberTollFreePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListIncomingPhoneNumberTollFreeQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListIncomingPhoneNumberTollFreeResponse res = new org.openapis.openapi.models.operations.ListIncomingPhoneNumberTollFreeResponse() {{
            listIncomingPhoneNumberTollFreeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListIncomingPhoneNumberTollFreeListIncomingPhoneNumberTollFreeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListIncomingPhoneNumberTollFreeListIncomingPhoneNumberTollFreeResponse.class);
                res.listIncomingPhoneNumberTollFreeResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListKeyResponse listKey(org.openapis.openapi.models.operations.ListKeyRequest request) throws Exception {
        String baseUrl = LIST_KEY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListKeyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Keys.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListKeyQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListKeyResponse res = new org.openapis.openapi.models.operations.ListKeyResponse() {{
            listKeyResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListKeyListKeyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListKeyListKeyResponse.class);
                res.listKeyResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Media resources belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMediaResponse listMedia(org.openapis.openapi.models.operations.ListMediaRequest request) throws Exception {
        String baseUrl = LIST_MEDIA_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListMediaPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMediaQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMediaResponse res = new org.openapis.openapi.models.operations.ListMediaResponse() {{
            listMediaResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMediaListMediaResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMediaListMediaResponse.class);
                res.listMediaResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve the members of the queue
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMemberResponse listMember(org.openapis.openapi.models.operations.ListMemberRequest request) throws Exception {
        String baseUrl = LIST_MEMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListMemberPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMemberQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMemberResponse res = new org.openapis.openapi.models.operations.ListMemberResponse() {{
            listMemberResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMemberListMemberResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMemberListMemberResponse.class);
                res.listMemberResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of messages belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMessageResponse listMessage(org.openapis.openapi.models.operations.ListMessageRequest request) throws Exception {
        String baseUrl = LIST_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListMessagePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Messages.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMessageQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMessageResponse res = new org.openapis.openapi.models.operations.ListMessageResponse() {{
            listMessageResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMessageListMessageResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMessageListMessageResponse.class);
                res.listMessageResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of notifications belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListNotificationResponse listNotification(org.openapis.openapi.models.operations.ListNotificationRequest request) throws Exception {
        String baseUrl = LIST_NOTIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListNotificationPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Notifications.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListNotificationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListNotificationResponse res = new org.openapis.openapi.models.operations.ListNotificationResponse() {{
            listNotificationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListNotificationListNotificationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListNotificationListNotificationResponse.class);
                res.listNotificationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of outgoing-caller-ids belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListOutgoingCallerIdResponse listOutgoingCallerId(org.openapis.openapi.models.operations.ListOutgoingCallerIdRequest request) throws Exception {
        String baseUrl = LIST_OUTGOING_CALLER_ID_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListOutgoingCallerIdPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListOutgoingCallerIdQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListOutgoingCallerIdResponse res = new org.openapis.openapi.models.operations.ListOutgoingCallerIdResponse() {{
            listOutgoingCallerIdResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListOutgoingCallerIdListOutgoingCallerIdResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListOutgoingCallerIdListOutgoingCallerIdResponse.class);
                res.listOutgoingCallerIdResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of participants belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListParticipantResponse listParticipant(org.openapis.openapi.models.operations.ListParticipantRequest request) throws Exception {
        String baseUrl = LIST_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListParticipantPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListParticipantQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListParticipantResponse res = new org.openapis.openapi.models.operations.ListParticipantResponse() {{
            listParticipantResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListParticipantListParticipantResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListParticipantListParticipantResponse.class);
                res.listParticipantResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of queues belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListQueueResponse listQueue(org.openapis.openapi.models.operations.ListQueueRequest request) throws Exception {
        String baseUrl = LIST_QUEUE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListQueuePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Queues.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListQueueQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListQueueResponse res = new org.openapis.openapi.models.operations.ListQueueResponse() {{
            listQueueResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListQueueListQueueResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListQueueListQueueResponse.class);
                res.listQueueResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of recordings belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRecordingResponse listRecording(org.openapis.openapi.models.operations.ListRecordingRequest request) throws Exception {
        String baseUrl = LIST_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRecordingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRecordingResponse res = new org.openapis.openapi.models.operations.ListRecordingResponse() {{
            listRecordingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRecordingListRecordingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRecordingListRecordingResponse.class);
                res.listRecordingResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of results belonging to the recording
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRecordingAddOnResultResponse listRecordingAddOnResult(org.openapis.openapi.models.operations.ListRecordingAddOnResultRequest request) throws Exception {
        String baseUrl = LIST_RECORDING_ADD_ON_RESULT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListRecordingAddOnResultPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRecordingAddOnResultQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRecordingAddOnResultResponse res = new org.openapis.openapi.models.operations.ListRecordingAddOnResultResponse() {{
            listRecordingAddOnResultResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRecordingAddOnResultListRecordingAddOnResultResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRecordingAddOnResultListRecordingAddOnResultResponse.class);
                res.listRecordingAddOnResultResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of payloads belonging to the AddOnResult
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRecordingAddOnResultPayloadResponse listRecordingAddOnResultPayload(org.openapis.openapi.models.operations.ListRecordingAddOnResultPayloadRequest request) throws Exception {
        String baseUrl = LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListRecordingAddOnResultPayloadPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRecordingAddOnResultPayloadQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRecordingAddOnResultPayloadResponse res = new org.openapis.openapi.models.operations.ListRecordingAddOnResultPayloadResponse() {{
            listRecordingAddOnResultPayloadResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRecordingAddOnResultPayloadListRecordingAddOnResultPayloadResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRecordingAddOnResultPayloadListRecordingAddOnResultPayloadResponse.class);
                res.listRecordingAddOnResultPayloadResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListRecordingTranscriptionResponse listRecordingTranscription(org.openapis.openapi.models.operations.ListRecordingTranscriptionRequest request) throws Exception {
        String baseUrl = LIST_RECORDING_TRANSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListRecordingTranscriptionPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRecordingTranscriptionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRecordingTranscriptionResponse res = new org.openapis.openapi.models.operations.ListRecordingTranscriptionResponse() {{
            listRecordingTranscriptionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRecordingTranscriptionListRecordingTranscriptionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRecordingTranscriptionListRecordingTranscriptionResponse.class);
                res.listRecordingTranscriptionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of short-codes belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListShortCodeResponse listShortCode(org.openapis.openapi.models.operations.ListShortCodeRequest request) throws Exception {
        String baseUrl = LIST_SHORT_CODE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListShortCodePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListShortCodeQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListShortCodeResponse res = new org.openapis.openapi.models.operations.ListShortCodeResponse() {{
            listShortCodeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListShortCodeListShortCodeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListShortCodeListShortCodeResponse.class);
                res.listShortCodeResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSigningKeyResponse listSigningKey(org.openapis.openapi.models.operations.ListSigningKeyRequest request) throws Exception {
        String baseUrl = LIST_SIGNING_KEY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSigningKeyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SigningKeys.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSigningKeyQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSigningKeyResponse res = new org.openapis.openapi.models.operations.ListSigningKeyResponse() {{
            listSigningKeyResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSigningKeyListSigningKeyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSigningKeyListSigningKeyResponse.class);
                res.listSigningKeyResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of credential list mappings belonging to the domain used in the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSipAuthCallsCredentialListMappingResponse listSipAuthCallsCredentialListMapping(org.openapis.openapi.models.operations.ListSipAuthCallsCredentialListMappingRequest request) throws Exception {
        String baseUrl = LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSipAuthCallsCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSipAuthCallsCredentialListMappingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSipAuthCallsCredentialListMappingResponse res = new org.openapis.openapi.models.operations.ListSipAuthCallsCredentialListMappingResponse() {{
            listSipAuthCallsCredentialListMappingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSipAuthCallsCredentialListMappingListSipAuthCallsCredentialListMappingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSipAuthCallsCredentialListMappingListSipAuthCallsCredentialListMappingResponse.class);
                res.listSipAuthCallsCredentialListMappingResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of IP Access Control List mappings belonging to the domain used in the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSipAuthCallsIpAccessControlListMappingResponse listSipAuthCallsIpAccessControlListMapping(org.openapis.openapi.models.operations.ListSipAuthCallsIpAccessControlListMappingRequest request) throws Exception {
        String baseUrl = LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSipAuthCallsIpAccessControlListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSipAuthCallsIpAccessControlListMappingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSipAuthCallsIpAccessControlListMappingResponse res = new org.openapis.openapi.models.operations.ListSipAuthCallsIpAccessControlListMappingResponse() {{
            listSipAuthCallsIpAccessControlListMappingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSipAuthCallsIpAccessControlListMappingListSipAuthCallsIpAccessControlListMappingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSipAuthCallsIpAccessControlListMappingListSipAuthCallsIpAccessControlListMappingResponse.class);
                res.listSipAuthCallsIpAccessControlListMappingResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of credential list mappings belonging to the domain used in the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSipAuthRegistrationsCredentialListMappingResponse listSipAuthRegistrationsCredentialListMapping(org.openapis.openapi.models.operations.ListSipAuthRegistrationsCredentialListMappingRequest request) throws Exception {
        String baseUrl = LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSipAuthRegistrationsCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSipAuthRegistrationsCredentialListMappingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSipAuthRegistrationsCredentialListMappingResponse res = new org.openapis.openapi.models.operations.ListSipAuthRegistrationsCredentialListMappingResponse() {{
            listSipAuthRegistrationsCredentialListMappingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSipAuthRegistrationsCredentialListMappingListSipAuthRegistrationsCredentialListMappingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSipAuthRegistrationsCredentialListMappingListSipAuthRegistrationsCredentialListMappingResponse.class);
                res.listSipAuthRegistrationsCredentialListMappingResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of credentials.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSipCredentialResponse listSipCredential(org.openapis.openapi.models.operations.ListSipCredentialRequest request) throws Exception {
        String baseUrl = LIST_SIP_CREDENTIAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSipCredentialPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSipCredentialQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSipCredentialResponse res = new org.openapis.openapi.models.operations.ListSipCredentialResponse() {{
            listSipCredentialResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSipCredentialListSipCredentialResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSipCredentialListSipCredentialResponse.class);
                res.listSipCredentialResponse = out;
            }
        }

        return res;
    }

    /**
     * Get All Credential Lists
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSipCredentialListResponse listSipCredentialList(org.openapis.openapi.models.operations.ListSipCredentialListRequest request) throws Exception {
        String baseUrl = LIST_SIP_CREDENTIAL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSipCredentialListPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSipCredentialListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSipCredentialListResponse res = new org.openapis.openapi.models.operations.ListSipCredentialListResponse() {{
            listSipCredentialListResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSipCredentialListListSipCredentialListResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSipCredentialListListSipCredentialListResponse.class);
                res.listSipCredentialListResponse = out;
            }
        }

        return res;
    }

    /**
     * Read multiple CredentialListMapping resources from an account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSipCredentialListMappingResponse listSipCredentialListMapping(org.openapis.openapi.models.operations.ListSipCredentialListMappingRequest request) throws Exception {
        String baseUrl = LIST_SIP_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSipCredentialListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSipCredentialListMappingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSipCredentialListMappingResponse res = new org.openapis.openapi.models.operations.ListSipCredentialListMappingResponse() {{
            listSipCredentialListMappingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSipCredentialListMappingListSipCredentialListMappingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSipCredentialListMappingListSipCredentialListMappingResponse.class);
                res.listSipCredentialListMappingResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of domains belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSipDomainResponse listSipDomain(org.openapis.openapi.models.operations.ListSipDomainRequest request) throws Exception {
        String baseUrl = LIST_SIP_DOMAIN_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSipDomainPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSipDomainQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSipDomainResponse res = new org.openapis.openapi.models.operations.ListSipDomainResponse() {{
            listSipDomainResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSipDomainListSipDomainResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSipDomainListSipDomainResponse.class);
                res.listSipDomainResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of IpAccessControlLists that belong to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSipIpAccessControlListResponse listSipIpAccessControlList(org.openapis.openapi.models.operations.ListSipIpAccessControlListRequest request) throws Exception {
        String baseUrl = LIST_SIP_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSipIpAccessControlListPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSipIpAccessControlListQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSipIpAccessControlListResponse res = new org.openapis.openapi.models.operations.ListSipIpAccessControlListResponse() {{
            listSipIpAccessControlListResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSipIpAccessControlListListSipIpAccessControlListResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSipIpAccessControlListListSipIpAccessControlListResponse.class);
                res.listSipIpAccessControlListResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of IpAccessControlListMapping resources.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSipIpAccessControlListMappingResponse listSipIpAccessControlListMapping(org.openapis.openapi.models.operations.ListSipIpAccessControlListMappingRequest request) throws Exception {
        String baseUrl = LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSipIpAccessControlListMappingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSipIpAccessControlListMappingQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSipIpAccessControlListMappingResponse res = new org.openapis.openapi.models.operations.ListSipIpAccessControlListMappingResponse() {{
            listSipIpAccessControlListMappingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSipIpAccessControlListMappingListSipIpAccessControlListMappingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSipIpAccessControlListMappingListSipIpAccessControlListMappingResponse.class);
                res.listSipIpAccessControlListMappingResponse = out;
            }
        }

        return res;
    }

    /**
     * Read multiple IpAddress resources.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSipIpAddressResponse listSipIpAddress(org.openapis.openapi.models.operations.ListSipIpAddressRequest request) throws Exception {
        String baseUrl = LIST_SIP_IP_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSipIpAddressPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSipIpAddressQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSipIpAddressResponse res = new org.openapis.openapi.models.operations.ListSipIpAddressResponse() {{
            listSipIpAddressResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSipIpAddressListSipIpAddressResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSipIpAddressListSipIpAddressResponse.class);
                res.listSipIpAddressResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of transcriptions belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListTranscriptionResponse listTranscription(org.openapis.openapi.models.operations.ListTranscriptionRequest request) throws Exception {
        String baseUrl = LIST_TRANSCRIPTION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTranscriptionPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Transcriptions.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTranscriptionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTranscriptionResponse res = new org.openapis.openapi.models.operations.ListTranscriptionResponse() {{
            listTranscriptionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTranscriptionListTranscriptionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTranscriptionListTranscriptionResponse.class);
                res.listTranscriptionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of usage-records belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListUsageRecordResponse listUsageRecord(org.openapis.openapi.models.operations.ListUsageRecordRequest request) throws Exception {
        String baseUrl = LIST_USAGE_RECORD_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUsageRecordPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Records.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsageRecordQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsageRecordResponse res = new org.openapis.openapi.models.operations.ListUsageRecordResponse() {{
            listUsageRecordResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsageRecordListUsageRecordResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsageRecordListUsageRecordResponse.class);
                res.listUsageRecordResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUsageRecordAllTimeResponse listUsageRecordAllTime(org.openapis.openapi.models.operations.ListUsageRecordAllTimeRequest request) throws Exception {
        String baseUrl = LIST_USAGE_RECORD_ALL_TIME_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUsageRecordAllTimePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Records/AllTime.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsageRecordAllTimeQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsageRecordAllTimeResponse res = new org.openapis.openapi.models.operations.ListUsageRecordAllTimeResponse() {{
            listUsageRecordAllTimeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsageRecordAllTimeListUsageRecordAllTimeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsageRecordAllTimeListUsageRecordAllTimeResponse.class);
                res.listUsageRecordAllTimeResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUsageRecordDailyResponse listUsageRecordDaily(org.openapis.openapi.models.operations.ListUsageRecordDailyRequest request) throws Exception {
        String baseUrl = LIST_USAGE_RECORD_DAILY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUsageRecordDailyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Daily.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsageRecordDailyQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsageRecordDailyResponse res = new org.openapis.openapi.models.operations.ListUsageRecordDailyResponse() {{
            listUsageRecordDailyResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsageRecordDailyListUsageRecordDailyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsageRecordDailyListUsageRecordDailyResponse.class);
                res.listUsageRecordDailyResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUsageRecordLastMonthResponse listUsageRecordLastMonth(org.openapis.openapi.models.operations.ListUsageRecordLastMonthRequest request) throws Exception {
        String baseUrl = LIST_USAGE_RECORD_LAST_MONTH_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUsageRecordLastMonthPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Records/LastMonth.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsageRecordLastMonthQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsageRecordLastMonthResponse res = new org.openapis.openapi.models.operations.ListUsageRecordLastMonthResponse() {{
            listUsageRecordLastMonthResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsageRecordLastMonthListUsageRecordLastMonthResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsageRecordLastMonthListUsageRecordLastMonthResponse.class);
                res.listUsageRecordLastMonthResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUsageRecordMonthlyResponse listUsageRecordMonthly(org.openapis.openapi.models.operations.ListUsageRecordMonthlyRequest request) throws Exception {
        String baseUrl = LIST_USAGE_RECORD_MONTHLY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUsageRecordMonthlyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Monthly.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsageRecordMonthlyQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsageRecordMonthlyResponse res = new org.openapis.openapi.models.operations.ListUsageRecordMonthlyResponse() {{
            listUsageRecordMonthlyResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsageRecordMonthlyListUsageRecordMonthlyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsageRecordMonthlyListUsageRecordMonthlyResponse.class);
                res.listUsageRecordMonthlyResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUsageRecordThisMonthResponse listUsageRecordThisMonth(org.openapis.openapi.models.operations.ListUsageRecordThisMonthRequest request) throws Exception {
        String baseUrl = LIST_USAGE_RECORD_THIS_MONTH_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUsageRecordThisMonthPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Records/ThisMonth.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsageRecordThisMonthQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsageRecordThisMonthResponse res = new org.openapis.openapi.models.operations.ListUsageRecordThisMonthResponse() {{
            listUsageRecordThisMonthResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsageRecordThisMonthListUsageRecordThisMonthResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsageRecordThisMonthListUsageRecordThisMonthResponse.class);
                res.listUsageRecordThisMonthResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUsageRecordTodayResponse listUsageRecordToday(org.openapis.openapi.models.operations.ListUsageRecordTodayRequest request) throws Exception {
        String baseUrl = LIST_USAGE_RECORD_TODAY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUsageRecordTodayPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Today.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsageRecordTodayQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsageRecordTodayResponse res = new org.openapis.openapi.models.operations.ListUsageRecordTodayResponse() {{
            listUsageRecordTodayResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsageRecordTodayListUsageRecordTodayResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsageRecordTodayListUsageRecordTodayResponse.class);
                res.listUsageRecordTodayResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUsageRecordYearlyResponse listUsageRecordYearly(org.openapis.openapi.models.operations.ListUsageRecordYearlyRequest request) throws Exception {
        String baseUrl = LIST_USAGE_RECORD_YEARLY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUsageRecordYearlyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yearly.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsageRecordYearlyQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsageRecordYearlyResponse res = new org.openapis.openapi.models.operations.ListUsageRecordYearlyResponse() {{
            listUsageRecordYearlyResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsageRecordYearlyListUsageRecordYearlyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsageRecordYearlyListUsageRecordYearlyResponse.class);
                res.listUsageRecordYearlyResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUsageRecordYesterdayResponse listUsageRecordYesterday(org.openapis.openapi.models.operations.ListUsageRecordYesterdayRequest request) throws Exception {
        String baseUrl = LIST_USAGE_RECORD_YESTERDAY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUsageRecordYesterdayPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yesterday.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsageRecordYesterdayQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsageRecordYesterdayResponse res = new org.openapis.openapi.models.operations.ListUsageRecordYesterdayResponse() {{
            listUsageRecordYesterdayResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsageRecordYesterdayListUsageRecordYesterdayResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsageRecordYesterdayListUsageRecordYesterdayResponse.class);
                res.listUsageRecordYesterdayResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of usage-triggers belonging to the account used to make the request
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListUsageTriggerResponse listUsageTrigger(org.openapis.openapi.models.operations.ListUsageTriggerRequest request) throws Exception {
        String baseUrl = LIST_USAGE_TRIGGER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUsageTriggerPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUsageTriggerQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUsageTriggerResponse res = new org.openapis.openapi.models.operations.ListUsageTriggerResponse() {{
            listUsageTriggerResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUsageTriggerListUsageTriggerResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUsageTriggerListUsageTriggerResponse.class);
                res.listUsageTriggerResponse = out;
            }
        }

        return res;
    }

    /**
     * Modify the properties of a given Account
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateAccountResponse updateAccount(org.openapis.openapi.models.operations.UpdateAccountRequest request) throws Exception {
        String baseUrl = UPDATE_ACCOUNT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateAccountPathParams.class, baseUrl, "/2010-04-01/Accounts/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAccountResponse res = new org.openapis.openapi.models.operations.UpdateAccountResponse() {{
            apiV2010Account = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010Account out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010Account.class);
                res.apiV2010Account = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateAddressResponse updateAddress(org.openapis.openapi.models.operations.UpdateAddressRequest request) throws Exception {
        String baseUrl = UPDATE_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateAddressPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAddressResponse res = new org.openapis.openapi.models.operations.UpdateAddressResponse() {{
            apiV2010AccountAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountAddress.class);
                res.apiV2010AccountAddress = out;
            }
        }

        return res;
    }

    /**
     * Updates the application's properties
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateApplicationResponse updateApplication(org.openapis.openapi.models.operations.UpdateApplicationRequest request) throws Exception {
        String baseUrl = UPDATE_APPLICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateApplicationPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateApplicationResponse res = new org.openapis.openapi.models.operations.UpdateApplicationResponse() {{
            apiV2010AccountApplication = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountApplication out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountApplication.class);
                res.apiV2010AccountApplication = out;
            }
        }

        return res;
    }

    /**
     * Initiates a call redirect or terminates a call
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCallResponse updateCall(org.openapis.openapi.models.operations.UpdateCallRequest request) throws Exception {
        String baseUrl = UPDATE_CALL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCallPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCallResponse res = new org.openapis.openapi.models.operations.UpdateCallResponse() {{
            apiV2010AccountCall = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCall out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCall.class);
                res.apiV2010AccountCall = out;
            }
        }

        return res;
    }

    /**
     * Update a Feedback resource for a call
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCallFeedbackResponse updateCallFeedback(org.openapis.openapi.models.operations.UpdateCallFeedbackRequest request) throws Exception {
        String baseUrl = UPDATE_CALL_FEEDBACK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCallFeedbackPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCallFeedbackResponse res = new org.openapis.openapi.models.operations.UpdateCallFeedbackResponse() {{
            apiV2010AccountCallCallFeedback = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallCallFeedback out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallCallFeedback.class);
                res.apiV2010AccountCallCallFeedback = out;
            }
        }

        return res;
    }

    /**
     * Changes the status of the recording to paused, stopped, or in-progress. Note: Pass `Twilio.CURRENT` instead of recording sid to reference current active recording.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateCallRecordingResponse updateCallRecording(org.openapis.openapi.models.operations.UpdateCallRecordingRequest request) throws Exception {
        String baseUrl = UPDATE_CALL_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCallRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCallRecordingResponse res = new org.openapis.openapi.models.operations.UpdateCallRecordingResponse() {{
            apiV2010AccountCallCallRecording = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallCallRecording out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallCallRecording.class);
                res.apiV2010AccountCallCallRecording = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateConferenceResponse updateConference(org.openapis.openapi.models.operations.UpdateConferenceRequest request) throws Exception {
        String baseUrl = UPDATE_CONFERENCE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConferencePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConferenceResponse res = new org.openapis.openapi.models.operations.UpdateConferenceResponse() {{
            apiV2010AccountConference = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountConference out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountConference.class);
                res.apiV2010AccountConference = out;
            }
        }

        return res;
    }

    /**
     * Changes the status of the recording to paused, stopped, or in-progress. Note: To use `Twilio.CURRENT`, pass it as recording sid.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConferenceRecordingResponse updateConferenceRecording(org.openapis.openapi.models.operations.UpdateConferenceRecordingRequest request) throws Exception {
        String baseUrl = UPDATE_CONFERENCE_RECORDING_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConferenceRecordingPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConferenceRecordingResponse res = new org.openapis.openapi.models.operations.UpdateConferenceRecordingResponse() {{
            apiV2010AccountConferenceConferenceRecording = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountConferenceConferenceRecording out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountConferenceConferenceRecording.class);
                res.apiV2010AccountConferenceConferenceRecording = out;
            }
        }

        return res;
    }

    /**
     * Update a connect-app with the specified parameters
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateConnectAppResponse updateConnectApp(org.openapis.openapi.models.operations.UpdateConnectAppRequest request) throws Exception {
        String baseUrl = UPDATE_CONNECT_APP_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConnectAppPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConnectAppResponse res = new org.openapis.openapi.models.operations.UpdateConnectAppResponse() {{
            apiV2010AccountConnectApp = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountConnectApp out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountConnectApp.class);
                res.apiV2010AccountConnectApp = out;
            }
        }

        return res;
    }

    /**
     * Update an incoming-phone-number instance.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateIncomingPhoneNumberResponse updateIncomingPhoneNumber(org.openapis.openapi.models.operations.UpdateIncomingPhoneNumberRequest request) throws Exception {
        String baseUrl = UPDATE_INCOMING_PHONE_NUMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateIncomingPhoneNumberPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateIncomingPhoneNumberResponse res = new org.openapis.openapi.models.operations.UpdateIncomingPhoneNumberResponse() {{
            apiV2010AccountIncomingPhoneNumber = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountIncomingPhoneNumber.class);
                res.apiV2010AccountIncomingPhoneNumber = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateKeyResponse updateKey(org.openapis.openapi.models.operations.UpdateKeyRequest request) throws Exception {
        String baseUrl = UPDATE_KEY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateKeyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateKeyResponse res = new org.openapis.openapi.models.operations.UpdateKeyResponse() {{
            apiV2010AccountKey = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountKey.class);
                res.apiV2010AccountKey = out;
            }
        }

        return res;
    }

    /**
     * Dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateMemberResponse updateMember(org.openapis.openapi.models.operations.UpdateMemberRequest request) throws Exception {
        String baseUrl = UPDATE_MEMBER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateMemberPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateMemberResponse res = new org.openapis.openapi.models.operations.UpdateMemberResponse() {{
            apiV2010AccountQueueMember = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountQueueMember out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountQueueMember.class);
                res.apiV2010AccountQueueMember = out;
            }
        }

        return res;
    }

    /**
     * To redact a message-body from a post-flight message record, post to the message instance resource with an empty body
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateMessageResponse updateMessage(org.openapis.openapi.models.operations.UpdateMessageRequest request) throws Exception {
        String baseUrl = UPDATE_MESSAGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateMessagePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateMessageResponse res = new org.openapis.openapi.models.operations.UpdateMessageResponse() {{
            apiV2010AccountMessage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountMessage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountMessage.class);
                res.apiV2010AccountMessage = out;
            }
        }

        return res;
    }

    /**
     * Updates the caller-id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateOutgoingCallerIdResponse updateOutgoingCallerId(org.openapis.openapi.models.operations.UpdateOutgoingCallerIdRequest request) throws Exception {
        String baseUrl = UPDATE_OUTGOING_CALLER_ID_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateOutgoingCallerIdPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateOutgoingCallerIdResponse res = new org.openapis.openapi.models.operations.UpdateOutgoingCallerIdResponse() {{
            apiV2010AccountOutgoingCallerId = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountOutgoingCallerId out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountOutgoingCallerId.class);
                res.apiV2010AccountOutgoingCallerId = out;
            }
        }

        return res;
    }

    /**
     * Update the properties of the participant
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateParticipantResponse updateParticipant(org.openapis.openapi.models.operations.UpdateParticipantRequest request) throws Exception {
        String baseUrl = UPDATE_PARTICIPANT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateParticipantPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateParticipantResponse res = new org.openapis.openapi.models.operations.UpdateParticipantResponse() {{
            apiV2010AccountConferenceParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountConferenceParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountConferenceParticipant.class);
                res.apiV2010AccountConferenceParticipant = out;
            }
        }

        return res;
    }

    /**
     * update an instance of payments with different phases of payment flows.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePaymentsResponse updatePayments(org.openapis.openapi.models.operations.UpdatePaymentsRequest request) throws Exception {
        String baseUrl = UPDATE_PAYMENTS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdatePaymentsPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdatePaymentsResponse res = new org.openapis.openapi.models.operations.UpdatePaymentsResponse() {{
            apiV2010AccountCallPayments = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallPayments out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallPayments.class);
                res.apiV2010AccountCallPayments = out;
            }
        }

        return res;
    }

    /**
     * Update the queue with the new parameters
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateQueueResponse updateQueue(org.openapis.openapi.models.operations.UpdateQueueRequest request) throws Exception {
        String baseUrl = UPDATE_QUEUE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateQueuePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateQueueResponse res = new org.openapis.openapi.models.operations.UpdateQueueResponse() {{
            apiV2010AccountQueue = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountQueue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountQueue.class);
                res.apiV2010AccountQueue = out;
            }
        }

        return res;
    }

    /**
     * Update a short code with the following parameters
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateShortCodeResponse updateShortCode(org.openapis.openapi.models.operations.UpdateShortCodeRequest request) throws Exception {
        String baseUrl = UPDATE_SHORT_CODE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateShortCodePathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateShortCodeResponse res = new org.openapis.openapi.models.operations.UpdateShortCodeResponse() {{
            apiV2010AccountShortCode = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountShortCode out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountShortCode.class);
                res.apiV2010AccountShortCode = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateSigningKeyResponse updateSigningKey(org.openapis.openapi.models.operations.UpdateSigningKeyRequest request) throws Exception {
        String baseUrl = UPDATE_SIGNING_KEY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSigningKeyPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSigningKeyResponse res = new org.openapis.openapi.models.operations.UpdateSigningKeyResponse() {{
            apiV2010AccountSigningKey = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSigningKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSigningKey.class);
                res.apiV2010AccountSigningKey = out;
            }
        }

        return res;
    }

    /**
     * Update a credential resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSipCredentialResponse updateSipCredential(org.openapis.openapi.models.operations.UpdateSipCredentialRequest request) throws Exception {
        String baseUrl = UPDATE_SIP_CREDENTIAL_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSipCredentialPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSipCredentialResponse res = new org.openapis.openapi.models.operations.UpdateSipCredentialResponse() {{
            apiV2010AccountSipSipCredentialListSipCredential = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialListSipCredential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialListSipCredential.class);
                res.apiV2010AccountSipSipCredentialListSipCredential = out;
            }
        }

        return res;
    }

    /**
     * Update a Credential List
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSipCredentialListResponse updateSipCredentialList(org.openapis.openapi.models.operations.UpdateSipCredentialListRequest request) throws Exception {
        String baseUrl = UPDATE_SIP_CREDENTIAL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSipCredentialListPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSipCredentialListResponse res = new org.openapis.openapi.models.operations.UpdateSipCredentialListResponse() {{
            apiV2010AccountSipSipCredentialList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipCredentialList.class);
                res.apiV2010AccountSipSipCredentialList = out;
            }
        }

        return res;
    }

    /**
     * Update the attributes of a domain
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSipDomainResponse updateSipDomain(org.openapis.openapi.models.operations.UpdateSipDomainRequest request) throws Exception {
        String baseUrl = UPDATE_SIP_DOMAIN_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSipDomainPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSipDomainResponse res = new org.openapis.openapi.models.operations.UpdateSipDomainResponse() {{
            apiV2010AccountSipSipDomain = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomain out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipDomain.class);
                res.apiV2010AccountSipSipDomain = out;
            }
        }

        return res;
    }

    /**
     * Rename an IpAccessControlList
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSipIpAccessControlListResponse updateSipIpAccessControlList(org.openapis.openapi.models.operations.UpdateSipIpAccessControlListRequest request) throws Exception {
        String baseUrl = UPDATE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSipIpAccessControlListPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSipIpAccessControlListResponse res = new org.openapis.openapi.models.operations.UpdateSipIpAccessControlListResponse() {{
            apiV2010AccountSipSipIpAccessControlList = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlList.class);
                res.apiV2010AccountSipSipIpAccessControlList = out;
            }
        }

        return res;
    }

    /**
     * Update an IpAddress resource.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSipIpAddressResponse updateSipIpAddress(org.openapis.openapi.models.operations.UpdateSipIpAddressRequest request) throws Exception {
        String baseUrl = UPDATE_SIP_IP_ADDRESS_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSipIpAddressPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSipIpAddressResponse res = new org.openapis.openapi.models.operations.UpdateSipIpAddressResponse() {{
            apiV2010AccountSipSipIpAccessControlListSipIpAddress = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlListSipIpAddress out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountSipSipIpAccessControlListSipIpAddress.class);
                res.apiV2010AccountSipSipIpAccessControlListSipIpAddress = out;
            }
        }

        return res;
    }

    /**
     * Stop a Siprec using either the SID of the Siprec resource or the `name` used when creating the resource
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSiprecResponse updateSiprec(org.openapis.openapi.models.operations.UpdateSiprecRequest request) throws Exception {
        String baseUrl = UPDATE_SIPREC_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSiprecPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSiprecResponse res = new org.openapis.openapi.models.operations.UpdateSiprecResponse() {{
            apiV2010AccountCallSiprec = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallSiprec out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallSiprec.class);
                res.apiV2010AccountCallSiprec = out;
            }
        }

        return res;
    }

    /**
     * Stop a Stream using either the SID of the Stream resource or the `name` used when creating the resource
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateStreamResponse updateStream(org.openapis.openapi.models.operations.UpdateStreamRequest request) throws Exception {
        String baseUrl = UPDATE_STREAM_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateStreamPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Streams/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateStreamResponse res = new org.openapis.openapi.models.operations.UpdateStreamResponse() {{
            apiV2010AccountCallStream = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountCallStream out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountCallStream.class);
                res.apiV2010AccountCallStream = out;
            }
        }

        return res;
    }

    /**
     * Update an instance of a usage trigger
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUsageTriggerResponse updateUsageTrigger(org.openapis.openapi.models.operations.UpdateUsageTriggerRequest request) throws Exception {
        String baseUrl = UPDATE_USAGE_TRIGGER_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUsageTriggerPathParams.class, baseUrl, "/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUsageTriggerResponse res = new org.openapis.openapi.models.operations.UpdateUsageTriggerResponse() {{
            apiV2010AccountUsageUsageTrigger = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiV2010AccountUsageUsageTrigger out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiV2010AccountUsageUsageTrigger.class);
                res.apiV2010AccountUsageUsageTrigger = out;
            }
        }

        return res;
    }
}