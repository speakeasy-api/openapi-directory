/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Service - `Service` is the root object of Google API service configuration (service config). It describes the basic information about a logical service, such as the service name and the user-facing title, and delegates other aspects to sub-sections. Each sub-section is either a proto message or a repeated proto message that configures a specific aspect, such as auth. For more information, see each proto message definition. Example: type: google.api.Service name: calendar.googleapis.com title: Google Calendar API apis: - name: google.calendar.v3.Calendar visibility: rules: - selector: "google.calendar.v3.*" restriction: PREVIEW backend: rules: - selector: "google.calendar.v3.*" address: calendar.example.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: "*" requirements: provider_id: google_calendar_auth
 */
public class Service {
    /**
     * A list of API interfaces exported by this service. Only the `name` field of the google.protobuf.Api needs to be provided by the configuration author, as the remaining fields will be derived from the IDL during the normalization process. It is an error to specify an API interface here which cannot be resolved against the associated IDL files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apis")
    public Api[] apis;
    public Service withApis(Api[] apis) {
        this.apis = apis;
        return this;
    }
    
    /**
     * `Authentication` defines the authentication configuration for API methods provided by an API service. Example: name: calendar.googleapis.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: "*" requirements: provider_id: google_calendar_auth - selector: google.calendar.Delegate oauth: canonical_scopes: https://www.googleapis.com/auth/calendar.read
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication")
    public Authentication authentication;
    public Service withAuthentication(Authentication authentication) {
        this.authentication = authentication;
        return this;
    }
    
    /**
     * `Backend` defines the backend configuration for a service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backend")
    public Backend backend;
    public Service withBackend(Backend backend) {
        this.backend = backend;
        return this;
    }
    
    /**
     * Billing related configuration of the service. The following example shows how to configure monitored resources and metrics for billing, `consumer_destinations` is the only supported destination and the monitored resources need at least one label key `cloud.googleapis.com/location` to indicate the location of the billing usage, using different monitored resources between monitoring and billing is recommended so they can be evolved independently: monitored_resources: - type: library.googleapis.com/billing_branch labels: - key: cloud.googleapis.com/location description: | Predefined label to support billing location restriction. - key: city description: | Custom label to define the city where the library branch is located in. - key: name description: Custom label to define the name of the library branch. metrics: - name: library.googleapis.com/book/borrowed_count metric_kind: DELTA value_type: INT64 unit: "1" billing: consumer_destinations: - monitored_resource: library.googleapis.com/billing_branch metrics: - library.googleapis.com/book/borrowed_count
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing")
    public Billing billing;
    public Service withBilling(Billing billing) {
        this.billing = billing;
        return this;
    }
    
    /**
     * Obsolete. Do not use. This field has no semantic meaning. The service config compiler always sets this field to `3`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configVersion")
    public Long configVersion;
    public Service withConfigVersion(Long configVersion) {
        this.configVersion = configVersion;
        return this;
    }
    
    /**
     * `Context` defines which contexts an API requests. Example: context: rules: - selector: "*" requested: - google.rpc.context.ProjectContext - google.rpc.context.OriginContext The above specifies that all methods in the API request `google.rpc.context.ProjectContext` and `google.rpc.context.OriginContext`. Available context types are defined in package `google.rpc.context`. This also provides mechanism to allowlist any protobuf message extension that can be sent in grpc metadata using \u201cx-goog-ext--bin\u201d and \u201cx-goog-ext--jspb\u201d format. For example, list any service specific protobuf types that can appear in grpc metadata as follows in your yaml file: Example: context: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allowed_request_extensions: - google.foo.v1.NewExtension allowed_response_extensions: - google.foo.v1.NewExtension You can also specify extension ID instead of fully qualified extension name here.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    public Context context;
    public Service withContext(Context context) {
        this.context = context;
        return this;
    }
    
    /**
     * Selects and configures the service controller used by the service. Example: control: environment: servicecontrol.googleapis.com
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("control")
    public Control control;
    public Service withControl(Control control) {
        this.control = control;
        return this;
    }
    
    /**
     * Customize service error responses. For example, list any service specific protobuf types that can appear in error detail lists of error responses. Example: custom_error: types: - google.foo.v1.CustomError - google.foo.v1.AnotherError
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customError")
    public CustomError customError;
    public Service withCustomError(CustomError customError) {
        this.customError = customError;
        return this;
    }
    
    /**
     * `Documentation` provides the information for describing a service. Example: documentation: summary: &gt; The Google Calendar API gives access to most calendar features. pages: - name: Overview content: (== include google/foo/overview.md ==) - name: Tutorial content: (== include google/foo/tutorial.md ==) subpages; - name: Java content: (== include google/foo/tutorial_java.md ==) rules: - selector: google.calendar.Calendar.Get description: &gt; ... - selector: google.calendar.Calendar.Put description: &gt; ... Documentation is provided in markdown syntax. In addition to standard markdown features, definition lists, tables and fenced code blocks are supported. Section headers can be provided and are interpreted relative to the section nesting of the context where a documentation fragment is embedded. Documentation from the IDL is merged with documentation defined via the config at normalization time, where documentation provided by config rules overrides IDL provided. A number of constructs specific to the API platform are supported in documentation text. In order to reference a proto element, the following notation can be used: [fully.qualified.proto.name][] To override the display text used for the link, this can be used: [display text][fully.qualified.proto.name] Text can be excluded from doc using the following notation: (-- internal comment --) A few directives are available in documentation. Note that directives must appear on a single line to be properly identified. The `include` directive includes a markdown file from an external source: (== include path/to/file ==) The `resource_for` directive marks a message to be the resource of a collection in REST view. If it is not specified, tools attempt to infer the resource from the operations in a collection: (== resource_for v1.shelves.books ==) The directive `suppress_warning` does not directly affect documentation and is documented together with service config validation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentation")
    public Documentation documentation;
    public Service withDocumentation(Documentation documentation) {
        this.documentation = documentation;
        return this;
    }
    
    /**
     * Configuration for network endpoints. If this is empty, then an endpoint with the same name as the service is automatically generated to service all defined APIs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endpoints")
    public Endpoint[] endpoints;
    public Service withEndpoints(Endpoint[] endpoints) {
        this.endpoints = endpoints;
        return this;
    }
    
    /**
     * A list of all enum types included in this API service. Enums referenced directly or indirectly by the `apis` are automatically included. Enums which are not referenced but shall be included should be listed here by name by the configuration author. Example: enums: - name: google.someapi.v1.SomeEnum
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enums")
    public Enum[] enums;
    public Service withEnums(Enum[] enums) {
        this.enums = enums;
        return this;
    }
    
    /**
     * Defines the HTTP configuration for an API service. It contains a list of HttpRule, each specifying the mapping of an RPC method to one or more HTTP REST API methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("http")
    public Http http;
    public Service withHttp(Http http) {
        this.http = http;
        return this;
    }
    
    /**
     * A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If empty, the server may choose to generate one instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Service withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the `activity_history` log is sent to both the producer and consumer projects, whereas the `purchase_history` log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logging")
    public Logging logging;
    public Service withLogging(Logging logging) {
        this.logging = logging;
        return this;
    }
    
    /**
     * Defines the logs used by this service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logs")
    public LogDescriptor[] logs;
    public Service withLogs(LogDescriptor[] logs) {
        this.logs = logs;
        return this;
    }
    
    /**
     * Defines the metrics used by this service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metrics")
    public MetricDescriptor[] metrics;
    public Service withMetrics(MetricDescriptor[] metrics) {
        this.metrics = metrics;
        return this;
    }
    
    /**
     * Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monitoredResources")
    public MonitoredResourceDescriptor[] monitoredResources;
    public Service withMonitoredResources(MonitoredResourceDescriptor[] monitoredResources) {
        this.monitoredResources = monitoredResources;
        return this;
    }
    
    /**
     * Monitoring configuration of the service. The example below shows how to configure monitored resources and metrics for monitoring. In the example, a monitored resource and two metrics are defined. The `library.googleapis.com/book/returned_count` metric is sent to both producer and consumer projects, whereas the `library.googleapis.com/book/num_overdue` metric is only sent to the consumer project. monitored_resources: - type: library.googleapis.com/Branch display_name: "Library Branch" description: "A branch of a library." launch_stage: GA labels: - key: resource_container description: "The Cloud container (ie. project id) for the Branch." - key: location description: "The location of the library branch." - key: branch_id description: "The id of the branch." metrics: - name: library.googleapis.com/book/returned_count display_name: "Books Returned" description: "The count of books that have been returned." launch_stage: GA metric_kind: DELTA value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." - name: library.googleapis.com/book/num_overdue display_name: "Books Overdue" description: "The current number of overdue books." launch_stage: GA metric_kind: GAUGE value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." monitoring: producer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count consumer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count - library.googleapis.com/book/num_overdue
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monitoring")
    public Monitoring monitoring;
    public Service withMonitoring(Monitoring monitoring) {
        this.monitoring = monitoring;
        return this;
    }
    
    /**
     * The service name, which is a DNS-like logical identifier for the service, such as `calendar.googleapis.com`. The service name typically goes through DNS verification to make sure the owner of the service also owns the DNS name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Service withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The Google project that owns this service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("producerProjectId")
    public String producerProjectId;
    public Service withProducerProjectId(String producerProjectId) {
        this.producerProjectId = producerProjectId;
        return this;
    }
    
    /**
     * This message configures the settings for publishing [Google Cloud Client libraries](https://cloud.google.com/apis/docs/cloud-client-libraries) generated from the service config.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publishing")
    public Publishing publishing;
    public Service withPublishing(Publishing publishing) {
        this.publishing = publishing;
        return this;
    }
    
    /**
     * Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: "1/min/{project}" # rate limit for consumer projects values: STANDARD: 10000 (The metric rules bind all methods to the read_calls metric, except for the UpdateBook and DeleteBook methods. These two methods are mapped to the write_calls metric, with the UpdateBook method consuming at twice rate as the DeleteBook method.) metric_rules: - selector: "*" metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quota")
    public Quota quota;
    public Service withQuota(Quota quota) {
        this.quota = quota;
        return this;
    }
    
    /**
     * Source information used to create a Service Config
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceInfo")
    public SourceInfo sourceInfo;
    public Service withSourceInfo(SourceInfo sourceInfo) {
        this.sourceInfo = sourceInfo;
        return this;
    }
    
    /**
     * ### System parameter configuration A system parameter is a special kind of parameter defined by the API system, not by an individual API. It is typically mapped to an HTTP header and/or a URL query parameter. This configuration specifies which methods change the names of the system parameters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("systemParameters")
    public SystemParameters systemParameters;
    public Service withSystemParameters(SystemParameters systemParameters) {
        this.systemParameters = systemParameters;
        return this;
    }
    
    /**
     * A list of all proto message types included in this API service. It serves similar purpose as [google.api.Service.types], except that these types are not needed by user-defined APIs. Therefore, they will not show up in the generated discovery doc. This field should only be used to define system APIs in ESF.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("systemTypes")
    public Type[] systemTypes;
    public Service withSystemTypes(Type[] systemTypes) {
        this.systemTypes = systemTypes;
        return this;
    }
    
    /**
     * The product title for this service, it is the name displayed in Google Cloud Console.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Service withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * A list of all proto message types included in this API service. Types referenced directly or indirectly by the `apis` are automatically included. Messages which are not referenced but shall be included, such as types used by the `google.protobuf.Any` type, should be listed here by name by the configuration author. Example: types: - name: google.protobuf.Int32
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("types")
    public Type[] types;
    public Service withTypes(Type[] types) {
        this.types = types;
        return this;
    }
    
    /**
     * Configuration controlling usage of a service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usage")
    public Usage usage;
    public Service withUsage(Usage usage) {
        this.usage = usage;
        return this;
    }
    
}
