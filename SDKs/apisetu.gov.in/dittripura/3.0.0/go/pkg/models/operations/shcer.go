// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ShcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type ShcerRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// ShcerRequestBodyFormatEnum - The format of the certificate in response.
type ShcerRequestBodyFormatEnum string

const (
	ShcerRequestBodyFormatEnumPdf ShcerRequestBodyFormatEnum = "pdf"
)

func (e ShcerRequestBodyFormatEnum) ToPointer() *ShcerRequestBodyFormatEnum {
	return &e
}

func (e *ShcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = ShcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShcerRequestBodyFormatEnum: %v", v)
	}
}

// ShcerRequestBody - Request format
type ShcerRequestBody struct {
	CertificateParameters *ShcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format ShcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Shcer504ApplicationJSONErrorEnum string

const (
	Shcer504ApplicationJSONErrorEnumGatewayTimeout Shcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Shcer504ApplicationJSONErrorEnum) ToPointer() *Shcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Shcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Shcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Shcer504ApplicationJSONErrorDescriptionEnum string

const (
	Shcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Shcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Shcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Shcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Shcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Shcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Shcer504ApplicationJSON - Gateway timeout
type Shcer504ApplicationJSON struct {
	Error            *Shcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Shcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Shcer503ApplicationJSONErrorEnum string

const (
	Shcer503ApplicationJSONErrorEnumServiceUnavailable Shcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Shcer503ApplicationJSONErrorEnum) ToPointer() *Shcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Shcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Shcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Shcer503ApplicationJSONErrorDescriptionEnum string

const (
	Shcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Shcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Shcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Shcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Shcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Shcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Shcer503ApplicationJSON - Service unavailable
type Shcer503ApplicationJSON struct {
	Error            *Shcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Shcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Shcer502ApplicationJSONErrorEnum string

const (
	Shcer502ApplicationJSONErrorEnumBadGatewy Shcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Shcer502ApplicationJSONErrorEnum) ToPointer() *Shcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Shcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Shcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Shcer502ApplicationJSONErrorDescriptionEnum string

const (
	Shcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Shcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Shcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Shcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Shcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Shcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Shcer502ApplicationJSON - Bad gateway
type Shcer502ApplicationJSON struct {
	Error            *Shcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Shcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Shcer500ApplicationJSONErrorEnum string

const (
	Shcer500ApplicationJSONErrorEnumInternalServerError Shcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Shcer500ApplicationJSONErrorEnum) ToPointer() *Shcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Shcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Shcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Shcer500ApplicationJSONErrorDescriptionEnum string

const (
	Shcer500ApplicationJSONErrorDescriptionEnumInternalServerError Shcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Shcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Shcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Shcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Shcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Shcer500ApplicationJSON - Internal server error
type Shcer500ApplicationJSON struct {
	Error            *Shcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Shcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Shcer404ApplicationJSONErrorEnum string

const (
	Shcer404ApplicationJSONErrorEnumRecordNotFound Shcer404ApplicationJSONErrorEnum = "record_not_found"
	Shcer404ApplicationJSONErrorEnumURLNotFound    Shcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Shcer404ApplicationJSONErrorEnum) ToPointer() *Shcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Shcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Shcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Shcer404ApplicationJSONErrorDescriptionEnum string

const (
	Shcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Shcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Shcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Shcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Shcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Shcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Shcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Shcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Shcer404ApplicationJSON - No record found
type Shcer404ApplicationJSON struct {
	Error            *Shcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Shcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Shcer401ApplicationJSONErrorEnum string

const (
	Shcer401ApplicationJSONErrorEnumInvalidAuthentication Shcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Shcer401ApplicationJSONErrorEnumInvalidAuthorization  Shcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Shcer401ApplicationJSONErrorEnum) ToPointer() *Shcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Shcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Shcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Shcer401ApplicationJSONErrorDescriptionEnum string

const (
	Shcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Shcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Shcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Shcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Shcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Shcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Shcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Shcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Shcer401ApplicationJSON - Unauthorized access
type Shcer401ApplicationJSON struct {
	Error            *Shcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Shcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Shcer400ApplicationJSONErrorEnum string

const (
	Shcer400ApplicationJSONErrorEnumMissingParameter Shcer400ApplicationJSONErrorEnum = "missing_parameter"
	Shcer400ApplicationJSONErrorEnumInvalidParameter Shcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Shcer400ApplicationJSONErrorEnumInvalidFormat    Shcer400ApplicationJSONErrorEnum = "invalid_format"
	Shcer400ApplicationJSONErrorEnumInvalidTxnid     Shcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Shcer400ApplicationJSONErrorEnumInvalidConsentid Shcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Shcer400ApplicationJSONErrorEnum) ToPointer() *Shcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Shcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Shcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Shcer400ApplicationJSONErrorDescriptionEnum string

const (
	Shcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Shcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Shcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Shcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Shcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Shcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Shcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Shcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Shcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Shcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Shcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Shcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Shcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Shcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Shcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Shcer400ApplicationJSON - Bad request
type Shcer400ApplicationJSON struct {
	Error            *Shcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Shcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type ShcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Shcer400ApplicationJSONObject *Shcer400ApplicationJSON
	// Unauthorized access
	Shcer401ApplicationJSONObject *Shcer401ApplicationJSON
	// No record found
	Shcer404ApplicationJSONObject *Shcer404ApplicationJSON
	// Internal server error
	Shcer500ApplicationJSONObject *Shcer500ApplicationJSON
	// Bad gateway
	Shcer502ApplicationJSONObject *Shcer502ApplicationJSON
	// Service unavailable
	Shcer503ApplicationJSONObject *Shcer503ApplicationJSON
	// Gateway timeout
	Shcer504ApplicationJSONObject *Shcer504ApplicationJSON
}
