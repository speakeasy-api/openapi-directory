/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.LocalDate;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetCommitteesRequest {
    /**
     * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=api_key")
    public String apiKey;
    public GetCommitteesRequest withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=candidate_id")
    public String[] candidateId;
    public GetCommitteesRequest withCandidateId(String[] candidateId) {
        this.candidateId = candidateId;
        return this;
    }
    
    /**
     * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=committee_id")
    public String[] committeeId;
    public GetCommitteesRequest withCommitteeId(String[] committeeId) {
        this.committeeId = committeeId;
        return this;
    }
    
    /**
     * The one-letter type code of the organization:
     *         - C communication cost
     *         - D delegate
     *         - E electioneering communication
     *         - H House
     *         - I independent expenditure filer (not a committee)
     *         - N PAC - nonqualified
     *         - O independent expenditure-only (super PACs)
     *         - P presidential
     *         - Q PAC - qualified
     *         - S Senate
     *         - U single candidate independent expenditure
     *         - V PAC with non-contribution account, nonqualified
     *         - W PAC with non-contribution account, qualified
     *         - X party, nonqualified
     *         - Y party, qualified
     *         - Z national party non-federal account
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=committee_type")
    public GetCommitteesCommitteeTypeEnum[] committeeType;
    public GetCommitteesRequest withCommitteeType(GetCommitteesCommitteeTypeEnum[] committeeType) {
        this.committeeType = committeeType;
        return this;
    }
    
    /**
     * A two year election cycle that the committee was active- (after original registration
     * date but before expiration date in Form 1s) The cycle begins with
     * an odd year and is named for its ending, even year.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cycle")
    public Integer[] cycle;
    public GetCommitteesRequest withCycle(Integer[] cycle) {
        this.cycle = cycle;
        return this;
    }
    
    /**
     * The one-letter designation code of the organization:
     *          - A authorized by a candidate
     *          - J joint fundraising committee
     *          - P principal campaign committee of a candidate
     *          - U unauthorized
     *          - B lobbyist/registrant PAC
     *          - D leadership PAC
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=designation")
    public GetCommitteesDesignationEnum[] designation;
    public GetCommitteesRequest withDesignation(GetCommitteesDesignationEnum[] designation) {
        this.designation = designation;
        return this;
    }
    
    /**
     * The one-letter 
     *     code of the filing frequency:
     *          - A Administratively terminated
     *          - D Debt
     *          - M Monthly filer
     *          - Q Quarterly filer
     *          - T Terminated
     *          - W Waived
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filing_frequency")
    public GetCommitteesFilingFrequencyEnum[] filingFrequency;
    public GetCommitteesRequest withFilingFrequency(GetCommitteesFilingFrequencyEnum[] filingFrequency) {
        this.filingFrequency = filingFrequency;
        return this;
    }
    
    /**
     * Filter for committees whose first Form 1 was received on or before this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_first_f1_date")
    public LocalDate maxFirstF1Date;
    public GetCommitteesRequest withMaxFirstF1Date(LocalDate maxFirstF1Date) {
        this.maxFirstF1Date = maxFirstF1Date;
        return this;
    }
    
    /**
     * Filter for committees whose first filing was received on or before this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_first_file_date")
    public LocalDate maxFirstFileDate;
    public GetCommitteesRequest withMaxFirstFileDate(LocalDate maxFirstFileDate) {
        this.maxFirstFileDate = maxFirstFileDate;
        return this;
    }
    
    /**
     * Filter for committees whose latest Form 1 was received on or before this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_last_f1_date")
    public LocalDate maxLastF1Date;
    public GetCommitteesRequest withMaxLastF1Date(LocalDate maxLastF1Date) {
        this.maxLastF1Date = maxLastF1Date;
        return this;
    }
    
    /**
     * Filter for committees whose first Form 1 was received on or after this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_first_f1_date")
    public LocalDate minFirstF1Date;
    public GetCommitteesRequest withMinFirstF1Date(LocalDate minFirstF1Date) {
        this.minFirstF1Date = minFirstF1Date;
        return this;
    }
    
    /**
     * Filter for committees whose first filing was received on or after this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_first_file_date")
    public LocalDate minFirstFileDate;
    public GetCommitteesRequest withMinFirstFileDate(LocalDate minFirstFileDate) {
        this.minFirstFileDate = minFirstFileDate;
        return this;
    }
    
    /**
     * Filter for committees whose latest Form 1 was received on or after this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_last_f1_date")
    public LocalDate minLastF1Date;
    public GetCommitteesRequest withMinLastF1Date(LocalDate minLastF1Date) {
        this.minLastF1Date = minLastF1Date;
        return this;
    }
    
    /**
     * The one-letter code for the kind for organization:
     *         - C corporation
     *         - L labor organization
     *         - M membership organization
     *         - T trade association
     *         - V cooperative
     *         - W corporation without capital stock
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=organization_type")
    public GetCommitteesOrganizationTypeEnum[] organizationType;
    public GetCommitteesRequest withOrganizationType(GetCommitteesOrganizationTypeEnum[] organizationType) {
        this.organizationType = organizationType;
        return this;
    }
    
    /**
     * For paginating through results, starting at page 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Integer page;
    public GetCommitteesRequest withPage(Integer page) {
        this.page = page;
        return this;
    }
    
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=party")
    public String[] party;
    public GetCommitteesRequest withParty(String[] party) {
        this.party = party;
        return this;
    }
    
    /**
     * The number of results returned per page. Defaults to 20.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Integer perPage;
    public GetCommitteesRequest withPerPage(Integer perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=q")
    public String[] q;
    public GetCommitteesRequest withQ(String[] q) {
        this.q = q;
        return this;
    }
    
    /**
     * Provide a field to sort by. Use `-` for descending order.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public GetCommitteesRequest withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Hide null values on sorted column(s).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_hide_null")
    public Boolean sortHideNull;
    public GetCommitteesRequest withSortHideNull(Boolean sortHideNull) {
        this.sortHideNull = sortHideNull;
        return this;
    }
    
    /**
     * Toggle that filters out all rows having sort column that is non-null
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_null_only")
    public Boolean sortNullOnly;
    public GetCommitteesRequest withSortNullOnly(Boolean sortNullOnly) {
        this.sortNullOnly = sortNullOnly;
        return this;
    }
    
    /**
     * Toggle that sorts null values last
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_nulls_last")
    public Boolean sortNullsLast;
    public GetCommitteesRequest withSortNullsLast(Boolean sortNullsLast) {
        this.sortNullsLast = sortNullsLast;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sponsor_candidate_id")
    public String[] sponsorCandidateId;
    public GetCommitteesRequest withSponsorCandidateId(String[] sponsorCandidateId) {
        this.sponsorCandidateId = sponsorCandidateId;
        return this;
    }
    
    /**
     * US state or territory
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state")
    public String[] state;
    public GetCommitteesRequest withState(String[] state) {
        this.state = state;
        return this;
    }
    
    /**
     * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=treasurer_name")
    public String[] treasurerName;
    public GetCommitteesRequest withTreasurerName(String[] treasurerName) {
        this.treasurerName = treasurerName;
        return this;
    }
    
    /**
     * A year that the committee was active\u2014 (after original registration date     or filing but before expiration date)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=year")
    public Integer[] year;
    public GetCommitteesRequest withYear(Integer[] year) {
        this.year = year;
        return this;
    }
    
}
