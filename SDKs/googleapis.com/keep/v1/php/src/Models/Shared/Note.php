<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Note - A single note.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Note
{
    /**
     * Output only. The attachments attached to this note.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Attachment> $attachments
     */
	#[\JMS\Serializer\Annotation\SerializedName('attachments')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Attachment>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $attachments = null;
    
    /**
     * The content of the note.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Section $body
     */
	#[\JMS\Serializer\Annotation\SerializedName('body')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Section')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Section $body = null;
    
    /**
     * Output only. When this note was created.
     * 
     * @var ?string $createTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('createTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createTime = null;
    
    /**
     * Output only. The resource name of this note. See general note on identifiers in KeepService.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Output only. The list of permissions set on the note. Contains at least one entry for the note owner.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Permission> $permissions
     */
	#[\JMS\Serializer\Annotation\SerializedName('permissions')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Permission>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $permissions = null;
    
    /**
     * The title of the note. Length must be less than 1,000 characters.
     * 
     * @var ?string $title
     */
	#[\JMS\Serializer\Annotation\SerializedName('title')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $title = null;
    
    /**
     * Output only. When this note was trashed. If `trashed`, the note is eventually deleted. If the note is not trashed, this field is not set (and the trashed field is `false`).
     * 
     * @var ?string $trashTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('trashTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $trashTime = null;
    
    /**
     * Output only. `true` if this note has been trashed. If trashed, the note is eventually deleted.
     * 
     * @var ?bool $trashed
     */
	#[\JMS\Serializer\Annotation\SerializedName('trashed')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $trashed = null;
    
    /**
     * Output only. When this note was last modified.
     * 
     * @var ?string $updateTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('updateTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $updateTime = null;
    
	public function __construct()
	{
		$this->attachments = null;
		$this->body = null;
		$this->createTime = null;
		$this->name = null;
		$this->permissions = null;
		$this->title = null;
		$this->trashTime = null;
		$this->trashed = null;
		$this->updateTime = null;
	}
}
