"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import destinationschema as shared_destinationschema
from ..shared import kinesisfirehoseoutputdescription as shared_kinesisfirehoseoutputdescription
from ..shared import kinesisstreamsoutputdescription as shared_kinesisstreamsoutputdescription
from ..shared import lambdaoutputdescription as shared_lambdaoutputdescription
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OutputDescription:
    r"""Describes the application output configuration, which includes the in-application stream name and the destination where the stream data is written. The destination can be an Amazon Kinesis stream or an Amazon Kinesis Firehose delivery stream."""
    
    destination_schema: Optional[shared_destinationschema.DestinationSchema] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationSchema'), 'exclude': lambda f: f is None }})  
    kinesis_firehose_output_description: Optional[shared_kinesisfirehoseoutputdescription.KinesisFirehoseOutputDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KinesisFirehoseOutputDescription'), 'exclude': lambda f: f is None }})  
    kinesis_streams_output_description: Optional[shared_kinesisstreamsoutputdescription.KinesisStreamsOutputDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KinesisStreamsOutputDescription'), 'exclude': lambda f: f is None }})  
    lambda_output_description: Optional[shared_lambdaoutputdescription.LambdaOutputDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LambdaOutputDescription'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    output_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputId'), 'exclude': lambda f: f is None }})  
    