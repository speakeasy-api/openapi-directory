<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class UserManagement 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Unlink User
     * 
     * Deletes a User and all of their data permanently, and invalidates any associated sessions, authorization codes, and access/refresh tokens
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridResponse
     */
	public function deleteUsersUserid(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deauthorize User
     * 
     * Deletes the User's stored vendor authorizations and credentials, invalidates any associated sessions, authorization codes, and access/refresh tokens.
     * 
     * All other User data is retained, and if the User is sent through the Link User flow in the future their account will be just as they left it.
     * 
     * No webhook events will be generated for a deauthorized user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridAuthorizationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridAuthorizationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridAuthorizationResponse
     */
	public function deleteUsersUseridAuthorization(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridAuthorizationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridAuthorizationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridAuthorizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/authorization', \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridAuthorizationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUsersUseridAuthorizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Link User
     * 
     * Creates an Enode Link session attached to the provided User ID. If this User does not exist, it will be created. The returned `linkState` gives the user short-lived access to Enode Link.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersUseridLinkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostUsersUseridLinkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUsersUseridLinkResponse
     */
	public function postUsersUseridLink(
        \OpenAPI\OpenAPI\Models\Operations\PostUsersUseridLinkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostUsersUseridLinkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUsersUseridLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/link', \OpenAPI\OpenAPI\Models\Operations\PostUsersUseridLinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUsersUseridLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postUsersUseridLink200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostUsersUseridLink200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}