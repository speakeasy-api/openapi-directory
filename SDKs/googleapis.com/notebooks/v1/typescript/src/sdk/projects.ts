/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new Environment.
   */
  notebooksProjectsLocationsEnvironmentsCreate(
    req: operations.NotebooksProjectsLocationsEnvironmentsCreateRequest,
    security: operations.NotebooksProjectsLocationsEnvironmentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsEnvironmentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsEnvironmentsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/environments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "environmentInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsEnvironmentsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsEnvironmentsCreateResponse =
        new operations.NotebooksProjectsLocationsEnvironmentsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists environments in a project.
   */
  notebooksProjectsLocationsEnvironmentsList(
    req: operations.NotebooksProjectsLocationsEnvironmentsListRequest,
    security: operations.NotebooksProjectsLocationsEnvironmentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsEnvironmentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsEnvironmentsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/environments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsEnvironmentsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsEnvironmentsListResponse =
        new operations.NotebooksProjectsLocationsEnvironmentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listEnvironmentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListEnvironmentsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Execution in a given project and location.
   */
  notebooksProjectsLocationsExecutionsCreate(
    req: operations.NotebooksProjectsLocationsExecutionsCreateRequest,
    security: operations.NotebooksProjectsLocationsExecutionsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsExecutionsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsExecutionsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/executions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "executionInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsExecutionsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsExecutionsCreateResponse =
        new operations.NotebooksProjectsLocationsExecutionsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists executions in a given project and location
   */
  notebooksProjectsLocationsExecutionsList(
    req: operations.NotebooksProjectsLocationsExecutionsListRequest,
    security: operations.NotebooksProjectsLocationsExecutionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsExecutionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsExecutionsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/executions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsExecutionsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsExecutionsListResponse =
        new operations.NotebooksProjectsLocationsExecutionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listExecutionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListExecutionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Instance in a given project and location.
   */
  notebooksProjectsLocationsInstancesCreate(
    req: operations.NotebooksProjectsLocationsInstancesCreateRequest,
    security: operations.NotebooksProjectsLocationsInstancesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsInstancesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/instances",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instanceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesCreateResponse =
        new operations.NotebooksProjectsLocationsInstancesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Check if a notebook instance is healthy.
   */
  notebooksProjectsLocationsInstancesGetInstanceHealth(
    req: operations.NotebooksProjectsLocationsInstancesGetInstanceHealthRequest,
    security: operations.NotebooksProjectsLocationsInstancesGetInstanceHealthSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesGetInstanceHealthResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsInstancesGetInstanceHealthRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:getInstanceHealth",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesGetInstanceHealthSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesGetInstanceHealthResponse =
        new operations.NotebooksProjectsLocationsInstancesGetInstanceHealthResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInstanceHealthResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetInstanceHealthResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Check if a notebook instance is upgradable.
   */
  notebooksProjectsLocationsInstancesIsUpgradeable(
    req: operations.NotebooksProjectsLocationsInstancesIsUpgradeableRequest,
    security: operations.NotebooksProjectsLocationsInstancesIsUpgradeableSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesIsUpgradeableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsInstancesIsUpgradeableRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{notebookInstance}:isUpgradeable",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesIsUpgradeableSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesIsUpgradeableResponse =
        new operations.NotebooksProjectsLocationsInstancesIsUpgradeableResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.isInstanceUpgradeableResponse = utils.objectToClass(
              httpRes?.data,
              shared.IsInstanceUpgradeableResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists instances in a given project and location.
   */
  notebooksProjectsLocationsInstancesList(
    req: operations.NotebooksProjectsLocationsInstancesListRequest,
    security: operations.NotebooksProjectsLocationsInstancesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsInstancesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/instances",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NotebooksProjectsLocationsInstancesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesListResponse =
        new operations.NotebooksProjectsLocationsInstancesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listInstancesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListInstancesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Registers an existing legacy notebook instance to the Notebooks API server. Legacy instances are instances created with the legacy Compute Engine calls. They are not manageable by the Notebooks API out of the box. This call makes these instances manageable by the Notebooks API.
   */
  notebooksProjectsLocationsInstancesRegister(
    req: operations.NotebooksProjectsLocationsInstancesRegisterRequest,
    security: operations.NotebooksProjectsLocationsInstancesRegisterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesRegisterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsInstancesRegisterRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/instances:register",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "registerInstanceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesRegisterSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesRegisterResponse =
        new operations.NotebooksProjectsLocationsInstancesRegisterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Allows notebook instances to report their latest instance information to the Notebooks API server. The server will merge the reported information to the instance metadata store. Do not use this method directly.
   */
  notebooksProjectsLocationsInstancesReport(
    req: operations.NotebooksProjectsLocationsInstancesReportRequest,
    security: operations.NotebooksProjectsLocationsInstancesReportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesReportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsInstancesReportRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:report", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "reportInstanceInfoRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesReportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesReportResponse =
        new operations.NotebooksProjectsLocationsInstancesReportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Rollbacks a notebook instance to the previous version.
   */
  notebooksProjectsLocationsInstancesRollback(
    req: operations.NotebooksProjectsLocationsInstancesRollbackRequest,
    security: operations.NotebooksProjectsLocationsInstancesRollbackSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesRollbackResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsInstancesRollbackRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:rollback", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "rollbackInstanceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesRollbackSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesRollbackResponse =
        new operations.NotebooksProjectsLocationsInstancesRollbackResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the guest accelerators of a single Instance.
   */
  notebooksProjectsLocationsInstancesSetAccelerator(
    req: operations.NotebooksProjectsLocationsInstancesSetAcceleratorRequest,
    security: operations.NotebooksProjectsLocationsInstancesSetAcceleratorSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesSetAcceleratorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsInstancesSetAcceleratorRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:setAccelerator",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setInstanceAcceleratorRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesSetAcceleratorSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesSetAcceleratorResponse =
        new operations.NotebooksProjectsLocationsInstancesSetAcceleratorResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Replaces all the labels of an Instance.
   */
  notebooksProjectsLocationsInstancesSetLabels(
    req: operations.NotebooksProjectsLocationsInstancesSetLabelsRequest,
    security: operations.NotebooksProjectsLocationsInstancesSetLabelsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesSetLabelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsInstancesSetLabelsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:setLabels", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setInstanceLabelsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesSetLabelsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesSetLabelsResponse =
        new operations.NotebooksProjectsLocationsInstancesSetLabelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the machine type of a single Instance.
   */
  notebooksProjectsLocationsInstancesSetMachineType(
    req: operations.NotebooksProjectsLocationsInstancesSetMachineTypeRequest,
    security: operations.NotebooksProjectsLocationsInstancesSetMachineTypeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesSetMachineTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsInstancesSetMachineTypeRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:setMachineType",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setInstanceMachineTypeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesSetMachineTypeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesSetMachineTypeResponse =
        new operations.NotebooksProjectsLocationsInstancesSetMachineTypeResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Notebook Instance configurations.
   */
  notebooksProjectsLocationsInstancesUpdateConfig(
    req: operations.NotebooksProjectsLocationsInstancesUpdateConfigRequest,
    security: operations.NotebooksProjectsLocationsInstancesUpdateConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesUpdateConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsInstancesUpdateConfigRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:updateConfig",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateInstanceConfigRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesUpdateConfigSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesUpdateConfigResponse =
        new operations.NotebooksProjectsLocationsInstancesUpdateConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add/update metadata items for an instance.
   */
  notebooksProjectsLocationsInstancesUpdateMetadataItems(
    req: operations.NotebooksProjectsLocationsInstancesUpdateMetadataItemsRequest,
    security: operations.NotebooksProjectsLocationsInstancesUpdateMetadataItemsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesUpdateMetadataItemsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsInstancesUpdateMetadataItemsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:updateMetadataItems",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateInstanceMetadataItemsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesUpdateMetadataItemsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesUpdateMetadataItemsResponse =
        new operations.NotebooksProjectsLocationsInstancesUpdateMetadataItemsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateInstanceMetadataItemsResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdateInstanceMetadataItemsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the Shielded instance configuration of a single Instance.
   */
  notebooksProjectsLocationsInstancesUpdateShieldedInstanceConfig(
    req: operations.NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigRequest,
    security: operations.NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:updateShieldedInstanceConfig",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateShieldedInstanceConfigRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigResponse =
        new operations.NotebooksProjectsLocationsInstancesUpdateShieldedInstanceConfigResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Allows notebook instances to call this endpoint to upgrade themselves. Do not use this method directly.
   */
  notebooksProjectsLocationsInstancesUpgradeInternal(
    req: operations.NotebooksProjectsLocationsInstancesUpgradeInternalRequest,
    security: operations.NotebooksProjectsLocationsInstancesUpgradeInternalSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsInstancesUpgradeInternalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsInstancesUpgradeInternalRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:upgradeInternal",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "upgradeInstanceInternalRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsInstancesUpgradeInternalSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsInstancesUpgradeInternalResponse =
        new operations.NotebooksProjectsLocationsInstancesUpgradeInternalResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  notebooksProjectsLocationsList(
    req: operations.NotebooksProjectsLocationsListRequest,
    security: operations.NotebooksProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}/locations", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NotebooksProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsListResponse =
        new operations.NotebooksProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  notebooksProjectsLocationsOperationsCancel(
    req: operations.NotebooksProjectsLocationsOperationsCancelRequest,
    security: operations.NotebooksProjectsLocationsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsOperationsCancelRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:cancel", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsOperationsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsOperationsCancelResponse =
        new operations.NotebooksProjectsLocationsOperationsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  notebooksProjectsLocationsOperationsList(
    req: operations.NotebooksProjectsLocationsOperationsListRequest,
    security: operations.NotebooksProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsOperationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsOperationsListResponse =
        new operations.NotebooksProjectsLocationsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Runtime in a given project and location.
   */
  notebooksProjectsLocationsRuntimesCreate(
    req: operations.NotebooksProjectsLocationsRuntimesCreateRequest,
    security: operations.NotebooksProjectsLocationsRuntimesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsRuntimesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/runtimes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "runtimeInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsRuntimesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesCreateResponse =
        new operations.NotebooksProjectsLocationsRuntimesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Diagnostic File and runs Diagnostic Tool given a Runtime.
   */
  notebooksProjectsLocationsRuntimesDiagnose(
    req: operations.NotebooksProjectsLocationsRuntimesDiagnoseRequest,
    security: operations.NotebooksProjectsLocationsRuntimesDiagnoseSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesDiagnoseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsRuntimesDiagnoseRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:diagnose", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "diagnoseRuntimeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsRuntimesDiagnoseSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesDiagnoseResponse =
        new operations.NotebooksProjectsLocationsRuntimesDiagnoseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
   */
  notebooksProjectsLocationsRuntimesGetIamPolicy(
    req: operations.NotebooksProjectsLocationsRuntimesGetIamPolicyRequest,
    security: operations.NotebooksProjectsLocationsRuntimesGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsRuntimesGetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsRuntimesGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesGetIamPolicyResponse =
        new operations.NotebooksProjectsLocationsRuntimesGetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Runtimes in a given project and location.
   */
  notebooksProjectsLocationsRuntimesList(
    req: operations.NotebooksProjectsLocationsRuntimesListRequest,
    security: operations.NotebooksProjectsLocationsRuntimesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsRuntimesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/runtimes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NotebooksProjectsLocationsRuntimesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesListResponse =
        new operations.NotebooksProjectsLocationsRuntimesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRuntimesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListRuntimesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Notebook Runtime configuration.
   */
  notebooksProjectsLocationsRuntimesPatch(
    req: operations.NotebooksProjectsLocationsRuntimesPatchRequest,
    security: operations.NotebooksProjectsLocationsRuntimesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsRuntimesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "runtimeInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NotebooksProjectsLocationsRuntimesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesPatchResponse =
        new operations.NotebooksProjectsLocationsRuntimesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets an access token for the consumer service account that the customer attached to the runtime. Only accessible from the tenant instance.
   */
  notebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternal(
    req: operations.NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalRequest,
    security: operations.NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:refreshRuntimeTokenInternal",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "refreshRuntimeTokenInternalRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalResponse =
        new operations.NotebooksProjectsLocationsRuntimesRefreshRuntimeTokenInternalResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.refreshRuntimeTokenInternalResponse = utils.objectToClass(
              httpRes?.data,
              shared.RefreshRuntimeTokenInternalResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Report and process a runtime event.
   */
  notebooksProjectsLocationsRuntimesReportEvent(
    req: operations.NotebooksProjectsLocationsRuntimesReportEventRequest,
    security: operations.NotebooksProjectsLocationsRuntimesReportEventSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesReportEventResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsRuntimesReportEventRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:reportEvent",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "reportRuntimeEventRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsRuntimesReportEventSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesReportEventResponse =
        new operations.NotebooksProjectsLocationsRuntimesReportEventResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Resets a Managed Notebook Runtime.
   */
  notebooksProjectsLocationsRuntimesReset(
    req: operations.NotebooksProjectsLocationsRuntimesResetRequest,
    security: operations.NotebooksProjectsLocationsRuntimesResetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesResetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsRuntimesResetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:reset", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "resetRuntimeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NotebooksProjectsLocationsRuntimesResetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesResetResponse =
        new operations.NotebooksProjectsLocationsRuntimesResetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
   */
  notebooksProjectsLocationsRuntimesSetIamPolicy(
    req: operations.NotebooksProjectsLocationsRuntimesSetIamPolicyRequest,
    security: operations.NotebooksProjectsLocationsRuntimesSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsRuntimesSetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsRuntimesSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesSetIamPolicyResponse =
        new operations.NotebooksProjectsLocationsRuntimesSetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts a Managed Notebook Runtime. Perform "Start" on GPU instances; "Resume" on CPU instances See: https://cloud.google.com/compute/docs/instances/stop-start-instance https://cloud.google.com/compute/docs/instances/suspend-resume-instance
   */
  notebooksProjectsLocationsRuntimesStart(
    req: operations.NotebooksProjectsLocationsRuntimesStartRequest,
    security: operations.NotebooksProjectsLocationsRuntimesStartSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesStartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsRuntimesStartRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:start", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "startRuntimeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NotebooksProjectsLocationsRuntimesStartSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesStartResponse =
        new operations.NotebooksProjectsLocationsRuntimesStartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Stops a Managed Notebook Runtime. Perform "Stop" on GPU instances; "Suspend" on CPU instances See: https://cloud.google.com/compute/docs/instances/stop-start-instance https://cloud.google.com/compute/docs/instances/suspend-resume-instance
   */
  notebooksProjectsLocationsRuntimesStop(
    req: operations.NotebooksProjectsLocationsRuntimesStopRequest,
    security: operations.NotebooksProjectsLocationsRuntimesStopSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesStopResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsRuntimesStopRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:stop", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "stopRuntimeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NotebooksProjectsLocationsRuntimesStopSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesStopResponse =
        new operations.NotebooksProjectsLocationsRuntimesStopResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Switch a Managed Notebook Runtime.
   */
  notebooksProjectsLocationsRuntimesSwitch(
    req: operations.NotebooksProjectsLocationsRuntimesSwitchRequest,
    security: operations.NotebooksProjectsLocationsRuntimesSwitchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesSwitchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsRuntimesSwitchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:switch", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "switchRuntimeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsRuntimesSwitchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesSwitchResponse =
        new operations.NotebooksProjectsLocationsRuntimesSwitchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
   */
  notebooksProjectsLocationsRuntimesTestIamPermissions(
    req: operations.NotebooksProjectsLocationsRuntimesTestIamPermissionsRequest,
    security: operations.NotebooksProjectsLocationsRuntimesTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.NotebooksProjectsLocationsRuntimesTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsRuntimesTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesTestIamPermissionsResponse =
        new operations.NotebooksProjectsLocationsRuntimesTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Upgrades a Managed Notebook Runtime to the latest version.
   */
  notebooksProjectsLocationsRuntimesUpgrade(
    req: operations.NotebooksProjectsLocationsRuntimesUpgradeRequest,
    security: operations.NotebooksProjectsLocationsRuntimesUpgradeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsRuntimesUpgradeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsRuntimesUpgradeRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:upgrade", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "upgradeRuntimeRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsRuntimesUpgradeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsRuntimesUpgradeResponse =
        new operations.NotebooksProjectsLocationsRuntimesUpgradeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Scheduled Notebook in a given project and location.
   */
  notebooksProjectsLocationsSchedulesCreate(
    req: operations.NotebooksProjectsLocationsSchedulesCreateRequest,
    security: operations.NotebooksProjectsLocationsSchedulesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsSchedulesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsSchedulesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/schedules",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "scheduleInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsSchedulesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsSchedulesCreateResponse =
        new operations.NotebooksProjectsLocationsSchedulesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes schedule and all underlying jobs
   */
  notebooksProjectsLocationsSchedulesDelete(
    req: operations.NotebooksProjectsLocationsSchedulesDeleteRequest,
    security: operations.NotebooksProjectsLocationsSchedulesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsSchedulesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsSchedulesDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsSchedulesDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsSchedulesDeleteResponse =
        new operations.NotebooksProjectsLocationsSchedulesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets details of schedule
   */
  notebooksProjectsLocationsSchedulesGet(
    req: operations.NotebooksProjectsLocationsSchedulesGetRequest,
    security: operations.NotebooksProjectsLocationsSchedulesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsSchedulesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsSchedulesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NotebooksProjectsLocationsSchedulesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsSchedulesGetResponse =
        new operations.NotebooksProjectsLocationsSchedulesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.schedule = utils.objectToClass(httpRes?.data, shared.Schedule);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists schedules in a given project and location.
   */
  notebooksProjectsLocationsSchedulesList(
    req: operations.NotebooksProjectsLocationsSchedulesListRequest,
    security: operations.NotebooksProjectsLocationsSchedulesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsSchedulesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsSchedulesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/schedules",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.NotebooksProjectsLocationsSchedulesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsSchedulesListResponse =
        new operations.NotebooksProjectsLocationsSchedulesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSchedulesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListSchedulesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Triggers execution of an existing schedule.
   */
  notebooksProjectsLocationsSchedulesTrigger(
    req: operations.NotebooksProjectsLocationsSchedulesTriggerRequest,
    security: operations.NotebooksProjectsLocationsSchedulesTriggerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.NotebooksProjectsLocationsSchedulesTriggerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NotebooksProjectsLocationsSchedulesTriggerRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:trigger", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.NotebooksProjectsLocationsSchedulesTriggerSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NotebooksProjectsLocationsSchedulesTriggerResponse =
        new operations.NotebooksProjectsLocationsSchedulesTriggerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
