<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OrderLineItemAppliedTax - Represents an applied portion of a tax to a line item in an order.
 * 
 * 
 * Order-scoped taxes automatically include the applied taxes in each line item.
 * Line item taxes must be referenced from any applicable line items.
 * The corresponding applied money is automatically computed, based on the
 * set of participating line items.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OrderLineItemAppliedTax
{
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * 
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $appliedMoney
     */
	#[\JMS\Serializer\Annotation\SerializedName('applied_money')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $appliedMoney = null;
    
    /**
     * The `uid` of the tax for which this applied tax represents. It must reference
     * 
     * a tax present in the `order.taxes` field.
     * 
     * This field is immutable. To change which taxes apply to a line item, delete and add a new
     * `OrderLineItemAppliedTax`.
     * 
     * @var string $taxUid
     */
	#[\JMS\Serializer\Annotation\SerializedName('tax_uid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $taxUid;
    
    /**
     * A unique ID that identifies the applied tax only within this order.
     * 
     * @var ?string $uid
     */
	#[\JMS\Serializer\Annotation\SerializedName('uid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $uid = null;
    
	public function __construct()
	{
		$this->appliedMoney = null;
		$this->taxUid = "";
		$this->uid = null;
	}
}
