// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type APIInformationsPathParams struct {
	// Name of the endpoint for which one wants information
	EndpointName string `pathParam:"style=simple,explode=false,name=endpointName"`
}

type APIInformationsRequest struct {
	PathParams APIInformationsPathParams
}

// APIInformations200ApplicationJSONActionEnum - The id of the action
type APIInformations200ApplicationJSONActionEnum string

const (
	APIInformations200ApplicationJSONActionEnumAPIInformations APIInformations200ApplicationJSONActionEnum = "apiInformations"
)

func (e *APIInformations200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "apiInformations":
		*e = APIInformations200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APIInformations200ApplicationJSONActionEnum: %s", s)
	}
}

// APIInformations200ApplicationJSONDataEndpoints - Supported path and version for that endpoint
type APIInformations200ApplicationJSONDataEndpoints struct {
	HTTPVerb interface{}        `json:"httpVerb,omitempty"`
	Version  *shared.APIVersion `json:"version,omitempty"`
}

type APIInformations200ApplicationJSONData struct {
	// Link to Rudder API description
	Documentation string `json:"documentation"`
	// The endpoint name as key and the endpoint description as value
	EndpointName string                                           `json:"endpointName"`
	Endpoints    []APIInformations200ApplicationJSONDataEndpoints `json:"endpoints"`
}

// APIInformations200ApplicationJSONResultEnum - Result of the request
type APIInformations200ApplicationJSONResultEnum string

const (
	APIInformations200ApplicationJSONResultEnumSuccess APIInformations200ApplicationJSONResultEnum = "success"
	APIInformations200ApplicationJSONResultEnumError   APIInformations200ApplicationJSONResultEnum = "error"
)

func (e *APIInformations200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = APIInformations200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APIInformations200ApplicationJSONResultEnum: %s", s)
	}
}

// APIInformations200ApplicationJSON - API Endpoint information
type APIInformations200ApplicationJSON struct {
	// The id of the action
	Action APIInformations200ApplicationJSONActionEnum `json:"action"`
	Data   APIInformations200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result APIInformations200ApplicationJSONResultEnum `json:"result"`
}

type APIInformationsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// API Endpoint information
	APIInformations200ApplicationJSONObject *APIInformations200ApplicationJSON
}
