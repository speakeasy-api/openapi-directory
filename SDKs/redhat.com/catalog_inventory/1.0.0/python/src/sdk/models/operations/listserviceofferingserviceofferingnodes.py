"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import errornotfound as shared_errornotfound
from ..shared import serviceofferingnodescollection as shared_serviceofferingnodescollection
from typing import Any, Optional


@dataclasses.dataclass
class ListServiceOfferingServiceOfferingNodesRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the resource"""  
    filter: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'deepObject', 'explode': True }})
    r"""Filter for querying collections."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The numbers of items to return per page."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The number of items to skip before starting to collect the result set."""  
    sort_by: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_by', 'style': 'deepObject', 'explode': True }})
    r"""The list of attribute and order to sort the result set by."""  
    

@dataclasses.dataclass
class ListServiceOfferingServiceOfferingNodesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error_not_found: Optional[shared_errornotfound.ErrorNotFound] = dataclasses.field(default=None)
    r"""Not found"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_offering_nodes_collection: Optional[shared_serviceofferingnodescollection.ServiceOfferingNodesCollection] = dataclasses.field(default=None)
    r"""ServiceOfferingNodes collection"""  
    