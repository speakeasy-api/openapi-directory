/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

/**
 * RecordingSettingsUpdateRecordingSettings - Meeting recording Settings
 */
public class RecordingSettingsUpdateRecordingSettings {
    /**
     * Approval type for the registration.&lt;br&gt;
     * `0`- Automatically approve the registration when a user registers.&lt;br&gt;
     * `1` - Manually approve or deny the registration of a user.&lt;br&gt;
     * `2` - No registration required to view the recording.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approval_type")
    @SpeakeasyMetadata("multipartForm:name=approval_type")
    public RecordingSettingsUpdateRecordingSettingsApprovalTypeEnum approvalType;
    public RecordingSettingsUpdateRecordingSettings withApprovalType(RecordingSettingsUpdateRecordingSettingsApprovalTypeEnum approvalType) {
        this.approvalType = approvalType;
        return this;
    }
    
    /**
     * Authentication domains.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_domains")
    @SpeakeasyMetadata("multipartForm:name=authentication_domains")
    public String authenticationDomains;
    public RecordingSettingsUpdateRecordingSettings withAuthenticationDomains(String authenticationDomains) {
        this.authenticationDomains = authenticationDomains;
        return this;
    }
    
    /**
     * Authentication Options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_option")
    @SpeakeasyMetadata("multipartForm:name=authentication_option")
    public String authenticationOption;
    public RecordingSettingsUpdateRecordingSettings withAuthenticationOption(String authenticationOption) {
        this.authenticationOption = authenticationOption;
        return this;
    }
    
    /**
     * Determine whether registration  isrequired to view the recording.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("on_demand")
    @SpeakeasyMetadata("multipartForm:name=on_demand")
    public Boolean onDemand;
    public RecordingSettingsUpdateRecordingSettings withOnDemand(Boolean onDemand) {
        this.onDemand = onDemand;
        return this;
    }
    
    /**
     * Enable password protection for the recording by setting a password. The password must have a minimum of **eight** characters with a mix of numbers, letters and special characters.&lt;br&gt;&lt;br&gt;
     * **Note:** If the account owner or the admin has set minimum password strength requirements for recordings via Account Settings, the password value provided here must meet those requirements. &lt;br&gt;&lt;br&gt;If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    @SpeakeasyMetadata("multipartForm:name=password")
    public String password;
    public RecordingSettingsUpdateRecordingSettings withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Only authenticated users can view.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_authentication")
    @SpeakeasyMetadata("multipartForm:name=recording_authentication")
    public Boolean recordingAuthentication;
    public RecordingSettingsUpdateRecordingSettings withRecordingAuthentication(Boolean recordingAuthentication) {
        this.recordingAuthentication = recordingAuthentication;
        return this;
    }
    
    /**
     * Send an email to host when someone registers to view the recording. This applies for On-demand recordings only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("send_email_to_host")
    @SpeakeasyMetadata("multipartForm:name=send_email_to_host")
    public Boolean sendEmailToHost;
    public RecordingSettingsUpdateRecordingSettings withSendEmailToHost(Boolean sendEmailToHost) {
        this.sendEmailToHost = sendEmailToHost;
        return this;
    }
    
    /**
     * Determine how the meeting recording is shared.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("share_recording")
    @SpeakeasyMetadata("multipartForm:name=share_recording")
    public RecordingSettingsUpdateRecordingSettingsShareRecordingEnum shareRecording;
    public RecordingSettingsUpdateRecordingSettings withShareRecording(RecordingSettingsUpdateRecordingSettingsShareRecordingEnum shareRecording) {
        this.shareRecording = shareRecording;
        return this;
    }
    
    /**
     * Show social share buttons on registration page. This applies for On-demand recordings only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_social_share_buttons")
    @SpeakeasyMetadata("multipartForm:name=show_social_share_buttons")
    public Boolean showSocialShareButtons;
    public RecordingSettingsUpdateRecordingSettings withShowSocialShareButtons(Boolean showSocialShareButtons) {
        this.showSocialShareButtons = showSocialShareButtons;
        return this;
    }
    
    /**
     * Name of the recording.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic")
    @SpeakeasyMetadata("multipartForm:name=topic")
    public String topic;
    public RecordingSettingsUpdateRecordingSettings withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Determine whether a viewer can download the recording file or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewer_download")
    @SpeakeasyMetadata("multipartForm:name=viewer_download")
    public Boolean viewerDownload;
    public RecordingSettingsUpdateRecordingSettings withViewerDownload(Boolean viewerDownload) {
        this.viewerDownload = viewerDownload;
        return this;
    }
    
}
