"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Tsp:
    r"""TSP operations"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def tsp(self) -> operations.TspResponse:
        r"""Get account's TSP information
        Get information on Telephony Service Provider on an account level.<br><br>
        **Scopes:** `tsp:read:admin` <br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        
        **Prerequisites:**<br>
        * A Pro or a higher plan.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tsp'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TspResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.Tsp200ApplicationJSON])
                res.tsp_200_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def tsp_update(self, request: operations.TspUpdateApplicationJSON) -> operations.TspUpdateResponse:
        r"""Update account's TSP information
        Update information of the Telephony Service Provider set up on an account.<br>
        **Prerequisites**:<br>
        TSP account option should be enabled.<br>
        **Scopes:** `tsp:write:admin`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tsp'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TspUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tsp_url_update(self, request: operations.TspURLUpdateRequest, security: operations.TspURLUpdateSecurity) -> operations.TspURLUpdateResponse:
        r"""Set global dial-in URL for a TSP user
        A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. <p></p>
        **Scopes:**`tsp:write:admin` `tsp:write`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TspURLUpdateRequest, base_url, '/users/{userId}/tsp/settings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TspURLUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def user_tsp(self, request: operations.UserTSPRequest) -> operations.UserTSPResponse:
        r"""Get a user's TSP account
        Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.<br><br>
        **Scopes:** `tsp:read:admin` `tsp:read`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserTSPRequest, base_url, '/users/{userId}/tsp/{tspId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserTSPResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UserTSPTSPAccount])
                res.tsp_account = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 404]:
            pass

        return res

    def user_tsp_create(self, request: operations.UserTSPCreateRequest) -> operations.UserTSPCreateResponse:
        r"""Add a user's TSP account
        Add a user's TSP account.<br><br>
        **Scopes:** `tsp:write:admin` `tsp:write`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserTSPCreateRequest, base_url, '/users/{userId}/tsp', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserTSPCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UserTSPCreateTSPAccountsList])
                res.tsp_accounts_list = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 404]:
            pass

        return res

    def user_tsp_delete(self, request: operations.UserTSPDeleteRequest) -> operations.UserTSPDeleteResponse:
        r"""Delete a user's TSP account
        Delete a user's TSP account.<br><br>
        **Scopes:** `tsp:write:admin` `tsp:write`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserTSPDeleteRequest, base_url, '/users/{userId}/tsp/{tspId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserTSPDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def user_tsp_update(self, request: operations.UserTSPUpdateRequest) -> operations.UserTSPUpdateResponse:
        r"""Update a TSP account
        Update a user's TSP account.<br><br>
        **Scopes:** `tsp:write:admin` `tsp:write`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserTSPUpdateRequest, base_url, '/users/{userId}/tsp/{tspId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserTSPUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def user_ts_ps(self, request: operations.UserTSPsRequest) -> operations.UserTSPsResponse:
        r"""List user's TSP accounts
        A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.<br><br>
        **Scopes:** `tsp:read:admin` `tsp:read`<br>
         
         **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UserTSPsRequest, base_url, '/users/{userId}/tsp', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserTSPsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UserTSPs200ApplicationJSON])
                res.user_ts_ps_200_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 404]:
            pass

        return res

    