// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ConnectCarrierRequestBodyType string

const (
	ConnectCarrierRequestBodyTypeConnectAccessWorldwideRequestBody   ConnectCarrierRequestBodyType = "connect_access_worldwide_request_body"
	ConnectCarrierRequestBodyTypeConnectAmazonBuyShippingRequestBody ConnectCarrierRequestBodyType = "connect_amazon_buy_shipping_request_body"
	ConnectCarrierRequestBodyTypeConnectAmazonShippingUk             ConnectCarrierRequestBodyType = "connect_amazon_shipping_uk"
	ConnectCarrierRequestBodyTypeConnectApcRequestBody               ConnectCarrierRequestBodyType = "connect_apc_request_body"
	ConnectCarrierRequestBodyTypeConnectAsendiaRequestBody           ConnectCarrierRequestBodyType = "connect_asendia_request_body"
	ConnectCarrierRequestBodyTypeConnectAustraliaPostRequestBody     ConnectCarrierRequestBodyType = "connect_australia_post_request_body"
	ConnectCarrierRequestBodyTypeConnectCanadaPostRequestBody        ConnectCarrierRequestBodyType = "connect_canada_post_request_body"
	ConnectCarrierRequestBodyTypeConnectDhlEcommerceRequestBody      ConnectCarrierRequestBodyType = "connect_dhl_ecommerce_request_body"
	ConnectCarrierRequestBodyTypeConnectDhlExpressRequestBody        ConnectCarrierRequestBodyType = "connect_dhl_express_request_body"
	ConnectCarrierRequestBodyTypeConnectDhlExpressAuRequestBody      ConnectCarrierRequestBodyType = "connect_dhl_express_au_request_body"
	ConnectCarrierRequestBodyTypeConnectDhlExpressCaRequestBody      ConnectCarrierRequestBodyType = "connect_dhl_express_ca_request_body"
	ConnectCarrierRequestBodyTypeConnectDhlExpressUkRequestBody      ConnectCarrierRequestBodyType = "connect_dhl_express_uk_request_body"
	ConnectCarrierRequestBodyTypeConnectDpdRequestBody               ConnectCarrierRequestBodyType = "connect_dpd_request_body"
	ConnectCarrierRequestBodyTypeConnectEndiciaRequestBody           ConnectCarrierRequestBodyType = "connect_endicia_request_body"
	ConnectCarrierRequestBodyTypeConnectFedexRequestBody             ConnectCarrierRequestBodyType = "connect_fedex_request_body"
	ConnectCarrierRequestBodyTypeConnectFedexUkRequestBody           ConnectCarrierRequestBodyType = "connect_fedex_uk_request_body"
	ConnectCarrierRequestBodyTypeConnectFirstmileRequestBody         ConnectCarrierRequestBodyType = "connect_firstmile_request_body"
	ConnectCarrierRequestBodyTypeConnectImexRequestBody              ConnectCarrierRequestBodyType = "connect_imex_request_body"
	ConnectCarrierRequestBodyTypeConnectNewgisticsRequestBody        ConnectCarrierRequestBodyType = "connect_newgistics_request_body"
	ConnectCarrierRequestBodyTypeConnectOntracRequestBody            ConnectCarrierRequestBodyType = "connect_ontrac_request_body"
	ConnectCarrierRequestBodyTypeConnectPurolatorRequestBody         ConnectCarrierRequestBodyType = "connect_purolator_request_body"
	ConnectCarrierRequestBodyTypeConnectRoyalMailRequestBody         ConnectCarrierRequestBodyType = "connect_royal_mail_request_body"
	ConnectCarrierRequestBodyTypeConnectRrDonnelleyRequestBody       ConnectCarrierRequestBodyType = "connect_rr_donnelley_request_body"
	ConnectCarrierRequestBodyTypeConnectSekoRequestBody              ConnectCarrierRequestBodyType = "connect_seko_request_body"
	ConnectCarrierRequestBodyTypeConnectSendleRequestBody            ConnectCarrierRequestBodyType = "connect_sendle_request_body"
	ConnectCarrierRequestBodyTypeConnectStampsRequestBody            ConnectCarrierRequestBodyType = "connect_stamps_request_body"
	ConnectCarrierRequestBodyTypeConnectUpsRequestBody               ConnectCarrierRequestBodyType = "connect_ups_request_body"
)

type ConnectCarrierRequestBody struct {
	ConnectAccessWorldwideRequestBody   *ConnectAccessWorldwideRequestBody
	ConnectAmazonBuyShippingRequestBody *ConnectAmazonBuyShippingRequestBody
	ConnectAmazonShippingUk             *ConnectAmazonShippingUk
	ConnectApcRequestBody               *ConnectApcRequestBody
	ConnectAsendiaRequestBody           *ConnectAsendiaRequestBody
	ConnectAustraliaPostRequestBody     *ConnectAustraliaPostRequestBody
	ConnectCanadaPostRequestBody        *ConnectCanadaPostRequestBody
	ConnectDhlEcommerceRequestBody      *ConnectDhlEcommerceRequestBody
	ConnectDhlExpressRequestBody        *ConnectDhlExpressRequestBody
	ConnectDhlExpressAuRequestBody      *ConnectDhlExpressAuRequestBody
	ConnectDhlExpressCaRequestBody      *ConnectDhlExpressCaRequestBody
	ConnectDhlExpressUkRequestBody      *ConnectDhlExpressUkRequestBody
	ConnectDpdRequestBody               *ConnectDpdRequestBody
	ConnectEndiciaRequestBody           *ConnectEndiciaRequestBody
	ConnectFedexRequestBody             *ConnectFedexRequestBody
	ConnectFedexUkRequestBody           *ConnectFedexUkRequestBody
	ConnectFirstmileRequestBody         *ConnectFirstmileRequestBody
	ConnectImexRequestBody              *ConnectImexRequestBody
	ConnectNewgisticsRequestBody        *ConnectNewgisticsRequestBody
	ConnectOntracRequestBody            *ConnectOntracRequestBody
	ConnectPurolatorRequestBody         *ConnectPurolatorRequestBody
	ConnectRoyalMailRequestBody         *ConnectRoyalMailRequestBody
	ConnectRrDonnelleyRequestBody       *ConnectRrDonnelleyRequestBody
	ConnectSekoRequestBody              *ConnectSekoRequestBody
	ConnectSendleRequestBody            *ConnectSendleRequestBody
	ConnectStampsRequestBody            *ConnectStampsRequestBody
	ConnectUpsRequestBody               *ConnectUpsRequestBody

	Type ConnectCarrierRequestBodyType
}

func CreateConnectCarrierRequestBodyConnectAccessWorldwideRequestBody(connectAccessWorldwideRequestBody ConnectAccessWorldwideRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectAccessWorldwideRequestBody

	return ConnectCarrierRequestBody{
		ConnectAccessWorldwideRequestBody: &connectAccessWorldwideRequestBody,
		Type:                              typ,
	}
}

func CreateConnectCarrierRequestBodyConnectAmazonBuyShippingRequestBody(connectAmazonBuyShippingRequestBody ConnectAmazonBuyShippingRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectAmazonBuyShippingRequestBody

	return ConnectCarrierRequestBody{
		ConnectAmazonBuyShippingRequestBody: &connectAmazonBuyShippingRequestBody,
		Type:                                typ,
	}
}

func CreateConnectCarrierRequestBodyConnectAmazonShippingUk(connectAmazonShippingUk ConnectAmazonShippingUk) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectAmazonShippingUk

	return ConnectCarrierRequestBody{
		ConnectAmazonShippingUk: &connectAmazonShippingUk,
		Type:                    typ,
	}
}

func CreateConnectCarrierRequestBodyConnectApcRequestBody(connectApcRequestBody ConnectApcRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectApcRequestBody

	return ConnectCarrierRequestBody{
		ConnectApcRequestBody: &connectApcRequestBody,
		Type:                  typ,
	}
}

func CreateConnectCarrierRequestBodyConnectAsendiaRequestBody(connectAsendiaRequestBody ConnectAsendiaRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectAsendiaRequestBody

	return ConnectCarrierRequestBody{
		ConnectAsendiaRequestBody: &connectAsendiaRequestBody,
		Type:                      typ,
	}
}

func CreateConnectCarrierRequestBodyConnectAustraliaPostRequestBody(connectAustraliaPostRequestBody ConnectAustraliaPostRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectAustraliaPostRequestBody

	return ConnectCarrierRequestBody{
		ConnectAustraliaPostRequestBody: &connectAustraliaPostRequestBody,
		Type:                            typ,
	}
}

func CreateConnectCarrierRequestBodyConnectCanadaPostRequestBody(connectCanadaPostRequestBody ConnectCanadaPostRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectCanadaPostRequestBody

	return ConnectCarrierRequestBody{
		ConnectCanadaPostRequestBody: &connectCanadaPostRequestBody,
		Type:                         typ,
	}
}

func CreateConnectCarrierRequestBodyConnectDhlEcommerceRequestBody(connectDhlEcommerceRequestBody ConnectDhlEcommerceRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectDhlEcommerceRequestBody

	return ConnectCarrierRequestBody{
		ConnectDhlEcommerceRequestBody: &connectDhlEcommerceRequestBody,
		Type:                           typ,
	}
}

func CreateConnectCarrierRequestBodyConnectDhlExpressRequestBody(connectDhlExpressRequestBody ConnectDhlExpressRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectDhlExpressRequestBody

	return ConnectCarrierRequestBody{
		ConnectDhlExpressRequestBody: &connectDhlExpressRequestBody,
		Type:                         typ,
	}
}

func CreateConnectCarrierRequestBodyConnectDhlExpressAuRequestBody(connectDhlExpressAuRequestBody ConnectDhlExpressAuRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectDhlExpressAuRequestBody

	return ConnectCarrierRequestBody{
		ConnectDhlExpressAuRequestBody: &connectDhlExpressAuRequestBody,
		Type:                           typ,
	}
}

func CreateConnectCarrierRequestBodyConnectDhlExpressCaRequestBody(connectDhlExpressCaRequestBody ConnectDhlExpressCaRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectDhlExpressCaRequestBody

	return ConnectCarrierRequestBody{
		ConnectDhlExpressCaRequestBody: &connectDhlExpressCaRequestBody,
		Type:                           typ,
	}
}

func CreateConnectCarrierRequestBodyConnectDhlExpressUkRequestBody(connectDhlExpressUkRequestBody ConnectDhlExpressUkRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectDhlExpressUkRequestBody

	return ConnectCarrierRequestBody{
		ConnectDhlExpressUkRequestBody: &connectDhlExpressUkRequestBody,
		Type:                           typ,
	}
}

func CreateConnectCarrierRequestBodyConnectDpdRequestBody(connectDpdRequestBody ConnectDpdRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectDpdRequestBody

	return ConnectCarrierRequestBody{
		ConnectDpdRequestBody: &connectDpdRequestBody,
		Type:                  typ,
	}
}

func CreateConnectCarrierRequestBodyConnectEndiciaRequestBody(connectEndiciaRequestBody ConnectEndiciaRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectEndiciaRequestBody

	return ConnectCarrierRequestBody{
		ConnectEndiciaRequestBody: &connectEndiciaRequestBody,
		Type:                      typ,
	}
}

func CreateConnectCarrierRequestBodyConnectFedexRequestBody(connectFedexRequestBody ConnectFedexRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectFedexRequestBody

	return ConnectCarrierRequestBody{
		ConnectFedexRequestBody: &connectFedexRequestBody,
		Type:                    typ,
	}
}

func CreateConnectCarrierRequestBodyConnectFedexUkRequestBody(connectFedexUkRequestBody ConnectFedexUkRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectFedexUkRequestBody

	return ConnectCarrierRequestBody{
		ConnectFedexUkRequestBody: &connectFedexUkRequestBody,
		Type:                      typ,
	}
}

func CreateConnectCarrierRequestBodyConnectFirstmileRequestBody(connectFirstmileRequestBody ConnectFirstmileRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectFirstmileRequestBody

	return ConnectCarrierRequestBody{
		ConnectFirstmileRequestBody: &connectFirstmileRequestBody,
		Type:                        typ,
	}
}

func CreateConnectCarrierRequestBodyConnectImexRequestBody(connectImexRequestBody ConnectImexRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectImexRequestBody

	return ConnectCarrierRequestBody{
		ConnectImexRequestBody: &connectImexRequestBody,
		Type:                   typ,
	}
}

func CreateConnectCarrierRequestBodyConnectNewgisticsRequestBody(connectNewgisticsRequestBody ConnectNewgisticsRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectNewgisticsRequestBody

	return ConnectCarrierRequestBody{
		ConnectNewgisticsRequestBody: &connectNewgisticsRequestBody,
		Type:                         typ,
	}
}

func CreateConnectCarrierRequestBodyConnectOntracRequestBody(connectOntracRequestBody ConnectOntracRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectOntracRequestBody

	return ConnectCarrierRequestBody{
		ConnectOntracRequestBody: &connectOntracRequestBody,
		Type:                     typ,
	}
}

func CreateConnectCarrierRequestBodyConnectPurolatorRequestBody(connectPurolatorRequestBody ConnectPurolatorRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectPurolatorRequestBody

	return ConnectCarrierRequestBody{
		ConnectPurolatorRequestBody: &connectPurolatorRequestBody,
		Type:                        typ,
	}
}

func CreateConnectCarrierRequestBodyConnectRoyalMailRequestBody(connectRoyalMailRequestBody ConnectRoyalMailRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectRoyalMailRequestBody

	return ConnectCarrierRequestBody{
		ConnectRoyalMailRequestBody: &connectRoyalMailRequestBody,
		Type:                        typ,
	}
}

func CreateConnectCarrierRequestBodyConnectRrDonnelleyRequestBody(connectRrDonnelleyRequestBody ConnectRrDonnelleyRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectRrDonnelleyRequestBody

	return ConnectCarrierRequestBody{
		ConnectRrDonnelleyRequestBody: &connectRrDonnelleyRequestBody,
		Type:                          typ,
	}
}

func CreateConnectCarrierRequestBodyConnectSekoRequestBody(connectSekoRequestBody ConnectSekoRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectSekoRequestBody

	return ConnectCarrierRequestBody{
		ConnectSekoRequestBody: &connectSekoRequestBody,
		Type:                   typ,
	}
}

func CreateConnectCarrierRequestBodyConnectSendleRequestBody(connectSendleRequestBody ConnectSendleRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectSendleRequestBody

	return ConnectCarrierRequestBody{
		ConnectSendleRequestBody: &connectSendleRequestBody,
		Type:                     typ,
	}
}

func CreateConnectCarrierRequestBodyConnectStampsRequestBody(connectStampsRequestBody ConnectStampsRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectStampsRequestBody

	return ConnectCarrierRequestBody{
		ConnectStampsRequestBody: &connectStampsRequestBody,
		Type:                     typ,
	}
}

func CreateConnectCarrierRequestBodyConnectUpsRequestBody(connectUpsRequestBody ConnectUpsRequestBody) ConnectCarrierRequestBody {
	typ := ConnectCarrierRequestBodyTypeConnectUpsRequestBody

	return ConnectCarrierRequestBody{
		ConnectUpsRequestBody: &connectUpsRequestBody,
		Type:                  typ,
	}
}

func (u *ConnectCarrierRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	connectAccessWorldwideRequestBody := new(ConnectAccessWorldwideRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectAccessWorldwideRequestBody); err == nil {
		u.ConnectAccessWorldwideRequestBody = connectAccessWorldwideRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectAccessWorldwideRequestBody
		return nil
	}

	connectAmazonBuyShippingRequestBody := new(ConnectAmazonBuyShippingRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectAmazonBuyShippingRequestBody); err == nil {
		u.ConnectAmazonBuyShippingRequestBody = connectAmazonBuyShippingRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectAmazonBuyShippingRequestBody
		return nil
	}

	connectAmazonShippingUk := new(ConnectAmazonShippingUk)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectAmazonShippingUk); err == nil {
		u.ConnectAmazonShippingUk = connectAmazonShippingUk
		u.Type = ConnectCarrierRequestBodyTypeConnectAmazonShippingUk
		return nil
	}

	connectApcRequestBody := new(ConnectApcRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectApcRequestBody); err == nil {
		u.ConnectApcRequestBody = connectApcRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectApcRequestBody
		return nil
	}

	connectAsendiaRequestBody := new(ConnectAsendiaRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectAsendiaRequestBody); err == nil {
		u.ConnectAsendiaRequestBody = connectAsendiaRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectAsendiaRequestBody
		return nil
	}

	connectAustraliaPostRequestBody := new(ConnectAustraliaPostRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectAustraliaPostRequestBody); err == nil {
		u.ConnectAustraliaPostRequestBody = connectAustraliaPostRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectAustraliaPostRequestBody
		return nil
	}

	connectCanadaPostRequestBody := new(ConnectCanadaPostRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectCanadaPostRequestBody); err == nil {
		u.ConnectCanadaPostRequestBody = connectCanadaPostRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectCanadaPostRequestBody
		return nil
	}

	connectDhlEcommerceRequestBody := new(ConnectDhlEcommerceRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectDhlEcommerceRequestBody); err == nil {
		u.ConnectDhlEcommerceRequestBody = connectDhlEcommerceRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectDhlEcommerceRequestBody
		return nil
	}

	connectDhlExpressRequestBody := new(ConnectDhlExpressRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectDhlExpressRequestBody); err == nil {
		u.ConnectDhlExpressRequestBody = connectDhlExpressRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectDhlExpressRequestBody
		return nil
	}

	connectDhlExpressAuRequestBody := new(ConnectDhlExpressAuRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectDhlExpressAuRequestBody); err == nil {
		u.ConnectDhlExpressAuRequestBody = connectDhlExpressAuRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectDhlExpressAuRequestBody
		return nil
	}

	connectDhlExpressCaRequestBody := new(ConnectDhlExpressCaRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectDhlExpressCaRequestBody); err == nil {
		u.ConnectDhlExpressCaRequestBody = connectDhlExpressCaRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectDhlExpressCaRequestBody
		return nil
	}

	connectDhlExpressUkRequestBody := new(ConnectDhlExpressUkRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectDhlExpressUkRequestBody); err == nil {
		u.ConnectDhlExpressUkRequestBody = connectDhlExpressUkRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectDhlExpressUkRequestBody
		return nil
	}

	connectDpdRequestBody := new(ConnectDpdRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectDpdRequestBody); err == nil {
		u.ConnectDpdRequestBody = connectDpdRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectDpdRequestBody
		return nil
	}

	connectEndiciaRequestBody := new(ConnectEndiciaRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectEndiciaRequestBody); err == nil {
		u.ConnectEndiciaRequestBody = connectEndiciaRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectEndiciaRequestBody
		return nil
	}

	connectFedexRequestBody := new(ConnectFedexRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectFedexRequestBody); err == nil {
		u.ConnectFedexRequestBody = connectFedexRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectFedexRequestBody
		return nil
	}

	connectFedexUkRequestBody := new(ConnectFedexUkRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectFedexUkRequestBody); err == nil {
		u.ConnectFedexUkRequestBody = connectFedexUkRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectFedexUkRequestBody
		return nil
	}

	connectFirstmileRequestBody := new(ConnectFirstmileRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectFirstmileRequestBody); err == nil {
		u.ConnectFirstmileRequestBody = connectFirstmileRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectFirstmileRequestBody
		return nil
	}

	connectImexRequestBody := new(ConnectImexRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectImexRequestBody); err == nil {
		u.ConnectImexRequestBody = connectImexRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectImexRequestBody
		return nil
	}

	connectNewgisticsRequestBody := new(ConnectNewgisticsRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectNewgisticsRequestBody); err == nil {
		u.ConnectNewgisticsRequestBody = connectNewgisticsRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectNewgisticsRequestBody
		return nil
	}

	connectOntracRequestBody := new(ConnectOntracRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectOntracRequestBody); err == nil {
		u.ConnectOntracRequestBody = connectOntracRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectOntracRequestBody
		return nil
	}

	connectPurolatorRequestBody := new(ConnectPurolatorRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectPurolatorRequestBody); err == nil {
		u.ConnectPurolatorRequestBody = connectPurolatorRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectPurolatorRequestBody
		return nil
	}

	connectRoyalMailRequestBody := new(ConnectRoyalMailRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectRoyalMailRequestBody); err == nil {
		u.ConnectRoyalMailRequestBody = connectRoyalMailRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectRoyalMailRequestBody
		return nil
	}

	connectRrDonnelleyRequestBody := new(ConnectRrDonnelleyRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectRrDonnelleyRequestBody); err == nil {
		u.ConnectRrDonnelleyRequestBody = connectRrDonnelleyRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectRrDonnelleyRequestBody
		return nil
	}

	connectSekoRequestBody := new(ConnectSekoRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectSekoRequestBody); err == nil {
		u.ConnectSekoRequestBody = connectSekoRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectSekoRequestBody
		return nil
	}

	connectSendleRequestBody := new(ConnectSendleRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectSendleRequestBody); err == nil {
		u.ConnectSendleRequestBody = connectSendleRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectSendleRequestBody
		return nil
	}

	connectStampsRequestBody := new(ConnectStampsRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectStampsRequestBody); err == nil {
		u.ConnectStampsRequestBody = connectStampsRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectStampsRequestBody
		return nil
	}

	connectUpsRequestBody := new(ConnectUpsRequestBody)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&connectUpsRequestBody); err == nil {
		u.ConnectUpsRequestBody = connectUpsRequestBody
		u.Type = ConnectCarrierRequestBodyTypeConnectUpsRequestBody
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConnectCarrierRequestBody) MarshalJSON() ([]byte, error) {
	if u.ConnectAccessWorldwideRequestBody != nil {
		return json.Marshal(u.ConnectAccessWorldwideRequestBody)
	}

	if u.ConnectAmazonBuyShippingRequestBody != nil {
		return json.Marshal(u.ConnectAmazonBuyShippingRequestBody)
	}

	if u.ConnectAmazonShippingUk != nil {
		return json.Marshal(u.ConnectAmazonShippingUk)
	}

	if u.ConnectApcRequestBody != nil {
		return json.Marshal(u.ConnectApcRequestBody)
	}

	if u.ConnectAsendiaRequestBody != nil {
		return json.Marshal(u.ConnectAsendiaRequestBody)
	}

	if u.ConnectAustraliaPostRequestBody != nil {
		return json.Marshal(u.ConnectAustraliaPostRequestBody)
	}

	if u.ConnectCanadaPostRequestBody != nil {
		return json.Marshal(u.ConnectCanadaPostRequestBody)
	}

	if u.ConnectDhlEcommerceRequestBody != nil {
		return json.Marshal(u.ConnectDhlEcommerceRequestBody)
	}

	if u.ConnectDhlExpressRequestBody != nil {
		return json.Marshal(u.ConnectDhlExpressRequestBody)
	}

	if u.ConnectDhlExpressAuRequestBody != nil {
		return json.Marshal(u.ConnectDhlExpressAuRequestBody)
	}

	if u.ConnectDhlExpressCaRequestBody != nil {
		return json.Marshal(u.ConnectDhlExpressCaRequestBody)
	}

	if u.ConnectDhlExpressUkRequestBody != nil {
		return json.Marshal(u.ConnectDhlExpressUkRequestBody)
	}

	if u.ConnectDpdRequestBody != nil {
		return json.Marshal(u.ConnectDpdRequestBody)
	}

	if u.ConnectEndiciaRequestBody != nil {
		return json.Marshal(u.ConnectEndiciaRequestBody)
	}

	if u.ConnectFedexRequestBody != nil {
		return json.Marshal(u.ConnectFedexRequestBody)
	}

	if u.ConnectFedexUkRequestBody != nil {
		return json.Marshal(u.ConnectFedexUkRequestBody)
	}

	if u.ConnectFirstmileRequestBody != nil {
		return json.Marshal(u.ConnectFirstmileRequestBody)
	}

	if u.ConnectImexRequestBody != nil {
		return json.Marshal(u.ConnectImexRequestBody)
	}

	if u.ConnectNewgisticsRequestBody != nil {
		return json.Marshal(u.ConnectNewgisticsRequestBody)
	}

	if u.ConnectOntracRequestBody != nil {
		return json.Marshal(u.ConnectOntracRequestBody)
	}

	if u.ConnectPurolatorRequestBody != nil {
		return json.Marshal(u.ConnectPurolatorRequestBody)
	}

	if u.ConnectRoyalMailRequestBody != nil {
		return json.Marshal(u.ConnectRoyalMailRequestBody)
	}

	if u.ConnectRrDonnelleyRequestBody != nil {
		return json.Marshal(u.ConnectRrDonnelleyRequestBody)
	}

	if u.ConnectSekoRequestBody != nil {
		return json.Marshal(u.ConnectSekoRequestBody)
	}

	if u.ConnectSendleRequestBody != nil {
		return json.Marshal(u.ConnectSendleRequestBody)
	}

	if u.ConnectStampsRequestBody != nil {
		return json.Marshal(u.ConnectStampsRequestBody)
	}

	if u.ConnectUpsRequestBody != nil {
		return json.Marshal(u.ConnectUpsRequestBody)
	}

	return nil, nil
}
