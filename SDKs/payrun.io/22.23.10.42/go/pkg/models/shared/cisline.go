// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CisLineCisLinePayFrequencyEnum - The cis lines' pay frequency
type CisLineCisLinePayFrequencyEnum string

const (
	CisLineCisLinePayFrequencyEnumMonthly CisLineCisLinePayFrequencyEnum = "Monthly"
	CisLineCisLinePayFrequencyEnumWeekly  CisLineCisLinePayFrequencyEnum = "Weekly"
)

func (e *CisLineCisLinePayFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Monthly":
		fallthrough
	case "Weekly":
		*e = CisLineCisLinePayFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CisLineCisLinePayFrequencyEnum: %s", s)
	}
}

// CisLineCisLineTaxTreatmentEnum - The cis lines' tax treatment
type CisLineCisLineTaxTreatmentEnum string

const (
	CisLineCisLineTaxTreatmentEnumTaxable    CisLineCisLineTaxTreatmentEnum = "Taxable"
	CisLineCisLineTaxTreatmentEnumNonTaxable CisLineCisLineTaxTreatmentEnum = "NonTaxable"
	CisLineCisLineTaxTreatmentEnumNotional   CisLineCisLineTaxTreatmentEnum = "Notional"
	CisLineCisLineTaxTreatmentEnumMaterials  CisLineCisLineTaxTreatmentEnum = "Materials"
)

func (e *CisLineCisLineTaxTreatmentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Taxable":
		fallthrough
	case "NonTaxable":
		fallthrough
	case "Notional":
		fallthrough
	case "Materials":
		*e = CisLineCisLineTaxTreatmentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CisLineCisLineTaxTreatmentEnum: %s", s)
	}
}

// CisLineCisLineUOMEnum - The cis lines' u o m
type CisLineCisLineUOMEnum string

const (
	CisLineCisLineUOMEnumNotSet CisLineCisLineUOMEnum = "NotSet"
	CisLineCisLineUOMEnumMinute CisLineCisLineUOMEnum = "Minute"
	CisLineCisLineUOMEnumHour   CisLineCisLineUOMEnum = "Hour"
	CisLineCisLineUOMEnumDay    CisLineCisLineUOMEnum = "Day"
	CisLineCisLineUOMEnumWeek   CisLineCisLineUOMEnum = "Week"
	CisLineCisLineUOMEnumMonth  CisLineCisLineUOMEnum = "Month"
	CisLineCisLineUOMEnumYear   CisLineCisLineUOMEnum = "Year"
	CisLineCisLineUOMEnumUnit   CisLineCisLineUOMEnum = "Unit"
)

func (e *CisLineCisLineUOMEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NotSet":
		fallthrough
	case "Minute":
		fallthrough
	case "Hour":
		fallthrough
	case "Day":
		fallthrough
	case "Week":
		fallthrough
	case "Month":
		fallthrough
	case "Year":
		fallthrough
	case "Unit":
		*e = CisLineCisLineUOMEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CisLineCisLineUOMEnum: %s", s)
	}
}

type CisLineCisLine struct {
	// The cis lines' cis deduction
	CisDeduction *float64 `json:"CisDeduction,omitempty"`
	// The cis lines' cis line type
	CisLineType *string `json:"CisLineType,omitempty"`
	// The cis lines' description
	Description *string `json:"Description,omitempty"`
	// The cis lines' generated
	Generated *time.Time `json:"Generated,omitempty"`
	// The cis lines' gross pay
	GrossPay *float64 `json:"GrossPay,omitempty"`
	// The cis lines' nominal code key
	NominalCodeKey *string `json:"NominalCodeKey,omitempty"`
	// The cis lines' pay frequency
	PayFrequency *CisLineCisLinePayFrequencyEnum `json:"PayFrequency,omitempty"`
	// The cis lines' tax month
	TaxMonth *int `json:"TaxMonth,omitempty"`
	// The cis lines' tax period
	TaxPeriod *int `json:"TaxPeriod,omitempty"`
	// The cis lines' tax treatment
	TaxTreatment *CisLineCisLineTaxTreatmentEnum `json:"TaxTreatment,omitempty"`
	// The cis lines' tax year
	TaxYear *int `json:"TaxYear,omitempty"`
	// The cis lines' u o m
	Uom *CisLineCisLineUOMEnum `json:"UOM,omitempty"`
	// The cis lines' unit rate
	UnitRate *float64 `json:"UnitRate,omitempty"`
	// The cis lines' units
	Units *float64 `json:"Units,omitempty"`
	// The cis lines' v a t
	Vat *float64 `json:"VAT,omitempty"`
}

// CisLine - The cis line object.
type CisLine struct {
	CisLine *CisLineCisLine `json:"CisLine,omitempty"`
}
