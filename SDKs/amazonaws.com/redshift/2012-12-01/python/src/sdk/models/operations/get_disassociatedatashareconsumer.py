"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETDisassociateDataShareConsumerActionEnum(str, Enum):
    DISASSOCIATE_DATA_SHARE_CONSUMER = 'DisassociateDataShareConsumer'

class GETDisassociateDataShareConsumerVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TWELVE_12_01 = '2012-12-01'


@dataclasses.dataclass
class GETDisassociateDataShareConsumerRequest:
    
    action: GETDisassociateDataShareConsumerActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    data_share_arn: str = dataclasses.field(metadata={'query_param': { 'field_name': 'DataShareArn', 'style': 'form', 'explode': True }})
    r"""The Amazon Resource Name (ARN) of the datashare to remove association for."""  
    version: GETDisassociateDataShareConsumerVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    consumer_arn: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ConsumerArn', 'style': 'form', 'explode': True }})
    r"""The Amazon Resource Name (ARN) of the consumer that association for the datashare is removed from."""  
    consumer_region: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ConsumerRegion', 'style': 'form', 'explode': True }})
    r"""From a datashare consumer account, removes association of a datashare from all the existing and future namespaces in the specified Amazon Web Services Region."""  
    disassociate_entire_account: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DisassociateEntireAccount', 'style': 'form', 'explode': True }})
    r"""A value that specifies whether association for the datashare is removed from the entire account."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETDisassociateDataShareConsumerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    