"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import learningcurvelist as shared_learningcurvelist
from typing import Optional


@dataclasses.dataclass
class GetTrainedModelLearningCurve1Security:
    
    bearer_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetTrainedModelLearningCurve1Request:
    
    model_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'modelId', 'style': 'simple', 'explode': False }})  
    count: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})
    r"""Number of epoch to return. Maximum valid value is 25."""  
    offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Index of the epoch from which you want to start paging"""  
    

@dataclasses.dataclass
class GetTrainedModelLearningCurve1Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    learning_curve_list: Optional[shared_learningcurvelist.LearningCurveList] = dataclasses.field(default=None)
    r"""Learning Curve"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    