"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import iterationperformance as shared_iterationperformance
from typing import Optional


@dataclasses.dataclass
class GetIterationPerformanceRequest:
    
    iteration_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'iterationId', 'style': 'simple', 'explode': False }})
    r"""The id of the iteration to get."""  
    project_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'projectId', 'style': 'simple', 'explode': False }})
    r"""The id of the project the iteration belongs to."""  
    training_key: str = dataclasses.field(metadata={'header': { 'field_name': 'Training-Key', 'style': 'simple', 'explode': False }})  
    overlap_threshold: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'overlapThreshold', 'style': 'form', 'explode': True }})
    r"""If applicable, the bounding box overlap threshold used to determine true predictions."""  
    threshold: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'threshold', 'style': 'form', 'explode': True }})
    r"""The threshold used to determine true predictions."""  
    

@dataclasses.dataclass
class GetIterationPerformanceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    iteration_performance: Optional[shared_iterationperformance.IterationPerformance] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    