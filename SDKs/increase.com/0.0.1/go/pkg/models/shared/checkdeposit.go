// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CheckDepositCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.
type CheckDepositCurrencyEnum string

const (
	CheckDepositCurrencyEnumCad CheckDepositCurrencyEnum = "CAD"
	CheckDepositCurrencyEnumChf CheckDepositCurrencyEnum = "CHF"
	CheckDepositCurrencyEnumEur CheckDepositCurrencyEnum = "EUR"
	CheckDepositCurrencyEnumGbp CheckDepositCurrencyEnum = "GBP"
	CheckDepositCurrencyEnumJpy CheckDepositCurrencyEnum = "JPY"
	CheckDepositCurrencyEnumUsd CheckDepositCurrencyEnum = "USD"
)

func (e *CheckDepositCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = CheckDepositCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDepositCurrencyEnum: %s", s)
	}
}

// CheckDepositCheckDepositAcceptanceCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type CheckDepositCheckDepositAcceptanceCurrencyEnum string

const (
	CheckDepositCheckDepositAcceptanceCurrencyEnumCad CheckDepositCheckDepositAcceptanceCurrencyEnum = "CAD"
	CheckDepositCheckDepositAcceptanceCurrencyEnumChf CheckDepositCheckDepositAcceptanceCurrencyEnum = "CHF"
	CheckDepositCheckDepositAcceptanceCurrencyEnumEur CheckDepositCheckDepositAcceptanceCurrencyEnum = "EUR"
	CheckDepositCheckDepositAcceptanceCurrencyEnumGbp CheckDepositCheckDepositAcceptanceCurrencyEnum = "GBP"
	CheckDepositCheckDepositAcceptanceCurrencyEnumJpy CheckDepositCheckDepositAcceptanceCurrencyEnum = "JPY"
	CheckDepositCheckDepositAcceptanceCurrencyEnumUsd CheckDepositCheckDepositAcceptanceCurrencyEnum = "USD"
)

func (e *CheckDepositCheckDepositAcceptanceCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = CheckDepositCheckDepositAcceptanceCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDepositCheckDepositAcceptanceCurrencyEnum: %s", s)
	}
}

// CheckDepositCheckDepositAcceptance - If your deposit is successfully parsed and accepted by Increase, this will contain details of the parsed check.
type CheckDepositCheckDepositAcceptance struct {
	// The account number printed on the check.
	AccountNumber string `json:"account_number"`
	// The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// An additional line of metadata printed on the check. This typically includes the check number for business checks.
	AuxiliaryOnUs string `json:"auxiliary_on_us"`
	// The ID of the Check Deposit that was accepted.
	CheckDepositID string `json:"check_deposit_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency CheckDepositCheckDepositAcceptanceCurrencyEnum `json:"currency"`
	// The routing number printed on the check.
	RoutingNumber string `json:"routing_number"`
	// The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
	SerialNumber string `json:"serial_number"`
}

// CheckDepositCheckDepositRejectionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
type CheckDepositCheckDepositRejectionCurrencyEnum string

const (
	CheckDepositCheckDepositRejectionCurrencyEnumCad CheckDepositCheckDepositRejectionCurrencyEnum = "CAD"
	CheckDepositCheckDepositRejectionCurrencyEnumChf CheckDepositCheckDepositRejectionCurrencyEnum = "CHF"
	CheckDepositCheckDepositRejectionCurrencyEnumEur CheckDepositCheckDepositRejectionCurrencyEnum = "EUR"
	CheckDepositCheckDepositRejectionCurrencyEnumGbp CheckDepositCheckDepositRejectionCurrencyEnum = "GBP"
	CheckDepositCheckDepositRejectionCurrencyEnumJpy CheckDepositCheckDepositRejectionCurrencyEnum = "JPY"
	CheckDepositCheckDepositRejectionCurrencyEnumUsd CheckDepositCheckDepositRejectionCurrencyEnum = "USD"
)

func (e *CheckDepositCheckDepositRejectionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = CheckDepositCheckDepositRejectionCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDepositCheckDepositRejectionCurrencyEnum: %s", s)
	}
}

// CheckDepositCheckDepositRejectionReasonEnum - Why the check deposit was rejected.
type CheckDepositCheckDepositRejectionReasonEnum string

const (
	CheckDepositCheckDepositRejectionReasonEnumIncompleteImage             CheckDepositCheckDepositRejectionReasonEnum = "incomplete_image"
	CheckDepositCheckDepositRejectionReasonEnumDuplicate                   CheckDepositCheckDepositRejectionReasonEnum = "duplicate"
	CheckDepositCheckDepositRejectionReasonEnumPoorImageQuality            CheckDepositCheckDepositRejectionReasonEnum = "poor_image_quality"
	CheckDepositCheckDepositRejectionReasonEnumIncorrectAmount             CheckDepositCheckDepositRejectionReasonEnum = "incorrect_amount"
	CheckDepositCheckDepositRejectionReasonEnumIncorrectRecipient          CheckDepositCheckDepositRejectionReasonEnum = "incorrect_recipient"
	CheckDepositCheckDepositRejectionReasonEnumNotEligibleForMobileDeposit CheckDepositCheckDepositRejectionReasonEnum = "not_eligible_for_mobile_deposit"
	CheckDepositCheckDepositRejectionReasonEnumUnknown                     CheckDepositCheckDepositRejectionReasonEnum = "unknown"
)

func (e *CheckDepositCheckDepositRejectionReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "incomplete_image":
		fallthrough
	case "duplicate":
		fallthrough
	case "poor_image_quality":
		fallthrough
	case "incorrect_amount":
		fallthrough
	case "incorrect_recipient":
		fallthrough
	case "not_eligible_for_mobile_deposit":
		fallthrough
	case "unknown":
		*e = CheckDepositCheckDepositRejectionReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDepositCheckDepositRejectionReasonEnum: %s", s)
	}
}

// CheckDepositCheckDepositRejection - If your deposit is rejected by Increase, this will contain details as to why it was rejected.
type CheckDepositCheckDepositRejection struct {
	// The rejected amount in the minor unit of check's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
	Currency CheckDepositCheckDepositRejectionCurrencyEnum `json:"currency"`
	// Why the check deposit was rejected.
	Reason CheckDepositCheckDepositRejectionReasonEnum `json:"reason"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was rejected.
	RejectedAt time.Time `json:"rejected_at"`
}

// CheckDepositCheckDepositReturnCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type CheckDepositCheckDepositReturnCurrencyEnum string

const (
	CheckDepositCheckDepositReturnCurrencyEnumCad CheckDepositCheckDepositReturnCurrencyEnum = "CAD"
	CheckDepositCheckDepositReturnCurrencyEnumChf CheckDepositCheckDepositReturnCurrencyEnum = "CHF"
	CheckDepositCheckDepositReturnCurrencyEnumEur CheckDepositCheckDepositReturnCurrencyEnum = "EUR"
	CheckDepositCheckDepositReturnCurrencyEnumGbp CheckDepositCheckDepositReturnCurrencyEnum = "GBP"
	CheckDepositCheckDepositReturnCurrencyEnumJpy CheckDepositCheckDepositReturnCurrencyEnum = "JPY"
	CheckDepositCheckDepositReturnCurrencyEnumUsd CheckDepositCheckDepositReturnCurrencyEnum = "USD"
)

func (e *CheckDepositCheckDepositReturnCurrencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = CheckDepositCheckDepositReturnCurrencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDepositCheckDepositReturnCurrencyEnum: %s", s)
	}
}

type CheckDepositCheckDepositReturnReturnReasonEnum string

const (
	CheckDepositCheckDepositReturnReturnReasonEnumAchConversionNotSupported CheckDepositCheckDepositReturnReturnReasonEnum = "ach_conversion_not_supported"
	CheckDepositCheckDepositReturnReturnReasonEnumClosedAccount             CheckDepositCheckDepositReturnReturnReasonEnum = "closed_account"
	CheckDepositCheckDepositReturnReturnReasonEnumDuplicateSubmission       CheckDepositCheckDepositReturnReturnReasonEnum = "duplicate_submission"
	CheckDepositCheckDepositReturnReturnReasonEnumInsufficientFunds         CheckDepositCheckDepositReturnReturnReasonEnum = "insufficient_funds"
	CheckDepositCheckDepositReturnReturnReasonEnumNoAccount                 CheckDepositCheckDepositReturnReturnReasonEnum = "no_account"
	CheckDepositCheckDepositReturnReturnReasonEnumNotAuthorized             CheckDepositCheckDepositReturnReturnReasonEnum = "not_authorized"
	CheckDepositCheckDepositReturnReturnReasonEnumStaleDated                CheckDepositCheckDepositReturnReturnReasonEnum = "stale_dated"
	CheckDepositCheckDepositReturnReturnReasonEnumStopPayment               CheckDepositCheckDepositReturnReturnReasonEnum = "stop_payment"
	CheckDepositCheckDepositReturnReturnReasonEnumUnknownReason             CheckDepositCheckDepositReturnReturnReasonEnum = "unknown_reason"
	CheckDepositCheckDepositReturnReturnReasonEnumUnmatchedDetails          CheckDepositCheckDepositReturnReturnReasonEnum = "unmatched_details"
	CheckDepositCheckDepositReturnReturnReasonEnumUnreadableImage           CheckDepositCheckDepositReturnReturnReasonEnum = "unreadable_image"
)

func (e *CheckDepositCheckDepositReturnReturnReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ach_conversion_not_supported":
		fallthrough
	case "closed_account":
		fallthrough
	case "duplicate_submission":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "no_account":
		fallthrough
	case "not_authorized":
		fallthrough
	case "stale_dated":
		fallthrough
	case "stop_payment":
		fallthrough
	case "unknown_reason":
		fallthrough
	case "unmatched_details":
		fallthrough
	case "unreadable_image":
		*e = CheckDepositCheckDepositReturnReturnReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDepositCheckDepositReturnReturnReasonEnum: %s", s)
	}
}

// CheckDepositCheckDepositReturn - If your deposit is returned, this will contain details as to why it was returned.
type CheckDepositCheckDepositReturn struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier of the Check Deposit that was returned.
	CheckDepositID string `json:"check_deposit_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency     CheckDepositCheckDepositReturnCurrencyEnum     `json:"currency"`
	ReturnReason CheckDepositCheckDepositReturnReturnReasonEnum `json:"return_reason"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
	ReturnedAt time.Time `json:"returned_at"`
	// The identifier of the transaction that reversed the original check deposit transaction.
	TransactionID string `json:"transaction_id"`
}

// CheckDepositStatusEnum - The status of the Check Deposit.
type CheckDepositStatusEnum string

const (
	CheckDepositStatusEnumPending   CheckDepositStatusEnum = "pending"
	CheckDepositStatusEnumSubmitted CheckDepositStatusEnum = "submitted"
	CheckDepositStatusEnumRejected  CheckDepositStatusEnum = "rejected"
	CheckDepositStatusEnumReturned  CheckDepositStatusEnum = "returned"
)

func (e *CheckDepositStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "submitted":
		fallthrough
	case "rejected":
		fallthrough
	case "returned":
		*e = CheckDepositStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDepositStatusEnum: %s", s)
	}
}

// CheckDepositTypeEnum - A constant representing the object's type. For this resource it will always be `check_deposit`.
type CheckDepositTypeEnum string

const (
	CheckDepositTypeEnumCheckDeposit CheckDepositTypeEnum = "check_deposit"
)

func (e *CheckDepositTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "check_deposit":
		*e = CheckDepositTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDepositTypeEnum: %s", s)
	}
}

// CheckDeposit - Check Deposits allow you to deposit images of paper checks into your account.
type CheckDeposit struct {
	// The Account the check was deposited into.
	AccountID string `json:"account_id"`
	// The deposited amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The ID for the File containing the image of the back of the check.
	BackImageFileID string `json:"back_image_file_id"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.
	Currency CheckDepositCurrencyEnum `json:"currency"`
	// If your deposit is successfully parsed and accepted by Increase, this will contain details of the parsed check.
	DepositAcceptance CheckDepositCheckDepositAcceptance `json:"deposit_acceptance"`
	// If your deposit is rejected by Increase, this will contain details as to why it was rejected.
	DepositRejection CheckDepositCheckDepositRejection `json:"deposit_rejection"`
	// If your deposit is returned, this will contain details as to why it was returned.
	DepositReturn CheckDepositCheckDepositReturn `json:"deposit_return"`
	// The ID for the File containing the image of the front of the check.
	FrontImageFileID string `json:"front_image_file_id"`
	// The deposit's identifier.
	ID string `json:"id"`
	// The status of the Check Deposit.
	Status CheckDepositStatusEnum `json:"status"`
	// The ID for the Transaction created by the deposit.
	TransactionID string `json:"transaction_id"`
	// A constant representing the object's type. For this resource it will always be `check_deposit`.
	Type CheckDepositTypeEnum `json:"type"`
}
