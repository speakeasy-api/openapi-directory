/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class BqmlIterationResult {
    /**
     * [Output-only, Beta] Time taken to run the training iteration in milliseconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("durationMs")
    public String durationMs;
    public BqmlIterationResult withDurationMs(String durationMs) {
        this.durationMs = durationMs;
        return this;
    }
    
    /**
     * [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("evalLoss")
    public Double evalLoss;
    public BqmlIterationResult withEvalLoss(Double evalLoss) {
        this.evalLoss = evalLoss;
        return this;
    }
    
    /**
     * [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    public Integer index;
    public BqmlIterationResult withIndex(Integer index) {
        this.index = index;
        return this;
    }
    
    /**
     * [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("learnRate")
    public Double learnRate;
    public BqmlIterationResult withLearnRate(Double learnRate) {
        this.learnRate = learnRate;
        return this;
    }
    
    /**
     * [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trainingLoss")
    public Double trainingLoss;
    public BqmlIterationResult withTrainingLoss(Double trainingLoss) {
        this.trainingLoss = trainingLoss;
        return this;
    }
    
}
