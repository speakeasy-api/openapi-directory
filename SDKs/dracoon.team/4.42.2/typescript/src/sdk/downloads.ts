/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * File download without authentication headers
 */
export class Downloads {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Download avatar
   *
   * @remarks
   * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>
   *
   * ### Description:
   * Download avatar for given user ID and UUID.
   *
   * ### Precondition:
   * Valid UUID.
   *
   * ### Postcondition:
   * Stream is returned.
   *
   * ### Further Information:
   * None.
   */
  downloadAvatar(
    req: operations.DownloadAvatarRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DownloadAvatarResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DownloadAvatarRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v4/downloads/avatar/{user_id}/{uuid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DownloadAvatarResponse =
        new operations.DownloadAvatarResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/octet-stream`)) {
            res.downloadAvatar200ApplicationOctetStreamString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case [400, 404, 406].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/octet-stream`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Download file
   *
   * @remarks
   * ### Description:
   * Download a file.
   *
   * ### Precondition:
   * Valid download token.
   *
   * ### Postcondition:
   * Stream is returned.
   *
   * ### Further Information:
   * Range requests are supported.
   *
   * @see {@link https://tools.ietf.org/html/rfc7233} - Range Requests
   */
  downloadFileViaToken(
    req: operations.DownloadFileViaTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DownloadFileViaTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DownloadFileViaTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v4/downloads/{token}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DownloadFileViaTokenResponse =
        new operations.DownloadFileViaTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 206].includes(httpRes?.status):
          break;
        case [400, 401, 403, 404, 406, 416].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/octet-stream`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Download file
   *
   * @remarks
   * ### Description:
   * Download a file.
   *
   * ### Precondition:
   * Valid download token.
   *
   * ### Postcondition:
   * Stream is returned.
   *
   * ### Further Information:
   * Range requests are supported.
   *
   * @see {@link https://tools.ietf.org/html/rfc7233} - Range Requests
   */
  downloadFileViaToken1(
    req: operations.DownloadFileViaToken1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.DownloadFileViaToken1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DownloadFileViaToken1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v4/downloads/{token}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "head",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DownloadFileViaToken1Response =
        new operations.DownloadFileViaToken1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 206].includes(httpRes?.status):
          break;
        case [400, 401, 403, 404, 406, 416].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/octet-stream`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Download ZIP archive
   *
   * @remarks
   * ### Description:
   * Download multiple files in a ZIP archive.
   *
   * ### Precondition:
   * Valid download token.
   *
   * ### Postcondition:
   * Stream is returned.
   *
   * ### Further Information:
   * Create a download token with `POST /nodes/zip` API.
   */
  downloadZipArchiveViaToken(
    req: operations.DownloadZipArchiveViaTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DownloadZipArchiveViaTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DownloadZipArchiveViaTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v4/downloads/zip/{token}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DownloadZipArchiveViaTokenResponse =
        new operations.DownloadZipArchiveViaTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case [400, 401, 403, 404, 406].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/octet-stream`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
