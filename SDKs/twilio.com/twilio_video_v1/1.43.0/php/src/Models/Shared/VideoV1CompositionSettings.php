<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * VideoV1CompositionSettings - OK
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class VideoV1CompositionSettings
{
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CompositionSettings resource.
     * 
     * @var ?string $accountSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountSid = null;
    
    /**
     * The SID of the stored Credential resource.
     * 
     * @var ?string $awsCredentialsSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('aws_credentials_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $awsCredentialsSid = null;
    
    /**
     * The URL of the AWS S3 bucket where the compositions are stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/compositions`, where `compositions` is the path in which you want the compositions to be stored. This URL accepts only URI-valid characters, as described in the <a href='https://tools.ietf.org/html/rfc3986#section-2'>RFC 3986</a>.
     * 
     * @var ?string $awsS3Url
     */
	#[\JMS\Serializer\Annotation\SerializedName('aws_s3_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $awsS3Url = null;
    
    /**
     * Whether all compositions are written to the `aws_s3_url`. When `false`, all compositions are stored in our cloud.
     * 
     * @var ?bool $awsStorageEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('aws_storage_enabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $awsStorageEnabled = null;
    
    /**
     * Whether all compositions are stored in an encrypted form. The default is `false`.
     * 
     * @var ?bool $encryptionEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('encryption_enabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $encryptionEnabled = null;
    
    /**
     * The SID of the Public Key resource used for encryption.
     * 
     * @var ?string $encryptionKeySid
     */
	#[\JMS\Serializer\Annotation\SerializedName('encryption_key_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $encryptionKeySid = null;
    
    /**
     * The string that you assigned to describe the resource and that will be shown in the console
     * 
     * @var ?string $friendlyName
     */
	#[\JMS\Serializer\Annotation\SerializedName('friendly_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $friendlyName = null;
    
    /**
     * The absolute URL of the resource.
     * 
     * @var ?string $url
     */
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $url = null;
    
	public function __construct()
	{
		$this->accountSid = null;
		$this->awsCredentialsSid = null;
		$this->awsS3Url = null;
		$this->awsStorageEnabled = null;
		$this->encryptionEnabled = null;
		$this->encryptionKeySid = null;
		$this->friendlyName = null;
		$this->url = null;
	}
}
