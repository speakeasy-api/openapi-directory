"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import subnet as shared_subnet
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConnectorInput:
    r"""Definition of a Serverless VPC Access connector."""
    
    ip_cidr_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipCidrRange'), 'exclude': lambda f: f is None }})
    r"""The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`."""  
    machine_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineType'), 'exclude': lambda f: f is None }})
    r"""Machine type of VM Instance underlying connector. Default is e2-micro"""  
    max_instances: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxInstances'), 'exclude': lambda f: f is None }})
    r"""Maximum value of instances in autoscaling group underlying the connector."""  
    max_throughput: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxThroughput'), 'exclude': lambda f: f is None }})
    r"""Maximum throughput of the connector in Mbps. Default is 300, max is 1000."""  
    min_instances: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minInstances'), 'exclude': lambda f: f is None }})
    r"""Minimum value of instances in autoscaling group underlying the connector."""  
    min_throughput: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minThroughput'), 'exclude': lambda f: f is None }})
    r"""Minimum throughput of the connector in Mbps. Default and min is 200."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The resource name in the format `projects/*/locations/*/connectors/*`."""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Name of a VPC network."""  
    subnet: Optional[shared_subnet.Subnet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet'), 'exclude': lambda f: f is None }})
    r"""The subnet in which to house the connector"""  
    
class ConnectorStateEnum(str, Enum):
    r"""Output only. State of the VPC access connector."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    READY = 'READY'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    ERROR = 'ERROR'
    UPDATING = 'UPDATING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Connector:
    r"""Definition of a Serverless VPC Access connector."""
    
    connected_projects: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectedProjects'), 'exclude': lambda f: f is None }})
    r"""Output only. List of projects using the connector."""  
    ip_cidr_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipCidrRange'), 'exclude': lambda f: f is None }})
    r"""The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`."""  
    machine_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machineType'), 'exclude': lambda f: f is None }})
    r"""Machine type of VM Instance underlying connector. Default is e2-micro"""  
    max_instances: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxInstances'), 'exclude': lambda f: f is None }})
    r"""Maximum value of instances in autoscaling group underlying the connector."""  
    max_throughput: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxThroughput'), 'exclude': lambda f: f is None }})
    r"""Maximum throughput of the connector in Mbps. Default is 300, max is 1000."""  
    min_instances: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minInstances'), 'exclude': lambda f: f is None }})
    r"""Minimum value of instances in autoscaling group underlying the connector."""  
    min_throughput: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minThroughput'), 'exclude': lambda f: f is None }})
    r"""Minimum throughput of the connector in Mbps. Default and min is 200."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The resource name in the format `projects/*/locations/*/connectors/*`."""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Name of a VPC network."""  
    state: Optional[ConnectorStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. State of the VPC access connector."""  
    subnet: Optional[shared_subnet.Subnet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet'), 'exclude': lambda f: f is None }})
    r"""The subnet in which to house the connector"""  
    