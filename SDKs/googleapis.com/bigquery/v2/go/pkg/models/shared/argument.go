// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ArgumentArgumentKindEnum - Optional. Defaults to FIXED_TYPE.
type ArgumentArgumentKindEnum string

const (
	ArgumentArgumentKindEnumArgumentKindUnspecified ArgumentArgumentKindEnum = "ARGUMENT_KIND_UNSPECIFIED"
	ArgumentArgumentKindEnumFixedType               ArgumentArgumentKindEnum = "FIXED_TYPE"
	ArgumentArgumentKindEnumAnyType                 ArgumentArgumentKindEnum = "ANY_TYPE"
)

func (e *ArgumentArgumentKindEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ARGUMENT_KIND_UNSPECIFIED":
		fallthrough
	case "FIXED_TYPE":
		fallthrough
	case "ANY_TYPE":
		*e = ArgumentArgumentKindEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ArgumentArgumentKindEnum: %s", s)
	}
}

// ArgumentModeEnum - Optional. Specifies whether the argument is input or output. Can be set for procedures only.
type ArgumentModeEnum string

const (
	ArgumentModeEnumModeUnspecified ArgumentModeEnum = "MODE_UNSPECIFIED"
	ArgumentModeEnumIn              ArgumentModeEnum = "IN"
	ArgumentModeEnumOut             ArgumentModeEnum = "OUT"
	ArgumentModeEnumInout           ArgumentModeEnum = "INOUT"
)

func (e *ArgumentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MODE_UNSPECIFIED":
		fallthrough
	case "IN":
		fallthrough
	case "OUT":
		fallthrough
	case "INOUT":
		*e = ArgumentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ArgumentModeEnum: %s", s)
	}
}

// Argument - Input/output argument of a function or a stored procedure.
type Argument struct {
	// Optional. Defaults to FIXED_TYPE.
	ArgumentKind *ArgumentArgumentKindEnum `json:"argumentKind,omitempty"`
	// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
	DataType *StandardSQLDataType `json:"dataType,omitempty"`
	// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
	Mode *ArgumentModeEnum `json:"mode,omitempty"`
	// Optional. The name of this argument. Can be absent for function return argument.
	Name *string `json:"name,omitempty"`
}
