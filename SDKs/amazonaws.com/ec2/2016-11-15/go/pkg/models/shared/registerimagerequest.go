// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RegisterImageRequestArchitectureEnum - <p>The architecture of the AMI.</p> <p>Default: For Amazon EBS-backed AMIs, <code>i386</code>. For instance store-backed AMIs, the architecture specified in the manifest file.</p>
type RegisterImageRequestArchitectureEnum string

const (
	RegisterImageRequestArchitectureEnumI386     RegisterImageRequestArchitectureEnum = "i386"
	RegisterImageRequestArchitectureEnumX8664    RegisterImageRequestArchitectureEnum = "x86_64"
	RegisterImageRequestArchitectureEnumArm64    RegisterImageRequestArchitectureEnum = "arm64"
	RegisterImageRequestArchitectureEnumX8664Mac RegisterImageRequestArchitectureEnum = "x86_64_mac"
	RegisterImageRequestArchitectureEnumArm64Mac RegisterImageRequestArchitectureEnum = "arm64_mac"
)

func (e *RegisterImageRequestArchitectureEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "i386":
		fallthrough
	case "x86_64":
		fallthrough
	case "arm64":
		fallthrough
	case "x86_64_mac":
		fallthrough
	case "arm64_mac":
		*e = RegisterImageRequestArchitectureEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterImageRequestArchitectureEnum: %s", s)
	}
}

// RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum - The volume type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>. If the volume type is <code>io1</code> or <code>io2</code>, you must specify the IOPS that the volume supports.
type RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum string

const (
	RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnumStandard RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum = "standard"
	RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnumIo1      RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum = "io1"
	RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnumIo2      RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum = "io2"
	RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnumGp2      RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum = "gp2"
	RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnumSc1      RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum = "sc1"
	RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnumSt1      RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum = "st1"
	RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnumGp3      RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum = "gp3"
)

func (e *RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "standard":
		fallthrough
	case "io1":
		fallthrough
	case "io2":
		fallthrough
	case "gp2":
		fallthrough
	case "sc1":
		fallthrough
	case "st1":
		fallthrough
	case "gp3":
		*e = RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum: %s", s)
	}
}

// RegisterImageRequestBlockDeviceMappingsEbs - Parameters used to automatically set up EBS volumes when the instance is launched.
type RegisterImageRequestBlockDeviceMappingsEbs struct {
	DeleteOnTermination *bool
	Encrypted           *bool
	Iops                *int64
	KmsKeyID            *string
	OutpostArn          *string
	SnapshotID          *string
	Throughput          *int64
	VolumeSize          *int64
	VolumeType          *RegisterImageRequestBlockDeviceMappingsEbsVolumeTypeEnum
}

// RegisterImageRequestBlockDeviceMappings - Describes a block device mapping, which defines the EBS volumes and instance store volumes to attach to an instance at launch.
type RegisterImageRequestBlockDeviceMappings struct {
	DeviceName  *string
	Ebs         *RegisterImageRequestBlockDeviceMappingsEbs
	NoDevice    *string
	VirtualName *string
}

// RegisterImageRequest - Contains the parameters for RegisterImage.
type RegisterImageRequest struct {
	Architecture        *RegisterImageRequestArchitectureEnum
	BillingProducts     []string
	BlockDeviceMappings []RegisterImageRequestBlockDeviceMappings
	BootMode            *BootModeValuesEnum
	Description         *string
	DryRun              *bool
	EnaSupport          *bool
	ImageLocation       *string
	ImdsSupport         *ImdsSupportValuesEnum
	KernelID            *string
	Name                string
	RamdiskID           *string
	RootDeviceName      *string
	SriovNetSupport     *string
	TpmSupport          *TpmSupportValuesEnum
	UefiData            *string
	VirtualizationType  *string
}
