"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import clickthroughurl as shared_clickthroughurl
from ..shared import clickthroughurlsuffixproperties as shared_clickthroughurlsuffixproperties
from ..shared import creativegroupassignment as shared_creativegroupassignment
from ..shared import creativerotation as shared_creativerotation
from ..shared import dayparttargeting as shared_dayparttargeting
from ..shared import defaultclickthrougheventtagproperties as shared_defaultclickthrougheventtagproperties
from ..shared import deliveryschedule as shared_deliveryschedule
from ..shared import dimensionvalue as shared_dimensionvalue
from ..shared import eventtagoverride as shared_eventtagoverride
from ..shared import geotargeting as shared_geotargeting
from ..shared import keyvaluetargetingexpression as shared_keyvaluetargetingexpression
from ..shared import languagetargeting as shared_languagetargeting
from ..shared import lastmodifiedinfo as shared_lastmodifiedinfo
from ..shared import listtargetingexpression as shared_listtargetingexpression
from ..shared import placementassignment as shared_placementassignment
from ..shared import size as shared_size
from ..shared import technologytargeting as shared_technologytargeting
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class AdCompatibilityEnum(str, Enum):
    r"""Compatibility of this ad. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to either rendering on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are only used for existing default ads. New mobile placements must be assigned DISPLAY or DISPLAY_INTERSTITIAL and default ads created for those placements will be limited to those compatibility types. IN_STREAM_VIDEO refers to rendering in-stream video ads developed with the VAST standard."""
    DISPLAY = 'DISPLAY'
    DISPLAY_INTERSTITIAL = 'DISPLAY_INTERSTITIAL'
    APP = 'APP'
    APP_INTERSTITIAL = 'APP_INTERSTITIAL'
    IN_STREAM_VIDEO = 'IN_STREAM_VIDEO'
    IN_STREAM_AUDIO = 'IN_STREAM_AUDIO'

class AdTypeEnum(str, Enum):
    r"""Type of ad. This is a required field on insertion. Note that default ads ( AD_SERVING_DEFAULT_AD) cannot be created directly (see Creative resource)."""
    AD_SERVING_STANDARD_AD = 'AD_SERVING_STANDARD_AD'
    AD_SERVING_DEFAULT_AD = 'AD_SERVING_DEFAULT_AD'
    AD_SERVING_CLICK_TRACKER = 'AD_SERVING_CLICK_TRACKER'
    AD_SERVING_TRACKING = 'AD_SERVING_TRACKING'
    AD_SERVING_BRAND_SAFE_AD = 'AD_SERVING_BRAND_SAFE_AD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Ad:
    r"""Contains properties of a Campaign Manager ad."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""Account ID of this ad. This is a read-only field that can be left blank."""  
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Whether this ad is active. When true, archived must be false."""  
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Advertiser ID of this ad. This is a required field on insertion."""  
    advertiser_id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserIdDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})
    r"""Whether this ad is archived. When true, active must be false."""  
    audience_segment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audienceSegmentId'), 'exclude': lambda f: f is None }})
    r"""Audience segment ID that is being targeted for this ad. Applicable when type is AD_SERVING_STANDARD_AD."""  
    campaign_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignId'), 'exclude': lambda f: f is None }})
    r"""Campaign ID of this ad. This is a required field on insertion."""  
    campaign_id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignIdDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    click_through_url: Optional[shared_clickthroughurl.ClickThroughURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickThroughUrl'), 'exclude': lambda f: f is None }})
    r"""Click-through URL"""  
    click_through_url_suffix_properties: Optional[shared_clickthroughurlsuffixproperties.ClickThroughURLSuffixProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickThroughUrlSuffixProperties'), 'exclude': lambda f: f is None }})
    r"""Click Through URL Suffix settings."""  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})
    r"""Comments for this ad."""  
    compatibility: Optional[AdCompatibilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compatibility'), 'exclude': lambda f: f is None }})
    r"""Compatibility of this ad. Applicable when type is AD_SERVING_DEFAULT_AD. DISPLAY and DISPLAY_INTERSTITIAL refer to either rendering on desktop or on mobile devices or in mobile apps for regular or interstitial ads, respectively. APP and APP_INTERSTITIAL are only used for existing default ads. New mobile placements must be assigned DISPLAY or DISPLAY_INTERSTITIAL and default ads created for those placements will be limited to those compatibility types. IN_STREAM_VIDEO refers to rendering in-stream video ads developed with the VAST standard."""  
    create_info: Optional[shared_lastmodifiedinfo.LastModifiedInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createInfo'), 'exclude': lambda f: f is None }})
    r"""Modification timestamp."""  
    creative_group_assignments: Optional[list[shared_creativegroupassignment.CreativeGroupAssignment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeGroupAssignments'), 'exclude': lambda f: f is None }})
    r"""Creative group assignments for this ad. Applicable when type is AD_SERVING_CLICK_TRACKER. Only one assignment per creative group number is allowed for a maximum of two assignments."""  
    creative_rotation: Optional[shared_creativerotation.CreativeRotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeRotation'), 'exclude': lambda f: f is None }})
    r"""Creative Rotation."""  
    day_part_targeting: Optional[shared_dayparttargeting.DayPartTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayPartTargeting'), 'exclude': lambda f: f is None }})
    r"""Day Part Targeting."""  
    default_click_through_event_tag_properties: Optional[shared_defaultclickthrougheventtagproperties.DefaultClickThroughEventTagProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultClickThroughEventTagProperties'), 'exclude': lambda f: f is None }})
    r"""Properties of inheriting and overriding the default click-through event tag. A campaign may override the event tag defined at the advertiser level, and an ad may also override the campaign's setting further."""  
    delivery_schedule: Optional[shared_deliveryschedule.DeliverySchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliverySchedule'), 'exclude': lambda f: f is None }})
    r"""Delivery Schedule."""  
    dynamic_click_tracker: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dynamicClickTracker'), 'exclude': lambda f: f is None }})
    r"""Whether this ad is a dynamic click tracker. Applicable when type is AD_SERVING_CLICK_TRACKER. This is a required field on insert, and is read-only after insert."""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    event_tag_overrides: Optional[list[shared_eventtagoverride.EventTagOverride]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventTagOverrides'), 'exclude': lambda f: f is None }})
    r"""Event tag overrides for this ad."""  
    geo_targeting: Optional[shared_geotargeting.GeoTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geoTargeting'), 'exclude': lambda f: f is None }})
    r"""Geographical Targeting."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of this ad. This is a read-only, auto-generated field."""  
    id_dimension_value: Optional[shared_dimensionvalue.DimensionValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idDimensionValue'), 'exclude': lambda f: f is None }})
    r"""Represents a DimensionValue resource."""  
    key_value_targeting_expression: Optional[shared_keyvaluetargetingexpression.KeyValueTargetingExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyValueTargetingExpression'), 'exclude': lambda f: f is None }})
    r"""Key Value Targeting Expression."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#ad\\"."""  
    language_targeting: Optional[shared_languagetargeting.LanguageTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageTargeting'), 'exclude': lambda f: f is None }})
    r"""Language Targeting."""  
    last_modified_info: Optional[shared_lastmodifiedinfo.LastModifiedInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModifiedInfo'), 'exclude': lambda f: f is None }})
    r"""Modification timestamp."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this ad. This is a required field and must be less than 256 characters long."""  
    placement_assignments: Optional[list[shared_placementassignment.PlacementAssignment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placementAssignments'), 'exclude': lambda f: f is None }})
    r"""Placement assignments for this ad."""  
    remarketing_list_expression: Optional[shared_listtargetingexpression.ListTargetingExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remarketingListExpression'), 'exclude': lambda f: f is None }})
    r"""Remarketing List Targeting Expression."""  
    size: Optional[shared_size.Size] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Represents the dimensions of ads, placements, creatives, or creative assets."""  
    ssl_compliant: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslCompliant'), 'exclude': lambda f: f is None }})
    r"""Whether this ad is ssl compliant. This is a read-only field that is auto-generated when the ad is inserted or updated."""  
    ssl_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslRequired'), 'exclude': lambda f: f is None }})
    r"""Whether this ad requires ssl. This is a read-only field that is auto-generated when the ad is inserted or updated."""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    subaccount_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subaccountId'), 'exclude': lambda f: f is None }})
    r"""Subaccount ID of this ad. This is a read-only field that can be left blank."""  
    targeting_template_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetingTemplateId'), 'exclude': lambda f: f is None }})
    r"""Targeting template ID, used to apply preconfigured targeting information to this ad. This cannot be set while any of dayPartTargeting, geoTargeting, keyValueTargetingExpression, languageTargeting, remarketingListExpression, or technologyTargeting are set. Applicable when type is AD_SERVING_STANDARD_AD."""  
    technology_targeting: Optional[shared_technologytargeting.TechnologyTargeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('technologyTargeting'), 'exclude': lambda f: f is None }})
    r"""Technology Targeting."""  
    type: Optional[AdTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of ad. This is a required field on insertion. Note that default ads ( AD_SERVING_DEFAULT_AD) cannot be created directly (see Creative resource)."""  
    