/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Code Search
 */
export class Search {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Searches through source code
   *
   * @remarks
   * Performs a search through the full Debian Code Search corpus, blocking until all results are available (might take a few seconds depending on the search query).
   *
   * Search results are ordered by their ranking (best results come first).
   */
  search(
    req: operations.SearchRequest,
    security: operations.SearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchResponse = new operations.SearchResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.searchResults = utils.objectToClass(
              httpRes?.data,
              shared.SearchResult,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 403:
          break;
      }

      return res;
    });
  }

  /**
   * Like /search, but aggregates per package
   *
   * @remarks
   * The search results are currently sorted arbitrarily, but we intend to sort them by ranking eventually: https://github.com/Debian/dcs/blob/51338e934eb7ee18d00c5c18531c0790a83cb698/cmd/dcs-web/querymanager.go#L719
   */
  searchperpackage(
    req: operations.SearchperpackageRequest,
    security: operations.SearchperpackageSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchperpackageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SearchperpackageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/searchperpackage";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SearchperpackageSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchperpackageResponse =
        new operations.SearchperpackageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.packageSearchResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.packageSearchResults = utils.objectToClass(
              httpRes?.data,
              shared.PackageSearchResult,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 403:
          break;
      }

      return res;
    });
  }
}
