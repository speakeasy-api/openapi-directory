"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fieldreference as shared_fieldreference
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UnaryFilterOpEnum(str, Enum):
    r"""The unary operator to apply."""
    OPERATOR_UNSPECIFIED = 'OPERATOR_UNSPECIFIED'
    IS_NAN = 'IS_NAN'
    IS_NULL = 'IS_NULL'
    IS_NOT_NAN = 'IS_NOT_NAN'
    IS_NOT_NULL = 'IS_NOT_NULL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UnaryFilter:
    r"""A filter with a single operand."""
    
    field: Optional[shared_fieldreference.FieldReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""A reference to a field in a document, ex: `stats.operations`."""  
    op: Optional[UnaryFilterOpEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('op'), 'exclude': lambda f: f is None }})
    r"""The unary operator to apply."""  
    