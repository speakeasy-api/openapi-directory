"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class OAuth:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def obtain_token(self, request: shared.ObtainTokenRequest) -> operations.ObtainTokenResponse:
        r"""ObtainToken
        Returns an OAuth access token.
        
        The endpoint supports distinct methods of obtaining OAuth access tokens.
        Applications specify a method by adding the `grant_type` parameter
        in the request and also provide relevant information.
        
        __Note:__ Regardless of the method application specified,
        the endpoint always returns two items; an OAuth access token and
        a refresh token in the response.
        
        __OAuth tokens should only live on secure servers. Application clients
        should never interact directly with OAuth tokens__.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/oauth2/token'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ObtainTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ObtainTokenResponse])
                res.obtain_token_response = out

        return res

    def renew_token(self, request: operations.RenewTokenRequest, security: operations.RenewTokenSecurity) -> operations.RenewTokenResponse:
        r"""RenewToken
        `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see
        [Migrate from Renew to Refresh OAuth Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
        
        
        Renews an OAuth access token before it expires.
        
        OAuth access tokens besides your application's personal access token expire after __30 days__.
        You can also renew expired tokens within __15 days__ of their expiration.
        You cannot renew an access token that has been expired for more than 15 days.
        Instead, the associated user must re-complete the OAuth flow from the beginning.
        
        __Important:__ The `Authorization` header for this endpoint must have the
        following format:
        
        ```
        Authorization: Client APPLICATION_SECRET
        ```
        
        Replace `APPLICATION_SECRET` with the application secret on the Credentials
        page in the [developer dashboard](https://developer.squareup.com/apps).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RenewTokenRequest, base_url, '/oauth2/clients/{client_id}/access-token/renew', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "renew_token_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RenewTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RenewTokenResponse])
                res.renew_token_response = out

        return res

    def revoke_token(self, request: shared.RevokeTokenRequest, security: operations.RevokeTokenSecurity) -> operations.RevokeTokenResponse:
        r"""RevokeToken
        Revokes an access token generated with the OAuth flow.
        
        If an account has more than one OAuth access token for your application, this
        endpoint revokes all of them, regardless of which token you specify. When an
        OAuth access token is revoked, all of the active subscriptions associated
        with that OAuth token are canceled immediately.
        
        __Important:__ The `Authorization` header for this endpoint must have the
        following format:
        
        ```
        Authorization: Client APPLICATION_SECRET
        ```
        
        Replace `APPLICATION_SECRET` with the application secret on the OAuth
        page in the [developer dashboard](https://developer.squareup.com/apps).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/oauth2/revoke'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RevokeTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RevokeTokenResponse])
                res.revoke_token_response = out

        return res

    