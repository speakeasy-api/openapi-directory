// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

// CreateOrUpdateCalculatorConfigurationRequestBodyAffiliates - Object with information of the affiliate.
type CreateOrUpdateCalculatorConfigurationRequestBodyAffiliates struct {
	// Affiliate ID.
	ID *string `json:"id,omitempty"`
	// Affiliate Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfigurationRequestBodyBrands - Object with information of the brand.
type CreateOrUpdateCalculatorConfigurationRequestBodyBrands struct {
	// Brand ID.
	ID *string `json:"id,omitempty"`
	// Brand Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfigurationRequestBodyCategories - Object with information of the category.
type CreateOrUpdateCalculatorConfigurationRequestBodyCategories struct {
	// Category ID.
	ID *string `json:"id,omitempty"`
	// Category Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfigurationRequestBodyCollections - Object with information of the collection.
type CreateOrUpdateCalculatorConfigurationRequestBodyCollections struct {
	// Collection ID.
	ID *string `json:"id,omitempty"`
	// Collection Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfigurationRequestBodyPaymentsMethods - Object with information of the Payment Method.
type CreateOrUpdateCalculatorConfigurationRequestBodyPaymentsMethods struct {
	// Payment Method ID.
	ID *string `json:"id,omitempty"`
	// Payment Method Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfigurationRequestBodyProducts - Object with information of the product.
type CreateOrUpdateCalculatorConfigurationRequestBodyProducts struct {
	// Product ID.
	ID *string `json:"id,omitempty"`
	// Product Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfigurationRequestBodySkus - Object with information of the SKU.
type CreateOrUpdateCalculatorConfigurationRequestBodySkus struct {
	// SKU ID.
	ID *string `json:"id,omitempty"`
	// SKU Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfigurationRequestBodySkusGift - SKU Gift Object. Total discount on the product value set as a gift.
type CreateOrUpdateCalculatorConfigurationRequestBodySkusGift struct {
	// Array with SKU Gifts IDs.
	Gifts []interface{} `json:"gifts,omitempty"`
	// Quantity of SKU Gifts.
	QuantitySelectable *int64 `json:"quantitySelectable,omitempty"`
}

// CreateOrUpdateCalculatorConfigurationRequestBodyZipCodeRanges - Zip code that applies the promotion.
type CreateOrUpdateCalculatorConfigurationRequestBodyZipCodeRanges struct {
	// Defines if the zip code applies the promotion.
	Inclusive *bool `json:"inclusive,omitempty"`
}

type CreateOrUpdateCalculatorConfigurationRequestBody struct {
	// Maximum shipping value.
	AbsoluteShippingDiscountValue *float64 `json:"absoluteShippingDiscountValue,omitempty"`
	// Allows the promotion to apply to products whose prices have been manually added by a call-center operator.
	AccumulateWithManualPrice *bool `json:"accumulateWithManualPrice,omitempty"`
	// If set as `true`, it activates gifts Multiplier.
	ActivateGiftsMultiplier *bool `json:"activateGiftsMultiplier,omitempty"`
	// Defines which days of the week the Promotion or Tax will applied.
	ActiveDaysOfWeek []string `json:"activeDaysOfWeek,omitempty"`
	// Marketplace order identifier. The discount will apply to selected affiliates.
	Affiliates []CreateOrUpdateCalculatorConfigurationRequestBodyAffiliates `json:"affiliates,omitempty"`
	// Promotion or Tax will be applied to all kind of shipping.
	ApplyToAllShippings *bool `json:"applyToAllShippings,omitempty"`
	// If set to `false`, this Promotion or Tax will be applied to any trade policies present on the `idsSalesChannel` field. If set to `true`, trade policies present on that field will make this Promotion or Tax not to be applied.
	AreSalesChannelIdsExclusive *bool `json:"areSalesChannelIdsExclusive,omitempty"`
	// Promotion or Tax Begin Date (UTC).
	BeginDateUtc *string `json:"beginDateUtc,omitempty"`
	// Object composed by the brands that will activate or deactivate the Promotion or Tax.
	Brands []CreateOrUpdateCalculatorConfigurationRequestBodyBrands `json:"brands,omitempty"`
	// If set to `true`, this Promotion or Tax will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this Promotion or Tax not to be applied.
	BrandsAreInclusive *bool `json:"brandsAreInclusive,omitempty"`
	// Campaign Audiences that activate this Promotion or Tax.
	Campaigns   []interface{} `json:"campaigns,omitempty"`
	CardIssuers []interface{} `json:"cardIssuers,omitempty"`
	// Object composed by the categories that will activate or deactivate the Promotion or Tax.
	Categories []CreateOrUpdateCalculatorConfigurationRequestBodyCategories `json:"categories,omitempty"`
	// If set to `true`, this Promotion or Tax will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this Promotion or Tax not to be applied.
	CategoriesAreInclusive *bool `json:"categoriesAreInclusive,omitempty"`
	// An expression to use with clusters.
	ClusterExpressions []string `json:"clusterExpressions,omitempty"`
	// Object composed by the collections that will activate or deactivate the Promotion or Tax.
	Collections []CreateOrUpdateCalculatorConfigurationRequestBodyCollections `json:"collections,omitempty"`
	// Collections that will generate the Promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**.
	Collections1BuyTogether []string      `json:"collections1BuyTogether,omitempty"`
	Collections2BuyTogether []interface{} `json:"collections2BuyTogether,omitempty"`
	// If set to `true`, this Promotion or Tax will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this Promotion or Tax not to be applied.
	CollectionsIsInclusive *bool `json:"collectionsIsInclusive,omitempty"`
	// If the **List Price** and **Price** are the same.
	CompareListPriceAndPrice *bool `json:"compareListPriceAndPrice,omitempty"`
	// Array with conditions IDs.
	ConditionsIds []string      `json:"conditionsIds,omitempty"`
	Coupon        []interface{} `json:"coupon,omitempty"`
	// Defines if a Promotion or Tax can accumulate with another one. (`true`) or not (`false`).
	Cumulative *bool `json:"cumulative,omitempty"`
	// Number of days that are considered to add the purchase history.
	DaysAgoOfPurchases *int64 `json:"daysAgoOfPurchases,omitempty"`
	// Internal description of the Promotion or Tax.
	Description *string `json:"description,omitempty"`
	DisableDeal *bool   `json:"disableDeal,omitempty"`
	// The type of discount that will apply to the promotion.
	DiscountType *string `json:"discountType,omitempty"`
	// Enable **Buy Together** per SKU.
	EnableBuyTogetherPerSku *bool `json:"enableBuyTogetherPerSku,omitempty"`
	// Promotion or Tax End Date (UTC).
	EndDateUtc *string `json:"endDateUtc,omitempty"`
	// Applies the discount even if the user is not logged.
	FirstBuyIsProfileOptimistic *bool `json:"firstBuyIsProfileOptimistic,omitempty"`
	// Gifts List Type.
	GiftListTypes []string `json:"giftListTypes,omitempty"`
	// Promotion ID or Tax ID.
	IDCalculatorConfiguration *string `json:"idCalculatorConfiguration,omitempty"`
	// Seller Name.
	IDSeller *string `json:"idSeller,omitempty"`
	// If set to `true`, this Promotion or Tax will be applied to any seller present on the `idSeller` field. If set to `false`, sellers present on that field will make this Promotion or Tax not to be applied.
	IDSellerIsInclusive *bool `json:"idSellerIsInclusive,omitempty"`
	// List of Trade Policies that activate this Promotion or Tax.
	IdsSalesChannel []string `json:"idsSalesChannel,omitempty"`
	Installment     *int64   `json:"installment,omitempty"`
	// If set as `true` the Promotion or Tax is activated. If set as `false` the Promotion or Tax is deactivated.
	IsActive *bool `json:"isActive,omitempty"`
	// If set as `true` the Promotion or Tax is archived. If set as `false` the Promotion or Tax is not archived.
	IsArchived *bool `json:"isArchived,omitempty"`
	// Applies the Promotion or Tax only if the list price and price is different.
	IsDifferentListPriceAndPrice *bool `json:"isDifferentListPriceAndPrice,omitempty"`
	// Insert a flag with the promotion name used in the product's window display and page.
	IsFeatured *bool `json:"isFeatured,omitempty"`
	// Applies the discount only if it's a first buy.
	IsFirstBuy *bool `json:"isFirstBuy,omitempty"`
	// Set if the Promotion or Tax will be applied considering a minimum and maximum values for installments.
	IsMinMaxInstallments *bool `json:"isMinMaxInstallments,omitempty"`
	// Applies selected discount only when one of the defined shipping method is selected by the customer.
	IsSLASelected *bool `json:"isSlaSelected,omitempty"`
	// Maximum price of the item.
	ItemMaxPrice *float64 `json:"itemMaxPrice,omitempty"`
	// Minimum price of the item.
	ItemMinPrice *float64 `json:"itemMinPrice,omitempty"`
	// Date when the Promotion or Tax was last modified.
	LastModified *string `json:"lastModified,omitempty"`
	// SKU first list for the promotion **Buy Together**.
	ListSku1BuyTogether []interface{} `json:"listSku1BuyTogether,omitempty"`
	// SKU second list for the promotion **Buy Together**.
	ListSku2BuyTogether []interface{} `json:"listSku2BuyTogether,omitempty"`
	// Promotion or Tax Marketing tags.
	MarketingTags []string `json:"marketingTags,omitempty"`
	// If set to `false`, this Promotion or Tax will be applied to any marketing tag present on the `marketingTags` field. If set to `true`, marketing tags present on that field will make this Promotion or Tax not to be applied.
	MarketingTagsAreNotInclusive *bool `json:"marketingTagsAreNotInclusive,omitempty"`
	// Maximum value for installment.
	MaxInstallment *int64 `json:"maxInstallment,omitempty"`
	// The maximum number of affected items for a promotion.
	MaxNumberOfAffectedItems *int64 `json:"maxNumberOfAffectedItems,omitempty"`
	// The maximum number of affected items by group key for a promotion.
	MaxNumberOfAffectedItemsGroupKey *string       `json:"maxNumberOfAffectedItemsGroupKey,omitempty"`
	MaxPricesPerItems                []interface{} `json:"maxPricesPerItems,omitempty"`
	// Defines how many times the Promotion or Tax can be used.
	MaxUsage *int64 `json:"maxUsage,omitempty"`
	// Defines if the promotion can be used multiple times per client.
	MaxUsagePerClient *int64 `json:"maxUsagePerClient,omitempty"`
	// The maximum price for each item of the purchase will be the price set up.
	MaximumUnitPriceDiscount *float64      `json:"maximumUnitPriceDiscount,omitempty"`
	Merchants                []interface{} `json:"merchants,omitempty"`
	// Minimum value for installment.
	MinInstallment *int64 `json:"minInstallment,omitempty"`
	// Minimum quantity for **Buy Together** promotion.
	MinimumQuantityBuyTogether *int64 `json:"minimumQuantityBuyTogether,omitempty"`
	// Defines if the promotion can be used multiple times per client.
	MultipleUsePerClient *bool `json:"multipleUsePerClient,omitempty"`
	// Promotion name or Tax name.
	Name *string `json:"name,omitempty"`
	// New time offset from UTC in seconds.
	NewOffset *float64 `json:"newOffset,omitempty"`
	// Exact discount to be applied for the total purchase value.
	NominalDiscountValue *float64 `json:"nominalDiscountValue,omitempty"`
	// Nominal value for rewards program.
	NominalRewardValue *float64 `json:"nominalRewardValue,omitempty"`
	// Exact discount to be applied for the shipping value.
	NominalShippingDiscountValue *float64 `json:"nominalShippingDiscountValue,omitempty"`
	// Nominal Tax.
	NominalTax *float64 `json:"nominalTax,omitempty"`
	// Time offset from UTC in seconds.
	Offset *int64 `json:"offset,omitempty"`
	// Order status reward value.
	OrderStatusRewardValue *string `json:"orderStatusRewardValue,omitempty"`
	// Origin of the Promotion or Tax, `marketplace` or `Fulfillment`.  Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information.
	Origin *string `json:"origin,omitempty"`
	// Array composed by all the Payments Methods that activate this Promotion or Tax.
	PaymentsMethods []CreateOrUpdateCalculatorConfigurationRequestBodyPaymentsMethods `json:"paymentsMethods,omitempty"`
	PaymentsRules   []interface{}                                                     `json:"paymentsRules,omitempty"`
	// Percentage discount to be applied for total purchase value.
	PercentualDiscountValue *float64 `json:"percentualDiscountValue,omitempty"`
	// Percentual discount value list.
	PercentualDiscountValueList []float64 `json:"percentualDiscountValueList,omitempty"`
	// Valid discounts for the SKUs in `listSku1BuyTogether`, discount list used for Buy Together Promotions.
	PercentualDiscountValueList1 *float64 `json:"percentualDiscountValueList1,omitempty"`
	// Equivalent to `percentualDiscountValueList1`.
	PercentualDiscountValueList2 *float64 `json:"percentualDiscountValueList2,omitempty"`
	// Percentage value for rewards program.
	PercentualRewardValue *float64 `json:"percentualRewardValue,omitempty"`
	// Percentage discount to be applied for shipping value.
	PercentualShippingDiscountValue *float64 `json:"percentualShippingDiscountValue,omitempty"`
	// Percentual Tax over purchase total value.
	PercentualTax *float64 `json:"percentualTax,omitempty"`
	// Object composed by the products that will activate or deactivate the Promotion or Tax.
	Products []CreateOrUpdateCalculatorConfigurationRequestBodyProducts `json:"products,omitempty"`
	// If set to `true`, this Promotion or Tax will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this Promotion or Tax not to be applied.
	ProductsAreInclusive   *bool         `json:"productsAreInclusive,omitempty"`
	ProductsSpecifications []interface{} `json:"productsSpecifications,omitempty"`
	// Quantity to affect **Buy Together** promotion.
	QuantityToAffectBuyTogether *int64 `json:"quantityToAffectBuyTogether,omitempty"`
	// Percentual Shipping Discount Value.
	RebatePercentualDiscountValue *float64 `json:"rebatePercentualDiscountValue,omitempty"`
	// The discount will be granted if the card's BIN is given.
	RestrictionsBins []string `json:"restrictionsBins,omitempty"`
	// Shipping Percentual Tax over purchase total value.
	ShippingPercentualTax *float64 `json:"shippingPercentualTax,omitempty"`
	// Should distribute discount among matched items.
	ShouldDistributeDiscountAmongMatchedItems *bool `json:"shouldDistributeDiscountAmongMatchedItems,omitempty"`
	// Object composed by the SKUs that will activate or deactivate the Promotion or Tax.
	Skus []CreateOrUpdateCalculatorConfigurationRequestBodySkus `json:"skus,omitempty"`
	// If set to `true`, this Promotion or Tax will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this Promotion or Tax not to be applied.
	SkusAreInclusive *bool `json:"skusAreInclusive,omitempty"`
	// SKU Gift Object. Total discount on the product value set as a gift.
	SkusGift *CreateOrUpdateCalculatorConfigurationRequestBodySkusGift `json:"skusGift,omitempty"`
	// The discount will be granted if the shipping method is the same as the one given.
	SlasIds            []string      `json:"slasIds,omitempty"`
	Stores             []interface{} `json:"stores,omitempty"`
	StoresAreInclusive *bool         `json:"storesAreInclusive,omitempty"`
	// Maximum chart value to activate the Promotion or Tax.
	TotalValueCeling *float64 `json:"totalValueCeling,omitempty"`
	// Minimum chart value to activate the Promotion or Tax.
	TotalValueFloor           *float64 `json:"totalValueFloor,omitempty"`
	TotalValueIncludeAllItems *bool    `json:"totalValueIncludeAllItems,omitempty"`
	// Defines if products that already are receiving a promotion will be considered on the chart total value. There are three options available: `IncludeMatchedItems`, `ExcludeMatchedItems`, `AllItems`.
	TotalValueMode *string `json:"totalValueMode,omitempty"`
	// Total value a client must have in past orders to activate the Promotion or Tax.
	TotalValuePurchase *float64 `json:"totalValuePurchase,omitempty"`
	// Defines what is the type of the promotion or indicates if it is a tax. Possible values: `regular` ([Regular Promotion](https://help.vtex.com/tutorial/regular-promotion--tutorials_327)), `combo` ([Buy Together](https://help.vtex.com/en/tutorial/buy-together--tutorials_323)), `forThePriceOf` ([More for Less](https://help.vtex.com/en/tutorial/creating-a-more-for-less-promotion--tutorials_325)), `progressive` ([Progressive Discount](https://help.vtex.com/en/tutorial/progressive-discount--tutorials_324)), `buyAndWin` ([Buy One Get One](https://help.vtex.com/en/tutorial/buy-one-get-one--tutorials_322)), `maxPricePerItem` (Deprecated), `campaign` ([Campaign Promotion](https://help.vtex.com/en/tutorial/campaign-promotion--1ChYXhK2AQGuS6wAqS8Ume)), `tax` (Tax), `multipleEffects` (Multiple Effects).
	Type *string `json:"type,omitempty"`
	// Use new progressive algorithm.
	UseNewProgressiveAlgorithm *bool `json:"useNewProgressiveAlgorithm,omitempty"`
	// Coupon utmCampaign code.
	UtmCampaign *string `json:"utmCampaign,omitempty"`
	// Coupon utmSource code.
	UtmSource *string `json:"utmSource,omitempty"`
	// Range of the zip code that applies the promotion.
	ZipCodeRanges []CreateOrUpdateCalculatorConfigurationRequestBodyZipCodeRanges `json:"zipCodeRanges,omitempty"`
}

type CreateOrUpdateCalculatorConfigurationRequest struct {
	// HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
	Accept string `header:"style=simple,explode=false,name=Accept"`
	// Type of the content being sent.
	ContentType string                                           `header:"style=simple,explode=false,name=Content-Type"`
	RequestBody CreateOrUpdateCalculatorConfigurationRequestBody `request:"mediaType=application/json"`
}

// CreateOrUpdateCalculatorConfiguration200ApplicationJSONAffiliates - Object with information of the affiliate.
type CreateOrUpdateCalculatorConfiguration200ApplicationJSONAffiliates struct {
	// Affiliate ID.
	ID *string `json:"id,omitempty"`
	// Affiliate Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfiguration200ApplicationJSONBrands - Object with information of the brand.
type CreateOrUpdateCalculatorConfiguration200ApplicationJSONBrands struct {
	// Brand ID.
	ID *string `json:"id,omitempty"`
	// Brand Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfiguration200ApplicationJSONCategories - Object with information of the category.
type CreateOrUpdateCalculatorConfiguration200ApplicationJSONCategories struct {
	// Category ID.
	ID *string `json:"id,omitempty"`
	// Category Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfiguration200ApplicationJSONCollections - Object with information of the collection.
type CreateOrUpdateCalculatorConfiguration200ApplicationJSONCollections struct {
	// Collection ID.
	ID *string `json:"id,omitempty"`
	// Collection Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfiguration200ApplicationJSONPaymentsMethods - Object with information of the Payment Method.
type CreateOrUpdateCalculatorConfiguration200ApplicationJSONPaymentsMethods struct {
	// Payment Method ID.
	ID *string `json:"id,omitempty"`
	// Payment Method Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfiguration200ApplicationJSONProducts - Object with information of the product.
type CreateOrUpdateCalculatorConfiguration200ApplicationJSONProducts struct {
	// Product ID.
	ID *string `json:"id,omitempty"`
	// Product Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkus - Object with information of the SKU.
type CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkus struct {
	// SKU ID.
	ID *string `json:"id,omitempty"`
	// SKU Name.
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkusGift - SKU Gift Object. Total discount on the product value set as a gift.
type CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkusGift struct {
	// Array with SKU Gifts IDs.
	Gifts *int64 `json:"gifts,omitempty"`
	// Quantity of SKU Gifts.
	QuantitySelectable *int64 `json:"quantitySelectable,omitempty"`
}

// CreateOrUpdateCalculatorConfiguration200ApplicationJSON - OK
type CreateOrUpdateCalculatorConfiguration200ApplicationJSON struct {
	// Maximum shipping value.
	AbsoluteShippingDiscountValue *float64 `json:"absoluteShippingDiscountValue,omitempty"`
	// Allows the promotion to apply to products whose prices have been manually added by a call-center operator.
	AccumulateWithManualPrice *bool `json:"accumulateWithManualPrice,omitempty"`
	// If set as `true`, it activates gifts Multiplier.
	ActivateGiftsMultiplier *bool `json:"activateGiftsMultiplier,omitempty"`
	// Defines which days of the week the promotion will applied.
	ActiveDaysOfWeek []string `json:"activeDaysOfWeek,omitempty"`
	// Marketplace order identifier. The discount will apply to selected affiliates.
	Affiliates []CreateOrUpdateCalculatorConfiguration200ApplicationJSONAffiliates `json:"affiliates,omitempty"`
	// Promotion will be applied to all kind of shipping.
	ApplyToAllShippings *bool `json:"applyToAllShippings,omitempty"`
	// If set to `false`, this promotion will be applied to any trade policies present on the `idsSalesChannel` field. If set to `true`, trade policies present on that field will make this promotion not to be applied.
	AreSalesChannelIdsExclusive *bool `json:"areSalesChannelIdsExclusive,omitempty"`
	// Promotion Begin Date (UTC).
	BeginDateUtc *string `json:"beginDateUtc,omitempty"`
	// Object composed by the brands that will activate or deactivate the promotion.
	Brands []CreateOrUpdateCalculatorConfiguration200ApplicationJSONBrands `json:"brands,omitempty"`
	// If set to `true`, this promotion will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this promotion not to be applied.
	BrandsAreInclusive *bool `json:"brandsAreInclusive,omitempty"`
	// Campaign Audiences that activate this promotion.
	Campaigns   []interface{} `json:"campaigns,omitempty"`
	CardIssuers []interface{} `json:"cardIssuers,omitempty"`
	// Object composed by the categories that will activate or deactivate the promotion.
	Categories []CreateOrUpdateCalculatorConfiguration200ApplicationJSONCategories `json:"categories,omitempty"`
	// If set to `true`, this promotion will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this promotion not to be applied.
	CategoriesAreInclusive *bool `json:"categoriesAreInclusive,omitempty"`
	// An expression to use with clusters.
	ClusterExpressions []string `json:"clusterExpressions,omitempty"`
	// Object composed by the collections that will activate or deactivate the promotion.
	Collections []CreateOrUpdateCalculatorConfiguration200ApplicationJSONCollections `json:"collections,omitempty"`
	// Collections that will generate the promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**.
	Collections1BuyTogether []string      `json:"collections1BuyTogether,omitempty"`
	Collections2BuyTogether []interface{} `json:"collections2BuyTogether,omitempty"`
	// If set to `true`, this promotion will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this promotion not to be applied.
	CollectionsIsInclusive *bool `json:"collectionsIsInclusive,omitempty"`
	// If the **List Price** and **Price** are the same.
	CompareListPriceAndPrice *bool `json:"compareListPriceAndPrice,omitempty"`
	// Array with conditions IDs.
	ConditionsIds []string      `json:"conditionsIds,omitempty"`
	Coupon        []interface{} `json:"coupon,omitempty"`
	// Defines if a promotion can accumulate with another one. (`true`) or not (`false`).
	Cumulative *bool `json:"cumulative,omitempty"`
	// Number of days that are considered to add the purchase history.
	DaysAgoOfPurchases *int64 `json:"daysAgoOfPurchases,omitempty"`
	// Promotion internal description.
	Description *string `json:"description,omitempty"`
	DisableDeal *bool   `json:"disableDeal,omitempty"`
	// The type of discount that will apply to the promotion.
	DiscountType *string `json:"discountType,omitempty"`
	// Enable **Buy Together** per SKU.
	EnableBuyTogetherPerSku *bool `json:"enableBuyTogetherPerSku,omitempty"`
	// Promotion End Date (UTC).
	EndDateUtc *string `json:"endDateUtc,omitempty"`
	// Applies the discount even if the user is not logged.
	FirstBuyIsProfileOptimistic *bool `json:"firstBuyIsProfileOptimistic,omitempty"`
	// Gifts List Type.
	GiftListTypes []string `json:"giftListTypes,omitempty"`
	// Promotion ID.
	IDCalculatorConfiguration *string `json:"idCalculatorConfiguration,omitempty"`
	// Seller Name.
	IDSeller *string `json:"idSeller,omitempty"`
	// If set to `true`, this promotion will be applied to any seller present on the `idSeller` field. If set to `false`, sellers present on that field will make this promotion not to be applied.
	IDSellerIsInclusive *bool `json:"idSellerIsInclusive,omitempty"`
	// List of Trade Policies that activate this promotion.
	IdsSalesChannel []string `json:"idsSalesChannel,omitempty"`
	Installment     *int64   `json:"installment,omitempty"`
	// If set as `true` the Promotion is activated. If set as `false` the Promotion is deactivated.
	IsActive *bool `json:"isActive,omitempty"`
	// If set as `true` the Promotion is archived. If set as `false` the Promotion is not archived.
	IsArchived *bool `json:"isArchived,omitempty"`
	// Applies the promotion only if the list price and price is different.
	IsDifferentListPriceAndPrice *bool `json:"isDifferentListPriceAndPrice,omitempty"`
	// Insert a flag with the promotion name used in the product's window display and page.
	IsFeatured *bool `json:"isFeatured,omitempty"`
	// Applies the discount only if it's a first buy.
	IsFirstBuy *bool `json:"isFirstBuy,omitempty"`
	// Set if the promotion will be applied considering a minimum and maximum values for installments.
	IsMinMaxInstallments *bool `json:"isMinMaxInstallments,omitempty"`
	// Applies selected discount only when one of the defined shipping method is selected by the customer.
	IsSLASelected *bool `json:"isSlaSelected,omitempty"`
	// Maximum price of the item.
	ItemMaxPrice *float64 `json:"itemMaxPrice,omitempty"`
	// Minimum price of the item.
	ItemMinPrice *float64 `json:"itemMinPrice,omitempty"`
	// When the Promotion was last modified.
	LastModified *string `json:"lastModified,omitempty"`
	// SKU first list for the promotion **Buy Together**.
	ListSku1BuyTogether []interface{} `json:"listSku1BuyTogether,omitempty"`
	// SKU second list for the promotion **Buy Together**.
	ListSku2BuyTogether []interface{} `json:"listSku2BuyTogether,omitempty"`
	// Promotion Marketing tags.
	MarketingTags []string `json:"marketingTags,omitempty"`
	// If set to `false`, this promotion will be applied to any marketing tag present on the `marketingTags` field. If set to `true`, marketing tags present on that field will make this promotion not to be applied.
	MarketingTagsAreNotInclusive *bool `json:"marketingTagsAreNotInclusive,omitempty"`
	// Maximum value for installment.
	MaxInstallment *int64 `json:"maxInstallment,omitempty"`
	// The maximum number of affected items for a promotion.
	MaxNumberOfAffectedItems *int64 `json:"maxNumberOfAffectedItems,omitempty"`
	// The maximum number of affected items by group key for a promotion.
	MaxNumberOfAffectedItemsGroupKey *string       `json:"maxNumberOfAffectedItemsGroupKey,omitempty"`
	MaxPricesPerItems                []interface{} `json:"maxPricesPerItems,omitempty"`
	// Defines how many times the promotion can be used.
	MaxUsage *int64 `json:"maxUsage,omitempty"`
	// Defines if the promotion can be used multiple times per client.
	MaxUsagePerClient *int64 `json:"maxUsagePerClient,omitempty"`
	// The maximum price for each item of the purchase will be the price set up.
	MaximumUnitPriceDiscount *float64      `json:"maximumUnitPriceDiscount,omitempty"`
	Merchants                []interface{} `json:"merchants,omitempty"`
	// Minimum value for installment.
	MinInstallment *int64 `json:"minInstallment,omitempty"`
	// Minimum quantity for **Buy Together** promotion.
	MinimumQuantityBuyTogether *int64 `json:"minimumQuantityBuyTogether,omitempty"`
	// Defines if the promotion can be used multiple times per client.
	MultipleUsePerClient *bool `json:"multipleUsePerClient,omitempty"`
	// Promotion Name.
	Name *string `json:"name,omitempty"`
	// New time offset from UTC in seconds.
	NewOffset *float64 `json:"newOffset,omitempty"`
	// Exact discount to be applied for the total purchase value.
	NominalDiscountValue *float64 `json:"nominalDiscountValue,omitempty"`
	// Nominal value for rewards program.
	NominalRewardValue *float64 `json:"nominalRewardValue,omitempty"`
	// Exact discount to be applied for the shipping value.
	NominalShippingDiscountValue *float64 `json:"nominalShippingDiscountValue,omitempty"`
	// Nominal Tax.
	NominalTax *float64 `json:"nominalTax,omitempty"`
	// Time offset from UTC in seconds.
	Offset *int64 `json:"offset,omitempty"`
	// Order status reward value.
	OrderStatusRewardValue *string `json:"orderStatusRewardValue,omitempty"`
	// Origin of the promotion, `marketplace` or `Fulfillment`.  Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information.
	Origin *string `json:"origin,omitempty"`
	// Array composed by all the Payments Methods.
	PaymentsMethods []CreateOrUpdateCalculatorConfiguration200ApplicationJSONPaymentsMethods `json:"paymentsMethods,omitempty"`
	PaymentsRules   []interface{}                                                            `json:"paymentsRules,omitempty"`
	// Percentage discount to be applied for total purchase value.
	PercentualDiscountValue *float64 `json:"percentualDiscountValue,omitempty"`
	// Percentual discount value list.
	PercentualDiscountValueList []float64 `json:"percentualDiscountValueList,omitempty"`
	// Valid discounts for the SKUs in `listSku1BuyTogether`, discount list used for Buy Together Promotions.
	PercentualDiscountValueList1 *float64 `json:"percentualDiscountValueList1,omitempty"`
	// Equivalent to `percentualDiscountValueList1`.
	PercentualDiscountValueList2 *float64 `json:"percentualDiscountValueList2,omitempty"`
	// Percentage value for rewards program.
	PercentualRewardValue *float64 `json:"percentualRewardValue,omitempty"`
	// Percentage discount to be applied for shipping value.
	PercentualShippingDiscountValue *float64 `json:"percentualShippingDiscountValue,omitempty"`
	// Percentual Tax over purchase total value.
	PercentualTax *float64 `json:"percentualTax,omitempty"`
	// Object composed by the products that will activate or deactivate the promotion.
	Products []CreateOrUpdateCalculatorConfiguration200ApplicationJSONProducts `json:"products,omitempty"`
	// If set to `true`, this promotion will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this promotion not to be applied.
	ProductsAreInclusive   *bool         `json:"productsAreInclusive,omitempty"`
	ProductsSpecifications []interface{} `json:"productsSpecifications,omitempty"`
	// Quantity to affect **Buy Together** promotion.
	QuantityToAffectBuyTogether *int64 `json:"quantityToAffectBuyTogether,omitempty"`
	// Percentual Shipping Discount Value.
	RebatePercentualDiscountValue *float64 `json:"rebatePercentualDiscountValue,omitempty"`
	// The discount will be granted if the card's BIN is given.
	RestrictionsBins []string `json:"restrictionsBins,omitempty"`
	// Shipping Percentual Tax over purchase total value.
	ShippingPercentualTax *float64 `json:"shippingPercentualTax,omitempty"`
	// Should distribute discount among matched items.
	ShouldDistributeDiscountAmongMatchedItems *bool `json:"shouldDistributeDiscountAmongMatchedItems,omitempty"`
	// Object composed by the SKUs that will activate or deactivate the promotion.
	Skus []CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkus `json:"skus,omitempty"`
	// If set to `true`, this promotion will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this promotion not to be applied.
	SkusAreInclusive *bool `json:"skusAreInclusive,omitempty"`
	// SKU Gift Object. Total discount on the product value set as a gift.
	SkusGift *CreateOrUpdateCalculatorConfiguration200ApplicationJSONSkusGift `json:"skusGift,omitempty"`
	// The discount will be granted if the shipping method is the same as the one given.
	SlasIds            []string      `json:"slasIds,omitempty"`
	Stores             []interface{} `json:"stores,omitempty"`
	StoresAreInclusive *bool         `json:"storesAreInclusive,omitempty"`
	// Maximum chart value to activate the promotion.
	TotalValueCeling *float64 `json:"totalValueCeling,omitempty"`
	// Minimum chart value to activate the promotion.
	TotalValueFloor           *float64 `json:"totalValueFloor,omitempty"`
	TotalValueIncludeAllItems *bool    `json:"totalValueIncludeAllItems,omitempty"`
	// Defines if products that already are receiving a promotion will be considered on the chart total value. There are three options available: `IncludeMatchedItems`, `ExcludeMatchedItems`, `AllItems`.
	TotalValueMode *string `json:"totalValueMode,omitempty"`
	// Total value a client must have in past orders to active the promotion.
	TotalValuePurchase *float64 `json:"totalValuePurchase,omitempty"`
	// Defines what is the type of the promotion or indicates if it is a tax. Possible values: `regular` ([Regular Promotion](https://help.vtex.com/tutorial/regular-promotion--tutorials_327)), `combo` ([Buy Together](https://help.vtex.com/en/tutorial/buy-together--tutorials_323)), `forThePriceOf` ([More for Less](https://help.vtex.com/en/tutorial/creating-a-more-for-less-promotion--tutorials_325)), `progressive` ([Progressive Discount](https://help.vtex.com/en/tutorial/progressive-discount--tutorials_324)), `buyAndWin` ([Buy One Get One](https://help.vtex.com/en/tutorial/buy-one-get-one--tutorials_322)), `maxPricePerItem` (Deprecated), `campaign` ([Campaign Promotion](https://help.vtex.com/en/tutorial/campaign-promotion--1ChYXhK2AQGuS6wAqS8Ume)), `tax` (Tax), `multipleEffects` (Multiple Effects).
	Type *string `json:"type,omitempty"`
	// Use new progressive algorithm.
	UseNewProgressiveAlgorithm *bool `json:"useNewProgressiveAlgorithm,omitempty"`
	// Coupon utmCampaign code.
	UtmCampaign *string `json:"utmCampaign,omitempty"`
	// Coupon utmSource code.
	UtmSource *string `json:"utmSource,omitempty"`
	// Range of the zip code that applies the promotion.
	ZipCodeRanges []interface{} `json:"zipCodeRanges,omitempty"`
}

type CreateOrUpdateCalculatorConfigurationResponse struct {
	ContentType string
	// OK
	CreateOrUpdateCalculatorConfiguration200ApplicationJSONObject *CreateOrUpdateCalculatorConfiguration200ApplicationJSON
	StatusCode                                                    int
	RawResponse                                                   *http.Response
}
