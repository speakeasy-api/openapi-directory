/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ParameterInlinePolicy } from "./parameterinlinepolicy";
import { ParameterTierEnum } from "./parametertierenum";
import { ParameterTypeEnum } from "./parametertypeenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Metadata includes information like the ARN of the last user and the date/time the parameter was last used.
 */
export class ParameterMetadata extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AllowedPattern" })
  allowedPattern?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DataType" })
  dataType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "KeyId" })
  keyId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedUser" })
  lastModifiedUser?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata({ elemType: ParameterInlinePolicy })
  @Expose({ name: "Policies" })
  @Type(() => ParameterInlinePolicy)
  policies?: ParameterInlinePolicy[];

  @SpeakeasyMetadata()
  @Expose({ name: "Tier" })
  tier?: ParameterTierEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Type" })
  type?: ParameterTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Version" })
  version?: number;
}
