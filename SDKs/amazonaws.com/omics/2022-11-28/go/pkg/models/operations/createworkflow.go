// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateWorkflowRequestBodyEngineEnum - An engine for the workflow.
type CreateWorkflowRequestBodyEngineEnum string

const (
	CreateWorkflowRequestBodyEngineEnumWdl      CreateWorkflowRequestBodyEngineEnum = "WDL"
	CreateWorkflowRequestBodyEngineEnumNextflow CreateWorkflowRequestBodyEngineEnum = "NEXTFLOW"
)

func (e *CreateWorkflowRequestBodyEngineEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WDL":
		fallthrough
	case "NEXTFLOW":
		*e = CreateWorkflowRequestBodyEngineEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWorkflowRequestBodyEngineEnum: %s", s)
	}
}

type CreateWorkflowRequestBody struct {
	// The URI of a definition for the workflow.
	DefinitionURI *string `json:"definitionUri,omitempty"`
	// A ZIP archive for the workflow.
	DefinitionZip *string `json:"definitionZip,omitempty"`
	// A description for the workflow.
	Description *string `json:"description,omitempty"`
	// An engine for the workflow.
	Engine *CreateWorkflowRequestBodyEngineEnum `json:"engine,omitempty"`
	// The path of the main definition file for the workflow.
	Main *string `json:"main,omitempty"`
	// A name for the workflow.
	Name *string `json:"name,omitempty"`
	// A parameter template for the workflow.
	ParameterTemplate map[string]shared.WorkflowParameter `json:"parameterTemplate,omitempty"`
	// To ensure that requests don't run multiple times, specify a unique ID for each request.
	RequestID string `json:"requestId"`
	// A storage capacity for the workflow in gigabytes.
	StorageCapacity *int64 `json:"storageCapacity,omitempty"`
	// Tags for the workflow.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateWorkflowRequest struct {
	RequestBody       CreateWorkflowRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateWorkflowResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateWorkflowResponse *shared.CreateWorkflowResponse
	// InternalServerException
	InternalServerException interface{}
	// RequestTimeoutException
	RequestTimeoutException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
