// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum - The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
type UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum string

const (
	UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnumDoNotRespondToDhcpRequests UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum = "Do not respond to DHCP requests"
	UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnumRelayDhcpToAnotherServer   UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum = "Relay DHCP to another server"
	UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnumRunADhcpServer             UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum = "Run a DHCP server"
)

func (e UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum) ToPointer() *UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum {
	return &e
}

func (e *UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Do not respond to DHCP requests":
		fallthrough
	case "Relay DHCP to another server":
		fallthrough
	case "Run a DHCP server":
		*e = UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum: %v", v)
	}
}

// UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum - The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
type UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum string

const (
	UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnumOneDay        UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum = "1 day"
	UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnumOneHour       UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum = "1 hour"
	UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnumOneWeek       UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum = "1 week"
	UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnumTwelveHours   UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum = "12 hours"
	UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnumThirtyMinutes UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum = "30 minutes"
	UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnumFourHours     UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum = "4 hours"
)

func (e UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum) ToPointer() *UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum {
	return &e
}

func (e *UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1 day":
		fallthrough
	case "1 hour":
		fallthrough
	case "1 week":
		fallthrough
	case "12 hours":
		fallthrough
	case "30 minutes":
		fallthrough
	case "4 hours":
		*e = UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum: %v", v)
	}
}

// UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum - The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
type UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum string

const (
	UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnumHex     UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum = "hex"
	UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnumInteger UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum = "integer"
	UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnumIP      UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum = "ip"
	UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnumText    UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum = "text"
)

func (e UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum) ToPointer() *UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum {
	return &e
}

func (e *UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hex":
		fallthrough
	case "integer":
		fallthrough
	case "ip":
		fallthrough
	case "text":
		*e = UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum: %v", v)
	}
}

type UpdateNetworkApplianceVlanRequestBodyDhcpOptions struct {
	// The code for the DHCP option. This should be an integer between 2 and 254.
	Code string `json:"code"`
	// The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
	Type UpdateNetworkApplianceVlanRequestBodyDhcpOptionsTypeEnum `json:"type"`
	// The value for the DHCP option
	Value string `json:"value"`
}

// UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum - Type of the origin
type UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum string

const (
	UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnumIndependent UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum = "independent"
	UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnumInternet    UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum = "internet"
)

func (e UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum) ToPointer() *UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum {
	return &e
}

func (e *UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "independent":
		fallthrough
	case "internet":
		*e = UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum: %v", v)
	}
}

// UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin - The origin of the prefix
type UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin struct {
	// Interfaces associated with the prefix
	Interfaces []string `json:"interfaces,omitempty"`
	// Type of the origin
	Type UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum `json:"type"`
}

type UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments struct {
	// Auto assign a /64 prefix from the origin to the VLAN
	Autonomous *bool `json:"autonomous,omitempty"`
	// The origin of the prefix
	Origin *UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin `json:"origin,omitempty"`
	// Manual configuration of the IPv6 Appliance IP
	StaticApplianceIp6 *string `json:"staticApplianceIp6,omitempty"`
	// Manual configuration of a /64 prefix on the VLAN
	StaticPrefix *string `json:"staticPrefix,omitempty"`
}

// UpdateNetworkApplianceVlanRequestBodyIpv6 - IPv6 configuration on the VLAN
type UpdateNetworkApplianceVlanRequestBodyIpv6 struct {
	// Enable IPv6 on VLAN.
	Enabled *bool `json:"enabled,omitempty"`
	// Prefix assignments on the VLAN
	PrefixAssignments []UpdateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments `json:"prefixAssignments,omitempty"`
}

// UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp - Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
type UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp struct {
	// Enable Mandatory DHCP on VLAN.
	Enabled *bool `json:"enabled,omitempty"`
}

type UpdateNetworkApplianceVlanRequestBodyReservedIPRanges struct {
	// A text comment for the reserved range
	Comment string `json:"comment"`
	// The last IP in the reserved range
	End string `json:"end"`
	// The first IP in the reserved range
	Start string `json:"start"`
}

// UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum - Type of subnetting of the VLAN. Applicable only for template network.
type UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum string

const (
	UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnumSame   UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum = "same"
	UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnumUnique UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum = "unique"
)

func (e UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum) ToPointer() *UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum {
	return &e
}

func (e *UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "same":
		fallthrough
	case "unique":
		*e = UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum: %v", v)
	}
}

type UpdateNetworkApplianceVlanRequestBody struct {
	// The local IP of the appliance on the VLAN
	ApplianceIP *string `json:"applianceIp,omitempty"`
	// CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.
	Cidr *string `json:"cidr,omitempty"`
	// DHCP boot option for boot filename
	DhcpBootFilename *string `json:"dhcpBootFilename,omitempty"`
	// DHCP boot option to direct boot clients to the server to load the boot file from
	DhcpBootNextServer *string `json:"dhcpBootNextServer,omitempty"`
	// Use DHCP boot options specified in other properties
	DhcpBootOptionsEnabled *bool `json:"dhcpBootOptionsEnabled,omitempty"`
	// The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
	DhcpHandling *UpdateNetworkApplianceVlanRequestBodyDhcpHandlingEnum `json:"dhcpHandling,omitempty"`
	// The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
	DhcpLeaseTime *UpdateNetworkApplianceVlanRequestBodyDhcpLeaseTimeEnum `json:"dhcpLeaseTime,omitempty"`
	// The list of DHCP options that will be included in DHCP responses. Each object in the list should have "code", "type", and "value" properties.
	DhcpOptions []UpdateNetworkApplianceVlanRequestBodyDhcpOptions `json:"dhcpOptions,omitempty"`
	// The IPs of the DHCP servers that DHCP requests should be relayed to
	DhcpRelayServerIps []string `json:"dhcpRelayServerIps,omitempty"`
	// The DNS nameservers used for DHCP responses, either "upstream_dns", "google_dns", "opendns", or a newline seperated string of IP addresses or domain names
	DNSNameservers *string `json:"dnsNameservers,omitempty"`
	// The DHCP fixed IP assignments on the VLAN. This should be an object that contains mappings from MAC addresses to objects that themselves each contain "ip" and "name" string fields. See the sample request/response for more details.
	FixedIPAssignments map[string]interface{} `json:"fixedIpAssignments,omitempty"`
	// The id of the desired group policy to apply to the VLAN
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
	// IPv6 configuration on the VLAN
	Ipv6 *UpdateNetworkApplianceVlanRequestBodyIpv6 `json:"ipv6,omitempty"`
	// Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
	MandatoryDhcp *UpdateNetworkApplianceVlanRequestBodyMandatoryDhcp `json:"mandatoryDhcp,omitempty"`
	// Mask used for the subnet of all bound to the template networks. Applicable only for template network.
	Mask *int64 `json:"mask,omitempty"`
	// The name of the VLAN
	Name *string `json:"name,omitempty"`
	// The DHCP reserved IP ranges on the VLAN
	ReservedIPRanges []UpdateNetworkApplianceVlanRequestBodyReservedIPRanges `json:"reservedIpRanges,omitempty"`
	// The subnet of the VLAN
	Subnet *string `json:"subnet,omitempty"`
	// Type of subnetting of the VLAN. Applicable only for template network.
	TemplateVlanType *UpdateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum `json:"templateVlanType,omitempty"`
	// The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN
	VpnNatSubnet *string `json:"vpnNatSubnet,omitempty"`
}

type UpdateNetworkApplianceVlanRequest struct {
	RequestBody *UpdateNetworkApplianceVlanRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                 `pathParam:"style=simple,explode=false,name=networkId"`
	VlanID      string                                 `pathParam:"style=simple,explode=false,name=vlanId"`
}

// UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum - The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
type UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum string

const (
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnumDoNotRespondToDhcpRequests UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum = "Do not respond to DHCP requests"
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnumRelayDhcpToAnotherServer   UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum = "Relay DHCP to another server"
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnumRunADhcpServer             UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum = "Run a DHCP server"
)

func (e UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum) ToPointer() *UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum {
	return &e
}

func (e *UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Do not respond to DHCP requests":
		fallthrough
	case "Relay DHCP to another server":
		fallthrough
	case "Run a DHCP server":
		*e = UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum: %v", v)
	}
}

// UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum - The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
type UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum string

const (
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnumOneDay        UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = "1 day"
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnumOneHour       UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = "1 hour"
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnumOneWeek       UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = "1 week"
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnumTwelveHours   UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = "12 hours"
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnumThirtyMinutes UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = "30 minutes"
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnumFourHours     UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum = "4 hours"
)

func (e UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum) ToPointer() *UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum {
	return &e
}

func (e *UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1 day":
		fallthrough
	case "1 hour":
		fallthrough
	case "1 week":
		fallthrough
	case "12 hours":
		fallthrough
	case "30 minutes":
		fallthrough
	case "4 hours":
		*e = UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum: %v", v)
	}
}

// UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum - The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
type UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum string

const (
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnumHex     UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum = "hex"
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnumInteger UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum = "integer"
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnumIP      UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum = "ip"
	UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnumText    UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum = "text"
)

func (e UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum) ToPointer() *UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum {
	return &e
}

func (e *UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hex":
		fallthrough
	case "integer":
		fallthrough
	case "ip":
		fallthrough
	case "text":
		*e = UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum: %v", v)
	}
}

type UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions struct {
	// The code for the DHCP option. This should be an integer between 2 and 254.
	Code string `json:"code"`
	// The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
	Type UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptionsTypeEnum `json:"type"`
	// The value for the DHCP option
	Value string `json:"value"`
}

// UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum - Type of the origin
type UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum string

const (
	UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnumIndependent UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = "independent"
	UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnumInternet    UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum = "internet"
)

func (e UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum) ToPointer() *UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum {
	return &e
}

func (e *UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "independent":
		fallthrough
	case "internet":
		*e = UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum: %v", v)
	}
}

// UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin - The origin of the prefix
type UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin struct {
	// Interfaces associated with the prefix
	Interfaces []string `json:"interfaces,omitempty"`
	// Type of the origin
	Type *UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum `json:"type,omitempty"`
}

type UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments struct {
	// Auto assign a /64 prefix from the origin to the VLAN
	Autonomous *bool `json:"autonomous,omitempty"`
	// The origin of the prefix
	Origin *UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignmentsOrigin `json:"origin,omitempty"`
	// Manual configuration of the IPv6 Appliance IP
	StaticApplianceIp6 *string `json:"staticApplianceIp6,omitempty"`
	// Manual configuration of a /64 prefix on the VLAN
	StaticPrefix *string `json:"staticPrefix,omitempty"`
}

// UpdateNetworkApplianceVlan200ApplicationJSONIpv6 - IPv6 configuration on the VLAN
type UpdateNetworkApplianceVlan200ApplicationJSONIpv6 struct {
	// Enable IPv6 on VLAN
	Enabled *bool `json:"enabled,omitempty"`
	// Prefix assignments on the VLAN
	PrefixAssignments []UpdateNetworkApplianceVlan200ApplicationJSONIpv6PrefixAssignments `json:"prefixAssignments,omitempty"`
}

// UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp - Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
type UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp struct {
	// Enable Mandatory DHCP on VLAN.
	Enabled *bool `json:"enabled,omitempty"`
}

type UpdateNetworkApplianceVlan200ApplicationJSONReservedIPRanges struct {
	// A text comment for the reserved range
	Comment *string `json:"comment,omitempty"`
	// The last IP in the reserved range
	End *string `json:"end,omitempty"`
	// The first IP in the reserved range
	Start *string `json:"start,omitempty"`
}

// UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum - Type of subnetting of the VLAN. Applicable only for template network.
type UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum string

const (
	UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnumSame   UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum = "same"
	UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnumUnique UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum = "unique"
)

func (e UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum) ToPointer() *UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum {
	return &e
}

func (e *UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "same":
		fallthrough
	case "unique":
		*e = UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum: %v", v)
	}
}

// UpdateNetworkApplianceVlan200ApplicationJSON - Successful operation
type UpdateNetworkApplianceVlan200ApplicationJSON struct {
	// The local IP of the appliance on the VLAN
	ApplianceIP *string `json:"applianceIp,omitempty"`
	// CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.
	Cidr *string `json:"cidr,omitempty"`
	// DHCP boot option for boot filename
	DhcpBootFilename *string `json:"dhcpBootFilename,omitempty"`
	// DHCP boot option to direct boot clients to the server to load the boot file from
	DhcpBootNextServer *string `json:"dhcpBootNextServer,omitempty"`
	// Use DHCP boot options specified in other properties
	DhcpBootOptionsEnabled *bool `json:"dhcpBootOptionsEnabled,omitempty"`
	// The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
	DhcpHandling *UpdateNetworkApplianceVlan200ApplicationJSONDhcpHandlingEnum `json:"dhcpHandling,omitempty"`
	// The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
	DhcpLeaseTime *UpdateNetworkApplianceVlan200ApplicationJSONDhcpLeaseTimeEnum `json:"dhcpLeaseTime,omitempty"`
	// The list of DHCP options that will be included in DHCP responses. Each object in the list should have "code", "type", and "value" properties.
	DhcpOptions []UpdateNetworkApplianceVlan200ApplicationJSONDhcpOptions `json:"dhcpOptions,omitempty"`
	// The IPs of the DHCP servers that DHCP requests should be relayed to
	DhcpRelayServerIps []string `json:"dhcpRelayServerIps,omitempty"`
	// The DNS nameservers used for DHCP responses, either "upstream_dns", "google_dns", "opendns", or a newline seperated string of IP addresses or domain names
	DNSNameservers *string `json:"dnsNameservers,omitempty"`
	// The DHCP fixed IP assignments on the VLAN. This should be an object that contains mappings from MAC addresses to objects that themselves each contain "ip" and "name" string fields. See the sample request/response for more details.
	FixedIPAssignments map[string]interface{} `json:"fixedIpAssignments,omitempty"`
	// The id of the desired group policy to apply to the VLAN
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
	// The VLAN ID of the VLAN
	ID *string `json:"id,omitempty"`
	// The interface ID of the VLAN
	InterfaceID *string `json:"interfaceId,omitempty"`
	// IPv6 configuration on the VLAN
	Ipv6 *UpdateNetworkApplianceVlan200ApplicationJSONIpv6 `json:"ipv6,omitempty"`
	// Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
	MandatoryDhcp *UpdateNetworkApplianceVlan200ApplicationJSONMandatoryDhcp `json:"mandatoryDhcp,omitempty"`
	// Mask used for the subnet of all bound to the template networks. Applicable only for template network.
	Mask *int64 `json:"mask,omitempty"`
	// The name of the VLAN
	Name *string `json:"name,omitempty"`
	// The DHCP reserved IP ranges on the VLAN
	ReservedIPRanges []UpdateNetworkApplianceVlan200ApplicationJSONReservedIPRanges `json:"reservedIpRanges,omitempty"`
	// The subnet of the VLAN
	Subnet *string `json:"subnet,omitempty"`
	// Type of subnetting of the VLAN. Applicable only for template network.
	TemplateVlanType *UpdateNetworkApplianceVlan200ApplicationJSONTemplateVlanTypeEnum `json:"templateVlanType,omitempty"`
	// The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN
	VpnNatSubnet *string `json:"vpnNatSubnet,omitempty"`
}

type UpdateNetworkApplianceVlanResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkApplianceVlan200ApplicationJSONObject *UpdateNetworkApplianceVlan200ApplicationJSON
}
