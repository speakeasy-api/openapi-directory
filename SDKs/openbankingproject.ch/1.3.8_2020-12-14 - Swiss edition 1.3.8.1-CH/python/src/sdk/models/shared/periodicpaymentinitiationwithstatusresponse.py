"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import accountreference16_ch as shared_accountreference16_ch
from ..shared import address as shared_address
from ..shared import amount as shared_amount
from ..shared import creditoragent7_ch as shared_creditoragent7_ch
from ..shared import dayofexecution_enum as shared_dayofexecution_enum
from ..shared import executionrule_enum as shared_executionrule_enum
from ..shared import frequencycode_enum as shared_frequencycode_enum
from ..shared import purposecode_enum as shared_purposecode_enum
from ..shared import remittanceinformationstructured as shared_remittanceinformationstructured
from ..shared import transactionstatus_enum as shared_transactionstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PeriodicPaymentInitiationWithStatusResponse:
    r"""Generic JSON response body consistion of the corresponding periodic payment initation JSON body together with an optional transaction status field."""
    
    creditor_account: shared_accountreference16_ch.AccountReference16CH = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorAccount') }})
    r"""Reference to an account by either
      * IBAN, of a payment accounts, or
      * otherAccountIdentification, for payment accounts if there is no IBAN
    adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
    """  
    creditor_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorName') }})
    r"""Creditor name."""  
    debtor_account: shared_accountreference16_ch.AccountReference16CH = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debtorAccount') }})
    r"""Reference to an account by either
      * IBAN, of a payment accounts, or
      * otherAccountIdentification, for payment accounts if there is no IBAN
    adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
    """  
    frequency: shared_frequencycode_enum.FrequencyCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency') }})
    r"""The following codes from the \\"EventFrequency7Code\\" of ISO 20022 are supported:
    - \"Daily\"
    - \"Weekly\"
    - \"EveryTwoWeeks\"
    - \"Monthly\"
    - \"EveryTwoMonths\"
    - \"Quarterly\"
    - \"SemiAnnual\"
    - \"Annual\"
    - \"MonthlyVariable\" 
    """  
    instructed_amount: shared_amount.Amount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructedAmount') }})  
    start_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The first applicable day of execution starting from this date is the first payment."""  
    creditor_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorAddress'), 'exclude': lambda f: f is None }})  
    creditor_agent: Optional[shared_creditoragent7_ch.CreditorAgent7CH] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditorAgent'), 'exclude': lambda f: f is None }})
    r"""Reference to an creditorAgent by either
      * BIC, of the creditor bank, or
      * IID, of the creditor bank, or
      * IID and optional name and address of the creditor bank or
      * Name and address of the creditor bank
    adapted from ISO pain.001.001.03.ch.02 FinancialInstitutionIdentification7-CH
    """  
    day_of_execution: Optional[shared_dayofexecution_enum.DayOfExecutionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfExecution'), 'exclude': lambda f: f is None }})
    r"""Day of execution as string.
    
    This string consists of up two characters.
    Leading zeroes are not allowed.
    
    31 is ultimo of the month.
    """  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The last applicable day of execution.
    If not given, it is an infinite standing order.
    """  
    end_to_end_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endToEndIdentification'), 'exclude': lambda f: f is None }})  
    execution_rule: Optional[shared_executionrule_enum.ExecutionRuleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionRule'), 'exclude': lambda f: f is None }})
    r"""\\"following\\" or \\"preceding\\" supported as values.
    This data attribute defines the behaviour when recurring payment dates falls on a weekend or bank holiday.
    The payment is then executed either the \"preceding\" or \"following\" working day.
    ASPSP might reject the request due to the communicated value, if rules in Online-Banking are not supporting
    this execution rule.
    """  
    purpose_code: Optional[shared_purposecode_enum.PurposeCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purposeCode'), 'exclude': lambda f: f is None }})
    r"""ExternalPurpose1Code from ISO 20022.
    
    Values from ISO 20022 External Code List ExternalCodeSets_1Q2018 June 2018.
    """  
    remittance_information_structured: Optional[shared_remittanceinformationstructured.RemittanceInformationStructured] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remittanceInformationStructured'), 'exclude': lambda f: f is None }})
    r"""Structured remittance information."""  
    remittance_information_unstructured: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remittanceInformationUnstructured'), 'exclude': lambda f: f is None }})
    r"""Unstructured remittance information."""  
    remittance_information_unstructured_array: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remittanceInformationUnstructuredArray'), 'exclude': lambda f: f is None }})
    r"""Array of unstructured remittance information."""  
    requested_execution_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestedExecutionDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    requested_execution_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestedExecutionTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    transaction_status: Optional[shared_transactionstatus_enum.TransactionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionStatus'), 'exclude': lambda f: f is None }})
    r"""The transaction status is filled with codes of the ISO 20022 data table:
    - 'ACCC': 'AcceptedSettlementCompleted' -
      Settlement on the creditor's account has been completed.
    - 'ACCP': 'AcceptedCustomerProfile' -
      Preceding check of technical validation was successful.
      Customer profile check was also successful.
    - 'ACSC': 'AcceptedSettlementCompleted' -
      Settlement on the debtoro?=s account has been completed.
    
      **Usage:** this can be used by the first agent to report to the debtor that the transaction has been completed.
    
      **Warning:** this status is provided for transaction status reasons, not for financial information.
      It can only be used after bilateral agreement.
    - 'ACSP': 'AcceptedSettlementInProcess' -
      All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution.
    - 'ACTC': 'AcceptedTechnicalValidation' -
      Authentication and syntactical and semantical validation are successful.
    - 'ACWC': 'AcceptedWithChange' -
      Instruction is accepted but a change will be made, such as date or remittance not sent.
    - 'ACWP': 'AcceptedWithoutPosting' -
      Payment instruction included in the credit transfer is accepted without being posted to the creditor customero?=s account.
    - 'RCVD': 'Received' -
      Payment initiation has been received by the receiving agent.
    - 'PDNG': 'Pending' -
      Payment initiation or individual transaction included in the payment initiation is pending.
      Further checks and status update will be performed.
    - 'RJCT': 'Rejected' -
      Payment initiation or individual transaction included in the payment initiation has been rejected.
    - 'CANC': 'Cancelled'
      Payment initiation has been cancelled before execution
      Remark: This codeis accepted as new code by ISO20022.
    - 'ACFC': 'AcceptedFundsChecked' -
      Preceding check of technical validation and customer profile was successful and an automatic funds check was positive .
      Remark: This code is accepted as new code by ISO20022.
    - 'PATC': 'PartiallyAcceptedTechnical'
      Correct The payment initiation needs multiple authentications, where some but not yet all have been performed. Syntactical and semantical validations are successful.
      Remark: This code is accepted as new code by ISO20022.
    - 'PART': 'PartiallyAccepted' -
      A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status.
      Remark: This code may be used only in case of bulk payments. It is only used in a situation where all mandated authorisations have been applied, but some payments have been rejected.
    """  
    ultimate_creditor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ultimateCreditor'), 'exclude': lambda f: f is None }})
    r"""Ultimate creditor."""  
    ultimate_debtor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ultimateDebtor'), 'exclude': lambda f: f is None }})
    r"""Ultimate debtor."""  
    