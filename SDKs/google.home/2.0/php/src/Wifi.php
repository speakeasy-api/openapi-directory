<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Wifi 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Connect to Wi-Fi Network
     * 
     * **Note:** Not sure how the password is encrypted. Might be using the public certificate from /setup/eureka_info. So this cannot be used as of now. If someone figures it out, please [create a new issue here](https://github.com/rithvikvibhu/GHLocalApi/issues/new).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConnecttoWiFiNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnecttoWiFiNetworkResponse
     */
	public function connecttoWiFiNetwork(
        \OpenAPI\OpenAPI\Models\Shared\ConnecttoWiFiNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnecttoWiFiNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/connect_wifi');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnecttoWiFiNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Forget Wi-Fi Network
     * 
     * This is to forget a saved network by `wpa_id`. Get the `wpa_id` from /setup/configured_networks
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ForgetWiFiNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForgetWiFiNetworkResponse
     */
	public function forgetWiFiNetwork(
        \OpenAPI\OpenAPI\Models\Shared\ForgetWiFiNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForgetWiFiNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/forget_wifi');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForgetWiFiNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->forgetWiFiNetwork200TextPlainObject = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Saved Networks
     * 
     * This gets a list of all saved Wi-Fi networks.
     * 
     * Each network has `ssid`, `wpa_auth`, `wpa_cipher` and `wpa_id`.  
     * `wpa_id` is an incrementing number used to identify a saved network.  
     * #TODO: Add values for `wpa_auth` and `wpa_cipher`.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSavedNetworksResponse
     */
	public function getSavedNetworks(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSavedNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/configured_networks');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSavedNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example113s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Example113>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Wi-Fi Scan Results
     * 
     * This gets a list of all nearby Wi-Fi access points.
     * 
     * The list only has the connected AP by default. Once a scan is triggered by `/setup/scan_wifi`, the whole list is cached for ~3 minutes. Then it will revert to returning only the connected AP again.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWiFiScanResultsResponse
     */
	public function getWiFiScanResults(
    ): \OpenAPI\OpenAPI\Models\Operations\GetWiFiScanResultsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scan_results');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWiFiScanResultsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->example114s = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Example114>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scan for Networks
     * 
     * This initiates scanning for Wi-Fi networks.
     * 
     * The results can be obtained with `/setup/scan_results` after triggering the scan with this request.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ScanforNetworksResponse
     */
	public function scanforNetworks(
    ): \OpenAPI\OpenAPI\Models\Operations\ScanforNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scan_wifi');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScanforNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->scanforNetworks200TextPlainObject = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}