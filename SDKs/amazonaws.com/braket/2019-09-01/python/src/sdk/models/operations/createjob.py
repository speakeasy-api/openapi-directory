"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import containerimage as shared_containerimage
from ..shared import createjobresponse as shared_createjobresponse
from ..shared import inputfileconfig as shared_inputfileconfig
from ..shared import instancetype_enum as shared_instancetype_enum
from ..shared import scriptmodeconfig as shared_scriptmodeconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobRequestBodyAlgorithmSpecification:
    r"""Defines the Amazon Braket job to be created. Specifies the container image the job uses and the paths to the Python scripts used for entry and training."""
    
    container_image: Optional[shared_containerimage.ContainerImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerImage'), 'exclude': lambda f: f is None }})  
    script_mode_config: Optional[shared_scriptmodeconfig.ScriptModeConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scriptModeConfig'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobRequestBodyCheckpointConfig:
    r"""Contains information about the output locations for job checkpoint data."""
    
    local_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localPath'), 'exclude': lambda f: f is None }})  
    s3_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3Uri'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobRequestBodyDeviceConfig:
    r"""Configures the quantum processing units (QPUs) or simulator used to create and run an Amazon Braket job."""
    
    device: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobRequestBodyInstanceConfig:
    r"""Configures the resource instances to use while running the Amazon Braket hybrid job on Amazon Braket."""
    
    instance_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceCount'), 'exclude': lambda f: f is None }})  
    instance_type: Optional[shared_instancetype_enum.InstanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceType'), 'exclude': lambda f: f is None }})  
    volume_size_in_gb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumeSizeInGb'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobRequestBodyOutputDataConfig:
    r"""Specifies the path to the S3 location where you want to store job artifacts and the encryption key used to store them."""
    
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyId'), 'exclude': lambda f: f is None }})  
    s3_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('s3Path'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobRequestBodyStoppingCondition:
    r"""Specifies limits for how long an Amazon Braket job can run."""
    
    max_runtime_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxRuntimeInSeconds'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobRequestBody:
    
    algorithm_specification: CreateJobRequestBodyAlgorithmSpecification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('algorithmSpecification') }})
    r"""Defines the Amazon Braket job to be created. Specifies the container image the job uses and the paths to the Python scripts used for entry and training."""  
    client_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken') }})
    r"""A unique token that guarantees that the call to this API is idempotent."""  
    device_config: CreateJobRequestBodyDeviceConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceConfig') }})
    r"""Configures the quantum processing units (QPUs) or simulator used to create and run an Amazon Braket job."""  
    instance_config: CreateJobRequestBodyInstanceConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceConfig') }})
    r"""Configures the resource instances to use while running the Amazon Braket hybrid job on Amazon Braket."""  
    job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobName') }})
    r"""The name of the Amazon Braket job."""  
    output_data_config: CreateJobRequestBodyOutputDataConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputDataConfig') }})
    r"""Specifies the path to the S3 location where you want to store job artifacts and the encryption key used to store them."""  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn') }})
    r"""The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the users' s3 buckets."""  
    checkpoint_config: Optional[CreateJobRequestBodyCheckpointConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkpointConfig'), 'exclude': lambda f: f is None }})
    r"""Contains information about the output locations for job checkpoint data."""  
    hyper_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperParameters'), 'exclude': lambda f: f is None }})
    r"""Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the training job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter."""  
    input_data_config: Optional[list[shared_inputfileconfig.InputFileConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputDataConfig'), 'exclude': lambda f: f is None }})
    r"""A list of parameters that specify the name and type of input data and where it is located."""  
    stopping_condition: Optional[CreateJobRequestBodyStoppingCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stoppingCondition'), 'exclude': lambda f: f is None }})
    r"""Specifies limits for how long an Amazon Braket job can run."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources."""  
    

@dataclasses.dataclass
class CreateJobRequest:
    
    request_body: CreateJobRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateJobResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_job_response: Optional[shared_createjobresponse.CreateJobResponse] = dataclasses.field(default=None)
    r"""Success"""  
    device_retired_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeviceRetiredException"""  
    internal_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    