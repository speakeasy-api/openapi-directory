"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class MeteringGetRequest:
    
    account: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'account', 'style': 'form', 'explode': True }})
    r"""Account/Address (Stromkonto) to retrieve reading for."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeteringGet200ApplicationJSON:
    r"""Success"""
    
    processing_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_processingTime'), 'exclude': lambda f: f is None }})
    r"""Time this reading got imported into consensus (e.q. signed timestamp)."""  
    one_8_0: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1.8.0'), 'exclude': lambda f: f is None }})
    r"""Reading as provided as input in Wh"""  
    one_8_1: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1.8.1'), 'exclude': lambda f: f is None }})
    r"""Green energy calculated using Green Power Index (GrünstromIndex) in Wh"""  
    one_8_2: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('1.8.2'), 'exclude': lambda f: f is None }})
    r"""Grey energy calculated using Green Power Index (GrünstromIndex) in Wh"""  
    account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account'), 'exclude': lambda f: f is None }})
    r"""Stromkonto/Metering address allocated (this is not the MELOID!)"""  
    co2_g_oekostrom: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('co2_g_oekostrom'), 'exclude': lambda f: f is None }})
    r"""CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)"""  
    co2_g_standard: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('co2_g_standard'), 'exclude': lambda f: f is None }})
    r"""CO2 Emission of metered energy in a standard mix"""  
    credits: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credits'), 'exclude': lambda f: f is None }})
    r"""Update credits this meter has. Gets refilled automtically to prevent too frequent updates"""  
    time_stamp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeStamp'), 'exclude': lambda f: f is None }})
    r"""API Consensus time this reading was fully received"""  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})
    r"""Time to Live for this reader. If no update is provided it gets decommissioned."""  
    

@dataclasses.dataclass
class MeteringGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    metering_get_200_application_json_object: Optional[MeteringGet200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    