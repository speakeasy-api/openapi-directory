// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkSensorRelationshipsRequest struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnum - The product type of the device
type GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnum string

const (
	GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnumCamera GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnum = "camera"
	GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnumSensor GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnum = "sensor"
)

func (e *GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "camera":
		fallthrough
	case "sensor":
		*e = GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnum: %s", s)
	}
}

// GetNetworkSensorRelationships200ApplicationJSONDevice - A sensor or gateway device in the network
type GetNetworkSensorRelationships200ApplicationJSONDevice struct {
	// The name of the device
	Name *string `json:"name,omitempty"`
	// The product type of the device
	ProductType *GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnum `json:"productType,omitempty"`
	// The serial of the device
	Serial *string `json:"serial,omitempty"`
}

// GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnum - The product type of the related device
type GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnum string

const (
	GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnumCamera GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnum = "camera"
	GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnumSensor GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnum = "sensor"
)

func (e *GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "camera":
		fallthrough
	case "sensor":
		*e = GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnum: %s", s)
	}
}

type GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevices struct {
	// The product type of the related device
	ProductType *GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnum `json:"productType,omitempty"`
	// The serial of the related device
	Serial *string `json:"serial,omitempty"`
}

// GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestream - A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
type GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestream struct {
	// An array of the related devices for the role
	RelatedDevices []GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevices `json:"relatedDevices,omitempty"`
}

// GetNetworkSensorRelationships200ApplicationJSONRelationships - An object describing the relationships defined between the device and other devices
type GetNetworkSensorRelationships200ApplicationJSONRelationships struct {
	// A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
	Livestream *GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestream `json:"livestream,omitempty"`
}

type GetNetworkSensorRelationships200ApplicationJSON struct {
	// A sensor or gateway device in the network
	Device *GetNetworkSensorRelationships200ApplicationJSONDevice `json:"device,omitempty"`
	// An object describing the relationships defined between the device and other devices
	Relationships *GetNetworkSensorRelationships200ApplicationJSONRelationships `json:"relationships,omitempty"`
}

type GetNetworkSensorRelationshipsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkSensorRelationships200ApplicationJSONObjects []GetNetworkSensorRelationships200ApplicationJSON
}
