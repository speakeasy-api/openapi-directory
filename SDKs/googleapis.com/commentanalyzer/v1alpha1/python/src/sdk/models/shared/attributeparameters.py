"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AttributeParametersScoreTypeEnum(str, Enum):
    r"""What type of scores to return. If unset, defaults to probability scores."""
    SCORE_TYPE_UNSPECIFIED = 'SCORE_TYPE_UNSPECIFIED'
    PROBABILITY = 'PROBABILITY'
    STD_DEV_SCORE = 'STD_DEV_SCORE'
    PERCENTILE = 'PERCENTILE'
    RAW = 'RAW'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AttributeParameters:
    r"""Configurable parameters for attribute scoring."""
    
    score_threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scoreThreshold'), 'exclude': lambda f: f is None }})
    r"""Don't return scores for this attribute that are below this threshold. If unset, a default threshold will be applied. A FloatValue wrapper is used to distinguish between 0 vs. default/unset."""  
    score_type: Optional[AttributeParametersScoreTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scoreType'), 'exclude': lambda f: f is None }})
    r"""What type of scores to return. If unset, defaults to probability scores."""  
    