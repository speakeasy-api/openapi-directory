"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import channelprofiledetails as shared_channelprofiledetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LiveChatBanSnippetTypeEnum(str, Enum):
    r"""The type of ban."""
    LIVE_CHAT_BAN_TYPE_UNSPECIFIED = 'liveChatBanTypeUnspecified'
    PERMANENT = 'permanent'
    TEMPORARY = 'temporary'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LiveChatBanSnippet:
    
    ban_duration_seconds: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('banDurationSeconds'), 'exclude': lambda f: f is None }})
    r"""The duration of a ban, only filled if the ban has type TEMPORARY."""  
    banned_user_details: Optional[shared_channelprofiledetails.ChannelProfileDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bannedUserDetails'), 'exclude': lambda f: f is None }})  
    live_chat_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liveChatId'), 'exclude': lambda f: f is None }})
    r"""The chat this ban is pertinent to."""  
    type: Optional[LiveChatBanSnippetTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of ban."""  
    