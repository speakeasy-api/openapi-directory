// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LegalEntityInfoRequiredTypeTypeEnum - The type of legal entity.
//
//	Possible values: **individual** or **organization**
type LegalEntityInfoRequiredTypeTypeEnum string

const (
	LegalEntityInfoRequiredTypeTypeEnumIndividual   LegalEntityInfoRequiredTypeTypeEnum = "individual"
	LegalEntityInfoRequiredTypeTypeEnumOrganization LegalEntityInfoRequiredTypeTypeEnum = "organization"
)

func (e LegalEntityInfoRequiredTypeTypeEnum) ToPointer() *LegalEntityInfoRequiredTypeTypeEnum {
	return &e
}

func (e *LegalEntityInfoRequiredTypeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		fallthrough
	case "organization":
		*e = LegalEntityInfoRequiredTypeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalEntityInfoRequiredTypeTypeEnum: %v", v)
	}
}

type LegalEntityInfoRequiredTypeInput struct {
	// List of legal entities associated with the current legal entity.
	// For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.
	EntityAssociations []LegalEntityAssociationInput `json:"entityAssociations,omitempty"`
	Individual         *IndividualInput              `json:"individual,omitempty"`
	Organization       *OrganizationInput            `json:"organization,omitempty"`
	// Your reference for the legal entity, maximum 150 characters.
	Reference *string `json:"reference,omitempty"`
	// The type of legal entity.
	//
	//  Possible values: **individual** or **organization**
	Type LegalEntityInfoRequiredTypeTypeEnum `json:"type"`
}
