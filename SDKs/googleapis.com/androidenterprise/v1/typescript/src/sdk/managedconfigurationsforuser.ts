/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Managedconfigurationsforuser {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Removes a per-user managed configuration for an app for the specified user.
   */
  androidenterpriseManagedconfigurationsforuserDelete(
    req: operations.AndroidenterpriseManagedconfigurationsforuserDeleteRequest,
    security: operations.AndroidenterpriseManagedconfigurationsforuserDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidenterpriseManagedconfigurationsforuserDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroidenterpriseManagedconfigurationsforuserDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidenterpriseManagedconfigurationsforuserDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidenterpriseManagedconfigurationsforuserDeleteResponse =
        new operations.AndroidenterpriseManagedconfigurationsforuserDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves details of a per-user managed configuration for an app for the specified user.
   */
  androidenterpriseManagedconfigurationsforuserGet(
    req: operations.AndroidenterpriseManagedconfigurationsforuserGetRequest,
    security: operations.AndroidenterpriseManagedconfigurationsforuserGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidenterpriseManagedconfigurationsforuserGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroidenterpriseManagedconfigurationsforuserGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidenterpriseManagedconfigurationsforuserGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidenterpriseManagedconfigurationsforuserGetResponse =
        new operations.AndroidenterpriseManagedconfigurationsforuserGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.managedConfiguration = utils.objectToClass(
              httpRes?.data,
              shared.ManagedConfiguration
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all the per-user managed configurations for the specified user. Only the ID is set.
   */
  androidenterpriseManagedconfigurationsforuserList(
    req: operations.AndroidenterpriseManagedconfigurationsforuserListRequest,
    security: operations.AndroidenterpriseManagedconfigurationsforuserListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidenterpriseManagedconfigurationsforuserListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroidenterpriseManagedconfigurationsforuserListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidenterpriseManagedconfigurationsforuserListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidenterpriseManagedconfigurationsforuserListResponse =
        new operations.AndroidenterpriseManagedconfigurationsforuserListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.managedConfigurationsForUserListResponse = utils.objectToClass(
              httpRes?.data,
              shared.ManagedConfigurationsForUserListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds or updates the managed configuration settings for an app for the specified user. If you support the Managed configurations iframe, you can apply managed configurations to a user by specifying an mcmId and its associated configuration variables (if any) in the request. Alternatively, all EMMs can apply managed configurations by passing a list of managed properties.
   */
  androidenterpriseManagedconfigurationsforuserUpdate(
    req: operations.AndroidenterpriseManagedconfigurationsforuserUpdateRequest,
    security: operations.AndroidenterpriseManagedconfigurationsforuserUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AndroidenterpriseManagedconfigurationsforuserUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AndroidenterpriseManagedconfigurationsforuserUpdateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "managedConfiguration",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AndroidenterpriseManagedconfigurationsforuserUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AndroidenterpriseManagedconfigurationsforuserUpdateResponse =
        new operations.AndroidenterpriseManagedconfigurationsforuserUpdateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.managedConfiguration = utils.objectToClass(
              httpRes?.data,
              shared.ManagedConfiguration
            );
          }
          break;
      }

      return res;
    });
  }
}
