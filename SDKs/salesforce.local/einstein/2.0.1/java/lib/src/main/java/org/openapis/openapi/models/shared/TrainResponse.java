/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TrainResponse - Training Status
 */
public class TrainResponse {
    /**
     * Algorithm used to create the model. Returned only when the modelType is image-detection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("algorithm")
    public String algorithm;

    public TrainResponse withAlgorithm(String algorithm) {
        this.algorithm = algorithm;
        return this;
    }
    
    /**
     * Date and time that the model was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;

    public TrainResponse withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * ID of the dataset trained to create the model.
     */
    @JsonProperty("datasetId")
    public Long datasetId;

    public TrainResponse withDatasetId(Long datasetId) {
        this.datasetId = datasetId;
        return this;
    }
    
    /**
     * Not available yet
     */
    @JsonProperty("datasetVersionId")
    public Long datasetVersionId;

    public TrainResponse withDatasetVersionId(Long datasetVersionId) {
        this.datasetVersionId = datasetVersionId;
        return this;
    }
    
    /**
     * Number of epochs used during training.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("epochs")
    public Integer epochs;

    public TrainResponse withEpochs(Integer epochs) {
        this.epochs = epochs;
        return this;
    }
    
    /**
     * Reason the dataset training failed. Returned only if the training status is FAILED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failureMsg")
    public String failureMsg;

    public TrainResponse withFailureMsg(String failureMsg) {
        this.failureMsg = failureMsg;
        return this;
    }
    
    /**
     * Model language inherited from the dataset language. For image datasets, default is N/A. For text datasets, default is en_US.
     */
    @JsonProperty("language")
    public String language;

    public TrainResponse withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * Learning rate used during training.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("learningRate")
    public Double learningRate;

    public TrainResponse withLearningRate(Double learningRate) {
        this.learningRate = learningRate;
        return this;
    }
    
    /**
     * ID of the model. Contains letters and numbers.
     */
    @JsonProperty("modelId")
    public String modelId;

    public TrainResponse withModelId(String modelId) {
        this.modelId = modelId;
        return this;
    }
    
    /**
     * Type of data from which the model was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modelType")
    public String modelType;

    public TrainResponse withModelType(String modelType) {
        this.modelType = modelType;
        return this;
    }
    
    /**
     * Name of the model.
     */
    @JsonProperty("name")
    public String name;

    public TrainResponse withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Object returned; in this case, training.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    public String object;

    public TrainResponse withObject(String object) {
        this.object = object;
        return this;
    }
    
    /**
     * How far the dataset training has progressed. Values are between 0\ufffd1.
     */
    @JsonProperty("progress")
    public Double progress;

    public TrainResponse withProgress(Double progress) {
        this.progress = progress;
        return this;
    }
    
    /**
     * Where the training job is in the queue. This field appears in the response only if the status is QUEUED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("queuePosition")
    public Integer queuePosition;

    public TrainResponse withQueuePosition(Integer queuePosition) {
        this.queuePosition = queuePosition;
        return this;
    }
    
    /**
     * Status of the model.
     */
    @JsonProperty("status")
    public TrainResponseStatusEnum status;

    public TrainResponse withStatus(TrainResponseStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Training parameters passed into the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trainParams")
    public String trainParams;

    public TrainResponse withTrainParams(String trainParams) {
        this.trainParams = trainParams;
        return this;
    }
    
    /**
     * Returns null when you train a dataset. Training statistics are returned when the status is SUCCEEDED or FAILED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trainStats")
    public String trainStats;

    public TrainResponse withTrainStats(String trainStats) {
        this.trainStats = trainStats;
        return this;
    }
    
    /**
     * Date and time that the model was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;

    public TrainResponse withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public TrainResponse(@JsonProperty("datasetId") Long datasetId, @JsonProperty("datasetVersionId") Long datasetVersionId, @JsonProperty("language") String language, @JsonProperty("modelId") String modelId, @JsonProperty("name") String name, @JsonProperty("progress") Double progress, @JsonProperty("status") TrainResponseStatusEnum status) {
        this.datasetId = datasetId;
        this.datasetVersionId = datasetVersionId;
        this.language = language;
        this.modelId = modelId;
        this.name = name;
        this.progress = progress;
        this.status = status;
  }
}
