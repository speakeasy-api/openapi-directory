// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetMultiNodeInventoryForSkuAndAllShipnodesRequest struct {
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType *string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
	// ShipNode Id of the ship node for which the inventory is requested
	ShipNode *string `queryParam:"style=form,explode=true,name=shipNode"`
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', ‘ ’ as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.
	Sku string `pathParam:"style=simple,explode=false,name=sku"`
}

// GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQtyUnitEnum - The unit of measurement. Example: 'EACH'
type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQtyUnitEnum string

const (
	GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQtyUnitEnumEach GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQtyUnitEnum = "EACH"
)

func (e GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQtyUnitEnum) ToPointer() *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQtyUnitEnum {
	return &e
}

func (e *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQtyUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EACH":
		*e = GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQtyUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQtyUnitEnum: %v", v)
	}
}

// GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQty - Quantity of an item that is available to be allocated to orders
type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQty struct {
	// Inventory Count
	Amount float64 `json:"amount"`
	// The unit of measurement. Example: 'EACH'
	Unit GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQtyUnitEnum `json:"unit"`
}

type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnum string

const (
	GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnumApplication GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnum = "APPLICATION"
	GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnumSystem      GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnum = "SYSTEM"
	GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnumRequest     GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnum = "REQUEST"
	GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnumData        GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnum = "DATA"
)

func (e GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnum) ToPointer() *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnum {
	return &e
}

func (e *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APPLICATION":
		fallthrough
	case "SYSTEM":
		fallthrough
	case "REQUEST":
		fallthrough
	case "DATA":
		*e = GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnum: %v", v)
	}
}

type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCauses struct {
	Code        *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
	Field       *string `json:"field,omitempty"`
	Type        *string `json:"type,omitempty"`
}

type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnum string

const (
	GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnumInfo  GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnum = "INFO"
	GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnumWarn  GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnum = "WARN"
	GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnumError GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnum = "ERROR"
)

func (e GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnum) ToPointer() *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnum {
	return &e
}

func (e *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INFO":
		fallthrough
	case "WARN":
		fallthrough
	case "ERROR":
		*e = GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnum: %v", v)
	}
}

type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrors struct {
	Category         *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCategoryEnum `json:"category,omitempty"`
	Causes           []GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsCauses      `json:"causes,omitempty"`
	Code             string                                                                               `json:"code"`
	Description      *string                                                                              `json:"description,omitempty"`
	ErrorIdentifiers map[string]map[string]interface{}                                                    `json:"errorIdentifiers,omitempty"`
	Field            *string                                                                              `json:"field,omitempty"`
	Info             *string                                                                              `json:"info,omitempty"`
	Severity         *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrorsSeverityEnum `json:"severity,omitempty"`
}

// GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQtyUnitEnum - The unit of measurement. Example: 'EACH'
type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQtyUnitEnum string

const (
	GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQtyUnitEnumEach GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQtyUnitEnum = "EACH"
)

func (e GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQtyUnitEnum) ToPointer() *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQtyUnitEnum {
	return &e
}

func (e *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQtyUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EACH":
		*e = GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQtyUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQtyUnitEnum: %v", v)
	}
}

// GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQty - Quantity of an item that is input by the seller
type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQty struct {
	// Inventory Count
	Amount float64 `json:"amount"`
	// The unit of measurement. Example: 'EACH'
	Unit GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQtyUnitEnum `json:"unit"`
}

// GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQtyUnitEnum - The unit of measurement. Example: 'EACH'
type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQtyUnitEnum string

const (
	GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQtyUnitEnumEach GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQtyUnitEnum = "EACH"
)

func (e GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQtyUnitEnum) ToPointer() *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQtyUnitEnum {
	return &e
}

func (e *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQtyUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EACH":
		*e = GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQtyUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQtyUnitEnum: %v", v)
	}
}

// GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQty - Quantity that has been ordered by the customers but not yet shipped
type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQty struct {
	// Inventory Count
	Amount float64 `json:"amount"`
	// The unit of measurement. Example: 'EACH'
	Unit GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQtyUnitEnum `json:"unit"`
}

type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodes struct {
	// Quantity of an item that is available to be allocated to orders
	AvailToSellQty *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesAvailToSellQty `json:"availToSellQty,omitempty"`
	Errors         []GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesErrors        `json:"errors,omitempty"`
	// Quantity of an item that is input by the seller
	InputQty *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesInputQty `json:"inputQty,omitempty"`
	// Quantity that has been ordered by the customers but not yet shipped
	ReservedQty *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodesReservedQty `json:"reservedQty,omitempty"`
	// ShipNode Id of the ship node for which the inventory is requested
	ShipNode *string `json:"shipNode,omitempty"`
}

// GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSON - Successful Operation
type GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSON struct {
	Nodes []GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONNodes `json:"nodes,omitempty"`
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
	Sku *string `json:"sku,omitempty"`
}

type GetMultiNodeInventoryForSkuAndAllShipnodesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSONObject *GetMultiNodeInventoryForSkuAndAllShipnodes200ApplicationJSON
}
