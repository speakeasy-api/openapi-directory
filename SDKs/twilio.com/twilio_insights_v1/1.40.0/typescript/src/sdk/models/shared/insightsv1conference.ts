/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConferenceEnumConferenceEndReasonEnum } from "./conferenceenumconferenceendreasonenum";
import { ConferenceEnumConferenceStatusEnum } from "./conferenceenumconferencestatusenum";
import { ConferenceEnumProcessingStateEnum } from "./conferenceenumprocessingstateenum";
import { ConferenceEnumRegionEnum } from "./conferenceenumregionenum";
import { ConferenceEnumTagEnum } from "./conferenceenumtagenum";
import { Expose, Transform } from "class-transformer";

/**
 * OK
 */
export class InsightsV1Conference extends SpeakeasyBase {
  /**
   * The unique SID identifier of the Account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_sid" })
  accountSid?: string;

  /**
   * The unique SID identifier of the Conference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conference_sid" })
  conferenceSid?: string;

  /**
   * Duration of the between conference start event and conference end event in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connect_duration_seconds" })
  connectDurationSeconds?: number;

  /**
   * Conference creation date and time in ISO 8601 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "create_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createTime?: Date;

  /**
   * Potential issues detected by Twilio during the conference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detected_issues" })
  detectedIssues?: any;

  /**
   * Conference duration in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration_seconds" })
  durationSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "end_reason" })
  endReason?: ConferenceEnumConferenceEndReasonEnum;

  /**
   * Conference end date and time in ISO 8601 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  /**
   * Call SID of the participant whose actions ended the conference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ended_by" })
  endedBy?: string;

  /**
   * Custom label for the conference resource, up to 64 characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "friendly_name" })
  friendlyName?: string;

  /**
   * Contains a dictionary of URL links to nested resources of this Conference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  links?: Record<string, any>;

  /**
   * Actual maximum number of concurrent participants in the conference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max_concurrent_participants" })
  maxConcurrentParticipants?: number;

  /**
   * Maximum number of concurrent participants as specified by the configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max_participants" })
  maxParticipants?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "mixer_region" })
  mixerRegion?: ConferenceEnumRegionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "mixer_region_requested" })
  mixerRegionRequested?: ConferenceEnumRegionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "processing_state" })
  processingState?: ConferenceEnumProcessingStateEnum;

  /**
   * Boolean. Indicates whether recording was enabled at the conference mixer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recording_enabled" })
  recordingEnabled?: boolean;

  /**
   * Timestamp in ISO 8601 format when the conference started. Conferences do not start until at least two participants join, at least one of whom has startConferenceOnEnter=true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: ConferenceEnumConferenceStatusEnum;

  /**
   * Object. Contains details about conference tags including severity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tag_info" })
  tagInfo?: any;

  /**
   * Tags for detected conference conditions and participant behaviors which may be of interest.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: ConferenceEnumTagEnum[];

  /**
   * Unique conference participants based on caller ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unique_participants" })
  uniqueParticipants?: number;

  /**
   * The URL of this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
