/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class QueryRequest {
    /**
     * If this parameter is present, the operation only affects vectors that satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    public java.util.Map<String, Object> filter;

    public QueryRequest withFilter(java.util.Map<String, Object> filter) {
        this.filter = filter;
        return this;
    }
    
    /**
     * The unique ID of a vector
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public QueryRequest withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeMetadata")
    public Boolean includeMetadata;

    public QueryRequest withIncludeMetadata(Boolean includeMetadata) {
        this.includeMetadata = includeMetadata;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeValues")
    public Boolean includeValues;

    public QueryRequest withIncludeValues(Boolean includeValues) {
        this.includeValues = includeValues;
        return this;
    }
    
    /**
     * An index namespace name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespace")
    public String namespace;

    public QueryRequest withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }
    
    /**
     * Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparseVector")
    public SparseVectorData sparseVector;

    public QueryRequest withSparseVector(SparseVectorData sparseVector) {
        this.sparseVector = sparseVector;
        return this;
    }
    
    /**
     * The number of results to return for each query.
     */
    @JsonProperty("topK")
    public Long topK;

    public QueryRequest withTopK(Long topK) {
        this.topK = topK;
        return this;
    }
    
    /**
     * Vector dense data. This should be the same length as the dimension of the index being queried.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vector")
    public Float[] vector;

    public QueryRequest withVector(Float[] vector) {
        this.vector = vector;
        return this;
    }
    
    public QueryRequest(@JsonProperty("topK") Long topK) {
        this.topK = topK;
  }
}
