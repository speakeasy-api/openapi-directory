/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CvssScore } from "./cvssscore";
import { VulnerablePackage } from "./vulnerablepackage";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information about a package vulnerability finding.
 */
export class PackageVulnerabilityDetails extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: CvssScore })
  @Expose({ name: "cvss" })
  @Type(() => CvssScore)
  cvss?: CvssScore[];

  @SpeakeasyMetadata()
  @Expose({ name: "referenceUrls" })
  referenceUrls?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "relatedVulnerabilities" })
  relatedVulnerabilities?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceUrl" })
  sourceUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "vendorCreatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  vendorCreatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "vendorSeverity" })
  vendorSeverity?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "vendorUpdatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  vendorUpdatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "vulnerabilityId" })
  vulnerabilityId?: string;

  @SpeakeasyMetadata({ elemType: VulnerablePackage })
  @Expose({ name: "vulnerablePackages" })
  @Type(() => VulnerablePackage)
  vulnerablePackages?: VulnerablePackage[];
}
