/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don't contain the processed and coded data that you can find on other endpoints.
 */
public class Efiling {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Efiling(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Basic information about electronic files coming into the FEC, posted as they are received.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetEfileFilingsResponse getEfileFilings(org.openapis.openapi.models.operations.GetEfileFilingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/efile/filings/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetEfileFilingsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetEfileFilingsResponse res = new org.openapis.openapi.models.operations.GetEfileFilingsResponse() {{
            eFilingsPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EFilingsPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EFilingsPage.class);
                res.eFilingsPage = out;
            }
        }

        return res;
    }

    /**
     *  - Key financial data reported periodically by committees as they are reported. This feed includes summary - information from the the House F3 reports, the presidential F3p reports and the PAC and party - F3x reports. -  - Generally, committees file reports on a quarterly or monthly basis, but - some must also submit a report 12 days before primary elections. Therefore, during the primary - season, the period covered by this file may be different for different committees. These totals - also incorporate any changes made by committees, if any report covering the period is amended. -  - DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly - label these fields while conveying clear meaning to ensure accessibility for all users. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetEfileReportsHouseSenateResponse getEfileReportsHouseSenate(org.openapis.openapi.models.operations.GetEfileReportsHouseSenateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/efile/reports/house-senate/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetEfileReportsHouseSenateQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetEfileReportsHouseSenateResponse res = new org.openapis.openapi.models.operations.GetEfileReportsHouseSenateResponse() {{
            baseF3FilingPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BaseF3FilingPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BaseF3FilingPage.class);
                res.baseF3FilingPage = out;
            }
        }

        return res;
    }

    /**
     *  - Key financial data reported periodically by committees as they are reported. This feed includes summary - information from the the House F3 reports, the presidential F3p reports and the PAC and party - F3x reports. -  - Generally, committees file reports on a quarterly or monthly basis, but - some must also submit a report 12 days before primary elections. Therefore, during the primary - season, the period covered by this file may be different for different committees. These totals - also incorporate any changes made by committees, if any report covering the period is amended. -  - DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly - label these fields while conveying clear meaning to ensure accessibility for all users. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetEfileReportsPacPartyResponse getEfileReportsPacParty(org.openapis.openapi.models.operations.GetEfileReportsPacPartyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/efile/reports/pac-party/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetEfileReportsPacPartyQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetEfileReportsPacPartyResponse res = new org.openapis.openapi.models.operations.GetEfileReportsPacPartyResponse() {{
            baseF3XFilingPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BaseF3XFilingPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BaseF3XFilingPage.class);
                res.baseF3XFilingPage = out;
            }
        }

        return res;
    }

    /**
     *  - Key financial data reported periodically by committees as they are reported. This feed includes summary - information from the the House F3 reports, the presidential F3p reports and the PAC and party - F3x reports. -  - Generally, committees file reports on a quarterly or monthly basis, but - some must also submit a report 12 days before primary elections. Therefore, during the primary - season, the period covered by this file may be different for different committees. These totals - also incorporate any changes made by committees, if any report covering the period is amended. -  - DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly - label these fields while conveying clear meaning to ensure accessibility for all users. - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetEfileReportsPresidentialResponse getEfileReportsPresidential(org.openapis.openapi.models.operations.GetEfileReportsPresidentialRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/efile/reports/presidential/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetEfileReportsPresidentialQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetEfileReportsPresidentialResponse res = new org.openapis.openapi.models.operations.GetEfileReportsPresidentialResponse() {{
            baseF3PFilingPage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BaseF3PFilingPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BaseF3PFilingPage.class);
                res.baseF3PFilingPage = out;
            }
        }

        return res;
    }
}