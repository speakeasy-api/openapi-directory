"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awselbloadbalancerattributes as shared_awselbloadbalancerattributes
from ..shared import awselbloadbalancerbackendserverdescription as shared_awselbloadbalancerbackendserverdescription
from ..shared import awselbloadbalancerhealthcheck as shared_awselbloadbalancerhealthcheck
from ..shared import awselbloadbalancerinstance as shared_awselbloadbalancerinstance
from ..shared import awselbloadbalancerlistenerdescription as shared_awselbloadbalancerlistenerdescription
from ..shared import awselbloadbalancerpolicies as shared_awselbloadbalancerpolicies
from ..shared import awselbloadbalancersourcesecuritygroup as shared_awselbloadbalancersourcesecuritygroup
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsElbLoadBalancerDetails:
    r"""Contains details about a Classic Load Balancer."""
    
    availability_zones: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailabilityZones'), 'exclude': lambda f: f is None }})  
    backend_server_descriptions: Optional[list[shared_awselbloadbalancerbackendserverdescription.AwsElbLoadBalancerBackendServerDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackendServerDescriptions'), 'exclude': lambda f: f is None }})  
    canonical_hosted_zone_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CanonicalHostedZoneName'), 'exclude': lambda f: f is None }})  
    canonical_hosted_zone_name_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CanonicalHostedZoneNameID'), 'exclude': lambda f: f is None }})  
    created_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedTime'), 'exclude': lambda f: f is None }})  
    dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsName'), 'exclude': lambda f: f is None }})  
    health_check: Optional[shared_awselbloadbalancerhealthcheck.AwsElbLoadBalancerHealthCheck] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HealthCheck'), 'exclude': lambda f: f is None }})  
    instances: Optional[list[shared_awselbloadbalancerinstance.AwsElbLoadBalancerInstance]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Instances'), 'exclude': lambda f: f is None }})  
    listener_descriptions: Optional[list[shared_awselbloadbalancerlistenerdescription.AwsElbLoadBalancerListenerDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListenerDescriptions'), 'exclude': lambda f: f is None }})  
    load_balancer_attributes: Optional[shared_awselbloadbalancerattributes.AwsElbLoadBalancerAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LoadBalancerAttributes'), 'exclude': lambda f: f is None }})  
    load_balancer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LoadBalancerName'), 'exclude': lambda f: f is None }})  
    policies: Optional[shared_awselbloadbalancerpolicies.AwsElbLoadBalancerPolicies] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Policies'), 'exclude': lambda f: f is None }})  
    scheme: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Scheme'), 'exclude': lambda f: f is None }})  
    security_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroups'), 'exclude': lambda f: f is None }})  
    source_security_group: Optional[shared_awselbloadbalancersourcesecuritygroup.AwsElbLoadBalancerSourceSecurityGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceSecurityGroup'), 'exclude': lambda f: f is None }})  
    subnets: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Subnets'), 'exclude': lambda f: f is None }})  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcId'), 'exclude': lambda f: f is None }})  
    