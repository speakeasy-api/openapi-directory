/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * fireteam
 */
export class Fireteam {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
   */
  fireteamGetActivePrivateClanFireteamCount(
    req: operations.FireteamGetActivePrivateClanFireteamCountRequest,
    security: operations.FireteamGetActivePrivateClanFireteamCountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FireteamGetActivePrivateClanFireteamCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FireteamGetActivePrivateClanFireteamCountRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Fireteam/Clan/{groupId}/ActiveCount/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.FireteamGetActivePrivateClanFireteamCountSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FireteamGetActivePrivateClanFireteamCountResponse =
        new operations.FireteamGetActivePrivateClanFireteamCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a listing of all of this clan's fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
   */
  fireteamGetAvailableClanFireteams(
    req: operations.FireteamGetAvailableClanFireteamsRequest,
    security: operations.FireteamGetAvailableClanFireteamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FireteamGetAvailableClanFireteamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FireteamGetAvailableClanFireteamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FireteamGetAvailableClanFireteamsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FireteamGetAvailableClanFireteamsResponse =
        new operations.FireteamGetAvailableClanFireteamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a specific fireteam.
   */
  fireteamGetClanFireteam(
    req: operations.FireteamGetClanFireteamRequest,
    security: operations.FireteamGetClanFireteamSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FireteamGetClanFireteamResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FireteamGetClanFireteamRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Fireteam/Clan/{groupId}/Summary/{fireteamId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FireteamGetClanFireteamSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FireteamGetClanFireteamResponse =
        new operations.FireteamGetClanFireteamResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
   */
  fireteamGetMyClanFireteams(
    req: operations.FireteamGetMyClanFireteamsRequest,
    security: operations.FireteamGetMyClanFireteamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FireteamGetMyClanFireteamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FireteamGetMyClanFireteamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FireteamGetMyClanFireteamsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FireteamGetMyClanFireteamsResponse =
        new operations.FireteamGetMyClanFireteamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
   */
  fireteamSearchPublicAvailableClanFireteams(
    req: operations.FireteamSearchPublicAvailableClanFireteamsRequest,
    security: operations.FireteamSearchPublicAvailableClanFireteamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FireteamSearchPublicAvailableClanFireteamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FireteamSearchPublicAvailableClanFireteamsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.FireteamSearchPublicAvailableClanFireteamsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FireteamSearchPublicAvailableClanFireteamsResponse =
        new operations.FireteamSearchPublicAvailableClanFireteamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
