// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FieldPurposeEnum - Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.
type FieldPurposeEnum string

const (
	FieldPurposeEnumUnknown  FieldPurposeEnum = ""
	FieldPurposeEnumUsername FieldPurposeEnum = "USERNAME"
	FieldPurposeEnumPassword FieldPurposeEnum = "PASSWORD"
	FieldPurposeEnumNotes    FieldPurposeEnum = "NOTES"
)

func (e *FieldPurposeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "USERNAME":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "NOTES":
		*e = FieldPurposeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldPurposeEnum: %s", s)
	}
}

type FieldSection struct {
	ID *string `json:"id,omitempty"`
}

type FieldTypeEnum string

const (
	FieldTypeEnumString    FieldTypeEnum = "STRING"
	FieldTypeEnumEmail     FieldTypeEnum = "EMAIL"
	FieldTypeEnumConcealed FieldTypeEnum = "CONCEALED"
	FieldTypeEnumURL       FieldTypeEnum = "URL"
	FieldTypeEnumTotp      FieldTypeEnum = "TOTP"
	FieldTypeEnumDate      FieldTypeEnum = "DATE"
	FieldTypeEnumMonthYear FieldTypeEnum = "MONTH_YEAR"
	FieldTypeEnumMenu      FieldTypeEnum = "MENU"
)

func (e *FieldTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STRING":
		fallthrough
	case "EMAIL":
		fallthrough
	case "CONCEALED":
		fallthrough
	case "URL":
		fallthrough
	case "TOTP":
		fallthrough
	case "DATE":
		fallthrough
	case "MONTH_YEAR":
		fallthrough
	case "MENU":
		*e = FieldTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldTypeEnum: %s", s)
	}
}

type FieldInput struct {
	// If value is not present then a new value should be generated for this field
	Generate *bool   `json:"generate,omitempty"`
	ID       string  `json:"id"`
	Label    *string `json:"label,omitempty"`
	// Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.
	Purpose *FieldPurposeEnum `json:"purpose,omitempty"`
	// The recipe is used in conjunction with the "generate" property to set the character set used to generate a new secure value
	Recipe  *GeneratorRecipe `json:"recipe,omitempty"`
	Section *FieldSection    `json:"section,omitempty"`
	Type    FieldTypeEnum    `json:"type"`
	Value   *string          `json:"value,omitempty"`
}

type Field struct {
	// For fields with a purpose of `PASSWORD` this is the entropy of the value
	Entropy *float64 `json:"entropy,omitempty"`
	// If value is not present then a new value should be generated for this field
	Generate *bool   `json:"generate,omitempty"`
	ID       string  `json:"id"`
	Label    *string `json:"label,omitempty"`
	// Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.
	Purpose *FieldPurposeEnum `json:"purpose,omitempty"`
	// The recipe is used in conjunction with the "generate" property to set the character set used to generate a new secure value
	Recipe  *GeneratorRecipe `json:"recipe,omitempty"`
	Section *FieldSection    `json:"section,omitempty"`
	Type    FieldTypeEnum    `json:"type"`
	Value   *string          `json:"value,omitempty"`
}
