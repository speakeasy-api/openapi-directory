// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateSimulationApplicationVersionHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateSimulationApplicationVersionRequestBody struct {
	// The application information for the simulation application.
	Application string `json:"application"`
	// The current revision id for the simulation application. If you provide a value and it matches the latest revision ID, a new version will be created.
	CurrentRevisionID *string `json:"currentRevisionId,omitempty"`
	// The SHA256 digest used to identify the Docker image URI used to created the simulation application.
	ImageDigest *string `json:"imageDigest,omitempty"`
	// The Amazon S3 eTag identifier for the zip file bundle that you use to create the simulation application.
	S3Etags []string `json:"s3Etags,omitempty"`
}

type CreateSimulationApplicationVersionRequest struct {
	Headers CreateSimulationApplicationVersionHeaders
	Request CreateSimulationApplicationVersionRequestBody `request:"mediaType=application/json"`
}

type CreateSimulationApplicationVersionResponse struct {
	ContentType string
	// Success
	CreateSimulationApplicationVersionResponse *shared.CreateSimulationApplicationVersionResponse
	// IdempotentParameterMismatchException
	IdempotentParameterMismatchException interface{}
	// InternalServerException
	InternalServerException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
