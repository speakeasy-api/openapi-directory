/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * This section shows how you can create, retrieve and modify subaccounts of a primary account.
 */
export class SubaccountManagement {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create subaccount
   *
   * @remarks
   * Create a subaccount for a given primary account.
   *
   */
  createSubAccount(
    req: operations.CreateSubAccountRequest,
    security: operations.CreateSubAccountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateSubAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateSubAccountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{api_key}/subaccounts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "newSubaccountRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateSubAccountSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateSubAccountResponse =
        new operations.CreateSubAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.subaccountCreateResponse = utils.objectToClass(
              httpRes?.data,
              shared.SubaccountCreateResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSubAccount401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateSubAccount401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprovisionedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprovisionedErrorResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSubAccount404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateSubAccount404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSubAccount422ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateSubAccount422ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Modify a subaccount
   *
   * @remarks
   * Change one or more properties of a subaccount.
   *
   */
  modifySubaccount(
    req: operations.ModifySubaccountRequest,
    security: operations.ModifySubaccountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ModifySubaccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ModifySubaccountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{api_key}/subaccounts/{subaccount_key}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "modifySubaccountRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ModifySubaccountSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ModifySubaccountResponse =
        new operations.ModifySubaccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.subaccountResponse = utils.objectToClass(
              httpRes?.data,
              shared.SubaccountResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.modifySubaccount401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ModifySubaccount401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprovisionedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprovisionedErrorResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.modifySubaccount404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ModifySubaccount404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.modifySubaccount422ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ModifySubaccount422ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a subaccount
   *
   * @remarks
   * Get the information of a subaccount specified with its API key.
   *
   */
  retrieveSubaccount(
    req: operations.RetrieveSubaccountRequest,
    security: operations.RetrieveSubaccountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveSubaccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveSubaccountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{api_key}/subaccounts/{subaccount_key}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveSubaccountSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveSubaccountResponse =
        new operations.RetrieveSubaccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.subaccountResponse = utils.objectToClass(
              httpRes?.data,
              shared.SubaccountResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveSubaccount401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrieveSubaccount401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprovisionedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprovisionedErrorResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveSubaccount404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrieveSubaccount404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve list of subaccounts
   *
   * @remarks
   * Get the information of all the subaccounts owned by the primary account.
   *
   */
  retrieveSubaccountsList(
    req: operations.RetrieveSubaccountsListRequest,
    security: operations.RetrieveSubaccountsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveSubaccountsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveSubaccountsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{api_key}/subaccounts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveSubaccountsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveSubaccountsListResponse =
        new operations.RetrieveSubaccountsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.subaccountsAllResponse = utils.objectToClass(
              httpRes?.data,
              shared.SubaccountsAllResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveSubaccountsList401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrieveSubaccountsList401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprovisionedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprovisionedErrorResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveSubaccountsList404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrieveSubaccountsList404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
