// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CannedAccessControlListEnum string

const (
	CannedAccessControlListEnumPrivate                CannedAccessControlListEnum = "private"
	CannedAccessControlListEnumPublicRead             CannedAccessControlListEnum = "public-read"
	CannedAccessControlListEnumPublicReadWrite        CannedAccessControlListEnum = "public-read-write"
	CannedAccessControlListEnumAwsExecRead            CannedAccessControlListEnum = "aws-exec-read"
	CannedAccessControlListEnumAuthenticatedRead      CannedAccessControlListEnum = "authenticated-read"
	CannedAccessControlListEnumBucketOwnerRead        CannedAccessControlListEnum = "bucket-owner-read"
	CannedAccessControlListEnumBucketOwnerFullControl CannedAccessControlListEnum = "bucket-owner-full-control"
	CannedAccessControlListEnumLogDeliveryWrite       CannedAccessControlListEnum = "log-delivery-write"
)

func (e *CannedAccessControlListEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public-read":
		fallthrough
	case "public-read-write":
		fallthrough
	case "aws-exec-read":
		fallthrough
	case "authenticated-read":
		fallthrough
	case "bucket-owner-read":
		fallthrough
	case "bucket-owner-full-control":
		fallthrough
	case "log-delivery-write":
		*e = CannedAccessControlListEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CannedAccessControlListEnum: %s", s)
	}
}
