"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Quota:
    r"""Represents a quota"""
    
    time_until_reset: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeUntilReset'), 'exclude': lambda f: f is None }})
    r"""Gets the time remaining until the quota resets. Null if this quota does not reset."""  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Total'), 'exclude': lambda f: f is None }})
    r"""The total allowable amount in the quota"""  
    used: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Used'), 'exclude': lambda f: f is None }})
    r"""The amount of quota that has currently been used"""  
    