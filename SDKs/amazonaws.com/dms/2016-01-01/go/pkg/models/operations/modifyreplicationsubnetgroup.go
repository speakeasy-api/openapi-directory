// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ModifyReplicationSubnetGroupXAmzTargetEnum
type ModifyReplicationSubnetGroupXAmzTargetEnum string

const (
	ModifyReplicationSubnetGroupXAmzTargetEnumAmazonDmSv20160101ModifyReplicationSubnetGroup ModifyReplicationSubnetGroupXAmzTargetEnum = "AmazonDMSv20160101.ModifyReplicationSubnetGroup"
)

func (e *ModifyReplicationSubnetGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonDMSv20160101.ModifyReplicationSubnetGroup":
		*e = ModifyReplicationSubnetGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyReplicationSubnetGroupXAmzTargetEnum: %s", s)
	}
}

type ModifyReplicationSubnetGroupHeaders struct {
	XAmzAlgorithm     *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ModifyReplicationSubnetGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ModifyReplicationSubnetGroupRequest struct {
	Headers ModifyReplicationSubnetGroupHeaders
	Request shared.ModifyReplicationSubnetGroupMessage `request:"mediaType=application/json"`
}

type ModifyReplicationSubnetGroupResponse struct {
	// AccessDeniedFault
	AccessDeniedFault interface{}
	ContentType       string
	// InvalidSubnet
	InvalidSubnet interface{}
	// Success
	ModifyReplicationSubnetGroupResponse *shared.ModifyReplicationSubnetGroupResponse
	// ReplicationSubnetGroupDoesNotCoverEnoughAZs
	ReplicationSubnetGroupDoesNotCoverEnoughAZs interface{}
	// ResourceQuotaExceededFault
	ResourceQuotaExceededFault interface{}
	StatusCode                 int
	RawResponse                *http.Response
	// ResourceNotFoundFault
	ResourceNotFoundFault interface{}
	// SubnetAlreadyInUse
	SubnetAlreadyInUse interface{}
}
