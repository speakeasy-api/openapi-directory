/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PlaceOrderRequestBody {
    /**
     * Customer's profile information. The `email` functions as a customer's ID.
     * 
     * For customers already in your database, sending only the email address is enough to register the order to the shopper\u2019s existing account.
     * 
     * &gt; If the shopper exists in you database but is not logged in, sending other profile information along with the email will cause the platform to fail placing the order. This happens because this action is interpreted as an attempt to edit profile data, which is not possible unless the customer is logged in to the store.
     */
    @JsonProperty("clientProfileData")
    public PlaceOrderRequestBodyClientProfileData clientProfileData;
    public PlaceOrderRequestBody withClientProfileData(PlaceOrderRequestBodyClientProfileData clientProfileData) {
        this.clientProfileData = clientProfileData;
        return this;
    }
    
    /**
     * Array of objects containing information on each of the order's items.
     */
    @JsonProperty("items")
    public PlaceOrderRequestBodyItems[] items;
    public PlaceOrderRequestBody withItems(PlaceOrderRequestBodyItems[] items) {
        this.items = items;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketingData")
    public PlaceOrderRequestBodyMarketingData marketingData;
    public PlaceOrderRequestBody withMarketingData(PlaceOrderRequestBodyMarketingData marketingData) {
        this.marketingData = marketingData;
        return this;
    }
    
    /**
     * Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("openTextField")
    public String openTextField;
    public PlaceOrderRequestBody withOpenTextField(String openTextField) {
        this.openTextField = openTextField;
        return this;
    }
    
    /**
     * Payment infomation.
     */
    @JsonProperty("paymentData")
    public PlaceOrderRequestBodyPaymentData paymentData;
    public PlaceOrderRequestBody withPaymentData(PlaceOrderRequestBodyPaymentData paymentData) {
        this.paymentData = paymentData;
        return this;
    }
    
    /**
     * Sales Associate information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salesAssociateData")
    public PlaceOrderRequestBodySalesAssociateData salesAssociateData;
    public PlaceOrderRequestBody withSalesAssociateData(PlaceOrderRequestBodySalesAssociateData salesAssociateData) {
        this.salesAssociateData = salesAssociateData;
        return this;
    }
    
    /**
     * Shipping information.
     */
    @JsonProperty("shippingData")
    public PlaceOrderRequestBodyShippingData shippingData;
    public PlaceOrderRequestBody withShippingData(PlaceOrderRequestBodyShippingData shippingData) {
        this.shippingData = shippingData;
        return this;
    }
    
}
