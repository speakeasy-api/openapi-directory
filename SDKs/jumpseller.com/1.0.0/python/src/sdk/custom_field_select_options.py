"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CustomFieldSelectOptions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_custom_fields_id_select_options_json(self, request: operations.GetCustomFieldsIDSelectOptionsJSONRequest) -> operations.GetCustomFieldsIDSelectOptionsJSONResponse:
        r"""Retrieve all Store's Custom Fields."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFieldsIDSelectOptionsJSONRequest, base_url, '/custom_fields/{id}/select_options.json', request)
        
        query_params = utils.get_query_params(operations.GetCustomFieldsIDSelectOptionsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFieldsIDSelectOptionsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldSelectOption]])
                res.custom_field_select_options = out

        return res

    def get_custom_fields_id_select_options_custom_field_select_option_id_json(self, request: operations.GetCustomFieldsIDSelectOptionsCustomFieldSelectOptionIDJSONRequest) -> operations.GetCustomFieldsIDSelectOptionsCustomFieldSelectOptionIDJSONResponse:
        r"""Retrieve a single SelectOption from a CustomField."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFieldsIDSelectOptionsCustomFieldSelectOptionIDJSONRequest, base_url, '/custom_fields/{id}/select_options/{custom_field_select_option_id}.json', request)
        
        query_params = utils.get_query_params(operations.GetCustomFieldsIDSelectOptionsCustomFieldSelectOptionIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFieldsIDSelectOptionsCustomFieldSelectOptionIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomFieldSelectOption])
                res.custom_field_select_option = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_custom_fields_id_select_options_json(self, request: operations.PostCustomFieldsIDSelectOptionsJSONRequest) -> operations.PostCustomFieldsIDSelectOptionsJSONResponse:
        r"""Create a new Custom Field Select Option."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCustomFieldsIDSelectOptionsJSONRequest, base_url, '/custom_fields/{id}/select_options.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_field_select_option_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostCustomFieldsIDSelectOptionsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCustomFieldsIDSelectOptionsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomFieldSelectOption])
                res.custom_field_select_option = out

        return res

    def put_custom_fields_id_select_options_custom_field_select_option_id_json(self, request: operations.PutCustomFieldsIDSelectOptionsCustomFieldSelectOptionIDJSONRequest) -> operations.PutCustomFieldsIDSelectOptionsCustomFieldSelectOptionIDJSONResponse:
        r"""Update a SelectOption from a CustomField."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCustomFieldsIDSelectOptionsCustomFieldSelectOptionIDJSONRequest, base_url, '/custom_fields/{id}/select_options/{custom_field_select_option_id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_field_select_option_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutCustomFieldsIDSelectOptionsCustomFieldSelectOptionIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCustomFieldsIDSelectOptionsCustomFieldSelectOptionIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomFieldSelectOption])
                res.custom_field_select_option = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    