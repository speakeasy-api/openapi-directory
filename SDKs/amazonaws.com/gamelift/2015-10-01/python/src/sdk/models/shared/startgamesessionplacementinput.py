"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import desiredplayersession as shared_desiredplayersession
from ..shared import gameproperty as shared_gameproperty
from ..shared import playerlatency as shared_playerlatency
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartGameSessionPlacementInput:
    
    game_session_queue_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameSessionQueueName') }})  
    maximum_player_session_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumPlayerSessionCount') }})  
    placement_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlacementId') }})  
    desired_player_sessions: Optional[list[shared_desiredplayersession.DesiredPlayerSession]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DesiredPlayerSessions'), 'exclude': lambda f: f is None }})  
    game_properties: Optional[list[shared_gameproperty.GameProperty]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameProperties'), 'exclude': lambda f: f is None }})  
    game_session_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameSessionData'), 'exclude': lambda f: f is None }})  
    game_session_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameSessionName'), 'exclude': lambda f: f is None }})  
    player_latencies: Optional[list[shared_playerlatency.PlayerLatency]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerLatencies'), 'exclude': lambda f: f is None }})  
    