"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Registry:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def registry_create_api(self, request: operations.RegistryCreateAPIRequest) -> operations.RegistryCreateAPIResponse:
        r"""CreateApi creates a specified API."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryCreateAPIRequest, base_url, '/v1/projects/{project}/locations/{location}/apis', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RegistryCreateAPIRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryCreateAPIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.API])
                res.api = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_create_api_deployment(self, request: operations.RegistryCreateAPIDeploymentRequest) -> operations.RegistryCreateAPIDeploymentResponse:
        r"""CreateApiDeployment creates a specified deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryCreateAPIDeploymentRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/deployments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_deployment_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RegistryCreateAPIDeploymentRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryCreateAPIDeploymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIDeployment])
                res.api_deployment = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_create_api_spec(self, request: operations.RegistryCreateAPISpecRequest) -> operations.RegistryCreateAPISpecResponse:
        r"""CreateApiSpec creates a specified spec."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryCreateAPISpecRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_spec_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RegistryCreateAPISpecRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryCreateAPISpecResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APISpecOutput])
                res.api_spec = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_create_api_version(self, request: operations.RegistryCreateAPIVersionRequest) -> operations.RegistryCreateAPIVersionResponse:
        r"""CreateApiVersion creates a specified version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryCreateAPIVersionRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_version_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RegistryCreateAPIVersionRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryCreateAPIVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIVersion])
                res.api_version = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_create_artifact(self, request: operations.RegistryCreateArtifactRequest) -> operations.RegistryCreateArtifactResponse:
        r"""CreateArtifact creates a specified artifact."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryCreateArtifactRequest, base_url, '/v1/projects/{project}/locations/{location}/artifacts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "artifact_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RegistryCreateArtifactRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryCreateArtifactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ArtifactOutput])
                res.artifact = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_delete_api(self, request: operations.RegistryDeleteAPIRequest) -> operations.RegistryDeleteAPIResponse:
        r"""DeleteApi removes a specified API and all of the resources that it
         owns.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryDeleteAPIRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}', request)
        
        query_params = utils.get_query_params(operations.RegistryDeleteAPIRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryDeleteAPIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_delete_api_deployment(self, request: operations.RegistryDeleteAPIDeploymentRequest) -> operations.RegistryDeleteAPIDeploymentResponse:
        r"""DeleteApiDeployment removes a specified deployment, all revisions, and all
         child resources (e.g. artifacts).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryDeleteAPIDeploymentRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}', request)
        
        query_params = utils.get_query_params(operations.RegistryDeleteAPIDeploymentRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryDeleteAPIDeploymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_delete_api_deployment_revision(self, request: operations.RegistryDeleteAPIDeploymentRevisionRequest) -> operations.RegistryDeleteAPIDeploymentRevisionResponse:
        r"""DeleteApiDeploymentRevision deletes a revision of a deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryDeleteAPIDeploymentRevisionRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:deleteRevision', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryDeleteAPIDeploymentRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIDeployment])
                res.api_deployment = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_delete_api_spec(self, request: operations.RegistryDeleteAPISpecRequest) -> operations.RegistryDeleteAPISpecResponse:
        r"""DeleteApiSpec removes a specified spec, all revisions, and all child
         resources (e.g. artifacts).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryDeleteAPISpecRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}', request)
        
        query_params = utils.get_query_params(operations.RegistryDeleteAPISpecRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryDeleteAPISpecResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_delete_api_spec_revision(self, request: operations.RegistryDeleteAPISpecRevisionRequest) -> operations.RegistryDeleteAPISpecRevisionResponse:
        r"""DeleteApiSpecRevision deletes a revision of a spec."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryDeleteAPISpecRevisionRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:deleteRevision', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryDeleteAPISpecRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APISpecOutput])
                res.api_spec = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_delete_api_version(self, request: operations.RegistryDeleteAPIVersionRequest) -> operations.RegistryDeleteAPIVersionResponse:
        r"""DeleteApiVersion removes a specified version and all of the resources that
         it owns.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryDeleteAPIVersionRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}', request)
        
        query_params = utils.get_query_params(operations.RegistryDeleteAPIVersionRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryDeleteAPIVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_delete_artifact(self, request: operations.RegistryDeleteArtifactRequest) -> operations.RegistryDeleteArtifactResponse:
        r"""DeleteArtifact removes a specified artifact."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryDeleteArtifactRequest, base_url, '/v1/projects/{project}/locations/{location}/artifacts/{artifact}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryDeleteArtifactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_get_api(self, request: operations.RegistryGetAPIRequest) -> operations.RegistryGetAPIResponse:
        r"""GetApi returns a specified API."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryGetAPIRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryGetAPIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.API])
                res.api = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_get_api_deployment(self, request: operations.RegistryGetAPIDeploymentRequest) -> operations.RegistryGetAPIDeploymentResponse:
        r"""GetApiDeployment returns a specified deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryGetAPIDeploymentRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryGetAPIDeploymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIDeployment])
                res.api_deployment = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_get_api_spec(self, request: operations.RegistryGetAPISpecRequest) -> operations.RegistryGetAPISpecResponse:
        r"""GetApiSpec returns a specified spec."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryGetAPISpecRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryGetAPISpecResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APISpecOutput])
                res.api_spec = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_get_api_spec_contents(self, request: operations.RegistryGetAPISpecContentsRequest) -> operations.RegistryGetAPISpecContentsResponse:
        r"""GetApiSpecContents returns the contents of a specified spec.
         If specs are stored with GZip compression, the default behavior
         is to return the spec uncompressed (the mime_type response field
         indicates the exact format returned).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryGetAPISpecContentsRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:getContents', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryGetAPISpecContentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_get_api_version(self, request: operations.RegistryGetAPIVersionRequest) -> operations.RegistryGetAPIVersionResponse:
        r"""GetApiVersion returns a specified version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryGetAPIVersionRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryGetAPIVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIVersion])
                res.api_version = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_get_artifact(self, request: operations.RegistryGetArtifactRequest) -> operations.RegistryGetArtifactResponse:
        r"""GetArtifact returns a specified artifact."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryGetArtifactRequest, base_url, '/v1/projects/{project}/locations/{location}/artifacts/{artifact}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryGetArtifactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ArtifactOutput])
                res.artifact = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_get_artifact_contents(self, request: operations.RegistryGetArtifactContentsRequest) -> operations.RegistryGetArtifactContentsResponse:
        r"""GetArtifactContents returns the contents of a specified artifact.
         If artifacts are stored with GZip compression, the default behavior
         is to return the artifact uncompressed (the mime_type response field
         indicates the exact format returned).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryGetArtifactContentsRequest, base_url, '/v1/projects/{project}/locations/{location}/artifacts/{artifact}:getContents', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryGetArtifactContentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_list_api_deployment_revisions(self, request: operations.RegistryListAPIDeploymentRevisionsRequest) -> operations.RegistryListAPIDeploymentRevisionsResponse:
        r"""ListApiDeploymentRevisions lists all revisions of a deployment.
         Revisions are returned in descending order of revision creation time.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryListAPIDeploymentRevisionsRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:listRevisions', request)
        
        query_params = utils.get_query_params(operations.RegistryListAPIDeploymentRevisionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryListAPIDeploymentRevisionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAPIDeploymentRevisionsResponse])
                res.list_api_deployment_revisions_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_list_api_deployments(self, request: operations.RegistryListAPIDeploymentsRequest) -> operations.RegistryListAPIDeploymentsResponse:
        r"""ListApiDeployments returns matching deployments."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryListAPIDeploymentsRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/deployments', request)
        
        query_params = utils.get_query_params(operations.RegistryListAPIDeploymentsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryListAPIDeploymentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAPIDeploymentsResponse])
                res.list_api_deployments_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_list_api_spec_revisions(self, request: operations.RegistryListAPISpecRevisionsRequest) -> operations.RegistryListAPISpecRevisionsResponse:
        r"""ListApiSpecRevisions lists all revisions of a spec.
         Revisions are returned in descending order of revision creation time.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryListAPISpecRevisionsRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:listRevisions', request)
        
        query_params = utils.get_query_params(operations.RegistryListAPISpecRevisionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryListAPISpecRevisionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAPISpecRevisionsResponse])
                res.list_api_spec_revisions_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_list_api_specs(self, request: operations.RegistryListAPISpecsRequest) -> operations.RegistryListAPISpecsResponse:
        r"""ListApiSpecs returns matching specs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryListAPISpecsRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs', request)
        
        query_params = utils.get_query_params(operations.RegistryListAPISpecsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryListAPISpecsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAPISpecsResponse])
                res.list_api_specs_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_list_api_versions(self, request: operations.RegistryListAPIVersionsRequest) -> operations.RegistryListAPIVersionsResponse:
        r"""ListApiVersions returns matching versions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryListAPIVersionsRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions', request)
        
        query_params = utils.get_query_params(operations.RegistryListAPIVersionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryListAPIVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAPIVersionsResponse])
                res.list_api_versions_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_list_apis(self, request: operations.RegistryListApisRequest) -> operations.RegistryListApisResponse:
        r"""ListApis returns matching APIs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryListApisRequest, base_url, '/v1/projects/{project}/locations/{location}/apis', request)
        
        query_params = utils.get_query_params(operations.RegistryListApisRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryListApisResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListApisResponse])
                res.list_apis_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_list_artifacts(self, request: operations.RegistryListArtifactsRequest) -> operations.RegistryListArtifactsResponse:
        r"""ListArtifacts returns matching artifacts."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryListArtifactsRequest, base_url, '/v1/projects/{project}/locations/{location}/artifacts', request)
        
        query_params = utils.get_query_params(operations.RegistryListArtifactsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryListArtifactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListArtifactsResponse])
                res.list_artifacts_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_replace_artifact(self, request: operations.RegistryReplaceArtifactRequest) -> operations.RegistryReplaceArtifactResponse:
        r"""ReplaceArtifact can be used to replace a specified artifact."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryReplaceArtifactRequest, base_url, '/v1/projects/{project}/locations/{location}/artifacts/{artifact}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "artifact_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryReplaceArtifactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ArtifactOutput])
                res.artifact = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_rollback_api_deployment(self, request: operations.RegistryRollbackAPIDeploymentRequest) -> operations.RegistryRollbackAPIDeploymentResponse:
        r"""RollbackApiDeployment sets the current revision to a specified prior
         revision. Note that this creates a new revision with a new revision ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryRollbackAPIDeploymentRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:rollback', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "rollback_api_deployment_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryRollbackAPIDeploymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIDeployment])
                res.api_deployment = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_rollback_api_spec(self, request: operations.RegistryRollbackAPISpecRequest) -> operations.RegistryRollbackAPISpecResponse:
        r"""RollbackApiSpec sets the current revision to a specified prior revision.
         Note that this creates a new revision with a new revision ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryRollbackAPISpecRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:rollback', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "rollback_api_spec_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryRollbackAPISpecResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APISpecOutput])
                res.api_spec = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_tag_api_deployment_revision(self, request: operations.RegistryTagAPIDeploymentRevisionRequest) -> operations.RegistryTagAPIDeploymentRevisionResponse:
        r"""TagApiDeploymentRevision adds a tag to a specified revision of a
         deployment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryTagAPIDeploymentRevisionRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:tagRevision', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tag_api_deployment_revision_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryTagAPIDeploymentRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIDeployment])
                res.api_deployment = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_tag_api_spec_revision(self, request: operations.RegistryTagAPISpecRevisionRequest) -> operations.RegistryTagAPISpecRevisionResponse:
        r"""TagApiSpecRevision adds a tag to a specified revision of a spec."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryTagAPISpecRevisionRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:tagRevision', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tag_api_spec_revision_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryTagAPISpecRevisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APISpecOutput])
                res.api_spec = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_update_api(self, request: operations.RegistryUpdateAPIRequest) -> operations.RegistryUpdateAPIResponse:
        r"""UpdateApi can be used to modify a specified API."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryUpdateAPIRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RegistryUpdateAPIRequest, request)
        
        client = self._client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryUpdateAPIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.API])
                res.api = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_update_api_deployment(self, request: operations.RegistryUpdateAPIDeploymentRequest) -> operations.RegistryUpdateAPIDeploymentResponse:
        r"""UpdateApiDeployment can be used to modify a specified deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryUpdateAPIDeploymentRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_deployment_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RegistryUpdateAPIDeploymentRequest, request)
        
        client = self._client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryUpdateAPIDeploymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIDeployment])
                res.api_deployment = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_update_api_spec(self, request: operations.RegistryUpdateAPISpecRequest) -> operations.RegistryUpdateAPISpecResponse:
        r"""UpdateApiSpec can be used to modify a specified spec."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryUpdateAPISpecRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_spec_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RegistryUpdateAPISpecRequest, request)
        
        client = self._client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryUpdateAPISpecResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APISpecOutput])
                res.api_spec = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def registry_update_api_version(self, request: operations.RegistryUpdateAPIVersionRequest) -> operations.RegistryUpdateAPIVersionResponse:
        r"""UpdateApiVersion can be used to modify a specified version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegistryUpdateAPIVersionRequest, base_url, '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_version_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RegistryUpdateAPIVersionRequest, request)
        
        client = self._client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegistryUpdateAPIVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIVersion])
                res.api_version = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    