<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Organization 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Clear all tags across multiple assets based on a search query
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Search $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClearBulkAssetTagsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClearBulkAssetTagsResponse
     */
	public function clearBulkAssetTags(
        \OpenAPI\OpenAPI\Models\Shared\Search $request,
        \OpenAPI\OpenAPI\Models\Operations\ClearBulkAssetTagsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClearBulkAssetTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/assets/bulk/clearTags');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClearBulkAssetTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statusMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a scan task for a given site
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateScanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateScanSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateScanResponse
     */
	public function createScan(
        \OpenAPI\OpenAPI\Models\Operations\CreateScanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateScanSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateScanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/sites/{site_id}/scan', \OpenAPI\OpenAPI\Models\Operations\CreateScanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scanOptions", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateScanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a new site
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SiteOptions $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSiteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSiteResponse
     */
	public function createSite(
        \OpenAPI\OpenAPI\Models\Shared\SiteOptions $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSiteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/sites');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->site = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Site', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get details for a single agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAgentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAgentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAgentResponse
     */
	public function getAgent(
        \OpenAPI\OpenAPI\Models\Operations\GetAgentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAgentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/agents/{agent_id}', \OpenAPI\OpenAPI\Models\Operations\GetAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Agent', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all agents
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAgentsResponse
     */
	public function getAgents(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAgentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/agents');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAgentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agents = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Agent>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get asset details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssetResponse
     */
	public function getAsset(
        \OpenAPI\OpenAPI\Models\Operations\GetAssetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAssetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/assets/{asset_id}', \OpenAPI\OpenAPI\Models\Operations\GetAssetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Asset', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all assets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssetsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssetsResponse
     */
	public function getAssets(
        \OpenAPI\OpenAPI\Models\Operations\GetAssetsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAssetsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/assets');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAssetsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assets = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Asset>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get API key details
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetKeyResponse
     */
	public function getKey(
    ): \OpenAPI\OpenAPI\Models\Operations\GetKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/key');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get organization details
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse
     */
	public function getOrganization(
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Organization', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get service details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetServiceResponse
     */
	public function getService(
        \OpenAPI\OpenAPI\Models\Operations\GetServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/services/{service_id}', \OpenAPI\OpenAPI\Models\Operations\GetServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->service = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Service', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all services
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServicesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetServicesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetServicesResponse
     */
	public function getServices(
        \OpenAPI\OpenAPI\Models\Operations\GetServicesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetServicesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetServicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetServicesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetServicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->services = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Service>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get site details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSiteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSiteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSiteResponse
     */
	public function getSite(
        \OpenAPI\OpenAPI\Models\Operations\GetSiteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSiteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/sites/{site_id}', \OpenAPI\OpenAPI\Models\Operations\GetSiteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->site = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Site', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all sites
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSitesResponse
     */
	public function getSites(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSitesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/sites');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSitesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sites = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Site>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get task details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaskSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTaskResponse
     */
	public function getTask(
        \OpenAPI\OpenAPI\Models\Operations\GetTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTaskSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/tasks/{task_id}', \OpenAPI\OpenAPI\Models\Operations\GetTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Returns a temporary task change report data url
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaskChangeReportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaskChangeReportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTaskChangeReportResponse
     */
	public function getTaskChangeReport(
        \OpenAPI\OpenAPI\Models\Operations\GetTaskChangeReportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTaskChangeReportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTaskChangeReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/tasks/{task_id}/changes', \OpenAPI\OpenAPI\Models\Operations\GetTaskChangeReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTaskChangeReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns a temporary task log data url
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaskLogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaskLogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTaskLogResponse
     */
	public function getTaskLog(
        \OpenAPI\OpenAPI\Models\Operations\GetTaskLogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTaskLogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTaskLogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/tasks/{task_id}/log', \OpenAPI\OpenAPI\Models\Operations\GetTaskLogRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTaskLogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns a temporary task scan data url
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaskScanDataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTaskScanDataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTaskScanDataResponse
     */
	public function getTaskScanData(
        \OpenAPI\OpenAPI\Models\Operations\GetTaskScanDataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTaskScanDataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTaskScanDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/tasks/{task_id}/data', \OpenAPI\OpenAPI\Models\Operations\GetTaskScanDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTaskScanDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all tasks (last 1000)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTasksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTasksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTasksResponse
     */
	public function getTasks(
        \OpenAPI\OpenAPI\Models\Operations\GetTasksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTasksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTasksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/tasks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTasksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTasksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tasks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Task>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get wireless LAN details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANResponse
     */
	public function getWirelessLAN(
        \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/wireless/{wireless_id}', \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wireless = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Wireless', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get all wireless LANs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANsResponse
     */
	public function getWirelessLANs(
        \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/wireless');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWirelessLANsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWirelessLANsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wirelesses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Wireless>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Signal that a completed task should be hidden
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\HideTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\HideTaskSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\HideTaskResponse
     */
	public function hideTask(
        \OpenAPI\OpenAPI\Models\Operations\HideTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\HideTaskSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\HideTaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/tasks/{task_id}/hide', \OpenAPI\OpenAPI\Models\Operations\HideTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HideTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Import a Nessus scan data file into a site
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportNessusScanDataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportNessusScanDataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportNessusScanDataResponse
     */
	public function importNessusScanData(
        \OpenAPI\OpenAPI\Models\Operations\ImportNessusScanDataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ImportNessusScanDataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportNessusScanDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/sites/{site_id}/import/nessus', \OpenAPI\OpenAPI\Models\Operations\ImportNessusScanDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportNessusScanDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Import a scan data file into a site
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportScanDataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportScanDataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportScanDataResponse
     */
	public function importScanData(
        \OpenAPI\OpenAPI\Models\Operations\ImportScanDataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ImportScanDataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportScanDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/sites/{site_id}/import', \OpenAPI\OpenAPI\Models\Operations\ImportScanDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportScanDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Remove and uninstall an agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAgentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAgentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveAgentResponse
     */
	public function removeAgent(
        \OpenAPI\OpenAPI\Models\Operations\RemoveAgentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveAgentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/agents/{agent_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove an asset
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAssetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveAssetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveAssetResponse
     */
	public function removeAsset(
        \OpenAPI\OpenAPI\Models\Operations\RemoveAssetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveAssetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveAssetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/assets/{asset_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveAssetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveAssetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove the current API key
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveKeyResponse
     */
	public function removeKey(
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/key');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Remove a service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveServiceResponse
     */
	public function removeService(
        \OpenAPI\OpenAPI\Models\Operations\RemoveServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/services/{service_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove a site and associated assets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveSiteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveSiteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveSiteResponse
     */
	public function removeSite(
        \OpenAPI\OpenAPI\Models\Operations\RemoveSiteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveSiteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveSiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/sites/{site_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveSiteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveSiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove a wireless LAN
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveWirelessLANRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveWirelessLANSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveWirelessLANResponse
     */
	public function removeWirelessLAN(
        \OpenAPI\OpenAPI\Models\Operations\RemoveWirelessLANRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveWirelessLANSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveWirelessLANResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/wireless/{wireless_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveWirelessLANRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveWirelessLANResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Rotate the API key secret and return the updated key
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\RotateKeyResponse
     */
	public function rotateKey(
    ): \OpenAPI\OpenAPI\Models\Operations\RotateKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/key/rotate');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RotateKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Signal that a task should be stopped or canceledThis will also remove recurring and scheduled tasks
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StopTaskSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StopTaskResponse
     */
	public function stopTask(
        \OpenAPI\OpenAPI\Models\Operations\StopTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StopTaskSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StopTaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/tasks/{task_id}/stop', \OpenAPI\OpenAPI\Models\Operations\StopTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update the site associated with agent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAgentSiteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAgentSiteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAgentSiteResponse
     */
	public function updateAgentSite(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAgentSiteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAgentSiteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAgentSiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/agents/{agent_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateAgentSiteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "agentSiteID", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAgentSiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->agent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Agent', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update asset comments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAssetCommentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAssetCommentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAssetCommentsResponse
     */
	public function updateAssetComments(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAssetCommentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAssetCommentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAssetCommentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/assets/{asset_id}/comments', \OpenAPI\OpenAPI\Models\Operations\UpdateAssetCommentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assetComments", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAssetCommentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Asset', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update asset tags
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAssetTagsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAssetTagsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAssetTagsResponse
     */
	public function updateAssetTags(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAssetTagsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAssetTagsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAssetTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/assets/{asset_id}/tags', \OpenAPI\OpenAPI\Models\Operations\UpdateAssetTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assetTags", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAssetTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asset = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Asset', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update tags across multiple assets based on a search query
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AssetTagsWithSearch $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBulkAssetTagsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateBulkAssetTagsResponse
     */
	public function updateBulkAssetTags(
        \OpenAPI\OpenAPI\Models\Shared\AssetTagsWithSearch $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateBulkAssetTagsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateBulkAssetTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/assets/bulk/tags');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateBulkAssetTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statusMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update organization details
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\OrgOptions $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationResponse
     */
	public function updateOrganization(
        \OpenAPI\OpenAPI\Models\Shared\OrgOptions $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Organization', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Update a site definition
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSiteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSiteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSiteResponse
     */
	public function updateSite(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSiteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSiteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/sites/{site_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateSiteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "siteOptions", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->site = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Site', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update task parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTaskSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTaskResponse
     */
	public function updateTask(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTaskSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTaskResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/tasks/{task_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "task", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Force an agent to update and restart
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpgradeAgentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpgradeAgentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpgradeAgentResponse
     */
	public function upgradeAgent(
        \OpenAPI\OpenAPI\Models\Operations\UpgradeAgentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpgradeAgentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpgradeAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/org/agents/{agent_id}/update', \OpenAPI\OpenAPI\Models\Operations\UpgradeAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpgradeAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}