// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LocerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type LocerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// LocerRequestBodyFormatEnum - The format of the certificate in response.
type LocerRequestBodyFormatEnum string

const (
	LocerRequestBodyFormatEnumPdf LocerRequestBodyFormatEnum = "pdf"
)

func (e LocerRequestBodyFormatEnum) ToPointer() *LocerRequestBodyFormatEnum {
	return &e
}

func (e *LocerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = LocerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LocerRequestBodyFormatEnum: %v", v)
	}
}

// LocerRequestBody - Request format
type LocerRequestBody struct {
	CertificateParameters *LocerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format LocerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Locer504ApplicationJSONErrorEnum string

const (
	Locer504ApplicationJSONErrorEnumGatewayTimeout Locer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Locer504ApplicationJSONErrorEnum) ToPointer() *Locer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Locer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Locer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Locer504ApplicationJSONErrorDescriptionEnum string

const (
	Locer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Locer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Locer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Locer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Locer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Locer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Locer504ApplicationJSON - Gateway timeout
type Locer504ApplicationJSON struct {
	Error            *Locer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Locer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Locer503ApplicationJSONErrorEnum string

const (
	Locer503ApplicationJSONErrorEnumServiceUnavailable Locer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Locer503ApplicationJSONErrorEnum) ToPointer() *Locer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Locer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Locer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Locer503ApplicationJSONErrorDescriptionEnum string

const (
	Locer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Locer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Locer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Locer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Locer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Locer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Locer503ApplicationJSON - Service unavailable
type Locer503ApplicationJSON struct {
	Error            *Locer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Locer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Locer502ApplicationJSONErrorEnum string

const (
	Locer502ApplicationJSONErrorEnumBadGatewy Locer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Locer502ApplicationJSONErrorEnum) ToPointer() *Locer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Locer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Locer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Locer502ApplicationJSONErrorDescriptionEnum string

const (
	Locer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Locer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Locer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Locer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Locer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Locer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Locer502ApplicationJSON - Bad gateway
type Locer502ApplicationJSON struct {
	Error            *Locer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Locer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Locer500ApplicationJSONErrorEnum string

const (
	Locer500ApplicationJSONErrorEnumInternalServerError Locer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Locer500ApplicationJSONErrorEnum) ToPointer() *Locer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Locer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Locer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Locer500ApplicationJSONErrorDescriptionEnum string

const (
	Locer500ApplicationJSONErrorDescriptionEnumInternalServerError Locer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Locer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Locer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Locer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Locer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Locer500ApplicationJSON - Internal server error
type Locer500ApplicationJSON struct {
	Error            *Locer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Locer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Locer404ApplicationJSONErrorEnum string

const (
	Locer404ApplicationJSONErrorEnumRecordNotFound Locer404ApplicationJSONErrorEnum = "record_not_found"
	Locer404ApplicationJSONErrorEnumURLNotFound    Locer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Locer404ApplicationJSONErrorEnum) ToPointer() *Locer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Locer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Locer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Locer404ApplicationJSONErrorDescriptionEnum string

const (
	Locer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Locer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Locer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Locer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Locer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Locer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Locer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Locer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Locer404ApplicationJSON - No record found
type Locer404ApplicationJSON struct {
	Error            *Locer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Locer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Locer401ApplicationJSONErrorEnum string

const (
	Locer401ApplicationJSONErrorEnumInvalidAuthentication Locer401ApplicationJSONErrorEnum = "invalid_authentication"
	Locer401ApplicationJSONErrorEnumInvalidAuthorization  Locer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Locer401ApplicationJSONErrorEnum) ToPointer() *Locer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Locer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Locer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Locer401ApplicationJSONErrorDescriptionEnum string

const (
	Locer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Locer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Locer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Locer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Locer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Locer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Locer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Locer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Locer401ApplicationJSON - Unauthorized access
type Locer401ApplicationJSON struct {
	Error            *Locer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Locer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Locer400ApplicationJSONErrorEnum string

const (
	Locer400ApplicationJSONErrorEnumMissingParameter Locer400ApplicationJSONErrorEnum = "missing_parameter"
	Locer400ApplicationJSONErrorEnumInvalidParameter Locer400ApplicationJSONErrorEnum = "invalid_parameter"
	Locer400ApplicationJSONErrorEnumInvalidFormat    Locer400ApplicationJSONErrorEnum = "invalid_format"
	Locer400ApplicationJSONErrorEnumInvalidTxnid     Locer400ApplicationJSONErrorEnum = "invalid_txnid"
	Locer400ApplicationJSONErrorEnumInvalidConsentid Locer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Locer400ApplicationJSONErrorEnum) ToPointer() *Locer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Locer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Locer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Locer400ApplicationJSONErrorDescriptionEnum string

const (
	Locer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Locer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Locer400ApplicationJSONErrorDescriptionEnumBadRequest                              Locer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Locer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Locer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Locer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Locer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Locer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Locer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Locer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Locer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Locer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Locer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Locer400ApplicationJSON - Bad request
type Locer400ApplicationJSON struct {
	Error            *Locer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Locer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type LocerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Locer400ApplicationJSONObject *Locer400ApplicationJSON
	// Unauthorized access
	Locer401ApplicationJSONObject *Locer401ApplicationJSON
	// No record found
	Locer404ApplicationJSONObject *Locer404ApplicationJSON
	// Internal server error
	Locer500ApplicationJSONObject *Locer500ApplicationJSON
	// Bad gateway
	Locer502ApplicationJSONObject *Locer502ApplicationJSON
	// Service unavailable
	Locer503ApplicationJSONObject *Locer503ApplicationJSON
	// Gateway timeout
	Locer504ApplicationJSONObject *Locer504ApplicationJSON
}
