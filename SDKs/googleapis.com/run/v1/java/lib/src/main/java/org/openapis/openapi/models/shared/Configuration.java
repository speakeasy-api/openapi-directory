/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Configuration - Configuration represents the "floating HEAD" of a linear history of Revisions, and optionally how the containers those revisions reference are built. Users create new Revisions by updating the Configuration's spec. The "latest created" revision's name is available under status, as is the "latest ready" revision's name. See also: https://github.com/knative/specs/blob/main/specs/serving/overview.md#configuration
 */
public class Configuration {
    /**
     * The API version for this call such as "serving.knative.dev/v1".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiVersion")
    public String apiVersion;
    public Configuration withApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
    
    /**
     * The kind of resource, in this case always "Configuration".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Configuration withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public ObjectMeta metadata;
    public Configuration withMetadata(ObjectMeta metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * ConfigurationSpec holds the desired state of the Configuration (from the client).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spec")
    public ConfigurationSpec spec;
    public Configuration withSpec(ConfigurationSpec spec) {
        this.spec = spec;
        return this;
    }
    
    /**
     * ConfigurationStatus communicates the observed state of the Configuration (from the controller).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ConfigurationStatus status;
    public Configuration withStatus(ConfigurationStatus status) {
        this.status = status;
        return this;
    }
    
}
