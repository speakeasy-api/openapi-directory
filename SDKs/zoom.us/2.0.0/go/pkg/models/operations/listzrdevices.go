// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ListZRDevicesSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ListZRDevicesRequest struct {
	// Unique Identifier of the Zoom Room. This can be retrieved from the response of [List Zoom Rooms](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzoomrooms) API.
	RoomID string `pathParam:"style=simple,explode=false,name=roomId"`
}

// ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum - Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`
type ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum string

const (
	ListZRDevices200ApplicationXMLDevicesDeviceTypeEnumZoomRoomsComputer      ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum = "Zoom Rooms Computer"
	ListZRDevices200ApplicationXMLDevicesDeviceTypeEnumController             ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum = "Controller"
	ListZRDevices200ApplicationXMLDevicesDeviceTypeEnumSchedulingDisplay      ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum = "Scheduling Display"
	ListZRDevices200ApplicationXMLDevicesDeviceTypeEnumZoomRoomsControlSystem ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum = "Zoom Rooms Control System"
	ListZRDevices200ApplicationXMLDevicesDeviceTypeEnumCompanionWhiteboard    ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum = "Companion Whiteboard"
)

func (e *ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Zoom Rooms Computer":
		fallthrough
	case "Controller":
		fallthrough
	case "Scheduling Display":
		fallthrough
	case "Zoom Rooms Control System":
		fallthrough
	case "Companion Whiteboard":
		*e = ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum: %s", s)
	}
}

// ListZRDevices200ApplicationXMLDevicesStatusEnum - Status of the device. The value can be either `Online` or `Offline`.
type ListZRDevices200ApplicationXMLDevicesStatusEnum string

const (
	ListZRDevices200ApplicationXMLDevicesStatusEnumOnline  ListZRDevices200ApplicationXMLDevicesStatusEnum = "Online"
	ListZRDevices200ApplicationXMLDevicesStatusEnumOffline ListZRDevices200ApplicationXMLDevicesStatusEnum = "Offline"
)

func (e *ListZRDevices200ApplicationXMLDevicesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Online":
		fallthrough
	case "Offline":
		*e = ListZRDevices200ApplicationXMLDevicesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListZRDevices200ApplicationXMLDevicesStatusEnum: %s", s)
	}
}

type ListZRDevices200ApplicationXMLDevices struct {
	// App version of Zoom Rooms.
	AppVersion *string
	// Operating system of the device.
	DeviceSystem *string
	// Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`
	DeviceType *ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum
	// Unique identifier of the device.
	ID *string
	// Name of the Zoom Room.
	RoomName *string
	// Status of the device. The value can be either `Online` or `Offline`.
	Status *ListZRDevices200ApplicationXMLDevicesStatusEnum
}

// ListZRDevices200ApplicationXML - **HTTP Status Code:** `200` **OK**
// Devices listed successfully.
type ListZRDevices200ApplicationXML struct {
	Devices []ListZRDevices200ApplicationXMLDevices
}

// ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum - Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`
type ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum string

const (
	ListZRDevices200ApplicationJSONDevicesDeviceTypeEnumZoomRoomsComputer      ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum = "Zoom Rooms Computer"
	ListZRDevices200ApplicationJSONDevicesDeviceTypeEnumController             ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum = "Controller"
	ListZRDevices200ApplicationJSONDevicesDeviceTypeEnumSchedulingDisplay      ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum = "Scheduling Display"
	ListZRDevices200ApplicationJSONDevicesDeviceTypeEnumZoomRoomsControlSystem ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum = "Zoom Rooms Control System"
	ListZRDevices200ApplicationJSONDevicesDeviceTypeEnumCompanionWhiteboard    ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum = "Companion Whiteboard"
)

func (e *ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Zoom Rooms Computer":
		fallthrough
	case "Controller":
		fallthrough
	case "Scheduling Display":
		fallthrough
	case "Zoom Rooms Control System":
		fallthrough
	case "Companion Whiteboard":
		*e = ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum: %s", s)
	}
}

// ListZRDevices200ApplicationJSONDevicesStatusEnum - Status of the device. The value can be either `Online` or `Offline`.
type ListZRDevices200ApplicationJSONDevicesStatusEnum string

const (
	ListZRDevices200ApplicationJSONDevicesStatusEnumOnline  ListZRDevices200ApplicationJSONDevicesStatusEnum = "Online"
	ListZRDevices200ApplicationJSONDevicesStatusEnumOffline ListZRDevices200ApplicationJSONDevicesStatusEnum = "Offline"
)

func (e *ListZRDevices200ApplicationJSONDevicesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Online":
		fallthrough
	case "Offline":
		*e = ListZRDevices200ApplicationJSONDevicesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListZRDevices200ApplicationJSONDevicesStatusEnum: %s", s)
	}
}

type ListZRDevices200ApplicationJSONDevices struct {
	// App version of Zoom Rooms.
	AppVersion *string `json:"app_version,omitempty"`
	// Operating system of the device.
	DeviceSystem *string `json:"device_system,omitempty"`
	// Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`
	DeviceType *ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum `json:"device_type,omitempty"`
	// Unique identifier of the device.
	ID *string `json:"id,omitempty"`
	// Name of the Zoom Room.
	RoomName *string `json:"room_name,omitempty"`
	// Status of the device. The value can be either `Online` or `Offline`.
	Status *ListZRDevices200ApplicationJSONDevicesStatusEnum `json:"status,omitempty"`
}

// ListZRDevices200ApplicationJSON - **HTTP Status Code:** `200` **OK**
// Devices listed successfully.
type ListZRDevices200ApplicationJSON struct {
	Devices []ListZRDevices200ApplicationJSONDevices `json:"devices,omitempty"`
}

type ListZRDevicesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK**
	// Devices listed successfully.
	ListZRDevices200ApplicationJSONObject *ListZRDevices200ApplicationJSON
}
