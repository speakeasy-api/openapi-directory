"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WorkflowTypeEnum(str, Enum):
    r"""The type of the workflow. Currently the only valid value is 'Workflow::Setup'."""
    WORKFLOW_SETUP = 'Workflow::Setup'
    WORKFLOW_INSTANCE = 'Workflow::Instance'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Workflow:
    r"""A workflow."""
    
    callout_trigger: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calloutTrigger'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the callout trigger is enabled for the retrieved workflow."""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'exclude': lambda f: f is None }})
    r"""The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the workflow."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the workflow."""  
    interval: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interval'), 'exclude': lambda f: f is None }})
    r"""The schedule of the workflow, in a CRON expression. Returns null if the schedued trigger is disabled."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the workflow."""  
    ondemand_trigger: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ondemandTrigger'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the ondemand trigger is enabled for the workflow."""  
    scheduled_trigger: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledTrigger'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the scheduled trigger is enabled for the workflow."""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""The timezone that is configured for the scheduler of the workflow. Returns null if the scheduled trigger is disabled."""  
    type: Optional[WorkflowTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the workflow. Currently the only valid value is 'Workflow::Setup'."""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'exclude': lambda f: f is None }})
    r"""The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format."""  
    