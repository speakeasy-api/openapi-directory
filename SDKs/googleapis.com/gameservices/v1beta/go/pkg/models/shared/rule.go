// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RuleActionEnum - Required
type RuleActionEnum string

const (
	RuleActionEnumNoAction     RuleActionEnum = "NO_ACTION"
	RuleActionEnumAllow        RuleActionEnum = "ALLOW"
	RuleActionEnumAllowWithLog RuleActionEnum = "ALLOW_WITH_LOG"
	RuleActionEnumDeny         RuleActionEnum = "DENY"
	RuleActionEnumDenyWithLog  RuleActionEnum = "DENY_WITH_LOG"
	RuleActionEnumLog          RuleActionEnum = "LOG"
)

func (e RuleActionEnum) ToPointer() *RuleActionEnum {
	return &e
}

func (e *RuleActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_ACTION":
		fallthrough
	case "ALLOW":
		fallthrough
	case "ALLOW_WITH_LOG":
		fallthrough
	case "DENY":
		fallthrough
	case "DENY_WITH_LOG":
		fallthrough
	case "LOG":
		*e = RuleActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RuleActionEnum: %v", v)
	}
}

// Rule - A rule to be applied in a Policy.
type Rule struct {
	// Required
	Action *RuleActionEnum `json:"action,omitempty"`
	// Additional restrictions that must be met. All conditions must pass for the rule to match.
	Conditions []Condition `json:"conditions,omitempty"`
	// Human-readable description of the rule.
	Description *string `json:"description,omitempty"`
	// If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
	In []string `json:"in,omitempty"`
	// The config returned to callers of CheckPolicy for any entries that match the LOG action.
	LogConfig []LogConfig `json:"logConfig,omitempty"`
	// If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).
	NotIn []string `json:"notIn,omitempty"`
	// A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
	Permissions []string `json:"permissions,omitempty"`
}
