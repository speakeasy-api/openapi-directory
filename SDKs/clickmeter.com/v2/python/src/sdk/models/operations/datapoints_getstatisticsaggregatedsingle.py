"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import api_core_dto_aggregated_aggregatedresult as shared_api_core_dto_aggregated_aggregatedresult
from enum import Enum
from typing import Optional

class DataPointsGetStatisticsAggregatedSingleStatusEnum(str, Enum):
    r"""Status of datapoint (\\"deleted\\"/\\"active\\"/\\"paused\\"/\\"spam\\")"""
    DELETED = 'deleted'
    ACTIVE = 'active'
    PAUSED = 'paused'
    SPAM = 'spam'

class DataPointsGetStatisticsAggregatedSingleTimeFrameEnum(str, Enum):
    r"""Timeframe of the request. See list at $timeframeList"""
    TODAY = 'today'
    YESTERDAY = 'yesterday'
    LAST7 = 'last7'
    LAST30 = 'last30'
    LASTMONTH = 'lastmonth'
    CURRENTMONTH = 'currentmonth'
    PREVIOUSMONTH = 'previousmonth'
    LAST90 = 'last90'
    LAST120 = 'last120'
    LAST180 = 'last180'
    LAST12MONTHS = 'last12months'
    LASTYEAR = 'lastyear'
    CURRENTYEAR = 'currentyear'
    BEGINNING = 'beginning'
    CUSTOM = 'custom'

class DataPointsGetStatisticsAggregatedSingleTypeEnum(str, Enum):
    r"""Type of datapoint (\\"tl\\"/\\"tp\\")"""
    TP = 'tp'
    TL = 'tl'


@dataclasses.dataclass
class DataPointsGetStatisticsAggregatedSingleRequest:
    
    time_frame: DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'timeFrame', 'style': 'form', 'explode': True }})
    r"""Timeframe of the request. See list at $timeframeList"""  
    favourite: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'favourite', 'style': 'form', 'explode': True }})
    r"""Is the datapoint is marked as favourite"""  
    from_day: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fromDay', 'style': 'form', 'explode': True }})
    r"""If using a \\"custom\\" timeFrame you can specify the starting day (YYYYMMDD)"""  
    hourly: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'hourly', 'style': 'form', 'explode': True }})
    r"""If using \\"yesterday\\" or \\"today\\" timeframe you can ask for the hourly detail"""  
    status: Optional[DataPointsGetStatisticsAggregatedSingleStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Status of datapoint (\\"deleted\\"/\\"active\\"/\\"paused\\"/\\"spam\\")"""  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tag', 'style': 'form', 'explode': True }})
    r"""A comma separated list of tags you want to filter with."""  
    to_day: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'toDay', 'style': 'form', 'explode': True }})
    r"""If using a \\"custom\\" timeFrame you can specify the ending day (YYYYMMDD)"""  
    type: Optional[DataPointsGetStatisticsAggregatedSingleTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Type of datapoint (\\"tl\\"/\\"tp\\")"""  
    

@dataclasses.dataclass
class DataPointsGetStatisticsAggregatedSingleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_core_dto_aggregated_aggregated_result: Optional[shared_api_core_dto_aggregated_aggregatedresult.APICoreDtoAggregatedAggregatedResult] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    