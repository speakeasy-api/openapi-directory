/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

public class IPProbeResponse {
    /**
     * The age of the autonomous system (AS) in number of years since registration
     */
    @JsonProperty("as-age")
    public Integer asAge;

    public IPProbeResponse withAsAge(Integer asAge) {
        this.asAge = asAge;
        return this;
    }
    
    /**
     * The autonomous system (AS) CIDR range
     */
    @JsonProperty("as-cidr")
    public String asCidr;

    public IPProbeResponse withAsCidr(String asCidr) {
        this.asCidr = asCidr;
        return this;
    }
    
    /**
     * The autonomous system (AS) ISO 2-letter country code
     */
    @JsonProperty("as-country-code")
    public String asCountryCode;

    public IPProbeResponse withAsCountryCode(String asCountryCode) {
        this.asCountryCode = asCountryCode;
        return this;
    }
    
    /**
     * The autonomous system (AS) ISO 3-letter country code
     */
    @JsonProperty("as-country-code3")
    public String asCountryCode3;

    public IPProbeResponse withAsCountryCode3(String asCountryCode3) {
        this.asCountryCode3 = asCountryCode3;
        return this;
    }
    
    /**
     * The autonomous system (AS) description / company name
     */
    @JsonProperty("as-description")
    public String asDescription;

    public IPProbeResponse withAsDescription(String asDescription) {
        this.asDescription = asDescription;
        return this;
    }
    
    /**
     * Array of all the domains associated with the autonomous system (AS)
     */
    @JsonProperty("as-domains")
    public String[] asDomains;

    public IPProbeResponse withAsDomains(String[] asDomains) {
        this.asDomains = asDomains;
        return this;
    }
    
    /**
     * The autonomous system (AS) number
     */
    @JsonProperty("asn")
    public String asn;

    public IPProbeResponse withAsn(String asn) {
        this.asn = asn;
        return this;
    }
    
    /**
     * Full city name (if detectable)
     */
    @JsonProperty("city")
    public String city;

    public IPProbeResponse withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * ISO 2-letter continent code
     */
    @JsonProperty("continent-code")
    public String continentCode;

    public IPProbeResponse withContinentCode(String continentCode) {
        this.continentCode = continentCode;
        return this;
    }
    
    /**
     * Full country name
     */
    @JsonProperty("country")
    public String country;

    public IPProbeResponse withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * ISO 2-letter country code
     */
    @JsonProperty("country-code")
    public String countryCode;

    public IPProbeResponse withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    /**
     * ISO 3-letter country code
     */
    @JsonProperty("country-code3")
    public String countryCode3;

    public IPProbeResponse withCountryCode3(String countryCode3) {
        this.countryCode3 = countryCode3;
        return this;
    }
    
    /**
     * ISO 4217 currency code associated with the country
     */
    @JsonProperty("currency-code")
    public String currencyCode;

    public IPProbeResponse withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * The IPs host domain
     */
    @JsonProperty("host-domain")
    public String hostDomain;

    public IPProbeResponse withHostDomain(String hostDomain) {
        this.hostDomain = hostDomain;
        return this;
    }
    
    /**
     * The IPs full hostname (PTR)
     */
    @JsonProperty("hostname")
    public String hostname;

    public IPProbeResponse withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * The IP address
     */
    @JsonProperty("ip")
    public String ip;

    public IPProbeResponse withIp(String ip) {
        this.ip = ip;
        return this;
    }
    
    /**
     * True if this is a bogon IP address such as a private network, local network or reserved address
     */
    @JsonProperty("is-bogon")
    public Boolean isBogon;

    public IPProbeResponse withIsBogon(Boolean isBogon) {
        this.isBogon = isBogon;
        return this;
    }
    
    /**
     * True if this IP belongs to a hosting company. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
     */
    @JsonProperty("is-hosting")
    public Boolean isHosting;

    public IPProbeResponse withIsHosting(Boolean isHosting) {
        this.isHosting = isHosting;
        return this;
    }
    
    /**
     * True if this IP belongs to an internet service provider. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types
     */
    @JsonProperty("is-isp")
    public Boolean isIsp;

    public IPProbeResponse withIsIsp(Boolean isIsp) {
        this.isIsp = isIsp;
        return this;
    }
    
    /**
     * True if this IP ia a proxy
     */
    @JsonProperty("is-proxy")
    public Boolean isProxy;

    public IPProbeResponse withIsProxy(Boolean isProxy) {
        this.isProxy = isProxy;
        return this;
    }
    
    /**
     * True if this is a &lt;a href="https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses"&gt;IPv4 mapped IPv6 address&lt;/a&gt;
     */
    @JsonProperty("is-v4-mapped")
    public Boolean isV4Mapped;

    public IPProbeResponse withIsV4Mapped(Boolean isV4Mapped) {
        this.isV4Mapped = isV4Mapped;
        return this;
    }
    
    /**
     * True if this is a IPv6 address. False if IPv4
     */
    @JsonProperty("is-v6")
    public Boolean isV6;

    public IPProbeResponse withIsV6(Boolean isV6) {
        this.isV6 = isV6;
        return this;
    }
    
    /**
     * True if this IP ia a VPN
     */
    @JsonProperty("is-vpn")
    public Boolean isVpn;

    public IPProbeResponse withIsVpn(Boolean isVpn) {
        this.isVpn = isVpn;
        return this;
    }
    
    /**
     * A description of the provider (usually extracted from the providers website)
     */
    @JsonProperty("provider-description")
    public String providerDescription;

    public IPProbeResponse withProviderDescription(String providerDescription) {
        this.providerDescription = providerDescription;
        return this;
    }
    
    /**
     * The domain name of the provider
     */
    @JsonProperty("provider-domain")
    public String providerDomain;

    public IPProbeResponse withProviderDomain(String providerDomain) {
        this.providerDomain = providerDomain;
        return this;
    }
    
    /**
     * The detected provider type, possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;isp - IP belongs to an internet service provider. This includes both mobile, home and business internet providers&lt;/li&gt; &lt;li&gt;hosting - IP belongs to a hosting company. This includes website hosting, cloud computing platforms and colocation facilities&lt;/li&gt; &lt;li&gt;vpn - IP belongs to a VPN provider&lt;/li&gt; &lt;li&gt;proxy - IP belongs to a proxy service. This includes HTTP/SOCKS proxies and browser based proxies&lt;/li&gt; &lt;li&gt;university - IP belongs to a university/college/campus&lt;/li&gt; &lt;li&gt;government - IP belongs to a government department. This includes military facilities&lt;/li&gt; &lt;li&gt;commercial - IP belongs to a commercial entity such as a corporate headquarters or company office&lt;/li&gt; &lt;li&gt;unknown - could not identify the provider type&lt;/li&gt; &lt;/ul&gt;
     */
    @JsonProperty("provider-type")
    public String providerType;

    public IPProbeResponse withProviderType(String providerType) {
        this.providerType = providerType;
        return this;
    }
    
    /**
     * The website URL for the provider
     */
    @JsonProperty("provider-website")
    public String providerWebsite;

    public IPProbeResponse withProviderWebsite(String providerWebsite) {
        this.providerWebsite = providerWebsite;
        return this;
    }
    
    /**
     * Full region name (if detectable)
     */
    @JsonProperty("region")
    public String region;

    public IPProbeResponse withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * ISO 3166-2 region code (if detectable)
     */
    @JsonProperty("region-code")
    public String regionCode;

    public IPProbeResponse withRegionCode(String regionCode) {
        this.regionCode = regionCode;
        return this;
    }
    
    /**
     * True if this is a valid IPv4 or IPv6 address
     */
    @JsonProperty("valid")
    public Boolean valid;

    public IPProbeResponse withValid(Boolean valid) {
        this.valid = valid;
        return this;
    }
    
    /**
     * The domain of the VPN provider (may be empty if the VPN domain is not detectable)
     */
    @JsonProperty("vpn-domain")
    public String vpnDomain;

    public IPProbeResponse withVpnDomain(String vpnDomain) {
        this.vpnDomain = vpnDomain;
        return this;
    }
    
    public IPProbeResponse(@JsonProperty("as-age") Integer asAge, @JsonProperty("as-cidr") String asCidr, @JsonProperty("as-country-code") String asCountryCode, @JsonProperty("as-country-code3") String asCountryCode3, @JsonProperty("as-description") String asDescription, @JsonProperty("as-domains") String[] asDomains, @JsonProperty("asn") String asn, @JsonProperty("city") String city, @JsonProperty("continent-code") String continentCode, @JsonProperty("country") String country, @JsonProperty("country-code") String countryCode, @JsonProperty("country-code3") String countryCode3, @JsonProperty("currency-code") String currencyCode, @JsonProperty("host-domain") String hostDomain, @JsonProperty("hostname") String hostname, @JsonProperty("ip") String ip, @JsonProperty("is-bogon") Boolean isBogon, @JsonProperty("is-hosting") Boolean isHosting, @JsonProperty("is-isp") Boolean isIsp, @JsonProperty("is-proxy") Boolean isProxy, @JsonProperty("is-v4-mapped") Boolean isV4Mapped, @JsonProperty("is-v6") Boolean isV6, @JsonProperty("is-vpn") Boolean isVpn, @JsonProperty("provider-description") String providerDescription, @JsonProperty("provider-domain") String providerDomain, @JsonProperty("provider-type") String providerType, @JsonProperty("provider-website") String providerWebsite, @JsonProperty("region") String region, @JsonProperty("region-code") String regionCode, @JsonProperty("valid") Boolean valid, @JsonProperty("vpn-domain") String vpnDomain) {
        this.asAge = asAge;
        this.asCidr = asCidr;
        this.asCountryCode = asCountryCode;
        this.asCountryCode3 = asCountryCode3;
        this.asDescription = asDescription;
        this.asDomains = asDomains;
        this.asn = asn;
        this.city = city;
        this.continentCode = continentCode;
        this.country = country;
        this.countryCode = countryCode;
        this.countryCode3 = countryCode3;
        this.currencyCode = currencyCode;
        this.hostDomain = hostDomain;
        this.hostname = hostname;
        this.ip = ip;
        this.isBogon = isBogon;
        this.isHosting = isHosting;
        this.isIsp = isIsp;
        this.isProxy = isProxy;
        this.isV4Mapped = isV4Mapped;
        this.isV6 = isV6;
        this.isVpn = isVpn;
        this.providerDescription = providerDescription;
        this.providerDomain = providerDomain;
        this.providerType = providerType;
        this.providerWebsite = providerWebsite;
        this.region = region;
        this.regionCode = regionCode;
        this.valid = valid;
        this.vpnDomain = vpnDomain;
  }
}
