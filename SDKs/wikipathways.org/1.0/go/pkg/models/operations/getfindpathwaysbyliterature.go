// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetFindPathwaysByLiteratureFormatEnum
type GetFindPathwaysByLiteratureFormatEnum string

const (
	GetFindPathwaysByLiteratureFormatEnumJSON GetFindPathwaysByLiteratureFormatEnum = "json"
	GetFindPathwaysByLiteratureFormatEnumXML  GetFindPathwaysByLiteratureFormatEnum = "xml"
	GetFindPathwaysByLiteratureFormatEnumHTML GetFindPathwaysByLiteratureFormatEnum = "html"
	GetFindPathwaysByLiteratureFormatEnumDump GetFindPathwaysByLiteratureFormatEnum = "dump"
	GetFindPathwaysByLiteratureFormatEnumJpg  GetFindPathwaysByLiteratureFormatEnum = "jpg"
	GetFindPathwaysByLiteratureFormatEnumPdf  GetFindPathwaysByLiteratureFormatEnum = "pdf"
)

func (e GetFindPathwaysByLiteratureFormatEnum) ToPointer() *GetFindPathwaysByLiteratureFormatEnum {
	return &e
}

func (e *GetFindPathwaysByLiteratureFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "html":
		fallthrough
	case "dump":
		fallthrough
	case "jpg":
		fallthrough
	case "pdf":
		*e = GetFindPathwaysByLiteratureFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFindPathwaysByLiteratureFormatEnum: %v", v)
	}
}

type GetFindPathwaysByLiteratureRequest struct {
	Format *GetFindPathwaysByLiteratureFormatEnum `queryParam:"style=form,explode=true,name=format"`
	// The query, can be a pubmed id, author name or title keyword.
	Query string `queryParam:"style=form,explode=true,name=query"`
}

type GetFindPathwaysByLiteratureResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
