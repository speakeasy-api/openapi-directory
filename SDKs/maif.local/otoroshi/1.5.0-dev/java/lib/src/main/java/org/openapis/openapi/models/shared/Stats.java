/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Stats - Live stats for a service or globally
 */
public class Stats {
    /**
     * Number of calls on the specified service or globally
     */
    @JsonProperty("calls")
    public Long calls;

    public Stats withCalls(Long calls) {
        this.calls = calls;
        return this;
    }
    
    /**
     * The number of concurrent request currently
     */
    @JsonProperty("concurrentHandledRequests")
    public Long concurrentHandledRequests;

    public Stats withConcurrentHandledRequests(Long concurrentHandledRequests) {
        this.concurrentHandledRequests = concurrentHandledRequests;
        return this;
    }
    
    /**
     * The amount of data sent to the specified service or Otoroshi globally
     */
    @JsonProperty("dataIn")
    public Long dataIn;

    public Stats withDataIn(Long dataIn) {
        this.dataIn = dataIn;
        return this;
    }
    
    /**
     * The rate of data sent to the specified service or Otoroshi globally
     */
    @JsonProperty("dataInRate")
    public Double dataInRate;

    public Stats withDataInRate(Double dataInRate) {
        this.dataInRate = dataInRate;
        return this;
    }
    
    /**
     * The amount of data sent from the specified service or Otoroshi globally
     */
    @JsonProperty("dataOut")
    public Long dataOut;

    public Stats withDataOut(Long dataOut) {
        this.dataOut = dataOut;
        return this;
    }
    
    /**
     * The rate of data sent from the specified service or Otoroshi globally
     */
    @JsonProperty("dataOutRate")
    public Double dataOutRate;

    public Stats withDataOutRate(Double dataOutRate) {
        this.dataOutRate = dataOutRate;
        return this;
    }
    
    /**
     * The average duration for a call
     */
    @JsonProperty("duration")
    public Double duration;

    public Stats withDuration(Double duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * The average overhead time induced by Otoroshi for each call
     */
    @JsonProperty("overhead")
    public Double overhead;

    public Stats withOverhead(Double overhead) {
        this.overhead = overhead;
        return this;
    }
    
    /**
     * The rate of data sent from and to the specified service or Otoroshi globally
     */
    @JsonProperty("rate")
    public Double rate;

    public Stats withRate(Double rate) {
        this.rate = rate;
        return this;
    }
    
    public Stats(@JsonProperty("calls") Long calls, @JsonProperty("concurrentHandledRequests") Long concurrentHandledRequests, @JsonProperty("dataIn") Long dataIn, @JsonProperty("dataInRate") Double dataInRate, @JsonProperty("dataOut") Long dataOut, @JsonProperty("dataOutRate") Double dataOutRate, @JsonProperty("duration") Double duration, @JsonProperty("overhead") Double overhead, @JsonProperty("rate") Double rate) {
        this.calls = calls;
        this.concurrentHandledRequests = concurrentHandledRequests;
        this.dataIn = dataIn;
        this.dataInRate = dataInRate;
        this.dataOut = dataOut;
        this.dataOutRate = dataOutRate;
        this.duration = duration;
        this.overhead = overhead;
        this.rate = rate;
  }
}
