// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PackageVersionPackageVersionMetadataContainerMetadata struct {
	Tags []string `json:"tags"`
}

type PackageVersionPackageVersionMetadataDockerMetadata struct {
	Tag []string `json:"tag,omitempty"`
}

type PackageVersionPackageVersionMetadataPackageTypeEnum string

const (
	PackageVersionPackageVersionMetadataPackageTypeEnumNpm       PackageVersionPackageVersionMetadataPackageTypeEnum = "npm"
	PackageVersionPackageVersionMetadataPackageTypeEnumMaven     PackageVersionPackageVersionMetadataPackageTypeEnum = "maven"
	PackageVersionPackageVersionMetadataPackageTypeEnumRubygems  PackageVersionPackageVersionMetadataPackageTypeEnum = "rubygems"
	PackageVersionPackageVersionMetadataPackageTypeEnumDocker    PackageVersionPackageVersionMetadataPackageTypeEnum = "docker"
	PackageVersionPackageVersionMetadataPackageTypeEnumNuget     PackageVersionPackageVersionMetadataPackageTypeEnum = "nuget"
	PackageVersionPackageVersionMetadataPackageTypeEnumContainer PackageVersionPackageVersionMetadataPackageTypeEnum = "container"
)

func (e *PackageVersionPackageVersionMetadataPackageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "npm":
		fallthrough
	case "maven":
		fallthrough
	case "rubygems":
		fallthrough
	case "docker":
		fallthrough
	case "nuget":
		fallthrough
	case "container":
		*e = PackageVersionPackageVersionMetadataPackageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PackageVersionPackageVersionMetadataPackageTypeEnum: %s", s)
	}
}

type PackageVersionPackageVersionMetadata struct {
	Container   *PackageVersionPackageVersionMetadataContainerMetadata `json:"container,omitempty"`
	Docker      *PackageVersionPackageVersionMetadataDockerMetadata    `json:"docker,omitempty"`
	PackageType PackageVersionPackageVersionMetadataPackageTypeEnum    `json:"package_type"`
}

// PackageVersion - A version of a software package
type PackageVersion struct {
	CreatedAt   time.Time  `json:"created_at"`
	DeletedAt   *time.Time `json:"deleted_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	HTMLURL     *string    `json:"html_url,omitempty"`
	// Unique identifier of the package version.
	ID       int64                                 `json:"id"`
	License  *string                               `json:"license,omitempty"`
	Metadata *PackageVersionPackageVersionMetadata `json:"metadata,omitempty"`
	// The name of the package version.
	Name           string    `json:"name"`
	PackageHTMLURL string    `json:"package_html_url"`
	UpdatedAt      time.Time `json:"updated_at"`
	URL            string    `json:"url"`
}
