/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class HTMLRenderRequestBody extends SpeakeasyBase {
  /**
   * The HTML content. This can be either a URL to load from, a file upload (multipart/form-data) or an HTML content string
   */
  @SpeakeasyMetadata({ data: "form, name=content" })
  content: string;

  /**
   * Inject custom CSS into the HTML. e.g. 'body { background-color: red;}'
   */
  @SpeakeasyMetadata({ data: "form, name=css" })
  css?: string;

  /**
   * Number of seconds to wait before rendering the page (can be useful for pages with animations etc)
   */
  @SpeakeasyMetadata({ data: "form, name=delay" })
  delay?: number;

  /**
   * The footer HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages}
   */
  @SpeakeasyMetadata({ data: "form, name=footer" })
  footer?: string;

  /**
   * Which format to output, available options are: PDF, PNG, JPG
   */
  @SpeakeasyMetadata({ data: "form, name=format" })
  format?: string;

  /**
   * Render the final document in grayscale
   */
  @SpeakeasyMetadata({ data: "form, name=grayscale" })
  grayscale?: boolean;

  /**
   * The header HTML to insert into each page. The following dynamic tags are supported: {date}, {title}, {url}, {pageNumber}, {totalPages}
   */
  @SpeakeasyMetadata({ data: "form, name=header" })
  header?: string;

  /**
   * Ignore any TLS/SSL certificate errors
   */
  @SpeakeasyMetadata({ data: "form, name=ignore-certificate-errors" })
  ignoreCertificateErrors?: boolean;

  /**
   * If rendering to an image format (PNG or JPG) use this image height (in pixels). The default is automatic which dynamically sets the image height based on the content
   */
  @SpeakeasyMetadata({ data: "form, name=image-height" })
  imageHeight?: number;

  /**
   * If rendering to an image format (PNG or JPG) use this image width (in pixels)
   */
  @SpeakeasyMetadata({ data: "form, name=image-width" })
  imageWidth?: number;

  /**
   * Set the document to landscape orientation
   */
  @SpeakeasyMetadata({ data: "form, name=landscape" })
  landscape?: boolean;

  /**
   * The document margin (in mm)
   */
  @SpeakeasyMetadata({ data: "form, name=margin" })
  margin?: number;

  /**
   * The document bottom margin (in mm)
   */
  @SpeakeasyMetadata({ data: "form, name=margin-bottom" })
  marginBottom?: number;

  /**
   * The document left margin (in mm)
   */
  @SpeakeasyMetadata({ data: "form, name=margin-left" })
  marginLeft?: number;

  /**
   * The document right margin (in mm)
   */
  @SpeakeasyMetadata({ data: "form, name=margin-right" })
  marginRight?: number;

  /**
   * The document top margin (in mm)
   */
  @SpeakeasyMetadata({ data: "form, name=margin-top" })
  marginTop?: number;

  /**
   * Set the PDF page height explicitly (in mm)
   */
  @SpeakeasyMetadata({ data: "form, name=page-height" })
  pageHeight?: number;

  /**
   * Set the document page size, can be one of: A0 - A9, B0 - B10, Comm10E, DLE or Letter
   */
  @SpeakeasyMetadata({ data: "form, name=page-size" })
  pageSize?: string;

  /**
   * Set the PDF page width explicitly (in mm)
   */
  @SpeakeasyMetadata({ data: "form, name=page-width" })
  pageWidth?: number;

  /**
   * Timeout in seconds. Give up if still trying to load the HTML content after this number of seconds
   */
  @SpeakeasyMetadata({ data: "form, name=timeout" })
  timeout?: number;

  /**
   * The document title
   */
  @SpeakeasyMetadata({ data: "form, name=title" })
  title?: string;

  /**
   * Set the zoom factor when rendering the page (2.0 for double size, 0.5 for half size)
   */
  @SpeakeasyMetadata({ data: "form, name=zoom" })
  zoom?: number;
}

export class HTMLRenderResponse extends SpeakeasyBase {
  /**
   * Your API request has been rejected. Check error code for details
   */
  @SpeakeasyMetadata()
  apiError?: shared.APIError;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  htmlRender200ApplicationJSONBinaryString?: Uint8Array;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
