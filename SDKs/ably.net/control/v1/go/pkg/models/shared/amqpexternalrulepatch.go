// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AmqpExternalRulePatchRuleTypeEnum string

const (
	AmqpExternalRulePatchRuleTypeEnumAmqpExternal AmqpExternalRulePatchRuleTypeEnum = "amqp/external"
)

func (e AmqpExternalRulePatchRuleTypeEnum) ToPointer() *AmqpExternalRulePatchRuleTypeEnum {
	return &e
}

func (e *AmqpExternalRulePatchRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amqp/external":
		*e = AmqpExternalRulePatchRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmqpExternalRulePatchRuleTypeEnum: %v", v)
	}
}

type AmqpExternalRulePatchTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type AmqpExternalRulePatchTarget struct {
	Enveloped          *bool                                `json:"enveloped,omitempty"`
	Exchange           *string                              `json:"exchange,omitempty"`
	Format             *string                              `json:"format,omitempty"`
	Headers            []AmqpExternalRulePatchTargetHeaders `json:"headers,omitempty"`
	MandatoryRoute     *bool                                `json:"mandatoryRoute,omitempty"`
	MessageTTL         *int64                               `json:"messageTtl,omitempty"`
	PersistentMessages *bool                                `json:"persistentMessages,omitempty"`
	RoutingKey         *string                              `json:"routingKey,omitempty"`
	URL                *string                              `json:"url,omitempty"`
}

type AmqpExternalRulePatch struct {
	RequestMode *string                           `json:"requestMode,omitempty"`
	RuleType    AmqpExternalRulePatchRuleTypeEnum `json:"ruleType"`
	Source      *RuleSourcePatch                  `json:"source,omitempty"`
	Status      *string                           `json:"status,omitempty"`
	Target      *AmqpExternalRulePatchTarget      `json:"target,omitempty"`
}
