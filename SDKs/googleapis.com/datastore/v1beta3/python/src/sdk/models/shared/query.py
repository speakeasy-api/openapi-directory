"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import filter as shared_filter
from ..shared import kindexpression as shared_kindexpression
from ..shared import projection as shared_projection
from ..shared import propertyorder as shared_propertyorder
from ..shared import propertyreference as shared_propertyreference
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Query:
    r"""A query for entities."""
    
    distinct_on: Optional[list[shared_propertyreference.PropertyReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distinctOn'), 'exclude': lambda f: f is None }})
    r"""The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned). Requires: * If `order` is specified, the set of distinct on properties must appear before the non-distinct on properties in `order`."""  
    end_cursor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endCursor'), 'exclude': lambda f: f is None }})
    r"""An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets)."""  
    filter: Optional[shared_filter.Filter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter'), 'exclude': lambda f: f is None }})
    r"""A holder for any type of filter."""  
    kind: Optional[list[shared_kindexpression.KindExpression]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})
    r"""The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified."""  
    order: Optional[list[shared_propertyorder.PropertyOrder]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order'), 'exclude': lambda f: f is None }})
    r"""The order to apply to the query results (if empty, order is unspecified)."""  
    projection: Optional[list[shared_projection.Projection]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projection'), 'exclude': lambda f: f is None }})
    r"""The projection to return. Defaults to returning all properties."""  
    start_cursor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startCursor'), 'exclude': lambda f: f is None }})
    r"""A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets)."""  
    