/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CapacitySpecification } from "./capacityspecification";
import { EncryptionSpecification } from "./encryptionspecification";
import { PointInTimeRecovery } from "./pointintimerecovery";
import { Tag } from "./tag";
import { Expose, Transform, Type } from "class-transformer";

export class RestoreTableRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "capacitySpecificationOverride" })
  @Type(() => CapacitySpecification)
  capacitySpecificationOverride?: CapacitySpecification;

  @SpeakeasyMetadata()
  @Expose({ name: "encryptionSpecificationOverride" })
  @Type(() => EncryptionSpecification)
  encryptionSpecificationOverride?: EncryptionSpecification;

  @SpeakeasyMetadata()
  @Expose({ name: "pointInTimeRecoveryOverride" })
  @Type(() => PointInTimeRecovery)
  pointInTimeRecoveryOverride?: PointInTimeRecovery;

  @SpeakeasyMetadata()
  @Expose({ name: "restoreTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  restoreTimestamp?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceKeyspaceName" })
  sourceKeyspaceName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceTableName" })
  sourceTableName: string;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "tagsOverride" })
  @Type(() => Tag)
  tagsOverride?: Tag[];

  @SpeakeasyMetadata()
  @Expose({ name: "targetKeyspaceName" })
  targetKeyspaceName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "targetTableName" })
  targetTableName: string;
}
