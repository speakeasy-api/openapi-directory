"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import biddingstrategy as shared_biddingstrategy
from ..shared import conversioncountingconfig as shared_conversioncountingconfig
from ..shared import frequencycap as shared_frequencycap
from ..shared import integrationdetails as shared_integrationdetails
from ..shared import lineitembudget as shared_lineitembudget
from ..shared import lineitemflight as shared_lineitemflight
from ..shared import mobileapp as shared_mobileapp
from ..shared import pacing as shared_pacing
from ..shared import partnercost as shared_partnercost
from ..shared import partnerrevenuemodel as shared_partnerrevenuemodel
from ..shared import targetingexpansionconfig as shared_targetingexpansionconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LineItemEntityStatusEnum(str, Enum):
    r"""Required. Controls whether or not the line item can spend its budget and bid on inventory. * For CreateLineItem method, only `ENTITY_STATUS_DRAFT` is allowed. To activate a line item, use UpdateLineItem method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * A line item cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * If the line item's parent insertion order is not active, the line item can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`."""
    ENTITY_STATUS_UNSPECIFIED = 'ENTITY_STATUS_UNSPECIFIED'
    ENTITY_STATUS_ACTIVE = 'ENTITY_STATUS_ACTIVE'
    ENTITY_STATUS_ARCHIVED = 'ENTITY_STATUS_ARCHIVED'
    ENTITY_STATUS_DRAFT = 'ENTITY_STATUS_DRAFT'
    ENTITY_STATUS_PAUSED = 'ENTITY_STATUS_PAUSED'
    ENTITY_STATUS_SCHEDULED_FOR_DELETION = 'ENTITY_STATUS_SCHEDULED_FOR_DELETION'

class LineItemLineItemTypeEnum(str, Enum):
    r"""Required. Immutable. The type of the line item."""
    LINE_ITEM_TYPE_UNSPECIFIED = 'LINE_ITEM_TYPE_UNSPECIFIED'
    LINE_ITEM_TYPE_DISPLAY_DEFAULT = 'LINE_ITEM_TYPE_DISPLAY_DEFAULT'
    LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL = 'LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL'
    LINE_ITEM_TYPE_VIDEO_DEFAULT = 'LINE_ITEM_TYPE_VIDEO_DEFAULT'
    LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL = 'LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL'
    LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INVENTORY = 'LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INVENTORY'
    LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INVENTORY = 'LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INVENTORY'
    LINE_ITEM_TYPE_AUDIO_DEFAULT = 'LINE_ITEM_TYPE_AUDIO_DEFAULT'
    LINE_ITEM_TYPE_VIDEO_OVER_THE_TOP = 'LINE_ITEM_TYPE_VIDEO_OVER_THE_TOP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LineItemInput:
    r"""A single line item."""
    
    bid_strategy: Optional[shared_biddingstrategy.BiddingStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bidStrategy'), 'exclude': lambda f: f is None }})
    r"""Settings that control the bid strategy. Bid strategy determines the bid price."""  
    budget: Optional[shared_lineitembudget.LineItemBudgetInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('budget'), 'exclude': lambda f: f is None }})
    r"""Settings that control how budget is allocated."""  
    conversion_counting: Optional[shared_conversioncountingconfig.ConversionCountingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionCounting'), 'exclude': lambda f: f is None }})
    r"""Settings that control how conversions are counted. All post-click conversions will be counted. A percentage value can be set for post-view conversions counting."""  
    creative_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the creatives associated with the line item."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the line item. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    entity_status: Optional[LineItemEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""Required. Controls whether or not the line item can spend its budget and bid on inventory. * For CreateLineItem method, only `ENTITY_STATUS_DRAFT` is allowed. To activate a line item, use UpdateLineItem method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * A line item cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * If the line item's parent insertion order is not active, the line item can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`."""  
    exclude_new_exchanges: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeNewExchanges'), 'exclude': lambda f: f is None }})
    r"""Whether to exclude new exchanges from automatically being targeted by the line item. This field is false by default."""  
    flight: Optional[shared_lineitemflight.LineItemFlight] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flight'), 'exclude': lambda f: f is None }})
    r"""Settings that control the active duration of a line item."""  
    frequency_cap: Optional[shared_frequencycap.FrequencyCap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequencyCap'), 'exclude': lambda f: f is None }})
    r"""Settings that control the number of times a user may be shown with the same ad during a given time period."""  
    insertion_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertionOrderId'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The unique ID of the insertion order that the line item belongs to."""  
    integration_details: Optional[shared_integrationdetails.IntegrationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integrationDetails'), 'exclude': lambda f: f is None }})
    r"""Integration details of an entry."""  
    inventory_source_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the private inventory sources assigned to the line item."""  
    line_item_type: Optional[LineItemLineItemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineItemType'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The type of the line item."""  
    mobile_app: Optional[shared_mobileapp.MobileAppInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobileApp'), 'exclude': lambda f: f is None }})
    r"""A mobile app promoted by a mobile app install line item."""  
    pacing: Optional[shared_pacing.Pacing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pacing'), 'exclude': lambda f: f is None }})
    r"""Settings that control the rate at which a budget is spent."""  
    partner_costs: Optional[list[shared_partnercost.PartnerCost]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerCosts'), 'exclude': lambda f: f is None }})
    r"""The partner costs associated with the line item. If absent or empty in CreateLineItem method, the newly created line item will inherit partner costs from its parent insertion order."""  
    partner_revenue_model: Optional[shared_partnerrevenuemodel.PartnerRevenueModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerRevenueModel'), 'exclude': lambda f: f is None }})
    r"""Settings that control how partner revenue is calculated."""  
    targeting_expansion: Optional[shared_targetingexpansionconfig.TargetingExpansionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetingExpansion'), 'exclude': lambda f: f is None }})
    r"""Settings that control the targeting expansion of the line item. Targeting expansion allows the line item to reach a larger audience based on the original audience list and the targeting expansion level. Beginning **March 25, 2023**, these settings may represent the [optimized targeting feature](//support.google.com/displayvideo/answer/12060859) in place of targeting expansion. This feature will be rolled out to all partners by mid-April 2023."""  
    
class LineItemReservationTypeEnum(str, Enum):
    r"""Output only. The reservation type of the line item."""
    RESERVATION_TYPE_UNSPECIFIED = 'RESERVATION_TYPE_UNSPECIFIED'
    RESERVATION_TYPE_NOT_GUARANTEED = 'RESERVATION_TYPE_NOT_GUARANTEED'
    RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED = 'RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED'
    RESERVATION_TYPE_TAG_GUARANTEED = 'RESERVATION_TYPE_TAG_GUARANTEED'

class LineItemWarningMessagesEnum(str, Enum):
    LINE_ITEM_WARNING_MESSAGE_UNSPECIFIED = 'LINE_ITEM_WARNING_MESSAGE_UNSPECIFIED'
    INVALID_FLIGHT_DATES = 'INVALID_FLIGHT_DATES'
    EXPIRED = 'EXPIRED'
    PENDING_FLIGHT = 'PENDING_FLIGHT'
    ALL_PARTNER_ENABLED_EXCHANGES_NEGATIVELY_TARGETED = 'ALL_PARTNER_ENABLED_EXCHANGES_NEGATIVELY_TARGETED'
    INVALID_INVENTORY_SOURCE = 'INVALID_INVENTORY_SOURCE'
    APP_INVENTORY_INVALID_SITE_TARGETING = 'APP_INVENTORY_INVALID_SITE_TARGETING'
    APP_INVENTORY_INVALID_AUDIENCE_LISTS = 'APP_INVENTORY_INVALID_AUDIENCE_LISTS'
    NO_VALID_CREATIVE = 'NO_VALID_CREATIVE'
    PARENT_INSERTION_ORDER_PAUSED = 'PARENT_INSERTION_ORDER_PAUSED'
    PARENT_INSERTION_ORDER_EXPIRED = 'PARENT_INSERTION_ORDER_EXPIRED'
    NO_POSITIVE_AUDIENCE_LIST_TARGETED = 'NO_POSITIVE_AUDIENCE_LIST_TARGETED'
    APP_INSTALL_NO_CONVERSION_PIXEL = 'APP_INSTALL_NO_CONVERSION_PIXEL'
    TARGETING_REVOKED_OR_CLOSED_USER_LIST = 'TARGETING_REVOKED_OR_CLOSED_USER_LIST'
    APP_INSTALL_NO_OPTIMAL_BIDDING_STRATEGY = 'APP_INSTALL_NO_OPTIMAL_BIDDING_STRATEGY'
    CREATIVE_SIZE_NOT_IN_USE_FOR_TARGETED_DEALS = 'CREATIVE_SIZE_NOT_IN_USE_FOR_TARGETED_DEALS'
    NO_CREATIVE_FOR_TARGETED_DEALS = 'NO_CREATIVE_FOR_TARGETED_DEALS'
    TARGETING_DEPRECATED_GEO_TARGET = 'TARGETING_DEPRECATED_GEO_TARGET'
    DEPRECATED_FIRST_PARTY_AUDIENCE_EXCLUSION = 'DEPRECATED_FIRST_PARTY_AUDIENCE_EXCLUSION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LineItem:
    r"""A single line item."""
    
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the advertiser the line item belongs to."""  
    bid_strategy: Optional[shared_biddingstrategy.BiddingStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bidStrategy'), 'exclude': lambda f: f is None }})
    r"""Settings that control the bid strategy. Bid strategy determines the bid price."""  
    budget: Optional[shared_lineitembudget.LineItemBudget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('budget'), 'exclude': lambda f: f is None }})
    r"""Settings that control how budget is allocated."""  
    campaign_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the campaign that the line item belongs to."""  
    conversion_counting: Optional[shared_conversioncountingconfig.ConversionCountingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionCounting'), 'exclude': lambda f: f is None }})
    r"""Settings that control how conversions are counted. All post-click conversions will be counted. A percentage value can be set for post-view conversions counting."""  
    creative_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the creatives associated with the line item."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the line item. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    entity_status: Optional[LineItemEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""Required. Controls whether or not the line item can spend its budget and bid on inventory. * For CreateLineItem method, only `ENTITY_STATUS_DRAFT` is allowed. To activate a line item, use UpdateLineItem method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * A line item cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * If the line item's parent insertion order is not active, the line item can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`."""  
    exclude_new_exchanges: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludeNewExchanges'), 'exclude': lambda f: f is None }})
    r"""Whether to exclude new exchanges from automatically being targeted by the line item. This field is false by default."""  
    flight: Optional[shared_lineitemflight.LineItemFlight] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flight'), 'exclude': lambda f: f is None }})
    r"""Settings that control the active duration of a line item."""  
    frequency_cap: Optional[shared_frequencycap.FrequencyCap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequencyCap'), 'exclude': lambda f: f is None }})
    r"""Settings that control the number of times a user may be shown with the same ad during a given time period."""  
    insertion_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertionOrderId'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The unique ID of the insertion order that the line item belongs to."""  
    integration_details: Optional[shared_integrationdetails.IntegrationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integrationDetails'), 'exclude': lambda f: f is None }})
    r"""Integration details of an entry."""  
    inventory_source_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySourceIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the private inventory sources assigned to the line item."""  
    line_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineItemId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the line item. Assigned by the system."""  
    line_item_type: Optional[LineItemLineItemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineItemType'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The type of the line item."""  
    mobile_app: Optional[shared_mobileapp.MobileApp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobileApp'), 'exclude': lambda f: f is None }})
    r"""A mobile app promoted by a mobile app install line item."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the line item."""  
    pacing: Optional[shared_pacing.Pacing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pacing'), 'exclude': lambda f: f is None }})
    r"""Settings that control the rate at which a budget is spent."""  
    partner_costs: Optional[list[shared_partnercost.PartnerCost]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerCosts'), 'exclude': lambda f: f is None }})
    r"""The partner costs associated with the line item. If absent or empty in CreateLineItem method, the newly created line item will inherit partner costs from its parent insertion order."""  
    partner_revenue_model: Optional[shared_partnerrevenuemodel.PartnerRevenueModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerRevenueModel'), 'exclude': lambda f: f is None }})
    r"""Settings that control how partner revenue is calculated."""  
    reservation_type: Optional[LineItemReservationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservationType'), 'exclude': lambda f: f is None }})
    r"""Output only. The reservation type of the line item."""  
    targeting_expansion: Optional[shared_targetingexpansionconfig.TargetingExpansionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetingExpansion'), 'exclude': lambda f: f is None }})
    r"""Settings that control the targeting expansion of the line item. Targeting expansion allows the line item to reach a larger audience based on the original audience list and the targeting expansion level. Beginning **March 25, 2023**, these settings may represent the [optimized targeting feature](//support.google.com/displayvideo/answer/12060859) in place of targeting expansion. This feature will be rolled out to all partners by mid-April 2023."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the line item was last updated. Assigned by the system."""  
    warning_messages: Optional[list[LineItemWarningMessagesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warningMessages'), 'exclude': lambda f: f is None }})
    r"""Output only. The warning messages generated by the line item. These warnings do not block saving the line item, but some may block the line item from running."""  
    