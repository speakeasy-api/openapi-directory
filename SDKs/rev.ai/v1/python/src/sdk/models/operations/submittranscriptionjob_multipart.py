"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import job as shared_job
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class SubmitTranscriptionJobMultipartFormDataMedia:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    media: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'media' }})  
    

@dataclasses.dataclass
class SubmitTranscriptionJobMultipartFormData:
    r"""Transcription Job Options"""
    
    media: Optional[SubmitTranscriptionJobMultipartFormDataMedia] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})
    r"""Limited to files less than 2GB in size. If the file is larger than 2GB, submit a transcription job using `media_url`. **Note:** Media files longer than 17 hours are not supported for English transcription, and media files longer than 12 hours are not supported for non-English transcription. For non-English jobs, expected turnaround time can be up to 6 hours."""  
    options: Optional[Any] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'options', 'json': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubmitTranscriptionJobMultipart413ApplicationProblemPlusJSON:
    r"""Payload Too Large
    ***
    Only returned when job is submitted using a local file as part of `multipart/form-data`. Use a `media_url`
    for files larger than 2GBs
    """
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Human-readable explanation specific to this occurrence of the problem"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP status code of the error"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short, human-readable summary of the problem type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubmitTranscriptionJobMultipart401ApplicationProblemPlusJSON:
    r"""Request Unauthorized
    ***
    Caused by an old or invalid [access token](#section/Authentication/Access-Token), try regenerating your token on your [access token page](https://rev.ai/access_token).
    """
    
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP status code of the error"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short, human-readable summary of the problem type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubmitTranscriptionJobMultipart400ApplicationProblemPlusJSON:
    r"""Problem details object returned on errors"""
    
    parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""Invalid properties object where each property is the key, mapped to a list of reasons why the property is invalid"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HTTP status code of the error"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Short, human-readable summary of the problem type"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""URI that identifies the problem"""  
    

@dataclasses.dataclass
class SubmitTranscriptionJobMultipartResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    job: Optional[shared_job.Job] = dataclasses.field(default=None)
    r"""Transcription Job Details"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    submit_transcription_job_multipart_400_application_problem_plus_json_object: Optional[SubmitTranscriptionJobMultipart400ApplicationProblemPlusJSON] = dataclasses.field(default=None)
    r"""Bad Request"""  
    submit_transcription_job_multipart_401_application_problem_plus_json_object: Optional[SubmitTranscriptionJobMultipart401ApplicationProblemPlusJSON] = dataclasses.field(default=None)
    r"""Request Unauthorized
    ***
    Caused by an old or invalid [access token](#section/Authentication/Access-Token), try regenerating your token on your [access token page](https://rev.ai/access_token).
    """  
    submit_transcription_job_multipart_413_application_problem_plus_json_object: Optional[SubmitTranscriptionJobMultipart413ApplicationProblemPlusJSON] = dataclasses.field(default=None)
    r"""Payload Too Large
    ***
    Only returned when job is submitted using a local file as part of `multipart/form-data`. Use a `media_url`
    for files larger than 2GBs
    """  
    