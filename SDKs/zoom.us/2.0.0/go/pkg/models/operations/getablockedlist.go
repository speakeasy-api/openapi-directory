// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetABlockedListSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type GetABlockedListRequest struct {
	// Unique Identifier of the blocked list.
	BlockedListID string `pathParam:"style=simple,explode=false,name=blockedListId"`
}

// GetABlockedList200ApplicationXMLBlockTypeEnum - Block type.<br>
// `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.<br><br>
// `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.
type GetABlockedList200ApplicationXMLBlockTypeEnum string

const (
	GetABlockedList200ApplicationXMLBlockTypeEnumInbound  GetABlockedList200ApplicationXMLBlockTypeEnum = "inbound"
	GetABlockedList200ApplicationXMLBlockTypeEnumOutbound GetABlockedList200ApplicationXMLBlockTypeEnum = "outbound"
)

func (e *GetABlockedList200ApplicationXMLBlockTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound":
		fallthrough
	case "outbound":
		*e = GetABlockedList200ApplicationXMLBlockTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetABlockedList200ApplicationXMLBlockTypeEnum: %s", s)
	}
}

// GetABlockedList200ApplicationXMLMatchTypeEnum - Indicates the match type for the blocked list. The values can be one of the following:<br>
// `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.<br><br>
// `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.
type GetABlockedList200ApplicationXMLMatchTypeEnum string

const (
	GetABlockedList200ApplicationXMLMatchTypeEnumPhoneNumber GetABlockedList200ApplicationXMLMatchTypeEnum = "phoneNumber"
	GetABlockedList200ApplicationXMLMatchTypeEnumPrefix      GetABlockedList200ApplicationXMLMatchTypeEnum = "prefix"
)

func (e *GetABlockedList200ApplicationXMLMatchTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "phoneNumber":
		fallthrough
	case "prefix":
		*e = GetABlockedList200ApplicationXMLMatchTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetABlockedList200ApplicationXMLMatchTypeEnum: %s", s)
	}
}

// GetABlockedList200ApplicationXMLStatusEnum - Indicates whether the blocking is active or inactive. <br>
// `active`: The blocked list is active.<br>
// `inactive`: The blocked list is inactive.
type GetABlockedList200ApplicationXMLStatusEnum string

const (
	GetABlockedList200ApplicationXMLStatusEnumActive   GetABlockedList200ApplicationXMLStatusEnum = "active"
	GetABlockedList200ApplicationXMLStatusEnumInactive GetABlockedList200ApplicationXMLStatusEnum = "inactive"
)

func (e *GetABlockedList200ApplicationXMLStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = GetABlockedList200ApplicationXMLStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetABlockedList200ApplicationXMLStatusEnum: %s", s)
	}
}

// GetABlockedList200ApplicationXML - **HTTP Status Code:** `200` **OK**<br>
// Blocked list retrieved successfully.
type GetABlockedList200ApplicationXML struct {
	// Block type.<br>
	// `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.<br><br>
	// `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.
	BlockType *GetABlockedList200ApplicationXMLBlockTypeEnum
	// Provide a comment to help you identify the blocked number or prefix.
	Comment *string
	// Unique identifier of the blocked list.
	ID *string
	// Indicates the match type for the blocked list. The values can be one of the following:<br>
	// `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.<br><br>
	// `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.
	MatchType *GetABlockedList200ApplicationXMLMatchTypeEnum
	// The phone number or the prefix number that is blocked based on the `match_type`.
	PhoneNumber *string
	// Indicates whether the blocking is active or inactive. <br>
	// `active`: The blocked list is active.<br>
	// `inactive`: The blocked list is inactive.
	Status *GetABlockedList200ApplicationXMLStatusEnum
}

// GetABlockedList200ApplicationJSONBlockTypeEnum - Block type.<br>
// `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.<br><br>
// `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.
type GetABlockedList200ApplicationJSONBlockTypeEnum string

const (
	GetABlockedList200ApplicationJSONBlockTypeEnumInbound  GetABlockedList200ApplicationJSONBlockTypeEnum = "inbound"
	GetABlockedList200ApplicationJSONBlockTypeEnumOutbound GetABlockedList200ApplicationJSONBlockTypeEnum = "outbound"
)

func (e *GetABlockedList200ApplicationJSONBlockTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inbound":
		fallthrough
	case "outbound":
		*e = GetABlockedList200ApplicationJSONBlockTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetABlockedList200ApplicationJSONBlockTypeEnum: %s", s)
	}
}

// GetABlockedList200ApplicationJSONMatchTypeEnum - Indicates the match type for the blocked list. The values can be one of the following:<br>
// `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.<br><br>
// `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.
type GetABlockedList200ApplicationJSONMatchTypeEnum string

const (
	GetABlockedList200ApplicationJSONMatchTypeEnumPhoneNumber GetABlockedList200ApplicationJSONMatchTypeEnum = "phoneNumber"
	GetABlockedList200ApplicationJSONMatchTypeEnumPrefix      GetABlockedList200ApplicationJSONMatchTypeEnum = "prefix"
)

func (e *GetABlockedList200ApplicationJSONMatchTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "phoneNumber":
		fallthrough
	case "prefix":
		*e = GetABlockedList200ApplicationJSONMatchTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetABlockedList200ApplicationJSONMatchTypeEnum: %s", s)
	}
}

// GetABlockedList200ApplicationJSONStatusEnum - Indicates whether the blocking is active or inactive. <br>
// `active`: The blocked list is active.<br>
// `inactive`: The blocked list is inactive.
type GetABlockedList200ApplicationJSONStatusEnum string

const (
	GetABlockedList200ApplicationJSONStatusEnumActive   GetABlockedList200ApplicationJSONStatusEnum = "active"
	GetABlockedList200ApplicationJSONStatusEnumInactive GetABlockedList200ApplicationJSONStatusEnum = "inactive"
)

func (e *GetABlockedList200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = GetABlockedList200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetABlockedList200ApplicationJSONStatusEnum: %s", s)
	}
}

// GetABlockedList200ApplicationJSON - **HTTP Status Code:** `200` **OK**<br>
// Blocked list retrieved successfully.
type GetABlockedList200ApplicationJSON struct {
	// Block type.<br>
	// `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.<br><br>
	// `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.
	BlockType *GetABlockedList200ApplicationJSONBlockTypeEnum `json:"block_type,omitempty"`
	// Provide a comment to help you identify the blocked number or prefix.
	Comment *string `json:"comment,omitempty"`
	// Unique identifier of the blocked list.
	ID *string `json:"id,omitempty"`
	// Indicates the match type for the blocked list. The values can be one of the following:<br>
	// `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.<br><br>
	// `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.
	MatchType *GetABlockedList200ApplicationJSONMatchTypeEnum `json:"match_type,omitempty"`
	// The phone number or the prefix number that is blocked based on the `match_type`.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Indicates whether the blocking is active or inactive. <br>
	// `active`: The blocked list is active.<br>
	// `inactive`: The blocked list is inactive.
	Status *GetABlockedList200ApplicationJSONStatusEnum `json:"status,omitempty"`
}

type GetABlockedListResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK**<br>
	// Blocked list retrieved successfully.
	GetABlockedList200ApplicationJSONObject *GetABlockedList200ApplicationJSON
}
