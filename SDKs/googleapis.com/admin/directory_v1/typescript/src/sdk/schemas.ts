/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Schemas {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes a schema.
   */
  directorySchemasDelete(
    req: operations.DirectorySchemasDeleteRequest,
    security: operations.DirectorySchemasDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DirectorySchemasDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DirectorySchemasDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DirectorySchemasDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DirectorySchemasDeleteResponse =
        new operations.DirectorySchemasDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a schema.
   */
  directorySchemasGet(
    req: operations.DirectorySchemasGetRequest,
    security: operations.DirectorySchemasGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DirectorySchemasGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DirectorySchemasGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DirectorySchemasGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DirectorySchemasGetResponse =
        new operations.DirectorySchemasGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.schema = utils.objectToClass(httpRes?.data, shared.Schema);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a schema.
   */
  directorySchemasInsert(
    req: operations.DirectorySchemasInsertRequest,
    security: operations.DirectorySchemasInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DirectorySchemasInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DirectorySchemasInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/customer/{customerId}/schemas",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "schema",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DirectorySchemasInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DirectorySchemasInsertResponse =
        new operations.DirectorySchemasInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.schema = utils.objectToClass(httpRes?.data, shared.Schema);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves all schemas for a customer.
   */
  directorySchemasList(
    req: operations.DirectorySchemasListRequest,
    security: operations.DirectorySchemasListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DirectorySchemasListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DirectorySchemasListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/customer/{customerId}/schemas",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DirectorySchemasListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DirectorySchemasListResponse =
        new operations.DirectorySchemasListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.schemas = utils.objectToClass(httpRes?.data, shared.Schemas);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches a schema.
   */
  directorySchemasPatch(
    req: operations.DirectorySchemasPatchRequest,
    security: operations.DirectorySchemasPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DirectorySchemasPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DirectorySchemasPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "schema",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DirectorySchemasPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DirectorySchemasPatchResponse =
        new operations.DirectorySchemasPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.schema = utils.objectToClass(httpRes?.data, shared.Schema);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a schema.
   */
  directorySchemasUpdate(
    req: operations.DirectorySchemasUpdateRequest,
    security: operations.DirectorySchemasUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DirectorySchemasUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DirectorySchemasUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "schema",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DirectorySchemasUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DirectorySchemasUpdateResponse =
        new operations.DirectorySchemasUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.schema = utils.objectToClass(httpRes?.data, shared.Schema);
          }
          break;
      }

      return res;
    });
  }
}
