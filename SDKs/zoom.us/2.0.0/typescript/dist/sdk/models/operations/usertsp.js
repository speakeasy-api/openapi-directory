"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserTSPResponse = exports.UserTSPTSPAccount = exports.UserTSPTSPAccountTSPBridgeEnum = exports.UserTSPTSPAccountDialInNumbers = exports.UserTSPTSPAccountDialInNumbersTypeEnum = exports.UserTSPRequest = exports.UserTSPTSPIDEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * TSP account ID.
 */
var UserTSPTSPIDEnum;
(function (UserTSPTSPIDEnum) {
    UserTSPTSPIDEnum["One"] = "1";
    UserTSPTSPIDEnum["Two"] = "2";
})(UserTSPTSPIDEnum = exports.UserTSPTSPIDEnum || (exports.UserTSPTSPIDEnum = {}));
var UserTSPRequest = /** @class */ (function (_super) {
    __extends(UserTSPRequest, _super);
    function UserTSPRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=tspId",
        }),
        __metadata("design:type", String)
    ], UserTSPRequest.prototype, "tspId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=userId",
        }),
        __metadata("design:type", String)
    ], UserTSPRequest.prototype, "userId", void 0);
    return UserTSPRequest;
}(utils_1.SpeakeasyBase));
exports.UserTSPRequest = UserTSPRequest;
/**
 * Dial-in number types:<br>`toll` - Toll number.<br>`tollfree` -Toll free number. <br> `media_link` - Media link phone number. This is used for PSTN integration instead of a paid bridge number.
 */
var UserTSPTSPAccountDialInNumbersTypeEnum;
(function (UserTSPTSPAccountDialInNumbersTypeEnum) {
    UserTSPTSPAccountDialInNumbersTypeEnum["Toll"] = "toll";
    UserTSPTSPAccountDialInNumbersTypeEnum["Tollfree"] = "tollfree";
    UserTSPTSPAccountDialInNumbersTypeEnum["MediaLink"] = "media_link";
})(UserTSPTSPAccountDialInNumbersTypeEnum = exports.UserTSPTSPAccountDialInNumbersTypeEnum || (exports.UserTSPTSPAccountDialInNumbersTypeEnum = {}));
var UserTSPTSPAccountDialInNumbers = /** @class */ (function (_super) {
    __extends(UserTSPTSPAccountDialInNumbers, _super);
    function UserTSPTSPAccountDialInNumbers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "code" }),
        __metadata("design:type", String)
    ], UserTSPTSPAccountDialInNumbers.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "country_label" }),
        __metadata("design:type", String)
    ], UserTSPTSPAccountDialInNumbers.prototype, "countryLabel", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "number" }),
        __metadata("design:type", String)
    ], UserTSPTSPAccountDialInNumbers.prototype, "number", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], UserTSPTSPAccountDialInNumbers.prototype, "type", void 0);
    return UserTSPTSPAccountDialInNumbers;
}(utils_1.SpeakeasyBase));
exports.UserTSPTSPAccountDialInNumbers = UserTSPTSPAccountDialInNumbers;
/**
 * Telephony bridge
 */
var UserTSPTSPAccountTSPBridgeEnum;
(function (UserTSPTSPAccountTSPBridgeEnum) {
    UserTSPTSPAccountTSPBridgeEnum["UsTspTb"] = "US_TSP_TB";
    UserTSPTSPAccountTSPBridgeEnum["EuTspTb"] = "EU_TSP_TB";
})(UserTSPTSPAccountTSPBridgeEnum = exports.UserTSPTSPAccountTSPBridgeEnum || (exports.UserTSPTSPAccountTSPBridgeEnum = {}));
/**
 * TSP account of the user.
 */
var UserTSPTSPAccount = /** @class */ (function (_super) {
    __extends(UserTSPTSPAccount, _super);
    function UserTSPTSPAccount() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "conference_code" }),
        __metadata("design:type", String)
    ], UserTSPTSPAccount.prototype, "conferenceCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: UserTSPTSPAccountDialInNumbers }),
        (0, class_transformer_1.Expose)({ name: "dial_in_numbers" }),
        (0, class_transformer_1.Type)(function () { return UserTSPTSPAccountDialInNumbers; }),
        __metadata("design:type", Array)
    ], UserTSPTSPAccount.prototype, "dialInNumbers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", Number)
    ], UserTSPTSPAccount.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "leader_pin" }),
        __metadata("design:type", String)
    ], UserTSPTSPAccount.prototype, "leaderPin", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tsp_bridge" }),
        __metadata("design:type", String)
    ], UserTSPTSPAccount.prototype, "tspBridge", void 0);
    return UserTSPTSPAccount;
}(utils_1.SpeakeasyBase));
exports.UserTSPTSPAccount = UserTSPTSPAccount;
var UserTSPResponse = /** @class */ (function (_super) {
    __extends(UserTSPResponse, _super);
    function UserTSPResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Uint8Array)
    ], UserTSPResponse.prototype, "body", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], UserTSPResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], UserTSPResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UserTSPResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", UserTSPTSPAccount)
    ], UserTSPResponse.prototype, "tspAccount", void 0);
    return UserTSPResponse;
}(utils_1.SpeakeasyBase));
exports.UserTSPResponse = UserTSPResponse;
