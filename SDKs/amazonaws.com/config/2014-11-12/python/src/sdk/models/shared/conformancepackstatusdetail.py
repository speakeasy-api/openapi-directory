"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import conformancepackstate_enum as shared_conformancepackstate_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConformancePackStatusDetail:
    r"""Status details of a conformance pack."""
    
    conformance_pack_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConformancePackArn') }})  
    conformance_pack_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConformancePackId') }})  
    conformance_pack_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConformancePackName') }})  
    conformance_pack_state: shared_conformancepackstate_enum.ConformancePackStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConformancePackState') }})  
    last_update_requested_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdateRequestedTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    stack_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackArn') }})  
    conformance_pack_status_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConformancePackStatusReason'), 'exclude': lambda f: f is None }})  
    last_update_completed_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdateCompletedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    