"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import scim_error as shared_scim_error
from ..shared import validation_error_simple as shared_validation_error_simple
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActionsSetCustomOIDCSubClaimForRepoActionsOIDCSubjectCustomizationForARepository:
    r"""Actions OIDC subject customization for a repository"""
    
    use_default: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_default') }})
    r"""Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored."""  
    include_claim_keys: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('include_claim_keys'), 'exclude': lambda f: f is None }})
    r"""Array of unique strings. Each claim key can only contain alphanumeric characters and underscores."""  
    

@dataclasses.dataclass
class ActionsSetCustomOidcSubClaimForRepoRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    request_body: ActionsSetCustomOIDCSubClaimForRepoActionsOIDCSubjectCustomizationForARepository = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ActionsSetCustomOidcSubClaimForRepoResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Bad Request"""  
    empty_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Empty response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    scim_error: Optional[shared_scim_error.ScimError] = dataclasses.field(default=None)
    r"""Bad Request"""  
    validation_error_simple: Optional[shared_validation_error_simple.ValidationErrorSimple] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    