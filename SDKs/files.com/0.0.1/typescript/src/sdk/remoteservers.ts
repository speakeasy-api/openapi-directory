/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Operations about remote_servers
 */
export class RemoteServers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete Remote Server
   *
   * @remarks
   * Delete Remote Server
   */
  deleteRemoteServersId(
    req: operations.DeleteRemoteServersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRemoteServersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRemoteServersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/remote_servers/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRemoteServersIdResponse =
        new operations.DeleteRemoteServersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * List Remote Servers
   *
   * @remarks
   * List Remote Servers
   */
  getRemoteServers(
    req: operations.GetRemoteServersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRemoteServersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRemoteServersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/remote_servers";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRemoteServersResponse =
        new operations.GetRemoteServersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.remoteServerEntities = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.remoteServerEntities = utils.objectToClass(
              httpRes?.data,
              shared.RemoteServerEntity,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Show Remote Server
   *
   * @remarks
   * Show Remote Server
   */
  getRemoteServersId(
    req: operations.GetRemoteServersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRemoteServersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRemoteServersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/remote_servers/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRemoteServersIdResponse =
        new operations.GetRemoteServersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.remoteServerEntity = utils.objectToClass(
              httpRes?.data,
              shared.RemoteServerEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
   *
   * @remarks
   * Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
   */
  getRemoteServersIdConfigurationFile(
    req: operations.GetRemoteServersIdConfigurationFileRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRemoteServersIdConfigurationFileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRemoteServersIdConfigurationFileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/remote_servers/{id}/configuration_file",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRemoteServersIdConfigurationFileResponse =
        new operations.GetRemoteServersIdConfigurationFileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.remoteServerConfigurationFileEntity = utils.objectToClass(
              httpRes?.data,
              shared.RemoteServerConfigurationFileEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Update Remote Server
   *
   * @remarks
   * Update Remote Server
   */
  patchRemoteServersId(
    req: operations.PatchRemoteServersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchRemoteServersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchRemoteServersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/remote_servers/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchRemoteServersIdResponse =
        new operations.PatchRemoteServersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.remoteServerEntity = utils.objectToClass(
              httpRes?.data,
              shared.RemoteServerEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Create Remote Server
   *
   * @remarks
   * Create Remote Server
   */
  postRemoteServers(
    req: operations.PostRemoteServersRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRemoteServersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRemoteServersRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/remote_servers";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRemoteServersResponse =
        new operations.PostRemoteServersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.remoteServerEntity = utils.objectToClass(
              httpRes?.data,
              shared.RemoteServerEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }

  /**
   * Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent)
   *
   * @remarks
   * Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent)
   */
  postRemoteServersIdConfigurationFile(
    req: operations.PostRemoteServersIdConfigurationFileRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRemoteServersIdConfigurationFileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRemoteServersIdConfigurationFileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/remote_servers/{id}/configuration_file",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRemoteServersIdConfigurationFileResponse =
        new operations.PostRemoteServersIdConfigurationFileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.remoteServerConfigurationFileEntity = utils.objectToClass(
              httpRes?.data,
              shared.RemoteServerConfigurationFileEntity
            );
          }
          break;
        case [400, 401, 403, 404, 405, 409, 412, 422, 423, 429].includes(
          httpRes?.status
        ):
          break;
      }

      return res;
    });
  }
}
