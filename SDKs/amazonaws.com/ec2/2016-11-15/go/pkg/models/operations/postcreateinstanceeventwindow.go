// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTCreateInstanceEventWindowActionEnum
type POSTCreateInstanceEventWindowActionEnum string

const (
	POSTCreateInstanceEventWindowActionEnumCreateInstanceEventWindow POSTCreateInstanceEventWindowActionEnum = "CreateInstanceEventWindow"
)

func (e POSTCreateInstanceEventWindowActionEnum) ToPointer() *POSTCreateInstanceEventWindowActionEnum {
	return &e
}

func (e *POSTCreateInstanceEventWindowActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateInstanceEventWindow":
		*e = POSTCreateInstanceEventWindowActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTCreateInstanceEventWindowActionEnum: %v", v)
	}
}

// POSTCreateInstanceEventWindowVersionEnum
type POSTCreateInstanceEventWindowVersionEnum string

const (
	POSTCreateInstanceEventWindowVersionEnumTwoThousandAndSixteen1115 POSTCreateInstanceEventWindowVersionEnum = "2016-11-15"
)

func (e POSTCreateInstanceEventWindowVersionEnum) ToPointer() *POSTCreateInstanceEventWindowVersionEnum {
	return &e
}

func (e *POSTCreateInstanceEventWindowVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = POSTCreateInstanceEventWindowVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTCreateInstanceEventWindowVersionEnum: %v", v)
	}
}

type POSTCreateInstanceEventWindowRequest struct {
	Action            POSTCreateInstanceEventWindowActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	RequestBody       []byte                                   `request:"mediaType=text/xml"`
	Version           POSTCreateInstanceEventWindowVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTCreateInstanceEventWindowResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
