// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETTestTypeActionEnum
type GETTestTypeActionEnum string

const (
	GETTestTypeActionEnumTestType GETTestTypeActionEnum = "TestType"
)

func (e GETTestTypeActionEnum) ToPointer() *GETTestTypeActionEnum {
	return &e
}

func (e *GETTestTypeActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TestType":
		*e = GETTestTypeActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETTestTypeActionEnum: %v", v)
	}
}

// GETTestTypeTypeEnum - <p>The type of the extension to test.</p> <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
type GETTestTypeTypeEnum string

const (
	GETTestTypeTypeEnumResource GETTestTypeTypeEnum = "RESOURCE"
	GETTestTypeTypeEnumModule   GETTestTypeTypeEnum = "MODULE"
	GETTestTypeTypeEnumHook     GETTestTypeTypeEnum = "HOOK"
)

func (e GETTestTypeTypeEnum) ToPointer() *GETTestTypeTypeEnum {
	return &e
}

func (e *GETTestTypeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESOURCE":
		fallthrough
	case "MODULE":
		fallthrough
	case "HOOK":
		*e = GETTestTypeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETTestTypeTypeEnum: %v", v)
	}
}

// GETTestTypeVersionEnum
type GETTestTypeVersionEnum string

const (
	GETTestTypeVersionEnumTwoThousandAndTen0515 GETTestTypeVersionEnum = "2010-05-15"
)

func (e GETTestTypeVersionEnum) ToPointer() *GETTestTypeVersionEnum {
	return &e
}

func (e *GETTestTypeVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-15":
		*e = GETTestTypeVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETTestTypeVersionEnum: %v", v)
	}
}

type GETTestTypeRequest struct {
	Action GETTestTypeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The Amazon Resource Name (ARN) of the extension.</p> <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
	Arn *string `queryParam:"style=form,explode=true,name=Arn"`
	// <p>The S3 bucket to which CloudFormation delivers the contract test execution logs.</p> <p>CloudFormation delivers the logs by the time contract testing has completed and the extension has been assigned a test type status of <code>PASSED</code> or <code>FAILED</code>.</p> <p>The user calling <code>TestType</code> must be able to access items in the specified S3 bucket. Specifically, the user needs the following permissions:</p> <ul> <li> <p> <code>GetObject</code> </p> </li> <li> <p> <code>PutObject</code> </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazons3.html">Actions, Resources, and Condition Keys for Amazon S3</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p>
	LogDeliveryBucket *string `queryParam:"style=form,explode=true,name=LogDeliveryBucket"`
	// <p>The type of the extension to test.</p> <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
	Type *GETTestTypeTypeEnum `queryParam:"style=form,explode=true,name=Type"`
	// <p>The name of the extension to test.</p> <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
	TypeName *string                `queryParam:"style=form,explode=true,name=TypeName"`
	Version  GETTestTypeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// <p>The version of the extension to test.</p> <p>You can specify the version id with either <code>Arn</code>, or with <code>TypeName</code> and <code>Type</code>.</p> <p>If you don't specify a version, CloudFormation uses the default version of the extension in this account and region for testing.</p>
	VersionID         *string `queryParam:"style=form,explode=true,name=VersionId"`
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETTestTypeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
