/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChangedBy } from "./changedby";
import { RecurrenceEnum } from "./recurrenceenum";
import { TargetSimple } from "./targetsimple";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Scheduled scan object
 */
export class Scheduled extends SpeakeasyBase {
  /**
   * Date time of the last change
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changed" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  changed?: Date;

  /**
   * User that last modified the object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changed_by" })
  @Type(() => ChangedBy)
  changedBy?: ChangedBy;

  /**
   * Date time of next scan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateTime?: Date;

  /**
   * Scheduled object id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Scan recurrence:
   *
   * @remarks
   *   * d - daily
   *   * w - weekly
   *   * m - monthly
   *   * q - quarterly
   *   * '' - no recurrence
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recurrence" })
  recurrence?: RecurrenceEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  @Type(() => TargetSimple)
  target?: TargetSimple;
}
