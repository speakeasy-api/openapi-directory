"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customroutingdestinationtrafficstate_enum as shared_customroutingdestinationtrafficstate_enum
from ..shared import customroutingprotocol_enum as shared_customroutingprotocol_enum
from ..shared import socketaddress as shared_socketaddress
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PortMapping:
    r"""Returns the ports and associated IP addresses and ports of Amazon EC2 instances in your virtual private cloud (VPC) subnets. Custom routing is a port mapping protocol in Global Accelerator that statically associates port ranges with VPC subnets, which allows Global Accelerator to route to specific instances and ports within one or more subnets."""
    
    accelerator_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AcceleratorPort'), 'exclude': lambda f: f is None }})  
    destination_socket_address: Optional[shared_socketaddress.SocketAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationSocketAddress'), 'exclude': lambda f: f is None }})  
    destination_traffic_state: Optional[shared_customroutingdestinationtrafficstate_enum.CustomRoutingDestinationTrafficStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationTrafficState'), 'exclude': lambda f: f is None }})  
    endpoint_group_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointGroupArn'), 'exclude': lambda f: f is None }})  
    endpoint_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointId'), 'exclude': lambda f: f is None }})  
    protocols: Optional[list[shared_customroutingprotocol_enum.CustomRoutingProtocolEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Protocols'), 'exclude': lambda f: f is None }})  
    