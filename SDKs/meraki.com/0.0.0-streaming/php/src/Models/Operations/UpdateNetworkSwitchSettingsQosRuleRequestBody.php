<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class UpdateNetworkSwitchSettingsQosRuleRequestBody
{
    /**
     * DSCP tag that should be assigned to incoming packet. Set this to -1 to trust incoming DSCP. Default value is 0.
     * 
     * @var ?int $dscp
     */
	#[\JMS\Serializer\Annotation\SerializedName('dscp')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $dscp = null;
    
    /**
     * The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
     * 
     * @var ?int $dstPort
     */
	#[\JMS\Serializer\Annotation\SerializedName('dstPort')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $dstPort = null;
    
    /**
     * The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
     * 
     * @var ?string $dstPortRange
     */
	#[\JMS\Serializer\Annotation\SerializedName('dstPortRange')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dstPortRange = null;
    
    /**
     * The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY".
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum $protocol
     */
	#[\JMS\Serializer\Annotation\SerializedName('protocol')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UpdateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum $protocol = null;
    
    /**
     * The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
     * 
     * @var ?int $srcPort
     */
	#[\JMS\Serializer\Annotation\SerializedName('srcPort')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $srcPort = null;
    
    /**
     * The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
     * 
     * @var ?string $srcPortRange
     */
	#[\JMS\Serializer\Annotation\SerializedName('srcPortRange')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $srcPortRange = null;
    
    /**
     * The VLAN of the incoming packet. A null value will match any VLAN.
     * 
     * @var ?int $vlan
     */
	#[\JMS\Serializer\Annotation\SerializedName('vlan')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $vlan = null;
    
	public function __construct()
	{
		$this->dscp = null;
		$this->dstPort = null;
		$this->dstPortRange = null;
		$this->protocol = null;
		$this->srcPort = null;
		$this->srcPortRange = null;
		$this->vlan = null;
	}
}
