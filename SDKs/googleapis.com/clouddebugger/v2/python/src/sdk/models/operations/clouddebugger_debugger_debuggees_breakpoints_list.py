"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import listbreakpointsresponse as shared_listbreakpointsresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ClouddebuggerDebuggerDebuggeesBreakpointsListSecurity:
    
    option1: Optional[ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    
class ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum(str, Enum):
    r"""Only breakpoints with the specified action will pass the filter."""
    CAPTURE = 'CAPTURE'
    LOG = 'LOG'


@dataclasses.dataclass
class ClouddebuggerDebuggerDebuggeesBreakpointsListRequest:
    
    debuggee_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'debuggeeId', 'style': 'simple', 'explode': False }})
    r"""Required. ID of the debuggee whose breakpoints to list."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    action_value: Optional[ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'action.value', 'style': 'form', 'explode': True }})
    r"""Only breakpoints with the specified action will pass the filter."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    client_version: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'clientVersion', 'style': 'form', 'explode': True }})
    r"""Required. The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`)."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    include_all_users: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeAllUsers', 'style': 'form', 'explode': True }})
    r"""When set to `true`, the response includes the list of breakpoints set by any user. Otherwise, it includes only breakpoints set by the caller."""  
    include_inactive: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeInactive', 'style': 'form', 'explode': True }})
    r"""When set to `true`, the response includes active and inactive breakpoints. Otherwise, it includes only active breakpoints."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    strip_results: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stripResults', 'style': 'form', 'explode': True }})
    r"""This field is deprecated. The following fields are always stripped out of the result: `stack_frames`, `evaluated_expressions` and `variable_table`."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    wait_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'waitToken', 'style': 'form', 'explode': True }})
    r"""A wait token that, if specified, blocks the call until the breakpoints list has changed, or a server selected timeout has expired. The value should be set from the last response. The error code `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which should be called again with the same `wait_token`."""  
    

@dataclasses.dataclass
class ClouddebuggerDebuggerDebuggeesBreakpointsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_breakpoints_response: Optional[shared_listbreakpointsresponse.ListBreakpointsResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    