"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createresiliencypolicyresponse as shared_createresiliencypolicyresponse
from ..shared import failurepolicy as shared_failurepolicy
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateResiliencyPolicyRequestBodyDataLocationConstraintEnum(str, Enum):
    r"""Specifies a high-level geographical location constraint for where your resilience policy data can be stored."""
    ANY_LOCATION = 'AnyLocation'
    SAME_CONTINENT = 'SameContinent'
    SAME_COUNTRY = 'SameCountry'

class CreateResiliencyPolicyRequestBodyTierEnum(str, Enum):
    r"""The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>)."""
    MISSION_CRITICAL = 'MissionCritical'
    CRITICAL = 'Critical'
    IMPORTANT = 'Important'
    CORE_SERVICES = 'CoreServices'
    NON_CRITICAL = 'NonCritical'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateResiliencyPolicyRequestBody:
    
    policy: dict[str, shared_failurepolicy.FailurePolicy] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy') }})
    r"""The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds."""  
    policy_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyName') }})
    r"""The name of the policy"""  
    tier: CreateResiliencyPolicyRequestBodyTierEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tier') }})
    r"""The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>)."""  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken'), 'exclude': lambda f: f is None }})
    r"""Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests."""  
    data_location_constraint: Optional[CreateResiliencyPolicyRequestBodyDataLocationConstraintEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataLocationConstraint'), 'exclude': lambda f: f is None }})
    r"""Specifies a high-level geographical location constraint for where your resilience policy data can be stored."""  
    policy_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyDescription'), 'exclude': lambda f: f is None }})
    r"""The description for the policy."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair."""  
    

@dataclasses.dataclass
class CreateResiliencyPolicyRequest:
    
    request_body: CreateResiliencyPolicyRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateResiliencyPolicyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_resiliency_policy_response: Optional[shared_createresiliencypolicyresponse.CreateResiliencyPolicyResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    