// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsMetricEnum - The metric used for the subscription.
type DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsMetricEnum string

const (
	DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsMetricEnumAggregateLatency DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsMetricEnum = "aggregate-latency"
)

func (e *DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsMetricEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "aggregate-latency":
		*e = DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsMetricEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsMetricEnum: %s", s)
	}
}

// DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum - The data aggregation time for the subscription.
type DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum string

const (
	DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnumFiveMinutes    DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum = "five-minutes"
	DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnumFifteenMinutes DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum = "fifteen-minutes"
	DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnumOneHour        DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum = "one-hour"
	DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnumThreeHours     DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum = "three-hours"
	DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnumOneDay         DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum = "one-day"
	DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnumOneWeek        DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum = "one-week"
)

func (e *DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "five-minutes":
		fallthrough
	case "fifteen-minutes":
		fallthrough
	case "one-hour":
		fallthrough
	case "three-hours":
		fallthrough
	case "one-day":
		fallthrough
	case "one-week":
		*e = DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum: %s", s)
	}
}

// DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsStatisticEnum - The statistic used for the subscription.
type DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsStatisticEnum string

const (
	DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsStatisticEnumP50 DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsStatisticEnum = "p50"
)

func (e *DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsStatisticEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "p50":
		*e = DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsStatisticEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsStatisticEnum: %s", s)
	}
}

// DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptions - Describes an Infrastructure Performance subscription.
type DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptions struct {
	Destination *string
	Metric      *DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsMetricEnum
	Period      *DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsPeriodEnum
	Source      *string
	Statistic   *DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptionsStatisticEnum
}

// DescribeAwsNetworkPerformanceMetricSubscriptionsResult - Success
type DescribeAwsNetworkPerformanceMetricSubscriptionsResult struct {
	NextToken     *string
	Subscriptions []DescribeAwsNetworkPerformanceMetricSubscriptionsResultSubscriptions
}
