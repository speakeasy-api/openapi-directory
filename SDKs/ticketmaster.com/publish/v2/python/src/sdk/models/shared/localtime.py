"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import chronology as shared_chronology
from ..shared import datetimefield as shared_datetimefield
from ..shared import datetimefieldtype as shared_datetimefieldtype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LocalTime:
    
    chronology: Optional[shared_chronology.Chronology] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chronology'), 'exclude': lambda f: f is None }})  
    fields_: Optional[list[shared_datetimefield.DateTimeField]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})  
    field_types: Optional[list[shared_datetimefieldtype.DateTimeFieldType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldTypes'), 'exclude': lambda f: f is None }})  
    hour_of_day: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hourOfDay'), 'exclude': lambda f: f is None }})  
    millis_of_day: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('millisOfDay'), 'exclude': lambda f: f is None }})  
    millis_of_second: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('millisOfSecond'), 'exclude': lambda f: f is None }})  
    minute_of_hour: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minuteOfHour'), 'exclude': lambda f: f is None }})  
    second_of_minute: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondOfMinute'), 'exclude': lambda f: f is None }})  
    values: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values'), 'exclude': lambda f: f is None }})  
    