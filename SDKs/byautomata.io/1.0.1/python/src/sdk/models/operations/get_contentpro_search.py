"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import article as shared_article
from ..shared import contentprocompany as shared_contentprocompany
from ..shared import contentprosnippets as shared_contentprosnippets
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetContentproSearchRequest:
    
    terms: str = dataclasses.field(metadata={'query_param': { 'field_name': 'terms', 'style': 'form', 'explode': True }})
    r"""We provide information about related companies and articles based on the search terms you provide. Separate search terms with commas. Ex. https://api.byautomata.io/contentpro-search?terms=cloud+computing,enterprise,security"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetContentproSearch200ApplicationJSONData:
    
    article: Optional[shared_article.Article] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('article'), 'exclude': lambda f: f is None }})  
    company: Optional[shared_contentprocompany.ContentProCompany] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company'), 'exclude': lambda f: f is None }})  
    snippets: Optional[shared_contentprosnippets.ContentProSnippets] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snippets'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetContentproSearch200ApplicationJSON:
    r"""A successful operation"""
    
    calls_per_month: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calls_per_month'), 'exclude': lambda f: f is None }})  
    count_remaining: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count_remaining'), 'exclude': lambda f: f is None }})  
    data: Optional[list[GetContentproSearch200ApplicationJSONData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    renewal_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewal_date'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetContentproSearchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_contentpro_search_200_application_json_object: Optional[GetContentproSearch200ApplicationJSON] = dataclasses.field(default=None)
    r"""A successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    