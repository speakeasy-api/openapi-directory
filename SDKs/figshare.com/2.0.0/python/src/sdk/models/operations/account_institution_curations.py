"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import curation as shared_curation
from ..shared import errormessage as shared_errormessage
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class AccountInstitutionCurationsSecurity:
    
    o_auth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class AccountInstitutionCurationsStatusEnum(str, Enum):
    r"""Filter by the status of the review"""
    PENDING = 'pending'
    APPROVED = 'approved'
    REJECTED = 'rejected'
    CLOSED = 'closed'


@dataclasses.dataclass
class AccountInstitutionCurationsRequest:
    
    article_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'article_id', 'style': 'form', 'explode': True }})
    r"""Retrieve the reviews for this article"""  
    group_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'group_id', 'style': 'form', 'explode': True }})
    r"""Filter by the group ID"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of results included on a page. Used for pagination with query"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Where to start the listing(the offset of the first result). Used for pagination with limit"""  
    status: Optional[AccountInstitutionCurationsStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Filter by the status of the review"""  
    

@dataclasses.dataclass
class AccountInstitutionCurationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    curation: Optional[shared_curation.Curation] = dataclasses.field(default=None)
    r"""OK. A list of curation reviews."""  
    error_message: Optional[shared_errormessage.ErrorMessage] = dataclasses.field(default=None)
    r"""Forbidden"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    